
/Users/andrew_chang/Documents/src/line/target/line.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003758  080a0018  080a0018  00008018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a3770  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000068  20000300  080a3774  00010300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000670  20000368  20000368  00018368  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a37dc  080a37dc  000137dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a3804  080a3804  00013804  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000d8be1  00000000  00000000  00013808  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001655d  00000000  00000000  000ec3e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00017958  00000000  00000000  00102946  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000020a8  00000000  00000000  0011a29e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000038e8  00000000  00000000  0011c346  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00028fd6  00000000  00000000  0011fc2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002d597  00000000  00000000  00148c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00089e1a  00000000  00000000  0017619b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00008de4  00000000  00000000  001fffb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	d8 33 0a 08                                         .3..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 f9b7 	bl	80a33a0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 f9bc 	bl	80a33b6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a3774 	.word	0x080a3774
 80a004c:	20000368 	.word	0x20000368
 80a0050:	20000368 	.word	0x20000368
 80a0054:	200009d8 	.word	0x200009d8
 80a0058:	200009d8 	.word	0x200009d8

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fb6b 	bl	80a2738 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a3700 	.word	0x080a3700
 80a0084:	080a3768 	.word	0x080a3768

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f001 bab4 	b.w	80a15f4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f001 fb75 	bl	80a177c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 bb0d 	b.w	80a26b4 <_post_loop>

080a009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009a:	f001 bd9d 	b.w	80a1bd8 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <_ZN9LIS3DHI2CD1Ev>:

}

LIS3DHI2C::~LIS3DHI2C() {

}
 80a00ae:	4770      	bx	lr

080a00b0 <_ZN9LIS3DHI2CD0Ev>:

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {

}

LIS3DHI2C::~LIS3DHI2C() {
 80a00b0:	b510      	push	{r4, lr}
 80a00b2:	4604      	mov	r4, r0

}
 80a00b4:	f7ff fff1 	bl	80a009a <_ZdlPv>
 80a00b8:	4620      	mov	r0, r4
 80a00ba:	bd10      	pop	{r4, pc}

080a00bc <_ZN9LIS3DHI2C9writeDataEhPKhj>:
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a00bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a00be:	4605      	mov	r5, r0
 80a00c0:	461e      	mov	r6, r3
 80a00c2:	460f      	mov	r7, r1

	return (res == 0);
}

uint8_t LIS3DHI2C::getI2CAddr() const {
	uint8_t addr = (0b0011000 | sad0);
 80a00c4:	7c01      	ldrb	r1, [r0, #16]
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());
 80a00c6:	68c0      	ldr	r0, [r0, #12]
 80a00c8:	f041 0118 	orr.w	r1, r1, #24
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a00cc:	4614      	mov	r4, r2

	wire.beginTransmission(getI2CAddr());
 80a00ce:	f001 fe68 	bl	80a1da2 <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a00d2:	68e8      	ldr	r0, [r5, #12]

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a00d4:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a00d6:	6803      	ldr	r3, [r0, #0]
bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a00d8:	bf88      	it	hi
 80a00da:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a00de:	689b      	ldr	r3, [r3, #8]
 80a00e0:	4639      	mov	r1, r7
 80a00e2:	4798      	blx	r3
 80a00e4:	4426      	add	r6, r4
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a00e6:	42b4      	cmp	r4, r6
		wire.write(buf[ii]);
 80a00e8:	68e8      	ldr	r0, [r5, #12]

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a00ea:	d005      	beq.n	80a00f8 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x3c>
		wire.write(buf[ii]);
 80a00ec:	6803      	ldr	r3, [r0, #0]
 80a00ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a00f2:	689b      	ldr	r3, [r3, #8]
 80a00f4:	4798      	blx	r3
 80a00f6:	e7f6      	b.n	80a00e6 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x2a>
	}

	uint8_t res = wire.endTransmission();
 80a00f8:	f001 fe5b 	bl	80a1db2 <_ZN7TwoWire15endTransmissionEv>

	return (res == 0);
}
 80a00fc:	fab0 f080 	clz	r0, r0
 80a0100:	0940      	lsrs	r0, r0, #5
 80a0102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0104 <_ZN9LIS3DHI2C8readDataEhPhj>:

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a0104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0106:	4604      	mov	r4, r0
 80a0108:	461e      	mov	r6, r3
 80a010a:	460f      	mov	r7, r1

	return (res == 0);
}

uint8_t LIS3DHI2C::getI2CAddr() const {
	uint8_t addr = (0b0011000 | sad0);
 80a010c:	7c01      	ldrb	r1, [r0, #16]
LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());
 80a010e:	68c0      	ldr	r0, [r0, #12]
 80a0110:	f041 0118 	orr.w	r1, r1, #24

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a0114:	4615      	mov	r5, r2
	wire.beginTransmission(getI2CAddr());
 80a0116:	f001 fe44 	bl	80a1da2 <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a011a:	68e0      	ldr	r0, [r4, #12]
}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a011c:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a011e:	6803      	ldr	r3, [r0, #0]

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a0120:	bf88      	it	hi
 80a0122:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a0126:	689b      	ldr	r3, [r3, #8]
 80a0128:	4639      	mov	r1, r7
 80a012a:	4798      	blx	r3

	uint8_t res = wire.endTransmission();
 80a012c:	68e0      	ldr	r0, [r4, #12]
 80a012e:	f001 fe40 	bl	80a1db2 <_ZN7TwoWire15endTransmissionEv>
	if (res != 0) {
 80a0132:	b9a8      	cbnz	r0, 80a0160 <_ZN9LIS3DHI2C8readDataEhPhj+0x5c>

	return (res == 0);
}

uint8_t LIS3DHI2C::getI2CAddr() const {
	uint8_t addr = (0b0011000 | sad0);
 80a0134:	7c21      	ldrb	r1, [r4, #16]
	uint8_t res = wire.endTransmission();
	if (res != 0) {
		return false;
	}

	wire.requestFrom((int)getI2CAddr(), numBytes);
 80a0136:	4632      	mov	r2, r6
 80a0138:	68e0      	ldr	r0, [r4, #12]
 80a013a:	f041 0118 	orr.w	r1, r1, #24
 80a013e:	f001 fe2b 	bl	80a1d98 <_ZN7TwoWire11requestFromEii>
 80a0142:	442e      	add	r6, r5
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
 80a0144:	42b5      	cmp	r5, r6
 80a0146:	d00d      	beq.n	80a0164 <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
 80a0148:	68e0      	ldr	r0, [r4, #12]
 80a014a:	6803      	ldr	r3, [r0, #0]
 80a014c:	691b      	ldr	r3, [r3, #16]
 80a014e:	4798      	blx	r3
 80a0150:	b140      	cbz	r0, 80a0164 <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
		buf[ii] = wire.read();
 80a0152:	68e0      	ldr	r0, [r4, #12]
 80a0154:	6803      	ldr	r3, [r0, #0]
 80a0156:	695b      	ldr	r3, [r3, #20]
 80a0158:	4798      	blx	r3
 80a015a:	f805 0b01 	strb.w	r0, [r5], #1
 80a015e:	e7f1      	b.n	80a0144 <_ZN9LIS3DHI2C8readDataEhPhj+0x40>
	}
	wire.write(addr);

	uint8_t res = wire.endTransmission();
	if (res != 0) {
		return false;
 80a0160:	2000      	movs	r0, #0
 80a0162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0164:	2001      	movs	r0, #1
	wire.requestFrom((int)getI2CAddr(), numBytes);
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
		buf[ii] = wire.read();
	}
	return true;
}
 80a0166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0168 <_ZN12LIS3DHConfigC1Ev>:
#include "LIS3DH.h"

// Official project location:
// https://github.com/rickkas7/LIS3DH

LIS3DHConfig::LIS3DHConfig() {
 80a0168:	2200      	movs	r2, #0
 80a016a:	7002      	strb	r2, [r0, #0]
 80a016c:	7042      	strb	r2, [r0, #1]
 80a016e:	7082      	strb	r2, [r0, #2]
 80a0170:	70c2      	strb	r2, [r0, #3]
 80a0172:	7102      	strb	r2, [r0, #4]
 80a0174:	7142      	strb	r2, [r0, #5]
 80a0176:	7182      	strb	r2, [r0, #6]
 80a0178:	71c2      	strb	r2, [r0, #7]
 80a017a:	7202      	strb	r2, [r0, #8]
 80a017c:	7242      	strb	r2, [r0, #9]
 80a017e:	7282      	strb	r2, [r0, #10]
}
 80a0180:	4770      	bx	lr

080a0182 <_ZN12LIS3DHConfig12setAccelModeEh>:
}

LIS3DHConfig &LIS3DHConfig::setAccelMode(uint8_t rate) {

	// Enable specified rate, with XYZ detection enabled
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
 80a0182:	f041 0107 	orr.w	r1, r1, #7
 80a0186:	7001      	strb	r1, [r0, #0]

	return *this;
}
 80a0188:	4770      	bx	lr

080a018a <_ZN6LIS3DH13readRegister8Eh>:

	return pos;
}


uint8_t LIS3DH::readRegister8(uint8_t addr) {
 80a018a:	b513      	push	{r0, r1, r4, lr}

	uint8_t resp[1];
	readData(addr, resp, sizeof(resp));
 80a018c:	6803      	ldr	r3, [r0, #0]
 80a018e:	aa01      	add	r2, sp, #4
 80a0190:	689c      	ldr	r4, [r3, #8]
 80a0192:	2301      	movs	r3, #1
 80a0194:	47a0      	blx	r4

	return resp[0];
}
 80a0196:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80a019a:	b002      	add	sp, #8
 80a019c:	bd10      	pop	{r4, pc}

080a019e <_ZN6LIS3DH9hasDeviceEv>:
LIS3DH::~LIS3DH() {

}


bool LIS3DH::hasDevice() {
 80a019e:	b538      	push	{r3, r4, r5, lr}
 80a01a0:	4605      	mov	r5, r0
 80a01a2:	240a      	movs	r4, #10
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
 80a01a4:	4628      	mov	r0, r5
 80a01a6:	210f      	movs	r1, #15
 80a01a8:	f7ff ffef 	bl	80a018a <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
 80a01ac:	2833      	cmp	r0, #51	; 0x33
			found = true;
 80a01ae:	f04f 0001 	mov.w	r0, #1

bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
		if (whoami == WHO_AM_I) {
 80a01b2:	d005      	beq.n	80a01c0 <_ZN6LIS3DH9hasDeviceEv+0x22>
			found = true;
			break;
		}
		delay(1);
 80a01b4:	f001 fd20 	bl	80a1bf8 <delay>
}


bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
 80a01b8:	3c01      	subs	r4, #1
 80a01ba:	d1f3      	bne.n	80a01a4 <_ZN6LIS3DH9hasDeviceEv+0x6>

}


bool LIS3DH::hasDevice() {
	bool found = false;
 80a01bc:	4620      	mov	r0, r4
 80a01be:	bd38      	pop	{r3, r4, r5, pc}
			break;
		}
		delay(1);
	}
	return found;
}
 80a01c0:	bd38      	pop	{r3, r4, r5, pc}

080a01c2 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a01c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a01c4:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a01c6:	2107      	movs	r1, #7

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a01c8:	4606      	mov	r6, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a01ca:	f7ff ffde 	bl	80a018a <_ZN6LIS3DH13readRegister8Eh>

	bool hasData = ((statusAuxReg & STATUS_AUX_321DA) != 0);
 80a01ce:	f3c0 05c0 	ubfx	r5, r0, #3, #1

	//Serial.printlnf("fifoSrcReg=0x%02x", fifoSrcReg);

	if (hasData) {
 80a01d2:	b1dd      	cbz	r5, 80a020c <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x4a>
		uint8_t resp[6];
		readData(REG_OUT_X_L, resp, sizeof(resp));
 80a01d4:	6833      	ldr	r3, [r6, #0]
 80a01d6:	466a      	mov	r2, sp
 80a01d8:	689f      	ldr	r7, [r3, #8]
 80a01da:	4630      	mov	r0, r6
 80a01dc:	2306      	movs	r3, #6
 80a01de:	2128      	movs	r1, #40	; 0x28
 80a01e0:	47b8      	blx	r7

		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
 80a01e2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a01e6:	f89d 3000 	ldrb.w	r3, [sp]
 80a01ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a01ee:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
 80a01f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a01f4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a01f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a01fc:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
 80a01fe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0202:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a0206:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a020a:	80a3      	strh	r3, [r4, #4]
	}
	return hasData;
}
 80a020c:	4628      	mov	r0, r5
 80a020e:	b003      	add	sp, #12
 80a0210:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0212 <_ZN6LIS3DH14writeRegister8Ehh>:

	return resp[0] | (((uint16_t)resp[1]) << 8);
}


void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
 80a0212:	b513      	push	{r0, r1, r4, lr}
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a0214:	ab02      	add	r3, sp, #8
 80a0216:	f803 2d04 	strb.w	r2, [r3, #-4]!

	writeData(addr, req, sizeof(req));
 80a021a:	6802      	ldr	r2, [r0, #0]
 80a021c:	68d4      	ldr	r4, [r2, #12]
 80a021e:	461a      	mov	r2, r3
 80a0220:	2301      	movs	r3, #1
 80a0222:	47a0      	blx	r4
}
 80a0224:	b002      	add	sp, #8
 80a0226:	bd10      	pop	{r4, pc}

080a0228 <_ZN6LIS3DH5setupER12LIS3DHConfig>:
		delay(1);
	}
	return found;
}

bool LIS3DH::setup(LIS3DHConfig &config) {
 80a0228:	b570      	push	{r4, r5, r6, lr}
 80a022a:	4604      	mov	r4, r0
 80a022c:	460d      	mov	r5, r1

	if (!hasDevice()) {
 80a022e:	f7ff ffb6 	bl	80a019e <_ZN6LIS3DH9hasDeviceEv>
 80a0232:	4606      	mov	r6, r0
 80a0234:	b928      	cbnz	r0, 80a0242 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		Serial.println("device not found");
 80a0236:	f002 f993 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a023a:	4928      	ldr	r1, [pc, #160]	; (80a02dc <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
 80a023c:	f001 fe83 	bl	80a1f46 <_ZN5Print7printlnEPKc>
		return false;
 80a0240:	e049      	b.n	80a02d6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
	}

	writeRegister8(REG_CTRL_REG1, config.reg1);
 80a0242:	4620      	mov	r0, r4
 80a0244:	2120      	movs	r1, #32
 80a0246:	782a      	ldrb	r2, [r5, #0]
 80a0248:	f7ff ffe3 	bl	80a0212 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
 80a024c:	4620      	mov	r0, r4
 80a024e:	2121      	movs	r1, #33	; 0x21
 80a0250:	786a      	ldrb	r2, [r5, #1]
 80a0252:	f7ff ffde 	bl	80a0212 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
 80a0256:	4620      	mov	r0, r4
 80a0258:	2122      	movs	r1, #34	; 0x22
 80a025a:	78aa      	ldrb	r2, [r5, #2]
 80a025c:	f7ff ffd9 	bl	80a0212 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
 80a0260:	4620      	mov	r0, r4
 80a0262:	2123      	movs	r1, #35	; 0x23
 80a0264:	78ea      	ldrb	r2, [r5, #3]
 80a0266:	f7ff ffd4 	bl	80a0212 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
 80a026a:	4620      	mov	r0, r4
 80a026c:	2124      	movs	r1, #36	; 0x24
 80a026e:	792a      	ldrb	r2, [r5, #4]
 80a0270:	f7ff ffcf 	bl	80a0212 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
 80a0274:	4620      	mov	r0, r4
 80a0276:	2125      	movs	r1, #37	; 0x25
 80a0278:	796a      	ldrb	r2, [r5, #5]
 80a027a:	f7ff ffca 	bl	80a0212 <_ZN6LIS3DH14writeRegister8Ehh>

	if (config.setReference) {
 80a027e:	79ab      	ldrb	r3, [r5, #6]
 80a0280:	b11b      	cbz	r3, 80a028a <_ZN6LIS3DH5setupER12LIS3DHConfig+0x62>
		// In normal mode, reading the reference register sets it for the current normal force
		// (the normal force of gravity acting on the device)
		readRegister8(REG_REFERENCE);
 80a0282:	4620      	mov	r0, r4
 80a0284:	2126      	movs	r1, #38	; 0x26
 80a0286:	f7ff ff80 	bl	80a018a <_ZN6LIS3DH13readRegister8Eh>
	}
	// Set FIFO mode
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
 80a028a:	4620      	mov	r0, r4
 80a028c:	212e      	movs	r1, #46	; 0x2e
 80a028e:	7aaa      	ldrb	r2, [r5, #10]
 80a0290:	f7ff ffbf 	bl	80a0212 <_ZN6LIS3DH14writeRegister8Ehh>



	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
 80a0294:	78ab      	ldrb	r3, [r5, #2]
 80a0296:	065b      	lsls	r3, r3, #25
 80a0298:	d51d      	bpl.n	80a02d6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>

		writeRegister8(REG_INT1_THS, config.int1_ths);
 80a029a:	4620      	mov	r0, r4
 80a029c:	2132      	movs	r1, #50	; 0x32
 80a029e:	79ea      	ldrb	r2, [r5, #7]
 80a02a0:	f7ff ffb7 	bl	80a0212 <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
 80a02a4:	4620      	mov	r0, r4
 80a02a6:	2133      	movs	r1, #51	; 0x33
 80a02a8:	7a2a      	ldrb	r2, [r5, #8]
 80a02aa:	f7ff ffb2 	bl	80a0212 <_ZN6LIS3DH14writeRegister8Ehh>

		if (intPin >= 0) {
 80a02ae:	6863      	ldr	r3, [r4, #4]
 80a02b0:	2b00      	cmp	r3, #0
 80a02b2:	db0a      	blt.n	80a02ca <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa2>
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a02b4:	7a6a      	ldrb	r2, [r5, #9]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a02b6:	4620      	mov	r0, r4
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a02b8:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a02ba:	2130      	movs	r1, #48	; 0x30
 80a02bc:	f7ff ffa9 	bl	80a0212 <_ZN6LIS3DH14writeRegister8Ehh>

			// Clear the interrupt just in case
			readRegister8(REG_INT1_SRC);
 80a02c0:	4620      	mov	r0, r4
 80a02c2:	2131      	movs	r1, #49	; 0x31
 80a02c4:	f7ff ff61 	bl	80a018a <_ZN6LIS3DH13readRegister8Eh>
 80a02c8:	e005      	b.n	80a02d6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
		}
		else {
			int1_cfg = 0;
 80a02ca:	2200      	movs	r2, #0
 80a02cc:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
 80a02ce:	4620      	mov	r0, r4
 80a02d0:	2130      	movs	r1, #48	; 0x30
 80a02d2:	f7ff ff9e 	bl	80a0212 <_ZN6LIS3DH14writeRegister8Ehh>




	return true;
}
 80a02d6:	4630      	mov	r0, r6
 80a02d8:	bd70      	pop	{r4, r5, r6, pc}
 80a02da:	bf00      	nop
 80a02dc:	080a3408 	.word	0x080a3408

080a02e0 <_ZN9LIS3DHI2CC1ER7TwoWirehi>:

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a02e0:	b510      	push	{r4, lr}

	return *this;
}


LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
 80a02e2:	6043      	str	r3, [r0, #4]

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a02e4:	4b02      	ldr	r3, [pc, #8]	; (80a02f0 <_ZN9LIS3DHI2CC1ER7TwoWirehi+0x10>)
 80a02e6:	60c1      	str	r1, [r0, #12]
 80a02e8:	6003      	str	r3, [r0, #0]
 80a02ea:	7402      	strb	r2, [r0, #16]

}
 80a02ec:	bd10      	pop	{r4, pc}
 80a02ee:	bf00      	nop
 80a02f0:	080a33f8 	.word	0x080a33f8

080a02f4 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:

uint8_t LIS3DHI2C::getI2CAddr() const {
	uint8_t addr = (0b0011000 | sad0);

	return addr;
}
 80a02f4:	b508      	push	{r3, lr}
{
public:
    typedef uint8_t flag_t;
    inline SleepNetworkFlag(SystemSleepNetwork f) : SleepNetworkFlag(static_cast<flag_t>(f)) {}

    inline SleepNetworkFlag(flag_t flag) : flag_(flag) {}
 80a02f6:	4b0a      	ldr	r3, [pc, #40]	; (80a0320 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev+0x2c>)
 80a02f8:	2200      	movs	r2, #0
 80a02fa:	490a      	ldr	r1, [pc, #40]	; (80a0324 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev+0x30>)
 80a02fc:	701a      	strb	r2, [r3, #0]
 80a02fe:	2301      	movs	r3, #1
 80a0300:	700b      	strb	r3, [r1, #0]

class PublishFlag
{
public:
	typedef uint8_t flag_t;
	PublishFlag(flag_t flag) : flag_(flag) {}
 80a0302:	4909      	ldr	r1, [pc, #36]	; (80a0328 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev+0x34>)
 80a0304:	700a      	strb	r2, [r1, #0]
 80a0306:	4a09      	ldr	r2, [pc, #36]	; (80a032c <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev+0x38>)
 80a0308:	7013      	strb	r3, [r2, #0]
 80a030a:	4b09      	ldr	r3, [pc, #36]	; (80a0330 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev+0x3c>)
 80a030c:	2202      	movs	r2, #2
 80a030e:	701a      	strb	r2, [r3, #0]
 80a0310:	4b08      	ldr	r3, [pc, #32]	; (80a0334 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev+0x40>)
 80a0312:	2208      	movs	r2, #8
 80a0314:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0316:	f001 faed 	bl	80a18f4 <HAL_Pin_Map>
 80a031a:	4b07      	ldr	r3, [pc, #28]	; (80a0338 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev+0x44>)
 80a031c:	6018      	str	r0, [r3, #0]
 80a031e:	bd08      	pop	{r3, pc}
 80a0320:	20000373 	.word	0x20000373
 80a0324:	20000375 	.word	0x20000375
 80a0328:	20000371 	.word	0x20000371
 80a032c:	20000372 	.word	0x20000372
 80a0330:	20000370 	.word	0x20000370
 80a0334:	20000374 	.word	0x20000374
 80a0338:	2000036c 	.word	0x2000036c

080a033c <_ZN7TwoWire5writeEm>:
  virtual int peek(void);
  virtual void flush(void);
  void onReceive(void (*)(int));
  void onRequest(void (*)(void));

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
 80a033c:	6803      	ldr	r3, [r0, #0]
 80a033e:	b2c9      	uxtb	r1, r1
 80a0340:	689b      	ldr	r3, [r3, #8]
 80a0342:	4718      	bx	r3

080a0344 <_ZN7TwoWire5writeEi>:
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0344:	6803      	ldr	r3, [r0, #0]
 80a0346:	b2c9      	uxtb	r1, r1
 80a0348:	689b      	ldr	r3, [r3, #8]
 80a034a:	4718      	bx	r3

080a034c <_ZN7VL53L0XC1Ev>:
// Constructors ////////////////////////////////////////////////////////////////

VL53L0X::VL53L0X(void)
  : address(ADDRESS_DEFAULT)
  , io_timeout(0) // no timeout
  , did_timeout(false)
 80a034c:	2229      	movs	r2, #41	; 0x29
 80a034e:	7042      	strb	r2, [r0, #1]
 80a0350:	2200      	movs	r2, #0
 80a0352:	6042      	str	r2, [r0, #4]
 80a0354:	7202      	strb	r2, [r0, #8]
{
}
 80a0356:	4770      	bx	lr

080a0358 <_ZN7VL53L0X8writeRegEhh>:
  return true;
}

// Write an 8-bit register
void VL53L0X::writeReg(uint8_t reg, uint8_t value)
{
 80a0358:	b570      	push	{r4, r5, r6, lr}
 80a035a:	4604      	mov	r4, r0
 80a035c:	4615      	mov	r5, r2
 80a035e:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a0360:	f002 faac 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a0364:	7861      	ldrb	r1, [r4, #1]
 80a0366:	f001 fd1c 	bl	80a1da2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a036a:	f002 faa7 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a036e:	6803      	ldr	r3, [r0, #0]
 80a0370:	4631      	mov	r1, r6
 80a0372:	689b      	ldr	r3, [r3, #8]
 80a0374:	4798      	blx	r3
  Wire.write(value);
 80a0376:	f002 faa1 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a037a:	6803      	ldr	r3, [r0, #0]
 80a037c:	4629      	mov	r1, r5
 80a037e:	689b      	ldr	r3, [r3, #8]
 80a0380:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a0382:	f002 fa9b 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a0386:	f001 fd14 	bl	80a1db2 <_ZN7TwoWire15endTransmissionEv>
 80a038a:	7020      	strb	r0, [r4, #0]
 80a038c:	bd70      	pop	{r4, r5, r6, pc}

080a038e <_ZN7VL53L0X10setAddressEh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void VL53L0X::setAddress(uint8_t new_addr)
{
 80a038e:	b538      	push	{r3, r4, r5, lr}
 80a0390:	460c      	mov	r4, r1
 80a0392:	4605      	mov	r5, r0
  writeReg(I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 80a0394:	218a      	movs	r1, #138	; 0x8a
 80a0396:	f004 027f 	and.w	r2, r4, #127	; 0x7f
 80a039a:	f7ff ffdd 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  address = new_addr;
 80a039e:	706c      	strb	r4, [r5, #1]
 80a03a0:	bd38      	pop	{r3, r4, r5, pc}

080a03a2 <_ZN7VL53L0X13writeReg16BitEht>:
  last_status = Wire.endTransmission();
}

// Write a 16-bit register
void VL53L0X::writeReg16Bit(uint8_t reg, uint16_t value)
{
 80a03a2:	b570      	push	{r4, r5, r6, lr}
 80a03a4:	4604      	mov	r4, r0
 80a03a6:	4615      	mov	r5, r2
 80a03a8:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a03aa:	f002 fa87 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a03ae:	7861      	ldrb	r1, [r4, #1]
 80a03b0:	f001 fcf7 	bl	80a1da2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a03b4:	f002 fa82 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a03b8:	6803      	ldr	r3, [r0, #0]
 80a03ba:	4631      	mov	r1, r6
 80a03bc:	689b      	ldr	r3, [r3, #8]
 80a03be:	4798      	blx	r3
  Wire.write((value >> 8) & 0xFF); // value high byte
 80a03c0:	f002 fa7c 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a03c4:	0a29      	lsrs	r1, r5, #8
 80a03c6:	f7ff ffbd 	bl	80a0344 <_ZN7TwoWire5writeEi>
  Wire.write( value       & 0xFF); // value low byte
 80a03ca:	f002 fa77 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a03ce:	b2e9      	uxtb	r1, r5
 80a03d0:	f7ff ffb8 	bl	80a0344 <_ZN7TwoWire5writeEi>
  last_status = Wire.endTransmission();
 80a03d4:	f002 fa72 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a03d8:	f001 fceb 	bl	80a1db2 <_ZN7TwoWire15endTransmissionEv>
 80a03dc:	7020      	strb	r0, [r4, #0]
 80a03de:	bd70      	pop	{r4, r5, r6, pc}

080a03e0 <_ZN7VL53L0X13writeReg32BitEhm>:
}

// Write a 32-bit register
void VL53L0X::writeReg32Bit(uint8_t reg, uint32_t value)
{
 80a03e0:	b570      	push	{r4, r5, r6, lr}
 80a03e2:	4605      	mov	r5, r0
 80a03e4:	4614      	mov	r4, r2
 80a03e6:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a03e8:	f002 fa68 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a03ec:	7869      	ldrb	r1, [r5, #1]
 80a03ee:	f001 fcd8 	bl	80a1da2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a03f2:	f002 fa63 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a03f6:	6803      	ldr	r3, [r0, #0]
 80a03f8:	4631      	mov	r1, r6
 80a03fa:	689b      	ldr	r3, [r3, #8]
 80a03fc:	4798      	blx	r3
  Wire.write((value >> 24) & 0xFF); // value highest byte
 80a03fe:	f002 fa5d 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a0402:	0e21      	lsrs	r1, r4, #24
 80a0404:	f7ff ff9a 	bl	80a033c <_ZN7TwoWire5writeEm>
  Wire.write((value >> 16) & 0xFF);
 80a0408:	f002 fa58 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a040c:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80a0410:	f7ff ff94 	bl	80a033c <_ZN7TwoWire5writeEm>
  Wire.write((value >>  8) & 0xFF);
 80a0414:	f002 fa52 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a0418:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80a041c:	f7ff ff8e 	bl	80a033c <_ZN7TwoWire5writeEm>
  Wire.write( value        & 0xFF); // value lowest byte
 80a0420:	f002 fa4c 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a0424:	b2e1      	uxtb	r1, r4
 80a0426:	f7ff ff89 	bl	80a033c <_ZN7TwoWire5writeEm>
  last_status = Wire.endTransmission();
 80a042a:	f002 fa47 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a042e:	f001 fcc0 	bl	80a1db2 <_ZN7TwoWire15endTransmissionEv>
 80a0432:	7028      	strb	r0, [r5, #0]
 80a0434:	bd70      	pop	{r4, r5, r6, pc}

080a0436 <_ZN7VL53L0X7readRegEh>:
}

// Read an 8-bit register
uint8_t VL53L0X::readReg(uint8_t reg)
{
 80a0436:	b538      	push	{r3, r4, r5, lr}
 80a0438:	4604      	mov	r4, r0
 80a043a:	460d      	mov	r5, r1
  uint8_t value;

  Wire.beginTransmission(address);
 80a043c:	f002 fa3e 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a0440:	7861      	ldrb	r1, [r4, #1]
 80a0442:	f001 fcae 	bl	80a1da2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0446:	f002 fa39 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a044a:	6803      	ldr	r3, [r0, #0]
 80a044c:	4629      	mov	r1, r5
 80a044e:	689b      	ldr	r3, [r3, #8]
 80a0450:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a0452:	f002 fa33 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a0456:	f001 fcac 	bl	80a1db2 <_ZN7TwoWire15endTransmissionEv>
 80a045a:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)1);
 80a045c:	f002 fa2e 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a0460:	7861      	ldrb	r1, [r4, #1]
 80a0462:	2201      	movs	r2, #1
 80a0464:	f001 fc95 	bl	80a1d92 <_ZN7TwoWire11requestFromEhh>
  value = Wire.read();
 80a0468:	f002 fa28 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a046c:	6803      	ldr	r3, [r0, #0]
 80a046e:	695b      	ldr	r3, [r3, #20]
 80a0470:	4798      	blx	r3

  return value;
}
 80a0472:	b2c0      	uxtb	r0, r0
 80a0474:	bd38      	pop	{r3, r4, r5, pc}

080a0476 <_ZN7VL53L0X12readReg16BitEh>:

// Read a 16-bit register
uint16_t VL53L0X::readReg16Bit(uint8_t reg)
{
 80a0476:	b538      	push	{r3, r4, r5, lr}
 80a0478:	4604      	mov	r4, r0
 80a047a:	460d      	mov	r5, r1
  uint16_t value;

  Wire.beginTransmission(address);
 80a047c:	f002 fa1e 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a0480:	7861      	ldrb	r1, [r4, #1]
 80a0482:	f001 fc8e 	bl	80a1da2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0486:	f002 fa19 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a048a:	6803      	ldr	r3, [r0, #0]
 80a048c:	4629      	mov	r1, r5
 80a048e:	689b      	ldr	r3, [r3, #8]
 80a0490:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a0492:	f002 fa13 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a0496:	f001 fc8c 	bl	80a1db2 <_ZN7TwoWire15endTransmissionEv>
 80a049a:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)2);
 80a049c:	f002 fa0e 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a04a0:	7861      	ldrb	r1, [r4, #1]
 80a04a2:	2202      	movs	r2, #2
 80a04a4:	f001 fc75 	bl	80a1d92 <_ZN7TwoWire11requestFromEhh>
  value  = (uint16_t)Wire.read() << 8; // value high byte
 80a04a8:	f002 fa08 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a04ac:	6803      	ldr	r3, [r0, #0]
 80a04ae:	695b      	ldr	r3, [r3, #20]
 80a04b0:	4798      	blx	r3
 80a04b2:	4604      	mov	r4, r0
  value |=           Wire.read();      // value low byte
 80a04b4:	f002 fa02 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a04b8:	6803      	ldr	r3, [r0, #0]
 80a04ba:	695b      	ldr	r3, [r3, #20]
 80a04bc:	4798      	blx	r3
 80a04be:	ea40 2004 	orr.w	r0, r0, r4, lsl #8

  return value;
}
 80a04c2:	b280      	uxth	r0, r0
 80a04c4:	bd38      	pop	{r3, r4, r5, pc}

080a04c6 <_ZN7VL53L0X10writeMultiEhPKhh>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
 80a04c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a04c8:	4606      	mov	r6, r0
 80a04ca:	4614      	mov	r4, r2
 80a04cc:	461d      	mov	r5, r3
 80a04ce:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a04d0:	f002 f9f4 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a04d4:	7871      	ldrb	r1, [r6, #1]
 80a04d6:	f001 fc64 	bl	80a1da2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a04da:	f002 f9ef 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a04de:	6803      	ldr	r3, [r0, #0]
 80a04e0:	4639      	mov	r1, r7
 80a04e2:	689b      	ldr	r3, [r3, #8]
 80a04e4:	4798      	blx	r3
 80a04e6:	4425      	add	r5, r4

  while (count-- > 0)
 80a04e8:	42ac      	cmp	r4, r5
 80a04ea:	d007      	beq.n	80a04fc <_ZN7VL53L0X10writeMultiEhPKhh+0x36>
  {
    Wire.write(*(src++));
 80a04ec:	f002 f9e6 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a04f0:	6803      	ldr	r3, [r0, #0]
 80a04f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a04f6:	689b      	ldr	r3, [r3, #8]
 80a04f8:	4798      	blx	r3
 80a04fa:	e7f5      	b.n	80a04e8 <_ZN7VL53L0X10writeMultiEhPKhh+0x22>
  }

  last_status = Wire.endTransmission();
 80a04fc:	f002 f9de 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a0500:	f001 fc57 	bl	80a1db2 <_ZN7TwoWire15endTransmissionEv>
 80a0504:	7030      	strb	r0, [r6, #0]
 80a0506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0508 <_ZN7VL53L0X9readMultiEhPhh>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void VL53L0X::readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 80a0508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a050a:	4606      	mov	r6, r0
 80a050c:	4615      	mov	r5, r2
 80a050e:	461c      	mov	r4, r3
 80a0510:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a0512:	f002 f9d3 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a0516:	7871      	ldrb	r1, [r6, #1]
 80a0518:	f001 fc43 	bl	80a1da2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a051c:	f002 f9ce 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a0520:	6803      	ldr	r3, [r0, #0]
 80a0522:	4639      	mov	r1, r7
 80a0524:	689b      	ldr	r3, [r3, #8]
 80a0526:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a0528:	f002 f9c8 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a052c:	f001 fc41 	bl	80a1db2 <_ZN7TwoWire15endTransmissionEv>
 80a0530:	7030      	strb	r0, [r6, #0]

  Wire.requestFrom(address, count);
 80a0532:	f002 f9c3 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a0536:	4622      	mov	r2, r4
 80a0538:	7871      	ldrb	r1, [r6, #1]
 80a053a:	f001 fc2a 	bl	80a1d92 <_ZN7TwoWire11requestFromEhh>
 80a053e:	442c      	add	r4, r5

  while (count-- > 0)
 80a0540:	42a5      	cmp	r5, r4
 80a0542:	d007      	beq.n	80a0554 <_ZN7VL53L0X9readMultiEhPhh+0x4c>
  {
    *(dst++) = Wire.read();
 80a0544:	f002 f9ba 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a0548:	6803      	ldr	r3, [r0, #0]
 80a054a:	695b      	ldr	r3, [r3, #20]
 80a054c:	4798      	blx	r3
 80a054e:	f805 0b01 	strb.w	r0, [r5], #1
 80a0552:	e7f5      	b.n	80a0540 <_ZN7VL53L0X9readMultiEhPhh+0x38>
  }
}
 80a0554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0558 <_ZN7VL53L0X18setSignalRateLimitEf>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
 80a0558:	b570      	push	{r4, r5, r6, lr}
 80a055a:	4606      	mov	r6, r0
 80a055c:	460d      	mov	r5, r1
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a055e:	4608      	mov	r0, r1
 80a0560:	2100      	movs	r1, #0
 80a0562:	f002 fec7 	bl	80a32f4 <__aeabi_fcmplt>
 80a0566:	b9b0      	cbnz	r0, 80a0596 <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>
 80a0568:	4628      	mov	r0, r5
 80a056a:	f002 fc49 	bl	80a2e00 <__aeabi_f2d>
 80a056e:	a30c      	add	r3, pc, #48	; (adr r3, 80a05a0 <_ZN7VL53L0X18setSignalRateLimitEf+0x48>)
 80a0570:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0574:	f002 fd16 	bl	80a2fa4 <__aeabi_dcmpgt>
 80a0578:	b968      	cbnz	r0, 80a0596 <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80a057a:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80a057e:	4628      	mov	r0, r5
 80a0580:	f002 fd1a 	bl	80a2fb8 <__aeabi_fmul>
 80a0584:	f002 fede 	bl	80a3344 <__aeabi_f2uiz>
 80a0588:	2144      	movs	r1, #68	; 0x44
 80a058a:	b282      	uxth	r2, r0
 80a058c:	4630      	mov	r0, r6
 80a058e:	f7ff ff08 	bl	80a03a2 <_ZN7VL53L0X13writeReg16BitEht>
 80a0592:	2001      	movs	r0, #1
 80a0594:	bd70      	pop	{r4, r5, r6, pc}
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a0596:	2000      	movs	r0, #0
 80a0598:	bd70      	pop	{r4, r5, r6, pc}
 80a059a:	bf00      	nop
 80a059c:	f3af 8000 	nop.w
 80a05a0:	0a3d70a4 	.word	0x0a3d70a4
 80a05a4:	407fffd7 	.word	0x407fffd7

080a05a8 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>:
}

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t VL53L0X::getVcselPulsePeriod(vcselPeriodType type)
{
 80a05a8:	b508      	push	{r3, lr}
  if (type == VcselPeriodPreRange)
 80a05aa:	b909      	cbnz	r1, 80a05b0 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x8>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80a05ac:	2150      	movs	r1, #80	; 0x50
 80a05ae:	e002      	b.n	80a05b6 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0xe>
  }
  else if (type == VcselPeriodFinalRange)
 80a05b0:	2901      	cmp	r1, #1
 80a05b2:	d106      	bne.n	80a05c2 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x1a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a05b4:	2170      	movs	r1, #112	; 0x70
 80a05b6:	f7ff ff3e 	bl	80a0436 <_ZN7VL53L0X7readRegEh>
 80a05ba:	3001      	adds	r0, #1
 80a05bc:	0040      	lsls	r0, r0, #1
 80a05be:	b2c0      	uxtb	r0, r0
 80a05c0:	bd08      	pop	{r3, pc}
  }
  else { return 255; }
 80a05c2:	20ff      	movs	r0, #255	; 0xff
}
 80a05c4:	bd08      	pop	{r3, pc}

080a05c6 <_ZN7VL53L0X15startContinuousEm>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X::startContinuous(uint32_t period_ms)
{
 80a05c6:	b538      	push	{r3, r4, r5, lr}
 80a05c8:	4604      	mov	r4, r0
 80a05ca:	460d      	mov	r5, r1
  writeReg(0x80, 0x01);
 80a05cc:	2201      	movs	r2, #1
 80a05ce:	2180      	movs	r1, #128	; 0x80
 80a05d0:	f7ff fec2 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a05d4:	4620      	mov	r0, r4
 80a05d6:	21ff      	movs	r1, #255	; 0xff
 80a05d8:	2201      	movs	r2, #1
 80a05da:	f7ff febd 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a05de:	2100      	movs	r1, #0
 80a05e0:	460a      	mov	r2, r1
 80a05e2:	4620      	mov	r0, r4
 80a05e4:	f7ff feb8 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x91, stop_variable);
 80a05e8:	4620      	mov	r0, r4
 80a05ea:	2191      	movs	r1, #145	; 0x91
 80a05ec:	7c22      	ldrb	r2, [r4, #16]
 80a05ee:	f7ff feb3 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a05f2:	4620      	mov	r0, r4
 80a05f4:	2100      	movs	r1, #0
 80a05f6:	2201      	movs	r2, #1
 80a05f8:	f7ff feae 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a05fc:	4620      	mov	r0, r4
 80a05fe:	21ff      	movs	r1, #255	; 0xff
 80a0600:	2200      	movs	r2, #0
 80a0602:	f7ff fea9 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a0606:	4620      	mov	r0, r4
 80a0608:	2180      	movs	r1, #128	; 0x80
 80a060a:	2200      	movs	r2, #0
 80a060c:	f7ff fea4 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 80a0610:	4620      	mov	r0, r4
  writeReg(0x91, stop_variable);
  writeReg(0x00, 0x01);
  writeReg(0xFF, 0x00);
  writeReg(0x80, 0x00);

  if (period_ms != 0)
 80a0612:	b16d      	cbz	r5, 80a0630 <_ZN7VL53L0X15startContinuousEm+0x6a>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 80a0614:	21f8      	movs	r1, #248	; 0xf8
 80a0616:	f7ff ff2e 	bl	80a0476 <_ZN7VL53L0X12readReg16BitEh>

    if (osc_calibrate_val != 0)
 80a061a:	b100      	cbz	r0, 80a061e <_ZN7VL53L0X15startContinuousEm+0x58>
    {
      period_ms *= osc_calibrate_val;
 80a061c:	4345      	muls	r5, r0
    }

    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 80a061e:	4620      	mov	r0, r4
 80a0620:	2104      	movs	r1, #4
 80a0622:	462a      	mov	r2, r5
 80a0624:	f7ff fedc 	bl	80a03e0 <_ZN7VL53L0X13writeReg32BitEhm>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 80a0628:	4620      	mov	r0, r4
 80a062a:	2100      	movs	r1, #0
 80a062c:	2204      	movs	r2, #4
 80a062e:	e001      	b.n	80a0634 <_ZN7VL53L0X15startContinuousEm+0x6e>
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a0630:	4629      	mov	r1, r5
 80a0632:	2202      	movs	r2, #2
  }
}
 80a0634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a0638:	f7ff be8e 	b.w	80a0358 <_ZN7VL53L0X8writeRegEhh>

080a063c <_ZN7VL53L0X30readRangeContinuousMillimetersEv>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t VL53L0X::readRangeContinuousMillimeters(void)
{
 80a063c:	b538      	push	{r3, r4, r5, lr}
 80a063e:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0640:	f001 f950 	bl	80a18e4 <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a0644:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a0646:	4620      	mov	r0, r4
 80a0648:	2113      	movs	r1, #19
 80a064a:	f7ff fef4 	bl	80a0436 <_ZN7VL53L0X7readRegEh>
 80a064e:	0743      	lsls	r3, r0, #29
 80a0650:	d10e      	bne.n	80a0670 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0x34>
  {
    if (checkTimeoutExpired())
 80a0652:	6863      	ldr	r3, [r4, #4]
 80a0654:	2b00      	cmp	r3, #0
 80a0656:	d0f6      	beq.n	80a0646 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
 80a0658:	f001 f944 	bl	80a18e4 <HAL_Timer_Get_Milli_Seconds>
 80a065c:	68e3      	ldr	r3, [r4, #12]
 80a065e:	1ac0      	subs	r0, r0, r3
 80a0660:	6863      	ldr	r3, [r4, #4]
 80a0662:	4298      	cmp	r0, r3
 80a0664:	d9ef      	bls.n	80a0646 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
    {
      did_timeout = true;
 80a0666:	2301      	movs	r3, #1
 80a0668:	7223      	strb	r3, [r4, #8]
      return 65535;
 80a066a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  return range;
}
 80a066e:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);
 80a0670:	4620      	mov	r0, r4
 80a0672:	211e      	movs	r1, #30
 80a0674:	f7ff feff 	bl	80a0476 <_ZN7VL53L0X12readReg16BitEh>
 80a0678:	4605      	mov	r5, r0

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a067a:	210b      	movs	r1, #11
 80a067c:	4620      	mov	r0, r4
 80a067e:	2201      	movs	r2, #1
 80a0680:	f7ff fe6a 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
 80a0684:	4628      	mov	r0, r5
 80a0686:	bd38      	pop	{r3, r4, r5, pc}

080a0688 <_ZN7VL53L0X15timeoutOccurredEv>:
}

// Did a timeout occur in one of the read functions since the last call to
// timeoutOccurred()?
bool VL53L0X::timeoutOccurred()
{
 80a0688:	4603      	mov	r3, r0
  bool tmp = did_timeout;
  did_timeout = false;
 80a068a:	2200      	movs	r2, #0

// Did a timeout occur in one of the read functions since the last call to
// timeoutOccurred()?
bool VL53L0X::timeoutOccurred()
{
  bool tmp = did_timeout;
 80a068c:	7a00      	ldrb	r0, [r0, #8]
  did_timeout = false;
 80a068e:	721a      	strb	r2, [r3, #8]
  return tmp;
}
 80a0690:	4770      	bx	lr

080a0692 <_ZN7VL53L0X11getSpadInfoEPhPb>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X::getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80a0692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0694:	4604      	mov	r4, r0
 80a0696:	460f      	mov	r7, r1
 80a0698:	4616      	mov	r6, r2
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80a069a:	2180      	movs	r1, #128	; 0x80
 80a069c:	2201      	movs	r2, #1
 80a069e:	f7ff fe5b 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a06a2:	4620      	mov	r0, r4
 80a06a4:	21ff      	movs	r1, #255	; 0xff
 80a06a6:	2201      	movs	r2, #1
 80a06a8:	f7ff fe56 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a06ac:	2100      	movs	r1, #0
 80a06ae:	460a      	mov	r2, r1
 80a06b0:	4620      	mov	r0, r4
 80a06b2:	f7ff fe51 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x06);
 80a06b6:	2206      	movs	r2, #6
 80a06b8:	4620      	mov	r0, r4
 80a06ba:	21ff      	movs	r1, #255	; 0xff
 80a06bc:	f7ff fe4c 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg(0x83) | 0x04);
 80a06c0:	2183      	movs	r1, #131	; 0x83
 80a06c2:	4620      	mov	r0, r4
 80a06c4:	f7ff feb7 	bl	80a0436 <_ZN7VL53L0X7readRegEh>
 80a06c8:	f040 0204 	orr.w	r2, r0, #4
 80a06cc:	2183      	movs	r1, #131	; 0x83
 80a06ce:	4620      	mov	r0, r4
 80a06d0:	b2d2      	uxtb	r2, r2
 80a06d2:	f7ff fe41 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x07);
 80a06d6:	4620      	mov	r0, r4
 80a06d8:	21ff      	movs	r1, #255	; 0xff
 80a06da:	2207      	movs	r2, #7
 80a06dc:	f7ff fe3c 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x81, 0x01);
 80a06e0:	4620      	mov	r0, r4
 80a06e2:	2181      	movs	r1, #129	; 0x81
 80a06e4:	2201      	movs	r2, #1
 80a06e6:	f7ff fe37 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a06ea:	4620      	mov	r0, r4
 80a06ec:	2180      	movs	r1, #128	; 0x80
 80a06ee:	2201      	movs	r2, #1
 80a06f0:	f7ff fe32 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x94, 0x6b);
 80a06f4:	4620      	mov	r0, r4
 80a06f6:	2194      	movs	r1, #148	; 0x94
 80a06f8:	226b      	movs	r2, #107	; 0x6b
 80a06fa:	f7ff fe2d 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, 0x00);
 80a06fe:	4620      	mov	r0, r4
 80a0700:	2183      	movs	r1, #131	; 0x83
 80a0702:	2200      	movs	r2, #0
 80a0704:	f7ff fe28 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
 80a0708:	f001 f8ec 	bl	80a18e4 <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a070c:	60e0      	str	r0, [r4, #12]
  while (readReg(0x83) == 0x00)
 80a070e:	4620      	mov	r0, r4
 80a0710:	2183      	movs	r1, #131	; 0x83
 80a0712:	f7ff fe90 	bl	80a0436 <_ZN7VL53L0X7readRegEh>
 80a0716:	4605      	mov	r5, r0
 80a0718:	b958      	cbnz	r0, 80a0732 <_ZN7VL53L0X11getSpadInfoEPhPb+0xa0>
  {
    if (checkTimeoutExpired()) { return false; }
 80a071a:	6863      	ldr	r3, [r4, #4]
 80a071c:	2b00      	cmp	r3, #0
 80a071e:	d0f6      	beq.n	80a070e <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a0720:	f001 f8e0 	bl	80a18e4 <HAL_Timer_Get_Milli_Seconds>
 80a0724:	68e3      	ldr	r3, [r4, #12]
 80a0726:	1ac0      	subs	r0, r0, r3
 80a0728:	6863      	ldr	r3, [r4, #4]
 80a072a:	4298      	cmp	r0, r3
 80a072c:	d9ef      	bls.n	80a070e <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a072e:	4628      	mov	r0, r5

  writeReg(0xFF, 0x00);
  writeReg(0x80, 0x00);

  return true;
}
 80a0730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  startTimeout();
  while (readReg(0x83) == 0x00)
  {
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
 80a0732:	4620      	mov	r0, r4
 80a0734:	2201      	movs	r2, #1
 80a0736:	2183      	movs	r1, #131	; 0x83
 80a0738:	f7ff fe0e 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  tmp = readReg(0x92);
 80a073c:	4620      	mov	r0, r4
 80a073e:	2192      	movs	r1, #146	; 0x92
 80a0740:	f7ff fe79 	bl	80a0436 <_ZN7VL53L0X7readRegEh>

  *count = tmp & 0x7f;
 80a0744:	f000 037f 	and.w	r3, r0, #127	; 0x7f
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a0748:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
 80a074c:	703b      	strb	r3, [r7, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;

  writeReg(0x81, 0x00);
 80a074e:	2181      	movs	r1, #129	; 0x81
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a0750:	7030      	strb	r0, [r6, #0]

  writeReg(0x81, 0x00);
 80a0752:	2200      	movs	r2, #0
 80a0754:	4620      	mov	r0, r4
 80a0756:	f7ff fdff 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x06);
 80a075a:	4620      	mov	r0, r4
 80a075c:	2206      	movs	r2, #6
 80a075e:	21ff      	movs	r1, #255	; 0xff
 80a0760:	f7ff fdfa 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg( 0x83  & ~0x04));
 80a0764:	4620      	mov	r0, r4
 80a0766:	2183      	movs	r1, #131	; 0x83
 80a0768:	f7ff fe65 	bl	80a0436 <_ZN7VL53L0X7readRegEh>
 80a076c:	2183      	movs	r1, #131	; 0x83
 80a076e:	4602      	mov	r2, r0
 80a0770:	4620      	mov	r0, r4
 80a0772:	f7ff fdf1 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0776:	4620      	mov	r0, r4
 80a0778:	21ff      	movs	r1, #255	; 0xff
 80a077a:	2201      	movs	r2, #1
 80a077c:	f7ff fdec 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a0780:	4620      	mov	r0, r4
 80a0782:	2100      	movs	r1, #0
 80a0784:	2201      	movs	r2, #1
 80a0786:	f7ff fde7 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a078a:	4620      	mov	r0, r4
 80a078c:	21ff      	movs	r1, #255	; 0xff
 80a078e:	2200      	movs	r2, #0
 80a0790:	f7ff fde2 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a0794:	4620      	mov	r0, r4
 80a0796:	2180      	movs	r1, #128	; 0x80
 80a0798:	2200      	movs	r2, #0
 80a079a:	f7ff fddd 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  return true;
 80a079e:	2001      	movs	r0, #1
 80a07a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a07a2 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>:
}

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X::getSequenceStepEnables(SequenceStepEnables * enables)
{
 80a07a2:	b510      	push	{r4, lr}
 80a07a4:	460c      	mov	r4, r1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 80a07a6:	2101      	movs	r1, #1
 80a07a8:	f7ff fe45 	bl	80a0436 <_ZN7VL53L0X7readRegEh>

  enables->tcc          = (sequence_config >> 4) & 0x1;
 80a07ac:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80a07b0:	7023      	strb	r3, [r4, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 80a07b2:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80a07b6:	70a3      	strb	r3, [r4, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 80a07b8:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80a07bc:	7063      	strb	r3, [r4, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a07be:	f3c0 1380 	ubfx	r3, r0, #6, #1
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a07c2:	f3c0 10c0 	ubfx	r0, r0, #7, #1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);

  enables->tcc          = (sequence_config >> 4) & 0x1;
  enables->dss          = (sequence_config >> 3) & 0x1;
  enables->msrc         = (sequence_config >> 2) & 0x1;
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a07c6:	70e3      	strb	r3, [r4, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a07c8:	7120      	strb	r0, [r4, #4]
 80a07ca:	bd10      	pop	{r4, pc}

080a07cc <_ZN7VL53L0X13decodeTimeoutEm>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X::decodeTimeout(uint32_t reg_val)
{
 80a07cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a07d0:	4298      	cmp	r0, r3
 80a07d2:	bf28      	it	cs
 80a07d4:	4618      	movcs	r0, r3
  if (reg_val > 0xFFFF) reg_val = 0xFFFF;
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 80a07d6:	b2c3      	uxtb	r3, r0
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80a07d8:	f3c0 2007 	ubfx	r0, r0, #8, #8
// always stored in a uint16_t.
uint16_t VL53L0X::decodeTimeout(uint32_t reg_val)
{
  if (reg_val > 0xFFFF) reg_val = 0xFFFF;
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 80a07dc:	fa03 f000 	lsl.w	r0, r3, r0
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80a07e0:	3001      	adds	r0, #1
}
 80a07e2:	b280      	uxth	r0, r0
 80a07e4:	4770      	bx	lr

080a07e6 <_ZN7VL53L0X13encodeTimeoutEm>:
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a07e6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80a07ea:	d201      	bcs.n	80a07f0 <_ZN7VL53L0X13encodeTimeoutEm+0xa>

  // format: "(LSByte * 2^MSByte) + 1"
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
 80a07ec:	b178      	cbz	r0, 80a080e <_ZN7VL53L0X13encodeTimeoutEm+0x28>
 80a07ee:	e001      	b.n	80a07f4 <_ZN7VL53L0X13encodeTimeoutEm+0xe>
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a07f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;
 80a07f4:	3801      	subs	r0, #1

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a07f6:	2300      	movs	r3, #0
 80a07f8:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 80a07fc:	b29a      	uxth	r2, r3
 80a07fe:	f103 0301 	add.w	r3, r3, #1
 80a0802:	d001      	beq.n	80a0808 <_ZN7VL53L0X13encodeTimeoutEm+0x22>
    {
      ls_byte >>= 1;
 80a0804:	0840      	lsrs	r0, r0, #1
 80a0806:	e7f7      	b.n	80a07f8 <_ZN7VL53L0X13encodeTimeoutEm+0x12>
      ms_byte++;
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 80a0808:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80a080c:	b280      	uxth	r0, r0
  }
  else { return 0; }
}
 80a080e:	4770      	bx	lr

080a0810 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0810:	4b06      	ldr	r3, [pc, #24]	; (80a082c <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh+0x1c>)
 80a0812:	4359      	muls	r1, r3
 80a0814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0818:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
 80a081c:	fbb1 f1f3 	udiv	r1, r1, r3

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a0820:	4348      	muls	r0, r1
 80a0822:	eb00 0051 	add.w	r0, r0, r1, lsr #1
}
 80a0826:	fbb0 f0f3 	udiv	r0, r0, r3
 80a082a:	4770      	bx	lr
 80a082c:	003a2f00 	.word	0x003a2f00

080a0830 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a0830:	b570      	push	{r4, r5, r6, lr}
 80a0832:	460e      	mov	r6, r1
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0834:	2100      	movs	r1, #0
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a0836:	4614      	mov	r4, r2
 80a0838:	4605      	mov	r5, r0
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a083a:	f7ff feb5 	bl	80a05a8 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a083e:	2146      	movs	r1, #70	; 0x46
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0840:	8020      	strh	r0, [r4, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0842:	4628      	mov	r0, r5
 80a0844:	f7ff fdf7 	bl	80a0436 <_ZN7VL53L0X7readRegEh>
 80a0848:	3001      	adds	r0, #1
 80a084a:	b280      	uxth	r0, r0
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a084c:	7821      	ldrb	r1, [r4, #0]
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a084e:	80a0      	strh	r0, [r4, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a0850:	f7ff ffde 	bl	80a0810 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0854:	2151      	movs	r1, #81	; 0x51
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a0856:	60e0      	str	r0, [r4, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0858:	4628      	mov	r0, r5
 80a085a:	f7ff fe0c 	bl	80a0476 <_ZN7VL53L0X12readReg16BitEh>
 80a085e:	f7ff ffb5 	bl	80a07cc <_ZN7VL53L0X13decodeTimeoutEm>
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a0862:	7821      	ldrb	r1, [r4, #0]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0864:	80e0      	strh	r0, [r4, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a0866:	f7ff ffd3 	bl	80a0810 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a086a:	2170      	movs	r1, #112	; 0x70

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a086c:	6120      	str	r0, [r4, #16]
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a086e:	4628      	mov	r0, r5
 80a0870:	f7ff fde1 	bl	80a0436 <_ZN7VL53L0X7readRegEh>
 80a0874:	3001      	adds	r0, #1
 80a0876:	0040      	lsls	r0, r0, #1
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 80a0878:	b2c0      	uxtb	r0, r0
 80a087a:	8060      	strh	r0, [r4, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a087c:	2171      	movs	r1, #113	; 0x71
 80a087e:	4628      	mov	r0, r5
 80a0880:	f7ff fdf9 	bl	80a0476 <_ZN7VL53L0X12readReg16BitEh>
 80a0884:	f7ff ffa2 	bl	80a07cc <_ZN7VL53L0X13decodeTimeoutEm>
 80a0888:	8120      	strh	r0, [r4, #8]

  if (enables->pre_range)
 80a088a:	78f3      	ldrb	r3, [r6, #3]
 80a088c:	b113      	cbz	r3, 80a0894 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE+0x64>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 80a088e:	88e3      	ldrh	r3, [r4, #6]
 80a0890:	1ac0      	subs	r0, r0, r3
 80a0892:	8120      	strh	r0, [r4, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
                               timeouts->final_range_vcsel_period_pclks);
 80a0894:	8920      	ldrh	r0, [r4, #8]
 80a0896:	78a1      	ldrb	r1, [r4, #2]
 80a0898:	f7ff ffba 	bl	80a0810 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
 80a089c:	6160      	str	r0, [r4, #20]
 80a089e:	bd70      	pop	{r4, r5, r6, pc}

080a08a0 <_ZN7VL53L0X26getMeasurementTimingBudgetEv>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t VL53L0X::getMeasurementTimingBudget(void)
{
 80a08a0:	b510      	push	{r4, lr}
 80a08a2:	4604      	mov	r4, r0
 80a08a4:	b088      	sub	sp, #32
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a08a6:	4669      	mov	r1, sp
 80a08a8:	f7ff ff7b 	bl	80a07a2 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a08ac:	4620      	mov	r0, r4
 80a08ae:	4669      	mov	r1, sp
 80a08b0:	aa02      	add	r2, sp, #8
 80a08b2:	f7ff ffbd 	bl	80a0830 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a08b6:	f89d 3000 	ldrb.w	r3, [sp]
 80a08ba:	b11b      	cbz	r3, 80a08c4 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x24>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a08bc:	9805      	ldr	r0, [sp, #20]
 80a08be:	f600 5084 	addw	r0, r0, #3460	; 0xd84
 80a08c2:	e001      	b.n	80a08c8 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x28>
  uint16_t const DssOverhead        = 690;
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80a08c4:	f640 3036 	movw	r0, #2870	; 0xb36
  if (enables.tcc)
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a08c8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a08cc:	b12b      	cbz	r3, 80a08da <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x3a>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a08ce:	9b05      	ldr	r3, [sp, #20]
 80a08d0:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a08d4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a08d8:	e006      	b.n	80a08e8 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  }
  else if (enables.msrc)
 80a08da:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a08de:	b11b      	cbz	r3, 80a08e8 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
 80a08e0:	9b05      	ldr	r3, [sp, #20]
 80a08e2:	f503 7325 	add.w	r3, r3, #660	; 0x294
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a08e6:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a08e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80a08ec:	b11b      	cbz	r3, 80a08f6 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x56>
 80a08ee:	9b06      	ldr	r3, [sp, #24]
 80a08f0:	f503 7325 	add.w	r3, r3, #660	; 0x294
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a08f4:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a08f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a08fa:	b11b      	cbz	r3, 80a0904 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x64>
 80a08fc:	9b07      	ldr	r3, [sp, #28]
 80a08fe:	f203 2326 	addw	r3, r3, #550	; 0x226
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80a0902:	4418      	add	r0, r3
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 80a0904:	6160      	str	r0, [r4, #20]
  return budget_us;
}
 80a0906:	b008      	add	sp, #32
 80a0908:	bd10      	pop	{r4, pc}
	...

080a090c <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a090c:	4b06      	ldr	r3, [pc, #24]	; (80a0928 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh+0x1c>)
 80a090e:	4359      	muls	r1, r3
 80a0910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0914:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
 80a0918:	fbb1 f1f3 	udiv	r1, r1, r3

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a091c:	4358      	muls	r0, r3
 80a091e:	eb00 0051 	add.w	r0, r0, r1, lsr #1
}
 80a0922:	fbb0 f0f1 	udiv	r0, r0, r1
 80a0926:	4770      	bx	lr
 80a0928:	003a2f00 	.word	0x003a2f00

080a092c <_ZN7VL53L0X26setMeasurementTimingBudgetEm>:
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a092c:	f644 631f 	movw	r3, #19999	; 0x4e1f
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a0930:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0932:	4299      	cmp	r1, r3
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a0934:	b089      	sub	sp, #36	; 0x24
 80a0936:	4606      	mov	r6, r0
 80a0938:	460d      	mov	r5, r1
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a093a:	d942      	bls.n	80a09c2 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>

  uint32_t used_budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a093c:	4669      	mov	r1, sp
 80a093e:	f7ff ff30 	bl	80a07a2 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a0942:	4630      	mov	r0, r6
 80a0944:	4669      	mov	r1, sp
 80a0946:	aa02      	add	r2, sp, #8
 80a0948:	f7ff ff72 	bl	80a0830 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a094c:	f89d 3000 	ldrb.w	r3, [sp]
 80a0950:	b11b      	cbz	r3, 80a095a <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x2e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a0952:	9805      	ldr	r0, [sp, #20]
 80a0954:	f600 3036 	addw	r0, r0, #2870	; 0xb36
 80a0958:	e001      	b.n	80a095e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x32>

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80a095a:	f640 00e8 	movw	r0, #2280	; 0x8e8
  if (enables.tcc)
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a095e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a0962:	b12b      	cbz	r3, 80a0970 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x44>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a0964:	9b05      	ldr	r3, [sp, #20]
 80a0966:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a096a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a096e:	e006      	b.n	80a097e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  }
  else if (enables.msrc)
 80a0970:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a0974:	b11b      	cbz	r3, 80a097e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
 80a0976:	9b05      	ldr	r3, [sp, #20]
 80a0978:	f503 7325 	add.w	r3, r3, #660	; 0x294
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a097c:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a097e:	f89d 7003 	ldrb.w	r7, [sp, #3]
 80a0982:	b11f      	cbz	r7, 80a098c <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x60>
 80a0984:	9b06      	ldr	r3, [sp, #24]
 80a0986:	f503 7325 	add.w	r3, r3, #660	; 0x294
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a098a:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a098c:	f89d 4004 	ldrb.w	r4, [sp, #4]
 80a0990:	b1ac      	cbz	r4, 80a09be <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x92>
  {
    used_budget_us += FinalRangeOverhead;
 80a0992:	f200 2026 	addw	r0, r0, #550	; 0x226
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80a0996:	42a8      	cmp	r0, r5
 80a0998:	d813      	bhi.n	80a09c2 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint32_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80a099a:	1a28      	subs	r0, r5, r0
 80a099c:	f89d 100a 	ldrb.w	r1, [sp, #10]
 80a09a0:	f7ff ffb4 	bl	80a090c <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>

    if (enables.pre_range)
 80a09a4:	b117      	cbz	r7, 80a09ac <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x80>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80a09a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80a09aa:	4418      	add	r0, r3
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
      encodeTimeout(final_range_timeout_mclks));
 80a09ac:	f7ff ff1b 	bl	80a07e6 <_ZN7VL53L0X13encodeTimeoutEm>
 80a09b0:	2171      	movs	r1, #113	; 0x71
 80a09b2:	4602      	mov	r2, r0
 80a09b4:	4630      	mov	r0, r6
 80a09b6:	f7ff fcf4 	bl	80a03a2 <_ZN7VL53L0X13writeReg16BitEht>

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 80a09ba:	6175      	str	r5, [r6, #20]
 80a09bc:	e002      	b.n	80a09c4 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  }
  return true;
 80a09be:	2401      	movs	r4, #1
 80a09c0:	e000      	b.n	80a09c4 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a09c2:	2400      	movs	r4, #0
    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
  }
  return true;
}
 80a09c4:	4620      	mov	r0, r4
 80a09c6:	b009      	add	sp, #36	; 0x24
 80a09c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a09ca <_ZN7VL53L0X27performSingleRefCalibrationEh>:
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a09ca:	b538      	push	{r3, r4, r5, lr}
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a09cc:	f041 0201 	orr.w	r2, r1, #1
 80a09d0:	2100      	movs	r1, #0
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a09d2:	4604      	mov	r4, r0
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a09d4:	f7ff fcc0 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
 80a09d8:	f000 ff84 	bl	80a18e4 <HAL_Timer_Get_Milli_Seconds>

  startTimeout();
 80a09dc:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a09de:	4620      	mov	r0, r4
 80a09e0:	2113      	movs	r1, #19
 80a09e2:	f7ff fd28 	bl	80a0436 <_ZN7VL53L0X7readRegEh>
 80a09e6:	f010 0507 	ands.w	r5, r0, #7
 80a09ea:	d10b      	bne.n	80a0a04 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x3a>
  {
    if (checkTimeoutExpired()) { return false; }
 80a09ec:	6863      	ldr	r3, [r4, #4]
 80a09ee:	2b00      	cmp	r3, #0
 80a09f0:	d0f5      	beq.n	80a09de <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a09f2:	f000 ff77 	bl	80a18e4 <HAL_Timer_Get_Milli_Seconds>
 80a09f6:	68e3      	ldr	r3, [r4, #12]
 80a09f8:	1ac0      	subs	r0, r0, r3
 80a09fa:	6863      	ldr	r3, [r4, #4]
 80a09fc:	4298      	cmp	r0, r3
 80a09fe:	d9ee      	bls.n	80a09de <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a0a00:	4628      	mov	r0, r5
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  writeReg(SYSRANGE_START, 0x00);

  return true;
}
 80a0a02:	bd38      	pop	{r3, r4, r5, pc}
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
  {
    if (checkTimeoutExpired()) { return false; }
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a0a04:	4620      	mov	r0, r4
 80a0a06:	210b      	movs	r1, #11
 80a0a08:	2201      	movs	r2, #1
 80a0a0a:	f7ff fca5 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  writeReg(SYSRANGE_START, 0x00);
 80a0a0e:	2100      	movs	r1, #0
 80a0a10:	4620      	mov	r0, r4
 80a0a12:	460a      	mov	r2, r1
 80a0a14:	f7ff fca0 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
 80a0a18:	2001      	movs	r0, #1
 80a0a1a:	bd38      	pop	{r3, r4, r5, pc}

080a0a1c <_ZN7VL53L0X4initEb>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool VL53L0X::init(bool io_2v8)
{
 80a0a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0a1e:	4604      	mov	r4, r0
 80a0a20:	b085      	sub	sp, #20
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 80a0a22:	b149      	cbz	r1, 80a0a38 <_ZN7VL53L0X4initEb+0x1c>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 80a0a24:	2189      	movs	r1, #137	; 0x89
 80a0a26:	f7ff fd06 	bl	80a0436 <_ZN7VL53L0X7readRegEh>
 80a0a2a:	f040 0201 	orr.w	r2, r0, #1
 80a0a2e:	2189      	movs	r1, #137	; 0x89
 80a0a30:	4620      	mov	r0, r4
 80a0a32:	b2d2      	uxtb	r2, r2
 80a0a34:	f7ff fc90 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 80a0a38:	4620      	mov	r0, r4
 80a0a3a:	2188      	movs	r1, #136	; 0x88
 80a0a3c:	2200      	movs	r2, #0
 80a0a3e:	f7ff fc8b 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a0a42:	4620      	mov	r0, r4
 80a0a44:	2180      	movs	r1, #128	; 0x80
 80a0a46:	2201      	movs	r2, #1
 80a0a48:	f7ff fc86 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0a4c:	4620      	mov	r0, r4
 80a0a4e:	21ff      	movs	r1, #255	; 0xff
 80a0a50:	2201      	movs	r2, #1
 80a0a52:	f7ff fc81 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a0a56:	2100      	movs	r1, #0
 80a0a58:	460a      	mov	r2, r1
 80a0a5a:	4620      	mov	r0, r4
 80a0a5c:	f7ff fc7c 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  stop_variable = readReg(0x91);
 80a0a60:	2191      	movs	r1, #145	; 0x91
 80a0a62:	4620      	mov	r0, r4
 80a0a64:	f7ff fce7 	bl	80a0436 <_ZN7VL53L0X7readRegEh>
  writeReg(0x00, 0x01);
 80a0a68:	2100      	movs	r1, #0
  writeReg(0x88, 0x00);

  writeReg(0x80, 0x01);
  writeReg(0xFF, 0x01);
  writeReg(0x00, 0x00);
  stop_variable = readReg(0x91);
 80a0a6a:	7420      	strb	r0, [r4, #16]
  writeReg(0x00, 0x01);
 80a0a6c:	2201      	movs	r2, #1
 80a0a6e:	4620      	mov	r0, r4
 80a0a70:	f7ff fc72 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a0a74:	4620      	mov	r0, r4
 80a0a76:	21ff      	movs	r1, #255	; 0xff
 80a0a78:	2200      	movs	r2, #0
 80a0a7a:	f7ff fc6d 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a0a7e:	2200      	movs	r2, #0
 80a0a80:	4620      	mov	r0, r4
 80a0a82:	2180      	movs	r1, #128	; 0x80
 80a0a84:	f7ff fc68 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80a0a88:	2160      	movs	r1, #96	; 0x60
 80a0a8a:	4620      	mov	r0, r4
 80a0a8c:	f7ff fcd3 	bl	80a0436 <_ZN7VL53L0X7readRegEh>
 80a0a90:	f040 0212 	orr.w	r2, r0, #18
 80a0a94:	b2d2      	uxtb	r2, r2
 80a0a96:	4620      	mov	r0, r4
 80a0a98:	2160      	movs	r1, #96	; 0x60
 80a0a9a:	f7ff fc5d 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80a0a9e:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a0aa2:	4620      	mov	r0, r4
 80a0aa4:	f7ff fd58 	bl	80a0558 <_ZN7VL53L0X18setSignalRateLimitEf>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80a0aa8:	4620      	mov	r0, r4
 80a0aaa:	2101      	movs	r1, #1
 80a0aac:	22ff      	movs	r2, #255	; 0xff
 80a0aae:	f7ff fc53 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80a0ab2:	4620      	mov	r0, r4
 80a0ab4:	f10d 0106 	add.w	r1, sp, #6
 80a0ab8:	f10d 0207 	add.w	r2, sp, #7
 80a0abc:	f7ff fde9 	bl	80a0692 <_ZN7VL53L0X11getSpadInfoEPhPb>
 80a0ac0:	b908      	cbnz	r0, 80a0ac6 <_ZN7VL53L0X4initEb+0xaa>
 80a0ac2:	2500      	movs	r5, #0
 80a0ac4:	e21b      	b.n	80a0efe <_ZN7VL53L0X4initEb+0x4e2>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a0ac6:	2306      	movs	r3, #6
 80a0ac8:	4620      	mov	r0, r4
 80a0aca:	21b0      	movs	r1, #176	; 0xb0
 80a0acc:	aa02      	add	r2, sp, #8
 80a0ace:	f7ff fd1b 	bl	80a0508 <_ZN7VL53L0X9readMultiEhPhh>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 80a0ad2:	4620      	mov	r0, r4
 80a0ad4:	21ff      	movs	r1, #255	; 0xff
 80a0ad6:	2201      	movs	r2, #1
 80a0ad8:	f7ff fc3e 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80a0adc:	4620      	mov	r0, r4
 80a0ade:	214f      	movs	r1, #79	; 0x4f
 80a0ae0:	2200      	movs	r2, #0
 80a0ae2:	f7ff fc39 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80a0ae6:	4620      	mov	r0, r4
 80a0ae8:	214e      	movs	r1, #78	; 0x4e
 80a0aea:	222c      	movs	r2, #44	; 0x2c
 80a0aec:	f7ff fc34 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a0af0:	4620      	mov	r0, r4
 80a0af2:	21ff      	movs	r1, #255	; 0xff
 80a0af4:	2200      	movs	r2, #0
 80a0af6:	f7ff fc2f 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0afa:	2500      	movs	r5, #0

  writeReg(0xFF, 0x01);
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80a0afc:	21b6      	movs	r1, #182	; 0xb6
 80a0afe:	4620      	mov	r0, r4
 80a0b00:	22b4      	movs	r2, #180	; 0xb4
 80a0b02:	f7ff fc29 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;
 80a0b06:	4629      	mov	r1, r5
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a0b08:	f89d 3007 	ldrb.w	r3, [sp, #7]
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0b0c:	f89d 7006 	ldrb.w	r7, [sp, #6]
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a0b10:	2b00      	cmp	r3, #0
 80a0b12:	bf14      	ite	ne
 80a0b14:	260c      	movne	r6, #12
 80a0b16:	2600      	moveq	r6, #0
 80a0b18:	b2ea      	uxtb	r2, r5
 80a0b1a:	08d3      	lsrs	r3, r2, #3
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0b1c:	42b2      	cmp	r2, r6
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a0b1e:	a804      	add	r0, sp, #16
 80a0b20:	f002 0207 	and.w	r2, r2, #7
 80a0b24:	4403      	add	r3, r0
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0b26:	d301      	bcc.n	80a0b2c <_ZN7VL53L0X4initEb+0x110>
 80a0b28:	42b9      	cmp	r1, r7
 80a0b2a:	d109      	bne.n	80a0b40 <_ZN7VL53L0X4initEb+0x124>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a0b2c:	2001      	movs	r0, #1
 80a0b2e:	fa00 f202 	lsl.w	r2, r0, r2
 80a0b32:	f813 0c08 	ldrb.w	r0, [r3, #-8]
 80a0b36:	ea20 0202 	bic.w	r2, r0, r2
 80a0b3a:	f803 2c08 	strb.w	r2, [r3, #-8]
 80a0b3e:	e006      	b.n	80a0b4e <_ZN7VL53L0X4initEb+0x132>
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 80a0b40:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80a0b44:	4113      	asrs	r3, r2
 80a0b46:	07db      	lsls	r3, r3, #31
    {
      spads_enabled++;
 80a0b48:	bf44      	itt	mi
 80a0b4a:	3101      	addmi	r1, #1
 80a0b4c:	b2c9      	uxtbmi	r1, r1
 80a0b4e:	3501      	adds	r5, #1
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
 80a0b50:	2d30      	cmp	r5, #48	; 0x30
 80a0b52:	d1e1      	bne.n	80a0b18 <_ZN7VL53L0X4initEb+0xfc>
    {
      spads_enabled++;
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a0b54:	2306      	movs	r3, #6
 80a0b56:	4620      	mov	r0, r4
 80a0b58:	21b0      	movs	r1, #176	; 0xb0
 80a0b5a:	aa02      	add	r2, sp, #8
 80a0b5c:	f7ff fcb3 	bl	80a04c6 <_ZN7VL53L0X10writeMultiEhPKhh>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 80a0b60:	4620      	mov	r0, r4
 80a0b62:	21ff      	movs	r1, #255	; 0xff
 80a0b64:	2201      	movs	r2, #1
 80a0b66:	f7ff fbf7 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a0b6a:	2100      	movs	r1, #0
 80a0b6c:	460a      	mov	r2, r1
 80a0b6e:	4620      	mov	r0, r4
 80a0b70:	f7ff fbf2 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0b74:	4620      	mov	r0, r4
 80a0b76:	21ff      	movs	r1, #255	; 0xff
 80a0b78:	2200      	movs	r2, #0
 80a0b7a:	f7ff fbed 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x09, 0x00);
 80a0b7e:	4620      	mov	r0, r4
 80a0b80:	2109      	movs	r1, #9
 80a0b82:	2200      	movs	r2, #0
 80a0b84:	f7ff fbe8 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x10, 0x00);
 80a0b88:	4620      	mov	r0, r4
 80a0b8a:	2110      	movs	r1, #16
 80a0b8c:	2200      	movs	r2, #0
 80a0b8e:	f7ff fbe3 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x11, 0x00);
 80a0b92:	4620      	mov	r0, r4
 80a0b94:	2111      	movs	r1, #17
 80a0b96:	2200      	movs	r2, #0
 80a0b98:	f7ff fbde 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x24, 0x01);
 80a0b9c:	4620      	mov	r0, r4
 80a0b9e:	2124      	movs	r1, #36	; 0x24
 80a0ba0:	2201      	movs	r2, #1
 80a0ba2:	f7ff fbd9 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x25, 0xFF);
 80a0ba6:	4620      	mov	r0, r4
 80a0ba8:	2125      	movs	r1, #37	; 0x25
 80a0baa:	22ff      	movs	r2, #255	; 0xff
 80a0bac:	f7ff fbd4 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x75, 0x00);
 80a0bb0:	4620      	mov	r0, r4
 80a0bb2:	2175      	movs	r1, #117	; 0x75
 80a0bb4:	2200      	movs	r2, #0
 80a0bb6:	f7ff fbcf 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a0bba:	4620      	mov	r0, r4
 80a0bbc:	21ff      	movs	r1, #255	; 0xff
 80a0bbe:	2201      	movs	r2, #1
 80a0bc0:	f7ff fbca 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4E, 0x2C);
 80a0bc4:	4620      	mov	r0, r4
 80a0bc6:	214e      	movs	r1, #78	; 0x4e
 80a0bc8:	222c      	movs	r2, #44	; 0x2c
 80a0bca:	f7ff fbc5 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x00);
 80a0bce:	4620      	mov	r0, r4
 80a0bd0:	2148      	movs	r1, #72	; 0x48
 80a0bd2:	2200      	movs	r2, #0
 80a0bd4:	f7ff fbc0 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x20);
 80a0bd8:	4620      	mov	r0, r4
 80a0bda:	4629      	mov	r1, r5
 80a0bdc:	2220      	movs	r2, #32
 80a0bde:	f7ff fbbb 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0be2:	4620      	mov	r0, r4
 80a0be4:	21ff      	movs	r1, #255	; 0xff
 80a0be6:	2200      	movs	r2, #0
 80a0be8:	f7ff fbb6 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x09);
 80a0bec:	4620      	mov	r0, r4
 80a0bee:	4629      	mov	r1, r5
 80a0bf0:	2209      	movs	r2, #9
 80a0bf2:	f7ff fbb1 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x54, 0x00);
 80a0bf6:	4620      	mov	r0, r4
 80a0bf8:	2154      	movs	r1, #84	; 0x54
 80a0bfa:	2200      	movs	r2, #0
 80a0bfc:	f7ff fbac 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a0c00:	4620      	mov	r0, r4
 80a0c02:	2131      	movs	r1, #49	; 0x31
 80a0c04:	2204      	movs	r2, #4
 80a0c06:	f7ff fba7 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x32, 0x03);
 80a0c0a:	4620      	mov	r0, r4
 80a0c0c:	2132      	movs	r1, #50	; 0x32
 80a0c0e:	2203      	movs	r2, #3
 80a0c10:	f7ff fba2 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x83);
 80a0c14:	4620      	mov	r0, r4
 80a0c16:	2140      	movs	r1, #64	; 0x40
 80a0c18:	2283      	movs	r2, #131	; 0x83
 80a0c1a:	f7ff fb9d 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x25);
 80a0c1e:	4620      	mov	r0, r4
 80a0c20:	2146      	movs	r1, #70	; 0x46
 80a0c22:	2225      	movs	r2, #37	; 0x25
 80a0c24:	f7ff fb98 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x60, 0x00);
 80a0c28:	4620      	mov	r0, r4
 80a0c2a:	2160      	movs	r1, #96	; 0x60
 80a0c2c:	2200      	movs	r2, #0
 80a0c2e:	f7ff fb93 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x27, 0x00);
 80a0c32:	4620      	mov	r0, r4
 80a0c34:	2127      	movs	r1, #39	; 0x27
 80a0c36:	2200      	movs	r2, #0
 80a0c38:	f7ff fb8e 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x50, 0x06);
 80a0c3c:	4620      	mov	r0, r4
 80a0c3e:	2150      	movs	r1, #80	; 0x50
 80a0c40:	2206      	movs	r2, #6
 80a0c42:	f7ff fb89 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x51, 0x00);
 80a0c46:	4620      	mov	r0, r4
 80a0c48:	2151      	movs	r1, #81	; 0x51
 80a0c4a:	2200      	movs	r2, #0
 80a0c4c:	f7ff fb84 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x52, 0x96);
 80a0c50:	4620      	mov	r0, r4
 80a0c52:	2152      	movs	r1, #82	; 0x52
 80a0c54:	2296      	movs	r2, #150	; 0x96
 80a0c56:	f7ff fb7f 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x56, 0x08);
 80a0c5a:	4620      	mov	r0, r4
 80a0c5c:	2156      	movs	r1, #86	; 0x56
 80a0c5e:	2208      	movs	r2, #8
 80a0c60:	f7ff fb7a 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x57, 0x30);
 80a0c64:	4620      	mov	r0, r4
 80a0c66:	2157      	movs	r1, #87	; 0x57
 80a0c68:	462a      	mov	r2, r5
 80a0c6a:	f7ff fb75 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x61, 0x00);
 80a0c6e:	4620      	mov	r0, r4
 80a0c70:	2161      	movs	r1, #97	; 0x61
 80a0c72:	2200      	movs	r2, #0
 80a0c74:	f7ff fb70 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x62, 0x00);
 80a0c78:	4620      	mov	r0, r4
 80a0c7a:	2162      	movs	r1, #98	; 0x62
 80a0c7c:	2200      	movs	r2, #0
 80a0c7e:	f7ff fb6b 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x64, 0x00);
 80a0c82:	4620      	mov	r0, r4
 80a0c84:	2164      	movs	r1, #100	; 0x64
 80a0c86:	2200      	movs	r2, #0
 80a0c88:	f7ff fb66 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x65, 0x00);
 80a0c8c:	4620      	mov	r0, r4
 80a0c8e:	2165      	movs	r1, #101	; 0x65
 80a0c90:	2200      	movs	r2, #0
 80a0c92:	f7ff fb61 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x66, 0xA0);
 80a0c96:	4620      	mov	r0, r4
 80a0c98:	2166      	movs	r1, #102	; 0x66
 80a0c9a:	22a0      	movs	r2, #160	; 0xa0
 80a0c9c:	f7ff fb5c 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a0ca0:	4620      	mov	r0, r4
 80a0ca2:	21ff      	movs	r1, #255	; 0xff
 80a0ca4:	2201      	movs	r2, #1
 80a0ca6:	f7ff fb57 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x22, 0x32);
 80a0caa:	4620      	mov	r0, r4
 80a0cac:	2122      	movs	r1, #34	; 0x22
 80a0cae:	2232      	movs	r2, #50	; 0x32
 80a0cb0:	f7ff fb52 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x14);
 80a0cb4:	4620      	mov	r0, r4
 80a0cb6:	2147      	movs	r1, #71	; 0x47
 80a0cb8:	2214      	movs	r2, #20
 80a0cba:	f7ff fb4d 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x49, 0xFF);
 80a0cbe:	4620      	mov	r0, r4
 80a0cc0:	2149      	movs	r1, #73	; 0x49
 80a0cc2:	22ff      	movs	r2, #255	; 0xff
 80a0cc4:	f7ff fb48 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4A, 0x00);
 80a0cc8:	4620      	mov	r0, r4
 80a0cca:	214a      	movs	r1, #74	; 0x4a
 80a0ccc:	2200      	movs	r2, #0
 80a0cce:	f7ff fb43 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0cd2:	4620      	mov	r0, r4
 80a0cd4:	21ff      	movs	r1, #255	; 0xff
 80a0cd6:	2200      	movs	r2, #0
 80a0cd8:	f7ff fb3e 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7A, 0x0A);
 80a0cdc:	4620      	mov	r0, r4
 80a0cde:	217a      	movs	r1, #122	; 0x7a
 80a0ce0:	220a      	movs	r2, #10
 80a0ce2:	f7ff fb39 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7B, 0x00);
 80a0ce6:	4620      	mov	r0, r4
 80a0ce8:	217b      	movs	r1, #123	; 0x7b
 80a0cea:	2200      	movs	r2, #0
 80a0cec:	f7ff fb34 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x78, 0x21);
 80a0cf0:	4620      	mov	r0, r4
 80a0cf2:	2178      	movs	r1, #120	; 0x78
 80a0cf4:	2221      	movs	r2, #33	; 0x21
 80a0cf6:	f7ff fb2f 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a0cfa:	4620      	mov	r0, r4
 80a0cfc:	21ff      	movs	r1, #255	; 0xff
 80a0cfe:	2201      	movs	r2, #1
 80a0d00:	f7ff fb2a 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x23, 0x34);
 80a0d04:	4620      	mov	r0, r4
 80a0d06:	2123      	movs	r1, #35	; 0x23
 80a0d08:	2234      	movs	r2, #52	; 0x34
 80a0d0a:	f7ff fb25 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x42, 0x00);
 80a0d0e:	4620      	mov	r0, r4
 80a0d10:	2142      	movs	r1, #66	; 0x42
 80a0d12:	2200      	movs	r2, #0
 80a0d14:	f7ff fb20 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0xFF);
 80a0d18:	4620      	mov	r0, r4
 80a0d1a:	2144      	movs	r1, #68	; 0x44
 80a0d1c:	22ff      	movs	r2, #255	; 0xff
 80a0d1e:	f7ff fb1b 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x26);
 80a0d22:	4620      	mov	r0, r4
 80a0d24:	2145      	movs	r1, #69	; 0x45
 80a0d26:	2226      	movs	r2, #38	; 0x26
 80a0d28:	f7ff fb16 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x05);
 80a0d2c:	4620      	mov	r0, r4
 80a0d2e:	2146      	movs	r1, #70	; 0x46
 80a0d30:	2205      	movs	r2, #5
 80a0d32:	f7ff fb11 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x40);
 80a0d36:	2140      	movs	r1, #64	; 0x40
 80a0d38:	460a      	mov	r2, r1
 80a0d3a:	4620      	mov	r0, r4
 80a0d3c:	f7ff fb0c 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0E, 0x06);
 80a0d40:	4620      	mov	r0, r4
 80a0d42:	210e      	movs	r1, #14
 80a0d44:	2206      	movs	r2, #6
 80a0d46:	f7ff fb07 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x20, 0x1A);
 80a0d4a:	4620      	mov	r0, r4
 80a0d4c:	2120      	movs	r1, #32
 80a0d4e:	221a      	movs	r2, #26
 80a0d50:	f7ff fb02 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x43, 0x40);
 80a0d54:	4620      	mov	r0, r4
 80a0d56:	2143      	movs	r1, #67	; 0x43
 80a0d58:	2240      	movs	r2, #64	; 0x40
 80a0d5a:	f7ff fafd 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0d5e:	4620      	mov	r0, r4
 80a0d60:	21ff      	movs	r1, #255	; 0xff
 80a0d62:	2200      	movs	r2, #0
 80a0d64:	f7ff faf8 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x34, 0x03);
 80a0d68:	4620      	mov	r0, r4
 80a0d6a:	2134      	movs	r1, #52	; 0x34
 80a0d6c:	2203      	movs	r2, #3
 80a0d6e:	f7ff faf3 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x35, 0x44);
 80a0d72:	4620      	mov	r0, r4
 80a0d74:	2135      	movs	r1, #53	; 0x35
 80a0d76:	2244      	movs	r2, #68	; 0x44
 80a0d78:	f7ff faee 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a0d7c:	4620      	mov	r0, r4
 80a0d7e:	21ff      	movs	r1, #255	; 0xff
 80a0d80:	2201      	movs	r2, #1
 80a0d82:	f7ff fae9 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a0d86:	4620      	mov	r0, r4
 80a0d88:	2131      	movs	r1, #49	; 0x31
 80a0d8a:	2204      	movs	r2, #4
 80a0d8c:	f7ff fae4 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4B, 0x09);
 80a0d90:	4620      	mov	r0, r4
 80a0d92:	214b      	movs	r1, #75	; 0x4b
 80a0d94:	2209      	movs	r2, #9
 80a0d96:	f7ff fadf 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4C, 0x05);
 80a0d9a:	4620      	mov	r0, r4
 80a0d9c:	214c      	movs	r1, #76	; 0x4c
 80a0d9e:	2205      	movs	r2, #5
 80a0da0:	f7ff fada 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4D, 0x04);
 80a0da4:	4620      	mov	r0, r4
 80a0da6:	214d      	movs	r1, #77	; 0x4d
 80a0da8:	2204      	movs	r2, #4
 80a0daa:	f7ff fad5 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0dae:	4620      	mov	r0, r4
 80a0db0:	21ff      	movs	r1, #255	; 0xff
 80a0db2:	2200      	movs	r2, #0
 80a0db4:	f7ff fad0 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0x00);
 80a0db8:	4620      	mov	r0, r4
 80a0dba:	2144      	movs	r1, #68	; 0x44
 80a0dbc:	2200      	movs	r2, #0
 80a0dbe:	f7ff facb 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x20);
 80a0dc2:	4620      	mov	r0, r4
 80a0dc4:	2145      	movs	r1, #69	; 0x45
 80a0dc6:	2220      	movs	r2, #32
 80a0dc8:	f7ff fac6 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x08);
 80a0dcc:	4620      	mov	r0, r4
 80a0dce:	2147      	movs	r1, #71	; 0x47
 80a0dd0:	2208      	movs	r2, #8
 80a0dd2:	f7ff fac1 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x28);
 80a0dd6:	4620      	mov	r0, r4
 80a0dd8:	2148      	movs	r1, #72	; 0x48
 80a0dda:	2228      	movs	r2, #40	; 0x28
 80a0ddc:	f7ff fabc 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x67, 0x00);
 80a0de0:	4620      	mov	r0, r4
 80a0de2:	2167      	movs	r1, #103	; 0x67
 80a0de4:	2200      	movs	r2, #0
 80a0de6:	f7ff fab7 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x70, 0x04);
 80a0dea:	4620      	mov	r0, r4
 80a0dec:	2170      	movs	r1, #112	; 0x70
 80a0dee:	2204      	movs	r2, #4
 80a0df0:	f7ff fab2 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x71, 0x01);
 80a0df4:	4620      	mov	r0, r4
 80a0df6:	2171      	movs	r1, #113	; 0x71
 80a0df8:	2201      	movs	r2, #1
 80a0dfa:	f7ff faad 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x72, 0xFE);
 80a0dfe:	4620      	mov	r0, r4
 80a0e00:	2172      	movs	r1, #114	; 0x72
 80a0e02:	22fe      	movs	r2, #254	; 0xfe
 80a0e04:	f7ff faa8 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x76, 0x00);
 80a0e08:	4620      	mov	r0, r4
 80a0e0a:	2176      	movs	r1, #118	; 0x76
 80a0e0c:	2200      	movs	r2, #0
 80a0e0e:	f7ff faa3 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x77, 0x00);
 80a0e12:	4620      	mov	r0, r4
 80a0e14:	2177      	movs	r1, #119	; 0x77
 80a0e16:	2200      	movs	r2, #0
 80a0e18:	f7ff fa9e 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a0e1c:	4620      	mov	r0, r4
 80a0e1e:	21ff      	movs	r1, #255	; 0xff
 80a0e20:	2201      	movs	r2, #1
 80a0e22:	f7ff fa99 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0D, 0x01);
 80a0e26:	4620      	mov	r0, r4
 80a0e28:	210d      	movs	r1, #13
 80a0e2a:	2201      	movs	r2, #1
 80a0e2c:	f7ff fa94 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0e30:	4620      	mov	r0, r4
 80a0e32:	21ff      	movs	r1, #255	; 0xff
 80a0e34:	2200      	movs	r2, #0
 80a0e36:	f7ff fa8f 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x01);
 80a0e3a:	4620      	mov	r0, r4
 80a0e3c:	2180      	movs	r1, #128	; 0x80
 80a0e3e:	2201      	movs	r2, #1
 80a0e40:	f7ff fa8a 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x01, 0xF8);
 80a0e44:	4620      	mov	r0, r4
 80a0e46:	2101      	movs	r1, #1
 80a0e48:	22f8      	movs	r2, #248	; 0xf8
 80a0e4a:	f7ff fa85 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a0e4e:	4620      	mov	r0, r4
 80a0e50:	21ff      	movs	r1, #255	; 0xff
 80a0e52:	2201      	movs	r2, #1
 80a0e54:	f7ff fa80 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x8E, 0x01);
 80a0e58:	4620      	mov	r0, r4
 80a0e5a:	218e      	movs	r1, #142	; 0x8e
 80a0e5c:	2201      	movs	r2, #1
 80a0e5e:	f7ff fa7b 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a0e62:	4620      	mov	r0, r4
 80a0e64:	2100      	movs	r1, #0
 80a0e66:	2201      	movs	r2, #1
 80a0e68:	f7ff fa76 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a0e6c:	4620      	mov	r0, r4
 80a0e6e:	21ff      	movs	r1, #255	; 0xff
 80a0e70:	2200      	movs	r2, #0
 80a0e72:	f7ff fa71 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a0e76:	4620      	mov	r0, r4
 80a0e78:	2180      	movs	r1, #128	; 0x80
 80a0e7a:	2200      	movs	r2, #0
 80a0e7c:	f7ff fa6c 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80a0e80:	2204      	movs	r2, #4
 80a0e82:	4620      	mov	r0, r4
 80a0e84:	210a      	movs	r1, #10
 80a0e86:	f7ff fa67 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80a0e8a:	2184      	movs	r1, #132	; 0x84
 80a0e8c:	4620      	mov	r0, r4
 80a0e8e:	f7ff fad2 	bl	80a0436 <_ZN7VL53L0X7readRegEh>
 80a0e92:	2184      	movs	r1, #132	; 0x84
 80a0e94:	f000 02ef 	and.w	r2, r0, #239	; 0xef
 80a0e98:	4620      	mov	r0, r4
 80a0e9a:	f7ff fa5d 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a0e9e:	210b      	movs	r1, #11
 80a0ea0:	2201      	movs	r2, #1
 80a0ea2:	4620      	mov	r0, r4
 80a0ea4:	f7ff fa58 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a0ea8:	4620      	mov	r0, r4
 80a0eaa:	f7ff fcf9 	bl	80a08a0 <_ZN7VL53L0X26getMeasurementTimingBudgetEv>
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a0eae:	22e8      	movs	r2, #232	; 0xe8
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a0eb0:	6160      	str	r0, [r4, #20]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a0eb2:	2101      	movs	r1, #1
 80a0eb4:	4620      	mov	r0, r4
 80a0eb6:	f7ff fa4f 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(measurement_timing_budget_us);
 80a0eba:	6961      	ldr	r1, [r4, #20]
 80a0ebc:	4620      	mov	r0, r4
 80a0ebe:	f7ff fd35 	bl	80a092c <_ZN7VL53L0X26setMeasurementTimingBudgetEm>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80a0ec2:	2101      	movs	r1, #1
 80a0ec4:	4620      	mov	r0, r4
 80a0ec6:	460a      	mov	r2, r1
 80a0ec8:	f7ff fa46 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x40)) { return false; }
 80a0ecc:	4620      	mov	r0, r4
 80a0ece:	2140      	movs	r1, #64	; 0x40
 80a0ed0:	f7ff fd7b 	bl	80a09ca <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a0ed4:	2800      	cmp	r0, #0
 80a0ed6:	f43f adf4 	beq.w	80a0ac2 <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80a0eda:	4620      	mov	r0, r4
 80a0edc:	2101      	movs	r1, #1
 80a0ede:	2202      	movs	r2, #2
 80a0ee0:	f7ff fa3a 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x00)) { return false; }
 80a0ee4:	4620      	mov	r0, r4
 80a0ee6:	2100      	movs	r1, #0
 80a0ee8:	f7ff fd6f 	bl	80a09ca <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a0eec:	4605      	mov	r5, r0
 80a0eee:	2800      	cmp	r0, #0
 80a0ef0:	f43f ade7 	beq.w	80a0ac2 <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a0ef4:	4620      	mov	r0, r4
 80a0ef6:	2101      	movs	r1, #1
 80a0ef8:	22e8      	movs	r2, #232	; 0xe8
 80a0efa:	f7ff fa2d 	bl	80a0358 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_PerformRefCalibration() end

  return true;
}
 80a0efe:	4628      	mov	r0, r5
 80a0f00:	b005      	add	sp, #20
 80a0f02:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0f04 <_GLOBAL__sub_I__ZN7VL53L0XC2Ev>:
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  writeReg(SYSRANGE_START, 0x00);

  return true;
}
 80a0f04:	b508      	push	{r3, lr}
 80a0f06:	4b0a      	ldr	r3, [pc, #40]	; (80a0f30 <_GLOBAL__sub_I__ZN7VL53L0XC2Ev+0x2c>)
 80a0f08:	2200      	movs	r2, #0
 80a0f0a:	490a      	ldr	r1, [pc, #40]	; (80a0f34 <_GLOBAL__sub_I__ZN7VL53L0XC2Ev+0x30>)
 80a0f0c:	701a      	strb	r2, [r3, #0]
 80a0f0e:	2301      	movs	r3, #1
 80a0f10:	700b      	strb	r3, [r1, #0]
 80a0f12:	4909      	ldr	r1, [pc, #36]	; (80a0f38 <_GLOBAL__sub_I__ZN7VL53L0XC2Ev+0x34>)
 80a0f14:	700a      	strb	r2, [r1, #0]
 80a0f16:	4a09      	ldr	r2, [pc, #36]	; (80a0f3c <_GLOBAL__sub_I__ZN7VL53L0XC2Ev+0x38>)
 80a0f18:	7013      	strb	r3, [r2, #0]
 80a0f1a:	4b09      	ldr	r3, [pc, #36]	; (80a0f40 <_GLOBAL__sub_I__ZN7VL53L0XC2Ev+0x3c>)
 80a0f1c:	2202      	movs	r2, #2
 80a0f1e:	701a      	strb	r2, [r3, #0]
 80a0f20:	4b08      	ldr	r3, [pc, #32]	; (80a0f44 <_GLOBAL__sub_I__ZN7VL53L0XC2Ev+0x40>)
 80a0f22:	2208      	movs	r2, #8
 80a0f24:	701a      	strb	r2, [r3, #0]
 80a0f26:	f000 fce5 	bl	80a18f4 <HAL_Pin_Map>
 80a0f2a:	4b07      	ldr	r3, [pc, #28]	; (80a0f48 <_GLOBAL__sub_I__ZN7VL53L0XC2Ev+0x44>)
 80a0f2c:	6018      	str	r0, [r3, #0]
 80a0f2e:	bd08      	pop	{r3, pc}
 80a0f30:	2000037a 	.word	0x2000037a
 80a0f34:	20000380 	.word	0x20000380
 80a0f38:	20000378 	.word	0x20000378
 80a0f3c:	20000379 	.word	0x20000379
 80a0f40:	20000377 	.word	0x20000377
 80a0f44:	20000376 	.word	0x20000376
 80a0f48:	2000037c 	.word	0x2000037c

080a0f4c <_Z5FLISRv>:
// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
unsigned long lastPrintSample = 0;

void FLISR() {
 80a0f4c:	b508      	push	{r3, lr}
    FLflag = digitalRead(FL);
 80a0f4e:	4b05      	ldr	r3, [pc, #20]	; (80a0f64 <_Z5FLISRv+0x18>)
 80a0f50:	8818      	ldrh	r0, [r3, #0]
 80a0f52:	f001 fc63 	bl	80a281c <digitalRead>
 80a0f56:	4b04      	ldr	r3, [pc, #16]	; (80a0f68 <_Z5FLISRv+0x1c>)
 80a0f58:	3000      	adds	r0, #0
 80a0f5a:	bf18      	it	ne
 80a0f5c:	2001      	movne	r0, #1
 80a0f5e:	7018      	strb	r0, [r3, #0]
 80a0f60:	bd08      	pop	{r3, pc}
 80a0f62:	bf00      	nop
 80a0f64:	20000310 	.word	0x20000310
 80a0f68:	20000348 	.word	0x20000348

080a0f6c <_Z5FRISRv>:
}

void FRISR() {
 80a0f6c:	b508      	push	{r3, lr}
    FRflag = digitalRead(FR);
 80a0f6e:	4b05      	ldr	r3, [pc, #20]	; (80a0f84 <_Z5FRISRv+0x18>)
 80a0f70:	8818      	ldrh	r0, [r3, #0]
 80a0f72:	f001 fc53 	bl	80a281c <digitalRead>
 80a0f76:	4b04      	ldr	r3, [pc, #16]	; (80a0f88 <_Z5FRISRv+0x1c>)
 80a0f78:	3000      	adds	r0, #0
 80a0f7a:	bf18      	it	ne
 80a0f7c:	2001      	movne	r0, #1
 80a0f7e:	7018      	strb	r0, [r3, #0]
 80a0f80:	bd08      	pop	{r3, pc}
 80a0f82:	bf00      	nop
 80a0f84:	20000318 	.word	0x20000318
 80a0f88:	20000334 	.word	0x20000334

080a0f8c <_Z5BLISRv>:
}

void BLISR() {
 80a0f8c:	b508      	push	{r3, lr}
    BLflag = digitalRead(BL);
 80a0f8e:	4b05      	ldr	r3, [pc, #20]	; (80a0fa4 <_Z5BLISRv+0x18>)
 80a0f90:	8818      	ldrh	r0, [r3, #0]
 80a0f92:	f001 fc43 	bl	80a281c <digitalRead>
 80a0f96:	4b04      	ldr	r3, [pc, #16]	; (80a0fa8 <_Z5BLISRv+0x1c>)
 80a0f98:	3000      	adds	r0, #0
 80a0f9a:	bf18      	it	ne
 80a0f9c:	2001      	movne	r0, #1
 80a0f9e:	7018      	strb	r0, [r3, #0]
 80a0fa0:	bd08      	pop	{r3, pc}
 80a0fa2:	bf00      	nop
 80a0fa4:	20000338 	.word	0x20000338
 80a0fa8:	20000340 	.word	0x20000340

080a0fac <_Z5BRISRv>:
}

void BRISR() {
 80a0fac:	b508      	push	{r3, lr}
    BRflag = digitalRead(BR);
 80a0fae:	4b05      	ldr	r3, [pc, #20]	; (80a0fc4 <_Z5BRISRv+0x18>)
 80a0fb0:	8818      	ldrh	r0, [r3, #0]
 80a0fb2:	f001 fc33 	bl	80a281c <digitalRead>
 80a0fb6:	4b04      	ldr	r3, [pc, #16]	; (80a0fc8 <_Z5BRISRv+0x1c>)
 80a0fb8:	3000      	adds	r0, #0
 80a0fba:	bf18      	it	ne
 80a0fbc:	2001      	movne	r0, #1
 80a0fbe:	7018      	strb	r0, [r3, #0]
 80a0fc0:	bd08      	pop	{r3, pc}
 80a0fc2:	bf00      	nop
 80a0fc4:	2000033c 	.word	0x2000033c
 80a0fc8:	2000035c 	.word	0x2000035c

080a0fcc <_Z5RSISRv>:
}

void RSISR() {
 80a0fcc:	b508      	push	{r3, lr}
    RSflag = digitalRead(RS);
 80a0fce:	4b05      	ldr	r3, [pc, #20]	; (80a0fe4 <_Z5RSISRv+0x18>)
 80a0fd0:	8818      	ldrh	r0, [r3, #0]
 80a0fd2:	f001 fc23 	bl	80a281c <digitalRead>
 80a0fd6:	4b04      	ldr	r3, [pc, #16]	; (80a0fe8 <_Z5RSISRv+0x1c>)
 80a0fd8:	3000      	adds	r0, #0
 80a0fda:	bf18      	it	ne
 80a0fdc:	2001      	movne	r0, #1
 80a0fde:	7018      	strb	r0, [r3, #0]
 80a0fe0:	bd08      	pop	{r3, pc}
 80a0fe2:	bf00      	nop
 80a0fe4:	20000300 	.word	0x20000300
 80a0fe8:	20000424 	.word	0x20000424

080a0fec <_Z8tof_initv>:
}

void tof_init() {
 80a0fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pinMode(A0, OUTPUT);
 80a0ff0:	200a      	movs	r0, #10
 80a0ff2:	2101      	movs	r1, #1
 80a0ff4:	f001 fbe8 	bl	80a27c8 <pinMode>
    pinMode(A1, OUTPUT);
 80a0ff8:	200b      	movs	r0, #11
 80a0ffa:	2101      	movs	r1, #1
 80a0ffc:	f001 fbe4 	bl	80a27c8 <pinMode>
    pinMode(A2, OUTPUT);
 80a1000:	200c      	movs	r0, #12
 80a1002:	2101      	movs	r1, #1
 80a1004:	f001 fbe0 	bl	80a27c8 <pinMode>
    pinMode(A3, OUTPUT);
 80a1008:	200d      	movs	r0, #13
 80a100a:	2101      	movs	r1, #1
 80a100c:	f001 fbdc 	bl	80a27c8 <pinMode>
    digitalWrite(A0, LOW);
 80a1010:	200a      	movs	r0, #10
 80a1012:	2100      	movs	r1, #0
 80a1014:	f001 fbe9 	bl	80a27ea <digitalWrite>
    digitalWrite(A1, LOW);
 80a1018:	200b      	movs	r0, #11
 80a101a:	2100      	movs	r1, #0
 80a101c:	f001 fbe5 	bl	80a27ea <digitalWrite>
    digitalWrite(A2, LOW);
 80a1020:	200c      	movs	r0, #12
 80a1022:	2100      	movs	r1, #0
 80a1024:	f001 fbe1 	bl	80a27ea <digitalWrite>
    digitalWrite(A3, LOW);
 80a1028:	2100      	movs	r1, #0
 80a102a:	200d      	movs	r0, #13
 80a102c:	f001 fbdd 	bl	80a27ea <digitalWrite>
    delay(500);
 80a1030:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a1034:	f000 fde0 	bl	80a1bf8 <delay>

    Wire.setSpeed(CLOCK_SPEED_100KHZ);  // need to initialize i2c protocol after driving shdn pins low
 80a1038:	f001 fc40 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a103c:	4940      	ldr	r1, [pc, #256]	; (80a1140 <_Z8tof_initv+0x154>)
 80a103e:	f000 fe95 	bl	80a1d6c <_ZN7TwoWire8setSpeedEm>
    Wire.begin();
 80a1042:	f001 fc3b 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a1046:	f000 fe95 	bl	80a1d74 <_ZN7TwoWire5beginEv>

    delay(10);
 80a104a:	200a      	movs	r0, #10
 80a104c:	f000 fdd4 	bl	80a1bf8 <delay>
    digitalWrite(A0, HIGH);
 80a1050:	200a      	movs	r0, #10
 80a1052:	2101      	movs	r1, #1
 80a1054:	f001 fbc9 	bl	80a27ea <digitalWrite>
    digitalWrite(A1, HIGH);
 80a1058:	200b      	movs	r0, #11
 80a105a:	2101      	movs	r1, #1
 80a105c:	f001 fbc5 	bl	80a27ea <digitalWrite>
    digitalWrite(A2, HIGH);
 80a1060:	200c      	movs	r0, #12
 80a1062:	2101      	movs	r1, #1
 80a1064:	f001 fbc1 	bl	80a27ea <digitalWrite>
    digitalWrite(A3, HIGH);
 80a1068:	2101      	movs	r1, #1
 80a106a:	200d      	movs	r0, #13
 80a106c:	f001 fbbd 	bl	80a27ea <digitalWrite>
    delay(10);
 80a1070:	200a      	movs	r0, #10
 80a1072:	f000 fdc1 	bl	80a1bf8 <delay>
    digitalWrite(A1, LOW);
 80a1076:	200b      	movs	r0, #11
 80a1078:	2100      	movs	r1, #0
 80a107a:	f001 fbb6 	bl	80a27ea <digitalWrite>
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
 80a107e:	4f31      	ldr	r7, [pc, #196]	; (80a1144 <_Z8tof_initv+0x158>)
    digitalWrite(A1, HIGH);
    digitalWrite(A2, HIGH);
    digitalWrite(A3, HIGH);
    delay(10);
    digitalWrite(A1, LOW);
    digitalWrite(A2, LOW);
 80a1080:	200c      	movs	r0, #12
 80a1082:	2100      	movs	r1, #0
 80a1084:	f001 fbb1 	bl	80a27ea <digitalWrite>
    digitalWrite(A3, LOW);
 80a1088:	200d      	movs	r0, #13
 80a108a:	2100      	movs	r1, #0
 80a108c:	f001 fbad 	bl	80a27ea <digitalWrite>
    sensor0.init();
 80a1090:	4638      	mov	r0, r7
 80a1092:	2101      	movs	r1, #1
 80a1094:	f7ff fcc2 	bl	80a0a1c <_ZN7VL53L0X4initEb>
    void startContinuous(uint32_t period_ms = 0);
    void stopContinuous(void);
    uint16_t readRangeContinuousMillimeters(void);
    uint16_t readRangeSingleMillimeters(void);

    inline void setTimeout(uint16_t timeout) { io_timeout = timeout; }
 80a1098:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    sensor0.setAddress(0x30);
 80a109c:	4638      	mov	r0, r7
 80a109e:	2130      	movs	r1, #48	; 0x30
 80a10a0:	f7ff f975 	bl	80a038e <_ZN7VL53L0X10setAddressEh>
    sensor0.setTimeout(1000);
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
 80a10a4:	4e28      	ldr	r6, [pc, #160]	; (80a1148 <_Z8tof_initv+0x15c>)
 80a10a6:	f8c7 8004 	str.w	r8, [r7, #4]
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
    sensor0.setAddress(0x30);
    sensor0.setTimeout(1000);
    delay(10);
 80a10aa:	200a      	movs	r0, #10
 80a10ac:	f000 fda4 	bl	80a1bf8 <delay>
    digitalWrite(A1, HIGH);
 80a10b0:	200b      	movs	r0, #11
 80a10b2:	2101      	movs	r1, #1
 80a10b4:	f001 fb99 	bl	80a27ea <digitalWrite>
    sensor1.init();
 80a10b8:	4630      	mov	r0, r6
 80a10ba:	2101      	movs	r1, #1
 80a10bc:	f7ff fcae 	bl	80a0a1c <_ZN7VL53L0X4initEb>
    sensor1.setAddress(0x31);
 80a10c0:	4630      	mov	r0, r6
 80a10c2:	2131      	movs	r1, #49	; 0x31
 80a10c4:	f7ff f963 	bl	80a038e <_ZN7VL53L0X10setAddressEh>
    sensor1.setTimeout(1000);
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
 80a10c8:	4d20      	ldr	r5, [pc, #128]	; (80a114c <_Z8tof_initv+0x160>)
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
    sensor1.setAddress(0x31);
    sensor1.setTimeout(1000);
    delay(10);
 80a10ca:	200a      	movs	r0, #10
 80a10cc:	f8c6 8004 	str.w	r8, [r6, #4]
 80a10d0:	f000 fd92 	bl	80a1bf8 <delay>
    digitalWrite(A2, HIGH);
 80a10d4:	200c      	movs	r0, #12
 80a10d6:	2101      	movs	r1, #1
 80a10d8:	f001 fb87 	bl	80a27ea <digitalWrite>
    sensor2.init();
 80a10dc:	4628      	mov	r0, r5
 80a10de:	2101      	movs	r1, #1
 80a10e0:	f7ff fc9c 	bl	80a0a1c <_ZN7VL53L0X4initEb>
    sensor2.setAddress(0x32);
 80a10e4:	4628      	mov	r0, r5
 80a10e6:	2132      	movs	r1, #50	; 0x32
 80a10e8:	f7ff f951 	bl	80a038e <_ZN7VL53L0X10setAddressEh>
    sensor2.setTimeout(1000);
    delay(10);
    digitalWrite(A3, HIGH);
    sensor3.init();
 80a10ec:	4c18      	ldr	r4, [pc, #96]	; (80a1150 <_Z8tof_initv+0x164>)
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
    sensor2.setAddress(0x32);
    sensor2.setTimeout(1000);
    delay(10);
 80a10ee:	200a      	movs	r0, #10
 80a10f0:	f8c5 8004 	str.w	r8, [r5, #4]
 80a10f4:	f000 fd80 	bl	80a1bf8 <delay>
    digitalWrite(A3, HIGH);
 80a10f8:	200d      	movs	r0, #13
 80a10fa:	2101      	movs	r1, #1
 80a10fc:	f001 fb75 	bl	80a27ea <digitalWrite>
    sensor3.init();
 80a1100:	4620      	mov	r0, r4
 80a1102:	2101      	movs	r1, #1
 80a1104:	f7ff fc8a 	bl	80a0a1c <_ZN7VL53L0X4initEb>
    sensor3.setAddress(0x33);
 80a1108:	4620      	mov	r0, r4
 80a110a:	2133      	movs	r1, #51	; 0x33
 80a110c:	f7ff f93f 	bl	80a038e <_ZN7VL53L0X10setAddressEh>
    sensor3.setTimeout(1000);
    delay(10);
 80a1110:	200a      	movs	r0, #10
 80a1112:	f8c4 8004 	str.w	r8, [r4, #4]
 80a1116:	f000 fd6f 	bl	80a1bf8 <delay>

    // Start continuous back-to-back mode (take readings as
    // fast as possible).  To use continuous timed mode
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
 80a111a:	4638      	mov	r0, r7
 80a111c:	210a      	movs	r1, #10
 80a111e:	f7ff fa52 	bl	80a05c6 <_ZN7VL53L0X15startContinuousEm>
    sensor1.startContinuous(10);
 80a1122:	4630      	mov	r0, r6
 80a1124:	210a      	movs	r1, #10
 80a1126:	f7ff fa4e 	bl	80a05c6 <_ZN7VL53L0X15startContinuousEm>
    sensor2.startContinuous(10);
 80a112a:	4628      	mov	r0, r5
 80a112c:	210a      	movs	r1, #10
 80a112e:	f7ff fa4a 	bl	80a05c6 <_ZN7VL53L0X15startContinuousEm>
    sensor3.startContinuous(10);
 80a1132:	4620      	mov	r0, r4
}
 80a1134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
    sensor1.startContinuous(10);
    sensor2.startContinuous(10);
    sensor3.startContinuous(10);
 80a1138:	210a      	movs	r1, #10
 80a113a:	f7ff ba44 	b.w	80a05c6 <_ZN7VL53L0X15startContinuousEm>
 80a113e:	bf00      	nop
 80a1140:	000186a0 	.word	0x000186a0
 80a1144:	2000042c 	.word	0x2000042c
 80a1148:	200003d4 	.word	0x200003d4
 80a114c:	20000384 	.word	0x20000384
 80a1150:	200003ec 	.word	0x200003ec

080a1154 <_Z10accel_initv>:
}

void accel_init() {
 80a1154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LIS3DHConfig config;
 80a1156:	a801      	add	r0, sp, #4
 80a1158:	f7ff f806 	bl	80a0168 <_ZN12LIS3DHConfigC1Ev>
	config.setAccelMode(LIS3DH::RATE_100_HZ);
 80a115c:	a801      	add	r0, sp, #4
 80a115e:	2150      	movs	r1, #80	; 0x50
 80a1160:	f7ff f80f 	bl	80a0182 <_ZN12LIS3DHConfig12setAccelModeEh>

	bool setupSuccess = accel.setup(config);
 80a1164:	a901      	add	r1, sp, #4
 80a1166:	4806      	ldr	r0, [pc, #24]	; (80a1180 <_Z10accel_initv+0x2c>)
 80a1168:	f7ff f85e 	bl	80a0228 <_ZN6LIS3DH5setupER12LIS3DHConfig>
 80a116c:	4604      	mov	r4, r0
	Serial.printlnf("setupSuccess=%d", setupSuccess);
 80a116e:	f001 f9f7 	bl	80a2560 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a1172:	2101      	movs	r1, #1
 80a1174:	4a03      	ldr	r2, [pc, #12]	; (80a1184 <_Z10accel_initv+0x30>)
 80a1176:	4623      	mov	r3, r4
 80a1178:	f000 ff41 	bl	80a1ffe <_ZN5Print11printf_implEbPKcz>
}
 80a117c:	b004      	add	sp, #16
 80a117e:	bd10      	pop	{r4, pc}
 80a1180:	200003b8 	.word	0x200003b8
 80a1184:	080a344c 	.word	0x080a344c

080a1188 <_Z13runDiagnosticv>:


void runDiagnostic() {
 80a1188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.print("remote status:");
 80a118a:	f001 f9e9 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a118e:	497b      	ldr	r1, [pc, #492]	; (80a137c <_Z13runDiagnosticv+0x1f4>)
 80a1190:	f000 fec6 	bl	80a1f20 <_ZN5Print5printEPKc>
  Serial.print(RSflag);
 80a1194:	f001 f9e4 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a1198:	4b79      	ldr	r3, [pc, #484]	; (80a1380 <_Z13runDiagnosticv+0x1f8>)
 80a119a:	220a      	movs	r2, #10
 80a119c:	7819      	ldrb	r1, [r3, #0]
 80a119e:	f000 ff1d 	bl	80a1fdc <_ZN5Print5printEii>
  Serial.print(" | ");
 80a11a2:	f001 f9dd 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a11a6:	4977      	ldr	r1, [pc, #476]	; (80a1384 <_Z13runDiagnosticv+0x1fc>)
 80a11a8:	f000 feba 	bl	80a1f20 <_ZN5Print5printEPKc>

  Serial.print("sensor 0:");
 80a11ac:	f001 f9d8 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a11b0:	4975      	ldr	r1, [pc, #468]	; (80a1388 <_Z13runDiagnosticv+0x200>)
 80a11b2:	f000 feb5 	bl	80a1f20 <_ZN5Print5printEPKc>
  Serial.print(sensor0.readRangeContinuousMillimeters());
 80a11b6:	f001 f9d3 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a11ba:	4604      	mov	r4, r0
 80a11bc:	4873      	ldr	r0, [pc, #460]	; (80a138c <_Z13runDiagnosticv+0x204>)
 80a11be:	f7ff fa3d 	bl	80a063c <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a11c2:	220a      	movs	r2, #10
 80a11c4:	4601      	mov	r1, r0
 80a11c6:	4620      	mov	r0, r4
 80a11c8:	f000 ff08 	bl	80a1fdc <_ZN5Print5printEii>
  Serial.print(" | ");
 80a11cc:	f001 f9c8 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a11d0:	496c      	ldr	r1, [pc, #432]	; (80a1384 <_Z13runDiagnosticv+0x1fc>)
 80a11d2:	f000 fea5 	bl	80a1f20 <_ZN5Print5printEPKc>
  Serial.print("sensor 1:");
 80a11d6:	f001 f9c3 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a11da:	496d      	ldr	r1, [pc, #436]	; (80a1390 <_Z13runDiagnosticv+0x208>)
 80a11dc:	f000 fea0 	bl	80a1f20 <_ZN5Print5printEPKc>
  Serial.print(sensor1.readRangeContinuousMillimeters());
 80a11e0:	f001 f9be 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a11e4:	4604      	mov	r4, r0
 80a11e6:	486b      	ldr	r0, [pc, #428]	; (80a1394 <_Z13runDiagnosticv+0x20c>)
 80a11e8:	f7ff fa28 	bl	80a063c <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a11ec:	220a      	movs	r2, #10
 80a11ee:	4601      	mov	r1, r0
 80a11f0:	4620      	mov	r0, r4
 80a11f2:	f000 fef3 	bl	80a1fdc <_ZN5Print5printEii>
  Serial.print(" | ");
 80a11f6:	f001 f9b3 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a11fa:	4962      	ldr	r1, [pc, #392]	; (80a1384 <_Z13runDiagnosticv+0x1fc>)
 80a11fc:	f000 fe90 	bl	80a1f20 <_ZN5Print5printEPKc>
  Serial.print("sensor 2:");
 80a1200:	f001 f9ae 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a1204:	4964      	ldr	r1, [pc, #400]	; (80a1398 <_Z13runDiagnosticv+0x210>)
 80a1206:	f000 fe8b 	bl	80a1f20 <_ZN5Print5printEPKc>
  Serial.print(sensor2.readRangeContinuousMillimeters());
 80a120a:	f001 f9a9 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a120e:	4604      	mov	r4, r0
 80a1210:	4862      	ldr	r0, [pc, #392]	; (80a139c <_Z13runDiagnosticv+0x214>)
 80a1212:	f7ff fa13 	bl	80a063c <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a1216:	220a      	movs	r2, #10
 80a1218:	4601      	mov	r1, r0
 80a121a:	4620      	mov	r0, r4
 80a121c:	f000 fede 	bl	80a1fdc <_ZN5Print5printEii>
  Serial.print(" | ");
 80a1220:	f001 f99e 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a1224:	4957      	ldr	r1, [pc, #348]	; (80a1384 <_Z13runDiagnosticv+0x1fc>)
 80a1226:	f000 fe7b 	bl	80a1f20 <_ZN5Print5printEPKc>
  Serial.print("sensor 3:");
 80a122a:	f001 f999 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a122e:	495c      	ldr	r1, [pc, #368]	; (80a13a0 <_Z13runDiagnosticv+0x218>)
 80a1230:	f000 fe76 	bl	80a1f20 <_ZN5Print5printEPKc>
  Serial.print(sensor3.readRangeContinuousMillimeters());
 80a1234:	f001 f994 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a1238:	4604      	mov	r4, r0
 80a123a:	485a      	ldr	r0, [pc, #360]	; (80a13a4 <_Z13runDiagnosticv+0x21c>)
 80a123c:	f7ff f9fe 	bl	80a063c <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a1240:	220a      	movs	r2, #10
 80a1242:	4601      	mov	r1, r0
 80a1244:	4620      	mov	r0, r4
 80a1246:	f000 fec9 	bl	80a1fdc <_ZN5Print5printEii>
  if (sensor0.timeoutOccurred() || sensor1.timeoutOccurred() || sensor2.timeoutOccurred() || sensor3.timeoutOccurred()) { Serial.print(" SENSOR TIMEOUT"); }
 80a124a:	4850      	ldr	r0, [pc, #320]	; (80a138c <_Z13runDiagnosticv+0x204>)
 80a124c:	f7ff fa1c 	bl	80a0688 <_ZN7VL53L0X15timeoutOccurredEv>
 80a1250:	2800      	cmp	r0, #0
 80a1252:	f040 808d 	bne.w	80a1370 <_Z13runDiagnosticv+0x1e8>
 80a1256:	484f      	ldr	r0, [pc, #316]	; (80a1394 <_Z13runDiagnosticv+0x20c>)
 80a1258:	f7ff fa16 	bl	80a0688 <_ZN7VL53L0X15timeoutOccurredEv>
 80a125c:	2800      	cmp	r0, #0
 80a125e:	f040 8087 	bne.w	80a1370 <_Z13runDiagnosticv+0x1e8>
 80a1262:	484e      	ldr	r0, [pc, #312]	; (80a139c <_Z13runDiagnosticv+0x214>)
 80a1264:	f7ff fa10 	bl	80a0688 <_ZN7VL53L0X15timeoutOccurredEv>
 80a1268:	2800      	cmp	r0, #0
 80a126a:	f040 8081 	bne.w	80a1370 <_Z13runDiagnosticv+0x1e8>
 80a126e:	484d      	ldr	r0, [pc, #308]	; (80a13a4 <_Z13runDiagnosticv+0x21c>)
 80a1270:	f7ff fa0a 	bl	80a0688 <_ZN7VL53L0X15timeoutOccurredEv>
 80a1274:	2800      	cmp	r0, #0
 80a1276:	d17b      	bne.n	80a1370 <_Z13runDiagnosticv+0x1e8>

  Serial.print(" | ");
 80a1278:	f001 f972 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a127c:	4941      	ldr	r1, [pc, #260]	; (80a1384 <_Z13runDiagnosticv+0x1fc>)
 80a127e:	f000 fe4f 	bl	80a1f20 <_ZN5Print5printEPKc>
  Serial.print("front left:");
 80a1282:	f001 f96d 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a1286:	4948      	ldr	r1, [pc, #288]	; (80a13a8 <_Z13runDiagnosticv+0x220>)
 80a1288:	f000 fe4a 	bl	80a1f20 <_ZN5Print5printEPKc>
  Serial.print(FLflag);
 80a128c:	f001 f968 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a1290:	4b46      	ldr	r3, [pc, #280]	; (80a13ac <_Z13runDiagnosticv+0x224>)
 80a1292:	220a      	movs	r2, #10
 80a1294:	7819      	ldrb	r1, [r3, #0]
 80a1296:	f000 fea1 	bl	80a1fdc <_ZN5Print5printEii>

  Serial.print(" | ");
 80a129a:	f001 f961 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a129e:	4939      	ldr	r1, [pc, #228]	; (80a1384 <_Z13runDiagnosticv+0x1fc>)
 80a12a0:	f000 fe3e 	bl	80a1f20 <_ZN5Print5printEPKc>
  Serial.print("front right:");
 80a12a4:	f001 f95c 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a12a8:	4941      	ldr	r1, [pc, #260]	; (80a13b0 <_Z13runDiagnosticv+0x228>)
 80a12aa:	f000 fe39 	bl	80a1f20 <_ZN5Print5printEPKc>
  Serial.print(FRflag);
 80a12ae:	f001 f957 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a12b2:	4b40      	ldr	r3, [pc, #256]	; (80a13b4 <_Z13runDiagnosticv+0x22c>)
 80a12b4:	220a      	movs	r2, #10
 80a12b6:	7819      	ldrb	r1, [r3, #0]
 80a12b8:	f000 fe90 	bl	80a1fdc <_ZN5Print5printEii>

  Serial.print(" | ");
 80a12bc:	f001 f950 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a12c0:	4930      	ldr	r1, [pc, #192]	; (80a1384 <_Z13runDiagnosticv+0x1fc>)
 80a12c2:	f000 fe2d 	bl	80a1f20 <_ZN5Print5printEPKc>
  Serial.print("back left:");
 80a12c6:	f001 f94b 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a12ca:	493b      	ldr	r1, [pc, #236]	; (80a13b8 <_Z13runDiagnosticv+0x230>)
 80a12cc:	f000 fe28 	bl	80a1f20 <_ZN5Print5printEPKc>
  Serial.print(BLflag);
 80a12d0:	f001 f946 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a12d4:	4b39      	ldr	r3, [pc, #228]	; (80a13bc <_Z13runDiagnosticv+0x234>)
 80a12d6:	220a      	movs	r2, #10
 80a12d8:	7819      	ldrb	r1, [r3, #0]
 80a12da:	f000 fe7f 	bl	80a1fdc <_ZN5Print5printEii>

  Serial.print(" | ");
 80a12de:	f001 f93f 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a12e2:	4928      	ldr	r1, [pc, #160]	; (80a1384 <_Z13runDiagnosticv+0x1fc>)
 80a12e4:	f000 fe1c 	bl	80a1f20 <_ZN5Print5printEPKc>
  Serial.print("back right:");
 80a12e8:	f001 f93a 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a12ec:	4934      	ldr	r1, [pc, #208]	; (80a13c0 <_Z13runDiagnosticv+0x238>)
 80a12ee:	f000 fe17 	bl	80a1f20 <_ZN5Print5printEPKc>
  Serial.print(BRflag);
 80a12f2:	f001 f935 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a12f6:	4b33      	ldr	r3, [pc, #204]	; (80a13c4 <_Z13runDiagnosticv+0x23c>)
 80a12f8:	220a      	movs	r2, #10
 80a12fa:	7819      	ldrb	r1, [r3, #0]
 80a12fc:	f000 fe6e 	bl	80a1fdc <_ZN5Print5printEii>

  Serial.print(" | ");
 80a1300:	f001 f92e 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a1304:	491f      	ldr	r1, [pc, #124]	; (80a1384 <_Z13runDiagnosticv+0x1fc>)
 80a1306:	f000 fe0b 	bl	80a1f20 <_ZN5Print5printEPKc>
 80a130a:	f000 faeb 	bl	80a18e4 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD) {
 80a130e:	4c2e      	ldr	r4, [pc, #184]	; (80a13c8 <_Z13runDiagnosticv+0x240>)
 80a1310:	6823      	ldr	r3, [r4, #0]
 80a1312:	1ac0      	subs	r0, r0, r3
 80a1314:	2863      	cmp	r0, #99	; 0x63
 80a1316:	d91b      	bls.n	80a1350 <_Z13runDiagnosticv+0x1c8>
 80a1318:	f000 fae4 	bl	80a18e4 <HAL_Timer_Get_Milli_Seconds>
		lastPrintSample = millis();

		LIS3DHSample sample;
		if (accel.getSample(sample)) {
 80a131c:	a902      	add	r1, sp, #8
  Serial.print("back right:");
  Serial.print(BRflag);

  Serial.print(" | ");
  if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD) {
		lastPrintSample = millis();
 80a131e:	6020      	str	r0, [r4, #0]

		LIS3DHSample sample;
		if (accel.getSample(sample)) {
 80a1320:	482a      	ldr	r0, [pc, #168]	; (80a13cc <_Z13runDiagnosticv+0x244>)
 80a1322:	f7fe ff4e 	bl	80a01c2 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
 80a1326:	b170      	cbz	r0, 80a1346 <_Z13runDiagnosticv+0x1be>
			Serial.printlnf("%d,%d,%d", sample.x, sample.y, sample.z);
 80a1328:	f001 f91a 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a132c:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80a1330:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80a1334:	9200      	str	r2, [sp, #0]
 80a1336:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80a133a:	2101      	movs	r1, #1
 80a133c:	9201      	str	r2, [sp, #4]
 80a133e:	4a24      	ldr	r2, [pc, #144]	; (80a13d0 <_Z13runDiagnosticv+0x248>)
 80a1340:	f000 fe5d 	bl	80a1ffe <_ZN5Print11printf_implEbPKcz>
 80a1344:	e004      	b.n	80a1350 <_Z13runDiagnosticv+0x1c8>
		}
		else {
			Serial.println("no sample");
 80a1346:	f001 f90b 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a134a:	4922      	ldr	r1, [pc, #136]	; (80a13d4 <_Z13runDiagnosticv+0x24c>)
 80a134c:	f000 fdfb 	bl	80a1f46 <_ZN5Print7printlnEPKc>
		}
	}

  Serial.println();
 80a1350:	f001 f906 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a1354:	f000 fdeb 	bl	80a1f2e <_ZN5Print7printlnEv>

  LESC.writeMicroseconds(1600);
 80a1358:	481f      	ldr	r0, [pc, #124]	; (80a13d8 <_Z13runDiagnosticv+0x250>)
 80a135a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80a135e:	f000 fe89 	bl	80a2074 <_ZN5Servo17writeMicrosecondsEt>
  RESC.writeMicroseconds(1600);
 80a1362:	481e      	ldr	r0, [pc, #120]	; (80a13dc <_Z13runDiagnosticv+0x254>)
 80a1364:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80a1368:	f000 fe84 	bl	80a2074 <_ZN5Servo17writeMicrosecondsEt>
}
 80a136c:	b004      	add	sp, #16
 80a136e:	bd10      	pop	{r4, pc}
  Serial.print("sensor 2:");
  Serial.print(sensor2.readRangeContinuousMillimeters());
  Serial.print(" | ");
  Serial.print("sensor 3:");
  Serial.print(sensor3.readRangeContinuousMillimeters());
  if (sensor0.timeoutOccurred() || sensor1.timeoutOccurred() || sensor2.timeoutOccurred() || sensor3.timeoutOccurred()) { Serial.print(" SENSOR TIMEOUT"); }
 80a1370:	f001 f8f6 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a1374:	491a      	ldr	r1, [pc, #104]	; (80a13e0 <_Z13runDiagnosticv+0x258>)
 80a1376:	f000 fdd3 	bl	80a1f20 <_ZN5Print5printEPKc>
 80a137a:	e77d      	b.n	80a1278 <_Z13runDiagnosticv+0xf0>
 80a137c:	080a345c 	.word	0x080a345c
 80a1380:	20000424 	.word	0x20000424
 80a1384:	080a346b 	.word	0x080a346b
 80a1388:	080a346f 	.word	0x080a346f
 80a138c:	2000042c 	.word	0x2000042c
 80a1390:	080a3479 	.word	0x080a3479
 80a1394:	200003d4 	.word	0x200003d4
 80a1398:	080a3483 	.word	0x080a3483
 80a139c:	20000384 	.word	0x20000384
 80a13a0:	080a348d 	.word	0x080a348d
 80a13a4:	200003ec 	.word	0x200003ec
 80a13a8:	080a3497 	.word	0x080a3497
 80a13ac:	20000348 	.word	0x20000348
 80a13b0:	080a34a3 	.word	0x080a34a3
 80a13b4:	20000334 	.word	0x20000334
 80a13b8:	080a34b0 	.word	0x080a34b0
 80a13bc:	20000340 	.word	0x20000340
 80a13c0:	080a34bb 	.word	0x080a34bb
 80a13c4:	2000035c 	.word	0x2000035c
 80a13c8:	200003cc 	.word	0x200003cc
 80a13cc:	200003b8 	.word	0x200003b8
 80a13d0:	080a34c7 	.word	0x080a34c7
 80a13d4:	080a34d0 	.word	0x080a34d0
 80a13d8:	200003a8 	.word	0x200003a8
 80a13dc:	20000408 	.word	0x20000408
 80a13e0:	080a34da 	.word	0x080a34da

080a13e4 <_Z4stopv>:
  } else {              // LEFT ESC
    LESC.writeMicroseconds(pwm);
  }
}

void stop(){
 80a13e4:	b508      	push	{r3, lr}
  RESC.writeMicroseconds(1500);
 80a13e6:	4806      	ldr	r0, [pc, #24]	; (80a1400 <_Z4stopv+0x1c>)
 80a13e8:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a13ec:	f000 fe42 	bl	80a2074 <_ZN5Servo17writeMicrosecondsEt>
  LESC.writeMicroseconds(1500);
}
 80a13f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }
}

void stop(){
  RESC.writeMicroseconds(1500);
  LESC.writeMicroseconds(1500);
 80a13f4:	4803      	ldr	r0, [pc, #12]	; (80a1404 <_Z4stopv+0x20>)
 80a13f6:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a13fa:	f000 be3b 	b.w	80a2074 <_ZN5Servo17writeMicrosecondsEt>
 80a13fe:	bf00      	nop
 80a1400:	20000408 	.word	0x20000408
 80a1404:	200003a8 	.word	0x200003a8

080a1408 <_Z8movementi>:
}

void movement(int state) {
 80a1408:	b538      	push	{r3, r4, r5, lr}
  switch (state) {
 80a140a:	280c      	cmp	r0, #12
 80a140c:	f200 80c4 	bhi.w	80a1598 <_Z8movementi+0x190>
 80a1410:	e8df f000 	tbb	[pc, r0]
 80a1414:	108e0731 	.word	0x108e0731
 80a1418:	3b155831 	.word	0x3b155831
 80a141c:	4f7e2463 	.word	0x4f7e2463
 80a1420:	9f          	.byte	0x9f
 80a1421:	00          	.byte	0x00
    pwm = 1500 + speed;
  } else {              // reverse
    pwm = 1500 - speed;
  }
  if(motor == 1) {      // RIGHT ESC
    RESC.writeMicroseconds(pwm);
 80a1422:	485e      	ldr	r0, [pc, #376]	; (80a159c <_Z8movementi+0x194>)
 80a1424:	f240 61a4 	movw	r1, #1700	; 0x6a4
 80a1428:	f000 fe24 	bl	80a2074 <_ZN5Servo17writeMicrosecondsEt>
  } else {              // LEFT ESC
    LESC.writeMicroseconds(pwm);
 80a142c:	485c      	ldr	r0, [pc, #368]	; (80a15a0 <_Z8movementi+0x198>)
 80a142e:	f240 5114 	movw	r1, #1300	; 0x514
 80a1432:	e06a      	b.n	80a150a <_Z8movementi+0x102>
      move(1, maxR, 1);
      move(2, minS, 0);
      moving = true;
      break;
    case 3: //right
      move(1, minR, 1);
 80a1434:	4b5b      	ldr	r3, [pc, #364]	; (80a15a4 <_Z8movementi+0x19c>)
  // 30% throttle is 1500 +/- 300*0.3 = 1500 +/- 90

  int pwm = 1500;       // default is ESC stopped

  if(direction == 1) {  // forward
    pwm = 1500 + speed;
 80a1436:	6819      	ldr	r1, [r3, #0]
 80a1438:	f201 51dc 	addw	r1, r1, #1500	; 0x5dc
 80a143c:	e047      	b.n	80a14ce <_Z8movementi+0xc6>
      move(1, maxR, 0);
      move(2, maxS, 0);
      moving = true;
      break;
    case 6: //back right and left
      if (cur - prevFlag < degreesMin) {
 80a143e:	4b5a      	ldr	r3, [pc, #360]	; (80a15a8 <_Z8movementi+0x1a0>)
 80a1440:	4a5a      	ldr	r2, [pc, #360]	; (80a15ac <_Z8movementi+0x1a4>)
 80a1442:	681b      	ldr	r3, [r3, #0]
 80a1444:	6812      	ldr	r2, [r2, #0]
 80a1446:	1a9b      	subs	r3, r3, r2
 80a1448:	4a59      	ldr	r2, [pc, #356]	; (80a15b0 <_Z8movementi+0x1a8>)
 80a144a:	6812      	ldr	r2, [r2, #0]
 80a144c:	4293      	cmp	r3, r2
 80a144e:	da0e      	bge.n	80a146e <_Z8movementi+0x66>
        move(1, minR, 0);
 80a1450:	4b54      	ldr	r3, [pc, #336]	; (80a15a4 <_Z8movementi+0x19c>)
  int pwm = 1500;       // default is ESC stopped

  if(direction == 1) {  // forward
    pwm = 1500 + speed;
  } else {              // reverse
    pwm = 1500 - speed;
 80a1452:	6819      	ldr	r1, [r3, #0]
 80a1454:	f5c1 61bb 	rsb	r1, r1, #1496	; 0x5d8
 80a1458:	3104      	adds	r1, #4
 80a145a:	e010      	b.n	80a147e <_Z8movementi+0x76>
        lineFlag = 0;
      }
      moving = true;
      break;
    case 9: //back left and left
      if (cur - prevFlag < degreesMin) {
 80a145c:	4b52      	ldr	r3, [pc, #328]	; (80a15a8 <_Z8movementi+0x1a0>)
 80a145e:	4a53      	ldr	r2, [pc, #332]	; (80a15ac <_Z8movementi+0x1a4>)
 80a1460:	681b      	ldr	r3, [r3, #0]
 80a1462:	6812      	ldr	r2, [r2, #0]
 80a1464:	1a9b      	subs	r3, r3, r2
 80a1466:	4a52      	ldr	r2, [pc, #328]	; (80a15b0 <_Z8movementi+0x1a8>)
 80a1468:	6812      	ldr	r2, [r2, #0]
 80a146a:	4293      	cmp	r3, r2
 80a146c:	db3e      	blt.n	80a14ec <_Z8movementi+0xe4>
      break;
    case 6: //back right and left
      if (cur - prevFlag < degreesMin) {
        move(1, minR, 0);
        move(2, maxS, 1);
      } else if (cur - prevFlag < degrees90) {
 80a146e:	4a51      	ldr	r2, [pc, #324]	; (80a15b4 <_Z8movementi+0x1ac>)
 80a1470:	6812      	ldr	r2, [r2, #0]
 80a1472:	4293      	cmp	r3, r2
 80a1474:	da16      	bge.n	80a14a4 <_Z8movementi+0x9c>
        move(1, maxR, 1);
 80a1476:	4b50      	ldr	r3, [pc, #320]	; (80a15b8 <_Z8movementi+0x1b0>)
  // 30% throttle is 1500 +/- 300*0.3 = 1500 +/- 90

  int pwm = 1500;       // default is ESC stopped

  if(direction == 1) {  // forward
    pwm = 1500 + speed;
 80a1478:	6819      	ldr	r1, [r3, #0]
 80a147a:	f201 51dc 	addw	r1, r1, #1500	; 0x5dc
  } else {              // reverse
    pwm = 1500 - speed;
  }
  if(motor == 1) {      // RIGHT ESC
    RESC.writeMicroseconds(pwm);
 80a147e:	4847      	ldr	r0, [pc, #284]	; (80a159c <_Z8movementi+0x194>)
 80a1480:	b289      	uxth	r1, r1
 80a1482:	f000 fdf7 	bl	80a2074 <_ZN5Servo17writeMicrosecondsEt>
      if (cur - prevFlag < degreesMin) {
        move(1, minR, 0);
        move(2, maxS, 1);
      } else if (cur - prevFlag < degrees90) {
        move(1, maxR, 1);
        move(2, maxS, 1);
 80a1486:	4b4d      	ldr	r3, [pc, #308]	; (80a15bc <_Z8movementi+0x1b4>)
 80a1488:	e03a      	b.n	80a1500 <_Z8movementi+0xf8>
        lineFlag = 0;
      }
      moving = true;
      break;
    case 7: //back right and right
      if (cur - prevFlag < degreesMin) {
 80a148a:	4b47      	ldr	r3, [pc, #284]	; (80a15a8 <_Z8movementi+0x1a0>)
 80a148c:	4a47      	ldr	r2, [pc, #284]	; (80a15ac <_Z8movementi+0x1a4>)
 80a148e:	681b      	ldr	r3, [r3, #0]
 80a1490:	6812      	ldr	r2, [r2, #0]
 80a1492:	1a9b      	subs	r3, r3, r2
 80a1494:	4a46      	ldr	r2, [pc, #280]	; (80a15b0 <_Z8movementi+0x1a8>)
 80a1496:	6812      	ldr	r2, [r2, #0]
 80a1498:	4293      	cmp	r3, r2
 80a149a:	dbd9      	blt.n	80a1450 <_Z8movementi+0x48>
        move(1, minR, 0);
        move(2, maxS, 1);
      } else if (cur - prevFlag < degrees90) {
 80a149c:	4a45      	ldr	r2, [pc, #276]	; (80a15b4 <_Z8movementi+0x1ac>)
 80a149e:	6812      	ldr	r2, [r2, #0]
 80a14a0:	4293      	cmp	r3, r2
 80a14a2:	db0f      	blt.n	80a14c4 <_Z8movementi+0xbc>
        move(2, maxS, 1);
      } else if (cur - prevFlag < degrees90) {
        move(1, maxR, 1);
        move(2, maxS, 1);
      } else {
        lineFlag = 0;
 80a14a4:	4b46      	ldr	r3, [pc, #280]	; (80a15c0 <_Z8movementi+0x1b8>)
 80a14a6:	2200      	movs	r2, #0
 80a14a8:	601a      	str	r2, [r3, #0]
      }
      moving = true;
 80a14aa:	4b46      	ldr	r3, [pc, #280]	; (80a15c4 <_Z8movementi+0x1bc>)
 80a14ac:	2201      	movs	r2, #1
 80a14ae:	701a      	strb	r2, [r3, #0]
      break;
 80a14b0:	bd38      	pop	{r3, r4, r5, pc}
        lineFlag = 0;
      }
      moving = true;
      break;
    case 11: //startup movement: spin right, turn left, spin left, go forward
      if (cur - prevFlag < startSpinR) {
 80a14b2:	4b3d      	ldr	r3, [pc, #244]	; (80a15a8 <_Z8movementi+0x1a0>)
 80a14b4:	4a3d      	ldr	r2, [pc, #244]	; (80a15ac <_Z8movementi+0x1a4>)
 80a14b6:	681b      	ldr	r3, [r3, #0]
 80a14b8:	6812      	ldr	r2, [r2, #0]
 80a14ba:	1a9a      	subs	r2, r3, r2
 80a14bc:	4b42      	ldr	r3, [pc, #264]	; (80a15c8 <_Z8movementi+0x1c0>)
 80a14be:	681b      	ldr	r3, [r3, #0]
 80a14c0:	429a      	cmp	r2, r3
 80a14c2:	da30      	bge.n	80a1526 <_Z8movementi+0x11e>
    case 7: //back right and right
      if (cur - prevFlag < degreesMin) {
        move(1, minR, 0);
        move(2, maxS, 1);
      } else if (cur - prevFlag < degrees90) {
        move(1, maxR, 0);
 80a14c4:	4b3c      	ldr	r3, [pc, #240]	; (80a15b8 <_Z8movementi+0x1b0>)
  int pwm = 1500;       // default is ESC stopped

  if(direction == 1) {  // forward
    pwm = 1500 + speed;
  } else {              // reverse
    pwm = 1500 - speed;
 80a14c6:	6819      	ldr	r1, [r3, #0]
 80a14c8:	f5c1 61bb 	rsb	r1, r1, #1496	; 0x5d8
 80a14cc:	3104      	adds	r1, #4
  }
  if(motor == 1) {      // RIGHT ESC
    RESC.writeMicroseconds(pwm);
 80a14ce:	4833      	ldr	r0, [pc, #204]	; (80a159c <_Z8movementi+0x194>)
 80a14d0:	b289      	uxth	r1, r1
 80a14d2:	f000 fdcf 	bl	80a2074 <_ZN5Servo17writeMicrosecondsEt>
      if (cur - prevFlag < degreesMin) {
        move(1, minR, 0);
        move(2, maxS, 1);
      } else if (cur - prevFlag < degrees90) {
        move(1, maxR, 0);
        move(2, maxS, 0);
 80a14d6:	4b39      	ldr	r3, [pc, #228]	; (80a15bc <_Z8movementi+0x1b4>)
 80a14d8:	e033      	b.n	80a1542 <_Z8movementi+0x13a>
        lineFlag = 0;
      }
      moving = true;
      break;
    case 8: //back left and right
      if (cur - prevFlag < degreesMin) {
 80a14da:	4b33      	ldr	r3, [pc, #204]	; (80a15a8 <_Z8movementi+0x1a0>)
 80a14dc:	4a33      	ldr	r2, [pc, #204]	; (80a15ac <_Z8movementi+0x1a4>)
 80a14de:	681b      	ldr	r3, [r3, #0]
 80a14e0:	6812      	ldr	r2, [r2, #0]
 80a14e2:	1a9b      	subs	r3, r3, r2
 80a14e4:	4a32      	ldr	r2, [pc, #200]	; (80a15b0 <_Z8movementi+0x1a8>)
 80a14e6:	6812      	ldr	r2, [r2, #0]
 80a14e8:	4293      	cmp	r3, r2
 80a14ea:	dad7      	bge.n	80a149c <_Z8movementi+0x94>
        move(1, maxR, 0);
 80a14ec:	4b32      	ldr	r3, [pc, #200]	; (80a15b8 <_Z8movementi+0x1b0>)
    pwm = 1500 + speed;
  } else {              // reverse
    pwm = 1500 - speed;
  }
  if(motor == 1) {      // RIGHT ESC
    RESC.writeMicroseconds(pwm);
 80a14ee:	482b      	ldr	r0, [pc, #172]	; (80a159c <_Z8movementi+0x194>)
  int pwm = 1500;       // default is ESC stopped

  if(direction == 1) {  // forward
    pwm = 1500 + speed;
  } else {              // reverse
    pwm = 1500 - speed;
 80a14f0:	6819      	ldr	r1, [r3, #0]
 80a14f2:	f5c1 61bb 	rsb	r1, r1, #1496	; 0x5d8
 80a14f6:	3104      	adds	r1, #4
  }
  if(motor == 1) {      // RIGHT ESC
    RESC.writeMicroseconds(pwm);
 80a14f8:	b289      	uxth	r1, r1
 80a14fa:	f000 fdbb 	bl	80a2074 <_ZN5Servo17writeMicrosecondsEt>
      moving = true;
      break;
    case 8: //back left and right
      if (cur - prevFlag < degreesMin) {
        move(1, maxR, 0);
        move(2, minS, 1);
 80a14fe:	4b33      	ldr	r3, [pc, #204]	; (80a15cc <_Z8movementi+0x1c4>)
  // 30% throttle is 1500 +/- 300*0.3 = 1500 +/- 90

  int pwm = 1500;       // default is ESC stopped

  if(direction == 1) {  // forward
    pwm = 1500 + speed;
 80a1500:	6819      	ldr	r1, [r3, #0]
 80a1502:	f201 51dc 	addw	r1, r1, #1500	; 0x5dc
    pwm = 1500 - speed;
  }
  if(motor == 1) {      // RIGHT ESC
    RESC.writeMicroseconds(pwm);
  } else {              // LEFT ESC
    LESC.writeMicroseconds(pwm);
 80a1506:	4826      	ldr	r0, [pc, #152]	; (80a15a0 <_Z8movementi+0x198>)
 80a1508:	b289      	uxth	r1, r1
 80a150a:	f000 fdb3 	bl	80a2074 <_ZN5Servo17writeMicrosecondsEt>
 80a150e:	e7cc      	b.n	80a14aa <_Z8movementi+0xa2>
        lineFlag = 0;
      }
      moving = true;
      break;
    case 10: //back and spin 180
      if (cur - prevFlag < degreesMin) {
 80a1510:	4b25      	ldr	r3, [pc, #148]	; (80a15a8 <_Z8movementi+0x1a0>)
 80a1512:	4a26      	ldr	r2, [pc, #152]	; (80a15ac <_Z8movementi+0x1a4>)
 80a1514:	681b      	ldr	r3, [r3, #0]
 80a1516:	6812      	ldr	r2, [r2, #0]
 80a1518:	1a9b      	subs	r3, r3, r2
 80a151a:	4a25      	ldr	r2, [pc, #148]	; (80a15b0 <_Z8movementi+0x1a8>)
 80a151c:	6812      	ldr	r2, [r2, #0]
 80a151e:	4293      	cmp	r3, r2
 80a1520:	dbd0      	blt.n	80a14c4 <_Z8movementi+0xbc>
        move(1, maxR, 0);
        move(2, maxS, 0);
      } else if (cur - prevFlag < degrees180) {
 80a1522:	4a2b      	ldr	r2, [pc, #172]	; (80a15d0 <_Z8movementi+0x1c8>)
 80a1524:	e7bb      	b.n	80a149e <_Z8movementi+0x96>
      break;
    case 11: //startup movement: spin right, turn left, spin left, go forward
      if (cur - prevFlag < startSpinR) {
        move(1, maxR, 0);
        move(2, maxS, 0);
      } else if (cur - prevFlag < startTurnL + startSpinR) {
 80a1526:	492b      	ldr	r1, [pc, #172]	; (80a15d4 <_Z8movementi+0x1cc>)
 80a1528:	6808      	ldr	r0, [r1, #0]
 80a152a:	18c1      	adds	r1, r0, r3
 80a152c:	428a      	cmp	r2, r1
 80a152e:	da0d      	bge.n	80a154c <_Z8movementi+0x144>
        move(1, maxR, 1);
 80a1530:	4b21      	ldr	r3, [pc, #132]	; (80a15b8 <_Z8movementi+0x1b0>)
    pwm = 1500 + speed;
  } else {              // reverse
    pwm = 1500 - speed;
  }
  if(motor == 1) {      // RIGHT ESC
    RESC.writeMicroseconds(pwm);
 80a1532:	481a      	ldr	r0, [pc, #104]	; (80a159c <_Z8movementi+0x194>)
  // 30% throttle is 1500 +/- 300*0.3 = 1500 +/- 90

  int pwm = 1500;       // default is ESC stopped

  if(direction == 1) {  // forward
    pwm = 1500 + speed;
 80a1534:	6819      	ldr	r1, [r3, #0]
 80a1536:	f201 51dc 	addw	r1, r1, #1500	; 0x5dc
  } else {              // reverse
    pwm = 1500 - speed;
  }
  if(motor == 1) {      // RIGHT ESC
    RESC.writeMicroseconds(pwm);
 80a153a:	b289      	uxth	r1, r1
 80a153c:	f000 fd9a 	bl	80a2074 <_ZN5Servo17writeMicrosecondsEt>
      if (cur - prevFlag < startSpinR) {
        move(1, maxR, 0);
        move(2, maxS, 0);
      } else if (cur - prevFlag < startTurnL + startSpinR) {
        move(1, maxR, 1);
        move(2, minS, 0);
 80a1540:	4b22      	ldr	r3, [pc, #136]	; (80a15cc <_Z8movementi+0x1c4>)
  int pwm = 1500;       // default is ESC stopped

  if(direction == 1) {  // forward
    pwm = 1500 + speed;
  } else {              // reverse
    pwm = 1500 - speed;
 80a1542:	6819      	ldr	r1, [r3, #0]
 80a1544:	f5c1 61bb 	rsb	r1, r1, #1496	; 0x5d8
 80a1548:	3104      	adds	r1, #4
 80a154a:	e7dc      	b.n	80a1506 <_Z8movementi+0xfe>
        move(1, maxR, 0);
        move(2, maxS, 0);
      } else if (cur - prevFlag < startTurnL + startSpinR) {
        move(1, maxR, 1);
        move(2, minS, 0);
      } else if (cur - prevFlag < startSpinL + startTurnL + startSpinR) {
 80a154c:	4922      	ldr	r1, [pc, #136]	; (80a15d8 <_Z8movementi+0x1d0>)
 80a154e:	6809      	ldr	r1, [r1, #0]
 80a1550:	e016      	b.n	80a1580 <_Z8movementi+0x178>
        pivotFlag = false;
      }
      moving = true;
      break;
    case 12: //pivot: go back, spin right, turn left, spin left, go forward
      if (cur - prevFlag < pivotBack) {
 80a1552:	4b15      	ldr	r3, [pc, #84]	; (80a15a8 <_Z8movementi+0x1a0>)
 80a1554:	681a      	ldr	r2, [r3, #0]
 80a1556:	4b15      	ldr	r3, [pc, #84]	; (80a15ac <_Z8movementi+0x1a4>)
 80a1558:	681b      	ldr	r3, [r3, #0]
 80a155a:	1ad2      	subs	r2, r2, r3
 80a155c:	4b1f      	ldr	r3, [pc, #124]	; (80a15dc <_Z8movementi+0x1d4>)
 80a155e:	681b      	ldr	r3, [r3, #0]
 80a1560:	429a      	cmp	r2, r3
 80a1562:	dbaf      	blt.n	80a14c4 <_Z8movementi+0xbc>
        move(1, maxR, 0);
        move(2, maxS, 0);
      } else if (cur - prevFlag < pivotSpinR + pivotBack) {
 80a1564:	491e      	ldr	r1, [pc, #120]	; (80a15e0 <_Z8movementi+0x1d8>)
 80a1566:	6809      	ldr	r1, [r1, #0]
 80a1568:	18c8      	adds	r0, r1, r3
 80a156a:	4282      	cmp	r2, r0
 80a156c:	dbaa      	blt.n	80a14c4 <_Z8movementi+0xbc>
        move(1, maxR, 0);
        move(2, maxS, 0);
      } else if (cur - prevFlag < pivotTurnL + pivotSpinR + pivotBack) {
 80a156e:	481d      	ldr	r0, [pc, #116]	; (80a15e4 <_Z8movementi+0x1dc>)
 80a1570:	6805      	ldr	r5, [r0, #0]
 80a1572:	186c      	adds	r4, r5, r1
 80a1574:	441c      	add	r4, r3
 80a1576:	42a2      	cmp	r2, r4
 80a1578:	dbda      	blt.n	80a1530 <_Z8movementi+0x128>
        move(1, maxR, 1);
        move(2, minS, 0);
      } else if (cur - prevFlag < pivotSpinL + pivotTurnL + pivotSpinR + pivotBack) {
 80a157a:	481b      	ldr	r0, [pc, #108]	; (80a15e8 <_Z8movementi+0x1e0>)
 80a157c:	6800      	ldr	r0, [r0, #0]
 80a157e:	4428      	add	r0, r5
 80a1580:	4401      	add	r1, r0
 80a1582:	440b      	add	r3, r1
 80a1584:	429a      	cmp	r2, r3
 80a1586:	f6ff af76 	blt.w	80a1476 <_Z8movementi+0x6e>
        move(2, minS, 0);
      } else if (cur - prevFlag < startSpinL + startTurnL + startSpinR) {
        move(1, maxR, 1);
        move(2, maxS, 1);
      } else {
        past = 'f';
 80a158a:	4b18      	ldr	r3, [pc, #96]	; (80a15ec <_Z8movementi+0x1e4>)
 80a158c:	2266      	movs	r2, #102	; 0x66
 80a158e:	701a      	strb	r2, [r3, #0]
        pivotFlag = false;
 80a1590:	4b17      	ldr	r3, [pc, #92]	; (80a15f0 <_Z8movementi+0x1e8>)
 80a1592:	2200      	movs	r2, #0
 80a1594:	701a      	strb	r2, [r3, #0]
 80a1596:	e788      	b.n	80a14aa <_Z8movementi+0xa2>
 80a1598:	bd38      	pop	{r3, r4, r5, pc}
 80a159a:	bf00      	nop
 80a159c:	20000408 	.word	0x20000408
 80a15a0:	200003a8 	.word	0x200003a8
 80a15a4:	2000034c 	.word	0x2000034c
 80a15a8:	20000418 	.word	0x20000418
 80a15ac:	20000404 	.word	0x20000404
 80a15b0:	20000314 	.word	0x20000314
 80a15b4:	20000328 	.word	0x20000328
 80a15b8:	2000031c 	.word	0x2000031c
 80a15bc:	20000320 	.word	0x20000320
 80a15c0:	200003a0 	.word	0x200003a0
 80a15c4:	200003a4 	.word	0x200003a4
 80a15c8:	20000308 	.word	0x20000308
 80a15cc:	20000350 	.word	0x20000350
 80a15d0:	2000032c 	.word	0x2000032c
 80a15d4:	20000330 	.word	0x20000330
 80a15d8:	20000304 	.word	0x20000304
 80a15dc:	2000030c 	.word	0x2000030c
 80a15e0:	20000360 	.word	0x20000360
 80a15e4:	20000324 	.word	0x20000324
 80a15e8:	20000358 	.word	0x20000358
 80a15ec:	20000428 	.word	0x20000428
 80a15f0:	20000426 	.word	0x20000426

080a15f4 <setup>:
      break;
  }
}

void setup()
{
 80a15f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  pinMode(FL, INPUT);
 80a15f8:	4c4d      	ldr	r4, [pc, #308]	; (80a1730 <setup+0x13c>)
  pinMode(FR, INPUT);
 80a15fa:	f8df a174 	ldr.w	sl, [pc, #372]	; 80a1770 <setup+0x17c>
  }
}

void setup()
{
  pinMode(FL, INPUT);
 80a15fe:	8820      	ldrh	r0, [r4, #0]
 80a1600:	2100      	movs	r1, #0
  pinMode(FR, INPUT);
  pinMode(BL, INPUT);
 80a1602:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80a1774 <setup+0x180>
  }
}

void setup()
{
  pinMode(FL, INPUT);
 80a1606:	f001 f8df 	bl	80a27c8 <pinMode>
  pinMode(FR, INPUT);
  pinMode(BL, INPUT);
  pinMode(BR, INPUT);
 80a160a:	f8df 816c 	ldr.w	r8, [pc, #364]	; 80a1778 <setup+0x184>
}

void setup()
{
  pinMode(FL, INPUT);
  pinMode(FR, INPUT);
 80a160e:	f8ba 0000 	ldrh.w	r0, [sl]
 80a1612:	2100      	movs	r1, #0
 80a1614:	f001 f8d8 	bl	80a27c8 <pinMode>
  pinMode(BL, INPUT);
  pinMode(BR, INPUT);

  pinMode(RS, INPUT);
 80a1618:	4f46      	ldr	r7, [pc, #280]	; (80a1734 <setup+0x140>)

void setup()
{
  pinMode(FL, INPUT);
  pinMode(FR, INPUT);
  pinMode(BL, INPUT);
 80a161a:	f8b9 0000 	ldrh.w	r0, [r9]
 80a161e:	2100      	movs	r1, #0
 80a1620:	f001 f8d2 	bl	80a27c8 <pinMode>
  pinMode(BR, INPUT);

  pinMode(RS, INPUT);

  pinMode(Lmotor, OUTPUT);
 80a1624:	4d44      	ldr	r5, [pc, #272]	; (80a1738 <setup+0x144>)
void setup()
{
  pinMode(FL, INPUT);
  pinMode(FR, INPUT);
  pinMode(BL, INPUT);
  pinMode(BR, INPUT);
 80a1626:	f8b8 0000 	ldrh.w	r0, [r8]
 80a162a:	2100      	movs	r1, #0
 80a162c:	f001 f8cc 	bl	80a27c8 <pinMode>

  pinMode(RS, INPUT);

  pinMode(Lmotor, OUTPUT);
  pinMode(Rmotor, OUTPUT);
 80a1630:	4e42      	ldr	r6, [pc, #264]	; (80a173c <setup+0x148>)
  pinMode(FL, INPUT);
  pinMode(FR, INPUT);
  pinMode(BL, INPUT);
  pinMode(BR, INPUT);

  pinMode(RS, INPUT);
 80a1632:	8838      	ldrh	r0, [r7, #0]
 80a1634:	2100      	movs	r1, #0
 80a1636:	f001 f8c7 	bl	80a27c8 <pinMode>

  pinMode(Lmotor, OUTPUT);
 80a163a:	8828      	ldrh	r0, [r5, #0]
 80a163c:	2101      	movs	r1, #1
 80a163e:	f001 f8c3 	bl	80a27c8 <pinMode>
  pinMode(Rmotor, OUTPUT);
 80a1642:	2101      	movs	r1, #1
 80a1644:	8830      	ldrh	r0, [r6, #0]
 80a1646:	f001 f8bf 	bl	80a27c8 <pinMode>

  Serial.begin(9600);
 80a164a:	f000 ff89 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a164e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a1652:	f000 ff6b 	bl	80a252c <_ZN9USBSerial5beginEl>

  tof_init();
 80a1656:	f7ff fcc9 	bl	80a0fec <_Z8tof_initv>
  accel_init();
 80a165a:	f7ff fd7b 	bl	80a1154 <_Z10accel_initv>

  attachInterrupt(FL,FLISR,FALLING);
 80a165e:	8820      	ldrh	r0, [r4, #0]
 80a1660:	2400      	movs	r4, #0
 80a1662:	4937      	ldr	r1, [pc, #220]	; (80a1740 <setup+0x14c>)
 80a1664:	2202      	movs	r2, #2
 80a1666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a166a:	9400      	str	r4, [sp, #0]
 80a166c:	f000 fbaa 	bl	80a1dc4 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(FR,FRISR,FALLING);
 80a1670:	4934      	ldr	r1, [pc, #208]	; (80a1744 <setup+0x150>)
 80a1672:	2202      	movs	r2, #2
 80a1674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a1678:	f8ba 0000 	ldrh.w	r0, [sl]
 80a167c:	9400      	str	r4, [sp, #0]
 80a167e:	f000 fba1 	bl	80a1dc4 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(BL,BLISR,FALLING);
 80a1682:	4931      	ldr	r1, [pc, #196]	; (80a1748 <setup+0x154>)
 80a1684:	2202      	movs	r2, #2
 80a1686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a168a:	f8b9 0000 	ldrh.w	r0, [r9]
 80a168e:	9400      	str	r4, [sp, #0]
 80a1690:	f000 fb98 	bl	80a1dc4 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(BR,BRISR,FALLING);
 80a1694:	492d      	ldr	r1, [pc, #180]	; (80a174c <setup+0x158>)
 80a1696:	2202      	movs	r2, #2
 80a1698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a169c:	f8b8 0000 	ldrh.w	r0, [r8]
 80a16a0:	9400      	str	r4, [sp, #0]
 80a16a2:	f000 fb8f 	bl	80a1dc4 <_Z15attachInterrupttPFvvE13InterruptModeah>

  attachInterrupt(RS,RSISR,CHANGE);
 80a16a6:	8838      	ldrh	r0, [r7, #0]
 80a16a8:	4929      	ldr	r1, [pc, #164]	; (80a1750 <setup+0x15c>)
 80a16aa:	4622      	mov	r2, r4
 80a16ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a16b0:	9400      	str	r4, [sp, #0]
 80a16b2:	f000 fb87 	bl	80a1dc4 <_Z15attachInterrupttPFvvE13InterruptModeah>

  LESC.attach(Lmotor);
 80a16b6:	8829      	ldrh	r1, [r5, #0]
 80a16b8:	25b4      	movs	r5, #180	; 0xb4
 80a16ba:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a16be:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a16c2:	9400      	str	r4, [sp, #0]
 80a16c4:	9501      	str	r5, [sp, #4]
 80a16c6:	4823      	ldr	r0, [pc, #140]	; (80a1754 <setup+0x160>)
 80a16c8:	f000 fd09 	bl	80a20de <_ZN5Servo6attachEtttss>
  LESC.writeMicroseconds(1500);
 80a16cc:	4821      	ldr	r0, [pc, #132]	; (80a1754 <setup+0x160>)
 80a16ce:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a16d2:	f000 fccf 	bl	80a2074 <_ZN5Servo17writeMicrosecondsEt>
  RESC.attach(Rmotor);
 80a16d6:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a16da:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a16de:	8831      	ldrh	r1, [r6, #0]
 80a16e0:	e88d 0030 	stmia.w	sp, {r4, r5}
 80a16e4:	481c      	ldr	r0, [pc, #112]	; (80a1758 <setup+0x164>)
 80a16e6:	f000 fcfa 	bl	80a20de <_ZN5Servo6attachEtttss>
  RESC.writeMicroseconds(1500);
 80a16ea:	481b      	ldr	r0, [pc, #108]	; (80a1758 <setup+0x164>)
 80a16ec:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a16f0:	f000 fcc0 	bl	80a2074 <_ZN5Servo17writeMicrosecondsEt>

  moving = true;
 80a16f4:	4b19      	ldr	r3, [pc, #100]	; (80a175c <setup+0x168>)
 80a16f6:	2201      	movs	r2, #1
 80a16f8:	701a      	strb	r2, [r3, #0]

  while(!RSflag) {  // initial LOW
 80a16fa:	4b19      	ldr	r3, [pc, #100]	; (80a1760 <setup+0x16c>)
 80a16fc:	781b      	ldrb	r3, [r3, #0]
 80a16fe:	b92b      	cbnz	r3, 80a170c <setup+0x118>
    Serial.println("Waiting for Start");
 80a1700:	f000 ff2e 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a1704:	4917      	ldr	r1, [pc, #92]	; (80a1764 <setup+0x170>)
 80a1706:	f000 fc1e 	bl	80a1f46 <_ZN5Print7printlnEPKc>
 80a170a:	e7f6      	b.n	80a16fa <setup+0x106>
    //Particle.publish("Waiting for Start");
  }
  Serial.println("Starting in 5 seconds...");
 80a170c:	f000 ff28 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a1710:	4915      	ldr	r1, [pc, #84]	; (80a1768 <setup+0x174>)
 80a1712:	f000 fc18 	bl	80a1f46 <_ZN5Print7printlnEPKc>
  //Particle.publish("Starting in 5 seconds...");
  delay(5000);
 80a1716:	f241 3088 	movw	r0, #5000	; 0x1388
 80a171a:	f000 fa6d 	bl	80a1bf8 <delay>

  Serial.println("GO!");
 80a171e:	f000 ff1f 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a1722:	4912      	ldr	r1, [pc, #72]	; (80a176c <setup+0x178>)
  //Particle.publish("GO!");
}
 80a1724:	b002      	add	sp, #8
 80a1726:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  }
  Serial.println("Starting in 5 seconds...");
  //Particle.publish("Starting in 5 seconds...");
  delay(5000);

  Serial.println("GO!");
 80a172a:	f000 bc0c 	b.w	80a1f46 <_ZN5Print7printlnEPKc>
 80a172e:	bf00      	nop
 80a1730:	20000310 	.word	0x20000310
 80a1734:	20000300 	.word	0x20000300
 80a1738:	20000354 	.word	0x20000354
 80a173c:	20000344 	.word	0x20000344
 80a1740:	080a0f4d 	.word	0x080a0f4d
 80a1744:	080a0f6d 	.word	0x080a0f6d
 80a1748:	080a0f8d 	.word	0x080a0f8d
 80a174c:	080a0fad 	.word	0x080a0fad
 80a1750:	080a0fcd 	.word	0x080a0fcd
 80a1754:	200003a8 	.word	0x200003a8
 80a1758:	20000408 	.word	0x20000408
 80a175c:	200003a4 	.word	0x200003a4
 80a1760:	20000424 	.word	0x20000424
 80a1764:	080a34ea 	.word	0x080a34ea
 80a1768:	080a34fc 	.word	0x080a34fc
 80a176c:	080a3515 	.word	0x080a3515
 80a1770:	20000318 	.word	0x20000318
 80a1774:	20000338 	.word	0x20000338
 80a1778:	2000033c 	.word	0x2000033c

080a177c <loop>:
  //Particle.publish("GO!");
}

void loop()
{
 80a177c:	b508      	push	{r3, lr}
  if (!FLflag || !FRflag || !BRflag || !BLflag) {
 80a177e:	4b18      	ldr	r3, [pc, #96]	; (80a17e0 <loop+0x64>)
 80a1780:	781b      	ldrb	r3, [r3, #0]
 80a1782:	b143      	cbz	r3, 80a1796 <loop+0x1a>
 80a1784:	4b17      	ldr	r3, [pc, #92]	; (80a17e4 <loop+0x68>)
 80a1786:	781b      	ldrb	r3, [r3, #0]
 80a1788:	b12b      	cbz	r3, 80a1796 <loop+0x1a>
 80a178a:	4b17      	ldr	r3, [pc, #92]	; (80a17e8 <loop+0x6c>)
 80a178c:	781b      	ldrb	r3, [r3, #0]
 80a178e:	b113      	cbz	r3, 80a1796 <loop+0x1a>
 80a1790:	4b16      	ldr	r3, [pc, #88]	; (80a17ec <loop+0x70>)
 80a1792:	781b      	ldrb	r3, [r3, #0]
 80a1794:	b943      	cbnz	r3, 80a17a8 <loop+0x2c>
    moving = false;
 80a1796:	4b16      	ldr	r3, [pc, #88]	; (80a17f0 <loop+0x74>)
 80a1798:	2200      	movs	r2, #0
 80a179a:	701a      	strb	r2, [r3, #0]
    stop();
 80a179c:	f7ff fe22 	bl	80a13e4 <_Z4stopv>
    Serial.println("Stopped");
 80a17a0:	f000 fede 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a17a4:	4913      	ldr	r1, [pc, #76]	; (80a17f4 <loop+0x78>)
 80a17a6:	e005      	b.n	80a17b4 <loop+0x38>
  } else {
    movement(0);
 80a17a8:	2000      	movs	r0, #0
 80a17aa:	f7ff fe2d 	bl	80a1408 <_Z8movementi>
    Serial.println("Moving");
 80a17ae:	f000 fed7 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a17b2:	4911      	ldr	r1, [pc, #68]	; (80a17f8 <loop+0x7c>)
 80a17b4:	f000 fbc7 	bl	80a1f46 <_ZN5Print7printlnEPKc>
  }

  if(RSflag == HIGH) {
 80a17b8:	4b10      	ldr	r3, [pc, #64]	; (80a17fc <loop+0x80>)
 80a17ba:	781b      	ldrb	r3, [r3, #0]
 80a17bc:	b123      	cbz	r3, 80a17c8 <loop+0x4c>
    moving = false;
 80a17be:	4b0c      	ldr	r3, [pc, #48]	; (80a17f0 <loop+0x74>)
 80a17c0:	2200      	movs	r2, #0
 80a17c2:	701a      	strb	r2, [r3, #0]
    stop();
 80a17c4:	f7ff fe0e 	bl	80a13e4 <_Z4stopv>
 80a17c8:	f000 f88c 	bl	80a18e4 <HAL_Timer_Get_Milli_Seconds>
  }

  cur = millis();
 80a17cc:	4b0c      	ldr	r3, [pc, #48]	; (80a1800 <loop+0x84>)
 80a17ce:	6018      	str	r0, [r3, #0]
  prevFlag = cur;
 80a17d0:	4b0c      	ldr	r3, [pc, #48]	; (80a1804 <loop+0x88>)
 80a17d2:	6018      	str	r0, [r3, #0]

  runDiagnostic();
 80a17d4:	f7ff fcd8 	bl	80a1188 <_Z13runDiagnosticv>
  stop();
}
 80a17d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  cur = millis();
  prevFlag = cur;

  runDiagnostic();
  stop();
 80a17dc:	f7ff be02 	b.w	80a13e4 <_Z4stopv>
 80a17e0:	20000348 	.word	0x20000348
 80a17e4:	20000334 	.word	0x20000334
 80a17e8:	2000035c 	.word	0x2000035c
 80a17ec:	20000340 	.word	0x20000340
 80a17f0:	200003a4 	.word	0x200003a4
 80a17f4:	080a3519 	.word	0x080a3519
 80a17f8:	080a3521 	.word	0x080a3521
 80a17fc:	20000424 	.word	0x20000424
 80a1800:	20000418 	.word	0x20000418
 80a1804:	20000404 	.word	0x20000404

080a1808 <_GLOBAL__sub_I_sensor0>:
}
 80a1808:	b538      	push	{r3, r4, r5, lr}
 80a180a:	4b1e      	ldr	r3, [pc, #120]	; (80a1884 <_GLOBAL__sub_I_sensor0+0x7c>)
 80a180c:	2400      	movs	r4, #0
 80a180e:	701c      	strb	r4, [r3, #0]
 80a1810:	4b1d      	ldr	r3, [pc, #116]	; (80a1888 <_GLOBAL__sub_I_sensor0+0x80>)
 80a1812:	2501      	movs	r5, #1
 80a1814:	701d      	strb	r5, [r3, #0]
 80a1816:	4b1d      	ldr	r3, [pc, #116]	; (80a188c <_GLOBAL__sub_I_sensor0+0x84>)
 80a1818:	2202      	movs	r2, #2
 80a181a:	701c      	strb	r4, [r3, #0]
 80a181c:	4b1c      	ldr	r3, [pc, #112]	; (80a1890 <_GLOBAL__sub_I_sensor0+0x88>)
 80a181e:	701d      	strb	r5, [r3, #0]
 80a1820:	4b1c      	ldr	r3, [pc, #112]	; (80a1894 <_GLOBAL__sub_I_sensor0+0x8c>)
 80a1822:	701a      	strb	r2, [r3, #0]
 80a1824:	4b1c      	ldr	r3, [pc, #112]	; (80a1898 <_GLOBAL__sub_I_sensor0+0x90>)
 80a1826:	2208      	movs	r2, #8
 80a1828:	701a      	strb	r2, [r3, #0]
 80a182a:	f000 f863 	bl	80a18f4 <HAL_Pin_Map>
 80a182e:	4b1b      	ldr	r3, [pc, #108]	; (80a189c <_GLOBAL__sub_I_sensor0+0x94>)
 80a1830:	6018      	str	r0, [r3, #0]

#if !defined(PARTICLE)
#  include <Wire.h>
#endif

VL53L0X sensor0;
 80a1832:	481b      	ldr	r0, [pc, #108]	; (80a18a0 <_GLOBAL__sub_I_sensor0+0x98>)
 80a1834:	f7fe fd8a 	bl	80a034c <_ZN7VL53L0XC1Ev>
VL53L0X sensor1;
 80a1838:	481a      	ldr	r0, [pc, #104]	; (80a18a4 <_GLOBAL__sub_I_sensor0+0x9c>)
 80a183a:	f7fe fd87 	bl	80a034c <_ZN7VL53L0XC1Ev>
VL53L0X sensor2;
 80a183e:	481a      	ldr	r0, [pc, #104]	; (80a18a8 <_GLOBAL__sub_I_sensor0+0xa0>)
 80a1840:	f7fe fd84 	bl	80a034c <_ZN7VL53L0XC1Ev>
VL53L0X sensor3;
 80a1844:	4819      	ldr	r0, [pc, #100]	; (80a18ac <_GLOBAL__sub_I_sensor0+0xa4>)
 80a1846:	f7fe fd81 	bl	80a034c <_ZN7VL53L0XC1Ev>

Servo LESC;
 80a184a:	4819      	ldr	r0, [pc, #100]	; (80a18b0 <_GLOBAL__sub_I_sensor0+0xa8>)
 80a184c:	f000 fc32 	bl	80a20b4 <_ZN5ServoC1Ev>
Servo RESC;
 80a1850:	4818      	ldr	r0, [pc, #96]	; (80a18b4 <_GLOBAL__sub_I_sensor0+0xac>)
 80a1852:	f000 fc2f 	bl	80a20b4 <_ZN5ServoC1Ev>
boolean BRflag = true;

// remote start flag
boolean RSflag = false;

SYSTEM_THREAD(ENABLED);
 80a1856:	4621      	mov	r1, r4
 80a1858:	4628      	mov	r0, r5
 80a185a:	f000 f99d 	bl	80a1b98 <system_thread_set_state>

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a185e:	2003      	movs	r0, #3
 80a1860:	f000 f98a 	bl	80a1b78 <set_system_mode>
SYSTEM_MODE(MANUAL);	// fully offline

// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
 80a1864:	f001 f82a 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a1868:	4d13      	ldr	r5, [pc, #76]	; (80a18b8 <_GLOBAL__sub_I_sensor0+0xb0>)
 80a186a:	4601      	mov	r1, r0
 80a186c:	4622      	mov	r2, r4
 80a186e:	4628      	mov	r0, r5
 80a1870:	2311      	movs	r3, #17
 80a1872:	f7fe fd35 	bl	80a02e0 <_ZN9LIS3DHI2CC1ER7TwoWirehi>
 80a1876:	4628      	mov	r0, r5
  cur = millis();
  prevFlag = cur;

  runDiagnostic();
  stop();
}
 80a1878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(MANUAL);	// fully offline

// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
 80a187c:	490f      	ldr	r1, [pc, #60]	; (80a18bc <_GLOBAL__sub_I_sensor0+0xb4>)
 80a187e:	4a10      	ldr	r2, [pc, #64]	; (80a18c0 <_GLOBAL__sub_I_sensor0+0xb8>)
 80a1880:	f001 b890 	b.w	80a29a4 <__aeabi_atexit>
 80a1884:	2000041c 	.word	0x2000041c
 80a1888:	200003d0 	.word	0x200003d0
 80a188c:	20000427 	.word	0x20000427
 80a1890:	2000039c 	.word	0x2000039c
 80a1894:	20000425 	.word	0x20000425
 80a1898:	200003a5 	.word	0x200003a5
 80a189c:	20000420 	.word	0x20000420
 80a18a0:	2000042c 	.word	0x2000042c
 80a18a4:	200003d4 	.word	0x200003d4
 80a18a8:	20000384 	.word	0x20000384
 80a18ac:	200003ec 	.word	0x200003ec
 80a18b0:	200003a8 	.word	0x200003a8
 80a18b4:	20000408 	.word	0x20000408
 80a18b8:	200003b8 	.word	0x200003b8
 80a18bc:	080a00af 	.word	0x080a00af
 80a18c0:	20000368 	.word	0x20000368

080a18c4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a18c4:	b508      	push	{r3, lr}
 80a18c6:	4b02      	ldr	r3, [pc, #8]	; (80a18d0 <os_mutex_create+0xc>)
 80a18c8:	681b      	ldr	r3, [r3, #0]
 80a18ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a18cc:	9301      	str	r3, [sp, #4]
 80a18ce:	bd08      	pop	{r3, pc}
 80a18d0:	080601d0 	.word	0x080601d0

080a18d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a18d4:	b508      	push	{r3, lr}
 80a18d6:	4b02      	ldr	r3, [pc, #8]	; (80a18e0 <HAL_RNG_GetRandomNumber+0xc>)
 80a18d8:	681b      	ldr	r3, [r3, #0]
 80a18da:	685b      	ldr	r3, [r3, #4]
 80a18dc:	9301      	str	r3, [sp, #4]
 80a18de:	bd08      	pop	{r3, pc}
 80a18e0:	0806019c 	.word	0x0806019c

080a18e4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a18e4:	b508      	push	{r3, lr}
 80a18e6:	4b02      	ldr	r3, [pc, #8]	; (80a18f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a18e8:	681b      	ldr	r3, [r3, #0]
 80a18ea:	695b      	ldr	r3, [r3, #20]
 80a18ec:	9301      	str	r3, [sp, #4]
 80a18ee:	bd08      	pop	{r3, pc}
 80a18f0:	0806019c 	.word	0x0806019c

080a18f4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a18f4:	b508      	push	{r3, lr}
 80a18f6:	4b02      	ldr	r3, [pc, #8]	; (80a1900 <HAL_Pin_Map+0xc>)
 80a18f8:	681b      	ldr	r3, [r3, #0]
 80a18fa:	681b      	ldr	r3, [r3, #0]
 80a18fc:	9301      	str	r3, [sp, #4]
 80a18fe:	bd08      	pop	{r3, pc}
 80a1900:	080601b0 	.word	0x080601b0

080a1904 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1904:	b508      	push	{r3, lr}
 80a1906:	4b02      	ldr	r3, [pc, #8]	; (80a1910 <HAL_Validate_Pin_Function+0xc>)
 80a1908:	681b      	ldr	r3, [r3, #0]
 80a190a:	685b      	ldr	r3, [r3, #4]
 80a190c:	9301      	str	r3, [sp, #4]
 80a190e:	bd08      	pop	{r3, pc}
 80a1910:	080601b0 	.word	0x080601b0

080a1914 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1914:	b508      	push	{r3, lr}
 80a1916:	4b02      	ldr	r3, [pc, #8]	; (80a1920 <HAL_Pin_Mode+0xc>)
 80a1918:	681b      	ldr	r3, [r3, #0]
 80a191a:	689b      	ldr	r3, [r3, #8]
 80a191c:	9301      	str	r3, [sp, #4]
 80a191e:	bd08      	pop	{r3, pc}
 80a1920:	080601b0 	.word	0x080601b0

080a1924 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1924:	b508      	push	{r3, lr}
 80a1926:	4b02      	ldr	r3, [pc, #8]	; (80a1930 <HAL_Get_Pin_Mode+0xc>)
 80a1928:	681b      	ldr	r3, [r3, #0]
 80a192a:	68db      	ldr	r3, [r3, #12]
 80a192c:	9301      	str	r3, [sp, #4]
 80a192e:	bd08      	pop	{r3, pc}
 80a1930:	080601b0 	.word	0x080601b0

080a1934 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1934:	b508      	push	{r3, lr}
 80a1936:	4b02      	ldr	r3, [pc, #8]	; (80a1940 <HAL_GPIO_Write+0xc>)
 80a1938:	681b      	ldr	r3, [r3, #0]
 80a193a:	691b      	ldr	r3, [r3, #16]
 80a193c:	9301      	str	r3, [sp, #4]
 80a193e:	bd08      	pop	{r3, pc}
 80a1940:	080601b0 	.word	0x080601b0

080a1944 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1944:	b508      	push	{r3, lr}
 80a1946:	4b02      	ldr	r3, [pc, #8]	; (80a1950 <HAL_GPIO_Read+0xc>)
 80a1948:	681b      	ldr	r3, [r3, #0]
 80a194a:	695b      	ldr	r3, [r3, #20]
 80a194c:	9301      	str	r3, [sp, #4]
 80a194e:	bd08      	pop	{r3, pc}
 80a1950:	080601b0 	.word	0x080601b0

080a1954 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a1954:	b508      	push	{r3, lr}
 80a1956:	4b02      	ldr	r3, [pc, #8]	; (80a1960 <HAL_Interrupts_Attach+0xc>)
 80a1958:	681b      	ldr	r3, [r3, #0]
 80a195a:	699b      	ldr	r3, [r3, #24]
 80a195c:	9301      	str	r3, [sp, #4]
 80a195e:	bd08      	pop	{r3, pc}
 80a1960:	080601b0 	.word	0x080601b0

080a1964 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a1964:	b508      	push	{r3, lr}
 80a1966:	4b02      	ldr	r3, [pc, #8]	; (80a1970 <HAL_Interrupts_Detach+0xc>)
 80a1968:	681b      	ldr	r3, [r3, #0]
 80a196a:	69db      	ldr	r3, [r3, #28]
 80a196c:	9301      	str	r3, [sp, #4]
 80a196e:	bd08      	pop	{r3, pc}
 80a1970:	080601b0 	.word	0x080601b0

080a1974 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a1974:	b508      	push	{r3, lr}
 80a1976:	4b02      	ldr	r3, [pc, #8]	; (80a1980 <HAL_I2C_Set_Speed+0xc>)
 80a1978:	681b      	ldr	r3, [r3, #0]
 80a197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a197c:	9301      	str	r3, [sp, #4]
 80a197e:	bd08      	pop	{r3, pc}
 80a1980:	080601ac 	.word	0x080601ac

080a1984 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a1984:	b508      	push	{r3, lr}
 80a1986:	4b02      	ldr	r3, [pc, #8]	; (80a1990 <HAL_I2C_Begin+0xc>)
 80a1988:	681b      	ldr	r3, [r3, #0]
 80a198a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a198c:	9301      	str	r3, [sp, #4]
 80a198e:	bd08      	pop	{r3, pc}
 80a1990:	080601ac 	.word	0x080601ac

080a1994 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a1994:	b508      	push	{r3, lr}
 80a1996:	4b02      	ldr	r3, [pc, #8]	; (80a19a0 <HAL_I2C_Request_Data+0xc>)
 80a1998:	681b      	ldr	r3, [r3, #0]
 80a199a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a199c:	9301      	str	r3, [sp, #4]
 80a199e:	bd08      	pop	{r3, pc}
 80a19a0:	080601ac 	.word	0x080601ac

080a19a4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a19a4:	b508      	push	{r3, lr}
 80a19a6:	4b02      	ldr	r3, [pc, #8]	; (80a19b0 <HAL_I2C_Begin_Transmission+0xc>)
 80a19a8:	681b      	ldr	r3, [r3, #0]
 80a19aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a19ac:	9301      	str	r3, [sp, #4]
 80a19ae:	bd08      	pop	{r3, pc}
 80a19b0:	080601ac 	.word	0x080601ac

080a19b4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a19b4:	b508      	push	{r3, lr}
 80a19b6:	4b02      	ldr	r3, [pc, #8]	; (80a19c0 <HAL_I2C_End_Transmission+0xc>)
 80a19b8:	681b      	ldr	r3, [r3, #0]
 80a19ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a19bc:	9301      	str	r3, [sp, #4]
 80a19be:	bd08      	pop	{r3, pc}
 80a19c0:	080601ac 	.word	0x080601ac

080a19c4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a19c4:	b508      	push	{r3, lr}
 80a19c6:	4b02      	ldr	r3, [pc, #8]	; (80a19d0 <HAL_I2C_Write_Data+0xc>)
 80a19c8:	681b      	ldr	r3, [r3, #0]
 80a19ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a19cc:	9301      	str	r3, [sp, #4]
 80a19ce:	bd08      	pop	{r3, pc}
 80a19d0:	080601ac 	.word	0x080601ac

080a19d4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a19d4:	b508      	push	{r3, lr}
 80a19d6:	4b02      	ldr	r3, [pc, #8]	; (80a19e0 <HAL_I2C_Available_Data+0xc>)
 80a19d8:	681b      	ldr	r3, [r3, #0]
 80a19da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a19dc:	9301      	str	r3, [sp, #4]
 80a19de:	bd08      	pop	{r3, pc}
 80a19e0:	080601ac 	.word	0x080601ac

080a19e4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a19e4:	b508      	push	{r3, lr}
 80a19e6:	4b02      	ldr	r3, [pc, #8]	; (80a19f0 <HAL_I2C_Read_Data+0xc>)
 80a19e8:	681b      	ldr	r3, [r3, #0]
 80a19ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a19ec:	9301      	str	r3, [sp, #4]
 80a19ee:	bd08      	pop	{r3, pc}
 80a19f0:	080601ac 	.word	0x080601ac

080a19f4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a19f4:	b508      	push	{r3, lr}
 80a19f6:	4b02      	ldr	r3, [pc, #8]	; (80a1a00 <HAL_I2C_Peek_Data+0xc>)
 80a19f8:	681b      	ldr	r3, [r3, #0]
 80a19fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a19fc:	9301      	str	r3, [sp, #4]
 80a19fe:	bd08      	pop	{r3, pc}
 80a1a00:	080601ac 	.word	0x080601ac

080a1a04 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1a04:	b508      	push	{r3, lr}
 80a1a06:	4b02      	ldr	r3, [pc, #8]	; (80a1a10 <HAL_I2C_Flush_Data+0xc>)
 80a1a08:	681b      	ldr	r3, [r3, #0]
 80a1a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1a0c:	9301      	str	r3, [sp, #4]
 80a1a0e:	bd08      	pop	{r3, pc}
 80a1a10:	080601ac 	.word	0x080601ac

080a1a14 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1a14:	b508      	push	{r3, lr}
 80a1a16:	4b02      	ldr	r3, [pc, #8]	; (80a1a20 <HAL_I2C_Is_Enabled+0xc>)
 80a1a18:	681b      	ldr	r3, [r3, #0]
 80a1a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1a1c:	9301      	str	r3, [sp, #4]
 80a1a1e:	bd08      	pop	{r3, pc}
 80a1a20:	080601ac 	.word	0x080601ac

080a1a24 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1a24:	b508      	push	{r3, lr}
 80a1a26:	4b03      	ldr	r3, [pc, #12]	; (80a1a34 <HAL_I2C_Init+0x10>)
 80a1a28:	681b      	ldr	r3, [r3, #0]
 80a1a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1a2e:	9301      	str	r3, [sp, #4]
 80a1a30:	bd08      	pop	{r3, pc}
 80a1a32:	0000      	.short	0x0000
 80a1a34:	080601ac 	.word	0x080601ac

080a1a38 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
 80a1a38:	b508      	push	{r3, lr}
 80a1a3a:	4b02      	ldr	r3, [pc, #8]	; (80a1a44 <HAL_Servo_Attach+0xc>)
 80a1a3c:	681b      	ldr	r3, [r3, #0]
 80a1a3e:	691b      	ldr	r3, [r3, #16]
 80a1a40:	9301      	str	r3, [sp, #4]
 80a1a42:	bd08      	pop	{r3, pc}
 80a1a44:	080601a8 	.word	0x080601a8

080a1a48 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
 80a1a48:	b508      	push	{r3, lr}
 80a1a4a:	4b02      	ldr	r3, [pc, #8]	; (80a1a54 <HAL_Servo_Detach+0xc>)
 80a1a4c:	681b      	ldr	r3, [r3, #0]
 80a1a4e:	695b      	ldr	r3, [r3, #20]
 80a1a50:	9301      	str	r3, [sp, #4]
 80a1a52:	bd08      	pop	{r3, pc}
 80a1a54:	080601a8 	.word	0x080601a8

080a1a58 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
 80a1a58:	b508      	push	{r3, lr}
 80a1a5a:	4b02      	ldr	r3, [pc, #8]	; (80a1a64 <HAL_Servo_Write_Pulse_Width+0xc>)
 80a1a5c:	681b      	ldr	r3, [r3, #0]
 80a1a5e:	699b      	ldr	r3, [r3, #24]
 80a1a60:	9301      	str	r3, [sp, #4]
 80a1a62:	bd08      	pop	{r3, pc}
 80a1a64:	080601a8 	.word	0x080601a8

080a1a68 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1a68:	b508      	push	{r3, lr}
 80a1a6a:	4b02      	ldr	r3, [pc, #8]	; (80a1a74 <HAL_SPI_Init+0xc>)
 80a1a6c:	681b      	ldr	r3, [r3, #0]
 80a1a6e:	69db      	ldr	r3, [r3, #28]
 80a1a70:	9301      	str	r3, [sp, #4]
 80a1a72:	bd08      	pop	{r3, pc}
 80a1a74:	080601b4 	.word	0x080601b4

080a1a78 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1a78:	b508      	push	{r3, lr}
 80a1a7a:	4b02      	ldr	r3, [pc, #8]	; (80a1a84 <HAL_SPI_Is_Enabled+0xc>)
 80a1a7c:	681b      	ldr	r3, [r3, #0]
 80a1a7e:	6a1b      	ldr	r3, [r3, #32]
 80a1a80:	9301      	str	r3, [sp, #4]
 80a1a82:	bd08      	pop	{r3, pc}
 80a1a84:	080601b4 	.word	0x080601b4

080a1a88 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1a88:	b508      	push	{r3, lr}
 80a1a8a:	4b02      	ldr	r3, [pc, #8]	; (80a1a94 <HAL_USART_Init+0xc>)
 80a1a8c:	681b      	ldr	r3, [r3, #0]
 80a1a8e:	699b      	ldr	r3, [r3, #24]
 80a1a90:	9301      	str	r3, [sp, #4]
 80a1a92:	bd08      	pop	{r3, pc}
 80a1a94:	080601c4 	.word	0x080601c4

080a1a98 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1a98:	b508      	push	{r3, lr}
 80a1a9a:	4b02      	ldr	r3, [pc, #8]	; (80a1aa4 <HAL_USART_Write_Data+0xc>)
 80a1a9c:	681b      	ldr	r3, [r3, #0]
 80a1a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1aa0:	9301      	str	r3, [sp, #4]
 80a1aa2:	bd08      	pop	{r3, pc}
 80a1aa4:	080601c4 	.word	0x080601c4

080a1aa8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1aa8:	b508      	push	{r3, lr}
 80a1aaa:	4b02      	ldr	r3, [pc, #8]	; (80a1ab4 <HAL_USART_Available_Data+0xc>)
 80a1aac:	681b      	ldr	r3, [r3, #0]
 80a1aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1ab0:	9301      	str	r3, [sp, #4]
 80a1ab2:	bd08      	pop	{r3, pc}
 80a1ab4:	080601c4 	.word	0x080601c4

080a1ab8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1ab8:	b508      	push	{r3, lr}
 80a1aba:	4b02      	ldr	r3, [pc, #8]	; (80a1ac4 <HAL_USART_Read_Data+0xc>)
 80a1abc:	681b      	ldr	r3, [r3, #0]
 80a1abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1ac0:	9301      	str	r3, [sp, #4]
 80a1ac2:	bd08      	pop	{r3, pc}
 80a1ac4:	080601c4 	.word	0x080601c4

080a1ac8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1ac8:	b508      	push	{r3, lr}
 80a1aca:	4b02      	ldr	r3, [pc, #8]	; (80a1ad4 <HAL_USART_Peek_Data+0xc>)
 80a1acc:	681b      	ldr	r3, [r3, #0]
 80a1ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1ad0:	9301      	str	r3, [sp, #4]
 80a1ad2:	bd08      	pop	{r3, pc}
 80a1ad4:	080601c4 	.word	0x080601c4

080a1ad8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1ad8:	b508      	push	{r3, lr}
 80a1ada:	4b02      	ldr	r3, [pc, #8]	; (80a1ae4 <HAL_USART_Flush_Data+0xc>)
 80a1adc:	681b      	ldr	r3, [r3, #0]
 80a1ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1ae0:	9301      	str	r3, [sp, #4]
 80a1ae2:	bd08      	pop	{r3, pc}
 80a1ae4:	080601c4 	.word	0x080601c4

080a1ae8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1ae8:	b508      	push	{r3, lr}
 80a1aea:	4b02      	ldr	r3, [pc, #8]	; (80a1af4 <HAL_USART_Is_Enabled+0xc>)
 80a1aec:	681b      	ldr	r3, [r3, #0]
 80a1aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1af0:	9301      	str	r3, [sp, #4]
 80a1af2:	bd08      	pop	{r3, pc}
 80a1af4:	080601c4 	.word	0x080601c4

080a1af8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1af8:	b508      	push	{r3, lr}
 80a1afa:	4b02      	ldr	r3, [pc, #8]	; (80a1b04 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1afc:	681b      	ldr	r3, [r3, #0]
 80a1afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1b00:	9301      	str	r3, [sp, #4]
 80a1b02:	bd08      	pop	{r3, pc}
 80a1b04:	080601c4 	.word	0x080601c4

080a1b08 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1b08:	b508      	push	{r3, lr}
 80a1b0a:	4b02      	ldr	r3, [pc, #8]	; (80a1b14 <HAL_USB_USART_Init+0xc>)
 80a1b0c:	681b      	ldr	r3, [r3, #0]
 80a1b0e:	681b      	ldr	r3, [r3, #0]
 80a1b10:	9301      	str	r3, [sp, #4]
 80a1b12:	bd08      	pop	{r3, pc}
 80a1b14:	080601d8 	.word	0x080601d8

080a1b18 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1b18:	b508      	push	{r3, lr}
 80a1b1a:	4b02      	ldr	r3, [pc, #8]	; (80a1b24 <HAL_USB_USART_Begin+0xc>)
 80a1b1c:	681b      	ldr	r3, [r3, #0]
 80a1b1e:	685b      	ldr	r3, [r3, #4]
 80a1b20:	9301      	str	r3, [sp, #4]
 80a1b22:	bd08      	pop	{r3, pc}
 80a1b24:	080601d8 	.word	0x080601d8

080a1b28 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1b28:	b508      	push	{r3, lr}
 80a1b2a:	4b02      	ldr	r3, [pc, #8]	; (80a1b34 <HAL_USB_USART_Available_Data+0xc>)
 80a1b2c:	681b      	ldr	r3, [r3, #0]
 80a1b2e:	691b      	ldr	r3, [r3, #16]
 80a1b30:	9301      	str	r3, [sp, #4]
 80a1b32:	bd08      	pop	{r3, pc}
 80a1b34:	080601d8 	.word	0x080601d8

080a1b38 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1b38:	b508      	push	{r3, lr}
 80a1b3a:	4b02      	ldr	r3, [pc, #8]	; (80a1b44 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1b3c:	681b      	ldr	r3, [r3, #0]
 80a1b3e:	695b      	ldr	r3, [r3, #20]
 80a1b40:	9301      	str	r3, [sp, #4]
 80a1b42:	bd08      	pop	{r3, pc}
 80a1b44:	080601d8 	.word	0x080601d8

080a1b48 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1b48:	b508      	push	{r3, lr}
 80a1b4a:	4b02      	ldr	r3, [pc, #8]	; (80a1b54 <HAL_USB_USART_Receive_Data+0xc>)
 80a1b4c:	681b      	ldr	r3, [r3, #0]
 80a1b4e:	699b      	ldr	r3, [r3, #24]
 80a1b50:	9301      	str	r3, [sp, #4]
 80a1b52:	bd08      	pop	{r3, pc}
 80a1b54:	080601d8 	.word	0x080601d8

080a1b58 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1b58:	b508      	push	{r3, lr}
 80a1b5a:	4b02      	ldr	r3, [pc, #8]	; (80a1b64 <HAL_USB_USART_Send_Data+0xc>)
 80a1b5c:	681b      	ldr	r3, [r3, #0]
 80a1b5e:	69db      	ldr	r3, [r3, #28]
 80a1b60:	9301      	str	r3, [sp, #4]
 80a1b62:	bd08      	pop	{r3, pc}
 80a1b64:	080601d8 	.word	0x080601d8

080a1b68 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1b68:	b508      	push	{r3, lr}
 80a1b6a:	4b02      	ldr	r3, [pc, #8]	; (80a1b74 <HAL_USB_USART_Flush_Data+0xc>)
 80a1b6c:	681b      	ldr	r3, [r3, #0]
 80a1b6e:	6a1b      	ldr	r3, [r3, #32]
 80a1b70:	9301      	str	r3, [sp, #4]
 80a1b72:	bd08      	pop	{r3, pc}
 80a1b74:	080601d8 	.word	0x080601d8

080a1b78 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1b78:	b508      	push	{r3, lr}
 80a1b7a:	4b02      	ldr	r3, [pc, #8]	; (80a1b84 <set_system_mode+0xc>)
 80a1b7c:	681b      	ldr	r3, [r3, #0]
 80a1b7e:	685b      	ldr	r3, [r3, #4]
 80a1b80:	9301      	str	r3, [sp, #4]
 80a1b82:	bd08      	pop	{r3, pc}
 80a1b84:	080601a4 	.word	0x080601a4

080a1b88 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1b88:	b508      	push	{r3, lr}
 80a1b8a:	4b02      	ldr	r3, [pc, #8]	; (80a1b94 <system_delay_ms+0xc>)
 80a1b8c:	681b      	ldr	r3, [r3, #0]
 80a1b8e:	695b      	ldr	r3, [r3, #20]
 80a1b90:	9301      	str	r3, [sp, #4]
 80a1b92:	bd08      	pop	{r3, pc}
 80a1b94:	080601a4 	.word	0x080601a4

080a1b98 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1b98:	b508      	push	{r3, lr}
 80a1b9a:	4b02      	ldr	r3, [pc, #8]	; (80a1ba4 <system_thread_set_state+0xc>)
 80a1b9c:	681b      	ldr	r3, [r3, #0]
 80a1b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1ba0:	9301      	str	r3, [sp, #4]
 80a1ba2:	bd08      	pop	{r3, pc}
 80a1ba4:	080601a4 	.word	0x080601a4

080a1ba8 <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80a1ba8:	b508      	push	{r3, lr}
 80a1baa:	4b02      	ldr	r3, [pc, #8]	; (80a1bb4 <system_set_usb_request_app_handler+0xc>)
 80a1bac:	681b      	ldr	r3, [r3, #0]
 80a1bae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1bb0:	9301      	str	r3, [sp, #4]
 80a1bb2:	bd08      	pop	{r3, pc}
 80a1bb4:	080601a4 	.word	0x080601a4

080a1bb8 <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80a1bb8:	b508      	push	{r3, lr}
 80a1bba:	4b02      	ldr	r3, [pc, #8]	; (80a1bc4 <system_set_usb_request_result+0xc>)
 80a1bbc:	681b      	ldr	r3, [r3, #0]
 80a1bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1bc0:	9301      	str	r3, [sp, #4]
 80a1bc2:	bd08      	pop	{r3, pc}
 80a1bc4:	080601a4 	.word	0x080601a4

080a1bc8 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1bc8:	b508      	push	{r3, lr}
 80a1bca:	4b02      	ldr	r3, [pc, #8]	; (80a1bd4 <network_ready+0xc>)
 80a1bcc:	681b      	ldr	r3, [r3, #0]
 80a1bce:	691b      	ldr	r3, [r3, #16]
 80a1bd0:	9301      	str	r3, [sp, #4]
 80a1bd2:	bd08      	pop	{r3, pc}
 80a1bd4:	080601c8 	.word	0x080601c8

080a1bd8 <free>:
#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
DYNALIB_FN(1, rt, free, void(void*))
 80a1bd8:	b508      	push	{r3, lr}
 80a1bda:	4b02      	ldr	r3, [pc, #8]	; (80a1be4 <free+0xc>)
 80a1bdc:	681b      	ldr	r3, [r3, #0]
 80a1bde:	685b      	ldr	r3, [r3, #4]
 80a1be0:	9301      	str	r3, [sp, #4]
 80a1be2:	bd08      	pop	{r3, pc}
 80a1be4:	080601a0 	.word	0x080601a0

080a1be8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a1be8:	b508      	push	{r3, lr}
 80a1bea:	4b02      	ldr	r3, [pc, #8]	; (80a1bf4 <vsnprintf+0xc>)
 80a1bec:	681b      	ldr	r3, [r3, #0]
 80a1bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1bf0:	9301      	str	r3, [sp, #4]
 80a1bf2:	bd08      	pop	{r3, pc}
 80a1bf4:	080601a0 	.word	0x080601a0

080a1bf8 <delay>:
  return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1bf8:	2100      	movs	r1, #0
 80a1bfa:	f7ff bfc5 	b.w	80a1b88 <system_delay_ms>
	...

080a1c00 <_GLOBAL__sub_I_setADCSampleTime>:
{
public:
    typedef uint8_t flag_t;
    inline SleepNetworkFlag(SystemSleepNetwork f) : SleepNetworkFlag(static_cast<flag_t>(f)) {}

    inline SleepNetworkFlag(flag_t flag) : flag_(flag) {}
 80a1c00:	4b08      	ldr	r3, [pc, #32]	; (80a1c24 <_GLOBAL__sub_I_setADCSampleTime+0x24>)
 80a1c02:	2200      	movs	r2, #0
 80a1c04:	4908      	ldr	r1, [pc, #32]	; (80a1c28 <_GLOBAL__sub_I_setADCSampleTime+0x28>)
 80a1c06:	701a      	strb	r2, [r3, #0]
 80a1c08:	2301      	movs	r3, #1
 80a1c0a:	700b      	strb	r3, [r1, #0]

class PublishFlag
{
public:
	typedef uint8_t flag_t;
	PublishFlag(flag_t flag) : flag_(flag) {}
 80a1c0c:	4907      	ldr	r1, [pc, #28]	; (80a1c2c <_GLOBAL__sub_I_setADCSampleTime+0x2c>)
 80a1c0e:	700a      	strb	r2, [r1, #0]
 80a1c10:	4a07      	ldr	r2, [pc, #28]	; (80a1c30 <_GLOBAL__sub_I_setADCSampleTime+0x30>)
 80a1c12:	7013      	strb	r3, [r2, #0]
 80a1c14:	4b07      	ldr	r3, [pc, #28]	; (80a1c34 <_GLOBAL__sub_I_setADCSampleTime+0x34>)
 80a1c16:	2202      	movs	r2, #2
 80a1c18:	701a      	strb	r2, [r3, #0]
 80a1c1a:	4b07      	ldr	r3, [pc, #28]	; (80a1c38 <_GLOBAL__sub_I_setADCSampleTime+0x38>)
 80a1c1c:	2208      	movs	r2, #8
 80a1c1e:	701a      	strb	r2, [r3, #0]
 80a1c20:	4770      	bx	lr
 80a1c22:	bf00      	nop
 80a1c24:	20000448 	.word	0x20000448
 80a1c28:	20000449 	.word	0x20000449
 80a1c2c:	20000446 	.word	0x20000446
 80a1c30:	20000447 	.word	0x20000447
 80a1c34:	20000445 	.word	0x20000445
 80a1c38:	20000444 	.word	0x20000444

080a1c3c <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt>:
 80a1c3c:	4b08      	ldr	r3, [pc, #32]	; (80a1c60 <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x24>)
 80a1c3e:	2200      	movs	r2, #0
 80a1c40:	4908      	ldr	r1, [pc, #32]	; (80a1c64 <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x28>)
 80a1c42:	701a      	strb	r2, [r3, #0]
 80a1c44:	2301      	movs	r3, #1
 80a1c46:	700b      	strb	r3, [r1, #0]
 80a1c48:	4907      	ldr	r1, [pc, #28]	; (80a1c68 <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x2c>)
 80a1c4a:	700a      	strb	r2, [r1, #0]
 80a1c4c:	4a07      	ldr	r2, [pc, #28]	; (80a1c6c <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x30>)
 80a1c4e:	7013      	strb	r3, [r2, #0]
 80a1c50:	4b07      	ldr	r3, [pc, #28]	; (80a1c70 <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x34>)
 80a1c52:	2202      	movs	r2, #2
 80a1c54:	701a      	strb	r2, [r3, #0]
 80a1c56:	4b07      	ldr	r3, [pc, #28]	; (80a1c74 <_GLOBAL__sub_I__ZN10CANChannelC2E15HAL_CAN_Channeltt+0x38>)
 80a1c58:	2208      	movs	r2, #8
 80a1c5a:	701a      	strb	r2, [r3, #0]
 80a1c5c:	4770      	bx	lr
 80a1c5e:	bf00      	nop
 80a1c60:	2000044e 	.word	0x2000044e
 80a1c64:	2000044f 	.word	0x2000044f
 80a1c68:	2000044c 	.word	0x2000044c
 80a1c6c:	2000044d 	.word	0x2000044d
 80a1c70:	2000044b 	.word	0x2000044b
 80a1c74:	2000044a 	.word	0x2000044a

080a1c78 <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
 80a1c78:	4b08      	ldr	r3, [pc, #32]	; (80a1c9c <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x24>)
 80a1c7a:	2200      	movs	r2, #0
 80a1c7c:	4908      	ldr	r1, [pc, #32]	; (80a1ca0 <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x28>)
 80a1c7e:	701a      	strb	r2, [r3, #0]
 80a1c80:	2301      	movs	r3, #1
 80a1c82:	700b      	strb	r3, [r1, #0]
 80a1c84:	4907      	ldr	r1, [pc, #28]	; (80a1ca4 <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x2c>)
 80a1c86:	700a      	strb	r2, [r1, #0]
 80a1c88:	4a07      	ldr	r2, [pc, #28]	; (80a1ca8 <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x30>)
 80a1c8a:	7013      	strb	r3, [r2, #0]
 80a1c8c:	4b07      	ldr	r3, [pc, #28]	; (80a1cac <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x34>)
 80a1c8e:	2202      	movs	r2, #2
 80a1c90:	701a      	strb	r2, [r3, #0]
 80a1c92:	4b07      	ldr	r3, [pc, #28]	; (80a1cb0 <_GLOBAL__sub_I__ZN10CloudClass22call_raw_user_functionEPvPKcS0_+0x38>)
 80a1c94:	2208      	movs	r2, #8
 80a1c96:	701a      	strb	r2, [r3, #0]
 80a1c98:	4770      	bx	lr
 80a1c9a:	bf00      	nop
 80a1c9c:	20000454 	.word	0x20000454
 80a1ca0:	20000455 	.word	0x20000455
 80a1ca4:	20000452 	.word	0x20000452
 80a1ca8:	20000453 	.word	0x20000453
 80a1cac:	20000451 	.word	0x20000451
 80a1cb0:	20000450 	.word	0x20000450

080a1cb4 <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev>:
 80a1cb4:	4b08      	ldr	r3, [pc, #32]	; (80a1cd8 <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x24>)
 80a1cb6:	2200      	movs	r2, #0
 80a1cb8:	4908      	ldr	r1, [pc, #32]	; (80a1cdc <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x28>)
 80a1cba:	701a      	strb	r2, [r3, #0]
 80a1cbc:	2301      	movs	r3, #1
 80a1cbe:	700b      	strb	r3, [r1, #0]
 80a1cc0:	4907      	ldr	r1, [pc, #28]	; (80a1ce0 <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x2c>)
 80a1cc2:	700a      	strb	r2, [r1, #0]
 80a1cc4:	4a07      	ldr	r2, [pc, #28]	; (80a1ce4 <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x30>)
 80a1cc6:	7013      	strb	r3, [r2, #0]
 80a1cc8:	4b07      	ldr	r3, [pc, #28]	; (80a1ce8 <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x34>)
 80a1cca:	2202      	movs	r2, #2
 80a1ccc:	701a      	strb	r2, [r3, #0]
 80a1cce:	4b07      	ldr	r3, [pc, #28]	; (80a1cec <_GLOBAL__sub_I__ZN9FuelGaugeC2Ev+0x38>)
 80a1cd0:	2208      	movs	r2, #8
 80a1cd2:	701a      	strb	r2, [r3, #0]
 80a1cd4:	4770      	bx	lr
 80a1cd6:	bf00      	nop
 80a1cd8:	2000045a 	.word	0x2000045a
 80a1cdc:	2000045b 	.word	0x2000045b
 80a1ce0:	20000458 	.word	0x20000458
 80a1ce4:	20000459 	.word	0x20000459
 80a1ce8:	20000457 	.word	0x20000457
 80a1cec:	20000456 	.word	0x20000456

080a1cf0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1cf0:	4770      	bx	lr

080a1cf2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1cf4:	4606      	mov	r6, r0
 80a1cf6:	4615      	mov	r5, r2
 80a1cf8:	460c      	mov	r4, r1
 80a1cfa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1cfc:	42bc      	cmp	r4, r7
 80a1cfe:	d006      	beq.n	80a1d0e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1d00:	6833      	ldr	r3, [r6, #0]
 80a1d02:	4630      	mov	r0, r6
 80a1d04:	689b      	ldr	r3, [r3, #8]
 80a1d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1d0a:	4798      	blx	r3
 80a1d0c:	e7f6      	b.n	80a1cfc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1d0e:	4628      	mov	r0, r5
 80a1d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1d12 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1d12:	7c00      	ldrb	r0, [r0, #16]
 80a1d14:	2200      	movs	r2, #0
 80a1d16:	f7ff be55 	b.w	80a19c4 <HAL_I2C_Write_Data>

080a1d1a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1d1a:	7c00      	ldrb	r0, [r0, #16]
 80a1d1c:	2100      	movs	r1, #0
 80a1d1e:	f7ff be59 	b.w	80a19d4 <HAL_I2C_Available_Data>

080a1d22 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1d22:	7c00      	ldrb	r0, [r0, #16]
 80a1d24:	2100      	movs	r1, #0
 80a1d26:	f7ff be5d 	b.w	80a19e4 <HAL_I2C_Read_Data>

080a1d2a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1d2a:	7c00      	ldrb	r0, [r0, #16]
 80a1d2c:	2100      	movs	r1, #0
 80a1d2e:	f7ff be61 	b.w	80a19f4 <HAL_I2C_Peek_Data>

080a1d32 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1d32:	7c00      	ldrb	r0, [r0, #16]
 80a1d34:	2100      	movs	r1, #0
 80a1d36:	f7ff be65 	b.w	80a1a04 <HAL_I2C_Flush_Data>

080a1d3a <_ZN7TwoWireD0Ev>:
 80a1d3a:	b510      	push	{r4, lr}
 80a1d3c:	4604      	mov	r4, r0
 80a1d3e:	f7fe f9ac 	bl	80a009a <_ZdlPv>
 80a1d42:	4620      	mov	r0, r4
 80a1d44:	bd10      	pop	{r4, pc}
	...

080a1d48 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1d48:	b510      	push	{r4, lr}
 80a1d4a:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1d4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1d50:	6082      	str	r2, [r0, #8]
 80a1d52:	4a05      	ldr	r2, [pc, #20]	; (80a1d68 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1d54:	2300      	movs	r3, #0
 80a1d56:	6043      	str	r3, [r0, #4]
 80a1d58:	6002      	str	r2, [r0, #0]
{
  _i2c = i2c;
 80a1d5a:	7401      	strb	r1, [r0, #16]
  HAL_I2C_Init(_i2c, NULL);
 80a1d5c:	4608      	mov	r0, r1
 80a1d5e:	4619      	mov	r1, r3
 80a1d60:	f7ff fe60 	bl	80a1a24 <HAL_I2C_Init>

}
 80a1d64:	4620      	mov	r0, r4
 80a1d66:	bd10      	pop	{r4, pc}
 80a1d68:	080a3530 	.word	0x080a3530

080a1d6c <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a1d6c:	7c00      	ldrb	r0, [r0, #16]
 80a1d6e:	2200      	movs	r2, #0
 80a1d70:	f7ff be00 	b.w	80a1974 <HAL_I2C_Set_Speed>

080a1d74 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1d74:	2100      	movs	r1, #0
 80a1d76:	7c00      	ldrb	r0, [r0, #16]
 80a1d78:	460a      	mov	r2, r1
 80a1d7a:	460b      	mov	r3, r1
 80a1d7c:	f7ff be02 	b.w	80a1984 <HAL_I2C_Begin>

080a1d80 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a1d80:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a1d82:	2400      	movs	r4, #0
 80a1d84:	7c00      	ldrb	r0, [r0, #16]
 80a1d86:	9400      	str	r4, [sp, #0]
 80a1d88:	f7ff fe04 	bl	80a1994 <HAL_I2C_Request_Data>
  return result;
}
 80a1d8c:	b2c0      	uxtb	r0, r0
 80a1d8e:	b002      	add	sp, #8
 80a1d90:	bd10      	pop	{r4, pc}

080a1d92 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a1d92:	2301      	movs	r3, #1
 80a1d94:	f7ff bff4 	b.w	80a1d80 <_ZN7TwoWire11requestFromEhhh>

080a1d98 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a1d98:	b2c9      	uxtb	r1, r1
 80a1d9a:	b2d2      	uxtb	r2, r2
 80a1d9c:	2301      	movs	r3, #1
 80a1d9e:	f7ff bfef 	b.w	80a1d80 <_ZN7TwoWire11requestFromEhhh>

080a1da2 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a1da2:	7c00      	ldrb	r0, [r0, #16]
 80a1da4:	2200      	movs	r2, #0
 80a1da6:	f7ff bdfd 	b.w	80a19a4 <HAL_I2C_Begin_Transmission>

080a1daa <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a1daa:	7c00      	ldrb	r0, [r0, #16]
 80a1dac:	2200      	movs	r2, #0
 80a1dae:	f7ff be01 	b.w	80a19b4 <HAL_I2C_End_Transmission>

080a1db2 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a1db2:	2101      	movs	r1, #1
 80a1db4:	f7ff bff9 	b.w	80a1daa <_ZN7TwoWire15endTransmissionEh>

080a1db8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1db8:	7c00      	ldrb	r0, [r0, #16]
 80a1dba:	2100      	movs	r1, #0
 80a1dbc:	f7ff be2a 	b.w	80a1a14 <HAL_I2C_Is_Enabled>

080a1dc0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a1dc0:	4700      	bx	r0
	...

080a1dc4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a1dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1dc6:	461c      	mov	r4, r3
 80a1dc8:	b085      	sub	sp, #20
 80a1dca:	460e      	mov	r6, r1
 80a1dcc:	4615      	mov	r5, r2
 80a1dce:	4607      	mov	r7, r0
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a1dd0:	f7ff fdc8 	bl	80a1964 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80a1dd4:	2200      	movs	r2, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80a1dd6:	4294      	cmp	r4, r2
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a1dd8:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a1ddc:	9203      	str	r2, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a1dde:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a1de2:	bfb4      	ite	lt
 80a1de4:	4613      	movlt	r3, r2
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a1de6:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1dea:	4638      	mov	r0, r7
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a1dec:	bfa4      	itt	ge
 80a1dee:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a1df2:	ab03      	addge	r3, sp, #12
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1df4:	9300      	str	r3, [sp, #0]
 80a1df6:	4905      	ldr	r1, [pc, #20]	; (80a1e0c <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>)
 80a1df8:	4632      	mov	r2, r6
 80a1dfa:	462b      	mov	r3, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a1dfc:	bfa8      	it	ge
 80a1dfe:	f88d 400d 	strbge.w	r4, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1e02:	f7ff fda7 	bl	80a1954 <HAL_Interrupts_Attach>
    return true;
}
 80a1e06:	2001      	movs	r0, #1
 80a1e08:	b005      	add	sp, #20
 80a1e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1e0c:	080a1dc1 	.word	0x080a1dc1

080a1e10 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1e10:	4770      	bx	lr

080a1e12 <_ZN9IPAddressD0Ev>:
 80a1e12:	b510      	push	{r4, lr}
 80a1e14:	4604      	mov	r4, r0
 80a1e16:	f7fe f940 	bl	80a009a <_ZdlPv>
 80a1e1a:	4620      	mov	r0, r4
 80a1e1c:	bd10      	pop	{r4, pc}

080a1e1e <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1e20:	460f      	mov	r7, r1
 80a1e22:	f100 0608 	add.w	r6, r0, #8
 80a1e26:	1d05      	adds	r5, r0, #4
 80a1e28:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1e2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1e2e:	4638      	mov	r0, r7
 80a1e30:	220a      	movs	r2, #10
 80a1e32:	f000 f8e2 	bl	80a1ffa <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1e36:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1e38:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1e3a:	d007      	beq.n	80a1e4c <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1e3c:	2c00      	cmp	r4, #0
 80a1e3e:	d0f4      	beq.n	80a1e2a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1e40:	4638      	mov	r0, r7
 80a1e42:	212e      	movs	r1, #46	; 0x2e
 80a1e44:	f000 f870 	bl	80a1f28 <_ZN5Print5printEc>
 80a1e48:	4404      	add	r4, r0
 80a1e4a:	e7ee      	b.n	80a1e2a <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1e4c:	4620      	mov	r0, r4
 80a1e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1e50 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1e50:	b510      	push	{r4, lr}
 80a1e52:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1e56:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1e5a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1e5e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1e62:	2304      	movs	r3, #4
 80a1e64:	6041      	str	r1, [r0, #4]
 80a1e66:	7503      	strb	r3, [r0, #20]
 80a1e68:	bd10      	pop	{r4, pc}
	...

080a1e6c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1e6e:	4604      	mov	r4, r0
 80a1e70:	4d04      	ldr	r5, [pc, #16]	; (80a1e84 <_ZN9IPAddressC1Ehhhh+0x18>)
 80a1e72:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1e74:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1e78:	9500      	str	r5, [sp, #0]
 80a1e7a:	f7ff ffe9 	bl	80a1e50 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1e7e:	4620      	mov	r0, r4
 80a1e80:	b003      	add	sp, #12
 80a1e82:	bd30      	pop	{r4, r5, pc}
 80a1e84:	080a3558 	.word	0x080a3558

080a1e88 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1e88:	4a01      	ldr	r2, [pc, #4]	; (80a1e90 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1e8a:	4b02      	ldr	r3, [pc, #8]	; (80a1e94 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1e8c:	601a      	str	r2, [r3, #0]
 80a1e8e:	4770      	bx	lr
 80a1e90:	080a3620 	.word	0x080a3620
 80a1e94:	2000045c 	.word	0x2000045c

080a1e98 <_GLOBAL__sub_I__ZN4PMICC2Ev>:
 80a1e98:	4b08      	ldr	r3, [pc, #32]	; (80a1ebc <_GLOBAL__sub_I__ZN4PMICC2Ev+0x24>)
 80a1e9a:	2200      	movs	r2, #0
 80a1e9c:	4908      	ldr	r1, [pc, #32]	; (80a1ec0 <_GLOBAL__sub_I__ZN4PMICC2Ev+0x28>)
 80a1e9e:	701a      	strb	r2, [r3, #0]
 80a1ea0:	2301      	movs	r3, #1
 80a1ea2:	700b      	strb	r3, [r1, #0]
 80a1ea4:	4907      	ldr	r1, [pc, #28]	; (80a1ec4 <_GLOBAL__sub_I__ZN4PMICC2Ev+0x2c>)
 80a1ea6:	700a      	strb	r2, [r1, #0]
 80a1ea8:	4a07      	ldr	r2, [pc, #28]	; (80a1ec8 <_GLOBAL__sub_I__ZN4PMICC2Ev+0x30>)
 80a1eaa:	7013      	strb	r3, [r2, #0]
 80a1eac:	4b07      	ldr	r3, [pc, #28]	; (80a1ecc <_GLOBAL__sub_I__ZN4PMICC2Ev+0x34>)
 80a1eae:	2202      	movs	r2, #2
 80a1eb0:	701a      	strb	r2, [r3, #0]
 80a1eb2:	4b07      	ldr	r3, [pc, #28]	; (80a1ed0 <_GLOBAL__sub_I__ZN4PMICC2Ev+0x38>)
 80a1eb4:	2208      	movs	r2, #8
 80a1eb6:	701a      	strb	r2, [r3, #0]
 80a1eb8:	4770      	bx	lr
 80a1eba:	bf00      	nop
 80a1ebc:	20000464 	.word	0x20000464
 80a1ec0:	20000465 	.word	0x20000465
 80a1ec4:	20000462 	.word	0x20000462
 80a1ec8:	20000463 	.word	0x20000463
 80a1ecc:	20000461 	.word	0x20000461
 80a1ed0:	20000460 	.word	0x20000460

080a1ed4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1ed6:	4606      	mov	r6, r0
 80a1ed8:	460d      	mov	r5, r1
 80a1eda:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1edc:	2400      	movs	r4, #0
  while (size--) {
 80a1ede:	42bd      	cmp	r5, r7
 80a1ee0:	d00c      	beq.n	80a1efc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1ee2:	6833      	ldr	r3, [r6, #0]
 80a1ee4:	4630      	mov	r0, r6
 80a1ee6:	689b      	ldr	r3, [r3, #8]
 80a1ee8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1eec:	4798      	blx	r3
     if (chunk>=0)
 80a1eee:	2800      	cmp	r0, #0
 80a1ef0:	db01      	blt.n	80a1ef6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1ef2:	4404      	add	r4, r0
 80a1ef4:	e7f3      	b.n	80a1ede <_ZN5Print5writeEPKhj+0xa>
/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     int chunk = write(*buffer++);
 80a1ef6:	2c00      	cmp	r4, #0
 80a1ef8:	bf08      	it	eq
 80a1efa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1efc:	4620      	mov	r0, r4
 80a1efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1f00 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1f00:	b570      	push	{r4, r5, r6, lr}
 80a1f02:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1f04:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1f06:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1f08:	b149      	cbz	r1, 80a1f1e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1f0a:	f001 fa5c 	bl	80a33c6 <strlen>
 80a1f0e:	682b      	ldr	r3, [r5, #0]
 80a1f10:	4602      	mov	r2, r0
 80a1f12:	4621      	mov	r1, r4
 80a1f14:	4628      	mov	r0, r5
    }
 80a1f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1f1a:	68db      	ldr	r3, [r3, #12]
 80a1f1c:	4718      	bx	r3
    }
 80a1f1e:	bd70      	pop	{r4, r5, r6, pc}

080a1f20 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a1f20:	b508      	push	{r3, lr}
  return write(str);
 80a1f22:	f7ff ffed 	bl	80a1f00 <_ZN5Print5writeEPKc>
}
 80a1f26:	bd08      	pop	{r3, pc}

080a1f28 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a1f28:	6803      	ldr	r3, [r0, #0]
 80a1f2a:	689b      	ldr	r3, [r3, #8]
 80a1f2c:	4718      	bx	r3

080a1f2e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1f2e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1f30:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1f32:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1f34:	f7ff fff8 	bl	80a1f28 <_ZN5Print5printEc>
  n += print('\n');
 80a1f38:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1f3a:	4604      	mov	r4, r0
  n += print('\n');
 80a1f3c:	4628      	mov	r0, r5
 80a1f3e:	f7ff fff3 	bl	80a1f28 <_ZN5Print5printEc>
  return n;
}
 80a1f42:	4420      	add	r0, r4
 80a1f44:	bd38      	pop	{r3, r4, r5, pc}

080a1f46 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1f46:	b538      	push	{r3, r4, r5, lr}
 80a1f48:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1f4a:	f7ff ffd9 	bl	80a1f00 <_ZN5Print5writeEPKc>
 80a1f4e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1f50:	4628      	mov	r0, r5
 80a1f52:	f7ff ffec 	bl	80a1f2e <_ZN5Print7printlnEv>
  return n;
}
 80a1f56:	4420      	add	r0, r4
 80a1f58:	bd38      	pop	{r3, r4, r5, pc}

080a1f5a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1f5a:	2a01      	cmp	r2, #1
 80a1f5c:	bf98      	it	ls
 80a1f5e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1f60:	b530      	push	{r4, r5, lr}
 80a1f62:	460b      	mov	r3, r1
 80a1f64:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1f66:	2100      	movs	r1, #0
 80a1f68:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1f6c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1f70:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1f74:	fb05 3312 	mls	r3, r5, r2, r3
 80a1f78:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1f7a:	2b09      	cmp	r3, #9
 80a1f7c:	bf94      	ite	ls
 80a1f7e:	3330      	addls	r3, #48	; 0x30
 80a1f80:	3337      	addhi	r3, #55	; 0x37
 80a1f82:	b2db      	uxtb	r3, r3
 80a1f84:	4621      	mov	r1, r4
 80a1f86:	f804 3901 	strb.w	r3, [r4], #-1
 80a1f8a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1f8c:	2d00      	cmp	r5, #0
 80a1f8e:	d1ef      	bne.n	80a1f70 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1f90:	f7ff ffb6 	bl	80a1f00 <_ZN5Print5writeEPKc>
}
 80a1f94:	b00b      	add	sp, #44	; 0x2c
 80a1f96:	bd30      	pop	{r4, r5, pc}

080a1f98 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a1f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1f9c:	4607      	mov	r7, r0
 80a1f9e:	460e      	mov	r6, r1
  if (base == 0) {
 80a1fa0:	4615      	mov	r5, r2
 80a1fa2:	b92a      	cbnz	r2, 80a1fb0 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a1fa8:	6803      	ldr	r3, [r0, #0]
 80a1faa:	b2c9      	uxtb	r1, r1
 80a1fac:	689b      	ldr	r3, [r3, #8]
 80a1fae:	4718      	bx	r3
  } else if (base == 10) {
 80a1fb0:	2a0a      	cmp	r2, #10
 80a1fb2:	d102      	bne.n	80a1fba <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a1fb4:	2900      	cmp	r1, #0
 80a1fb6:	da01      	bge.n	80a1fbc <_ZN5Print5printEli+0x24>
 80a1fb8:	e004      	b.n	80a1fc4 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1fba:	b2d2      	uxtb	r2, r2
  }
}
 80a1fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1fc0:	f7ff bfcb 	b.w	80a1f5a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1fc4:	212d      	movs	r1, #45	; 0x2d
 80a1fc6:	f7ff ffaf 	bl	80a1f28 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a1fca:	4271      	negs	r1, r6
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1fcc:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a1fce:	462a      	mov	r2, r5
 80a1fd0:	4638      	mov	r0, r7
 80a1fd2:	f7ff ffc2 	bl	80a1f5a <_ZN5Print11printNumberEmh>
 80a1fd6:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1fdc <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1fdc:	f7ff bfdc 	b.w	80a1f98 <_ZN5Print5printEli>

080a1fe0 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1fe0:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
 80a1fe2:	b92a      	cbnz	r2, 80a1ff0 <_ZN5Print5printEmi+0x10>
  else return printNumber(n, base);
}
 80a1fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1fe8:	6803      	ldr	r3, [r0, #0]
 80a1fea:	b2c9      	uxtb	r1, r1
 80a1fec:	689b      	ldr	r3, [r3, #8]
 80a1fee:	4718      	bx	r3
  else return printNumber(n, base);
 80a1ff0:	b2d2      	uxtb	r2, r2
}
 80a1ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1ff6:	f7ff bfb0 	b.w	80a1f5a <_ZN5Print11printNumberEmh>

080a1ffa <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1ffa:	f7ff bff1 	b.w	80a1fe0 <_ZN5Print5printEmi>

080a1ffe <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a1ffe:	b40c      	push	{r2, r3}
 80a2000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2004:	b087      	sub	sp, #28
 80a2006:	af00      	add	r7, sp, #0
 80a2008:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a200c:	f854 9b04 	ldr.w	r9, [r4], #4
 80a2010:	4605      	mov	r5, r0
 80a2012:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a2014:	1d38      	adds	r0, r7, #4
 80a2016:	2114      	movs	r1, #20
 80a2018:	464a      	mov	r2, r9
 80a201a:	4623      	mov	r3, r4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a201c:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a201e:	f7ff fde3 	bl	80a1be8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a2022:	2813      	cmp	r0, #19
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a2024:	4601      	mov	r1, r0
    va_end(marker);

    if (n<bufsize)
 80a2026:	d805      	bhi.n	80a2034 <_ZN5Print11printf_implEbPKcz+0x36>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2028:	4628      	mov	r0, r5
 80a202a:	1d39      	adds	r1, r7, #4
 80a202c:	f7ff ff68 	bl	80a1f00 <_ZN5Print5writeEPKc>
 80a2030:	4604      	mov	r4, r0
 80a2032:	e013      	b.n	80a205c <_ZN5Print11printf_implEbPKcz+0x5e>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a2034:	f100 0308 	add.w	r3, r0, #8
 80a2038:	f023 0307 	bic.w	r3, r3, #7
 80a203c:	46e8      	mov	r8, sp
 80a203e:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a2042:	4668      	mov	r0, sp
 80a2044:	4623      	mov	r3, r4
 80a2046:	3101      	adds	r1, #1
 80a2048:	464a      	mov	r2, r9
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a204a:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a204c:	f7ff fdcc 	bl	80a1be8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2050:	4669      	mov	r1, sp
 80a2052:	4628      	mov	r0, r5
 80a2054:	f7ff ff54 	bl	80a1f00 <_ZN5Print5writeEPKc>
 80a2058:	4604      	mov	r4, r0
 80a205a:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a205c:	b11e      	cbz	r6, 80a2066 <_ZN5Print11printf_implEbPKcz+0x68>
        n += println();
 80a205e:	4628      	mov	r0, r5
 80a2060:	f7ff ff65 	bl	80a1f2e <_ZN5Print7printlnEv>
 80a2064:	4404      	add	r4, r0
    return n;
}
 80a2066:	4620      	mov	r0, r4
 80a2068:	371c      	adds	r7, #28
 80a206a:	46bd      	mov	sp, r7
 80a206c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2070:	b002      	add	sp, #8
 80a2072:	4770      	bx	lr

080a2074 <_ZN5Servo17writeMicrosecondsEt>:
  // write(179).
  return a == this->minAngle || a == this->maxAngle ? a : a + 1;
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{
 80a2074:	4602      	mov	r2, r0
 80a2076:	8800      	ldrh	r0, [r0, #0]

  if (!this->attached())
 80a2078:	b203      	sxth	r3, r0
 80a207a:	3301      	adds	r3, #1
 80a207c:	d00a      	beq.n	80a2094 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
 80a207e:	8853      	ldrh	r3, [r2, #2]
 80a2080:	8892      	ldrh	r2, [r2, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 80a2082:	4299      	cmp	r1, r3
 80a2084:	d303      	bcc.n	80a208e <_ZN5Servo17writeMicrosecondsEt+0x1a>
 80a2086:	4291      	cmp	r1, r2
 80a2088:	460b      	mov	r3, r1
 80a208a:	bf28      	it	cs
 80a208c:	4613      	movcs	r3, r2

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
 80a208e:	4619      	mov	r1, r3
 80a2090:	f7ff bce2 	b.w	80a1a58 <HAL_Servo_Write_Pulse_Width>
 80a2094:	4770      	bx	lr

080a2096 <_ZN5Servo11resetFieldsEv>:
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a2096:	f64f 73ff 	movw	r3, #65535	; 0xffff
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
 80a209a:	22b4      	movs	r2, #180	; 0xb4
 80a209c:	8102      	strh	r2, [r0, #8]
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a209e:	f44f 7208 	mov.w	r2, #544	; 0x220
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a20a2:	8003      	strh	r3, [r0, #0]
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a20a4:	8042      	strh	r2, [r0, #2]
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a20a6:	2300      	movs	r3, #0
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a20a8:	f44f 6216 	mov.w	r2, #2400	; 0x960
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a20ac:	80c3      	strh	r3, [r0, #6]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a20ae:	8082      	strh	r2, [r0, #4]
  this->trim = 0;
 80a20b0:	60c3      	str	r3, [r0, #12]
 80a20b2:	4770      	bx	lr

080a20b4 <_ZN5ServoC1Ev>:
#define ANGLE_TO_US(a)    ((uint16_t)(map((a), this->minAngle, this->maxAngle, \
                                        this->minPW, this->maxPW)))
#define US_TO_ANGLE(us)   ((int16_t)(map((us), this->minPW, this->maxPW,  \
                                       this->minAngle, this->maxAngle)))

Servo::Servo()
 80a20b4:	b510      	push	{r4, lr}
 80a20b6:	4604      	mov	r4, r0
{
  this->resetFields();
 80a20b8:	f7ff ffed 	bl	80a2096 <_ZN5Servo11resetFieldsEv>
}
 80a20bc:	4620      	mov	r0, r4
 80a20be:	bd10      	pop	{r4, pc}

080a20c0 <_ZN5Servo6detachEv>:

  return true;
}

bool Servo::detach()
{
 80a20c0:	b510      	push	{r4, lr}
 80a20c2:	4604      	mov	r4, r0
 80a20c4:	8800      	ldrh	r0, [r0, #0]
  if (!this->attached())
 80a20c6:	b203      	sxth	r3, r0
 80a20c8:	3301      	adds	r3, #1
 80a20ca:	d006      	beq.n	80a20da <_ZN5Servo6detachEv+0x1a>
  {
    return false;
  }

  HAL_Servo_Detach(this->pin);
 80a20cc:	f7ff fcbc 	bl	80a1a48 <HAL_Servo_Detach>

  this->resetFields();
 80a20d0:	4620      	mov	r0, r4
 80a20d2:	f7ff ffe0 	bl	80a2096 <_ZN5Servo11resetFieldsEv>

  return true;
 80a20d6:	2001      	movs	r0, #1
 80a20d8:	bd10      	pop	{r4, pc}

bool Servo::detach()
{
  if (!this->attached())
  {
    return false;
 80a20da:	2000      	movs	r0, #0
  HAL_Servo_Detach(this->pin);

  this->resetFields();

  return true;
}
 80a20dc:	bd10      	pop	{r4, pc}

080a20de <_ZN5Servo6attachEtttss>:
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a20de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a20e2:	4604      	mov	r4, r0
 80a20e4:	460d      	mov	r5, r1

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a20e6:	4608      	mov	r0, r1
 80a20e8:	2102      	movs	r1, #2
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a20ea:	4690      	mov	r8, r2
 80a20ec:	461f      	mov	r7, r3

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a20ee:	f7ff fc09 	bl	80a1904 <HAL_Validate_Pin_Function>
 80a20f2:	2802      	cmp	r0, #2
 80a20f4:	d001      	beq.n	80a20fa <_ZN5Servo6attachEtttss+0x1c>
  {
    return false;
 80a20f6:	2600      	movs	r6, #0
 80a20f8:	e019      	b.n	80a212e <_ZN5Servo6attachEtttss+0x50>
  }

  // Safety check
  if (!pinAvailable(pin))
 80a20fa:	4628      	mov	r0, r5
 80a20fc:	f000 fb40 	bl	80a2780 <pinAvailable>
 80a2100:	4606      	mov	r6, r0
 80a2102:	2800      	cmp	r0, #0
 80a2104:	d0f7      	beq.n	80a20f6 <_ZN5Servo6attachEtttss+0x18>
  {
    return false;
  }

  if (this->attached())
 80a2106:	f9b4 3000 	ldrsh.w	r3, [r4]
 80a210a:	3301      	adds	r3, #1
 80a210c:	d002      	beq.n	80a2114 <_ZN5Servo6attachEtttss+0x36>
  {
    this->detach();
 80a210e:	4620      	mov	r0, r4
 80a2110:	f7ff ffd6 	bl	80a20c0 <_ZN5Servo6detachEv>
  }

  this->pin = pin;
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a2114:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  if (this->attached())
  {
    this->detach();
  }

  this->pin = pin;
 80a2118:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a211a:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
 80a211c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  {
    this->detach();
  }

  this->pin = pin;
  this->minPW = minPW;
 80a2120:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
 80a2124:	80a7      	strh	r7, [r4, #4]
  this->minAngle = minAngle;
  this->maxAngle = maxAngle;
 80a2126:	8123      	strh	r3, [r4, #8]

  HAL_Servo_Attach(this->pin);
 80a2128:	4628      	mov	r0, r5
 80a212a:	f7ff fc85 	bl	80a1a38 <HAL_Servo_Attach>

  return true;
}
 80a212e:	4630      	mov	r0, r6
 80a2130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2134 <_GLOBAL__sub_I__ZN5ServoC2Ev>:
 80a2134:	4b08      	ldr	r3, [pc, #32]	; (80a2158 <_GLOBAL__sub_I__ZN5ServoC2Ev+0x24>)
 80a2136:	2200      	movs	r2, #0
 80a2138:	4908      	ldr	r1, [pc, #32]	; (80a215c <_GLOBAL__sub_I__ZN5ServoC2Ev+0x28>)
 80a213a:	701a      	strb	r2, [r3, #0]
 80a213c:	2301      	movs	r3, #1
 80a213e:	700b      	strb	r3, [r1, #0]
 80a2140:	4907      	ldr	r1, [pc, #28]	; (80a2160 <_GLOBAL__sub_I__ZN5ServoC2Ev+0x2c>)
 80a2142:	700a      	strb	r2, [r1, #0]
 80a2144:	4a07      	ldr	r2, [pc, #28]	; (80a2164 <_GLOBAL__sub_I__ZN5ServoC2Ev+0x30>)
 80a2146:	7013      	strb	r3, [r2, #0]
 80a2148:	4b07      	ldr	r3, [pc, #28]	; (80a2168 <_GLOBAL__sub_I__ZN5ServoC2Ev+0x34>)
 80a214a:	2202      	movs	r2, #2
 80a214c:	701a      	strb	r2, [r3, #0]
 80a214e:	4b07      	ldr	r3, [pc, #28]	; (80a216c <_GLOBAL__sub_I__ZN5ServoC2Ev+0x38>)
 80a2150:	2208      	movs	r2, #8
 80a2152:	701a      	strb	r2, [r3, #0]
 80a2154:	4770      	bx	lr
 80a2156:	bf00      	nop
 80a2158:	2000046a 	.word	0x2000046a
 80a215c:	2000046b 	.word	0x2000046b
 80a2160:	20000468 	.word	0x20000468
 80a2164:	20000469 	.word	0x20000469
 80a2168:	20000467 	.word	0x20000467
 80a216c:	20000466 	.word	0x20000466

080a2170 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a2170:	4770      	bx	lr

080a2172 <_ZN8SPIClassD0Ev>:
 80a2172:	b510      	push	{r4, lr}
 80a2174:	4604      	mov	r4, r0
 80a2176:	f7fd ff90 	bl	80a009a <_ZdlPv>
 80a217a:	4620      	mov	r0, r4
 80a217c:	bd10      	pop	{r4, pc}
	...

080a2180 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a2180:	b570      	push	{r4, r5, r6, lr}
 80a2182:	4604      	mov	r4, r0
 80a2184:	460e      	mov	r6, r1
 80a2186:	4b07      	ldr	r3, [pc, #28]	; (80a21a4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
	Mutex(os_mutex_t handle) : handle_(handle) {}

	/**
	 * Creates a new mutex.
	 */
	Mutex() : handle_(nullptr)
 80a2188:	2500      	movs	r5, #0
 80a218a:	6003      	str	r3, [r0, #0]
 80a218c:	f840 5f0c 	str.w	r5, [r0, #12]!
	{
		os_mutex_create(&handle_);
 80a2190:	f7ff fb98 	bl	80a18c4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a2194:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a2196:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a2198:	f7ff fc66 	bl	80a1a68 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a219c:	60a5      	str	r5, [r4, #8]
}
 80a219e:	4620      	mov	r0, r4
 80a21a0:	bd70      	pop	{r4, r5, r6, pc}
 80a21a2:	bf00      	nop
 80a21a4:	080a3658 	.word	0x080a3658

080a21a8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a21a8:	7900      	ldrb	r0, [r0, #4]
 80a21aa:	f7ff bc65 	b.w	80a1a78 <HAL_SPI_Is_Enabled>
	...

080a21b0 <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface>:
 80a21b0:	4b08      	ldr	r3, [pc, #32]	; (80a21d4 <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x24>)
 80a21b2:	2200      	movs	r2, #0
 80a21b4:	4908      	ldr	r1, [pc, #32]	; (80a21d8 <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x28>)
 80a21b6:	701a      	strb	r2, [r3, #0]
 80a21b8:	2301      	movs	r3, #1
 80a21ba:	700b      	strb	r3, [r1, #0]
 80a21bc:	4907      	ldr	r1, [pc, #28]	; (80a21dc <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x2c>)
 80a21be:	700a      	strb	r2, [r1, #0]
 80a21c0:	4a07      	ldr	r2, [pc, #28]	; (80a21e0 <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x30>)
 80a21c2:	7013      	strb	r3, [r2, #0]
 80a21c4:	4b07      	ldr	r3, [pc, #28]	; (80a21e4 <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x34>)
 80a21c6:	2202      	movs	r2, #2
 80a21c8:	701a      	strb	r2, [r3, #0]
 80a21ca:	4b07      	ldr	r3, [pc, #28]	; (80a21e8 <_GLOBAL__sub_I__ZN8SPIClassC2E17HAL_SPI_Interface+0x38>)
 80a21cc:	2208      	movs	r2, #8
 80a21ce:	701a      	strb	r2, [r3, #0]
 80a21d0:	4770      	bx	lr
 80a21d2:	bf00      	nop
 80a21d4:	20000470 	.word	0x20000470
 80a21d8:	20000471 	.word	0x20000471
 80a21dc:	2000046e 	.word	0x2000046e
 80a21e0:	2000046f 	.word	0x2000046f
 80a21e4:	2000046d 	.word	0x2000046d
 80a21e8:	2000046c 	.word	0x2000046c

080a21ec <_GLOBAL__sub_I__ZN6Stream9timedReadEv>:
 80a21ec:	4b08      	ldr	r3, [pc, #32]	; (80a2210 <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x24>)
 80a21ee:	2200      	movs	r2, #0
 80a21f0:	4908      	ldr	r1, [pc, #32]	; (80a2214 <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x28>)
 80a21f2:	701a      	strb	r2, [r3, #0]
 80a21f4:	2301      	movs	r3, #1
 80a21f6:	700b      	strb	r3, [r1, #0]
 80a21f8:	4907      	ldr	r1, [pc, #28]	; (80a2218 <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x2c>)
 80a21fa:	700a      	strb	r2, [r1, #0]
 80a21fc:	4a07      	ldr	r2, [pc, #28]	; (80a221c <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x30>)
 80a21fe:	7013      	strb	r3, [r2, #0]
 80a2200:	4b07      	ldr	r3, [pc, #28]	; (80a2220 <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x34>)
 80a2202:	2202      	movs	r2, #2
 80a2204:	701a      	strb	r2, [r3, #0]
 80a2206:	4b07      	ldr	r3, [pc, #28]	; (80a2224 <_GLOBAL__sub_I__ZN6Stream9timedReadEv+0x38>)
 80a2208:	2208      	movs	r2, #8
 80a220a:	701a      	strb	r2, [r3, #0]
 80a220c:	4770      	bx	lr
 80a220e:	bf00      	nop
 80a2210:	20000476 	.word	0x20000476
 80a2214:	20000477 	.word	0x20000477
 80a2218:	20000474 	.word	0x20000474
 80a221c:	20000475 	.word	0x20000475
 80a2220:	20000473 	.word	0x20000473
 80a2224:	20000472 	.word	0x20000472

080a2228 <_GLOBAL__sub_I_System>:
 80a2228:	4b08      	ldr	r3, [pc, #32]	; (80a224c <_GLOBAL__sub_I_System+0x24>)
 80a222a:	2000      	movs	r0, #0
 80a222c:	4a08      	ldr	r2, [pc, #32]	; (80a2250 <_GLOBAL__sub_I_System+0x28>)
 80a222e:	7018      	strb	r0, [r3, #0]
 80a2230:	2301      	movs	r3, #1
 80a2232:	7013      	strb	r3, [r2, #0]
 80a2234:	4a07      	ldr	r2, [pc, #28]	; (80a2254 <_GLOBAL__sub_I_System+0x2c>)
 80a2236:	7010      	strb	r0, [r2, #0]
 80a2238:	4a07      	ldr	r2, [pc, #28]	; (80a2258 <_GLOBAL__sub_I_System+0x30>)
 80a223a:	7013      	strb	r3, [r2, #0]
 80a223c:	4b07      	ldr	r3, [pc, #28]	; (80a225c <_GLOBAL__sub_I_System+0x34>)
 80a223e:	2202      	movs	r2, #2
 80a2240:	701a      	strb	r2, [r3, #0]
 80a2242:	4b07      	ldr	r3, [pc, #28]	; (80a2260 <_GLOBAL__sub_I_System+0x38>)
 80a2244:	2208      	movs	r2, #8
 80a2246:	701a      	strb	r2, [r3, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2248:	f7ff bc96 	b.w	80a1b78 <set_system_mode>
 80a224c:	2000047c 	.word	0x2000047c
 80a2250:	2000047d 	.word	0x2000047d
 80a2254:	2000047a 	.word	0x2000047a
 80a2258:	2000047b 	.word	0x2000047b
 80a225c:	20000479 	.word	0x20000479
 80a2260:	20000478 	.word	0x20000478

080a2264 <_GLOBAL__sub_I__ZN9TCPServerC2Etm>:
{
public:
    typedef uint8_t flag_t;
    inline SleepNetworkFlag(SystemSleepNetwork f) : SleepNetworkFlag(static_cast<flag_t>(f)) {}

    inline SleepNetworkFlag(flag_t flag) : flag_(flag) {}
 80a2264:	4b08      	ldr	r3, [pc, #32]	; (80a2288 <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x24>)
 80a2266:	2200      	movs	r2, #0
 80a2268:	4908      	ldr	r1, [pc, #32]	; (80a228c <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x28>)
 80a226a:	701a      	strb	r2, [r3, #0]
 80a226c:	2301      	movs	r3, #1
 80a226e:	700b      	strb	r3, [r1, #0]
 80a2270:	4907      	ldr	r1, [pc, #28]	; (80a2290 <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x2c>)
 80a2272:	700a      	strb	r2, [r1, #0]
 80a2274:	4a07      	ldr	r2, [pc, #28]	; (80a2294 <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x30>)
 80a2276:	7013      	strb	r3, [r2, #0]
 80a2278:	4b07      	ldr	r3, [pc, #28]	; (80a2298 <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x34>)
 80a227a:	2202      	movs	r2, #2
 80a227c:	701a      	strb	r2, [r3, #0]
 80a227e:	4b07      	ldr	r3, [pc, #28]	; (80a229c <_GLOBAL__sub_I__ZN9TCPServerC2Etm+0x38>)
 80a2280:	2208      	movs	r2, #8
 80a2282:	701a      	strb	r2, [r3, #0]
 80a2284:	4770      	bx	lr
 80a2286:	bf00      	nop
 80a2288:	20000482 	.word	0x20000482
 80a228c:	20000483 	.word	0x20000483
 80a2290:	20000480 	.word	0x20000480
 80a2294:	20000481 	.word	0x20000481
 80a2298:	2000047f 	.word	0x2000047f
 80a229c:	2000047e 	.word	0x2000047e

080a22a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
 80a22a0:	4b0a      	ldr	r3, [pc, #40]	; (80a22cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x2c>)
 80a22a2:	2200      	movs	r2, #0
 80a22a4:	490a      	ldr	r1, [pc, #40]	; (80a22d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x30>)
 80a22a6:	701a      	strb	r2, [r3, #0]
 80a22a8:	2301      	movs	r3, #1
 80a22aa:	700b      	strb	r3, [r1, #0]
 80a22ac:	4909      	ldr	r1, [pc, #36]	; (80a22d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x34>)
 80a22ae:	700a      	strb	r2, [r1, #0]
 80a22b0:	4a09      	ldr	r2, [pc, #36]	; (80a22d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x38>)
 80a22b2:	7013      	strb	r3, [r2, #0]
 80a22b4:	4b09      	ldr	r3, [pc, #36]	; (80a22dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x3c>)
 80a22b6:	2202      	movs	r2, #2
 80a22b8:	701a      	strb	r2, [r3, #0]
 80a22ba:	4b09      	ldr	r3, [pc, #36]	; (80a22e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x40>)
 80a22bc:	2208      	movs	r2, #8
 80a22be:	701a      	strb	r2, [r3, #0]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a22c0:	4b08      	ldr	r3, [pc, #32]	; (80a22e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x44>)
 80a22c2:	681a      	ldr	r2, [r3, #0]
 80a22c4:	4b08      	ldr	r3, [pc, #32]	; (80a22e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x48>)
 80a22c6:	601a      	str	r2, [r3, #0]
 80a22c8:	4770      	bx	lr
 80a22ca:	bf00      	nop
 80a22cc:	2000048d 	.word	0x2000048d
 80a22d0:	2000048f 	.word	0x2000048f
 80a22d4:	2000048c 	.word	0x2000048c
 80a22d8:	20000484 	.word	0x20000484
 80a22dc:	20000485 	.word	0x20000485
 80a22e0:	2000048e 	.word	0x2000048e
 80a22e4:	20000364 	.word	0x20000364
 80a22e8:	20000488 	.word	0x20000488

080a22ec <_GLOBAL__sub_I_tone>:
 80a22ec:	4b08      	ldr	r3, [pc, #32]	; (80a2310 <_GLOBAL__sub_I_tone+0x24>)
 80a22ee:	2200      	movs	r2, #0
 80a22f0:	4908      	ldr	r1, [pc, #32]	; (80a2314 <_GLOBAL__sub_I_tone+0x28>)
 80a22f2:	701a      	strb	r2, [r3, #0]
 80a22f4:	2301      	movs	r3, #1
 80a22f6:	700b      	strb	r3, [r1, #0]
 80a22f8:	4907      	ldr	r1, [pc, #28]	; (80a2318 <_GLOBAL__sub_I_tone+0x2c>)
 80a22fa:	700a      	strb	r2, [r1, #0]
 80a22fc:	4a07      	ldr	r2, [pc, #28]	; (80a231c <_GLOBAL__sub_I_tone+0x30>)
 80a22fe:	7013      	strb	r3, [r2, #0]
 80a2300:	4b07      	ldr	r3, [pc, #28]	; (80a2320 <_GLOBAL__sub_I_tone+0x34>)
 80a2302:	2202      	movs	r2, #2
 80a2304:	701a      	strb	r2, [r3, #0]
 80a2306:	4b07      	ldr	r3, [pc, #28]	; (80a2324 <_GLOBAL__sub_I_tone+0x38>)
 80a2308:	2208      	movs	r2, #8
 80a230a:	701a      	strb	r2, [r3, #0]
 80a230c:	4770      	bx	lr
 80a230e:	bf00      	nop
 80a2310:	20000494 	.word	0x20000494
 80a2314:	20000495 	.word	0x20000495
 80a2318:	20000492 	.word	0x20000492
 80a231c:	20000493 	.word	0x20000493
 80a2320:	20000491 	.word	0x20000491
 80a2324:	20000490 	.word	0x20000490

080a2328 <_GLOBAL__sub_I__ZN3UDPC2Ev>:
 80a2328:	4b08      	ldr	r3, [pc, #32]	; (80a234c <_GLOBAL__sub_I__ZN3UDPC2Ev+0x24>)
 80a232a:	2200      	movs	r2, #0
 80a232c:	4908      	ldr	r1, [pc, #32]	; (80a2350 <_GLOBAL__sub_I__ZN3UDPC2Ev+0x28>)
 80a232e:	701a      	strb	r2, [r3, #0]
 80a2330:	2301      	movs	r3, #1
 80a2332:	700b      	strb	r3, [r1, #0]
 80a2334:	4907      	ldr	r1, [pc, #28]	; (80a2354 <_GLOBAL__sub_I__ZN3UDPC2Ev+0x2c>)
 80a2336:	700a      	strb	r2, [r1, #0]
 80a2338:	4a07      	ldr	r2, [pc, #28]	; (80a2358 <_GLOBAL__sub_I__ZN3UDPC2Ev+0x30>)
 80a233a:	7013      	strb	r3, [r2, #0]
 80a233c:	4b07      	ldr	r3, [pc, #28]	; (80a235c <_GLOBAL__sub_I__ZN3UDPC2Ev+0x34>)
 80a233e:	2202      	movs	r2, #2
 80a2340:	701a      	strb	r2, [r3, #0]
 80a2342:	4b07      	ldr	r3, [pc, #28]	; (80a2360 <_GLOBAL__sub_I__ZN3UDPC2Ev+0x38>)
 80a2344:	2208      	movs	r2, #8
 80a2346:	701a      	strb	r2, [r3, #0]
 80a2348:	4770      	bx	lr
 80a234a:	bf00      	nop
 80a234c:	2000049a 	.word	0x2000049a
 80a2350:	2000049b 	.word	0x2000049b
 80a2354:	20000498 	.word	0x20000498
 80a2358:	20000499 	.word	0x20000499
 80a235c:	20000497 	.word	0x20000497
 80a2360:	20000496 	.word	0x20000496

080a2364 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2364:	4770      	bx	lr

080a2366 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2366:	7441      	strb	r1, [r0, #17]
 80a2368:	4770      	bx	lr

080a236a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a236a:	7c00      	ldrb	r0, [r0, #16]
 80a236c:	f7ff bbc4 	b.w	80a1af8 <HAL_USART_Available_Data_For_Write>

080a2370 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a2370:	7c00      	ldrb	r0, [r0, #16]
 80a2372:	f7ff bb99 	b.w	80a1aa8 <HAL_USART_Available_Data>

080a2376 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a2376:	7c00      	ldrb	r0, [r0, #16]
 80a2378:	f7ff bba6 	b.w	80a1ac8 <HAL_USART_Peek_Data>

080a237c <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a237c:	7c00      	ldrb	r0, [r0, #16]
 80a237e:	f7ff bb9b 	b.w	80a1ab8 <HAL_USART_Read_Data>

080a2382 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2382:	7c00      	ldrb	r0, [r0, #16]
 80a2384:	f7ff bba8 	b.w	80a1ad8 <HAL_USART_Flush_Data>

080a2388 <_ZN11USARTSerialD0Ev>:
 80a2388:	b510      	push	{r4, lr}
 80a238a:	4604      	mov	r4, r0
 80a238c:	f7fd fe85 	bl	80a009a <_ZdlPv>
 80a2390:	4620      	mov	r0, r4
 80a2392:	bd10      	pop	{r4, pc}

080a2394 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2394:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2396:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2398:	4604      	mov	r4, r0
 80a239a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a239c:	b925      	cbnz	r5, 80a23a8 <_ZN11USARTSerial5writeEh+0x14>
 80a239e:	7c00      	ldrb	r0, [r0, #16]
 80a23a0:	f7ff fbaa 	bl	80a1af8 <HAL_USART_Available_Data_For_Write>
 80a23a4:	2800      	cmp	r0, #0
 80a23a6:	dd05      	ble.n	80a23b4 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a23a8:	7c20      	ldrb	r0, [r4, #16]
 80a23aa:	4631      	mov	r1, r6
  }
  return 0;
}
 80a23ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a23b0:	f7ff bb72 	b.w	80a1a98 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a23b4:	4628      	mov	r0, r5
 80a23b6:	bd70      	pop	{r4, r5, r6, pc}

080a23b8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a23b8:	b510      	push	{r4, lr}
 80a23ba:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a23bc:	2000      	movs	r0, #0
 80a23be:	6060      	str	r0, [r4, #4]
 80a23c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a23c4:	60a0      	str	r0, [r4, #8]
 80a23c6:	4806      	ldr	r0, [pc, #24]	; (80a23e0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a23c8:	7421      	strb	r1, [r4, #16]
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a23ca:	6020      	str	r0, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a23cc:	2001      	movs	r0, #1
 80a23ce:	7460      	strb	r0, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a23d0:	4608      	mov	r0, r1
 80a23d2:	4611      	mov	r1, r2
 80a23d4:	461a      	mov	r2, r3
 80a23d6:	f7ff fb57 	bl	80a1a88 <HAL_USART_Init>
}
 80a23da:	4620      	mov	r0, r4
 80a23dc:	bd10      	pop	{r4, pc}
 80a23de:	bf00      	nop
 80a23e0:	080a3698 	.word	0x080a3698

080a23e4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a23e4:	7c00      	ldrb	r0, [r0, #16]
 80a23e6:	f7ff bb7f 	b.w	80a1ae8 <HAL_USART_Is_Enabled>
	...

080a23ec <_Z22__fetch_global_Serial1v>:
// Preinstantiate Objects //////////////////////////////////////////////////////
static Ring_Buffer serial1_rx_buffer;
static Ring_Buffer serial1_tx_buffer;

USARTSerial& __fetch_global_Serial1()
{
 80a23ec:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a23ee:	4d0c      	ldr	r5, [pc, #48]	; (80a2420 <_Z22__fetch_global_Serial1v+0x34>)
 80a23f0:	6829      	ldr	r1, [r5, #0]
 80a23f2:	f011 0401 	ands.w	r4, r1, #1
 80a23f6:	d111      	bne.n	80a241c <_Z22__fetch_global_Serial1v+0x30>
 80a23f8:	4628      	mov	r0, r5
 80a23fa:	f7fd fe50 	bl	80a009e <__cxa_guard_acquire>
 80a23fe:	b168      	cbz	r0, 80a241c <_Z22__fetch_global_Serial1v+0x30>
 80a2400:	4621      	mov	r1, r4
 80a2402:	4a08      	ldr	r2, [pc, #32]	; (80a2424 <_Z22__fetch_global_Serial1v+0x38>)
 80a2404:	4b08      	ldr	r3, [pc, #32]	; (80a2428 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2406:	4809      	ldr	r0, [pc, #36]	; (80a242c <_Z22__fetch_global_Serial1v+0x40>)
 80a2408:	f7ff ffd6 	bl	80a23b8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a240c:	4628      	mov	r0, r5
 80a240e:	f7fd fe4b 	bl	80a00a8 <__cxa_guard_release>
 80a2412:	4806      	ldr	r0, [pc, #24]	; (80a242c <_Z22__fetch_global_Serial1v+0x40>)
 80a2414:	4906      	ldr	r1, [pc, #24]	; (80a2430 <_Z22__fetch_global_Serial1v+0x44>)
 80a2416:	4a07      	ldr	r2, [pc, #28]	; (80a2434 <_Z22__fetch_global_Serial1v+0x48>)
 80a2418:	f000 fac4 	bl	80a29a4 <__aeabi_atexit>
	return serial1;
}
 80a241c:	4803      	ldr	r0, [pc, #12]	; (80a242c <_Z22__fetch_global_Serial1v+0x40>)
 80a241e:	bd38      	pop	{r3, r4, r5, pc}
 80a2420:	20000534 	.word	0x20000534
 80a2424:	20000538 	.word	0x20000538
 80a2428:	200004b0 	.word	0x200004b0
 80a242c:	2000049c 	.word	0x2000049c
 80a2430:	080a2365 	.word	0x080a2365
 80a2434:	20000368 	.word	0x20000368

080a2438 <_GLOBAL__sub_I_usb_hid_asciimap>:
 80a2438:	4b08      	ldr	r3, [pc, #32]	; (80a245c <_GLOBAL__sub_I_usb_hid_asciimap+0x24>)
 80a243a:	2200      	movs	r2, #0
 80a243c:	4908      	ldr	r1, [pc, #32]	; (80a2460 <_GLOBAL__sub_I_usb_hid_asciimap+0x28>)
 80a243e:	701a      	strb	r2, [r3, #0]
 80a2440:	2301      	movs	r3, #1
 80a2442:	700b      	strb	r3, [r1, #0]
 80a2444:	4907      	ldr	r1, [pc, #28]	; (80a2464 <_GLOBAL__sub_I_usb_hid_asciimap+0x2c>)
 80a2446:	700a      	strb	r2, [r1, #0]
 80a2448:	4a07      	ldr	r2, [pc, #28]	; (80a2468 <_GLOBAL__sub_I_usb_hid_asciimap+0x30>)
 80a244a:	7013      	strb	r3, [r2, #0]
 80a244c:	4b07      	ldr	r3, [pc, #28]	; (80a246c <_GLOBAL__sub_I_usb_hid_asciimap+0x34>)
 80a244e:	2202      	movs	r2, #2
 80a2450:	701a      	strb	r2, [r3, #0]
 80a2452:	4b07      	ldr	r3, [pc, #28]	; (80a2470 <_GLOBAL__sub_I_usb_hid_asciimap+0x38>)
 80a2454:	2208      	movs	r2, #8
 80a2456:	701a      	strb	r2, [r3, #0]
 80a2458:	4770      	bx	lr
 80a245a:	bf00      	nop
 80a245c:	200005c0 	.word	0x200005c0
 80a2460:	200005c1 	.word	0x200005c1
 80a2464:	200005be 	.word	0x200005be
 80a2468:	200005bf 	.word	0x200005bf
 80a246c:	200005bd 	.word	0x200005bd
 80a2470:	200005bc 	.word	0x200005bc

080a2474 <_GLOBAL__sub_I__ZN8USBMouseC2Ev>:
 80a2474:	4b08      	ldr	r3, [pc, #32]	; (80a2498 <_GLOBAL__sub_I__ZN8USBMouseC2Ev+0x24>)
 80a2476:	2200      	movs	r2, #0
 80a2478:	4908      	ldr	r1, [pc, #32]	; (80a249c <_GLOBAL__sub_I__ZN8USBMouseC2Ev+0x28>)
 80a247a:	701a      	strb	r2, [r3, #0]
 80a247c:	2301      	movs	r3, #1
 80a247e:	700b      	strb	r3, [r1, #0]
 80a2480:	4907      	ldr	r1, [pc, #28]	; (80a24a0 <_GLOBAL__sub_I__ZN8USBMouseC2Ev+0x2c>)
 80a2482:	700a      	strb	r2, [r1, #0]
 80a2484:	4a07      	ldr	r2, [pc, #28]	; (80a24a4 <_GLOBAL__sub_I__ZN8USBMouseC2Ev+0x30>)
 80a2486:	7013      	strb	r3, [r2, #0]
 80a2488:	4b07      	ldr	r3, [pc, #28]	; (80a24a8 <_GLOBAL__sub_I__ZN8USBMouseC2Ev+0x34>)
 80a248a:	2202      	movs	r2, #2
 80a248c:	701a      	strb	r2, [r3, #0]
 80a248e:	4b07      	ldr	r3, [pc, #28]	; (80a24ac <_GLOBAL__sub_I__ZN8USBMouseC2Ev+0x38>)
 80a2490:	2208      	movs	r2, #8
 80a2492:	701a      	strb	r2, [r3, #0]
 80a2494:	4770      	bx	lr
 80a2496:	bf00      	nop
 80a2498:	200005c6 	.word	0x200005c6
 80a249c:	200005c7 	.word	0x200005c7
 80a24a0:	200005c3 	.word	0x200005c3
 80a24a4:	200005c5 	.word	0x200005c5
 80a24a8:	200005c2 	.word	0x200005c2
 80a24ac:	200005c4 	.word	0x200005c4

080a24b0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a24b0:	7441      	strb	r1, [r0, #17]
 80a24b2:	4770      	bx	lr

080a24b4 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a24b4:	4770      	bx	lr

080a24b6 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a24b6:	7c00      	ldrb	r0, [r0, #16]
 80a24b8:	2100      	movs	r1, #0
 80a24ba:	f7ff bb45 	b.w	80a1b48 <HAL_USB_USART_Receive_Data>

080a24be <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a24be:	7c00      	ldrb	r0, [r0, #16]
 80a24c0:	2101      	movs	r1, #1
 80a24c2:	f7ff bb41 	b.w	80a1b48 <HAL_USB_USART_Receive_Data>

080a24c6 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a24c6:	7c00      	ldrb	r0, [r0, #16]
 80a24c8:	f7ff bb36 	b.w	80a1b38 <HAL_USB_USART_Available_Data_For_Write>

080a24cc <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a24cc:	7c00      	ldrb	r0, [r0, #16]
 80a24ce:	f7ff bb2b 	b.w	80a1b28 <HAL_USB_USART_Available_Data>

080a24d2 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a24d2:	b538      	push	{r3, r4, r5, lr}
 80a24d4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a24d6:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a24d8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a24da:	f7ff fb2d 	bl	80a1b38 <HAL_USB_USART_Available_Data_For_Write>
 80a24de:	2800      	cmp	r0, #0
 80a24e0:	dc01      	bgt.n	80a24e6 <_ZN9USBSerial5writeEh+0x14>
 80a24e2:	7c60      	ldrb	r0, [r4, #17]
 80a24e4:	b120      	cbz	r0, 80a24f0 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a24e6:	7c20      	ldrb	r0, [r4, #16]
 80a24e8:	4629      	mov	r1, r5
 80a24ea:	f7ff fb35 	bl	80a1b58 <HAL_USB_USART_Send_Data>
    return 1;
 80a24ee:	2001      	movs	r0, #1
  }
  return 0;
}
 80a24f0:	bd38      	pop	{r3, r4, r5, pc}

080a24f2 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a24f2:	7c00      	ldrb	r0, [r0, #16]
 80a24f4:	f7ff bb38 	b.w	80a1b68 <HAL_USB_USART_Flush_Data>

080a24f8 <_ZN9USBSerialD0Ev>:
 80a24f8:	b510      	push	{r4, lr}
 80a24fa:	4604      	mov	r4, r0
 80a24fc:	f7fd fdcd 	bl	80a009a <_ZdlPv>
 80a2500:	4620      	mov	r0, r4
 80a2502:	bd10      	pop	{r4, pc}

080a2504 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2504:	b510      	push	{r4, lr}
 80a2506:	4604      	mov	r4, r0
 80a2508:	2300      	movs	r3, #0
 80a250a:	6043      	str	r3, [r0, #4]
 80a250c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2510:	6083      	str	r3, [r0, #8]
 80a2512:	4b05      	ldr	r3, [pc, #20]	; (80a2528 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
{
  _serial = serial;
 80a2514:	7401      	strb	r1, [r0, #16]

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2516:	6003      	str	r3, [r0, #0]
{
  _serial = serial;
  _blocking = true;
 80a2518:	2301      	movs	r3, #1
 80a251a:	7443      	strb	r3, [r0, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a251c:	4608      	mov	r0, r1
 80a251e:	4611      	mov	r1, r2
 80a2520:	f7ff faf2 	bl	80a1b08 <HAL_USB_USART_Init>
}
 80a2524:	4620      	mov	r0, r4
 80a2526:	bd10      	pop	{r4, pc}
 80a2528:	080a36c8 	.word	0x080a36c8

080a252c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a252c:	7c00      	ldrb	r0, [r0, #16]
 80a252e:	2200      	movs	r2, #0
 80a2530:	f7ff baf2 	b.w	80a1b18 <HAL_USB_USART_Begin>

080a2534 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2534:	b510      	push	{r4, lr}
 80a2536:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2538:	2100      	movs	r1, #0
 80a253a:	2214      	movs	r2, #20
 80a253c:	f000 ff3b 	bl	80a33b6 <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2540:	4b05      	ldr	r3, [pc, #20]	; (80a2558 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2542:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2544:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2546:	4b05      	ldr	r3, [pc, #20]	; (80a255c <_Z19acquireSerialBufferv+0x28>)
 80a2548:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a254a:	f240 1301 	movw	r3, #257	; 0x101
 80a254e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2550:	2381      	movs	r3, #129	; 0x81
 80a2552:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2554:	bd10      	pop	{r4, pc}
 80a2556:	bf00      	nop
 80a2558:	2000064d 	.word	0x2000064d
 80a255c:	200005cc 	.word	0x200005cc

080a2560 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2560:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2562:	4d0e      	ldr	r5, [pc, #56]	; (80a259c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2564:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2566:	a801      	add	r0, sp, #4
 80a2568:	f7ff ffe4 	bl	80a2534 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a256c:	6829      	ldr	r1, [r5, #0]
 80a256e:	f011 0401 	ands.w	r4, r1, #1
 80a2572:	d110      	bne.n	80a2596 <_Z16_fetch_usbserialv+0x36>
 80a2574:	4628      	mov	r0, r5
 80a2576:	f7fd fd92 	bl	80a009e <__cxa_guard_acquire>
 80a257a:	b160      	cbz	r0, 80a2596 <_Z16_fetch_usbserialv+0x36>
 80a257c:	4621      	mov	r1, r4
 80a257e:	aa01      	add	r2, sp, #4
 80a2580:	4807      	ldr	r0, [pc, #28]	; (80a25a0 <_Z16_fetch_usbserialv+0x40>)
 80a2582:	f7ff ffbf 	bl	80a2504 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2586:	4628      	mov	r0, r5
 80a2588:	f7fd fd8e 	bl	80a00a8 <__cxa_guard_release>
 80a258c:	4804      	ldr	r0, [pc, #16]	; (80a25a0 <_Z16_fetch_usbserialv+0x40>)
 80a258e:	4905      	ldr	r1, [pc, #20]	; (80a25a4 <_Z16_fetch_usbserialv+0x44>)
 80a2590:	4a05      	ldr	r2, [pc, #20]	; (80a25a8 <_Z16_fetch_usbserialv+0x48>)
 80a2592:	f000 fa07 	bl	80a29a4 <__aeabi_atexit>
	return _usbserial;
}
 80a2596:	4802      	ldr	r0, [pc, #8]	; (80a25a0 <_Z16_fetch_usbserialv+0x40>)
 80a2598:	b007      	add	sp, #28
 80a259a:	bd30      	pop	{r4, r5, pc}
 80a259c:	200005c8 	.word	0x200005c8
 80a25a0:	20000750 	.word	0x20000750
 80a25a4:	080a24b5 	.word	0x080a24b5
 80a25a8:	20000368 	.word	0x20000368

080a25ac <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a25ac:	b510      	push	{r4, lr}
 80a25ae:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a25b0:	2100      	movs	r1, #0
 80a25b2:	2214      	movs	r2, #20
 80a25b4:	f000 feff 	bl	80a33b6 <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a25b8:	4b05      	ldr	r3, [pc, #20]	; (80a25d0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a25ba:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a25bc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a25be:	4b05      	ldr	r3, [pc, #20]	; (80a25d4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a25c0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a25c2:	f240 1301 	movw	r3, #257	; 0x101
 80a25c6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a25c8:	2381      	movs	r3, #129	; 0x81
 80a25ca:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a25cc:	bd10      	pop	{r4, pc}
 80a25ce:	bf00      	nop
 80a25d0:	20000800 	.word	0x20000800
 80a25d4:	20000768 	.word	0x20000768

080a25d8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a25d8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a25da:	4c0e      	ldr	r4, [pc, #56]	; (80a2614 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a25dc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a25de:	a801      	add	r0, sp, #4
 80a25e0:	f7ff ffe4 	bl	80a25ac <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a25e4:	6823      	ldr	r3, [r4, #0]
 80a25e6:	07db      	lsls	r3, r3, #31
 80a25e8:	d410      	bmi.n	80a260c <_Z17_fetch_usbserial1v+0x34>
 80a25ea:	4620      	mov	r0, r4
 80a25ec:	f7fd fd57 	bl	80a009e <__cxa_guard_acquire>
 80a25f0:	b160      	cbz	r0, 80a260c <_Z17_fetch_usbserial1v+0x34>
 80a25f2:	2101      	movs	r1, #1
 80a25f4:	aa01      	add	r2, sp, #4
 80a25f6:	4808      	ldr	r0, [pc, #32]	; (80a2618 <_Z17_fetch_usbserial1v+0x40>)
 80a25f8:	f7ff ff84 	bl	80a2504 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a25fc:	4620      	mov	r0, r4
 80a25fe:	f7fd fd53 	bl	80a00a8 <__cxa_guard_release>
 80a2602:	4805      	ldr	r0, [pc, #20]	; (80a2618 <_Z17_fetch_usbserial1v+0x40>)
 80a2604:	4905      	ldr	r1, [pc, #20]	; (80a261c <_Z17_fetch_usbserial1v+0x44>)
 80a2606:	4a06      	ldr	r2, [pc, #24]	; (80a2620 <_Z17_fetch_usbserial1v+0x48>)
 80a2608:	f000 f9cc 	bl	80a29a4 <__aeabi_atexit>
  return _usbserial1;
}
 80a260c:	4802      	ldr	r0, [pc, #8]	; (80a2618 <_Z17_fetch_usbserial1v+0x40>)
 80a260e:	b006      	add	sp, #24
 80a2610:	bd10      	pop	{r4, pc}
 80a2612:	bf00      	nop
 80a2614:	20000764 	.word	0x20000764
 80a2618:	200007ec 	.word	0x200007ec
 80a261c:	080a24b5 	.word	0x080a24b5
 80a2620:	20000368 	.word	0x20000368

080a2624 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a2624:	4770      	bx	lr

080a2626 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2626:	2000      	movs	r0, #0
 80a2628:	4601      	mov	r1, r0
 80a262a:	4602      	mov	r2, r0
 80a262c:	f7ff bacc 	b.w	80a1bc8 <network_ready>

080a2630 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a2630:	4803      	ldr	r0, [pc, #12]	; (80a2640 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a2632:	4b04      	ldr	r3, [pc, #16]	; (80a2644 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a2634:	4904      	ldr	r1, [pc, #16]	; (80a2648 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a2636:	4a05      	ldr	r2, [pc, #20]	; (80a264c <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a2638:	6003      	str	r3, [r0, #0]
 80a263a:	f000 b9b3 	b.w	80a29a4 <__aeabi_atexit>
 80a263e:	bf00      	nop
 80a2640:	20000904 	.word	0x20000904
 80a2644:	080a36f8 	.word	0x080a36f8
 80a2648:	080a2625 	.word	0x080a2625
 80a264c:	20000368 	.word	0x20000368

080a2650 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2650:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2652:	4b14      	ldr	r3, [pc, #80]	; (80a26a4 <serialEventRun+0x54>)
 80a2654:	b133      	cbz	r3, 80a2664 <serialEventRun+0x14>
 80a2656:	f7ff ff83 	bl	80a2560 <_Z16_fetch_usbserialv>
 80a265a:	6803      	ldr	r3, [r0, #0]
 80a265c:	691b      	ldr	r3, [r3, #16]
 80a265e:	4798      	blx	r3
 80a2660:	2800      	cmp	r0, #0
 80a2662:	dc16      	bgt.n	80a2692 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2664:	4b10      	ldr	r3, [pc, #64]	; (80a26a8 <serialEventRun+0x58>)
 80a2666:	b133      	cbz	r3, 80a2676 <serialEventRun+0x26>
 80a2668:	f7ff fec0 	bl	80a23ec <_Z22__fetch_global_Serial1v>
 80a266c:	6803      	ldr	r3, [r0, #0]
 80a266e:	691b      	ldr	r3, [r3, #16]
 80a2670:	4798      	blx	r3
 80a2672:	2800      	cmp	r0, #0
 80a2674:	dc10      	bgt.n	80a2698 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2676:	4b0d      	ldr	r3, [pc, #52]	; (80a26ac <serialEventRun+0x5c>)
 80a2678:	b10b      	cbz	r3, 80a267e <serialEventRun+0x2e>
 80a267a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a267e:	4b0c      	ldr	r3, [pc, #48]	; (80a26b0 <serialEventRun+0x60>)
 80a2680:	b17b      	cbz	r3, 80a26a2 <serialEventRun+0x52>
 80a2682:	f7ff ffa9 	bl	80a25d8 <_Z17_fetch_usbserial1v>
 80a2686:	6803      	ldr	r3, [r0, #0]
 80a2688:	691b      	ldr	r3, [r3, #16]
 80a268a:	4798      	blx	r3
 80a268c:	2800      	cmp	r0, #0
 80a268e:	dc06      	bgt.n	80a269e <serialEventRun+0x4e>
 80a2690:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2692:	f3af 8000 	nop.w
 80a2696:	e7e5      	b.n	80a2664 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2698:	f3af 8000 	nop.w
 80a269c:	e7eb      	b.n	80a2676 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a269e:	f3af 8000 	nop.w
 80a26a2:	bd08      	pop	{r3, pc}
	...

080a26b4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a26b4:	b508      	push	{r3, lr}
	serialEventRun();
 80a26b6:	f7ff ffcb 	bl	80a2650 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a26ba:	f7ff f913 	bl	80a18e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a26be:	4b01      	ldr	r3, [pc, #4]	; (80a26c4 <_post_loop+0x10>)
 80a26c0:	6018      	str	r0, [r3, #0]
 80a26c2:	bd08      	pop	{r3, pc}
 80a26c4:	20000914 	.word	0x20000914

080a26c8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a26c8:	4802      	ldr	r0, [pc, #8]	; (80a26d4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a26ca:	4a03      	ldr	r2, [pc, #12]	; (80a26d8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a26cc:	4903      	ldr	r1, [pc, #12]	; (80a26dc <_Z33system_initialize_user_backup_ramv+0x14>)
 80a26ce:	1a12      	subs	r2, r2, r0
 80a26d0:	f000 be66 	b.w	80a33a0 <memcpy>
 80a26d4:	40024000 	.word	0x40024000
 80a26d8:	40024004 	.word	0x40024004
 80a26dc:	080a3770 	.word	0x080a3770

080a26e0 <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80a26e0:	2000      	movs	r0, #0
 80a26e2:	4770      	bx	lr

080a26e4 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a26e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80a26e6:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a26e8:	4604      	mov	r4, r0
    switch (req->type) {
 80a26ea:	2b0a      	cmp	r3, #10
 80a26ec:	d00f      	beq.n	80a270e <_Z23usb_request_app_handlerP10USBRequestPv+0x2a>
 80a26ee:	2b50      	cmp	r3, #80	; 0x50
 80a26f0:	d11d      	bne.n	80a272e <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80a26f2:	4b10      	ldr	r3, [pc, #64]	; (80a2734 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80a26f4:	681d      	ldr	r5, [r3, #0]
 80a26f6:	b1d5      	cbz	r5, 80a272e <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
 80a26f8:	7d03      	ldrb	r3, [r0, #20]
 80a26fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a26fe:	9300      	str	r3, [sp, #0]
 80a2700:	6880      	ldr	r0, [r0, #8]
 80a2702:	68e2      	ldr	r2, [r4, #12]
 80a2704:	f104 0310 	add.w	r3, r4, #16
 80a2708:	47a8      	blx	r5

bool usb_request_app_handler(USBRequest* req, void* reserved) {
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80a270a:	b948      	cbnz	r0, 80a2720 <_Z23usb_request_app_handlerP10USBRequestPv+0x3c>
 80a270c:	e00f      	b.n	80a272e <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80a270e:	6880      	ldr	r0, [r0, #8]
 80a2710:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a2714:	68e2      	ldr	r2, [r4, #12]
 80a2716:	f104 0310 	add.w	r3, r4, #16
 80a271a:	f7ff ffe1 	bl	80a26e0 <_Z26usb_request_custom_handlerPcjjPj>
 80a271e:	b138      	cbz	r0, 80a2730 <_Z23usb_request_app_handlerP10USBRequestPv+0x4c>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80a2720:	2100      	movs	r1, #0
 80a2722:	4620      	mov	r0, r4
 80a2724:	460a      	mov	r2, r1
 80a2726:	f7ff fa47 	bl	80a1bb8 <system_set_usb_request_result>
        return true;
 80a272a:	2001      	movs	r0, #1
 80a272c:	e000      	b.n	80a2730 <_Z23usb_request_app_handlerP10USBRequestPv+0x4c>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80a272e:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80a2730:	b003      	add	sp, #12
 80a2732:	bd30      	pop	{r4, r5, pc}
 80a2734:	20000908 	.word	0x20000908

080a2738 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80a2738:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a273a:	4c0c      	ldr	r4, [pc, #48]	; (80a276c <module_user_init_hook+0x34>)
 80a273c:	4d0c      	ldr	r5, [pc, #48]	; (80a2770 <module_user_init_hook+0x38>)
 80a273e:	6823      	ldr	r3, [r4, #0]
 80a2740:	1b5a      	subs	r2, r3, r5
 80a2742:	4253      	negs	r3, r2
 80a2744:	4153      	adcs	r3, r2
 80a2746:	4a0b      	ldr	r2, [pc, #44]	; (80a2774 <module_user_init_hook+0x3c>)
 80a2748:	7013      	strb	r3, [r2, #0]
    if (!backup_ram_was_valid_) {
 80a274a:	b913      	cbnz	r3, 80a2752 <module_user_init_hook+0x1a>
        system_initialize_user_backup_ram();
 80a274c:	f7ff ffbc 	bl	80a26c8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2750:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a2752:	4b09      	ldr	r3, [pc, #36]	; (80a2778 <module_user_init_hook+0x40>)
 80a2754:	b11b      	cbz	r3, 80a275e <module_user_init_hook+0x26>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2756:	f7ff f8bd 	bl	80a18d4 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a275a:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80a275e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80a2762:	4806      	ldr	r0, [pc, #24]	; (80a277c <module_user_init_hook+0x44>)
 80a2764:	2100      	movs	r1, #0
 80a2766:	f7ff ba1f 	b.w	80a1ba8 <system_set_usb_request_app_handler>
 80a276a:	bf00      	nop
 80a276c:	40024000 	.word	0x40024000
 80a2770:	9a271c1e 	.word	0x9a271c1e
 80a2774:	2000090c 	.word	0x2000090c
 80a2778:	00000000 	.word	0x00000000
 80a277c:	080a26e5 	.word	0x080a26e5

080a2780 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2780:	b510      	push	{r4, lr}
 80a2782:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2784:	480f      	ldr	r0, [pc, #60]	; (80a27c4 <pinAvailable+0x44>)
 80a2786:	f7ff fd0f 	bl	80a21a8 <_ZN8SPIClass9isEnabledEv>
 80a278a:	b128      	cbz	r0, 80a2798 <pinAvailable+0x18>
 80a278c:	f1a4 030d 	sub.w	r3, r4, #13
 80a2790:	2b02      	cmp	r3, #2
 80a2792:	d801      	bhi.n	80a2798 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2794:	2000      	movs	r0, #0
 80a2796:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2798:	f000 f890 	bl	80a28bc <_Z19__fetch_global_Wirev>
 80a279c:	f7ff fb0c 	bl	80a1db8 <_ZN7TwoWire9isEnabledEv>
 80a27a0:	b108      	cbz	r0, 80a27a6 <pinAvailable+0x26>
 80a27a2:	2c01      	cmp	r4, #1
 80a27a4:	d9f6      	bls.n	80a2794 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a27a6:	f7ff fe21 	bl	80a23ec <_Z22__fetch_global_Serial1v>
 80a27aa:	f7ff fe1b 	bl	80a23e4 <_ZN11USARTSerial9isEnabledEv>
 80a27ae:	b118      	cbz	r0, 80a27b8 <pinAvailable+0x38>
 80a27b0:	f1a4 0312 	sub.w	r3, r4, #18
 80a27b4:	2b01      	cmp	r3, #1
 80a27b6:	d9ed      	bls.n	80a2794 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a27b8:	2c17      	cmp	r4, #23
 80a27ba:	bf8c      	ite	hi
 80a27bc:	2000      	movhi	r0, #0
 80a27be:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a27c0:	bd10      	pop	{r4, pc}
 80a27c2:	bf00      	nop
 80a27c4:	20000958 	.word	0x20000958

080a27c8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a27c8:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a27ca:	b538      	push	{r3, r4, r5, lr}
 80a27cc:	4605      	mov	r5, r0
 80a27ce:	460c      	mov	r4, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a27d0:	d80a      	bhi.n	80a27e8 <pinMode+0x20>
 80a27d2:	29ff      	cmp	r1, #255	; 0xff
 80a27d4:	d008      	beq.n	80a27e8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a27d6:	f7ff ffd3 	bl	80a2780 <pinAvailable>
 80a27da:	b128      	cbz	r0, 80a27e8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a27dc:	4628      	mov	r0, r5
 80a27de:	4621      	mov	r1, r4
}
 80a27e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a27e4:	f7ff b896 	b.w	80a1914 <HAL_Pin_Mode>
 80a27e8:	bd38      	pop	{r3, r4, r5, pc}

080a27ea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a27ea:	b538      	push	{r3, r4, r5, lr}
 80a27ec:	4604      	mov	r4, r0
 80a27ee:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a27f0:	f7ff f898 	bl	80a1924 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a27f4:	28ff      	cmp	r0, #255	; 0xff
 80a27f6:	d010      	beq.n	80a281a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a27f8:	b178      	cbz	r0, 80a281a <digitalWrite+0x30>
  else
    return 1; // 'pin' is available
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
 80a27fa:	1e83      	subs	r3, r0, #2
 80a27fc:	b2db      	uxtb	r3, r3
 80a27fe:	2b01      	cmp	r3, #1
 80a2800:	d90b      	bls.n	80a281a <digitalWrite+0x30>
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2802:	2806      	cmp	r0, #6
 80a2804:	d009      	beq.n	80a281a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2806:	4620      	mov	r0, r4
 80a2808:	f7ff ffba 	bl	80a2780 <pinAvailable>
 80a280c:	b128      	cbz	r0, 80a281a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a280e:	4620      	mov	r0, r4
 80a2810:	4629      	mov	r1, r5
}
 80a2812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2816:	f7ff b88d 	b.w	80a1934 <HAL_GPIO_Write>
 80a281a:	bd38      	pop	{r3, r4, r5, pc}

080a281c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a281c:	b510      	push	{r4, lr}
 80a281e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2820:	f7ff f880 	bl	80a1924 <HAL_Get_Pin_Mode>

  HAL_GPIO_Write(pin, value);
}

inline bool is_af_output_mode(PinMode mode) {
    return mode == AF_OUTPUT_PUSHPULL ||
 80a2824:	3804      	subs	r0, #4
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (is_af_output_mode(mode))
 80a2826:	b2c0      	uxtb	r0, r0
 80a2828:	2801      	cmp	r0, #1
 80a282a:	d908      	bls.n	80a283e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a282c:	4620      	mov	r0, r4
 80a282e:	f7ff ffa7 	bl	80a2780 <pinAvailable>
 80a2832:	b120      	cbz	r0, 80a283e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2834:	4620      	mov	r0, r4
}
 80a2836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a283a:	f7ff b883 	b.w	80a1944 <HAL_GPIO_Read>
}
 80a283e:	2000      	movs	r0, #0
 80a2840:	bd10      	pop	{r4, pc}
	...

080a2844 <_GLOBAL__sub_I_pinMode>:
{
public:
    typedef uint8_t flag_t;
    inline SleepNetworkFlag(SystemSleepNetwork f) : SleepNetworkFlag(static_cast<flag_t>(f)) {}

    inline SleepNetworkFlag(flag_t flag) : flag_(flag) {}
 80a2844:	4b08      	ldr	r3, [pc, #32]	; (80a2868 <_GLOBAL__sub_I_pinMode+0x24>)
 80a2846:	2200      	movs	r2, #0
 80a2848:	4908      	ldr	r1, [pc, #32]	; (80a286c <_GLOBAL__sub_I_pinMode+0x28>)
 80a284a:	701a      	strb	r2, [r3, #0]
 80a284c:	2301      	movs	r3, #1
 80a284e:	700b      	strb	r3, [r1, #0]

class PublishFlag
{
public:
	typedef uint8_t flag_t;
	PublishFlag(flag_t flag) : flag_(flag) {}
 80a2850:	4907      	ldr	r1, [pc, #28]	; (80a2870 <_GLOBAL__sub_I_pinMode+0x2c>)
 80a2852:	700a      	strb	r2, [r1, #0]
 80a2854:	4a07      	ldr	r2, [pc, #28]	; (80a2874 <_GLOBAL__sub_I_pinMode+0x30>)
 80a2856:	7013      	strb	r3, [r2, #0]
 80a2858:	4b07      	ldr	r3, [pc, #28]	; (80a2878 <_GLOBAL__sub_I_pinMode+0x34>)
 80a285a:	2202      	movs	r2, #2
 80a285c:	701a      	strb	r2, [r3, #0]
 80a285e:	4b07      	ldr	r3, [pc, #28]	; (80a287c <_GLOBAL__sub_I_pinMode+0x38>)
 80a2860:	2208      	movs	r2, #8
 80a2862:	701a      	strb	r2, [r3, #0]
 80a2864:	4770      	bx	lr
 80a2866:	bf00      	nop
 80a2868:	20000911 	.word	0x20000911
 80a286c:	20000912 	.word	0x20000912
 80a2870:	2000090f 	.word	0x2000090f
 80a2874:	20000910 	.word	0x20000910
 80a2878:	2000090e 	.word	0x2000090e
 80a287c:	2000090d 	.word	0x2000090d

080a2880 <_GLOBAL__sub_I_Particle>:
 80a2880:	4b08      	ldr	r3, [pc, #32]	; (80a28a4 <_GLOBAL__sub_I_Particle+0x24>)
 80a2882:	2200      	movs	r2, #0
 80a2884:	4908      	ldr	r1, [pc, #32]	; (80a28a8 <_GLOBAL__sub_I_Particle+0x28>)
 80a2886:	701a      	strb	r2, [r3, #0]
 80a2888:	2301      	movs	r3, #1
 80a288a:	700b      	strb	r3, [r1, #0]
 80a288c:	4907      	ldr	r1, [pc, #28]	; (80a28ac <_GLOBAL__sub_I_Particle+0x2c>)
 80a288e:	700a      	strb	r2, [r1, #0]
 80a2890:	4a07      	ldr	r2, [pc, #28]	; (80a28b0 <_GLOBAL__sub_I_Particle+0x30>)
 80a2892:	7013      	strb	r3, [r2, #0]
 80a2894:	4b07      	ldr	r3, [pc, #28]	; (80a28b4 <_GLOBAL__sub_I_Particle+0x34>)
 80a2896:	2202      	movs	r2, #2
 80a2898:	701a      	strb	r2, [r3, #0]
 80a289a:	4b07      	ldr	r3, [pc, #28]	; (80a28b8 <_GLOBAL__sub_I_Particle+0x38>)
 80a289c:	2208      	movs	r2, #8
 80a289e:	701a      	strb	r2, [r3, #0]
 80a28a0:	4770      	bx	lr
 80a28a2:	bf00      	nop
 80a28a4:	2000091c 	.word	0x2000091c
 80a28a8:	2000091d 	.word	0x2000091d
 80a28ac:	2000091a 	.word	0x2000091a
 80a28b0:	2000091b 	.word	0x2000091b
 80a28b4:	20000919 	.word	0x20000919
 80a28b8:	20000918 	.word	0x20000918

080a28bc <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a28bc:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a28be:	4d0b      	ldr	r5, [pc, #44]	; (80a28ec <_Z19__fetch_global_Wirev+0x30>)
 80a28c0:	6829      	ldr	r1, [r5, #0]
 80a28c2:	f011 0401 	ands.w	r4, r1, #1
 80a28c6:	d10f      	bne.n	80a28e8 <_Z19__fetch_global_Wirev+0x2c>
 80a28c8:	4628      	mov	r0, r5
 80a28ca:	f7fd fbe8 	bl	80a009e <__cxa_guard_acquire>
 80a28ce:	b158      	cbz	r0, 80a28e8 <_Z19__fetch_global_Wirev+0x2c>
 80a28d0:	4621      	mov	r1, r4
 80a28d2:	4807      	ldr	r0, [pc, #28]	; (80a28f0 <_Z19__fetch_global_Wirev+0x34>)
 80a28d4:	f7ff fa38 	bl	80a1d48 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a28d8:	4628      	mov	r0, r5
 80a28da:	f7fd fbe5 	bl	80a00a8 <__cxa_guard_release>
 80a28de:	4804      	ldr	r0, [pc, #16]	; (80a28f0 <_Z19__fetch_global_Wirev+0x34>)
 80a28e0:	4904      	ldr	r1, [pc, #16]	; (80a28f4 <_Z19__fetch_global_Wirev+0x38>)
 80a28e2:	4a05      	ldr	r2, [pc, #20]	; (80a28f8 <_Z19__fetch_global_Wirev+0x3c>)
 80a28e4:	f000 f85e 	bl	80a29a4 <__aeabi_atexit>
	return wire;
}
 80a28e8:	4801      	ldr	r0, [pc, #4]	; (80a28f0 <_Z19__fetch_global_Wirev+0x34>)
 80a28ea:	bd38      	pop	{r3, r4, r5, pc}
 80a28ec:	20000920 	.word	0x20000920
 80a28f0:	20000924 	.word	0x20000924
 80a28f4:	080a1cf1 	.word	0x080a1cf1
 80a28f8:	20000368 	.word	0x20000368

080a28fc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a28fc:	b513      	push	{r0, r1, r4, lr}
 80a28fe:	4c08      	ldr	r4, [pc, #32]	; (80a2920 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2900:	2100      	movs	r1, #0
 80a2902:	9100      	str	r1, [sp, #0]
 80a2904:	460a      	mov	r2, r1
 80a2906:	460b      	mov	r3, r1
 80a2908:	4620      	mov	r0, r4
 80a290a:	f7ff faaf 	bl	80a1e6c <_ZN9IPAddressC1Ehhhh>
 80a290e:	4620      	mov	r0, r4
 80a2910:	4904      	ldr	r1, [pc, #16]	; (80a2924 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2912:	4a05      	ldr	r2, [pc, #20]	; (80a2928 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2914:	b002      	add	sp, #8
 80a2916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a291a:	f000 b843 	b.w	80a29a4 <__aeabi_atexit>
 80a291e:	bf00      	nop
 80a2920:	20000938 	.word	0x20000938
 80a2924:	080a1e11 	.word	0x080a1e11
 80a2928:	20000368 	.word	0x20000368

080a292c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a292e:	4b13      	ldr	r3, [pc, #76]	; (80a297c <_GLOBAL__sub_I_SPI+0x50>)
 80a2930:	2100      	movs	r1, #0
 80a2932:	7019      	strb	r1, [r3, #0]
 80a2934:	4b12      	ldr	r3, [pc, #72]	; (80a2980 <_GLOBAL__sub_I_SPI+0x54>)
 80a2936:	2401      	movs	r4, #1
 80a2938:	701c      	strb	r4, [r3, #0]
 80a293a:	4b12      	ldr	r3, [pc, #72]	; (80a2984 <_GLOBAL__sub_I_SPI+0x58>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a293c:	4f12      	ldr	r7, [pc, #72]	; (80a2988 <_GLOBAL__sub_I_SPI+0x5c>)
 80a293e:	7019      	strb	r1, [r3, #0]
 80a2940:	4b12      	ldr	r3, [pc, #72]	; (80a298c <_GLOBAL__sub_I_SPI+0x60>)
 80a2942:	2202      	movs	r2, #2
 80a2944:	701c      	strb	r4, [r3, #0]
 80a2946:	4b12      	ldr	r3, [pc, #72]	; (80a2990 <_GLOBAL__sub_I_SPI+0x64>)
 80a2948:	4e12      	ldr	r6, [pc, #72]	; (80a2994 <_GLOBAL__sub_I_SPI+0x68>)
 80a294a:	701a      	strb	r2, [r3, #0]
 80a294c:	4b12      	ldr	r3, [pc, #72]	; (80a2998 <_GLOBAL__sub_I_SPI+0x6c>)
 80a294e:	2208      	movs	r2, #8
 80a2950:	4d12      	ldr	r5, [pc, #72]	; (80a299c <_GLOBAL__sub_I_SPI+0x70>)
 80a2952:	4638      	mov	r0, r7
 80a2954:	701a      	strb	r2, [r3, #0]
 80a2956:	f7ff fc13 	bl	80a2180 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a295a:	4638      	mov	r0, r7

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a295c:	4f10      	ldr	r7, [pc, #64]	; (80a29a0 <_GLOBAL__sub_I_SPI+0x74>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a295e:	462a      	mov	r2, r5
 80a2960:	4631      	mov	r1, r6
 80a2962:	f000 f81f 	bl	80a29a4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2966:	4621      	mov	r1, r4
 80a2968:	4638      	mov	r0, r7
 80a296a:	f7ff fc09 	bl	80a2180 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a296e:	4638      	mov	r0, r7
 80a2970:	4631      	mov	r1, r6
 80a2972:	462a      	mov	r2, r5
 80a2974:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80a2978:	f000 b814 	b.w	80a29a4 <__aeabi_atexit>
 80a297c:	20000954 	.word	0x20000954
 80a2980:	20000955 	.word	0x20000955
 80a2984:	20000952 	.word	0x20000952
 80a2988:	20000958 	.word	0x20000958
 80a298c:	20000953 	.word	0x20000953
 80a2990:	20000951 	.word	0x20000951
 80a2994:	080a2171 	.word	0x080a2171
 80a2998:	20000950 	.word	0x20000950
 80a299c:	20000368 	.word	0x20000368
 80a29a0:	20000968 	.word	0x20000968

080a29a4 <__aeabi_atexit>:
 80a29a4:	4603      	mov	r3, r0
 80a29a6:	4608      	mov	r0, r1
 80a29a8:	4619      	mov	r1, r3
 80a29aa:	f000 bceb 	b.w	80a3384 <__cxa_atexit>
	...

080a29b0 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE>:
 80a29b0:	4b24      	ldr	r3, [pc, #144]	; (80a2a44 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0x94>)
 80a29b2:	681a      	ldr	r2, [r3, #0]
 80a29b4:	07d0      	lsls	r0, r2, #31
 80a29b6:	bf5c      	itt	pl
 80a29b8:	2201      	movpl	r2, #1
 80a29ba:	601a      	strpl	r2, [r3, #0]
 80a29bc:	4b22      	ldr	r3, [pc, #136]	; (80a2a48 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0x98>)
 80a29be:	681a      	ldr	r2, [r3, #0]
 80a29c0:	07d1      	lsls	r1, r2, #31
 80a29c2:	bf5c      	itt	pl
 80a29c4:	2201      	movpl	r2, #1
 80a29c6:	601a      	strpl	r2, [r3, #0]
 80a29c8:	4b20      	ldr	r3, [pc, #128]	; (80a2a4c <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0x9c>)
 80a29ca:	681a      	ldr	r2, [r3, #0]
 80a29cc:	07d2      	lsls	r2, r2, #31
 80a29ce:	bf5c      	itt	pl
 80a29d0:	2201      	movpl	r2, #1
 80a29d2:	601a      	strpl	r2, [r3, #0]
 80a29d4:	4b1e      	ldr	r3, [pc, #120]	; (80a2a50 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xa0>)
 80a29d6:	681a      	ldr	r2, [r3, #0]
 80a29d8:	07d0      	lsls	r0, r2, #31
 80a29da:	bf5c      	itt	pl
 80a29dc:	2201      	movpl	r2, #1
 80a29de:	601a      	strpl	r2, [r3, #0]
 80a29e0:	4b1c      	ldr	r3, [pc, #112]	; (80a2a54 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xa4>)
 80a29e2:	681a      	ldr	r2, [r3, #0]
 80a29e4:	07d1      	lsls	r1, r2, #31
 80a29e6:	bf5c      	itt	pl
 80a29e8:	2201      	movpl	r2, #1
 80a29ea:	601a      	strpl	r2, [r3, #0]
 80a29ec:	4b1a      	ldr	r3, [pc, #104]	; (80a2a58 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xa8>)
 80a29ee:	681a      	ldr	r2, [r3, #0]
 80a29f0:	07d2      	lsls	r2, r2, #31
 80a29f2:	bf5c      	itt	pl
 80a29f4:	2201      	movpl	r2, #1
 80a29f6:	601a      	strpl	r2, [r3, #0]
 80a29f8:	4b18      	ldr	r3, [pc, #96]	; (80a2a5c <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xac>)
 80a29fa:	681a      	ldr	r2, [r3, #0]
 80a29fc:	07d0      	lsls	r0, r2, #31
 80a29fe:	bf5c      	itt	pl
 80a2a00:	2201      	movpl	r2, #1
 80a2a02:	601a      	strpl	r2, [r3, #0]
 80a2a04:	4b16      	ldr	r3, [pc, #88]	; (80a2a60 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xb0>)
 80a2a06:	681a      	ldr	r2, [r3, #0]
 80a2a08:	07d1      	lsls	r1, r2, #31
 80a2a0a:	bf5c      	itt	pl
 80a2a0c:	2201      	movpl	r2, #1
 80a2a0e:	601a      	strpl	r2, [r3, #0]
 80a2a10:	4b14      	ldr	r3, [pc, #80]	; (80a2a64 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xb4>)
 80a2a12:	681a      	ldr	r2, [r3, #0]
 80a2a14:	07d2      	lsls	r2, r2, #31
 80a2a16:	bf5c      	itt	pl
 80a2a18:	2201      	movpl	r2, #1
 80a2a1a:	601a      	strpl	r2, [r3, #0]
 80a2a1c:	4b12      	ldr	r3, [pc, #72]	; (80a2a68 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xb8>)
 80a2a1e:	681a      	ldr	r2, [r3, #0]
 80a2a20:	07d0      	lsls	r0, r2, #31
 80a2a22:	bf5c      	itt	pl
 80a2a24:	2201      	movpl	r2, #1
 80a2a26:	601a      	strpl	r2, [r3, #0]
 80a2a28:	4b10      	ldr	r3, [pc, #64]	; (80a2a6c <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xbc>)
 80a2a2a:	681a      	ldr	r2, [r3, #0]
 80a2a2c:	07d1      	lsls	r1, r2, #31
 80a2a2e:	bf5c      	itt	pl
 80a2a30:	2201      	movpl	r2, #1
 80a2a32:	601a      	strpl	r2, [r3, #0]
 80a2a34:	4b0e      	ldr	r3, [pc, #56]	; (80a2a70 <_GLOBAL__sub_I__ZTSSt16__numpunct_cacheIwE+0xc0>)
 80a2a36:	681a      	ldr	r2, [r3, #0]
 80a2a38:	07d2      	lsls	r2, r2, #31
 80a2a3a:	bf5c      	itt	pl
 80a2a3c:	2201      	movpl	r2, #1
 80a2a3e:	601a      	strpl	r2, [r3, #0]
 80a2a40:	4770      	bx	lr
 80a2a42:	bf00      	nop
 80a2a44:	200009a4 	.word	0x200009a4
 80a2a48:	200009a0 	.word	0x200009a0
 80a2a4c:	2000099c 	.word	0x2000099c
 80a2a50:	20000998 	.word	0x20000998
 80a2a54:	20000994 	.word	0x20000994
 80a2a58:	20000990 	.word	0x20000990
 80a2a5c:	2000098c 	.word	0x2000098c
 80a2a60:	20000988 	.word	0x20000988
 80a2a64:	20000984 	.word	0x20000984
 80a2a68:	20000980 	.word	0x20000980
 80a2a6c:	2000097c 	.word	0x2000097c
 80a2a70:	20000978 	.word	0x20000978

080a2a74 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE>:
 80a2a74:	4b24      	ldr	r3, [pc, #144]	; (80a2b08 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0x94>)
 80a2a76:	681a      	ldr	r2, [r3, #0]
 80a2a78:	07d0      	lsls	r0, r2, #31
 80a2a7a:	bf5c      	itt	pl
 80a2a7c:	2201      	movpl	r2, #1
 80a2a7e:	601a      	strpl	r2, [r3, #0]
 80a2a80:	4b22      	ldr	r3, [pc, #136]	; (80a2b0c <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0x98>)
 80a2a82:	681a      	ldr	r2, [r3, #0]
 80a2a84:	07d1      	lsls	r1, r2, #31
 80a2a86:	bf5c      	itt	pl
 80a2a88:	2201      	movpl	r2, #1
 80a2a8a:	601a      	strpl	r2, [r3, #0]
 80a2a8c:	4b20      	ldr	r3, [pc, #128]	; (80a2b10 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0x9c>)
 80a2a8e:	681a      	ldr	r2, [r3, #0]
 80a2a90:	07d2      	lsls	r2, r2, #31
 80a2a92:	bf5c      	itt	pl
 80a2a94:	2201      	movpl	r2, #1
 80a2a96:	601a      	strpl	r2, [r3, #0]
 80a2a98:	4b1e      	ldr	r3, [pc, #120]	; (80a2b14 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xa0>)
 80a2a9a:	681a      	ldr	r2, [r3, #0]
 80a2a9c:	07d0      	lsls	r0, r2, #31
 80a2a9e:	bf5c      	itt	pl
 80a2aa0:	2201      	movpl	r2, #1
 80a2aa2:	601a      	strpl	r2, [r3, #0]
 80a2aa4:	4b1c      	ldr	r3, [pc, #112]	; (80a2b18 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xa4>)
 80a2aa6:	681a      	ldr	r2, [r3, #0]
 80a2aa8:	07d1      	lsls	r1, r2, #31
 80a2aaa:	bf5c      	itt	pl
 80a2aac:	2201      	movpl	r2, #1
 80a2aae:	601a      	strpl	r2, [r3, #0]
 80a2ab0:	4b1a      	ldr	r3, [pc, #104]	; (80a2b1c <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xa8>)
 80a2ab2:	681a      	ldr	r2, [r3, #0]
 80a2ab4:	07d2      	lsls	r2, r2, #31
 80a2ab6:	bf5c      	itt	pl
 80a2ab8:	2201      	movpl	r2, #1
 80a2aba:	601a      	strpl	r2, [r3, #0]
 80a2abc:	4b18      	ldr	r3, [pc, #96]	; (80a2b20 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xac>)
 80a2abe:	681a      	ldr	r2, [r3, #0]
 80a2ac0:	07d0      	lsls	r0, r2, #31
 80a2ac2:	bf5c      	itt	pl
 80a2ac4:	2201      	movpl	r2, #1
 80a2ac6:	601a      	strpl	r2, [r3, #0]
 80a2ac8:	4b16      	ldr	r3, [pc, #88]	; (80a2b24 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xb0>)
 80a2aca:	681a      	ldr	r2, [r3, #0]
 80a2acc:	07d1      	lsls	r1, r2, #31
 80a2ace:	bf5c      	itt	pl
 80a2ad0:	2201      	movpl	r2, #1
 80a2ad2:	601a      	strpl	r2, [r3, #0]
 80a2ad4:	4b14      	ldr	r3, [pc, #80]	; (80a2b28 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xb4>)
 80a2ad6:	681a      	ldr	r2, [r3, #0]
 80a2ad8:	07d2      	lsls	r2, r2, #31
 80a2ada:	bf5c      	itt	pl
 80a2adc:	2201      	movpl	r2, #1
 80a2ade:	601a      	strpl	r2, [r3, #0]
 80a2ae0:	4b12      	ldr	r3, [pc, #72]	; (80a2b2c <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xb8>)
 80a2ae2:	681a      	ldr	r2, [r3, #0]
 80a2ae4:	07d0      	lsls	r0, r2, #31
 80a2ae6:	bf5c      	itt	pl
 80a2ae8:	2201      	movpl	r2, #1
 80a2aea:	601a      	strpl	r2, [r3, #0]
 80a2aec:	4b10      	ldr	r3, [pc, #64]	; (80a2b30 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xbc>)
 80a2aee:	681a      	ldr	r2, [r3, #0]
 80a2af0:	07d1      	lsls	r1, r2, #31
 80a2af2:	bf5c      	itt	pl
 80a2af4:	2201      	movpl	r2, #1
 80a2af6:	601a      	strpl	r2, [r3, #0]
 80a2af8:	4b0e      	ldr	r3, [pc, #56]	; (80a2b34 <_GLOBAL__sub_I__ZTSSt21__ctype_abstract_baseIcE+0xc0>)
 80a2afa:	681a      	ldr	r2, [r3, #0]
 80a2afc:	07d2      	lsls	r2, r2, #31
 80a2afe:	bf5c      	itt	pl
 80a2b00:	2201      	movpl	r2, #1
 80a2b02:	601a      	strpl	r2, [r3, #0]
 80a2b04:	4770      	bx	lr
 80a2b06:	bf00      	nop
 80a2b08:	200009d4 	.word	0x200009d4
 80a2b0c:	200009d0 	.word	0x200009d0
 80a2b10:	200009cc 	.word	0x200009cc
 80a2b14:	200009c8 	.word	0x200009c8
 80a2b18:	200009c4 	.word	0x200009c4
 80a2b1c:	200009c0 	.word	0x200009c0
 80a2b20:	200009bc 	.word	0x200009bc
 80a2b24:	200009b8 	.word	0x200009b8
 80a2b28:	200009b4 	.word	0x200009b4
 80a2b2c:	200009b0 	.word	0x200009b0
 80a2b30:	200009ac 	.word	0x200009ac
 80a2b34:	200009a8 	.word	0x200009a8

080a2b38 <__aeabi_drsub>:
 80a2b38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2b3c:	e002      	b.n	80a2b44 <__adddf3>
 80a2b3e:	bf00      	nop

080a2b40 <__aeabi_dsub>:
 80a2b40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2b44 <__adddf3>:
 80a2b44:	b530      	push	{r4, r5, lr}
 80a2b46:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2b4a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2b4e:	ea94 0f05 	teq	r4, r5
 80a2b52:	bf08      	it	eq
 80a2b54:	ea90 0f02 	teqeq	r0, r2
 80a2b58:	bf1f      	itttt	ne
 80a2b5a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2b5e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2b62:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2b66:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2b6a:	f000 80e2 	beq.w	80a2d32 <__adddf3+0x1ee>
 80a2b6e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2b72:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2b76:	bfb8      	it	lt
 80a2b78:	426d      	neglt	r5, r5
 80a2b7a:	dd0c      	ble.n	80a2b96 <__adddf3+0x52>
 80a2b7c:	442c      	add	r4, r5
 80a2b7e:	ea80 0202 	eor.w	r2, r0, r2
 80a2b82:	ea81 0303 	eor.w	r3, r1, r3
 80a2b86:	ea82 0000 	eor.w	r0, r2, r0
 80a2b8a:	ea83 0101 	eor.w	r1, r3, r1
 80a2b8e:	ea80 0202 	eor.w	r2, r0, r2
 80a2b92:	ea81 0303 	eor.w	r3, r1, r3
 80a2b96:	2d36      	cmp	r5, #54	; 0x36
 80a2b98:	bf88      	it	hi
 80a2b9a:	bd30      	pophi	{r4, r5, pc}
 80a2b9c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2ba0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2ba4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2ba8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2bac:	d002      	beq.n	80a2bb4 <__adddf3+0x70>
 80a2bae:	4240      	negs	r0, r0
 80a2bb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2bb4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2bb8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2bbc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2bc0:	d002      	beq.n	80a2bc8 <__adddf3+0x84>
 80a2bc2:	4252      	negs	r2, r2
 80a2bc4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2bc8:	ea94 0f05 	teq	r4, r5
 80a2bcc:	f000 80a7 	beq.w	80a2d1e <__adddf3+0x1da>
 80a2bd0:	f1a4 0401 	sub.w	r4, r4, #1
 80a2bd4:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2bd8:	db0d      	blt.n	80a2bf6 <__adddf3+0xb2>
 80a2bda:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2bde:	fa22 f205 	lsr.w	r2, r2, r5
 80a2be2:	1880      	adds	r0, r0, r2
 80a2be4:	f141 0100 	adc.w	r1, r1, #0
 80a2be8:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2bec:	1880      	adds	r0, r0, r2
 80a2bee:	fa43 f305 	asr.w	r3, r3, r5
 80a2bf2:	4159      	adcs	r1, r3
 80a2bf4:	e00e      	b.n	80a2c14 <__adddf3+0xd0>
 80a2bf6:	f1a5 0520 	sub.w	r5, r5, #32
 80a2bfa:	f10e 0e20 	add.w	lr, lr, #32
 80a2bfe:	2a01      	cmp	r2, #1
 80a2c00:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2c04:	bf28      	it	cs
 80a2c06:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2c0a:	fa43 f305 	asr.w	r3, r3, r5
 80a2c0e:	18c0      	adds	r0, r0, r3
 80a2c10:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2c14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2c18:	d507      	bpl.n	80a2c2a <__adddf3+0xe6>
 80a2c1a:	f04f 0e00 	mov.w	lr, #0
 80a2c1e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2c22:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2c26:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2c2a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2c2e:	d31b      	bcc.n	80a2c68 <__adddf3+0x124>
 80a2c30:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2c34:	d30c      	bcc.n	80a2c50 <__adddf3+0x10c>
 80a2c36:	0849      	lsrs	r1, r1, #1
 80a2c38:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2c3c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2c40:	f104 0401 	add.w	r4, r4, #1
 80a2c44:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2c48:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2c4c:	f080 809a 	bcs.w	80a2d84 <__adddf3+0x240>
 80a2c50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2c54:	bf08      	it	eq
 80a2c56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2c5a:	f150 0000 	adcs.w	r0, r0, #0
 80a2c5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2c62:	ea41 0105 	orr.w	r1, r1, r5
 80a2c66:	bd30      	pop	{r4, r5, pc}
 80a2c68:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2c6c:	4140      	adcs	r0, r0
 80a2c6e:	eb41 0101 	adc.w	r1, r1, r1
 80a2c72:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2c76:	f1a4 0401 	sub.w	r4, r4, #1
 80a2c7a:	d1e9      	bne.n	80a2c50 <__adddf3+0x10c>
 80a2c7c:	f091 0f00 	teq	r1, #0
 80a2c80:	bf04      	itt	eq
 80a2c82:	4601      	moveq	r1, r0
 80a2c84:	2000      	moveq	r0, #0
 80a2c86:	fab1 f381 	clz	r3, r1
 80a2c8a:	bf08      	it	eq
 80a2c8c:	3320      	addeq	r3, #32
 80a2c8e:	f1a3 030b 	sub.w	r3, r3, #11
 80a2c92:	f1b3 0220 	subs.w	r2, r3, #32
 80a2c96:	da0c      	bge.n	80a2cb2 <__adddf3+0x16e>
 80a2c98:	320c      	adds	r2, #12
 80a2c9a:	dd08      	ble.n	80a2cae <__adddf3+0x16a>
 80a2c9c:	f102 0c14 	add.w	ip, r2, #20
 80a2ca0:	f1c2 020c 	rsb	r2, r2, #12
 80a2ca4:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2ca8:	fa21 f102 	lsr.w	r1, r1, r2
 80a2cac:	e00c      	b.n	80a2cc8 <__adddf3+0x184>
 80a2cae:	f102 0214 	add.w	r2, r2, #20
 80a2cb2:	bfd8      	it	le
 80a2cb4:	f1c2 0c20 	rsble	ip, r2, #32
 80a2cb8:	fa01 f102 	lsl.w	r1, r1, r2
 80a2cbc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2cc0:	bfdc      	itt	le
 80a2cc2:	ea41 010c 	orrle.w	r1, r1, ip
 80a2cc6:	4090      	lslle	r0, r2
 80a2cc8:	1ae4      	subs	r4, r4, r3
 80a2cca:	bfa2      	ittt	ge
 80a2ccc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2cd0:	4329      	orrge	r1, r5
 80a2cd2:	bd30      	popge	{r4, r5, pc}
 80a2cd4:	ea6f 0404 	mvn.w	r4, r4
 80a2cd8:	3c1f      	subs	r4, #31
 80a2cda:	da1c      	bge.n	80a2d16 <__adddf3+0x1d2>
 80a2cdc:	340c      	adds	r4, #12
 80a2cde:	dc0e      	bgt.n	80a2cfe <__adddf3+0x1ba>
 80a2ce0:	f104 0414 	add.w	r4, r4, #20
 80a2ce4:	f1c4 0220 	rsb	r2, r4, #32
 80a2ce8:	fa20 f004 	lsr.w	r0, r0, r4
 80a2cec:	fa01 f302 	lsl.w	r3, r1, r2
 80a2cf0:	ea40 0003 	orr.w	r0, r0, r3
 80a2cf4:	fa21 f304 	lsr.w	r3, r1, r4
 80a2cf8:	ea45 0103 	orr.w	r1, r5, r3
 80a2cfc:	bd30      	pop	{r4, r5, pc}
 80a2cfe:	f1c4 040c 	rsb	r4, r4, #12
 80a2d02:	f1c4 0220 	rsb	r2, r4, #32
 80a2d06:	fa20 f002 	lsr.w	r0, r0, r2
 80a2d0a:	fa01 f304 	lsl.w	r3, r1, r4
 80a2d0e:	ea40 0003 	orr.w	r0, r0, r3
 80a2d12:	4629      	mov	r1, r5
 80a2d14:	bd30      	pop	{r4, r5, pc}
 80a2d16:	fa21 f004 	lsr.w	r0, r1, r4
 80a2d1a:	4629      	mov	r1, r5
 80a2d1c:	bd30      	pop	{r4, r5, pc}
 80a2d1e:	f094 0f00 	teq	r4, #0
 80a2d22:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2d26:	bf06      	itte	eq
 80a2d28:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2d2c:	3401      	addeq	r4, #1
 80a2d2e:	3d01      	subne	r5, #1
 80a2d30:	e74e      	b.n	80a2bd0 <__adddf3+0x8c>
 80a2d32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2d36:	bf18      	it	ne
 80a2d38:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2d3c:	d029      	beq.n	80a2d92 <__adddf3+0x24e>
 80a2d3e:	ea94 0f05 	teq	r4, r5
 80a2d42:	bf08      	it	eq
 80a2d44:	ea90 0f02 	teqeq	r0, r2
 80a2d48:	d005      	beq.n	80a2d56 <__adddf3+0x212>
 80a2d4a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2d4e:	bf04      	itt	eq
 80a2d50:	4619      	moveq	r1, r3
 80a2d52:	4610      	moveq	r0, r2
 80a2d54:	bd30      	pop	{r4, r5, pc}
 80a2d56:	ea91 0f03 	teq	r1, r3
 80a2d5a:	bf1e      	ittt	ne
 80a2d5c:	2100      	movne	r1, #0
 80a2d5e:	2000      	movne	r0, #0
 80a2d60:	bd30      	popne	{r4, r5, pc}
 80a2d62:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2d66:	d105      	bne.n	80a2d74 <__adddf3+0x230>
 80a2d68:	0040      	lsls	r0, r0, #1
 80a2d6a:	4149      	adcs	r1, r1
 80a2d6c:	bf28      	it	cs
 80a2d6e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2d72:	bd30      	pop	{r4, r5, pc}
 80a2d74:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2d78:	bf3c      	itt	cc
 80a2d7a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2d7e:	bd30      	popcc	{r4, r5, pc}
 80a2d80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2d84:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2d88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2d8c:	f04f 0000 	mov.w	r0, #0
 80a2d90:	bd30      	pop	{r4, r5, pc}
 80a2d92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2d96:	bf1a      	itte	ne
 80a2d98:	4619      	movne	r1, r3
 80a2d9a:	4610      	movne	r0, r2
 80a2d9c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2da0:	bf1c      	itt	ne
 80a2da2:	460b      	movne	r3, r1
 80a2da4:	4602      	movne	r2, r0
 80a2da6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2daa:	bf06      	itte	eq
 80a2dac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2db0:	ea91 0f03 	teqeq	r1, r3
 80a2db4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2db8:	bd30      	pop	{r4, r5, pc}
 80a2dba:	bf00      	nop

080a2dbc <__aeabi_ui2d>:
 80a2dbc:	f090 0f00 	teq	r0, #0
 80a2dc0:	bf04      	itt	eq
 80a2dc2:	2100      	moveq	r1, #0
 80a2dc4:	4770      	bxeq	lr
 80a2dc6:	b530      	push	{r4, r5, lr}
 80a2dc8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2dcc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2dd0:	f04f 0500 	mov.w	r5, #0
 80a2dd4:	f04f 0100 	mov.w	r1, #0
 80a2dd8:	e750      	b.n	80a2c7c <__adddf3+0x138>
 80a2dda:	bf00      	nop

080a2ddc <__aeabi_i2d>:
 80a2ddc:	f090 0f00 	teq	r0, #0
 80a2de0:	bf04      	itt	eq
 80a2de2:	2100      	moveq	r1, #0
 80a2de4:	4770      	bxeq	lr
 80a2de6:	b530      	push	{r4, r5, lr}
 80a2de8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2dec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2df0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2df4:	bf48      	it	mi
 80a2df6:	4240      	negmi	r0, r0
 80a2df8:	f04f 0100 	mov.w	r1, #0
 80a2dfc:	e73e      	b.n	80a2c7c <__adddf3+0x138>
 80a2dfe:	bf00      	nop

080a2e00 <__aeabi_f2d>:
 80a2e00:	0042      	lsls	r2, r0, #1
 80a2e02:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2e06:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2e0a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2e0e:	bf1f      	itttt	ne
 80a2e10:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2e14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2e18:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2e1c:	4770      	bxne	lr
 80a2e1e:	f092 0f00 	teq	r2, #0
 80a2e22:	bf14      	ite	ne
 80a2e24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2e28:	4770      	bxeq	lr
 80a2e2a:	b530      	push	{r4, r5, lr}
 80a2e2c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2e30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2e34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2e38:	e720      	b.n	80a2c7c <__adddf3+0x138>
 80a2e3a:	bf00      	nop

080a2e3c <__aeabi_ul2d>:
 80a2e3c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2e40:	bf08      	it	eq
 80a2e42:	4770      	bxeq	lr
 80a2e44:	b530      	push	{r4, r5, lr}
 80a2e46:	f04f 0500 	mov.w	r5, #0
 80a2e4a:	e00a      	b.n	80a2e62 <__aeabi_l2d+0x16>

080a2e4c <__aeabi_l2d>:
 80a2e4c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2e50:	bf08      	it	eq
 80a2e52:	4770      	bxeq	lr
 80a2e54:	b530      	push	{r4, r5, lr}
 80a2e56:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2e5a:	d502      	bpl.n	80a2e62 <__aeabi_l2d+0x16>
 80a2e5c:	4240      	negs	r0, r0
 80a2e5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2e62:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2e66:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2e6a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2e6e:	f43f aedc 	beq.w	80a2c2a <__adddf3+0xe6>
 80a2e72:	f04f 0203 	mov.w	r2, #3
 80a2e76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2e7a:	bf18      	it	ne
 80a2e7c:	3203      	addne	r2, #3
 80a2e7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2e82:	bf18      	it	ne
 80a2e84:	3203      	addne	r2, #3
 80a2e86:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2e8a:	f1c2 0320 	rsb	r3, r2, #32
 80a2e8e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2e92:	fa20 f002 	lsr.w	r0, r0, r2
 80a2e96:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2e9a:	ea40 000e 	orr.w	r0, r0, lr
 80a2e9e:	fa21 f102 	lsr.w	r1, r1, r2
 80a2ea2:	4414      	add	r4, r2
 80a2ea4:	e6c1      	b.n	80a2c2a <__adddf3+0xe6>
 80a2ea6:	bf00      	nop

080a2ea8 <__gedf2>:
 80a2ea8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a2eac:	e006      	b.n	80a2ebc <__cmpdf2+0x4>
 80a2eae:	bf00      	nop

080a2eb0 <__ledf2>:
 80a2eb0:	f04f 0c01 	mov.w	ip, #1
 80a2eb4:	e002      	b.n	80a2ebc <__cmpdf2+0x4>
 80a2eb6:	bf00      	nop

080a2eb8 <__cmpdf2>:
 80a2eb8:	f04f 0c01 	mov.w	ip, #1
 80a2ebc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2ec0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2ec4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2ec8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2ecc:	bf18      	it	ne
 80a2ece:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2ed2:	d01b      	beq.n	80a2f0c <__cmpdf2+0x54>
 80a2ed4:	b001      	add	sp, #4
 80a2ed6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2eda:	bf0c      	ite	eq
 80a2edc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2ee0:	ea91 0f03 	teqne	r1, r3
 80a2ee4:	bf02      	ittt	eq
 80a2ee6:	ea90 0f02 	teqeq	r0, r2
 80a2eea:	2000      	moveq	r0, #0
 80a2eec:	4770      	bxeq	lr
 80a2eee:	f110 0f00 	cmn.w	r0, #0
 80a2ef2:	ea91 0f03 	teq	r1, r3
 80a2ef6:	bf58      	it	pl
 80a2ef8:	4299      	cmppl	r1, r3
 80a2efa:	bf08      	it	eq
 80a2efc:	4290      	cmpeq	r0, r2
 80a2efe:	bf2c      	ite	cs
 80a2f00:	17d8      	asrcs	r0, r3, #31
 80a2f02:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2f06:	f040 0001 	orr.w	r0, r0, #1
 80a2f0a:	4770      	bx	lr
 80a2f0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2f10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2f14:	d102      	bne.n	80a2f1c <__cmpdf2+0x64>
 80a2f16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2f1a:	d107      	bne.n	80a2f2c <__cmpdf2+0x74>
 80a2f1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2f20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2f24:	d1d6      	bne.n	80a2ed4 <__cmpdf2+0x1c>
 80a2f26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2f2a:	d0d3      	beq.n	80a2ed4 <__cmpdf2+0x1c>
 80a2f2c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2f30:	4770      	bx	lr
 80a2f32:	bf00      	nop

080a2f34 <__aeabi_cdrcmple>:
 80a2f34:	4684      	mov	ip, r0
 80a2f36:	4610      	mov	r0, r2
 80a2f38:	4662      	mov	r2, ip
 80a2f3a:	468c      	mov	ip, r1
 80a2f3c:	4619      	mov	r1, r3
 80a2f3e:	4663      	mov	r3, ip
 80a2f40:	e000      	b.n	80a2f44 <__aeabi_cdcmpeq>
 80a2f42:	bf00      	nop

080a2f44 <__aeabi_cdcmpeq>:
 80a2f44:	b501      	push	{r0, lr}
 80a2f46:	f7ff ffb7 	bl	80a2eb8 <__cmpdf2>
 80a2f4a:	2800      	cmp	r0, #0
 80a2f4c:	bf48      	it	mi
 80a2f4e:	f110 0f00 	cmnmi.w	r0, #0
 80a2f52:	bd01      	pop	{r0, pc}

080a2f54 <__aeabi_dcmpeq>:
 80a2f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2f58:	f7ff fff4 	bl	80a2f44 <__aeabi_cdcmpeq>
 80a2f5c:	bf0c      	ite	eq
 80a2f5e:	2001      	moveq	r0, #1
 80a2f60:	2000      	movne	r0, #0
 80a2f62:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2f66:	bf00      	nop

080a2f68 <__aeabi_dcmplt>:
 80a2f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2f6c:	f7ff ffea 	bl	80a2f44 <__aeabi_cdcmpeq>
 80a2f70:	bf34      	ite	cc
 80a2f72:	2001      	movcc	r0, #1
 80a2f74:	2000      	movcs	r0, #0
 80a2f76:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2f7a:	bf00      	nop

080a2f7c <__aeabi_dcmple>:
 80a2f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2f80:	f7ff ffe0 	bl	80a2f44 <__aeabi_cdcmpeq>
 80a2f84:	bf94      	ite	ls
 80a2f86:	2001      	movls	r0, #1
 80a2f88:	2000      	movhi	r0, #0
 80a2f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2f8e:	bf00      	nop

080a2f90 <__aeabi_dcmpge>:
 80a2f90:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2f94:	f7ff ffce 	bl	80a2f34 <__aeabi_cdrcmple>
 80a2f98:	bf94      	ite	ls
 80a2f9a:	2001      	movls	r0, #1
 80a2f9c:	2000      	movhi	r0, #0
 80a2f9e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2fa2:	bf00      	nop

080a2fa4 <__aeabi_dcmpgt>:
 80a2fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2fa8:	f7ff ffc4 	bl	80a2f34 <__aeabi_cdrcmple>
 80a2fac:	bf34      	ite	cc
 80a2fae:	2001      	movcc	r0, #1
 80a2fb0:	2000      	movcs	r0, #0
 80a2fb2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2fb6:	bf00      	nop

080a2fb8 <__aeabi_fmul>:
 80a2fb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2fbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2fc0:	bf1e      	ittt	ne
 80a2fc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2fc6:	ea92 0f0c 	teqne	r2, ip
 80a2fca:	ea93 0f0c 	teqne	r3, ip
 80a2fce:	d06f      	beq.n	80a30b0 <__aeabi_fmul+0xf8>
 80a2fd0:	441a      	add	r2, r3
 80a2fd2:	ea80 0c01 	eor.w	ip, r0, r1
 80a2fd6:	0240      	lsls	r0, r0, #9
 80a2fd8:	bf18      	it	ne
 80a2fda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a2fde:	d01e      	beq.n	80a301e <__aeabi_fmul+0x66>
 80a2fe0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2fe4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2fe8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2fec:	fba0 3101 	umull	r3, r1, r0, r1
 80a2ff0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2ff4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2ff8:	bf3e      	ittt	cc
 80a2ffa:	0049      	lslcc	r1, r1, #1
 80a2ffc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3000:	005b      	lslcc	r3, r3, #1
 80a3002:	ea40 0001 	orr.w	r0, r0, r1
 80a3006:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a300a:	2afd      	cmp	r2, #253	; 0xfd
 80a300c:	d81d      	bhi.n	80a304a <__aeabi_fmul+0x92>
 80a300e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a3012:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3016:	bf08      	it	eq
 80a3018:	f020 0001 	biceq.w	r0, r0, #1
 80a301c:	4770      	bx	lr
 80a301e:	f090 0f00 	teq	r0, #0
 80a3022:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3026:	bf08      	it	eq
 80a3028:	0249      	lsleq	r1, r1, #9
 80a302a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a302e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a3032:	3a7f      	subs	r2, #127	; 0x7f
 80a3034:	bfc2      	ittt	gt
 80a3036:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a303a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a303e:	4770      	bxgt	lr
 80a3040:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3044:	f04f 0300 	mov.w	r3, #0
 80a3048:	3a01      	subs	r2, #1
 80a304a:	dc5d      	bgt.n	80a3108 <__aeabi_fmul+0x150>
 80a304c:	f112 0f19 	cmn.w	r2, #25
 80a3050:	bfdc      	itt	le
 80a3052:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a3056:	4770      	bxle	lr
 80a3058:	f1c2 0200 	rsb	r2, r2, #0
 80a305c:	0041      	lsls	r1, r0, #1
 80a305e:	fa21 f102 	lsr.w	r1, r1, r2
 80a3062:	f1c2 0220 	rsb	r2, r2, #32
 80a3066:	fa00 fc02 	lsl.w	ip, r0, r2
 80a306a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a306e:	f140 0000 	adc.w	r0, r0, #0
 80a3072:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a3076:	bf08      	it	eq
 80a3078:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a307c:	4770      	bx	lr
 80a307e:	f092 0f00 	teq	r2, #0
 80a3082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3086:	bf02      	ittt	eq
 80a3088:	0040      	lsleq	r0, r0, #1
 80a308a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a308e:	3a01      	subeq	r2, #1
 80a3090:	d0f9      	beq.n	80a3086 <__aeabi_fmul+0xce>
 80a3092:	ea40 000c 	orr.w	r0, r0, ip
 80a3096:	f093 0f00 	teq	r3, #0
 80a309a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a309e:	bf02      	ittt	eq
 80a30a0:	0049      	lsleq	r1, r1, #1
 80a30a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a30a6:	3b01      	subeq	r3, #1
 80a30a8:	d0f9      	beq.n	80a309e <__aeabi_fmul+0xe6>
 80a30aa:	ea41 010c 	orr.w	r1, r1, ip
 80a30ae:	e78f      	b.n	80a2fd0 <__aeabi_fmul+0x18>
 80a30b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a30b4:	ea92 0f0c 	teq	r2, ip
 80a30b8:	bf18      	it	ne
 80a30ba:	ea93 0f0c 	teqne	r3, ip
 80a30be:	d00a      	beq.n	80a30d6 <__aeabi_fmul+0x11e>
 80a30c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a30c4:	bf18      	it	ne
 80a30c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a30ca:	d1d8      	bne.n	80a307e <__aeabi_fmul+0xc6>
 80a30cc:	ea80 0001 	eor.w	r0, r0, r1
 80a30d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a30d4:	4770      	bx	lr
 80a30d6:	f090 0f00 	teq	r0, #0
 80a30da:	bf17      	itett	ne
 80a30dc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a30e0:	4608      	moveq	r0, r1
 80a30e2:	f091 0f00 	teqne	r1, #0
 80a30e6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a30ea:	d014      	beq.n	80a3116 <__aeabi_fmul+0x15e>
 80a30ec:	ea92 0f0c 	teq	r2, ip
 80a30f0:	d101      	bne.n	80a30f6 <__aeabi_fmul+0x13e>
 80a30f2:	0242      	lsls	r2, r0, #9
 80a30f4:	d10f      	bne.n	80a3116 <__aeabi_fmul+0x15e>
 80a30f6:	ea93 0f0c 	teq	r3, ip
 80a30fa:	d103      	bne.n	80a3104 <__aeabi_fmul+0x14c>
 80a30fc:	024b      	lsls	r3, r1, #9
 80a30fe:	bf18      	it	ne
 80a3100:	4608      	movne	r0, r1
 80a3102:	d108      	bne.n	80a3116 <__aeabi_fmul+0x15e>
 80a3104:	ea80 0001 	eor.w	r0, r0, r1
 80a3108:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a310c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3110:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3114:	4770      	bx	lr
 80a3116:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a311a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a311e:	4770      	bx	lr

080a3120 <__aeabi_fdiv>:
 80a3120:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3124:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3128:	bf1e      	ittt	ne
 80a312a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a312e:	ea92 0f0c 	teqne	r2, ip
 80a3132:	ea93 0f0c 	teqne	r3, ip
 80a3136:	d069      	beq.n	80a320c <__aeabi_fdiv+0xec>
 80a3138:	eba2 0203 	sub.w	r2, r2, r3
 80a313c:	ea80 0c01 	eor.w	ip, r0, r1
 80a3140:	0249      	lsls	r1, r1, #9
 80a3142:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a3146:	d037      	beq.n	80a31b8 <__aeabi_fdiv+0x98>
 80a3148:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a314c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a3150:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a3154:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3158:	428b      	cmp	r3, r1
 80a315a:	bf38      	it	cc
 80a315c:	005b      	lslcc	r3, r3, #1
 80a315e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a3162:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a3166:	428b      	cmp	r3, r1
 80a3168:	bf24      	itt	cs
 80a316a:	1a5b      	subcs	r3, r3, r1
 80a316c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3170:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a3174:	bf24      	itt	cs
 80a3176:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a317a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a317e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a3182:	bf24      	itt	cs
 80a3184:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a3188:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a318c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a3190:	bf24      	itt	cs
 80a3192:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a3196:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a319a:	011b      	lsls	r3, r3, #4
 80a319c:	bf18      	it	ne
 80a319e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a31a2:	d1e0      	bne.n	80a3166 <__aeabi_fdiv+0x46>
 80a31a4:	2afd      	cmp	r2, #253	; 0xfd
 80a31a6:	f63f af50 	bhi.w	80a304a <__aeabi_fmul+0x92>
 80a31aa:	428b      	cmp	r3, r1
 80a31ac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a31b0:	bf08      	it	eq
 80a31b2:	f020 0001 	biceq.w	r0, r0, #1
 80a31b6:	4770      	bx	lr
 80a31b8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a31bc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a31c0:	327f      	adds	r2, #127	; 0x7f
 80a31c2:	bfc2      	ittt	gt
 80a31c4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a31c8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a31cc:	4770      	bxgt	lr
 80a31ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a31d2:	f04f 0300 	mov.w	r3, #0
 80a31d6:	3a01      	subs	r2, #1
 80a31d8:	e737      	b.n	80a304a <__aeabi_fmul+0x92>
 80a31da:	f092 0f00 	teq	r2, #0
 80a31de:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a31e2:	bf02      	ittt	eq
 80a31e4:	0040      	lsleq	r0, r0, #1
 80a31e6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a31ea:	3a01      	subeq	r2, #1
 80a31ec:	d0f9      	beq.n	80a31e2 <__aeabi_fdiv+0xc2>
 80a31ee:	ea40 000c 	orr.w	r0, r0, ip
 80a31f2:	f093 0f00 	teq	r3, #0
 80a31f6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a31fa:	bf02      	ittt	eq
 80a31fc:	0049      	lsleq	r1, r1, #1
 80a31fe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3202:	3b01      	subeq	r3, #1
 80a3204:	d0f9      	beq.n	80a31fa <__aeabi_fdiv+0xda>
 80a3206:	ea41 010c 	orr.w	r1, r1, ip
 80a320a:	e795      	b.n	80a3138 <__aeabi_fdiv+0x18>
 80a320c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3210:	ea92 0f0c 	teq	r2, ip
 80a3214:	d108      	bne.n	80a3228 <__aeabi_fdiv+0x108>
 80a3216:	0242      	lsls	r2, r0, #9
 80a3218:	f47f af7d 	bne.w	80a3116 <__aeabi_fmul+0x15e>
 80a321c:	ea93 0f0c 	teq	r3, ip
 80a3220:	f47f af70 	bne.w	80a3104 <__aeabi_fmul+0x14c>
 80a3224:	4608      	mov	r0, r1
 80a3226:	e776      	b.n	80a3116 <__aeabi_fmul+0x15e>
 80a3228:	ea93 0f0c 	teq	r3, ip
 80a322c:	d104      	bne.n	80a3238 <__aeabi_fdiv+0x118>
 80a322e:	024b      	lsls	r3, r1, #9
 80a3230:	f43f af4c 	beq.w	80a30cc <__aeabi_fmul+0x114>
 80a3234:	4608      	mov	r0, r1
 80a3236:	e76e      	b.n	80a3116 <__aeabi_fmul+0x15e>
 80a3238:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a323c:	bf18      	it	ne
 80a323e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3242:	d1ca      	bne.n	80a31da <__aeabi_fdiv+0xba>
 80a3244:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3248:	f47f af5c 	bne.w	80a3104 <__aeabi_fmul+0x14c>
 80a324c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a3250:	f47f af3c 	bne.w	80a30cc <__aeabi_fmul+0x114>
 80a3254:	e75f      	b.n	80a3116 <__aeabi_fmul+0x15e>
 80a3256:	bf00      	nop

080a3258 <__gesf2>:
 80a3258:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a325c:	e006      	b.n	80a326c <__cmpsf2+0x4>
 80a325e:	bf00      	nop

080a3260 <__lesf2>:
 80a3260:	f04f 0c01 	mov.w	ip, #1
 80a3264:	e002      	b.n	80a326c <__cmpsf2+0x4>
 80a3266:	bf00      	nop

080a3268 <__cmpsf2>:
 80a3268:	f04f 0c01 	mov.w	ip, #1
 80a326c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3270:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a3274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a327c:	bf18      	it	ne
 80a327e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3282:	d011      	beq.n	80a32a8 <__cmpsf2+0x40>
 80a3284:	b001      	add	sp, #4
 80a3286:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a328a:	bf18      	it	ne
 80a328c:	ea90 0f01 	teqne	r0, r1
 80a3290:	bf58      	it	pl
 80a3292:	ebb2 0003 	subspl.w	r0, r2, r3
 80a3296:	bf88      	it	hi
 80a3298:	17c8      	asrhi	r0, r1, #31
 80a329a:	bf38      	it	cc
 80a329c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a32a0:	bf18      	it	ne
 80a32a2:	f040 0001 	orrne.w	r0, r0, #1
 80a32a6:	4770      	bx	lr
 80a32a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a32ac:	d102      	bne.n	80a32b4 <__cmpsf2+0x4c>
 80a32ae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a32b2:	d105      	bne.n	80a32c0 <__cmpsf2+0x58>
 80a32b4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a32b8:	d1e4      	bne.n	80a3284 <__cmpsf2+0x1c>
 80a32ba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a32be:	d0e1      	beq.n	80a3284 <__cmpsf2+0x1c>
 80a32c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a32c4:	4770      	bx	lr
 80a32c6:	bf00      	nop

080a32c8 <__aeabi_cfrcmple>:
 80a32c8:	4684      	mov	ip, r0
 80a32ca:	4608      	mov	r0, r1
 80a32cc:	4661      	mov	r1, ip
 80a32ce:	e7ff      	b.n	80a32d0 <__aeabi_cfcmpeq>

080a32d0 <__aeabi_cfcmpeq>:
 80a32d0:	b50f      	push	{r0, r1, r2, r3, lr}
 80a32d2:	f7ff ffc9 	bl	80a3268 <__cmpsf2>
 80a32d6:	2800      	cmp	r0, #0
 80a32d8:	bf48      	it	mi
 80a32da:	f110 0f00 	cmnmi.w	r0, #0
 80a32de:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a32e0 <__aeabi_fcmpeq>:
 80a32e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a32e4:	f7ff fff4 	bl	80a32d0 <__aeabi_cfcmpeq>
 80a32e8:	bf0c      	ite	eq
 80a32ea:	2001      	moveq	r0, #1
 80a32ec:	2000      	movne	r0, #0
 80a32ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80a32f2:	bf00      	nop

080a32f4 <__aeabi_fcmplt>:
 80a32f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a32f8:	f7ff ffea 	bl	80a32d0 <__aeabi_cfcmpeq>
 80a32fc:	bf34      	ite	cc
 80a32fe:	2001      	movcc	r0, #1
 80a3300:	2000      	movcs	r0, #0
 80a3302:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3306:	bf00      	nop

080a3308 <__aeabi_fcmple>:
 80a3308:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a330c:	f7ff ffe0 	bl	80a32d0 <__aeabi_cfcmpeq>
 80a3310:	bf94      	ite	ls
 80a3312:	2001      	movls	r0, #1
 80a3314:	2000      	movhi	r0, #0
 80a3316:	f85d fb08 	ldr.w	pc, [sp], #8
 80a331a:	bf00      	nop

080a331c <__aeabi_fcmpge>:
 80a331c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3320:	f7ff ffd2 	bl	80a32c8 <__aeabi_cfrcmple>
 80a3324:	bf94      	ite	ls
 80a3326:	2001      	movls	r0, #1
 80a3328:	2000      	movhi	r0, #0
 80a332a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a332e:	bf00      	nop

080a3330 <__aeabi_fcmpgt>:
 80a3330:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3334:	f7ff ffc8 	bl	80a32c8 <__aeabi_cfrcmple>
 80a3338:	bf34      	ite	cc
 80a333a:	2001      	movcc	r0, #1
 80a333c:	2000      	movcs	r0, #0
 80a333e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3342:	bf00      	nop

080a3344 <__aeabi_f2uiz>:
 80a3344:	0042      	lsls	r2, r0, #1
 80a3346:	d20e      	bcs.n	80a3366 <__aeabi_f2uiz+0x22>
 80a3348:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a334c:	d30b      	bcc.n	80a3366 <__aeabi_f2uiz+0x22>
 80a334e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a3352:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a3356:	d409      	bmi.n	80a336c <__aeabi_f2uiz+0x28>
 80a3358:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a335c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3360:	fa23 f002 	lsr.w	r0, r3, r2
 80a3364:	4770      	bx	lr
 80a3366:	f04f 0000 	mov.w	r0, #0
 80a336a:	4770      	bx	lr
 80a336c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a3370:	d101      	bne.n	80a3376 <__aeabi_f2uiz+0x32>
 80a3372:	0242      	lsls	r2, r0, #9
 80a3374:	d102      	bne.n	80a337c <__aeabi_f2uiz+0x38>
 80a3376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a337a:	4770      	bx	lr
 80a337c:	f04f 0000 	mov.w	r0, #0
 80a3380:	4770      	bx	lr
 80a3382:	bf00      	nop

080a3384 <__cxa_atexit>:
 80a3384:	b538      	push	{r3, r4, r5, lr}
 80a3386:	4605      	mov	r5, r0
 80a3388:	4804      	ldr	r0, [pc, #16]	; (80a339c <__cxa_atexit+0x18>)
 80a338a:	460c      	mov	r4, r1
 80a338c:	4613      	mov	r3, r2
 80a338e:	b120      	cbz	r0, 80a339a <__cxa_atexit+0x16>
 80a3390:	2002      	movs	r0, #2
 80a3392:	4629      	mov	r1, r5
 80a3394:	4622      	mov	r2, r4
 80a3396:	f3af 8000 	nop.w
 80a339a:	bd38      	pop	{r3, r4, r5, pc}
 80a339c:	00000000 	.word	0x00000000

080a33a0 <memcpy>:
 80a33a0:	b510      	push	{r4, lr}
 80a33a2:	1e43      	subs	r3, r0, #1
 80a33a4:	440a      	add	r2, r1
 80a33a6:	4291      	cmp	r1, r2
 80a33a8:	d004      	beq.n	80a33b4 <memcpy+0x14>
 80a33aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a33ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a33b2:	e7f8      	b.n	80a33a6 <memcpy+0x6>
 80a33b4:	bd10      	pop	{r4, pc}

080a33b6 <memset>:
 80a33b6:	4603      	mov	r3, r0
 80a33b8:	4402      	add	r2, r0
 80a33ba:	4293      	cmp	r3, r2
 80a33bc:	d002      	beq.n	80a33c4 <memset+0xe>
 80a33be:	f803 1b01 	strb.w	r1, [r3], #1
 80a33c2:	e7fa      	b.n	80a33ba <memset+0x4>
 80a33c4:	4770      	bx	lr

080a33c6 <strlen>:
 80a33c6:	4603      	mov	r3, r0
 80a33c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a33cc:	2a00      	cmp	r2, #0
 80a33ce:	d1fb      	bne.n	80a33c8 <strlen+0x2>
 80a33d0:	1a18      	subs	r0, r3, r0
 80a33d2:	3801      	subs	r0, #1
 80a33d4:	4770      	bx	lr

080a33d6 <link_code_end>:
	...

080a33d8 <dynalib_user>:
 80a33d8:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
	...

080a33f0 <_ZTV9LIS3DHI2C>:
	...
 80a33f8:	00af 080a 00b1 080a 0105 080a 00bd 080a     ................
 80a3408:	6564 6976 6563 6e20 746f 6620 756f 646e     device not found
 80a3418:	7200 7365 7465 6974 676e 6c20 7361 4d74     .resetting lastM
 80a3428:	766f 6d65 6e65 2074 6e69 3174 735f 6372     ovement int1_src
 80a3438:	303d 2578 0078 6572 6163 696c 7262 7461     =0x%x.recalibrat
 80a3448:	6e69 0067 6573 7574 5370 6375 6563 7373     ing.setupSuccess
 80a3458:	253d 0064 6572 6f6d 6574 7320 6174 7574     =%d.remote statu
 80a3468:	3a73 2000 207c 7300 6e65 6f73 2072 3a30     s:. | .sensor 0:
 80a3478:	7300 6e65 6f73 2072 3a31 7300 6e65 6f73     .sensor 1:.senso
 80a3488:	2072 3a32 7300 6e65 6f73 2072 3a33 6600     r 2:.sensor 3:.f
 80a3498:	6f72 746e 6c20 6665 3a74 6600 6f72 746e     ront left:.front
 80a34a8:	7220 6769 7468 003a 6162 6b63 6c20 6665      right:.back lef
 80a34b8:	3a74 6200 6361 206b 6972 6867 3a74 2500     t:.back right:.%
 80a34c8:	2c64 6425 252c 0064 6f6e 7320 6d61 6c70     d,%d,%d.no sampl
 80a34d8:	0065 5320 4e45 4f53 2052 4954 454d 554f     e. SENSOR TIMEOU
 80a34e8:	0054 6157 7469 6e69 2067 6f66 2072 7453     T.Waiting for St
 80a34f8:	7261 0074 7453 7261 6974 676e 6920 206e     art.Starting in 
 80a3508:	2035 6573 6f63 646e 2e73 2e2e 4700 214f     5 seconds....GO!
 80a3518:	5300 6f74 7070 6465 4d00 766f 6e69 0067     .Stopped.Moving.

080a3528 <_ZTV7TwoWire>:
	...
 80a3530:	1cf1 080a 1d3b 080a 1d13 080a 1cf3 080a     ....;...........
 80a3540:	1d1b 080a 1d23 080a 1d2b 080a 1d33 080a     ....#...+...3...

080a3550 <_ZTV9IPAddress>:
	...
 80a3558:	1e1f 080a 1e11 080a 1e13 080a 0000 0000     ................
 80a3568:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
 80a3578:	6961 006c 0a0d 2500 3130 7530 0020 205d     ail....%010u .] 
 80a3588:	2c00 0020 2928 203a 2000 005b 6f63 6564     ., .(): . [.code
 80a3598:	3d20 0020 6925 6400 7465 6961 736c 3d20      = .%i.details =
 80a35a8:	0020 6162 6475 5300 7265 6169 006c 5355      .baud.Serial.US
 80a35b8:	5342 7265 6169 316c 7400 7079 0065 6170     BSerial1.type.pa
 80a35c8:	6172 006d 6d63 0064 6469 6800 646e 7300     ram.cmd.id.hnd.s
 80a35d8:	7274 006d 6966 746c 6c00 6c76 6100 6464     trm.filt.lvl.add
 80a35e8:	6148 646e 656c 0072 6572 6f6d 6576 6148     Handler.removeHa
 80a35f8:	646e 656c 0072 6e65 6d75 6148 646e 656c     ndler.enumHandle
 80a3608:	7372 4a00 4f53 534e 7274 6165 4c6d 676f     rs.JSONStreamLog
 80a3618:	6148 646e 656c 0072 7061 0070 6f6e 656e     Handler.app.none
 80a3628:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
 80a3638:	6500 7272 726f 7000 6e61 6369 6100 6c6c     .error.panic.all
	...

080a3650 <_ZTV8SPIClass>:
	...
 80a3658:	2171 080a 2173 080a 005a 2b25 3330 3a64     q!..s!..Z.%+03d:
 80a3668:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a3678:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
	...

080a3690 <_ZTV11USARTSerial>:
	...
 80a3698:	2365 080a 2389 080a 2395 080a 1ed5 080a     e#...#...#......
 80a36a8:	2371 080a 237d 080a 2377 080a 2383 080a     q#..}#..w#...#..
 80a36b8:	2367 080a 236b 080a                         g#..k#..

080a36c0 <_ZTV9USBSerial>:
	...
 80a36c8:	24b5 080a 24f9 080a 24d3 080a 1ed5 080a     .$...$...$......
 80a36d8:	24cd 080a 24b7 080a 24bf 080a 24f3 080a     .$...$...$...$..
 80a36e8:	24c7 080a 24b1 080a                         .$...$..

080a36f0 <_ZTVN5spark9WiFiClassE>:
	...
 80a36f8:	2627 080a 0000 0000                         '&......

080a3700 <link_const_variable_data_end>:
 80a3700:	080a02f5 	.word	0x080a02f5
 80a3704:	080a0f05 	.word	0x080a0f05
 80a3708:	080a1809 	.word	0x080a1809
 80a370c:	080a1c01 	.word	0x080a1c01
 80a3710:	080a1c3d 	.word	0x080a1c3d
 80a3714:	080a1c79 	.word	0x080a1c79
 80a3718:	080a1cb5 	.word	0x080a1cb5
 80a371c:	080a1e89 	.word	0x080a1e89
 80a3720:	080a1e99 	.word	0x080a1e99
 80a3724:	080a2135 	.word	0x080a2135
 80a3728:	080a21b1 	.word	0x080a21b1
 80a372c:	080a21ed 	.word	0x080a21ed
 80a3730:	080a2229 	.word	0x080a2229
 80a3734:	080a2265 	.word	0x080a2265
 80a3738:	080a22a1 	.word	0x080a22a1
 80a373c:	080a22ed 	.word	0x080a22ed
 80a3740:	080a2329 	.word	0x080a2329
 80a3744:	080a2439 	.word	0x080a2439
 80a3748:	080a2475 	.word	0x080a2475
 80a374c:	080a2631 	.word	0x080a2631
 80a3750:	080a2845 	.word	0x080a2845
 80a3754:	080a2881 	.word	0x080a2881
 80a3758:	080a28fd 	.word	0x080a28fd
 80a375c:	080a292d 	.word	0x080a292d
 80a3760:	080a29b1 	.word	0x080a29b1
 80a3764:	080a2a75 	.word	0x080a2a75

080a3768 <link_constructors_end>:
	...
