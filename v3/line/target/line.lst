
C:/src/battlebots-sumo/v3/line/target/line.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003298  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a32b0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000058  20000300  080a32b4  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000061c  20000358  20000358  00030358  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a330c  080a330c  0002330c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a3334  080a3334  00023334  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00086c75  00000000  00000000  00023338  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000e0da  00000000  00000000  000a9fad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000f183  00000000  00000000  000b8087  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001930  00000000  00000000  000c720a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002580  00000000  00000000  000c8b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00022dd2  00000000  00000000  000cb0ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001f9c4  00000000  00000000  000ede8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000847f9  00000000  00000000  0010d850  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000a534  00000000  00000000  0019204c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	a0 2f 0a 08                                         ./..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 ff9b 	bl	80a2f68 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 ffa0 	bl	80a2f7e <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a32b4 	.word	0x080a32b4
 80a004c:	20000358 	.word	0x20000358
 80a0050:	20000358 	.word	0x20000358
 80a0054:	20000974 	.word	0x20000974
 80a0058:	20000974 	.word	0x20000974

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 ff1d 	bl	80a1e9c <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a3274 	.word	0x080a3274
 80a0084:	080a32a8 	.word	0x080a32a8

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bb66 	b.w	80a0758 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fc09 	bl	80a08a4 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bebf 	b.w	80a1e18 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f001 bd17 	b.w	80a1acc <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <_Z5FLISRv>:
// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
unsigned long lastPrintSample = 0;

void FLISR() {
 80a00b0:	b508      	push	{r3, lr}
    FLflag = digitalRead(FL);
 80a00b2:	4b05      	ldr	r3, [pc, #20]	; (80a00c8 <_Z5FLISRv+0x18>)
 80a00b4:	8818      	ldrh	r0, [r3, #0]
 80a00b6:	f002 f967 	bl	80a2388 <digitalRead>
 80a00ba:	4b04      	ldr	r3, [pc, #16]	; (80a00cc <_Z5FLISRv+0x1c>)
 80a00bc:	3000      	adds	r0, #0
 80a00be:	bf18      	it	ne
 80a00c0:	2001      	movne	r0, #1
 80a00c2:	7018      	strb	r0, [r3, #0]
 80a00c4:	bd08      	pop	{r3, pc}
 80a00c6:	bf00      	nop
 80a00c8:	20000338 	.word	0x20000338
 80a00cc:	20000379 	.word	0x20000379

080a00d0 <_Z5FRISRv>:
}

void FRISR() {
 80a00d0:	b508      	push	{r3, lr}
    FRflag = digitalRead(FR);
 80a00d2:	4b05      	ldr	r3, [pc, #20]	; (80a00e8 <_Z5FRISRv+0x18>)
 80a00d4:	8818      	ldrh	r0, [r3, #0]
 80a00d6:	f002 f957 	bl	80a2388 <digitalRead>
 80a00da:	4b04      	ldr	r3, [pc, #16]	; (80a00ec <_Z5FRISRv+0x1c>)
 80a00dc:	3000      	adds	r0, #0
 80a00de:	bf18      	it	ne
 80a00e0:	2001      	movne	r0, #1
 80a00e2:	7018      	strb	r0, [r3, #0]
 80a00e4:	bd08      	pop	{r3, pc}
 80a00e6:	bf00      	nop
 80a00e8:	20000310 	.word	0x20000310
 80a00ec:	200003f1 	.word	0x200003f1

080a00f0 <_Z5BLISRv>:
}

void BLISR() {
 80a00f0:	b508      	push	{r3, lr}
    BLflag = digitalRead(BL);
 80a00f2:	4b05      	ldr	r3, [pc, #20]	; (80a0108 <_Z5BLISRv+0x18>)
 80a00f4:	8818      	ldrh	r0, [r3, #0]
 80a00f6:	f002 f947 	bl	80a2388 <digitalRead>
 80a00fa:	4b04      	ldr	r3, [pc, #16]	; (80a010c <_Z5BLISRv+0x1c>)
 80a00fc:	3000      	adds	r0, #0
 80a00fe:	bf18      	it	ne
 80a0100:	2001      	movne	r0, #1
 80a0102:	7018      	strb	r0, [r3, #0]
 80a0104:	bd08      	pop	{r3, pc}
 80a0106:	bf00      	nop
 80a0108:	20000330 	.word	0x20000330
 80a010c:	2000040e 	.word	0x2000040e

080a0110 <_Z5BRISRv>:
}

void BRISR() {
 80a0110:	b508      	push	{r3, lr}
    BRflag = digitalRead(BR);
 80a0112:	4b05      	ldr	r3, [pc, #20]	; (80a0128 <_Z5BRISRv+0x18>)
 80a0114:	8818      	ldrh	r0, [r3, #0]
 80a0116:	f002 f937 	bl	80a2388 <digitalRead>
 80a011a:	4b04      	ldr	r3, [pc, #16]	; (80a012c <_Z5BRISRv+0x1c>)
 80a011c:	3000      	adds	r0, #0
 80a011e:	bf18      	it	ne
 80a0120:	2001      	movne	r0, #1
 80a0122:	7018      	strb	r0, [r3, #0]
 80a0124:	bd08      	pop	{r3, pc}
 80a0126:	bf00      	nop
 80a0128:	20000334 	.word	0x20000334
 80a012c:	200003a4 	.word	0x200003a4

080a0130 <_Z5RSISRv>:
}

void RSISR() {
 80a0130:	b508      	push	{r3, lr}
    RSflag = digitalRead(RS);
 80a0132:	4b05      	ldr	r3, [pc, #20]	; (80a0148 <_Z5RSISRv+0x18>)
 80a0134:	8818      	ldrh	r0, [r3, #0]
 80a0136:	f002 f927 	bl	80a2388 <digitalRead>
 80a013a:	4b04      	ldr	r3, [pc, #16]	; (80a014c <_Z5RSISRv+0x1c>)
 80a013c:	3000      	adds	r0, #0
 80a013e:	bf18      	it	ne
 80a0140:	2001      	movne	r0, #1
 80a0142:	7018      	strb	r0, [r3, #0]
 80a0144:	bd08      	pop	{r3, pc}
 80a0146:	bf00      	nop
 80a0148:	20000300 	.word	0x20000300
 80a014c:	200003f0 	.word	0x200003f0

080a0150 <_Z8tof_initv>:
}

void tof_init() {
 80a0150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pinMode(A0, OUTPUT);
 80a0154:	2101      	movs	r1, #1
 80a0156:	200a      	movs	r0, #10
 80a0158:	f002 f8ec 	bl	80a2334 <pinMode>
    pinMode(A1, OUTPUT);
 80a015c:	2101      	movs	r1, #1
 80a015e:	200b      	movs	r0, #11
 80a0160:	f002 f8e8 	bl	80a2334 <pinMode>
    pinMode(A2, OUTPUT);
 80a0164:	2101      	movs	r1, #1
 80a0166:	200c      	movs	r0, #12
 80a0168:	f002 f8e4 	bl	80a2334 <pinMode>
    pinMode(A3, OUTPUT);
 80a016c:	2101      	movs	r1, #1
 80a016e:	200d      	movs	r0, #13
 80a0170:	f002 f8e0 	bl	80a2334 <pinMode>
    digitalWrite(A0, LOW);
 80a0174:	2100      	movs	r1, #0
 80a0176:	200a      	movs	r0, #10
 80a0178:	f002 f8ed 	bl	80a2356 <digitalWrite>
    digitalWrite(A1, LOW);
 80a017c:	2100      	movs	r1, #0
 80a017e:	200b      	movs	r0, #11
 80a0180:	f002 f8e9 	bl	80a2356 <digitalWrite>
    digitalWrite(A2, LOW);
 80a0184:	2100      	movs	r1, #0
 80a0186:	200c      	movs	r0, #12
 80a0188:	f002 f8e5 	bl	80a2356 <digitalWrite>
    digitalWrite(A3, LOW);
 80a018c:	2100      	movs	r1, #0
 80a018e:	200d      	movs	r0, #13
 80a0190:	f002 f8e1 	bl	80a2356 <digitalWrite>
    delay(500);
 80a0194:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0198:	f001 fe08 	bl	80a1dac <delay>

    Wire.setSpeed(CLOCK_SPEED_100KHZ);  // need to initialize i2c protocol after driving shdn pins low
 80a019c:	f002 f942 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a01a0:	4940      	ldr	r1, [pc, #256]	; (80a02a4 <_Z8tof_initv+0x154>)
 80a01a2:	f002 f863 	bl	80a226c <_ZN7TwoWire8setSpeedEm>
    Wire.begin();
 80a01a6:	f002 f93d 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a01aa:	f002 f863 	bl	80a2274 <_ZN7TwoWire5beginEv>

    delay(10);
 80a01ae:	200a      	movs	r0, #10
 80a01b0:	f001 fdfc 	bl	80a1dac <delay>
    digitalWrite(A0, HIGH);
 80a01b4:	2101      	movs	r1, #1
 80a01b6:	200a      	movs	r0, #10
 80a01b8:	f002 f8cd 	bl	80a2356 <digitalWrite>
    digitalWrite(A1, HIGH);
 80a01bc:	2101      	movs	r1, #1
 80a01be:	200b      	movs	r0, #11
 80a01c0:	f002 f8c9 	bl	80a2356 <digitalWrite>
    digitalWrite(A2, HIGH);
 80a01c4:	2101      	movs	r1, #1
 80a01c6:	200c      	movs	r0, #12
 80a01c8:	f002 f8c5 	bl	80a2356 <digitalWrite>
    digitalWrite(A3, HIGH);
 80a01cc:	2101      	movs	r1, #1
 80a01ce:	200d      	movs	r0, #13
 80a01d0:	f002 f8c1 	bl	80a2356 <digitalWrite>
    delay(10);
 80a01d4:	200a      	movs	r0, #10
 80a01d6:	f001 fde9 	bl	80a1dac <delay>
    digitalWrite(A1, LOW);
 80a01da:	2100      	movs	r1, #0
 80a01dc:	200b      	movs	r0, #11
 80a01de:	f002 f8ba 	bl	80a2356 <digitalWrite>
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
 80a01e2:	4f31      	ldr	r7, [pc, #196]	; (80a02a8 <_Z8tof_initv+0x158>)
    digitalWrite(A1, HIGH);
    digitalWrite(A2, HIGH);
    digitalWrite(A3, HIGH);
    delay(10);
    digitalWrite(A1, LOW);
    digitalWrite(A2, LOW);
 80a01e4:	2100      	movs	r1, #0
 80a01e6:	200c      	movs	r0, #12
 80a01e8:	f002 f8b5 	bl	80a2356 <digitalWrite>
    digitalWrite(A3, LOW);
 80a01ec:	2100      	movs	r1, #0
 80a01ee:	200d      	movs	r0, #13
 80a01f0:	f002 f8b1 	bl	80a2356 <digitalWrite>
    sensor0.init();
 80a01f4:	2101      	movs	r1, #1
 80a01f6:	4638      	mov	r0, r7
 80a01f8:	f000 ff3c 	bl	80a1074 <_ZN7VL53L0X4initEb>
    void startContinuous(uint32_t period_ms = 0);
    void stopContinuous(void);
    uint16_t readRangeContinuousMillimeters(void);
    uint16_t readRangeSingleMillimeters(void);

    inline void setTimeout(uint16_t timeout) { io_timeout = timeout; }
 80a01fc:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    sensor0.setAddress(0x30);
 80a0200:	2130      	movs	r1, #48	; 0x30
 80a0202:	4638      	mov	r0, r7
 80a0204:	f000 fbe5 	bl	80a09d2 <_ZN7VL53L0X10setAddressEh>
    sensor0.setTimeout(1000);
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
 80a0208:	4e28      	ldr	r6, [pc, #160]	; (80a02ac <_Z8tof_initv+0x15c>)
 80a020a:	f8c7 8004 	str.w	r8, [r7, #4]
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
    sensor0.setAddress(0x30);
    sensor0.setTimeout(1000);
    delay(10);
 80a020e:	200a      	movs	r0, #10
 80a0210:	f001 fdcc 	bl	80a1dac <delay>
    digitalWrite(A1, HIGH);
 80a0214:	2101      	movs	r1, #1
 80a0216:	200b      	movs	r0, #11
 80a0218:	f002 f89d 	bl	80a2356 <digitalWrite>
    sensor1.init();
 80a021c:	2101      	movs	r1, #1
 80a021e:	4630      	mov	r0, r6
 80a0220:	f000 ff28 	bl	80a1074 <_ZN7VL53L0X4initEb>
    sensor1.setAddress(0x31);
 80a0224:	2131      	movs	r1, #49	; 0x31
 80a0226:	4630      	mov	r0, r6
 80a0228:	f000 fbd3 	bl	80a09d2 <_ZN7VL53L0X10setAddressEh>
    sensor1.setTimeout(1000);
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
 80a022c:	4d20      	ldr	r5, [pc, #128]	; (80a02b0 <_Z8tof_initv+0x160>)
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
    sensor1.setAddress(0x31);
    sensor1.setTimeout(1000);
    delay(10);
 80a022e:	200a      	movs	r0, #10
 80a0230:	f8c6 8004 	str.w	r8, [r6, #4]
 80a0234:	f001 fdba 	bl	80a1dac <delay>
    digitalWrite(A2, HIGH);
 80a0238:	2101      	movs	r1, #1
 80a023a:	200c      	movs	r0, #12
 80a023c:	f002 f88b 	bl	80a2356 <digitalWrite>
    sensor2.init();
 80a0240:	2101      	movs	r1, #1
 80a0242:	4628      	mov	r0, r5
 80a0244:	f000 ff16 	bl	80a1074 <_ZN7VL53L0X4initEb>
    sensor2.setAddress(0x32);
 80a0248:	2132      	movs	r1, #50	; 0x32
 80a024a:	4628      	mov	r0, r5
 80a024c:	f000 fbc1 	bl	80a09d2 <_ZN7VL53L0X10setAddressEh>
    sensor2.setTimeout(1000);
    delay(10);
    digitalWrite(A3, HIGH);
    sensor3.init();
 80a0250:	4c18      	ldr	r4, [pc, #96]	; (80a02b4 <_Z8tof_initv+0x164>)
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
    sensor2.setAddress(0x32);
    sensor2.setTimeout(1000);
    delay(10);
 80a0252:	200a      	movs	r0, #10
 80a0254:	f8c5 8004 	str.w	r8, [r5, #4]
 80a0258:	f001 fda8 	bl	80a1dac <delay>
    digitalWrite(A3, HIGH);
 80a025c:	2101      	movs	r1, #1
 80a025e:	200d      	movs	r0, #13
 80a0260:	f002 f879 	bl	80a2356 <digitalWrite>
    sensor3.init();
 80a0264:	2101      	movs	r1, #1
 80a0266:	4620      	mov	r0, r4
 80a0268:	f000 ff04 	bl	80a1074 <_ZN7VL53L0X4initEb>
    sensor3.setAddress(0x33);
 80a026c:	2133      	movs	r1, #51	; 0x33
 80a026e:	4620      	mov	r0, r4
 80a0270:	f000 fbaf 	bl	80a09d2 <_ZN7VL53L0X10setAddressEh>
    sensor3.setTimeout(1000);
    delay(10);
 80a0274:	200a      	movs	r0, #10
 80a0276:	f8c4 8004 	str.w	r8, [r4, #4]
 80a027a:	f001 fd97 	bl	80a1dac <delay>

    // Start continuous back-to-back mode (take readings as
    // fast as possible).  To use continuous timed mode
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
 80a027e:	4638      	mov	r0, r7
 80a0280:	210a      	movs	r1, #10
 80a0282:	f000 fcc4 	bl	80a0c0e <_ZN7VL53L0X15startContinuousEm>
    sensor1.startContinuous(10);
 80a0286:	4630      	mov	r0, r6
 80a0288:	210a      	movs	r1, #10
 80a028a:	f000 fcc0 	bl	80a0c0e <_ZN7VL53L0X15startContinuousEm>
    sensor2.startContinuous(10);
 80a028e:	4628      	mov	r0, r5
 80a0290:	210a      	movs	r1, #10
 80a0292:	f000 fcbc 	bl	80a0c0e <_ZN7VL53L0X15startContinuousEm>
    sensor3.startContinuous(10);
 80a0296:	4620      	mov	r0, r4
}
 80a0298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
    sensor1.startContinuous(10);
    sensor2.startContinuous(10);
    sensor3.startContinuous(10);
 80a029c:	210a      	movs	r1, #10
 80a029e:	f000 bcb6 	b.w	80a0c0e <_ZN7VL53L0X15startContinuousEm>
 80a02a2:	bf00      	nop
 80a02a4:	000186a0 	.word	0x000186a0
 80a02a8:	200003f4 	.word	0x200003f4
 80a02ac:	200003a8 	.word	0x200003a8
 80a02b0:	2000035c 	.word	0x2000035c
 80a02b4:	200003c0 	.word	0x200003c0

080a02b8 <_Z10accel_initv>:
}

void accel_init() {
 80a02b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LIS3DHConfig config;
 80a02ba:	a801      	add	r0, sp, #4
 80a02bc:	f001 f9af 	bl	80a161e <_ZN12LIS3DHConfigC1Ev>
	config.setAccelMode(LIS3DH::RATE_100_HZ);
 80a02c0:	2150      	movs	r1, #80	; 0x50
 80a02c2:	a801      	add	r0, sp, #4
 80a02c4:	f001 f9b8 	bl	80a1638 <_ZN12LIS3DHConfig12setAccelModeEh>

	bool setupSuccess = accel.setup(config);
 80a02c8:	a901      	add	r1, sp, #4
 80a02ca:	4806      	ldr	r0, [pc, #24]	; (80a02e4 <_Z10accel_initv+0x2c>)
 80a02cc:	f001 fa0c 	bl	80a16e8 <_ZN6LIS3DH5setupER12LIS3DHConfig>
 80a02d0:	4604      	mov	r4, r0
	Serial.printlnf("setupSuccess=%d", setupSuccess);
 80a02d2:	f001 fe99 	bl	80a2008 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a02d6:	4623      	mov	r3, r4
 80a02d8:	4a03      	ldr	r2, [pc, #12]	; (80a02e8 <_Z10accel_initv+0x30>)
 80a02da:	2101      	movs	r1, #1
 80a02dc:	f001 fd1a 	bl	80a1d14 <_ZN5Print11printf_implEbPKcz>
}
 80a02e0:	b004      	add	sp, #16
 80a02e2:	bd10      	pop	{r4, pc}
 80a02e4:	2000038c 	.word	0x2000038c
 80a02e8:	080a2fb4 	.word	0x080a2fb4

080a02ec <_Z13runDiagnosticv>:


void runDiagnostic() {
 80a02ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.print("remote status:");
 80a02ee:	f001 fe8b 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a02f2:	497b      	ldr	r1, [pc, #492]	; (80a04e0 <_Z13runDiagnosticv+0x1f4>)
 80a02f4:	f001 fca1 	bl	80a1c3a <_ZN5Print5printEPKc>
  Serial.print(RSflag);
 80a02f8:	f001 fe86 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a02fc:	4b79      	ldr	r3, [pc, #484]	; (80a04e4 <_Z13runDiagnosticv+0x1f8>)
 80a02fe:	220a      	movs	r2, #10
 80a0300:	7819      	ldrb	r1, [r3, #0]
 80a0302:	f001 fd05 	bl	80a1d10 <_ZN5Print5printEii>
  Serial.print(" | ");
 80a0306:	f001 fe7f 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a030a:	4977      	ldr	r1, [pc, #476]	; (80a04e8 <_Z13runDiagnosticv+0x1fc>)
 80a030c:	f001 fc95 	bl	80a1c3a <_ZN5Print5printEPKc>

  Serial.print("sensor 0:");
 80a0310:	f001 fe7a 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a0314:	4975      	ldr	r1, [pc, #468]	; (80a04ec <_Z13runDiagnosticv+0x200>)
 80a0316:	f001 fc90 	bl	80a1c3a <_ZN5Print5printEPKc>
  Serial.print(sensor0.readRangeContinuousMillimeters());
 80a031a:	f001 fe75 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a031e:	4604      	mov	r4, r0
 80a0320:	4873      	ldr	r0, [pc, #460]	; (80a04f0 <_Z13runDiagnosticv+0x204>)
 80a0322:	f000 fcaf 	bl	80a0c84 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a0326:	220a      	movs	r2, #10
 80a0328:	4601      	mov	r1, r0
 80a032a:	4620      	mov	r0, r4
 80a032c:	f001 fcf0 	bl	80a1d10 <_ZN5Print5printEii>
  Serial.print(" | ");
 80a0330:	f001 fe6a 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a0334:	496c      	ldr	r1, [pc, #432]	; (80a04e8 <_Z13runDiagnosticv+0x1fc>)
 80a0336:	f001 fc80 	bl	80a1c3a <_ZN5Print5printEPKc>
  Serial.print("sensor 1:");
 80a033a:	f001 fe65 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a033e:	496d      	ldr	r1, [pc, #436]	; (80a04f4 <_Z13runDiagnosticv+0x208>)
 80a0340:	f001 fc7b 	bl	80a1c3a <_ZN5Print5printEPKc>
  Serial.print(sensor1.readRangeContinuousMillimeters());
 80a0344:	f001 fe60 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a0348:	4604      	mov	r4, r0
 80a034a:	486b      	ldr	r0, [pc, #428]	; (80a04f8 <_Z13runDiagnosticv+0x20c>)
 80a034c:	f000 fc9a 	bl	80a0c84 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a0350:	220a      	movs	r2, #10
 80a0352:	4601      	mov	r1, r0
 80a0354:	4620      	mov	r0, r4
 80a0356:	f001 fcdb 	bl	80a1d10 <_ZN5Print5printEii>
  Serial.print(" | ");
 80a035a:	f001 fe55 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a035e:	4962      	ldr	r1, [pc, #392]	; (80a04e8 <_Z13runDiagnosticv+0x1fc>)
 80a0360:	f001 fc6b 	bl	80a1c3a <_ZN5Print5printEPKc>
  Serial.print("sensor 2:");
 80a0364:	f001 fe50 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a0368:	4964      	ldr	r1, [pc, #400]	; (80a04fc <_Z13runDiagnosticv+0x210>)
 80a036a:	f001 fc66 	bl	80a1c3a <_ZN5Print5printEPKc>
  Serial.print(sensor2.readRangeContinuousMillimeters());
 80a036e:	f001 fe4b 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a0372:	4604      	mov	r4, r0
 80a0374:	4862      	ldr	r0, [pc, #392]	; (80a0500 <_Z13runDiagnosticv+0x214>)
 80a0376:	f000 fc85 	bl	80a0c84 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a037a:	220a      	movs	r2, #10
 80a037c:	4601      	mov	r1, r0
 80a037e:	4620      	mov	r0, r4
 80a0380:	f001 fcc6 	bl	80a1d10 <_ZN5Print5printEii>
  Serial.print(" | ");
 80a0384:	f001 fe40 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a0388:	4957      	ldr	r1, [pc, #348]	; (80a04e8 <_Z13runDiagnosticv+0x1fc>)
 80a038a:	f001 fc56 	bl	80a1c3a <_ZN5Print5printEPKc>
  Serial.print("sensor 3:");
 80a038e:	f001 fe3b 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a0392:	495c      	ldr	r1, [pc, #368]	; (80a0504 <_Z13runDiagnosticv+0x218>)
 80a0394:	f001 fc51 	bl	80a1c3a <_ZN5Print5printEPKc>
  Serial.print(sensor3.readRangeContinuousMillimeters());
 80a0398:	f001 fe36 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a039c:	4604      	mov	r4, r0
 80a039e:	485a      	ldr	r0, [pc, #360]	; (80a0508 <_Z13runDiagnosticv+0x21c>)
 80a03a0:	f000 fc70 	bl	80a0c84 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a03a4:	220a      	movs	r2, #10
 80a03a6:	4601      	mov	r1, r0
 80a03a8:	4620      	mov	r0, r4
 80a03aa:	f001 fcb1 	bl	80a1d10 <_ZN5Print5printEii>
  if (sensor0.timeoutOccurred() || sensor1.timeoutOccurred() || sensor2.timeoutOccurred() || sensor3.timeoutOccurred()) { Serial.print(" SENSOR TIMEOUT"); }
 80a03ae:	4850      	ldr	r0, [pc, #320]	; (80a04f0 <_Z13runDiagnosticv+0x204>)
 80a03b0:	f000 fc8e 	bl	80a0cd0 <_ZN7VL53L0X15timeoutOccurredEv>
 80a03b4:	2800      	cmp	r0, #0
 80a03b6:	f040 808d 	bne.w	80a04d4 <_Z13runDiagnosticv+0x1e8>
 80a03ba:	484f      	ldr	r0, [pc, #316]	; (80a04f8 <_Z13runDiagnosticv+0x20c>)
 80a03bc:	f000 fc88 	bl	80a0cd0 <_ZN7VL53L0X15timeoutOccurredEv>
 80a03c0:	2800      	cmp	r0, #0
 80a03c2:	f040 8087 	bne.w	80a04d4 <_Z13runDiagnosticv+0x1e8>
 80a03c6:	484e      	ldr	r0, [pc, #312]	; (80a0500 <_Z13runDiagnosticv+0x214>)
 80a03c8:	f000 fc82 	bl	80a0cd0 <_ZN7VL53L0X15timeoutOccurredEv>
 80a03cc:	2800      	cmp	r0, #0
 80a03ce:	f040 8081 	bne.w	80a04d4 <_Z13runDiagnosticv+0x1e8>
 80a03d2:	484d      	ldr	r0, [pc, #308]	; (80a0508 <_Z13runDiagnosticv+0x21c>)
 80a03d4:	f000 fc7c 	bl	80a0cd0 <_ZN7VL53L0X15timeoutOccurredEv>
 80a03d8:	2800      	cmp	r0, #0
 80a03da:	d17b      	bne.n	80a04d4 <_Z13runDiagnosticv+0x1e8>

  Serial.print(" | ");
 80a03dc:	f001 fe14 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a03e0:	4941      	ldr	r1, [pc, #260]	; (80a04e8 <_Z13runDiagnosticv+0x1fc>)
 80a03e2:	f001 fc2a 	bl	80a1c3a <_ZN5Print5printEPKc>
  Serial.print("front left:");
 80a03e6:	f001 fe0f 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a03ea:	4948      	ldr	r1, [pc, #288]	; (80a050c <_Z13runDiagnosticv+0x220>)
 80a03ec:	f001 fc25 	bl	80a1c3a <_ZN5Print5printEPKc>
  Serial.print(FLflag);
 80a03f0:	f001 fe0a 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a03f4:	4b46      	ldr	r3, [pc, #280]	; (80a0510 <_Z13runDiagnosticv+0x224>)
 80a03f6:	220a      	movs	r2, #10
 80a03f8:	7819      	ldrb	r1, [r3, #0]
 80a03fa:	f001 fc89 	bl	80a1d10 <_ZN5Print5printEii>

  Serial.print(" | ");
 80a03fe:	f001 fe03 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a0402:	4939      	ldr	r1, [pc, #228]	; (80a04e8 <_Z13runDiagnosticv+0x1fc>)
 80a0404:	f001 fc19 	bl	80a1c3a <_ZN5Print5printEPKc>
  Serial.print("front right:");
 80a0408:	f001 fdfe 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a040c:	4941      	ldr	r1, [pc, #260]	; (80a0514 <_Z13runDiagnosticv+0x228>)
 80a040e:	f001 fc14 	bl	80a1c3a <_ZN5Print5printEPKc>
  Serial.print(FRflag);
 80a0412:	f001 fdf9 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a0416:	4b40      	ldr	r3, [pc, #256]	; (80a0518 <_Z13runDiagnosticv+0x22c>)
 80a0418:	220a      	movs	r2, #10
 80a041a:	7819      	ldrb	r1, [r3, #0]
 80a041c:	f001 fc78 	bl	80a1d10 <_ZN5Print5printEii>

  Serial.print(" | ");
 80a0420:	f001 fdf2 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a0424:	4930      	ldr	r1, [pc, #192]	; (80a04e8 <_Z13runDiagnosticv+0x1fc>)
 80a0426:	f001 fc08 	bl	80a1c3a <_ZN5Print5printEPKc>
  Serial.print("back left:");
 80a042a:	f001 fded 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a042e:	493b      	ldr	r1, [pc, #236]	; (80a051c <_Z13runDiagnosticv+0x230>)
 80a0430:	f001 fc03 	bl	80a1c3a <_ZN5Print5printEPKc>
  Serial.print(BLflag);
 80a0434:	f001 fde8 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a0438:	4b39      	ldr	r3, [pc, #228]	; (80a0520 <_Z13runDiagnosticv+0x234>)
 80a043a:	220a      	movs	r2, #10
 80a043c:	7819      	ldrb	r1, [r3, #0]
 80a043e:	f001 fc67 	bl	80a1d10 <_ZN5Print5printEii>

  Serial.print(" | ");
 80a0442:	f001 fde1 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a0446:	4928      	ldr	r1, [pc, #160]	; (80a04e8 <_Z13runDiagnosticv+0x1fc>)
 80a0448:	f001 fbf7 	bl	80a1c3a <_ZN5Print5printEPKc>
  Serial.print("back right:");
 80a044c:	f001 fddc 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a0450:	4934      	ldr	r1, [pc, #208]	; (80a0524 <_Z13runDiagnosticv+0x238>)
 80a0452:	f001 fbf2 	bl	80a1c3a <_ZN5Print5printEPKc>
  Serial.print(BRflag);
 80a0456:	f001 fdd7 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a045a:	4b33      	ldr	r3, [pc, #204]	; (80a0528 <_Z13runDiagnosticv+0x23c>)
 80a045c:	220a      	movs	r2, #10
 80a045e:	7819      	ldrb	r1, [r3, #0]
 80a0460:	f001 fc56 	bl	80a1d10 <_ZN5Print5printEii>

  Serial.print(" | ");
 80a0464:	f001 fdd0 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a0468:	491f      	ldr	r1, [pc, #124]	; (80a04e8 <_Z13runDiagnosticv+0x1fc>)
 80a046a:	f001 fbe6 	bl	80a1c3a <_ZN5Print5printEPKc>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a046e:	f001 f9fb 	bl	80a1868 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD) {
 80a0472:	4c2e      	ldr	r4, [pc, #184]	; (80a052c <_Z13runDiagnosticv+0x240>)
 80a0474:	6823      	ldr	r3, [r4, #0]
 80a0476:	1ac0      	subs	r0, r0, r3
 80a0478:	2863      	cmp	r0, #99	; 0x63
 80a047a:	d91b      	bls.n	80a04b4 <_Z13runDiagnosticv+0x1c8>
 80a047c:	f001 f9f4 	bl	80a1868 <HAL_Timer_Get_Milli_Seconds>
		lastPrintSample = millis();

		LIS3DHSample sample;
		if (accel.getSample(sample)) {
 80a0480:	a902      	add	r1, sp, #8
  Serial.print("back right:");
  Serial.print(BRflag);

  Serial.print(" | ");
  if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD) {
		lastPrintSample = millis();
 80a0482:	6020      	str	r0, [r4, #0]

		LIS3DHSample sample;
		if (accel.getSample(sample)) {
 80a0484:	482a      	ldr	r0, [pc, #168]	; (80a0530 <_Z13runDiagnosticv+0x244>)
 80a0486:	f001 f8f7 	bl	80a1678 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
 80a048a:	b170      	cbz	r0, 80a04aa <_Z13runDiagnosticv+0x1be>
			Serial.printlnf("%d,%d,%d", sample.x, sample.y, sample.z);
 80a048c:	f001 fdbc 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a0490:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80a0494:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80a0498:	9201      	str	r2, [sp, #4]
 80a049a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80a049e:	2101      	movs	r1, #1
 80a04a0:	9200      	str	r2, [sp, #0]
 80a04a2:	4a24      	ldr	r2, [pc, #144]	; (80a0534 <_Z13runDiagnosticv+0x248>)
 80a04a4:	f001 fc36 	bl	80a1d14 <_ZN5Print11printf_implEbPKcz>
 80a04a8:	e004      	b.n	80a04b4 <_Z13runDiagnosticv+0x1c8>
		}
		else {
			Serial.println("no sample");
 80a04aa:	f001 fdad 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a04ae:	4922      	ldr	r1, [pc, #136]	; (80a0538 <_Z13runDiagnosticv+0x24c>)
 80a04b0:	f001 fbd6 	bl	80a1c60 <_ZN5Print7printlnEPKc>
		}
	}

  Serial.println();
 80a04b4:	f001 fda8 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a04b8:	f001 fbc6 	bl	80a1c48 <_ZN5Print7printlnEv>

  LESC.writeMicroseconds(1600);
 80a04bc:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80a04c0:	481e      	ldr	r0, [pc, #120]	; (80a053c <_Z13runDiagnosticv+0x250>)
 80a04c2:	f001 fb32 	bl	80a1b2a <_ZN5Servo17writeMicrosecondsEt>
  RESC.writeMicroseconds(1600);
 80a04c6:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80a04ca:	481d      	ldr	r0, [pc, #116]	; (80a0540 <_Z13runDiagnosticv+0x254>)
 80a04cc:	f001 fb2d 	bl	80a1b2a <_ZN5Servo17writeMicrosecondsEt>
}
 80a04d0:	b004      	add	sp, #16
 80a04d2:	bd10      	pop	{r4, pc}
  Serial.print("sensor 2:");
  Serial.print(sensor2.readRangeContinuousMillimeters());
  Serial.print(" | ");
  Serial.print("sensor 3:");
  Serial.print(sensor3.readRangeContinuousMillimeters());
  if (sensor0.timeoutOccurred() || sensor1.timeoutOccurred() || sensor2.timeoutOccurred() || sensor3.timeoutOccurred()) { Serial.print(" SENSOR TIMEOUT"); }
 80a04d4:	f001 fd98 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a04d8:	491a      	ldr	r1, [pc, #104]	; (80a0544 <_Z13runDiagnosticv+0x258>)
 80a04da:	f001 fbae 	bl	80a1c3a <_ZN5Print5printEPKc>
 80a04de:	e77d      	b.n	80a03dc <_Z13runDiagnosticv+0xf0>
 80a04e0:	080a2fc4 	.word	0x080a2fc4
 80a04e4:	200003f0 	.word	0x200003f0
 80a04e8:	080a2fd3 	.word	0x080a2fd3
 80a04ec:	080a2fd7 	.word	0x080a2fd7
 80a04f0:	200003f4 	.word	0x200003f4
 80a04f4:	080a2fe1 	.word	0x080a2fe1
 80a04f8:	200003a8 	.word	0x200003a8
 80a04fc:	080a2feb 	.word	0x080a2feb
 80a0500:	2000035c 	.word	0x2000035c
 80a0504:	080a2ff5 	.word	0x080a2ff5
 80a0508:	200003c0 	.word	0x200003c0
 80a050c:	080a2fff 	.word	0x080a2fff
 80a0510:	20000379 	.word	0x20000379
 80a0514:	080a300b 	.word	0x080a300b
 80a0518:	200003f1 	.word	0x200003f1
 80a051c:	080a3018 	.word	0x080a3018
 80a0520:	2000040e 	.word	0x2000040e
 80a0524:	080a3023 	.word	0x080a3023
 80a0528:	200003a4 	.word	0x200003a4
 80a052c:	200003a0 	.word	0x200003a0
 80a0530:	2000038c 	.word	0x2000038c
 80a0534:	080a302f 	.word	0x080a302f
 80a0538:	080a3038 	.word	0x080a3038
 80a053c:	2000037c 	.word	0x2000037c
 80a0540:	200003dc 	.word	0x200003dc
 80a0544:	080a3042 	.word	0x080a3042

080a0548 <_Z4stopv>:
  } else {              // LEFT ESC
    LESC.writeMicroseconds(pwm);
  }
}

void stop(){
 80a0548:	b508      	push	{r3, lr}
  RESC.writeMicroseconds(1500);
 80a054a:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a054e:	4805      	ldr	r0, [pc, #20]	; (80a0564 <_Z4stopv+0x1c>)
 80a0550:	f001 faeb 	bl	80a1b2a <_ZN5Servo17writeMicrosecondsEt>
  LESC.writeMicroseconds(1500);
}
 80a0554:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }
}

void stop(){
  RESC.writeMicroseconds(1500);
  LESC.writeMicroseconds(1500);
 80a0558:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a055c:	4802      	ldr	r0, [pc, #8]	; (80a0568 <_Z4stopv+0x20>)
 80a055e:	f001 bae4 	b.w	80a1b2a <_ZN5Servo17writeMicrosecondsEt>
 80a0562:	bf00      	nop
 80a0564:	200003dc 	.word	0x200003dc
 80a0568:	2000037c 	.word	0x2000037c

080a056c <_Z8movementi>:
}

void movement(int state) {
 80a056c:	b538      	push	{r3, r4, r5, lr}
  switch (state) {
 80a056e:	280c      	cmp	r0, #12
 80a0570:	f200 80c5 	bhi.w	80a06fe <_Z8movementi+0x192>
 80a0574:	e8df f000 	tbb	[pc, r0]
 80a0578:	118f0907 	.word	0x118f0907
 80a057c:	3c165932 	.word	0x3c165932
 80a0580:	507f2564 	.word	0x507f2564
 80a0584:	a0          	.byte	0xa0
 80a0585:	00          	.byte	0x00
    case 0: //forward
      //move(2, 100, 0);
      move(1, maxR, 1);
 80a0586:	4b5e      	ldr	r3, [pc, #376]	; (80a0700 <_Z8movementi+0x194>)
 80a0588:	e008      	b.n	80a059c <_Z8movementi+0x30>
    pwm = 1500 + speed;
  } else {              // reverse
    pwm = 1500 - speed;
  }
  if(motor == 1) {      // RIGHT ESC
    RESC.writeMicroseconds(pwm);
 80a058a:	f240 61a4 	movw	r1, #1700	; 0x6a4
 80a058e:	485d      	ldr	r0, [pc, #372]	; (80a0704 <_Z8movementi+0x198>)
 80a0590:	f001 facb 	bl	80a1b2a <_ZN5Servo17writeMicrosecondsEt>
  } else {              // LEFT ESC
    LESC.writeMicroseconds(pwm);
 80a0594:	f240 5114 	movw	r1, #1300	; 0x514
 80a0598:	e069      	b.n	80a066e <_Z8movementi+0x102>
      move(1, maxR, 1);
      move(2, minS, 0);
      moving = true;
      break;
    case 3: //right
      move(1, minR, 1);
 80a059a:	4b5b      	ldr	r3, [pc, #364]	; (80a0708 <_Z8movementi+0x19c>)
    pwm = 1500 + speed;
  } else {              // reverse
    pwm = 1500 - speed;
  }
  if(motor == 1) {      // RIGHT ESC
    RESC.writeMicroseconds(pwm);
 80a059c:	6819      	ldr	r1, [r3, #0]
 80a059e:	f201 51dc 	addw	r1, r1, #1500	; 0x5dc
 80a05a2:	e047      	b.n	80a0634 <_Z8movementi+0xc8>
      move(1, maxR, 0);
      move(2, maxS, 0);
      moving = true;
      break;
    case 6: //back right and left
      if (cur - prevFlag < degreesMin) {
 80a05a4:	4b59      	ldr	r3, [pc, #356]	; (80a070c <_Z8movementi+0x1a0>)
 80a05a6:	4a5a      	ldr	r2, [pc, #360]	; (80a0710 <_Z8movementi+0x1a4>)
 80a05a8:	681b      	ldr	r3, [r3, #0]
 80a05aa:	6812      	ldr	r2, [r2, #0]
 80a05ac:	1a9b      	subs	r3, r3, r2
 80a05ae:	4a59      	ldr	r2, [pc, #356]	; (80a0714 <_Z8movementi+0x1a8>)
 80a05b0:	6812      	ldr	r2, [r2, #0]
 80a05b2:	4293      	cmp	r3, r2
 80a05b4:	da0e      	bge.n	80a05d4 <_Z8movementi+0x68>
        move(1, minR, 0);
 80a05b6:	4b54      	ldr	r3, [pc, #336]	; (80a0708 <_Z8movementi+0x19c>)
    pwm = 1500 + speed;
  } else {              // reverse
    pwm = 1500 - speed;
  }
  if(motor == 1) {      // RIGHT ESC
    RESC.writeMicroseconds(pwm);
 80a05b8:	6819      	ldr	r1, [r3, #0]
 80a05ba:	f5c1 61bb 	rsb	r1, r1, #1496	; 0x5d8
 80a05be:	3104      	adds	r1, #4
 80a05c0:	e010      	b.n	80a05e4 <_Z8movementi+0x78>
        lineFlag = 0;
      }
      moving = true;
      break;
    case 9: //back left and left
      if (cur - prevFlag < degreesMin) {
 80a05c2:	4b52      	ldr	r3, [pc, #328]	; (80a070c <_Z8movementi+0x1a0>)
 80a05c4:	4a52      	ldr	r2, [pc, #328]	; (80a0710 <_Z8movementi+0x1a4>)
 80a05c6:	681b      	ldr	r3, [r3, #0]
 80a05c8:	6812      	ldr	r2, [r2, #0]
 80a05ca:	1a9b      	subs	r3, r3, r2
 80a05cc:	4a51      	ldr	r2, [pc, #324]	; (80a0714 <_Z8movementi+0x1a8>)
 80a05ce:	6812      	ldr	r2, [r2, #0]
 80a05d0:	4293      	cmp	r3, r2
 80a05d2:	db3e      	blt.n	80a0652 <_Z8movementi+0xe6>
      break;
    case 6: //back right and left
      if (cur - prevFlag < degreesMin) {
        move(1, minR, 0);
        move(2, maxS, 1);
      } else if (cur - prevFlag < degrees90) {
 80a05d4:	4a50      	ldr	r2, [pc, #320]	; (80a0718 <_Z8movementi+0x1ac>)
 80a05d6:	6812      	ldr	r2, [r2, #0]
 80a05d8:	4293      	cmp	r3, r2
 80a05da:	da16      	bge.n	80a060a <_Z8movementi+0x9e>
        move(1, maxR, 1);
 80a05dc:	4b48      	ldr	r3, [pc, #288]	; (80a0700 <_Z8movementi+0x194>)
    pwm = 1500 + speed;
  } else {              // reverse
    pwm = 1500 - speed;
  }
  if(motor == 1) {      // RIGHT ESC
    RESC.writeMicroseconds(pwm);
 80a05de:	6819      	ldr	r1, [r3, #0]
 80a05e0:	f201 51dc 	addw	r1, r1, #1500	; 0x5dc
 80a05e4:	b289      	uxth	r1, r1
 80a05e6:	4847      	ldr	r0, [pc, #284]	; (80a0704 <_Z8movementi+0x198>)
 80a05e8:	f001 fa9f 	bl	80a1b2a <_ZN5Servo17writeMicrosecondsEt>
      if (cur - prevFlag < degreesMin) {
        move(1, minR, 0);
        move(2, maxS, 1);
      } else if (cur - prevFlag < degrees90) {
        move(1, maxR, 1);
        move(2, maxS, 1);
 80a05ec:	4b4b      	ldr	r3, [pc, #300]	; (80a071c <_Z8movementi+0x1b0>)
 80a05ee:	e03a      	b.n	80a0666 <_Z8movementi+0xfa>
        lineFlag = 0;
      }
      moving = true;
      break;
    case 7: //back right and right
      if (cur - prevFlag < degreesMin) {
 80a05f0:	4b46      	ldr	r3, [pc, #280]	; (80a070c <_Z8movementi+0x1a0>)
 80a05f2:	4a47      	ldr	r2, [pc, #284]	; (80a0710 <_Z8movementi+0x1a4>)
 80a05f4:	681b      	ldr	r3, [r3, #0]
 80a05f6:	6812      	ldr	r2, [r2, #0]
 80a05f8:	1a9b      	subs	r3, r3, r2
 80a05fa:	4a46      	ldr	r2, [pc, #280]	; (80a0714 <_Z8movementi+0x1a8>)
 80a05fc:	6812      	ldr	r2, [r2, #0]
 80a05fe:	4293      	cmp	r3, r2
 80a0600:	dbd9      	blt.n	80a05b6 <_Z8movementi+0x4a>
        move(1, minR, 0);
        move(2, maxS, 1);
      } else if (cur - prevFlag < degrees90) {
 80a0602:	4a45      	ldr	r2, [pc, #276]	; (80a0718 <_Z8movementi+0x1ac>)
 80a0604:	6812      	ldr	r2, [r2, #0]
 80a0606:	4293      	cmp	r3, r2
 80a0608:	db0f      	blt.n	80a062a <_Z8movementi+0xbe>
        move(2, maxS, 1);
      } else if (cur - prevFlag < degrees90) {
        move(1, maxR, 1);
        move(2, maxS, 1);
      } else {
        lineFlag = 0;
 80a060a:	4b45      	ldr	r3, [pc, #276]	; (80a0720 <_Z8movementi+0x1b4>)
 80a060c:	2200      	movs	r2, #0
 80a060e:	601a      	str	r2, [r3, #0]
      }
      moving = true;
 80a0610:	4b44      	ldr	r3, [pc, #272]	; (80a0724 <_Z8movementi+0x1b8>)
 80a0612:	2201      	movs	r2, #1
 80a0614:	701a      	strb	r2, [r3, #0]
      break;
 80a0616:	bd38      	pop	{r3, r4, r5, pc}
        lineFlag = 0;
      }
      moving = true;
      break;
    case 11: //startup movement: spin right, turn left, spin left, go forward
      if (cur - prevFlag < startSpinR) {
 80a0618:	4b3c      	ldr	r3, [pc, #240]	; (80a070c <_Z8movementi+0x1a0>)
 80a061a:	4a3d      	ldr	r2, [pc, #244]	; (80a0710 <_Z8movementi+0x1a4>)
 80a061c:	681b      	ldr	r3, [r3, #0]
 80a061e:	6812      	ldr	r2, [r2, #0]
 80a0620:	1a9a      	subs	r2, r3, r2
 80a0622:	4b41      	ldr	r3, [pc, #260]	; (80a0728 <_Z8movementi+0x1bc>)
 80a0624:	681b      	ldr	r3, [r3, #0]
 80a0626:	429a      	cmp	r2, r3
 80a0628:	da30      	bge.n	80a068c <_Z8movementi+0x120>
    case 7: //back right and right
      if (cur - prevFlag < degreesMin) {
        move(1, minR, 0);
        move(2, maxS, 1);
      } else if (cur - prevFlag < degrees90) {
        move(1, maxR, 0);
 80a062a:	4b35      	ldr	r3, [pc, #212]	; (80a0700 <_Z8movementi+0x194>)
    pwm = 1500 + speed;
  } else {              // reverse
    pwm = 1500 - speed;
  }
  if(motor == 1) {      // RIGHT ESC
    RESC.writeMicroseconds(pwm);
 80a062c:	6819      	ldr	r1, [r3, #0]
 80a062e:	f5c1 61bb 	rsb	r1, r1, #1496	; 0x5d8
 80a0632:	3104      	adds	r1, #4
 80a0634:	b289      	uxth	r1, r1
 80a0636:	4833      	ldr	r0, [pc, #204]	; (80a0704 <_Z8movementi+0x198>)
 80a0638:	f001 fa77 	bl	80a1b2a <_ZN5Servo17writeMicrosecondsEt>
      if (cur - prevFlag < degreesMin) {
        move(1, minR, 0);
        move(2, maxS, 1);
      } else if (cur - prevFlag < degrees90) {
        move(1, maxR, 0);
        move(2, maxS, 0);
 80a063c:	4b37      	ldr	r3, [pc, #220]	; (80a071c <_Z8movementi+0x1b0>)
 80a063e:	e033      	b.n	80a06a8 <_Z8movementi+0x13c>
        lineFlag = 0;
      }
      moving = true;
      break;
    case 8: //back left and right
      if (cur - prevFlag < degreesMin) {
 80a0640:	4b32      	ldr	r3, [pc, #200]	; (80a070c <_Z8movementi+0x1a0>)
 80a0642:	4a33      	ldr	r2, [pc, #204]	; (80a0710 <_Z8movementi+0x1a4>)
 80a0644:	681b      	ldr	r3, [r3, #0]
 80a0646:	6812      	ldr	r2, [r2, #0]
 80a0648:	1a9b      	subs	r3, r3, r2
 80a064a:	4a32      	ldr	r2, [pc, #200]	; (80a0714 <_Z8movementi+0x1a8>)
 80a064c:	6812      	ldr	r2, [r2, #0]
 80a064e:	4293      	cmp	r3, r2
 80a0650:	dad7      	bge.n	80a0602 <_Z8movementi+0x96>
        move(1, maxR, 0);
 80a0652:	4b2b      	ldr	r3, [pc, #172]	; (80a0700 <_Z8movementi+0x194>)
    pwm = 1500 + speed;
  } else {              // reverse
    pwm = 1500 - speed;
  }
  if(motor == 1) {      // RIGHT ESC
    RESC.writeMicroseconds(pwm);
 80a0654:	482b      	ldr	r0, [pc, #172]	; (80a0704 <_Z8movementi+0x198>)
 80a0656:	6819      	ldr	r1, [r3, #0]
 80a0658:	f5c1 61bb 	rsb	r1, r1, #1496	; 0x5d8
 80a065c:	3104      	adds	r1, #4
 80a065e:	b289      	uxth	r1, r1
 80a0660:	f001 fa63 	bl	80a1b2a <_ZN5Servo17writeMicrosecondsEt>
      moving = true;
      break;
    case 8: //back left and right
      if (cur - prevFlag < degreesMin) {
        move(1, maxR, 0);
        move(2, minS, 1);
 80a0664:	4b31      	ldr	r3, [pc, #196]	; (80a072c <_Z8movementi+0x1c0>)
    pwm = 1500 - speed;
  }
  if(motor == 1) {      // RIGHT ESC
    RESC.writeMicroseconds(pwm);
  } else {              // LEFT ESC
    LESC.writeMicroseconds(pwm);
 80a0666:	6819      	ldr	r1, [r3, #0]
 80a0668:	f201 51dc 	addw	r1, r1, #1500	; 0x5dc
 80a066c:	b289      	uxth	r1, r1
 80a066e:	4830      	ldr	r0, [pc, #192]	; (80a0730 <_Z8movementi+0x1c4>)
 80a0670:	f001 fa5b 	bl	80a1b2a <_ZN5Servo17writeMicrosecondsEt>
 80a0674:	e7cc      	b.n	80a0610 <_Z8movementi+0xa4>
        lineFlag = 0;
      }
      moving = true;
      break;
    case 10: //back and spin 180
      if (cur - prevFlag < degreesMin) {
 80a0676:	4b25      	ldr	r3, [pc, #148]	; (80a070c <_Z8movementi+0x1a0>)
 80a0678:	4a25      	ldr	r2, [pc, #148]	; (80a0710 <_Z8movementi+0x1a4>)
 80a067a:	681b      	ldr	r3, [r3, #0]
 80a067c:	6812      	ldr	r2, [r2, #0]
 80a067e:	1a9b      	subs	r3, r3, r2
 80a0680:	4a24      	ldr	r2, [pc, #144]	; (80a0714 <_Z8movementi+0x1a8>)
 80a0682:	6812      	ldr	r2, [r2, #0]
 80a0684:	4293      	cmp	r3, r2
 80a0686:	dbd0      	blt.n	80a062a <_Z8movementi+0xbe>
        move(1, maxR, 0);
        move(2, maxS, 0);
      } else if (cur - prevFlag < degrees180) {
 80a0688:	4a2a      	ldr	r2, [pc, #168]	; (80a0734 <_Z8movementi+0x1c8>)
 80a068a:	e7bb      	b.n	80a0604 <_Z8movementi+0x98>
      break;
    case 11: //startup movement: spin right, turn left, spin left, go forward
      if (cur - prevFlag < startSpinR) {
        move(1, maxR, 0);
        move(2, maxS, 0);
      } else if (cur - prevFlag < startTurnL + startSpinR) {
 80a068c:	492a      	ldr	r1, [pc, #168]	; (80a0738 <_Z8movementi+0x1cc>)
 80a068e:	6808      	ldr	r0, [r1, #0]
 80a0690:	1819      	adds	r1, r3, r0
 80a0692:	428a      	cmp	r2, r1
 80a0694:	da0d      	bge.n	80a06b2 <_Z8movementi+0x146>
        move(1, maxR, 1);
 80a0696:	4b1a      	ldr	r3, [pc, #104]	; (80a0700 <_Z8movementi+0x194>)
    pwm = 1500 + speed;
  } else {              // reverse
    pwm = 1500 - speed;
  }
  if(motor == 1) {      // RIGHT ESC
    RESC.writeMicroseconds(pwm);
 80a0698:	481a      	ldr	r0, [pc, #104]	; (80a0704 <_Z8movementi+0x198>)
 80a069a:	6819      	ldr	r1, [r3, #0]
 80a069c:	f201 51dc 	addw	r1, r1, #1500	; 0x5dc
 80a06a0:	b289      	uxth	r1, r1
 80a06a2:	f001 fa42 	bl	80a1b2a <_ZN5Servo17writeMicrosecondsEt>
      if (cur - prevFlag < startSpinR) {
        move(1, maxR, 0);
        move(2, maxS, 0);
      } else if (cur - prevFlag < startTurnL + startSpinR) {
        move(1, maxR, 1);
        move(2, minS, 0);
 80a06a6:	4b21      	ldr	r3, [pc, #132]	; (80a072c <_Z8movementi+0x1c0>)
    pwm = 1500 - speed;
  }
  if(motor == 1) {      // RIGHT ESC
    RESC.writeMicroseconds(pwm);
  } else {              // LEFT ESC
    LESC.writeMicroseconds(pwm);
 80a06a8:	6819      	ldr	r1, [r3, #0]
 80a06aa:	f5c1 61bb 	rsb	r1, r1, #1496	; 0x5d8
 80a06ae:	3104      	adds	r1, #4
 80a06b0:	e7dc      	b.n	80a066c <_Z8movementi+0x100>
        move(1, maxR, 0);
        move(2, maxS, 0);
      } else if (cur - prevFlag < startTurnL + startSpinR) {
        move(1, maxR, 1);
        move(2, minS, 0);
      } else if (cur - prevFlag < startSpinL + startTurnL + startSpinR) {
 80a06b2:	4922      	ldr	r1, [pc, #136]	; (80a073c <_Z8movementi+0x1d0>)
 80a06b4:	6809      	ldr	r1, [r1, #0]
 80a06b6:	e016      	b.n	80a06e6 <_Z8movementi+0x17a>
        pivotFlag = false;
      }
      moving = true;
      break;
    case 12: //pivot: go back, spin right, turn left, spin left, go forward
      if (cur - prevFlag < pivotBack) {
 80a06b8:	4b14      	ldr	r3, [pc, #80]	; (80a070c <_Z8movementi+0x1a0>)
 80a06ba:	681a      	ldr	r2, [r3, #0]
 80a06bc:	4b14      	ldr	r3, [pc, #80]	; (80a0710 <_Z8movementi+0x1a4>)
 80a06be:	681b      	ldr	r3, [r3, #0]
 80a06c0:	1ad2      	subs	r2, r2, r3
 80a06c2:	4b1f      	ldr	r3, [pc, #124]	; (80a0740 <_Z8movementi+0x1d4>)
 80a06c4:	681b      	ldr	r3, [r3, #0]
 80a06c6:	429a      	cmp	r2, r3
 80a06c8:	dbaf      	blt.n	80a062a <_Z8movementi+0xbe>
        move(1, maxR, 0);
        move(2, maxS, 0);
      } else if (cur - prevFlag < pivotSpinR + pivotBack) {
 80a06ca:	491e      	ldr	r1, [pc, #120]	; (80a0744 <_Z8movementi+0x1d8>)
 80a06cc:	6809      	ldr	r1, [r1, #0]
 80a06ce:	1858      	adds	r0, r3, r1
 80a06d0:	4282      	cmp	r2, r0
 80a06d2:	dbaa      	blt.n	80a062a <_Z8movementi+0xbe>
        move(1, maxR, 0);
        move(2, maxS, 0);
      } else if (cur - prevFlag < pivotTurnL + pivotSpinR + pivotBack) {
 80a06d4:	481c      	ldr	r0, [pc, #112]	; (80a0748 <_Z8movementi+0x1dc>)
 80a06d6:	6805      	ldr	r5, [r0, #0]
 80a06d8:	194c      	adds	r4, r1, r5
 80a06da:	441c      	add	r4, r3
 80a06dc:	42a2      	cmp	r2, r4
 80a06de:	dbda      	blt.n	80a0696 <_Z8movementi+0x12a>
        move(1, maxR, 1);
        move(2, minS, 0);
      } else if (cur - prevFlag < pivotSpinL + pivotTurnL + pivotSpinR + pivotBack) {
 80a06e0:	481a      	ldr	r0, [pc, #104]	; (80a074c <_Z8movementi+0x1e0>)
 80a06e2:	6800      	ldr	r0, [r0, #0]
 80a06e4:	4428      	add	r0, r5
 80a06e6:	4401      	add	r1, r0
 80a06e8:	440b      	add	r3, r1
 80a06ea:	429a      	cmp	r2, r3
 80a06ec:	f6ff af76 	blt.w	80a05dc <_Z8movementi+0x70>
        move(2, minS, 0);
      } else if (cur - prevFlag < startSpinL + startTurnL + startSpinR) {
        move(1, maxR, 1);
        move(2, maxS, 1);
      } else {
        past = 'f';
 80a06f0:	4b17      	ldr	r3, [pc, #92]	; (80a0750 <_Z8movementi+0x1e4>)
 80a06f2:	2266      	movs	r2, #102	; 0x66
 80a06f4:	701a      	strb	r2, [r3, #0]
        pivotFlag = false;
 80a06f6:	4b17      	ldr	r3, [pc, #92]	; (80a0754 <_Z8movementi+0x1e8>)
 80a06f8:	2200      	movs	r2, #0
 80a06fa:	701a      	strb	r2, [r3, #0]
 80a06fc:	e788      	b.n	80a0610 <_Z8movementi+0xa4>
 80a06fe:	bd38      	pop	{r3, r4, r5, pc}
 80a0700:	20000314 	.word	0x20000314
 80a0704:	200003dc 	.word	0x200003dc
 80a0708:	20000340 	.word	0x20000340
 80a070c:	200003ec 	.word	0x200003ec
 80a0710:	200003d8 	.word	0x200003d8
 80a0714:	2000032c 	.word	0x2000032c
 80a0718:	20000320 	.word	0x20000320
 80a071c:	20000318 	.word	0x20000318
 80a0720:	20000374 	.word	0x20000374
 80a0724:	20000378 	.word	0x20000378
 80a0728:	20000308 	.word	0x20000308
 80a072c:	20000344 	.word	0x20000344
 80a0730:	2000037c 	.word	0x2000037c
 80a0734:	20000324 	.word	0x20000324
 80a0738:	20000328 	.word	0x20000328
 80a073c:	20000304 	.word	0x20000304
 80a0740:	2000030c 	.word	0x2000030c
 80a0744:	20000350 	.word	0x20000350
 80a0748:	2000031c 	.word	0x2000031c
 80a074c:	2000034c 	.word	0x2000034c
 80a0750:	2000040d 	.word	0x2000040d
 80a0754:	2000040c 	.word	0x2000040c

080a0758 <setup>:
      break;
  }
}

void setup()
{
 80a0758:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  pinMode(FL, INPUT);
 80a075c:	4c42      	ldr	r4, [pc, #264]	; (80a0868 <setup+0x110>)
  pinMode(FR, INPUT);
 80a075e:	f8df a138 	ldr.w	sl, [pc, #312]	; 80a0898 <setup+0x140>
  }
}

void setup()
{
  pinMode(FL, INPUT);
 80a0762:	8820      	ldrh	r0, [r4, #0]
  pinMode(FR, INPUT);
  pinMode(BL, INPUT);
 80a0764:	f8df 9134 	ldr.w	r9, [pc, #308]	; 80a089c <setup+0x144>
  }
}

void setup()
{
  pinMode(FL, INPUT);
 80a0768:	2100      	movs	r1, #0
 80a076a:	f001 fde3 	bl	80a2334 <pinMode>
  pinMode(FR, INPUT);
  pinMode(BL, INPUT);
  pinMode(BR, INPUT);
 80a076e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80a08a0 <setup+0x148>
}

void setup()
{
  pinMode(FL, INPUT);
  pinMode(FR, INPUT);
 80a0772:	f8ba 0000 	ldrh.w	r0, [sl]
 80a0776:	2100      	movs	r1, #0
 80a0778:	f001 fddc 	bl	80a2334 <pinMode>
  pinMode(BL, INPUT);
  pinMode(BR, INPUT);

  pinMode(RS, INPUT);
 80a077c:	4f3b      	ldr	r7, [pc, #236]	; (80a086c <setup+0x114>)

void setup()
{
  pinMode(FL, INPUT);
  pinMode(FR, INPUT);
  pinMode(BL, INPUT);
 80a077e:	f8b9 0000 	ldrh.w	r0, [r9]
 80a0782:	2100      	movs	r1, #0
 80a0784:	f001 fdd6 	bl	80a2334 <pinMode>
  pinMode(BR, INPUT);

  pinMode(RS, INPUT);

  pinMode(Lmotor, OUTPUT);
 80a0788:	4e39      	ldr	r6, [pc, #228]	; (80a0870 <setup+0x118>)
void setup()
{
  pinMode(FL, INPUT);
  pinMode(FR, INPUT);
  pinMode(BL, INPUT);
  pinMode(BR, INPUT);
 80a078a:	f8b8 0000 	ldrh.w	r0, [r8]
 80a078e:	2100      	movs	r1, #0
 80a0790:	f001 fdd0 	bl	80a2334 <pinMode>

  pinMode(RS, INPUT);

  pinMode(Lmotor, OUTPUT);
  pinMode(Rmotor, OUTPUT);
 80a0794:	4d37      	ldr	r5, [pc, #220]	; (80a0874 <setup+0x11c>)
  pinMode(FL, INPUT);
  pinMode(FR, INPUT);
  pinMode(BL, INPUT);
  pinMode(BR, INPUT);

  pinMode(RS, INPUT);
 80a0796:	8838      	ldrh	r0, [r7, #0]
 80a0798:	2100      	movs	r1, #0
 80a079a:	f001 fdcb 	bl	80a2334 <pinMode>

  pinMode(Lmotor, OUTPUT);
 80a079e:	8830      	ldrh	r0, [r6, #0]
 80a07a0:	2101      	movs	r1, #1
 80a07a2:	f001 fdc7 	bl	80a2334 <pinMode>
  pinMode(Rmotor, OUTPUT);
 80a07a6:	2101      	movs	r1, #1
 80a07a8:	8828      	ldrh	r0, [r5, #0]
 80a07aa:	f001 fdc3 	bl	80a2334 <pinMode>

  Serial.begin(9600);
 80a07ae:	f001 fc2b 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a07b2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a07b6:	f001 fc0d 	bl	80a1fd4 <_ZN9USBSerial5beginEl>

  tof_init();
 80a07ba:	f7ff fcc9 	bl	80a0150 <_Z8tof_initv>
  accel_init();
 80a07be:	f7ff fd7b 	bl	80a02b8 <_Z10accel_initv>

  attachInterrupt(FL,FLISR,FALLING);
 80a07c2:	8820      	ldrh	r0, [r4, #0]
 80a07c4:	2400      	movs	r4, #0
 80a07c6:	9400      	str	r4, [sp, #0]
 80a07c8:	f04f 33ff 	mov.w	r3, #4294967295
 80a07cc:	2202      	movs	r2, #2
 80a07ce:	492a      	ldr	r1, [pc, #168]	; (80a0878 <setup+0x120>)
 80a07d0:	f001 fc7e 	bl	80a20d0 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(FR,FRISR,FALLING);
 80a07d4:	f8ba 0000 	ldrh.w	r0, [sl]
 80a07d8:	9400      	str	r4, [sp, #0]
 80a07da:	f04f 33ff 	mov.w	r3, #4294967295
 80a07de:	2202      	movs	r2, #2
 80a07e0:	4926      	ldr	r1, [pc, #152]	; (80a087c <setup+0x124>)
 80a07e2:	f001 fc75 	bl	80a20d0 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(BL,BLISR,FALLING);
 80a07e6:	f8b9 0000 	ldrh.w	r0, [r9]
 80a07ea:	9400      	str	r4, [sp, #0]
 80a07ec:	f04f 33ff 	mov.w	r3, #4294967295
 80a07f0:	2202      	movs	r2, #2
 80a07f2:	4923      	ldr	r1, [pc, #140]	; (80a0880 <setup+0x128>)
 80a07f4:	f001 fc6c 	bl	80a20d0 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(BR,BRISR,FALLING);
 80a07f8:	f8b8 0000 	ldrh.w	r0, [r8]
 80a07fc:	9400      	str	r4, [sp, #0]
 80a07fe:	f04f 33ff 	mov.w	r3, #4294967295
 80a0802:	2202      	movs	r2, #2
 80a0804:	491f      	ldr	r1, [pc, #124]	; (80a0884 <setup+0x12c>)
 80a0806:	f001 fc63 	bl	80a20d0 <_Z15attachInterrupttPFvvE13InterruptModeah>

  attachInterrupt(RS,RSISR,CHANGE);
 80a080a:	8838      	ldrh	r0, [r7, #0]
 80a080c:	4622      	mov	r2, r4

  LESC.attach(Lmotor);
 80a080e:	4f1e      	ldr	r7, [pc, #120]	; (80a0888 <setup+0x130>)
  attachInterrupt(FL,FLISR,FALLING);
  attachInterrupt(FR,FRISR,FALLING);
  attachInterrupt(BL,BLISR,FALLING);
  attachInterrupt(BR,BRISR,FALLING);

  attachInterrupt(RS,RSISR,CHANGE);
 80a0810:	9400      	str	r4, [sp, #0]
 80a0812:	f04f 33ff 	mov.w	r3, #4294967295
 80a0816:	491d      	ldr	r1, [pc, #116]	; (80a088c <setup+0x134>)
 80a0818:	f001 fc5a 	bl	80a20d0 <_Z15attachInterrupttPFvvE13InterruptModeah>

  LESC.attach(Lmotor);
 80a081c:	8831      	ldrh	r1, [r6, #0]
 80a081e:	26b4      	movs	r6, #180	; 0xb4
 80a0820:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a0824:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a0828:	e88d 0050 	stmia.w	sp, {r4, r6}
 80a082c:	4638      	mov	r0, r7
 80a082e:	f001 f9b0 	bl	80a1b92 <_ZN5Servo6attachEtttss>
  LESC.writeMicroseconds(1500);
 80a0832:	4638      	mov	r0, r7
 80a0834:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a0838:	f001 f977 	bl	80a1b2a <_ZN5Servo17writeMicrosecondsEt>
  RESC.attach(Rmotor);
 80a083c:	8829      	ldrh	r1, [r5, #0]
 80a083e:	4d14      	ldr	r5, [pc, #80]	; (80a0890 <setup+0x138>)
 80a0840:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a0844:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a0848:	e88d 0050 	stmia.w	sp, {r4, r6}
 80a084c:	4628      	mov	r0, r5
 80a084e:	f001 f9a0 	bl	80a1b92 <_ZN5Servo6attachEtttss>
  RESC.writeMicroseconds(1500);
 80a0852:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a0856:	4628      	mov	r0, r5
 80a0858:	f001 f967 	bl	80a1b2a <_ZN5Servo17writeMicrosecondsEt>

  moving = true;
 80a085c:	4b0d      	ldr	r3, [pc, #52]	; (80a0894 <setup+0x13c>)
 80a085e:	2201      	movs	r2, #1
 80a0860:	701a      	strb	r2, [r3, #0]

  //state = 11;
}
 80a0862:	b002      	add	sp, #8
 80a0864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0868:	20000338 	.word	0x20000338
 80a086c:	20000300 	.word	0x20000300
 80a0870:	20000348 	.word	0x20000348
 80a0874:	2000033c 	.word	0x2000033c
 80a0878:	080a00b1 	.word	0x080a00b1
 80a087c:	080a00d1 	.word	0x080a00d1
 80a0880:	080a00f1 	.word	0x080a00f1
 80a0884:	080a0111 	.word	0x080a0111
 80a0888:	2000037c 	.word	0x2000037c
 80a088c:	080a0131 	.word	0x080a0131
 80a0890:	200003dc 	.word	0x200003dc
 80a0894:	20000378 	.word	0x20000378
 80a0898:	20000310 	.word	0x20000310
 80a089c:	20000330 	.word	0x20000330
 80a08a0:	20000334 	.word	0x20000334

080a08a4 <loop>:

void loop()
{
 80a08a4:	b508      	push	{r3, lr}
  if (!FLflag || !FRflag || !BRflag || !BLflag) {
 80a08a6:	4b10      	ldr	r3, [pc, #64]	; (80a08e8 <loop+0x44>)
 80a08a8:	781b      	ldrb	r3, [r3, #0]
 80a08aa:	b143      	cbz	r3, 80a08be <loop+0x1a>
 80a08ac:	4b0f      	ldr	r3, [pc, #60]	; (80a08ec <loop+0x48>)
 80a08ae:	781b      	ldrb	r3, [r3, #0]
 80a08b0:	b12b      	cbz	r3, 80a08be <loop+0x1a>
 80a08b2:	4b0f      	ldr	r3, [pc, #60]	; (80a08f0 <loop+0x4c>)
 80a08b4:	781b      	ldrb	r3, [r3, #0]
 80a08b6:	b113      	cbz	r3, 80a08be <loop+0x1a>
 80a08b8:	4b0e      	ldr	r3, [pc, #56]	; (80a08f4 <loop+0x50>)
 80a08ba:	781b      	ldrb	r3, [r3, #0]
 80a08bc:	b92b      	cbnz	r3, 80a08ca <loop+0x26>
    moving = false;
 80a08be:	4b0e      	ldr	r3, [pc, #56]	; (80a08f8 <loop+0x54>)
 80a08c0:	2200      	movs	r2, #0
 80a08c2:	701a      	strb	r2, [r3, #0]
    stop();
 80a08c4:	f7ff fe40 	bl	80a0548 <_Z4stopv>
 80a08c8:	e002      	b.n	80a08d0 <loop+0x2c>
  } else {
    movement(0);
 80a08ca:	2000      	movs	r0, #0
 80a08cc:	f7ff fe4e 	bl	80a056c <_Z8movementi>
 80a08d0:	f000 ffca 	bl	80a1868 <HAL_Timer_Get_Milli_Seconds>
  }

  cur = millis();
 80a08d4:	4b09      	ldr	r3, [pc, #36]	; (80a08fc <loop+0x58>)
 80a08d6:	6018      	str	r0, [r3, #0]
  prevFlag = cur;
 80a08d8:	4b09      	ldr	r3, [pc, #36]	; (80a0900 <loop+0x5c>)
 80a08da:	6018      	str	r0, [r3, #0]

  runDiagnostic();
 80a08dc:	f7ff fd06 	bl	80a02ec <_Z13runDiagnosticv>
  stop();
}
 80a08e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  cur = millis();
  prevFlag = cur;

  runDiagnostic();
  stop();
 80a08e4:	f7ff be30 	b.w	80a0548 <_Z4stopv>
 80a08e8:	20000379 	.word	0x20000379
 80a08ec:	200003f1 	.word	0x200003f1
 80a08f0:	200003a4 	.word	0x200003a4
 80a08f4:	2000040e 	.word	0x2000040e
 80a08f8:	20000378 	.word	0x20000378
 80a08fc:	200003ec 	.word	0x200003ec
 80a0900:	200003d8 	.word	0x200003d8

080a0904 <_GLOBAL__sub_I_sensor0>:
}
 80a0904:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0906:	f000 ff57 	bl	80a17b8 <HAL_Pin_Map>

#if !defined(PARTICLE)
#  include <Wire.h>
#endif

VL53L0X sensor0;
 80a090a:	4814      	ldr	r0, [pc, #80]	; (80a095c <_GLOBAL__sub_I_sensor0+0x58>)
 80a090c:	f000 f840 	bl	80a0990 <_ZN7VL53L0XC1Ev>
VL53L0X sensor1;
 80a0910:	4813      	ldr	r0, [pc, #76]	; (80a0960 <_GLOBAL__sub_I_sensor0+0x5c>)
 80a0912:	f000 f83d 	bl	80a0990 <_ZN7VL53L0XC1Ev>
VL53L0X sensor2;
 80a0916:	4813      	ldr	r0, [pc, #76]	; (80a0964 <_GLOBAL__sub_I_sensor0+0x60>)
 80a0918:	f000 f83a 	bl	80a0990 <_ZN7VL53L0XC1Ev>
VL53L0X sensor3;
 80a091c:	4812      	ldr	r0, [pc, #72]	; (80a0968 <_GLOBAL__sub_I_sensor0+0x64>)
 80a091e:	f000 f837 	bl	80a0990 <_ZN7VL53L0XC1Ev>

Servo LESC;
 80a0922:	4812      	ldr	r0, [pc, #72]	; (80a096c <_GLOBAL__sub_I_sensor0+0x68>)
 80a0924:	f001 f921 	bl	80a1b6a <_ZN5ServoC1Ev>
Servo RESC;
 80a0928:	4811      	ldr	r0, [pc, #68]	; (80a0970 <_GLOBAL__sub_I_sensor0+0x6c>)
 80a092a:	f001 f91e 	bl	80a1b6a <_ZN5ServoC1Ev>
boolean BRflag = false;

// remote start flag
boolean RSflag = false;

SYSTEM_THREAD(ENABLED);
 80a092e:	2100      	movs	r1, #0
 80a0930:	2001      	movs	r0, #1
 80a0932:	f001 f8ab 	bl	80a1a8c <system_thread_set_state>

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0936:	2003      	movs	r0, #3
 80a0938:	f001 f898 	bl	80a1a6c <set_system_mode>
SYSTEM_MODE(MANUAL);	// fully offline

// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
 80a093c:	f001 fd72 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0940:	4c0c      	ldr	r4, [pc, #48]	; (80a0974 <_GLOBAL__sub_I_sensor0+0x70>)
 80a0942:	4601      	mov	r1, r0
 80a0944:	2200      	movs	r2, #0
 80a0946:	4620      	mov	r0, r4
 80a0948:	2311      	movs	r3, #17
 80a094a:	f000 ff29 	bl	80a17a0 <_ZN9LIS3DHI2CC1ER7TwoWirehi>
 80a094e:	4620      	mov	r0, r4
  cur = millis();
  prevFlag = cur;

  runDiagnostic();
  stop();
}
 80a0950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(MANUAL);	// fully offline

// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
 80a0954:	4a08      	ldr	r2, [pc, #32]	; (80a0978 <_GLOBAL__sub_I_sensor0+0x74>)
 80a0956:	4909      	ldr	r1, [pc, #36]	; (80a097c <_GLOBAL__sub_I_sensor0+0x78>)
 80a0958:	f001 bd84 	b.w	80a2464 <__aeabi_atexit>
 80a095c:	200003f4 	.word	0x200003f4
 80a0960:	200003a8 	.word	0x200003a8
 80a0964:	2000035c 	.word	0x2000035c
 80a0968:	200003c0 	.word	0x200003c0
 80a096c:	2000037c 	.word	0x2000037c
 80a0970:	200003dc 	.word	0x200003dc
 80a0974:	2000038c 	.word	0x2000038c
 80a0978:	20000358 	.word	0x20000358
 80a097c:	080a1565 	.word	0x080a1565

080a0980 <_ZN7TwoWire5writeEm>:
  virtual int peek(void);
  virtual void flush(void);
  void onReceive(void (*)(int));
  void onRequest(void (*)(void));

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
 80a0980:	6803      	ldr	r3, [r0, #0]
 80a0982:	b2c9      	uxtb	r1, r1
 80a0984:	689b      	ldr	r3, [r3, #8]
 80a0986:	4718      	bx	r3

080a0988 <_ZN7TwoWire5writeEi>:
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0988:	6803      	ldr	r3, [r0, #0]
 80a098a:	b2c9      	uxtb	r1, r1
 80a098c:	689b      	ldr	r3, [r3, #8]
 80a098e:	4718      	bx	r3

080a0990 <_ZN7VL53L0XC1Ev>:
// Constructors ////////////////////////////////////////////////////////////////

VL53L0X::VL53L0X(void)
  : address(ADDRESS_DEFAULT)
  , io_timeout(0) // no timeout
  , did_timeout(false)
 80a0990:	2229      	movs	r2, #41	; 0x29
 80a0992:	7042      	strb	r2, [r0, #1]
 80a0994:	2200      	movs	r2, #0
 80a0996:	6042      	str	r2, [r0, #4]
 80a0998:	7202      	strb	r2, [r0, #8]
{
}
 80a099a:	4770      	bx	lr

080a099c <_ZN7VL53L0X8writeRegEhh>:
  return true;
}

// Write an 8-bit register
void VL53L0X::writeReg(uint8_t reg, uint8_t value)
{
 80a099c:	b570      	push	{r4, r5, r6, lr}
 80a099e:	4604      	mov	r4, r0
 80a09a0:	4615      	mov	r5, r2
 80a09a2:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a09a4:	f001 fd3e 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a09a8:	7861      	ldrb	r1, [r4, #1]
 80a09aa:	f001 fc7a 	bl	80a22a2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a09ae:	f001 fd39 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a09b2:	6803      	ldr	r3, [r0, #0]
 80a09b4:	4631      	mov	r1, r6
 80a09b6:	689b      	ldr	r3, [r3, #8]
 80a09b8:	4798      	blx	r3
  Wire.write(value);
 80a09ba:	f001 fd33 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a09be:	6803      	ldr	r3, [r0, #0]
 80a09c0:	4629      	mov	r1, r5
 80a09c2:	689b      	ldr	r3, [r3, #8]
 80a09c4:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a09c6:	f001 fd2d 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a09ca:	f001 fc72 	bl	80a22b2 <_ZN7TwoWire15endTransmissionEv>
 80a09ce:	7020      	strb	r0, [r4, #0]
 80a09d0:	bd70      	pop	{r4, r5, r6, pc}

080a09d2 <_ZN7VL53L0X10setAddressEh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void VL53L0X::setAddress(uint8_t new_addr)
{
 80a09d2:	b538      	push	{r3, r4, r5, lr}
 80a09d4:	4605      	mov	r5, r0
 80a09d6:	460c      	mov	r4, r1
  writeReg(I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 80a09d8:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80a09dc:	218a      	movs	r1, #138	; 0x8a
 80a09de:	f7ff ffdd 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  address = new_addr;
 80a09e2:	706c      	strb	r4, [r5, #1]
 80a09e4:	bd38      	pop	{r3, r4, r5, pc}

080a09e6 <_ZN7VL53L0X13writeReg16BitEht>:
  last_status = Wire.endTransmission();
}

// Write a 16-bit register
void VL53L0X::writeReg16Bit(uint8_t reg, uint16_t value)
{
 80a09e6:	b570      	push	{r4, r5, r6, lr}
 80a09e8:	4604      	mov	r4, r0
 80a09ea:	4615      	mov	r5, r2
 80a09ec:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a09ee:	f001 fd19 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a09f2:	7861      	ldrb	r1, [r4, #1]
 80a09f4:	f001 fc55 	bl	80a22a2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a09f8:	f001 fd14 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a09fc:	6803      	ldr	r3, [r0, #0]
 80a09fe:	4631      	mov	r1, r6
 80a0a00:	689b      	ldr	r3, [r3, #8]
 80a0a02:	4798      	blx	r3
  Wire.write((value >> 8) & 0xFF); // value high byte
 80a0a04:	f001 fd0e 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0a08:	0a29      	lsrs	r1, r5, #8
 80a0a0a:	f7ff ffbd 	bl	80a0988 <_ZN7TwoWire5writeEi>
  Wire.write( value       & 0xFF); // value low byte
 80a0a0e:	f001 fd09 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0a12:	b2e9      	uxtb	r1, r5
 80a0a14:	f7ff ffb8 	bl	80a0988 <_ZN7TwoWire5writeEi>
  last_status = Wire.endTransmission();
 80a0a18:	f001 fd04 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0a1c:	f001 fc49 	bl	80a22b2 <_ZN7TwoWire15endTransmissionEv>
 80a0a20:	7020      	strb	r0, [r4, #0]
 80a0a22:	bd70      	pop	{r4, r5, r6, pc}

080a0a24 <_ZN7VL53L0X13writeReg32BitEhm>:
}

// Write a 32-bit register
void VL53L0X::writeReg32Bit(uint8_t reg, uint32_t value)
{
 80a0a24:	b570      	push	{r4, r5, r6, lr}
 80a0a26:	4605      	mov	r5, r0
 80a0a28:	4614      	mov	r4, r2
 80a0a2a:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a0a2c:	f001 fcfa 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0a30:	7869      	ldrb	r1, [r5, #1]
 80a0a32:	f001 fc36 	bl	80a22a2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0a36:	f001 fcf5 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0a3a:	6803      	ldr	r3, [r0, #0]
 80a0a3c:	4631      	mov	r1, r6
 80a0a3e:	689b      	ldr	r3, [r3, #8]
 80a0a40:	4798      	blx	r3
  Wire.write((value >> 24) & 0xFF); // value highest byte
 80a0a42:	f001 fcef 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0a46:	0e21      	lsrs	r1, r4, #24
 80a0a48:	f7ff ff9a 	bl	80a0980 <_ZN7TwoWire5writeEm>
  Wire.write((value >> 16) & 0xFF);
 80a0a4c:	f001 fcea 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0a50:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80a0a54:	f7ff ff94 	bl	80a0980 <_ZN7TwoWire5writeEm>
  Wire.write((value >>  8) & 0xFF);
 80a0a58:	f001 fce4 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0a5c:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80a0a60:	f7ff ff8e 	bl	80a0980 <_ZN7TwoWire5writeEm>
  Wire.write( value        & 0xFF); // value lowest byte
 80a0a64:	f001 fcde 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0a68:	b2e1      	uxtb	r1, r4
 80a0a6a:	f7ff ff89 	bl	80a0980 <_ZN7TwoWire5writeEm>
  last_status = Wire.endTransmission();
 80a0a6e:	f001 fcd9 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0a72:	f001 fc1e 	bl	80a22b2 <_ZN7TwoWire15endTransmissionEv>
 80a0a76:	7028      	strb	r0, [r5, #0]
 80a0a78:	bd70      	pop	{r4, r5, r6, pc}

080a0a7a <_ZN7VL53L0X7readRegEh>:
}

// Read an 8-bit register
uint8_t VL53L0X::readReg(uint8_t reg)
{
 80a0a7a:	b538      	push	{r3, r4, r5, lr}
 80a0a7c:	4604      	mov	r4, r0
 80a0a7e:	460d      	mov	r5, r1
  uint8_t value;

  Wire.beginTransmission(address);
 80a0a80:	f001 fcd0 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0a84:	7861      	ldrb	r1, [r4, #1]
 80a0a86:	f001 fc0c 	bl	80a22a2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0a8a:	f001 fccb 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0a8e:	6803      	ldr	r3, [r0, #0]
 80a0a90:	4629      	mov	r1, r5
 80a0a92:	689b      	ldr	r3, [r3, #8]
 80a0a94:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a0a96:	f001 fcc5 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0a9a:	f001 fc0a 	bl	80a22b2 <_ZN7TwoWire15endTransmissionEv>
 80a0a9e:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)1);
 80a0aa0:	f001 fcc0 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0aa4:	2201      	movs	r2, #1
 80a0aa6:	7861      	ldrb	r1, [r4, #1]
 80a0aa8:	f001 fbf3 	bl	80a2292 <_ZN7TwoWire11requestFromEhh>
  value = Wire.read();
 80a0aac:	f001 fcba 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0ab0:	6803      	ldr	r3, [r0, #0]
 80a0ab2:	695b      	ldr	r3, [r3, #20]
 80a0ab4:	4798      	blx	r3

  return value;
}
 80a0ab6:	b2c0      	uxtb	r0, r0
 80a0ab8:	bd38      	pop	{r3, r4, r5, pc}

080a0aba <_ZN7VL53L0X12readReg16BitEh>:

// Read a 16-bit register
uint16_t VL53L0X::readReg16Bit(uint8_t reg)
{
 80a0aba:	b538      	push	{r3, r4, r5, lr}
 80a0abc:	4604      	mov	r4, r0
 80a0abe:	460d      	mov	r5, r1
  uint16_t value;

  Wire.beginTransmission(address);
 80a0ac0:	f001 fcb0 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0ac4:	7861      	ldrb	r1, [r4, #1]
 80a0ac6:	f001 fbec 	bl	80a22a2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0aca:	f001 fcab 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0ace:	6803      	ldr	r3, [r0, #0]
 80a0ad0:	4629      	mov	r1, r5
 80a0ad2:	689b      	ldr	r3, [r3, #8]
 80a0ad4:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a0ad6:	f001 fca5 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0ada:	f001 fbea 	bl	80a22b2 <_ZN7TwoWire15endTransmissionEv>
 80a0ade:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)2);
 80a0ae0:	f001 fca0 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0ae4:	7861      	ldrb	r1, [r4, #1]
 80a0ae6:	2202      	movs	r2, #2
 80a0ae8:	f001 fbd3 	bl	80a2292 <_ZN7TwoWire11requestFromEhh>
  value  = (uint16_t)Wire.read() << 8; // value high byte
 80a0aec:	f001 fc9a 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0af0:	6803      	ldr	r3, [r0, #0]
 80a0af2:	695b      	ldr	r3, [r3, #20]
 80a0af4:	4798      	blx	r3
 80a0af6:	4604      	mov	r4, r0
  value |=           Wire.read();      // value low byte
 80a0af8:	f001 fc94 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0afc:	6803      	ldr	r3, [r0, #0]
 80a0afe:	695b      	ldr	r3, [r3, #20]
 80a0b00:	4798      	blx	r3
 80a0b02:	ea40 2004 	orr.w	r0, r0, r4, lsl #8

  return value;
}
 80a0b06:	b280      	uxth	r0, r0
 80a0b08:	bd38      	pop	{r3, r4, r5, pc}

080a0b0a <_ZN7VL53L0X10writeMultiEhPKhh>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
 80a0b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b0c:	4606      	mov	r6, r0
 80a0b0e:	4614      	mov	r4, r2
 80a0b10:	461d      	mov	r5, r3
 80a0b12:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a0b14:	f001 fc86 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0b18:	7871      	ldrb	r1, [r6, #1]
 80a0b1a:	f001 fbc2 	bl	80a22a2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0b1e:	f001 fc81 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0b22:	6803      	ldr	r3, [r0, #0]
 80a0b24:	4639      	mov	r1, r7
 80a0b26:	689b      	ldr	r3, [r3, #8]
 80a0b28:	4798      	blx	r3
 80a0b2a:	4425      	add	r5, r4

  while (count-- > 0)
 80a0b2c:	42ac      	cmp	r4, r5
 80a0b2e:	d007      	beq.n	80a0b40 <_ZN7VL53L0X10writeMultiEhPKhh+0x36>
  {
    Wire.write(*(src++));
 80a0b30:	f001 fc78 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0b34:	6803      	ldr	r3, [r0, #0]
 80a0b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0b3a:	689b      	ldr	r3, [r3, #8]
 80a0b3c:	4798      	blx	r3
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
  Wire.beginTransmission(address);
  Wire.write(reg);

  while (count-- > 0)
 80a0b3e:	e7f5      	b.n	80a0b2c <_ZN7VL53L0X10writeMultiEhPKhh+0x22>
  {
    Wire.write(*(src++));
  }

  last_status = Wire.endTransmission();
 80a0b40:	f001 fc70 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0b44:	f001 fbb5 	bl	80a22b2 <_ZN7TwoWire15endTransmissionEv>
 80a0b48:	7030      	strb	r0, [r6, #0]
 80a0b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0b4c <_ZN7VL53L0X9readMultiEhPhh>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void VL53L0X::readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 80a0b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b4e:	4606      	mov	r6, r0
 80a0b50:	4614      	mov	r4, r2
 80a0b52:	461d      	mov	r5, r3
 80a0b54:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a0b56:	f001 fc65 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0b5a:	7871      	ldrb	r1, [r6, #1]
 80a0b5c:	f001 fba1 	bl	80a22a2 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0b60:	f001 fc60 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0b64:	6803      	ldr	r3, [r0, #0]
 80a0b66:	4639      	mov	r1, r7
 80a0b68:	689b      	ldr	r3, [r3, #8]
 80a0b6a:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a0b6c:	f001 fc5a 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0b70:	f001 fb9f 	bl	80a22b2 <_ZN7TwoWire15endTransmissionEv>
 80a0b74:	7030      	strb	r0, [r6, #0]

  Wire.requestFrom(address, count);
 80a0b76:	f001 fc55 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0b7a:	462a      	mov	r2, r5
 80a0b7c:	7871      	ldrb	r1, [r6, #1]
 80a0b7e:	f001 fb88 	bl	80a2292 <_ZN7TwoWire11requestFromEhh>
 80a0b82:	4425      	add	r5, r4

  while (count-- > 0)
 80a0b84:	42ac      	cmp	r4, r5
 80a0b86:	d007      	beq.n	80a0b98 <_ZN7VL53L0X9readMultiEhPhh+0x4c>
  {
    *(dst++) = Wire.read();
 80a0b88:	f001 fc4c 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a0b8c:	6803      	ldr	r3, [r0, #0]
 80a0b8e:	695b      	ldr	r3, [r3, #20]
 80a0b90:	4798      	blx	r3
 80a0b92:	f804 0b01 	strb.w	r0, [r4], #1
  Wire.write(reg);
  last_status = Wire.endTransmission();

  Wire.requestFrom(address, count);

  while (count-- > 0)
 80a0b96:	e7f5      	b.n	80a0b84 <_ZN7VL53L0X9readMultiEhPhh+0x38>
 80a0b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0b9a:	0000      	movs	r0, r0
 80a0b9c:	0000      	movs	r0, r0
	...

080a0ba0 <_ZN7VL53L0X18setSignalRateLimitEf>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
 80a0ba0:	b570      	push	{r4, r5, r6, lr}
 80a0ba2:	460d      	mov	r5, r1
 80a0ba4:	4606      	mov	r6, r0
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a0ba6:	2100      	movs	r1, #0
 80a0ba8:	4628      	mov	r0, r5
 80a0baa:	f002 f987 	bl	80a2ebc <__aeabi_fcmplt>
 80a0bae:	b9b0      	cbnz	r0, 80a0bde <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>
 80a0bb0:	4628      	mov	r0, r5
 80a0bb2:	f001 ff09 	bl	80a29c8 <__aeabi_f2d>
 80a0bb6:	a30c      	add	r3, pc, #48	; (adr r3, 80a0be8 <_ZN7VL53L0X18setSignalRateLimitEf+0x48>)
 80a0bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0bbc:	f001 ffd6 	bl	80a2b6c <__aeabi_dcmpgt>
 80a0bc0:	b968      	cbnz	r0, 80a0bde <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80a0bc2:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80a0bc6:	4628      	mov	r0, r5
 80a0bc8:	f001 ffda 	bl	80a2b80 <__aeabi_fmul>
 80a0bcc:	f002 f99e 	bl	80a2f0c <__aeabi_f2uiz>
 80a0bd0:	2144      	movs	r1, #68	; 0x44
 80a0bd2:	b282      	uxth	r2, r0
 80a0bd4:	4630      	mov	r0, r6
 80a0bd6:	f7ff ff06 	bl	80a09e6 <_ZN7VL53L0X13writeReg16BitEht>
 80a0bda:	2001      	movs	r0, #1
 80a0bdc:	bd70      	pop	{r4, r5, r6, pc}
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a0bde:	2000      	movs	r0, #0
 80a0be0:	bd70      	pop	{r4, r5, r6, pc}
 80a0be2:	bf00      	nop
 80a0be4:	f3af 8000 	nop.w
 80a0be8:	0a3d70a4 	.word	0x0a3d70a4
 80a0bec:	407fffd7 	.word	0x407fffd7

080a0bf0 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>:
}

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t VL53L0X::getVcselPulsePeriod(vcselPeriodType type)
{
 80a0bf0:	b508      	push	{r3, lr}
  if (type == VcselPeriodPreRange)
 80a0bf2:	b909      	cbnz	r1, 80a0bf8 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x8>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80a0bf4:	2150      	movs	r1, #80	; 0x50
 80a0bf6:	e002      	b.n	80a0bfe <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0xe>
  }
  else if (type == VcselPeriodFinalRange)
 80a0bf8:	2901      	cmp	r1, #1
 80a0bfa:	d106      	bne.n	80a0c0a <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x1a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a0bfc:	2170      	movs	r1, #112	; 0x70
 80a0bfe:	f7ff ff3c 	bl	80a0a7a <_ZN7VL53L0X7readRegEh>
 80a0c02:	3001      	adds	r0, #1
 80a0c04:	0040      	lsls	r0, r0, #1
 80a0c06:	b2c0      	uxtb	r0, r0
 80a0c08:	bd08      	pop	{r3, pc}
  }
  else { return 255; }
 80a0c0a:	20ff      	movs	r0, #255	; 0xff
}
 80a0c0c:	bd08      	pop	{r3, pc}

080a0c0e <_ZN7VL53L0X15startContinuousEm>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X::startContinuous(uint32_t period_ms)
{
 80a0c0e:	b538      	push	{r3, r4, r5, lr}
 80a0c10:	4604      	mov	r4, r0
 80a0c12:	460d      	mov	r5, r1
  writeReg(0x80, 0x01);
 80a0c14:	2201      	movs	r2, #1
 80a0c16:	2180      	movs	r1, #128	; 0x80
 80a0c18:	f7ff fec0 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0c1c:	2201      	movs	r2, #1
 80a0c1e:	21ff      	movs	r1, #255	; 0xff
 80a0c20:	4620      	mov	r0, r4
 80a0c22:	f7ff febb 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a0c26:	2200      	movs	r2, #0
 80a0c28:	4611      	mov	r1, r2
 80a0c2a:	4620      	mov	r0, r4
 80a0c2c:	f7ff feb6 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x91, stop_variable);
 80a0c30:	7c22      	ldrb	r2, [r4, #16]
 80a0c32:	2191      	movs	r1, #145	; 0x91
 80a0c34:	4620      	mov	r0, r4
 80a0c36:	f7ff feb1 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a0c3a:	2201      	movs	r2, #1
 80a0c3c:	2100      	movs	r1, #0
 80a0c3e:	4620      	mov	r0, r4
 80a0c40:	f7ff feac 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a0c44:	2200      	movs	r2, #0
 80a0c46:	21ff      	movs	r1, #255	; 0xff
 80a0c48:	4620      	mov	r0, r4
 80a0c4a:	f7ff fea7 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a0c4e:	2200      	movs	r2, #0
 80a0c50:	2180      	movs	r1, #128	; 0x80
 80a0c52:	4620      	mov	r0, r4
 80a0c54:	f7ff fea2 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  if (period_ms != 0)
 80a0c58:	b16d      	cbz	r5, 80a0c76 <_ZN7VL53L0X15startContinuousEm+0x68>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 80a0c5a:	21f8      	movs	r1, #248	; 0xf8
 80a0c5c:	4620      	mov	r0, r4
 80a0c5e:	f7ff ff2c 	bl	80a0aba <_ZN7VL53L0X12readReg16BitEh>

    if (osc_calibrate_val != 0)
 80a0c62:	b100      	cbz	r0, 80a0c66 <_ZN7VL53L0X15startContinuousEm+0x58>
    {
      period_ms *= osc_calibrate_val;
 80a0c64:	4345      	muls	r5, r0
    }

    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 80a0c66:	462a      	mov	r2, r5
 80a0c68:	2104      	movs	r1, #4
 80a0c6a:	4620      	mov	r0, r4
 80a0c6c:	f7ff feda 	bl	80a0a24 <_ZN7VL53L0X13writeReg32BitEhm>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 80a0c70:	2204      	movs	r2, #4
 80a0c72:	2100      	movs	r1, #0
 80a0c74:	e001      	b.n	80a0c7a <_ZN7VL53L0X15startContinuousEm+0x6c>
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a0c76:	4629      	mov	r1, r5
 80a0c78:	2202      	movs	r2, #2
 80a0c7a:	4620      	mov	r0, r4
  }
}
 80a0c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a0c80:	f7ff be8c 	b.w	80a099c <_ZN7VL53L0X8writeRegEhh>

080a0c84 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t VL53L0X::readRangeContinuousMillimeters(void)
{
 80a0c84:	b538      	push	{r3, r4, r5, lr}
 80a0c86:	4604      	mov	r4, r0
 80a0c88:	f000 fdee 	bl	80a1868 <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a0c8c:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a0c8e:	2113      	movs	r1, #19
 80a0c90:	4620      	mov	r0, r4
 80a0c92:	f7ff fef2 	bl	80a0a7a <_ZN7VL53L0X7readRegEh>
 80a0c96:	0743      	lsls	r3, r0, #29
 80a0c98:	d10e      	bne.n	80a0cb8 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0x34>
  {
    if (checkTimeoutExpired())
 80a0c9a:	6863      	ldr	r3, [r4, #4]
 80a0c9c:	2b00      	cmp	r3, #0
 80a0c9e:	d0f6      	beq.n	80a0c8e <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
 80a0ca0:	f000 fde2 	bl	80a1868 <HAL_Timer_Get_Milli_Seconds>
 80a0ca4:	68e3      	ldr	r3, [r4, #12]
 80a0ca6:	1ac0      	subs	r0, r0, r3
 80a0ca8:	6863      	ldr	r3, [r4, #4]
 80a0caa:	4298      	cmp	r0, r3
 80a0cac:	d9ef      	bls.n	80a0c8e <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
    {
      did_timeout = true;
 80a0cae:	2301      	movs	r3, #1
 80a0cb0:	7223      	strb	r3, [r4, #8]
      return 65535;
 80a0cb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  return range;
}
 80a0cb6:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);
 80a0cb8:	211e      	movs	r1, #30
 80a0cba:	4620      	mov	r0, r4
 80a0cbc:	f7ff fefd 	bl	80a0aba <_ZN7VL53L0X12readReg16BitEh>
 80a0cc0:	4605      	mov	r5, r0

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a0cc2:	2201      	movs	r2, #1
 80a0cc4:	4620      	mov	r0, r4
 80a0cc6:	210b      	movs	r1, #11
 80a0cc8:	f7ff fe68 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
 80a0ccc:	4628      	mov	r0, r5
 80a0cce:	bd38      	pop	{r3, r4, r5, pc}

080a0cd0 <_ZN7VL53L0X15timeoutOccurredEv>:
}

// Did a timeout occur in one of the read functions since the last call to
// timeoutOccurred()?
bool VL53L0X::timeoutOccurred()
{
 80a0cd0:	4603      	mov	r3, r0
  bool tmp = did_timeout;
  did_timeout = false;
 80a0cd2:	2200      	movs	r2, #0

// Did a timeout occur in one of the read functions since the last call to
// timeoutOccurred()?
bool VL53L0X::timeoutOccurred()
{
  bool tmp = did_timeout;
 80a0cd4:	7a00      	ldrb	r0, [r0, #8]
  did_timeout = false;
 80a0cd6:	721a      	strb	r2, [r3, #8]
  return tmp;
}
 80a0cd8:	4770      	bx	lr

080a0cda <_ZN7VL53L0X11getSpadInfoEPhPb>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X::getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80a0cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0cdc:	4604      	mov	r4, r0
 80a0cde:	460f      	mov	r7, r1
 80a0ce0:	4616      	mov	r6, r2
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80a0ce2:	2180      	movs	r1, #128	; 0x80
 80a0ce4:	2201      	movs	r2, #1
 80a0ce6:	f7ff fe59 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0cea:	2201      	movs	r2, #1
 80a0cec:	21ff      	movs	r1, #255	; 0xff
 80a0cee:	4620      	mov	r0, r4
 80a0cf0:	f7ff fe54 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a0cf4:	2200      	movs	r2, #0
 80a0cf6:	4611      	mov	r1, r2
 80a0cf8:	4620      	mov	r0, r4
 80a0cfa:	f7ff fe4f 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x06);
 80a0cfe:	2206      	movs	r2, #6
 80a0d00:	21ff      	movs	r1, #255	; 0xff
 80a0d02:	4620      	mov	r0, r4
 80a0d04:	f7ff fe4a 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg(0x83) | 0x04);
 80a0d08:	2183      	movs	r1, #131	; 0x83
 80a0d0a:	4620      	mov	r0, r4
 80a0d0c:	f7ff feb5 	bl	80a0a7a <_ZN7VL53L0X7readRegEh>
 80a0d10:	f040 0204 	orr.w	r2, r0, #4
 80a0d14:	b2d2      	uxtb	r2, r2
 80a0d16:	2183      	movs	r1, #131	; 0x83
 80a0d18:	4620      	mov	r0, r4
 80a0d1a:	f7ff fe3f 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x07);
 80a0d1e:	2207      	movs	r2, #7
 80a0d20:	21ff      	movs	r1, #255	; 0xff
 80a0d22:	4620      	mov	r0, r4
 80a0d24:	f7ff fe3a 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x81, 0x01);
 80a0d28:	2201      	movs	r2, #1
 80a0d2a:	2181      	movs	r1, #129	; 0x81
 80a0d2c:	4620      	mov	r0, r4
 80a0d2e:	f7ff fe35 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a0d32:	2201      	movs	r2, #1
 80a0d34:	2180      	movs	r1, #128	; 0x80
 80a0d36:	4620      	mov	r0, r4
 80a0d38:	f7ff fe30 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x94, 0x6b);
 80a0d3c:	226b      	movs	r2, #107	; 0x6b
 80a0d3e:	2194      	movs	r1, #148	; 0x94
 80a0d40:	4620      	mov	r0, r4
 80a0d42:	f7ff fe2b 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, 0x00);
 80a0d46:	2200      	movs	r2, #0
 80a0d48:	2183      	movs	r1, #131	; 0x83
 80a0d4a:	4620      	mov	r0, r4
 80a0d4c:	f7ff fe26 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
 80a0d50:	f000 fd8a 	bl	80a1868 <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a0d54:	60e0      	str	r0, [r4, #12]
  while (readReg(0x83) == 0x00)
 80a0d56:	2183      	movs	r1, #131	; 0x83
 80a0d58:	4620      	mov	r0, r4
 80a0d5a:	f7ff fe8e 	bl	80a0a7a <_ZN7VL53L0X7readRegEh>
 80a0d5e:	4605      	mov	r5, r0
 80a0d60:	b958      	cbnz	r0, 80a0d7a <_ZN7VL53L0X11getSpadInfoEPhPb+0xa0>
  {
    if (checkTimeoutExpired()) { return false; }
 80a0d62:	6863      	ldr	r3, [r4, #4]
 80a0d64:	2b00      	cmp	r3, #0
 80a0d66:	d0f6      	beq.n	80a0d56 <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a0d68:	f000 fd7e 	bl	80a1868 <HAL_Timer_Get_Milli_Seconds>
 80a0d6c:	68e3      	ldr	r3, [r4, #12]
 80a0d6e:	1ac0      	subs	r0, r0, r3
 80a0d70:	6863      	ldr	r3, [r4, #4]
 80a0d72:	4298      	cmp	r0, r3
 80a0d74:	d9ef      	bls.n	80a0d56 <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a0d76:	4628      	mov	r0, r5

  writeReg(0xFF, 0x00);
  writeReg(0x80, 0x00);

  return true;
}
 80a0d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  startTimeout();
  while (readReg(0x83) == 0x00)
  {
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
 80a0d7a:	2201      	movs	r2, #1
 80a0d7c:	4620      	mov	r0, r4
 80a0d7e:	2183      	movs	r1, #131	; 0x83
 80a0d80:	f7ff fe0c 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  tmp = readReg(0x92);
 80a0d84:	2192      	movs	r1, #146	; 0x92
 80a0d86:	4620      	mov	r0, r4
 80a0d88:	f7ff fe77 	bl	80a0a7a <_ZN7VL53L0X7readRegEh>

  *count = tmp & 0x7f;
 80a0d8c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a0d90:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
 80a0d94:	703b      	strb	r3, [r7, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;

  writeReg(0x81, 0x00);
 80a0d96:	2200      	movs	r2, #0
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a0d98:	7030      	strb	r0, [r6, #0]

  writeReg(0x81, 0x00);
 80a0d9a:	2181      	movs	r1, #129	; 0x81
 80a0d9c:	4620      	mov	r0, r4
 80a0d9e:	f7ff fdfd 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x06);
 80a0da2:	2206      	movs	r2, #6
 80a0da4:	4620      	mov	r0, r4
 80a0da6:	21ff      	movs	r1, #255	; 0xff
 80a0da8:	f7ff fdf8 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg( 0x83  & ~0x04));
 80a0dac:	2183      	movs	r1, #131	; 0x83
 80a0dae:	4620      	mov	r0, r4
 80a0db0:	f7ff fe63 	bl	80a0a7a <_ZN7VL53L0X7readRegEh>
 80a0db4:	2183      	movs	r1, #131	; 0x83
 80a0db6:	4602      	mov	r2, r0
 80a0db8:	4620      	mov	r0, r4
 80a0dba:	f7ff fdef 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0dbe:	4620      	mov	r0, r4
 80a0dc0:	2201      	movs	r2, #1
 80a0dc2:	21ff      	movs	r1, #255	; 0xff
 80a0dc4:	f7ff fdea 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a0dc8:	4620      	mov	r0, r4
 80a0dca:	2201      	movs	r2, #1
 80a0dcc:	2100      	movs	r1, #0
 80a0dce:	f7ff fde5 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0dd2:	4620      	mov	r0, r4
 80a0dd4:	2200      	movs	r2, #0
 80a0dd6:	21ff      	movs	r1, #255	; 0xff
 80a0dd8:	f7ff fde0 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a0ddc:	4620      	mov	r0, r4
 80a0dde:	2200      	movs	r2, #0
 80a0de0:	2180      	movs	r1, #128	; 0x80
 80a0de2:	f7ff fddb 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  return true;
 80a0de6:	2001      	movs	r0, #1
 80a0de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0dea <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>:
}

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X::getSequenceStepEnables(SequenceStepEnables * enables)
{
 80a0dea:	b510      	push	{r4, lr}
 80a0dec:	460c      	mov	r4, r1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 80a0dee:	2101      	movs	r1, #1
 80a0df0:	f7ff fe43 	bl	80a0a7a <_ZN7VL53L0X7readRegEh>

  enables->tcc          = (sequence_config >> 4) & 0x1;
 80a0df4:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80a0df8:	7023      	strb	r3, [r4, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 80a0dfa:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80a0dfe:	70a3      	strb	r3, [r4, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 80a0e00:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80a0e04:	7063      	strb	r3, [r4, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a0e06:	f3c0 1380 	ubfx	r3, r0, #6, #1
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a0e0a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);

  enables->tcc          = (sequence_config >> 4) & 0x1;
  enables->dss          = (sequence_config >> 3) & 0x1;
  enables->msrc         = (sequence_config >> 2) & 0x1;
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a0e0e:	70e3      	strb	r3, [r4, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a0e10:	7120      	strb	r0, [r4, #4]
 80a0e12:	bd10      	pop	{r4, pc}

080a0e14 <_ZN7VL53L0X13decodeTimeoutEm>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X::decodeTimeout(uint32_t reg_val)
{
 80a0e14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a0e18:	4298      	cmp	r0, r3
 80a0e1a:	bf28      	it	cs
 80a0e1c:	4618      	movcs	r0, r3
  if (reg_val > 0xFFFF) reg_val = 0xFFFF;
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80a0e1e:	b2c3      	uxtb	r3, r0
 80a0e20:	0a00      	lsrs	r0, r0, #8
 80a0e22:	fa03 f000 	lsl.w	r0, r3, r0
 80a0e26:	3001      	adds	r0, #1
}
 80a0e28:	b280      	uxth	r0, r0
 80a0e2a:	4770      	bx	lr

080a0e2c <_ZN7VL53L0X13encodeTimeoutEm>:
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a0e2c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80a0e30:	d201      	bcs.n	80a0e36 <_ZN7VL53L0X13encodeTimeoutEm+0xa>

  // format: "(LSByte * 2^MSByte) + 1"
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
 80a0e32:	b178      	cbz	r0, 80a0e54 <_ZN7VL53L0X13encodeTimeoutEm+0x28>
 80a0e34:	e001      	b.n	80a0e3a <_ZN7VL53L0X13encodeTimeoutEm+0xe>
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a0e36:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;
 80a0e3a:	3801      	subs	r0, #1
 80a0e3c:	2300      	movs	r3, #0

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a0e3e:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 80a0e42:	b29a      	uxth	r2, r3
 80a0e44:	f103 0301 	add.w	r3, r3, #1
 80a0e48:	d001      	beq.n	80a0e4e <_ZN7VL53L0X13encodeTimeoutEm+0x22>
    {
      ls_byte >>= 1;
 80a0e4a:	0840      	lsrs	r0, r0, #1

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a0e4c:	e7f7      	b.n	80a0e3e <_ZN7VL53L0X13encodeTimeoutEm+0x12>
    {
      ls_byte >>= 1;
      ms_byte++;
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 80a0e4e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80a0e52:	b280      	uxth	r0, r0
  }
  else { return 0; }
}
 80a0e54:	4770      	bx	lr
	...

080a0e58 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0e58:	4b08      	ldr	r3, [pc, #32]	; (80a0e7c <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh+0x24>)

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a0e5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0e5e:	4359      	muls	r1, r3
}

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80a0e60:	b510      	push	{r4, lr}
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0e62:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a0e66:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 80a0e6a:	fbb1 f3f2 	udiv	r3, r1, r2
 80a0e6e:	fbb1 f1f4 	udiv	r1, r1, r4
 80a0e72:	fb00 1003 	mla	r0, r0, r3, r1
}
 80a0e76:	fbb0 f0f2 	udiv	r0, r0, r2
 80a0e7a:	bd10      	pop	{r4, pc}
 80a0e7c:	003a2f00 	.word	0x003a2f00

080a0e80 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a0e80:	b570      	push	{r4, r5, r6, lr}
 80a0e82:	460e      	mov	r6, r1
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0e84:	2100      	movs	r1, #0
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a0e86:	4614      	mov	r4, r2
 80a0e88:	4605      	mov	r5, r0
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0e8a:	f7ff feb1 	bl	80a0bf0 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0e8e:	2146      	movs	r1, #70	; 0x46
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0e90:	8020      	strh	r0, [r4, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0e92:	4628      	mov	r0, r5
 80a0e94:	f7ff fdf1 	bl	80a0a7a <_ZN7VL53L0X7readRegEh>
 80a0e98:	3001      	adds	r0, #1
 80a0e9a:	b280      	uxth	r0, r0
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a0e9c:	7821      	ldrb	r1, [r4, #0]
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0e9e:	80a0      	strh	r0, [r4, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a0ea0:	f7ff ffda 	bl	80a0e58 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0ea4:	2151      	movs	r1, #81	; 0x51
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a0ea6:	60e0      	str	r0, [r4, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0ea8:	4628      	mov	r0, r5
 80a0eaa:	f7ff fe06 	bl	80a0aba <_ZN7VL53L0X12readReg16BitEh>
 80a0eae:	f7ff ffb1 	bl	80a0e14 <_ZN7VL53L0X13decodeTimeoutEm>
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a0eb2:	7821      	ldrb	r1, [r4, #0]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0eb4:	80e0      	strh	r0, [r4, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a0eb6:	f7ff ffcf 	bl	80a0e58 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a0eba:	2170      	movs	r1, #112	; 0x70

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a0ebc:	6120      	str	r0, [r4, #16]
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a0ebe:	4628      	mov	r0, r5
 80a0ec0:	f7ff fddb 	bl	80a0a7a <_ZN7VL53L0X7readRegEh>
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 80a0ec4:	3001      	adds	r0, #1
 80a0ec6:	0040      	lsls	r0, r0, #1
 80a0ec8:	b2c0      	uxtb	r0, r0
 80a0eca:	8060      	strh	r0, [r4, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0ecc:	2171      	movs	r1, #113	; 0x71
 80a0ece:	4628      	mov	r0, r5
 80a0ed0:	f7ff fdf3 	bl	80a0aba <_ZN7VL53L0X12readReg16BitEh>
 80a0ed4:	f7ff ff9e 	bl	80a0e14 <_ZN7VL53L0X13decodeTimeoutEm>
 80a0ed8:	8120      	strh	r0, [r4, #8]

  if (enables->pre_range)
 80a0eda:	78f3      	ldrb	r3, [r6, #3]
 80a0edc:	b113      	cbz	r3, 80a0ee4 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE+0x64>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 80a0ede:	88e3      	ldrh	r3, [r4, #6]
 80a0ee0:	1ac0      	subs	r0, r0, r3
 80a0ee2:	8120      	strh	r0, [r4, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 80a0ee4:	78a1      	ldrb	r1, [r4, #2]
 80a0ee6:	8920      	ldrh	r0, [r4, #8]
 80a0ee8:	f7ff ffb6 	bl	80a0e58 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->final_range_vcsel_period_pclks);
 80a0eec:	6160      	str	r0, [r4, #20]
 80a0eee:	bd70      	pop	{r4, r5, r6, pc}

080a0ef0 <_ZN7VL53L0X26getMeasurementTimingBudgetEv>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t VL53L0X::getMeasurementTimingBudget(void)
{
 80a0ef0:	b510      	push	{r4, lr}
 80a0ef2:	4604      	mov	r4, r0
 80a0ef4:	b088      	sub	sp, #32
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a0ef6:	4669      	mov	r1, sp
 80a0ef8:	f7ff ff77 	bl	80a0dea <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a0efc:	aa02      	add	r2, sp, #8
 80a0efe:	4669      	mov	r1, sp
 80a0f00:	4620      	mov	r0, r4
 80a0f02:	f7ff ffbd 	bl	80a0e80 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a0f06:	f89d 3000 	ldrb.w	r3, [sp]
 80a0f0a:	b11b      	cbz	r3, 80a0f14 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x24>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a0f0c:	9805      	ldr	r0, [sp, #20]
 80a0f0e:	f600 5084 	addw	r0, r0, #3460	; 0xd84
 80a0f12:	e001      	b.n	80a0f18 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x28>
  uint16_t const DssOverhead        = 690;
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80a0f14:	f640 3036 	movw	r0, #2870	; 0xb36
  if (enables.tcc)
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a0f18:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a0f1c:	b12b      	cbz	r3, 80a0f2a <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x3a>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a0f1e:	9b05      	ldr	r3, [sp, #20]
 80a0f20:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a0f24:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a0f28:	e006      	b.n	80a0f38 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  }
  else if (enables.msrc)
 80a0f2a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a0f2e:	b11b      	cbz	r3, 80a0f38 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a0f30:	9b05      	ldr	r3, [sp, #20]
 80a0f32:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0f36:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a0f38:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80a0f3c:	b11b      	cbz	r3, 80a0f46 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x56>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a0f3e:	9b06      	ldr	r3, [sp, #24]
 80a0f40:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0f44:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a0f46:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a0f4a:	b11b      	cbz	r3, 80a0f54 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x64>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80a0f4c:	9b07      	ldr	r3, [sp, #28]
 80a0f4e:	f203 2326 	addw	r3, r3, #550	; 0x226
 80a0f52:	4418      	add	r0, r3
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 80a0f54:	6160      	str	r0, [r4, #20]
  return budget_us;
}
 80a0f56:	b008      	add	sp, #32
 80a0f58:	bd10      	pop	{r4, pc}
	...

080a0f5c <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0f5c:	4b08      	ldr	r3, [pc, #32]	; (80a0f80 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh+0x24>)

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a0f5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0f62:	4359      	muls	r1, r3

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a0f64:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0f68:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a0f6c:	fbb1 f3f3 	udiv	r3, r1, r3
 80a0f70:	fbb1 f1f2 	udiv	r1, r1, r2
 80a0f74:	fb02 3000 	mla	r0, r2, r0, r3
}
 80a0f78:	fbb0 f0f1 	udiv	r0, r0, r1
 80a0f7c:	4770      	bx	lr
 80a0f7e:	bf00      	nop
 80a0f80:	003a2f00 	.word	0x003a2f00

080a0f84 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>:
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0f84:	f644 631f 	movw	r3, #19999	; 0x4e1f
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a0f88:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0f8a:	4299      	cmp	r1, r3
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a0f8c:	b089      	sub	sp, #36	; 0x24
 80a0f8e:	4606      	mov	r6, r0
 80a0f90:	460d      	mov	r5, r1
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0f92:	d942      	bls.n	80a101a <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>

  uint32_t used_budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a0f94:	4669      	mov	r1, sp
 80a0f96:	f7ff ff28 	bl	80a0dea <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a0f9a:	aa02      	add	r2, sp, #8
 80a0f9c:	4669      	mov	r1, sp
 80a0f9e:	4630      	mov	r0, r6
 80a0fa0:	f7ff ff6e 	bl	80a0e80 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a0fa4:	f89d 3000 	ldrb.w	r3, [sp]
 80a0fa8:	b11b      	cbz	r3, 80a0fb2 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x2e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a0faa:	9805      	ldr	r0, [sp, #20]
 80a0fac:	f600 3036 	addw	r0, r0, #2870	; 0xb36
 80a0fb0:	e001      	b.n	80a0fb6 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x32>

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80a0fb2:	f640 00e8 	movw	r0, #2280	; 0x8e8
  if (enables.tcc)
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a0fb6:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a0fba:	b12b      	cbz	r3, 80a0fc8 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x44>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a0fbc:	9b05      	ldr	r3, [sp, #20]
 80a0fbe:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a0fc2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a0fc6:	e006      	b.n	80a0fd6 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  }
  else if (enables.msrc)
 80a0fc8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a0fcc:	b11b      	cbz	r3, 80a0fd6 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a0fce:	9b05      	ldr	r3, [sp, #20]
 80a0fd0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0fd4:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a0fd6:	f89d 7003 	ldrb.w	r7, [sp, #3]
 80a0fda:	b11f      	cbz	r7, 80a0fe4 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x60>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a0fdc:	9b06      	ldr	r3, [sp, #24]
 80a0fde:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0fe2:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a0fe4:	f89d 4004 	ldrb.w	r4, [sp, #4]
 80a0fe8:	b1ac      	cbz	r4, 80a1016 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x92>
  {
    used_budget_us += FinalRangeOverhead;
 80a0fea:	f200 2026 	addw	r0, r0, #550	; 0x226
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80a0fee:	4285      	cmp	r5, r0
 80a0ff0:	d313      	bcc.n	80a101a <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint32_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80a0ff2:	f89d 100a 	ldrb.w	r1, [sp, #10]
 80a0ff6:	1a28      	subs	r0, r5, r0
 80a0ff8:	f7ff ffb0 	bl	80a0f5c <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>

    if (enables.pre_range)
 80a0ffc:	b117      	cbz	r7, 80a1004 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x80>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80a0ffe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80a1002:	4418      	add	r0, r3
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80a1004:	f7ff ff12 	bl	80a0e2c <_ZN7VL53L0X13encodeTimeoutEm>
      encodeTimeout(final_range_timeout_mclks));
 80a1008:	2171      	movs	r1, #113	; 0x71
 80a100a:	4602      	mov	r2, r0
 80a100c:	4630      	mov	r0, r6
 80a100e:	f7ff fcea 	bl	80a09e6 <_ZN7VL53L0X13writeReg16BitEht>

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 80a1012:	6175      	str	r5, [r6, #20]
 80a1014:	e002      	b.n	80a101c <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  }
  return true;
 80a1016:	2401      	movs	r4, #1
 80a1018:	e000      	b.n	80a101c <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a101a:	2400      	movs	r4, #0
    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
  }
  return true;
}
 80a101c:	4620      	mov	r0, r4
 80a101e:	b009      	add	sp, #36	; 0x24
 80a1020:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1022 <_ZN7VL53L0X27performSingleRefCalibrationEh>:
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a1022:	b538      	push	{r3, r4, r5, lr}
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a1024:	f041 0201 	orr.w	r2, r1, #1
 80a1028:	2100      	movs	r1, #0
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a102a:	4604      	mov	r4, r0
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a102c:	f7ff fcb6 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
 80a1030:	f000 fc1a 	bl	80a1868 <HAL_Timer_Get_Milli_Seconds>

  startTimeout();
 80a1034:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a1036:	2113      	movs	r1, #19
 80a1038:	4620      	mov	r0, r4
 80a103a:	f7ff fd1e 	bl	80a0a7a <_ZN7VL53L0X7readRegEh>
 80a103e:	f010 0507 	ands.w	r5, r0, #7
 80a1042:	d10b      	bne.n	80a105c <_ZN7VL53L0X27performSingleRefCalibrationEh+0x3a>
  {
    if (checkTimeoutExpired()) { return false; }
 80a1044:	6863      	ldr	r3, [r4, #4]
 80a1046:	2b00      	cmp	r3, #0
 80a1048:	d0f5      	beq.n	80a1036 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a104a:	f000 fc0d 	bl	80a1868 <HAL_Timer_Get_Milli_Seconds>
 80a104e:	68e3      	ldr	r3, [r4, #12]
 80a1050:	1ac0      	subs	r0, r0, r3
 80a1052:	6863      	ldr	r3, [r4, #4]
 80a1054:	4298      	cmp	r0, r3
 80a1056:	d9ee      	bls.n	80a1036 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a1058:	4628      	mov	r0, r5
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  writeReg(SYSRANGE_START, 0x00);

  return true;
}
 80a105a:	bd38      	pop	{r3, r4, r5, pc}
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
  {
    if (checkTimeoutExpired()) { return false; }
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a105c:	4620      	mov	r0, r4
 80a105e:	2201      	movs	r2, #1
 80a1060:	210b      	movs	r1, #11
 80a1062:	f7ff fc9b 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  writeReg(SYSRANGE_START, 0x00);
 80a1066:	2200      	movs	r2, #0
 80a1068:	4620      	mov	r0, r4
 80a106a:	4611      	mov	r1, r2
 80a106c:	f7ff fc96 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
 80a1070:	2001      	movs	r0, #1
 80a1072:	bd38      	pop	{r3, r4, r5, pc}

080a1074 <_ZN7VL53L0X4initEb>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool VL53L0X::init(bool io_2v8)
{
 80a1074:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1076:	4604      	mov	r4, r0
 80a1078:	b085      	sub	sp, #20
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 80a107a:	b149      	cbz	r1, 80a1090 <_ZN7VL53L0X4initEb+0x1c>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 80a107c:	2189      	movs	r1, #137	; 0x89
 80a107e:	f7ff fcfc 	bl	80a0a7a <_ZN7VL53L0X7readRegEh>
 80a1082:	f040 0201 	orr.w	r2, r0, #1
 80a1086:	b2d2      	uxtb	r2, r2
 80a1088:	2189      	movs	r1, #137	; 0x89
 80a108a:	4620      	mov	r0, r4
 80a108c:	f7ff fc86 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 80a1090:	2200      	movs	r2, #0
 80a1092:	2188      	movs	r1, #136	; 0x88
 80a1094:	4620      	mov	r0, r4
 80a1096:	f7ff fc81 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a109a:	2201      	movs	r2, #1
 80a109c:	2180      	movs	r1, #128	; 0x80
 80a109e:	4620      	mov	r0, r4
 80a10a0:	f7ff fc7c 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a10a4:	2201      	movs	r2, #1
 80a10a6:	21ff      	movs	r1, #255	; 0xff
 80a10a8:	4620      	mov	r0, r4
 80a10aa:	f7ff fc77 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a10ae:	2200      	movs	r2, #0
 80a10b0:	4611      	mov	r1, r2
 80a10b2:	4620      	mov	r0, r4
 80a10b4:	f7ff fc72 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  stop_variable = readReg(0x91);
 80a10b8:	2191      	movs	r1, #145	; 0x91
 80a10ba:	4620      	mov	r0, r4
 80a10bc:	f7ff fcdd 	bl	80a0a7a <_ZN7VL53L0X7readRegEh>
  writeReg(0x00, 0x01);
 80a10c0:	2201      	movs	r2, #1
  writeReg(0x88, 0x00);

  writeReg(0x80, 0x01);
  writeReg(0xFF, 0x01);
  writeReg(0x00, 0x00);
  stop_variable = readReg(0x91);
 80a10c2:	7420      	strb	r0, [r4, #16]
  writeReg(0x00, 0x01);
 80a10c4:	2100      	movs	r1, #0
 80a10c6:	4620      	mov	r0, r4
 80a10c8:	f7ff fc68 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a10cc:	2200      	movs	r2, #0
 80a10ce:	21ff      	movs	r1, #255	; 0xff
 80a10d0:	4620      	mov	r0, r4
 80a10d2:	f7ff fc63 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a10d6:	2200      	movs	r2, #0
 80a10d8:	2180      	movs	r1, #128	; 0x80
 80a10da:	4620      	mov	r0, r4
 80a10dc:	f7ff fc5e 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80a10e0:	2160      	movs	r1, #96	; 0x60
 80a10e2:	4620      	mov	r0, r4
 80a10e4:	f7ff fcc9 	bl	80a0a7a <_ZN7VL53L0X7readRegEh>
 80a10e8:	f040 0212 	orr.w	r2, r0, #18
 80a10ec:	b2d2      	uxtb	r2, r2
 80a10ee:	2160      	movs	r1, #96	; 0x60
 80a10f0:	4620      	mov	r0, r4
 80a10f2:	f7ff fc53 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80a10f6:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a10fa:	4620      	mov	r0, r4
 80a10fc:	f7ff fd50 	bl	80a0ba0 <_ZN7VL53L0X18setSignalRateLimitEf>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80a1100:	22ff      	movs	r2, #255	; 0xff
 80a1102:	2101      	movs	r1, #1
 80a1104:	4620      	mov	r0, r4
 80a1106:	f7ff fc49 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80a110a:	f10d 0207 	add.w	r2, sp, #7
 80a110e:	f10d 0106 	add.w	r1, sp, #6
 80a1112:	4620      	mov	r0, r4
 80a1114:	f7ff fde1 	bl	80a0cda <_ZN7VL53L0X11getSpadInfoEPhPb>
 80a1118:	b908      	cbnz	r0, 80a111e <_ZN7VL53L0X4initEb+0xaa>
 80a111a:	2500      	movs	r5, #0
 80a111c:	e21d      	b.n	80a155a <_ZN7VL53L0X4initEb+0x4e6>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a111e:	2306      	movs	r3, #6
 80a1120:	aa02      	add	r2, sp, #8
 80a1122:	21b0      	movs	r1, #176	; 0xb0
 80a1124:	4620      	mov	r0, r4
 80a1126:	f7ff fd11 	bl	80a0b4c <_ZN7VL53L0X9readMultiEhPhh>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 80a112a:	2201      	movs	r2, #1
 80a112c:	21ff      	movs	r1, #255	; 0xff
 80a112e:	4620      	mov	r0, r4
 80a1130:	f7ff fc34 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80a1134:	2200      	movs	r2, #0
 80a1136:	214f      	movs	r1, #79	; 0x4f
 80a1138:	4620      	mov	r0, r4
 80a113a:	f7ff fc2f 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80a113e:	222c      	movs	r2, #44	; 0x2c
 80a1140:	214e      	movs	r1, #78	; 0x4e
 80a1142:	4620      	mov	r0, r4
 80a1144:	f7ff fc2a 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1148:	2200      	movs	r2, #0
 80a114a:	21ff      	movs	r1, #255	; 0xff
 80a114c:	4620      	mov	r0, r4
 80a114e:	f7ff fc25 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1152:	2500      	movs	r5, #0

  writeReg(0xFF, 0x01);
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80a1154:	4620      	mov	r0, r4
 80a1156:	21b6      	movs	r1, #182	; 0xb6
 80a1158:	22b4      	movs	r2, #180	; 0xb4
 80a115a:	f7ff fc1f 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;
 80a115e:	4629      	mov	r1, r5
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a1160:	f89d 3007 	ldrb.w	r3, [sp, #7]
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1164:	f89d 6006 	ldrb.w	r6, [sp, #6]
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a1168:	2b00      	cmp	r3, #0
 80a116a:	bf14      	ite	ne
 80a116c:	200c      	movne	r0, #12
 80a116e:	2000      	moveq	r0, #0
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1170:	2701      	movs	r7, #1
 80a1172:	b2eb      	uxtb	r3, r5
 80a1174:	08da      	lsrs	r2, r3, #3
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1176:	4298      	cmp	r0, r3
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1178:	f10d 0e10 	add.w	lr, sp, #16
 80a117c:	f003 0307 	and.w	r3, r3, #7
 80a1180:	4472      	add	r2, lr
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1182:	d801      	bhi.n	80a1188 <_ZN7VL53L0X4initEb+0x114>
 80a1184:	428e      	cmp	r6, r1
 80a1186:	d108      	bne.n	80a119a <_ZN7VL53L0X4initEb+0x126>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1188:	f812 ec08 	ldrb.w	lr, [r2, #-8]
 80a118c:	fa07 f303 	lsl.w	r3, r7, r3
 80a1190:	ea2e 0303 	bic.w	r3, lr, r3
 80a1194:	f802 3c08 	strb.w	r3, [r2, #-8]
 80a1198:	e007      	b.n	80a11aa <_ZN7VL53L0X4initEb+0x136>
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 80a119a:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80a119e:	fa42 f303 	asr.w	r3, r2, r3
 80a11a2:	07db      	lsls	r3, r3, #31
    {
      spads_enabled++;
 80a11a4:	bf44      	itt	mi
 80a11a6:	3101      	addmi	r1, #1
 80a11a8:	b2c9      	uxtbmi	r1, r1
 80a11aa:	3501      	adds	r5, #1
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
 80a11ac:	2d30      	cmp	r5, #48	; 0x30
 80a11ae:	d1e0      	bne.n	80a1172 <_ZN7VL53L0X4initEb+0xfe>
    {
      spads_enabled++;
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a11b0:	2306      	movs	r3, #6
 80a11b2:	aa02      	add	r2, sp, #8
 80a11b4:	21b0      	movs	r1, #176	; 0xb0
 80a11b6:	4620      	mov	r0, r4
 80a11b8:	f7ff fca7 	bl	80a0b0a <_ZN7VL53L0X10writeMultiEhPKhh>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 80a11bc:	2201      	movs	r2, #1
 80a11be:	21ff      	movs	r1, #255	; 0xff
 80a11c0:	4620      	mov	r0, r4
 80a11c2:	f7ff fbeb 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a11c6:	2200      	movs	r2, #0
 80a11c8:	4611      	mov	r1, r2
 80a11ca:	4620      	mov	r0, r4
 80a11cc:	f7ff fbe6 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a11d0:	2200      	movs	r2, #0
 80a11d2:	21ff      	movs	r1, #255	; 0xff
 80a11d4:	4620      	mov	r0, r4
 80a11d6:	f7ff fbe1 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x09, 0x00);
 80a11da:	2200      	movs	r2, #0
 80a11dc:	2109      	movs	r1, #9
 80a11de:	4620      	mov	r0, r4
 80a11e0:	f7ff fbdc 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x10, 0x00);
 80a11e4:	2200      	movs	r2, #0
 80a11e6:	2110      	movs	r1, #16
 80a11e8:	4620      	mov	r0, r4
 80a11ea:	f7ff fbd7 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x11, 0x00);
 80a11ee:	2200      	movs	r2, #0
 80a11f0:	2111      	movs	r1, #17
 80a11f2:	4620      	mov	r0, r4
 80a11f4:	f7ff fbd2 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x24, 0x01);
 80a11f8:	2201      	movs	r2, #1
 80a11fa:	2124      	movs	r1, #36	; 0x24
 80a11fc:	4620      	mov	r0, r4
 80a11fe:	f7ff fbcd 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x25, 0xFF);
 80a1202:	22ff      	movs	r2, #255	; 0xff
 80a1204:	2125      	movs	r1, #37	; 0x25
 80a1206:	4620      	mov	r0, r4
 80a1208:	f7ff fbc8 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x75, 0x00);
 80a120c:	2200      	movs	r2, #0
 80a120e:	2175      	movs	r1, #117	; 0x75
 80a1210:	4620      	mov	r0, r4
 80a1212:	f7ff fbc3 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1216:	2201      	movs	r2, #1
 80a1218:	21ff      	movs	r1, #255	; 0xff
 80a121a:	4620      	mov	r0, r4
 80a121c:	f7ff fbbe 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4E, 0x2C);
 80a1220:	222c      	movs	r2, #44	; 0x2c
 80a1222:	214e      	movs	r1, #78	; 0x4e
 80a1224:	4620      	mov	r0, r4
 80a1226:	f7ff fbb9 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x00);
 80a122a:	2200      	movs	r2, #0
 80a122c:	2148      	movs	r1, #72	; 0x48
 80a122e:	4620      	mov	r0, r4
 80a1230:	f7ff fbb4 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x20);
 80a1234:	2220      	movs	r2, #32
 80a1236:	4629      	mov	r1, r5
 80a1238:	4620      	mov	r0, r4
 80a123a:	f7ff fbaf 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a123e:	2200      	movs	r2, #0
 80a1240:	21ff      	movs	r1, #255	; 0xff
 80a1242:	4620      	mov	r0, r4
 80a1244:	f7ff fbaa 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x09);
 80a1248:	2209      	movs	r2, #9
 80a124a:	4629      	mov	r1, r5
 80a124c:	4620      	mov	r0, r4
 80a124e:	f7ff fba5 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x54, 0x00);
 80a1252:	2200      	movs	r2, #0
 80a1254:	2154      	movs	r1, #84	; 0x54
 80a1256:	4620      	mov	r0, r4
 80a1258:	f7ff fba0 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a125c:	2204      	movs	r2, #4
 80a125e:	2131      	movs	r1, #49	; 0x31
 80a1260:	4620      	mov	r0, r4
 80a1262:	f7ff fb9b 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x32, 0x03);
 80a1266:	2203      	movs	r2, #3
 80a1268:	2132      	movs	r1, #50	; 0x32
 80a126a:	4620      	mov	r0, r4
 80a126c:	f7ff fb96 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x83);
 80a1270:	2283      	movs	r2, #131	; 0x83
 80a1272:	2140      	movs	r1, #64	; 0x40
 80a1274:	4620      	mov	r0, r4
 80a1276:	f7ff fb91 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x25);
 80a127a:	2225      	movs	r2, #37	; 0x25
 80a127c:	2146      	movs	r1, #70	; 0x46
 80a127e:	4620      	mov	r0, r4
 80a1280:	f7ff fb8c 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x60, 0x00);
 80a1284:	2200      	movs	r2, #0
 80a1286:	2160      	movs	r1, #96	; 0x60
 80a1288:	4620      	mov	r0, r4
 80a128a:	f7ff fb87 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x27, 0x00);
 80a128e:	2200      	movs	r2, #0
 80a1290:	2127      	movs	r1, #39	; 0x27
 80a1292:	4620      	mov	r0, r4
 80a1294:	f7ff fb82 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x50, 0x06);
 80a1298:	2206      	movs	r2, #6
 80a129a:	2150      	movs	r1, #80	; 0x50
 80a129c:	4620      	mov	r0, r4
 80a129e:	f7ff fb7d 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x51, 0x00);
 80a12a2:	2200      	movs	r2, #0
 80a12a4:	2151      	movs	r1, #81	; 0x51
 80a12a6:	4620      	mov	r0, r4
 80a12a8:	f7ff fb78 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x52, 0x96);
 80a12ac:	2296      	movs	r2, #150	; 0x96
 80a12ae:	2152      	movs	r1, #82	; 0x52
 80a12b0:	4620      	mov	r0, r4
 80a12b2:	f7ff fb73 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x56, 0x08);
 80a12b6:	2208      	movs	r2, #8
 80a12b8:	2156      	movs	r1, #86	; 0x56
 80a12ba:	4620      	mov	r0, r4
 80a12bc:	f7ff fb6e 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x57, 0x30);
 80a12c0:	462a      	mov	r2, r5
 80a12c2:	2157      	movs	r1, #87	; 0x57
 80a12c4:	4620      	mov	r0, r4
 80a12c6:	f7ff fb69 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x61, 0x00);
 80a12ca:	2200      	movs	r2, #0
 80a12cc:	2161      	movs	r1, #97	; 0x61
 80a12ce:	4620      	mov	r0, r4
 80a12d0:	f7ff fb64 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x62, 0x00);
 80a12d4:	2200      	movs	r2, #0
 80a12d6:	2162      	movs	r1, #98	; 0x62
 80a12d8:	4620      	mov	r0, r4
 80a12da:	f7ff fb5f 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x64, 0x00);
 80a12de:	2200      	movs	r2, #0
 80a12e0:	2164      	movs	r1, #100	; 0x64
 80a12e2:	4620      	mov	r0, r4
 80a12e4:	f7ff fb5a 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x65, 0x00);
 80a12e8:	2200      	movs	r2, #0
 80a12ea:	2165      	movs	r1, #101	; 0x65
 80a12ec:	4620      	mov	r0, r4
 80a12ee:	f7ff fb55 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x66, 0xA0);
 80a12f2:	22a0      	movs	r2, #160	; 0xa0
 80a12f4:	2166      	movs	r1, #102	; 0x66
 80a12f6:	4620      	mov	r0, r4
 80a12f8:	f7ff fb50 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a12fc:	2201      	movs	r2, #1
 80a12fe:	21ff      	movs	r1, #255	; 0xff
 80a1300:	4620      	mov	r0, r4
 80a1302:	f7ff fb4b 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x22, 0x32);
 80a1306:	2232      	movs	r2, #50	; 0x32
 80a1308:	2122      	movs	r1, #34	; 0x22
 80a130a:	4620      	mov	r0, r4
 80a130c:	f7ff fb46 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x14);
 80a1310:	2214      	movs	r2, #20
 80a1312:	2147      	movs	r1, #71	; 0x47
 80a1314:	4620      	mov	r0, r4
 80a1316:	f7ff fb41 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x49, 0xFF);
 80a131a:	22ff      	movs	r2, #255	; 0xff
 80a131c:	2149      	movs	r1, #73	; 0x49
 80a131e:	4620      	mov	r0, r4
 80a1320:	f7ff fb3c 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4A, 0x00);
 80a1324:	2200      	movs	r2, #0
 80a1326:	214a      	movs	r1, #74	; 0x4a
 80a1328:	4620      	mov	r0, r4
 80a132a:	f7ff fb37 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a132e:	2200      	movs	r2, #0
 80a1330:	21ff      	movs	r1, #255	; 0xff
 80a1332:	4620      	mov	r0, r4
 80a1334:	f7ff fb32 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7A, 0x0A);
 80a1338:	220a      	movs	r2, #10
 80a133a:	217a      	movs	r1, #122	; 0x7a
 80a133c:	4620      	mov	r0, r4
 80a133e:	f7ff fb2d 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7B, 0x00);
 80a1342:	2200      	movs	r2, #0
 80a1344:	217b      	movs	r1, #123	; 0x7b
 80a1346:	4620      	mov	r0, r4
 80a1348:	f7ff fb28 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x78, 0x21);
 80a134c:	2221      	movs	r2, #33	; 0x21
 80a134e:	2178      	movs	r1, #120	; 0x78
 80a1350:	4620      	mov	r0, r4
 80a1352:	f7ff fb23 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1356:	2201      	movs	r2, #1
 80a1358:	21ff      	movs	r1, #255	; 0xff
 80a135a:	4620      	mov	r0, r4
 80a135c:	f7ff fb1e 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x23, 0x34);
 80a1360:	2234      	movs	r2, #52	; 0x34
 80a1362:	2123      	movs	r1, #35	; 0x23
 80a1364:	4620      	mov	r0, r4
 80a1366:	f7ff fb19 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x42, 0x00);
 80a136a:	2200      	movs	r2, #0
 80a136c:	2142      	movs	r1, #66	; 0x42
 80a136e:	4620      	mov	r0, r4
 80a1370:	f7ff fb14 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0xFF);
 80a1374:	22ff      	movs	r2, #255	; 0xff
 80a1376:	2144      	movs	r1, #68	; 0x44
 80a1378:	4620      	mov	r0, r4
 80a137a:	f7ff fb0f 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x26);
 80a137e:	2226      	movs	r2, #38	; 0x26
 80a1380:	2145      	movs	r1, #69	; 0x45
 80a1382:	4620      	mov	r0, r4
 80a1384:	f7ff fb0a 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x05);
 80a1388:	2205      	movs	r2, #5
 80a138a:	2146      	movs	r1, #70	; 0x46
 80a138c:	4620      	mov	r0, r4
 80a138e:	f7ff fb05 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x40);
 80a1392:	2240      	movs	r2, #64	; 0x40
 80a1394:	4611      	mov	r1, r2
 80a1396:	4620      	mov	r0, r4
 80a1398:	f7ff fb00 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0E, 0x06);
 80a139c:	2206      	movs	r2, #6
 80a139e:	210e      	movs	r1, #14
 80a13a0:	4620      	mov	r0, r4
 80a13a2:	f7ff fafb 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x20, 0x1A);
 80a13a6:	221a      	movs	r2, #26
 80a13a8:	2120      	movs	r1, #32
 80a13aa:	4620      	mov	r0, r4
 80a13ac:	f7ff faf6 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x43, 0x40);
 80a13b0:	2240      	movs	r2, #64	; 0x40
 80a13b2:	2143      	movs	r1, #67	; 0x43
 80a13b4:	4620      	mov	r0, r4
 80a13b6:	f7ff faf1 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a13ba:	2200      	movs	r2, #0
 80a13bc:	21ff      	movs	r1, #255	; 0xff
 80a13be:	4620      	mov	r0, r4
 80a13c0:	f7ff faec 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x34, 0x03);
 80a13c4:	2203      	movs	r2, #3
 80a13c6:	2134      	movs	r1, #52	; 0x34
 80a13c8:	4620      	mov	r0, r4
 80a13ca:	f7ff fae7 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x35, 0x44);
 80a13ce:	2244      	movs	r2, #68	; 0x44
 80a13d0:	2135      	movs	r1, #53	; 0x35
 80a13d2:	4620      	mov	r0, r4
 80a13d4:	f7ff fae2 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a13d8:	2201      	movs	r2, #1
 80a13da:	21ff      	movs	r1, #255	; 0xff
 80a13dc:	4620      	mov	r0, r4
 80a13de:	f7ff fadd 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a13e2:	2204      	movs	r2, #4
 80a13e4:	2131      	movs	r1, #49	; 0x31
 80a13e6:	4620      	mov	r0, r4
 80a13e8:	f7ff fad8 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4B, 0x09);
 80a13ec:	2209      	movs	r2, #9
 80a13ee:	214b      	movs	r1, #75	; 0x4b
 80a13f0:	4620      	mov	r0, r4
 80a13f2:	f7ff fad3 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4C, 0x05);
 80a13f6:	2205      	movs	r2, #5
 80a13f8:	214c      	movs	r1, #76	; 0x4c
 80a13fa:	4620      	mov	r0, r4
 80a13fc:	f7ff face 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4D, 0x04);
 80a1400:	2204      	movs	r2, #4
 80a1402:	214d      	movs	r1, #77	; 0x4d
 80a1404:	4620      	mov	r0, r4
 80a1406:	f7ff fac9 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a140a:	2200      	movs	r2, #0
 80a140c:	21ff      	movs	r1, #255	; 0xff
 80a140e:	4620      	mov	r0, r4
 80a1410:	f7ff fac4 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0x00);
 80a1414:	2200      	movs	r2, #0
 80a1416:	2144      	movs	r1, #68	; 0x44
 80a1418:	4620      	mov	r0, r4
 80a141a:	f7ff fabf 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x20);
 80a141e:	2220      	movs	r2, #32
 80a1420:	2145      	movs	r1, #69	; 0x45
 80a1422:	4620      	mov	r0, r4
 80a1424:	f7ff faba 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x08);
 80a1428:	2208      	movs	r2, #8
 80a142a:	2147      	movs	r1, #71	; 0x47
 80a142c:	4620      	mov	r0, r4
 80a142e:	f7ff fab5 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x28);
 80a1432:	2228      	movs	r2, #40	; 0x28
 80a1434:	2148      	movs	r1, #72	; 0x48
 80a1436:	4620      	mov	r0, r4
 80a1438:	f7ff fab0 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x67, 0x00);
 80a143c:	2200      	movs	r2, #0
 80a143e:	2167      	movs	r1, #103	; 0x67
 80a1440:	4620      	mov	r0, r4
 80a1442:	f7ff faab 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x70, 0x04);
 80a1446:	2204      	movs	r2, #4
 80a1448:	2170      	movs	r1, #112	; 0x70
 80a144a:	4620      	mov	r0, r4
 80a144c:	f7ff faa6 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x71, 0x01);
 80a1450:	2201      	movs	r2, #1
 80a1452:	2171      	movs	r1, #113	; 0x71
 80a1454:	4620      	mov	r0, r4
 80a1456:	f7ff faa1 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x72, 0xFE);
 80a145a:	22fe      	movs	r2, #254	; 0xfe
 80a145c:	2172      	movs	r1, #114	; 0x72
 80a145e:	4620      	mov	r0, r4
 80a1460:	f7ff fa9c 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x76, 0x00);
 80a1464:	2200      	movs	r2, #0
 80a1466:	2176      	movs	r1, #118	; 0x76
 80a1468:	4620      	mov	r0, r4
 80a146a:	f7ff fa97 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x77, 0x00);
 80a146e:	2200      	movs	r2, #0
 80a1470:	2177      	movs	r1, #119	; 0x77
 80a1472:	4620      	mov	r0, r4
 80a1474:	f7ff fa92 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1478:	2201      	movs	r2, #1
 80a147a:	21ff      	movs	r1, #255	; 0xff
 80a147c:	4620      	mov	r0, r4
 80a147e:	f7ff fa8d 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0D, 0x01);
 80a1482:	2201      	movs	r2, #1
 80a1484:	210d      	movs	r1, #13
 80a1486:	4620      	mov	r0, r4
 80a1488:	f7ff fa88 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a148c:	2200      	movs	r2, #0
 80a148e:	21ff      	movs	r1, #255	; 0xff
 80a1490:	4620      	mov	r0, r4
 80a1492:	f7ff fa83 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x01);
 80a1496:	2201      	movs	r2, #1
 80a1498:	2180      	movs	r1, #128	; 0x80
 80a149a:	4620      	mov	r0, r4
 80a149c:	f7ff fa7e 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x01, 0xF8);
 80a14a0:	22f8      	movs	r2, #248	; 0xf8
 80a14a2:	2101      	movs	r1, #1
 80a14a4:	4620      	mov	r0, r4
 80a14a6:	f7ff fa79 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a14aa:	2201      	movs	r2, #1
 80a14ac:	21ff      	movs	r1, #255	; 0xff
 80a14ae:	4620      	mov	r0, r4
 80a14b0:	f7ff fa74 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x8E, 0x01);
 80a14b4:	2201      	movs	r2, #1
 80a14b6:	218e      	movs	r1, #142	; 0x8e
 80a14b8:	4620      	mov	r0, r4
 80a14ba:	f7ff fa6f 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a14be:	2201      	movs	r2, #1
 80a14c0:	2100      	movs	r1, #0
 80a14c2:	4620      	mov	r0, r4
 80a14c4:	f7ff fa6a 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a14c8:	2200      	movs	r2, #0
 80a14ca:	21ff      	movs	r1, #255	; 0xff
 80a14cc:	4620      	mov	r0, r4
 80a14ce:	f7ff fa65 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a14d2:	2200      	movs	r2, #0
 80a14d4:	2180      	movs	r1, #128	; 0x80
 80a14d6:	4620      	mov	r0, r4
 80a14d8:	f7ff fa60 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80a14dc:	2204      	movs	r2, #4
 80a14de:	210a      	movs	r1, #10
 80a14e0:	4620      	mov	r0, r4
 80a14e2:	f7ff fa5b 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80a14e6:	2184      	movs	r1, #132	; 0x84
 80a14e8:	4620      	mov	r0, r4
 80a14ea:	f7ff fac6 	bl	80a0a7a <_ZN7VL53L0X7readRegEh>
 80a14ee:	2184      	movs	r1, #132	; 0x84
 80a14f0:	f000 02ef 	and.w	r2, r0, #239	; 0xef
 80a14f4:	4620      	mov	r0, r4
 80a14f6:	f7ff fa51 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a14fa:	2201      	movs	r2, #1
 80a14fc:	210b      	movs	r1, #11
 80a14fe:	4620      	mov	r0, r4
 80a1500:	f7ff fa4c 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a1504:	4620      	mov	r0, r4
 80a1506:	f7ff fcf3 	bl	80a0ef0 <_ZN7VL53L0X26getMeasurementTimingBudgetEv>
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a150a:	22e8      	movs	r2, #232	; 0xe8
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a150c:	6160      	str	r0, [r4, #20]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a150e:	2101      	movs	r1, #1
 80a1510:	4620      	mov	r0, r4
 80a1512:	f7ff fa43 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(measurement_timing_budget_us);
 80a1516:	6961      	ldr	r1, [r4, #20]
 80a1518:	4620      	mov	r0, r4
 80a151a:	f7ff fd33 	bl	80a0f84 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80a151e:	2201      	movs	r2, #1
 80a1520:	4611      	mov	r1, r2
 80a1522:	4620      	mov	r0, r4
 80a1524:	f7ff fa3a 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x40)) { return false; }
 80a1528:	2140      	movs	r1, #64	; 0x40
 80a152a:	4620      	mov	r0, r4
 80a152c:	f7ff fd79 	bl	80a1022 <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a1530:	2800      	cmp	r0, #0
 80a1532:	f43f adf2 	beq.w	80a111a <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80a1536:	2202      	movs	r2, #2
 80a1538:	2101      	movs	r1, #1
 80a153a:	4620      	mov	r0, r4
 80a153c:	f7ff fa2e 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x00)) { return false; }
 80a1540:	2100      	movs	r1, #0
 80a1542:	4620      	mov	r0, r4
 80a1544:	f7ff fd6d 	bl	80a1022 <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a1548:	4605      	mov	r5, r0
 80a154a:	2800      	cmp	r0, #0
 80a154c:	f43f ade5 	beq.w	80a111a <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a1550:	22e8      	movs	r2, #232	; 0xe8
 80a1552:	2101      	movs	r1, #1
 80a1554:	4620      	mov	r0, r4
 80a1556:	f7ff fa21 	bl	80a099c <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_PerformRefCalibration() end

  return true;
}
 80a155a:	4628      	mov	r0, r5
 80a155c:	b005      	add	sp, #20
 80a155e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1560 <_GLOBAL__sub_I__ZN7VL53L0XC2Ev>:
 80a1560:	f000 b92a 	b.w	80a17b8 <HAL_Pin_Map>

080a1564 <_ZN9LIS3DHI2CD1Ev>:

}

LIS3DHI2C::~LIS3DHI2C() {

}
 80a1564:	4770      	bx	lr

080a1566 <_ZN9LIS3DHI2CD0Ev>:

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {

}

LIS3DHI2C::~LIS3DHI2C() {
 80a1566:	b510      	push	{r4, lr}
 80a1568:	4604      	mov	r4, r0

}
 80a156a:	f7fe fd96 	bl	80a009a <_ZdlPv>
 80a156e:	4620      	mov	r0, r4
 80a1570:	bd10      	pop	{r4, pc}

080a1572 <_ZN9LIS3DHI2C9writeDataEhPKhj>:
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a1572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1574:	4605      	mov	r5, r0
 80a1576:	461e      	mov	r6, r3
 80a1578:	460f      	mov	r7, r1

	wire.beginTransmission(getI2CAddr());
 80a157a:	7c01      	ldrb	r1, [r0, #16]
 80a157c:	68c0      	ldr	r0, [r0, #12]
 80a157e:	f041 0118 	orr.w	r1, r1, #24
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a1582:	4614      	mov	r4, r2

	wire.beginTransmission(getI2CAddr());
 80a1584:	f000 fe8d 	bl	80a22a2 <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a1588:	68e8      	ldr	r0, [r5, #12]

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a158a:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a158c:	6803      	ldr	r3, [r0, #0]
bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a158e:	bf88      	it	hi
 80a1590:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a1594:	689b      	ldr	r3, [r3, #8]
 80a1596:	4639      	mov	r1, r7
 80a1598:	4798      	blx	r3
 80a159a:	4426      	add	r6, r4
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a159c:	42a6      	cmp	r6, r4
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a159e:	68e8      	ldr	r0, [r5, #12]

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a15a0:	d005      	beq.n	80a15ae <_ZN9LIS3DHI2C9writeDataEhPKhj+0x3c>
		wire.write(buf[ii]);
 80a15a2:	6803      	ldr	r3, [r0, #0]
 80a15a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a15a8:	689b      	ldr	r3, [r3, #8]
 80a15aa:	4798      	blx	r3

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a15ac:	e7f6      	b.n	80a159c <_ZN9LIS3DHI2C9writeDataEhPKhj+0x2a>
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a15ae:	f000 fe80 	bl	80a22b2 <_ZN7TwoWire15endTransmissionEv>

	return (res == 0);
}
 80a15b2:	fab0 f080 	clz	r0, r0
 80a15b6:	0940      	lsrs	r0, r0, #5
 80a15b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a15ba <_ZN9LIS3DHI2C8readDataEhPhj>:

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a15ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a15bc:	4604      	mov	r4, r0
 80a15be:	461e      	mov	r6, r3
 80a15c0:	460f      	mov	r7, r1
	wire.beginTransmission(getI2CAddr());
 80a15c2:	7c01      	ldrb	r1, [r0, #16]
 80a15c4:	68c0      	ldr	r0, [r0, #12]
 80a15c6:	f041 0118 	orr.w	r1, r1, #24

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a15ca:	4615      	mov	r5, r2
	wire.beginTransmission(getI2CAddr());
 80a15cc:	f000 fe69 	bl	80a22a2 <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a15d0:	68e0      	ldr	r0, [r4, #12]
}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a15d2:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a15d4:	6803      	ldr	r3, [r0, #0]

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a15d6:	bf88      	it	hi
 80a15d8:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a15dc:	689b      	ldr	r3, [r3, #8]
 80a15de:	4639      	mov	r1, r7
 80a15e0:	4798      	blx	r3

	uint8_t res = wire.endTransmission();
 80a15e2:	68e0      	ldr	r0, [r4, #12]
 80a15e4:	f000 fe65 	bl	80a22b2 <_ZN7TwoWire15endTransmissionEv>
	if (res != 0) {
 80a15e8:	b9a8      	cbnz	r0, 80a1616 <_ZN9LIS3DHI2C8readDataEhPhj+0x5c>
		return false;
	}

	wire.requestFrom((int)getI2CAddr(), numBytes);
 80a15ea:	7c21      	ldrb	r1, [r4, #16]
 80a15ec:	4632      	mov	r2, r6
 80a15ee:	f041 0118 	orr.w	r1, r1, #24
 80a15f2:	68e0      	ldr	r0, [r4, #12]
 80a15f4:	f000 fe50 	bl	80a2298 <_ZN7TwoWire11requestFromEii>
 80a15f8:	442e      	add	r6, r5
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
 80a15fa:	42ae      	cmp	r6, r5
 80a15fc:	d00d      	beq.n	80a161a <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
 80a15fe:	68e0      	ldr	r0, [r4, #12]
 80a1600:	6803      	ldr	r3, [r0, #0]
 80a1602:	691b      	ldr	r3, [r3, #16]
 80a1604:	4798      	blx	r3
 80a1606:	b140      	cbz	r0, 80a161a <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
		buf[ii] = wire.read();
 80a1608:	68e0      	ldr	r0, [r4, #12]
 80a160a:	6803      	ldr	r3, [r0, #0]
 80a160c:	695b      	ldr	r3, [r3, #20]
 80a160e:	4798      	blx	r3
 80a1610:	f805 0b01 	strb.w	r0, [r5], #1
 80a1614:	e7f1      	b.n	80a15fa <_ZN9LIS3DHI2C8readDataEhPhj+0x40>
	}
	wire.write(addr);

	uint8_t res = wire.endTransmission();
	if (res != 0) {
		return false;
 80a1616:	2000      	movs	r0, #0
 80a1618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a161a:	2001      	movs	r0, #1
	wire.requestFrom((int)getI2CAddr(), numBytes);
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
		buf[ii] = wire.read();
	}
	return true;
}
 80a161c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a161e <_ZN12LIS3DHConfigC1Ev>:
#include "LIS3DH.h"

// Official project location:
// https://github.com/rickkas7/LIS3DH

LIS3DHConfig::LIS3DHConfig() {
 80a161e:	2200      	movs	r2, #0
 80a1620:	7002      	strb	r2, [r0, #0]
 80a1622:	7042      	strb	r2, [r0, #1]
 80a1624:	7082      	strb	r2, [r0, #2]
 80a1626:	70c2      	strb	r2, [r0, #3]
 80a1628:	7102      	strb	r2, [r0, #4]
 80a162a:	7142      	strb	r2, [r0, #5]
 80a162c:	7182      	strb	r2, [r0, #6]
 80a162e:	71c2      	strb	r2, [r0, #7]
 80a1630:	7202      	strb	r2, [r0, #8]
 80a1632:	7242      	strb	r2, [r0, #9]
 80a1634:	7282      	strb	r2, [r0, #10]
}
 80a1636:	4770      	bx	lr

080a1638 <_ZN12LIS3DHConfig12setAccelModeEh>:
}

LIS3DHConfig &LIS3DHConfig::setAccelMode(uint8_t rate) {

	// Enable specified rate, with XYZ detection enabled
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
 80a1638:	f041 0107 	orr.w	r1, r1, #7
 80a163c:	7001      	strb	r1, [r0, #0]

	return *this;
}
 80a163e:	4770      	bx	lr

080a1640 <_ZN6LIS3DH13readRegister8Eh>:

	return pos;
}


uint8_t LIS3DH::readRegister8(uint8_t addr) {
 80a1640:	b513      	push	{r0, r1, r4, lr}

	uint8_t resp[1];
	readData(addr, resp, sizeof(resp));
 80a1642:	6803      	ldr	r3, [r0, #0]
 80a1644:	aa01      	add	r2, sp, #4
 80a1646:	689c      	ldr	r4, [r3, #8]
 80a1648:	2301      	movs	r3, #1
 80a164a:	47a0      	blx	r4

	return resp[0];
}
 80a164c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80a1650:	b002      	add	sp, #8
 80a1652:	bd10      	pop	{r4, pc}

080a1654 <_ZN6LIS3DH9hasDeviceEv>:
LIS3DH::~LIS3DH() {

}


bool LIS3DH::hasDevice() {
 80a1654:	b538      	push	{r3, r4, r5, lr}
 80a1656:	4605      	mov	r5, r0
 80a1658:	240a      	movs	r4, #10
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
 80a165a:	210f      	movs	r1, #15
 80a165c:	4628      	mov	r0, r5
 80a165e:	f7ff ffef 	bl	80a1640 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
 80a1662:	2833      	cmp	r0, #51	; 0x33
			found = true;
 80a1664:	f04f 0001 	mov.w	r0, #1

bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
		if (whoami == WHO_AM_I) {
 80a1668:	d005      	beq.n	80a1676 <_ZN6LIS3DH9hasDeviceEv+0x22>
			found = true;
			break;
		}
		delay(1);
 80a166a:	f000 fb9f 	bl	80a1dac <delay>
}


bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
 80a166e:	3c01      	subs	r4, #1
 80a1670:	d1f3      	bne.n	80a165a <_ZN6LIS3DH9hasDeviceEv+0x6>

}


bool LIS3DH::hasDevice() {
	bool found = false;
 80a1672:	4620      	mov	r0, r4
 80a1674:	bd38      	pop	{r3, r4, r5, pc}
			break;
		}
		delay(1);
	}
	return found;
}
 80a1676:	bd38      	pop	{r3, r4, r5, pc}

080a1678 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a1678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a167a:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a167c:	2107      	movs	r1, #7

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a167e:	4606      	mov	r6, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a1680:	f7ff ffde 	bl	80a1640 <_ZN6LIS3DH13readRegister8Eh>
 80a1684:	f000 0008 	and.w	r0, r0, #8

	bool hasData = ((statusAuxReg & STATUS_AUX_321DA) != 0);
 80a1688:	2800      	cmp	r0, #0
 80a168a:	bf14      	ite	ne
 80a168c:	2501      	movne	r5, #1
 80a168e:	2500      	moveq	r5, #0

	//Serial.printlnf("fifoSrcReg=0x%02x", fifoSrcReg);

	if (hasData) {
 80a1690:	d01b      	beq.n	80a16ca <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x52>
		uint8_t resp[6];
		readData(REG_OUT_X_L, resp, sizeof(resp));
 80a1692:	6833      	ldr	r3, [r6, #0]
 80a1694:	466a      	mov	r2, sp
 80a1696:	689f      	ldr	r7, [r3, #8]
 80a1698:	2128      	movs	r1, #40	; 0x28
 80a169a:	2306      	movs	r3, #6
 80a169c:	4630      	mov	r0, r6
 80a169e:	47b8      	blx	r7

		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
 80a16a0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a16a4:	f89d 3000 	ldrb.w	r3, [sp]
 80a16a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a16ac:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
 80a16ae:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a16b2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a16b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a16ba:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
 80a16bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a16c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a16c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a16c8:	80a3      	strh	r3, [r4, #4]
	}
	return hasData;
}
 80a16ca:	4628      	mov	r0, r5
 80a16cc:	b003      	add	sp, #12
 80a16ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a16d0 <_ZN6LIS3DH14writeRegister8Ehh>:

	return resp[0] | (((uint16_t)resp[1]) << 8);
}


void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
 80a16d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a16d2:	ac02      	add	r4, sp, #8

	writeData(addr, req, sizeof(req));
 80a16d4:	6803      	ldr	r3, [r0, #0]

void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a16d6:	f804 2d04 	strb.w	r2, [r4, #-4]!

	writeData(addr, req, sizeof(req));
 80a16da:	68dd      	ldr	r5, [r3, #12]
 80a16dc:	4622      	mov	r2, r4
 80a16de:	2301      	movs	r3, #1
 80a16e0:	47a8      	blx	r5
}
 80a16e2:	b003      	add	sp, #12
 80a16e4:	bd30      	pop	{r4, r5, pc}
	...

080a16e8 <_ZN6LIS3DH5setupER12LIS3DHConfig>:
		delay(1);
	}
	return found;
}

bool LIS3DH::setup(LIS3DHConfig &config) {
 80a16e8:	b570      	push	{r4, r5, r6, lr}
 80a16ea:	4604      	mov	r4, r0
 80a16ec:	460d      	mov	r5, r1

	if (!hasDevice()) {
 80a16ee:	f7ff ffb1 	bl	80a1654 <_ZN6LIS3DH9hasDeviceEv>
 80a16f2:	4606      	mov	r6, r0
 80a16f4:	b928      	cbnz	r0, 80a1702 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		Serial.println("device not found");
 80a16f6:	f000 fc87 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a16fa:	4928      	ldr	r1, [pc, #160]	; (80a179c <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
 80a16fc:	f000 fab0 	bl	80a1c60 <_ZN5Print7printlnEPKc>
		return false;
 80a1700:	e049      	b.n	80a1796 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
	}

	writeRegister8(REG_CTRL_REG1, config.reg1);
 80a1702:	782a      	ldrb	r2, [r5, #0]
 80a1704:	2120      	movs	r1, #32
 80a1706:	4620      	mov	r0, r4
 80a1708:	f7ff ffe2 	bl	80a16d0 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
 80a170c:	786a      	ldrb	r2, [r5, #1]
 80a170e:	2121      	movs	r1, #33	; 0x21
 80a1710:	4620      	mov	r0, r4
 80a1712:	f7ff ffdd 	bl	80a16d0 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
 80a1716:	78aa      	ldrb	r2, [r5, #2]
 80a1718:	2122      	movs	r1, #34	; 0x22
 80a171a:	4620      	mov	r0, r4
 80a171c:	f7ff ffd8 	bl	80a16d0 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
 80a1720:	78ea      	ldrb	r2, [r5, #3]
 80a1722:	2123      	movs	r1, #35	; 0x23
 80a1724:	4620      	mov	r0, r4
 80a1726:	f7ff ffd3 	bl	80a16d0 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
 80a172a:	792a      	ldrb	r2, [r5, #4]
 80a172c:	2124      	movs	r1, #36	; 0x24
 80a172e:	4620      	mov	r0, r4
 80a1730:	f7ff ffce 	bl	80a16d0 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
 80a1734:	796a      	ldrb	r2, [r5, #5]
 80a1736:	2125      	movs	r1, #37	; 0x25
 80a1738:	4620      	mov	r0, r4
 80a173a:	f7ff ffc9 	bl	80a16d0 <_ZN6LIS3DH14writeRegister8Ehh>

	if (config.setReference) {
 80a173e:	79ab      	ldrb	r3, [r5, #6]
 80a1740:	b11b      	cbz	r3, 80a174a <_ZN6LIS3DH5setupER12LIS3DHConfig+0x62>
		// In normal mode, reading the reference register sets it for the current normal force
		// (the normal force of gravity acting on the device)
		readRegister8(REG_REFERENCE);
 80a1742:	2126      	movs	r1, #38	; 0x26
 80a1744:	4620      	mov	r0, r4
 80a1746:	f7ff ff7b 	bl	80a1640 <_ZN6LIS3DH13readRegister8Eh>
	}
	// Set FIFO mode
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
 80a174a:	7aaa      	ldrb	r2, [r5, #10]
 80a174c:	212e      	movs	r1, #46	; 0x2e
 80a174e:	4620      	mov	r0, r4
 80a1750:	f7ff ffbe 	bl	80a16d0 <_ZN6LIS3DH14writeRegister8Ehh>



	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
 80a1754:	78ab      	ldrb	r3, [r5, #2]
 80a1756:	065b      	lsls	r3, r3, #25
 80a1758:	d51d      	bpl.n	80a1796 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>

		writeRegister8(REG_INT1_THS, config.int1_ths);
 80a175a:	79ea      	ldrb	r2, [r5, #7]
 80a175c:	2132      	movs	r1, #50	; 0x32
 80a175e:	4620      	mov	r0, r4
 80a1760:	f7ff ffb6 	bl	80a16d0 <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
 80a1764:	7a2a      	ldrb	r2, [r5, #8]
 80a1766:	2133      	movs	r1, #51	; 0x33
 80a1768:	4620      	mov	r0, r4
 80a176a:	f7ff ffb1 	bl	80a16d0 <_ZN6LIS3DH14writeRegister8Ehh>

		if (intPin >= 0) {
 80a176e:	6863      	ldr	r3, [r4, #4]
 80a1770:	2b00      	cmp	r3, #0
 80a1772:	db0a      	blt.n	80a178a <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa2>
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a1774:	7a6a      	ldrb	r2, [r5, #9]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a1776:	4620      	mov	r0, r4
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a1778:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a177a:	2130      	movs	r1, #48	; 0x30
 80a177c:	f7ff ffa8 	bl	80a16d0 <_ZN6LIS3DH14writeRegister8Ehh>

			// Clear the interrupt just in case
			readRegister8(REG_INT1_SRC);
 80a1780:	2131      	movs	r1, #49	; 0x31
 80a1782:	4620      	mov	r0, r4
 80a1784:	f7ff ff5c 	bl	80a1640 <_ZN6LIS3DH13readRegister8Eh>
 80a1788:	e005      	b.n	80a1796 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
		}
		else {
			int1_cfg = 0;
 80a178a:	2200      	movs	r2, #0
 80a178c:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
 80a178e:	2130      	movs	r1, #48	; 0x30
 80a1790:	4620      	mov	r0, r4
 80a1792:	f7ff ff9d 	bl	80a16d0 <_ZN6LIS3DH14writeRegister8Ehh>




	return true;
}
 80a1796:	4630      	mov	r0, r6
 80a1798:	bd70      	pop	{r4, r5, r6, pc}
 80a179a:	bf00      	nop
 80a179c:	080a306c 	.word	0x080a306c

080a17a0 <_ZN9LIS3DHI2CC1ER7TwoWirehi>:

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a17a0:	b510      	push	{r4, lr}

	return *this;
}


LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
 80a17a2:	6043      	str	r3, [r0, #4]

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a17a4:	4b02      	ldr	r3, [pc, #8]	; (80a17b0 <_ZN9LIS3DHI2CC1ER7TwoWirehi+0x10>)
 80a17a6:	60c1      	str	r1, [r0, #12]
 80a17a8:	6003      	str	r3, [r0, #0]
 80a17aa:	7402      	strb	r2, [r0, #16]

}
 80a17ac:	bd10      	pop	{r4, pc}
 80a17ae:	bf00      	nop
 80a17b0:	080a305c 	.word	0x080a305c

080a17b4 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:
 80a17b4:	f000 b800 	b.w	80a17b8 <HAL_Pin_Map>

080a17b8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a17b8:	b508      	push	{r3, lr}
 80a17ba:	4b02      	ldr	r3, [pc, #8]	; (80a17c4 <HAL_Pin_Map+0xc>)
 80a17bc:	681b      	ldr	r3, [r3, #0]
 80a17be:	681b      	ldr	r3, [r3, #0]
 80a17c0:	9301      	str	r3, [sp, #4]
 80a17c2:	bd08      	pop	{r3, pc}
 80a17c4:	080601b0 	.word	0x080601b0

080a17c8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a17c8:	b508      	push	{r3, lr}
 80a17ca:	4b02      	ldr	r3, [pc, #8]	; (80a17d4 <HAL_Validate_Pin_Function+0xc>)
 80a17cc:	681b      	ldr	r3, [r3, #0]
 80a17ce:	685b      	ldr	r3, [r3, #4]
 80a17d0:	9301      	str	r3, [sp, #4]
 80a17d2:	bd08      	pop	{r3, pc}
 80a17d4:	080601b0 	.word	0x080601b0

080a17d8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a17d8:	b508      	push	{r3, lr}
 80a17da:	4b02      	ldr	r3, [pc, #8]	; (80a17e4 <HAL_Pin_Mode+0xc>)
 80a17dc:	681b      	ldr	r3, [r3, #0]
 80a17de:	689b      	ldr	r3, [r3, #8]
 80a17e0:	9301      	str	r3, [sp, #4]
 80a17e2:	bd08      	pop	{r3, pc}
 80a17e4:	080601b0 	.word	0x080601b0

080a17e8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a17e8:	b508      	push	{r3, lr}
 80a17ea:	4b02      	ldr	r3, [pc, #8]	; (80a17f4 <HAL_Get_Pin_Mode+0xc>)
 80a17ec:	681b      	ldr	r3, [r3, #0]
 80a17ee:	68db      	ldr	r3, [r3, #12]
 80a17f0:	9301      	str	r3, [sp, #4]
 80a17f2:	bd08      	pop	{r3, pc}
 80a17f4:	080601b0 	.word	0x080601b0

080a17f8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a17f8:	b508      	push	{r3, lr}
 80a17fa:	4b02      	ldr	r3, [pc, #8]	; (80a1804 <HAL_GPIO_Write+0xc>)
 80a17fc:	681b      	ldr	r3, [r3, #0]
 80a17fe:	691b      	ldr	r3, [r3, #16]
 80a1800:	9301      	str	r3, [sp, #4]
 80a1802:	bd08      	pop	{r3, pc}
 80a1804:	080601b0 	.word	0x080601b0

080a1808 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1808:	b508      	push	{r3, lr}
 80a180a:	4b02      	ldr	r3, [pc, #8]	; (80a1814 <HAL_GPIO_Read+0xc>)
 80a180c:	681b      	ldr	r3, [r3, #0]
 80a180e:	695b      	ldr	r3, [r3, #20]
 80a1810:	9301      	str	r3, [sp, #4]
 80a1812:	bd08      	pop	{r3, pc}
 80a1814:	080601b0 	.word	0x080601b0

080a1818 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a1818:	b508      	push	{r3, lr}
 80a181a:	4b02      	ldr	r3, [pc, #8]	; (80a1824 <HAL_Interrupts_Attach+0xc>)
 80a181c:	681b      	ldr	r3, [r3, #0]
 80a181e:	699b      	ldr	r3, [r3, #24]
 80a1820:	9301      	str	r3, [sp, #4]
 80a1822:	bd08      	pop	{r3, pc}
 80a1824:	080601b0 	.word	0x080601b0

080a1828 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a1828:	b508      	push	{r3, lr}
 80a182a:	4b02      	ldr	r3, [pc, #8]	; (80a1834 <HAL_Interrupts_Detach+0xc>)
 80a182c:	681b      	ldr	r3, [r3, #0]
 80a182e:	69db      	ldr	r3, [r3, #28]
 80a1830:	9301      	str	r3, [sp, #4]
 80a1832:	bd08      	pop	{r3, pc}
 80a1834:	080601b0 	.word	0x080601b0

080a1838 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1838:	b508      	push	{r3, lr}
 80a183a:	4b02      	ldr	r3, [pc, #8]	; (80a1844 <HAL_SPI_Init+0xc>)
 80a183c:	681b      	ldr	r3, [r3, #0]
 80a183e:	69db      	ldr	r3, [r3, #28]
 80a1840:	9301      	str	r3, [sp, #4]
 80a1842:	bd08      	pop	{r3, pc}
 80a1844:	080601b4 	.word	0x080601b4

080a1848 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1848:	b508      	push	{r3, lr}
 80a184a:	4b02      	ldr	r3, [pc, #8]	; (80a1854 <HAL_SPI_Is_Enabled+0xc>)
 80a184c:	681b      	ldr	r3, [r3, #0]
 80a184e:	6a1b      	ldr	r3, [r3, #32]
 80a1850:	9301      	str	r3, [sp, #4]
 80a1852:	bd08      	pop	{r3, pc}
 80a1854:	080601b4 	.word	0x080601b4

080a1858 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1858:	b508      	push	{r3, lr}
 80a185a:	4b02      	ldr	r3, [pc, #8]	; (80a1864 <HAL_RNG_GetRandomNumber+0xc>)
 80a185c:	681b      	ldr	r3, [r3, #0]
 80a185e:	685b      	ldr	r3, [r3, #4]
 80a1860:	9301      	str	r3, [sp, #4]
 80a1862:	bd08      	pop	{r3, pc}
 80a1864:	0806019c 	.word	0x0806019c

080a1868 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1868:	b508      	push	{r3, lr}
 80a186a:	4b02      	ldr	r3, [pc, #8]	; (80a1874 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a186c:	681b      	ldr	r3, [r3, #0]
 80a186e:	695b      	ldr	r3, [r3, #20]
 80a1870:	9301      	str	r3, [sp, #4]
 80a1872:	bd08      	pop	{r3, pc}
 80a1874:	0806019c 	.word	0x0806019c

080a1878 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1878:	b508      	push	{r3, lr}
 80a187a:	4b02      	ldr	r3, [pc, #8]	; (80a1884 <os_mutex_create+0xc>)
 80a187c:	681b      	ldr	r3, [r3, #0]
 80a187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1880:	9301      	str	r3, [sp, #4]
 80a1882:	bd08      	pop	{r3, pc}
 80a1884:	080601d0 	.word	0x080601d0

080a1888 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1888:	b508      	push	{r3, lr}
 80a188a:	4b02      	ldr	r3, [pc, #8]	; (80a1894 <HAL_USART_Init+0xc>)
 80a188c:	681b      	ldr	r3, [r3, #0]
 80a188e:	699b      	ldr	r3, [r3, #24]
 80a1890:	9301      	str	r3, [sp, #4]
 80a1892:	bd08      	pop	{r3, pc}
 80a1894:	080601c4 	.word	0x080601c4

080a1898 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1898:	b508      	push	{r3, lr}
 80a189a:	4b02      	ldr	r3, [pc, #8]	; (80a18a4 <HAL_USART_Write_Data+0xc>)
 80a189c:	681b      	ldr	r3, [r3, #0]
 80a189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a18a0:	9301      	str	r3, [sp, #4]
 80a18a2:	bd08      	pop	{r3, pc}
 80a18a4:	080601c4 	.word	0x080601c4

080a18a8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a18a8:	b508      	push	{r3, lr}
 80a18aa:	4b02      	ldr	r3, [pc, #8]	; (80a18b4 <HAL_USART_Available_Data+0xc>)
 80a18ac:	681b      	ldr	r3, [r3, #0]
 80a18ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a18b0:	9301      	str	r3, [sp, #4]
 80a18b2:	bd08      	pop	{r3, pc}
 80a18b4:	080601c4 	.word	0x080601c4

080a18b8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a18b8:	b508      	push	{r3, lr}
 80a18ba:	4b02      	ldr	r3, [pc, #8]	; (80a18c4 <HAL_USART_Read_Data+0xc>)
 80a18bc:	681b      	ldr	r3, [r3, #0]
 80a18be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a18c0:	9301      	str	r3, [sp, #4]
 80a18c2:	bd08      	pop	{r3, pc}
 80a18c4:	080601c4 	.word	0x080601c4

080a18c8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a18c8:	b508      	push	{r3, lr}
 80a18ca:	4b02      	ldr	r3, [pc, #8]	; (80a18d4 <HAL_USART_Peek_Data+0xc>)
 80a18cc:	681b      	ldr	r3, [r3, #0]
 80a18ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a18d0:	9301      	str	r3, [sp, #4]
 80a18d2:	bd08      	pop	{r3, pc}
 80a18d4:	080601c4 	.word	0x080601c4

080a18d8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a18d8:	b508      	push	{r3, lr}
 80a18da:	4b02      	ldr	r3, [pc, #8]	; (80a18e4 <HAL_USART_Flush_Data+0xc>)
 80a18dc:	681b      	ldr	r3, [r3, #0]
 80a18de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a18e0:	9301      	str	r3, [sp, #4]
 80a18e2:	bd08      	pop	{r3, pc}
 80a18e4:	080601c4 	.word	0x080601c4

080a18e8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a18e8:	b508      	push	{r3, lr}
 80a18ea:	4b02      	ldr	r3, [pc, #8]	; (80a18f4 <HAL_USART_Is_Enabled+0xc>)
 80a18ec:	681b      	ldr	r3, [r3, #0]
 80a18ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a18f0:	9301      	str	r3, [sp, #4]
 80a18f2:	bd08      	pop	{r3, pc}
 80a18f4:	080601c4 	.word	0x080601c4

080a18f8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a18f8:	b508      	push	{r3, lr}
 80a18fa:	4b02      	ldr	r3, [pc, #8]	; (80a1904 <HAL_USART_Available_Data_For_Write+0xc>)
 80a18fc:	681b      	ldr	r3, [r3, #0]
 80a18fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1900:	9301      	str	r3, [sp, #4]
 80a1902:	bd08      	pop	{r3, pc}
 80a1904:	080601c4 	.word	0x080601c4

080a1908 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a1908:	b508      	push	{r3, lr}
 80a190a:	4b02      	ldr	r3, [pc, #8]	; (80a1914 <HAL_I2C_Set_Speed+0xc>)
 80a190c:	681b      	ldr	r3, [r3, #0]
 80a190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1910:	9301      	str	r3, [sp, #4]
 80a1912:	bd08      	pop	{r3, pc}
 80a1914:	080601ac 	.word	0x080601ac

080a1918 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a1918:	b508      	push	{r3, lr}
 80a191a:	4b02      	ldr	r3, [pc, #8]	; (80a1924 <HAL_I2C_Begin+0xc>)
 80a191c:	681b      	ldr	r3, [r3, #0]
 80a191e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1920:	9301      	str	r3, [sp, #4]
 80a1922:	bd08      	pop	{r3, pc}
 80a1924:	080601ac 	.word	0x080601ac

080a1928 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a1928:	b508      	push	{r3, lr}
 80a192a:	4b02      	ldr	r3, [pc, #8]	; (80a1934 <HAL_I2C_Request_Data+0xc>)
 80a192c:	681b      	ldr	r3, [r3, #0]
 80a192e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1930:	9301      	str	r3, [sp, #4]
 80a1932:	bd08      	pop	{r3, pc}
 80a1934:	080601ac 	.word	0x080601ac

080a1938 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a1938:	b508      	push	{r3, lr}
 80a193a:	4b02      	ldr	r3, [pc, #8]	; (80a1944 <HAL_I2C_Begin_Transmission+0xc>)
 80a193c:	681b      	ldr	r3, [r3, #0]
 80a193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1940:	9301      	str	r3, [sp, #4]
 80a1942:	bd08      	pop	{r3, pc}
 80a1944:	080601ac 	.word	0x080601ac

080a1948 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a1948:	b508      	push	{r3, lr}
 80a194a:	4b02      	ldr	r3, [pc, #8]	; (80a1954 <HAL_I2C_End_Transmission+0xc>)
 80a194c:	681b      	ldr	r3, [r3, #0]
 80a194e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1950:	9301      	str	r3, [sp, #4]
 80a1952:	bd08      	pop	{r3, pc}
 80a1954:	080601ac 	.word	0x080601ac

080a1958 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1958:	b508      	push	{r3, lr}
 80a195a:	4b02      	ldr	r3, [pc, #8]	; (80a1964 <HAL_I2C_Write_Data+0xc>)
 80a195c:	681b      	ldr	r3, [r3, #0]
 80a195e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1960:	9301      	str	r3, [sp, #4]
 80a1962:	bd08      	pop	{r3, pc}
 80a1964:	080601ac 	.word	0x080601ac

080a1968 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1968:	b508      	push	{r3, lr}
 80a196a:	4b02      	ldr	r3, [pc, #8]	; (80a1974 <HAL_I2C_Available_Data+0xc>)
 80a196c:	681b      	ldr	r3, [r3, #0]
 80a196e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1970:	9301      	str	r3, [sp, #4]
 80a1972:	bd08      	pop	{r3, pc}
 80a1974:	080601ac 	.word	0x080601ac

080a1978 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1978:	b508      	push	{r3, lr}
 80a197a:	4b02      	ldr	r3, [pc, #8]	; (80a1984 <HAL_I2C_Read_Data+0xc>)
 80a197c:	681b      	ldr	r3, [r3, #0]
 80a197e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1980:	9301      	str	r3, [sp, #4]
 80a1982:	bd08      	pop	{r3, pc}
 80a1984:	080601ac 	.word	0x080601ac

080a1988 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1988:	b508      	push	{r3, lr}
 80a198a:	4b02      	ldr	r3, [pc, #8]	; (80a1994 <HAL_I2C_Peek_Data+0xc>)
 80a198c:	681b      	ldr	r3, [r3, #0]
 80a198e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1990:	9301      	str	r3, [sp, #4]
 80a1992:	bd08      	pop	{r3, pc}
 80a1994:	080601ac 	.word	0x080601ac

080a1998 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1998:	b508      	push	{r3, lr}
 80a199a:	4b02      	ldr	r3, [pc, #8]	; (80a19a4 <HAL_I2C_Flush_Data+0xc>)
 80a199c:	681b      	ldr	r3, [r3, #0]
 80a199e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a19a0:	9301      	str	r3, [sp, #4]
 80a19a2:	bd08      	pop	{r3, pc}
 80a19a4:	080601ac 	.word	0x080601ac

080a19a8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a19a8:	b508      	push	{r3, lr}
 80a19aa:	4b02      	ldr	r3, [pc, #8]	; (80a19b4 <HAL_I2C_Is_Enabled+0xc>)
 80a19ac:	681b      	ldr	r3, [r3, #0]
 80a19ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a19b0:	9301      	str	r3, [sp, #4]
 80a19b2:	bd08      	pop	{r3, pc}
 80a19b4:	080601ac 	.word	0x080601ac

080a19b8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a19b8:	b508      	push	{r3, lr}
 80a19ba:	4b03      	ldr	r3, [pc, #12]	; (80a19c8 <HAL_I2C_Init+0x10>)
 80a19bc:	681b      	ldr	r3, [r3, #0]
 80a19be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a19c2:	9301      	str	r3, [sp, #4]
 80a19c4:	bd08      	pop	{r3, pc}
 80a19c6:	0000      	.short	0x0000
 80a19c8:	080601ac 	.word	0x080601ac

080a19cc <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
 80a19cc:	b508      	push	{r3, lr}
 80a19ce:	4b02      	ldr	r3, [pc, #8]	; (80a19d8 <HAL_Servo_Attach+0xc>)
 80a19d0:	681b      	ldr	r3, [r3, #0]
 80a19d2:	691b      	ldr	r3, [r3, #16]
 80a19d4:	9301      	str	r3, [sp, #4]
 80a19d6:	bd08      	pop	{r3, pc}
 80a19d8:	080601a8 	.word	0x080601a8

080a19dc <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
 80a19dc:	b508      	push	{r3, lr}
 80a19de:	4b02      	ldr	r3, [pc, #8]	; (80a19e8 <HAL_Servo_Detach+0xc>)
 80a19e0:	681b      	ldr	r3, [r3, #0]
 80a19e2:	695b      	ldr	r3, [r3, #20]
 80a19e4:	9301      	str	r3, [sp, #4]
 80a19e6:	bd08      	pop	{r3, pc}
 80a19e8:	080601a8 	.word	0x080601a8

080a19ec <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
 80a19ec:	b508      	push	{r3, lr}
 80a19ee:	4b02      	ldr	r3, [pc, #8]	; (80a19f8 <HAL_Servo_Write_Pulse_Width+0xc>)
 80a19f0:	681b      	ldr	r3, [r3, #0]
 80a19f2:	699b      	ldr	r3, [r3, #24]
 80a19f4:	9301      	str	r3, [sp, #4]
 80a19f6:	bd08      	pop	{r3, pc}
 80a19f8:	080601a8 	.word	0x080601a8

080a19fc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a19fc:	b508      	push	{r3, lr}
 80a19fe:	4b02      	ldr	r3, [pc, #8]	; (80a1a08 <HAL_USB_USART_Init+0xc>)
 80a1a00:	681b      	ldr	r3, [r3, #0]
 80a1a02:	681b      	ldr	r3, [r3, #0]
 80a1a04:	9301      	str	r3, [sp, #4]
 80a1a06:	bd08      	pop	{r3, pc}
 80a1a08:	080601d8 	.word	0x080601d8

080a1a0c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1a0c:	b508      	push	{r3, lr}
 80a1a0e:	4b02      	ldr	r3, [pc, #8]	; (80a1a18 <HAL_USB_USART_Begin+0xc>)
 80a1a10:	681b      	ldr	r3, [r3, #0]
 80a1a12:	685b      	ldr	r3, [r3, #4]
 80a1a14:	9301      	str	r3, [sp, #4]
 80a1a16:	bd08      	pop	{r3, pc}
 80a1a18:	080601d8 	.word	0x080601d8

080a1a1c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1a1c:	b508      	push	{r3, lr}
 80a1a1e:	4b02      	ldr	r3, [pc, #8]	; (80a1a28 <HAL_USB_USART_Available_Data+0xc>)
 80a1a20:	681b      	ldr	r3, [r3, #0]
 80a1a22:	691b      	ldr	r3, [r3, #16]
 80a1a24:	9301      	str	r3, [sp, #4]
 80a1a26:	bd08      	pop	{r3, pc}
 80a1a28:	080601d8 	.word	0x080601d8

080a1a2c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1a2c:	b508      	push	{r3, lr}
 80a1a2e:	4b02      	ldr	r3, [pc, #8]	; (80a1a38 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1a30:	681b      	ldr	r3, [r3, #0]
 80a1a32:	695b      	ldr	r3, [r3, #20]
 80a1a34:	9301      	str	r3, [sp, #4]
 80a1a36:	bd08      	pop	{r3, pc}
 80a1a38:	080601d8 	.word	0x080601d8

080a1a3c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1a3c:	b508      	push	{r3, lr}
 80a1a3e:	4b02      	ldr	r3, [pc, #8]	; (80a1a48 <HAL_USB_USART_Receive_Data+0xc>)
 80a1a40:	681b      	ldr	r3, [r3, #0]
 80a1a42:	699b      	ldr	r3, [r3, #24]
 80a1a44:	9301      	str	r3, [sp, #4]
 80a1a46:	bd08      	pop	{r3, pc}
 80a1a48:	080601d8 	.word	0x080601d8

080a1a4c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1a4c:	b508      	push	{r3, lr}
 80a1a4e:	4b02      	ldr	r3, [pc, #8]	; (80a1a58 <HAL_USB_USART_Send_Data+0xc>)
 80a1a50:	681b      	ldr	r3, [r3, #0]
 80a1a52:	69db      	ldr	r3, [r3, #28]
 80a1a54:	9301      	str	r3, [sp, #4]
 80a1a56:	bd08      	pop	{r3, pc}
 80a1a58:	080601d8 	.word	0x080601d8

080a1a5c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1a5c:	b508      	push	{r3, lr}
 80a1a5e:	4b02      	ldr	r3, [pc, #8]	; (80a1a68 <HAL_USB_USART_Flush_Data+0xc>)
 80a1a60:	681b      	ldr	r3, [r3, #0]
 80a1a62:	6a1b      	ldr	r3, [r3, #32]
 80a1a64:	9301      	str	r3, [sp, #4]
 80a1a66:	bd08      	pop	{r3, pc}
 80a1a68:	080601d8 	.word	0x080601d8

080a1a6c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1a6c:	b508      	push	{r3, lr}
 80a1a6e:	4b02      	ldr	r3, [pc, #8]	; (80a1a78 <set_system_mode+0xc>)
 80a1a70:	681b      	ldr	r3, [r3, #0]
 80a1a72:	685b      	ldr	r3, [r3, #4]
 80a1a74:	9301      	str	r3, [sp, #4]
 80a1a76:	bd08      	pop	{r3, pc}
 80a1a78:	080601a4 	.word	0x080601a4

080a1a7c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1a7c:	b508      	push	{r3, lr}
 80a1a7e:	4b02      	ldr	r3, [pc, #8]	; (80a1a88 <system_delay_ms+0xc>)
 80a1a80:	681b      	ldr	r3, [r3, #0]
 80a1a82:	695b      	ldr	r3, [r3, #20]
 80a1a84:	9301      	str	r3, [sp, #4]
 80a1a86:	bd08      	pop	{r3, pc}
 80a1a88:	080601a4 	.word	0x080601a4

080a1a8c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1a8c:	b508      	push	{r3, lr}
 80a1a8e:	4b02      	ldr	r3, [pc, #8]	; (80a1a98 <system_thread_set_state+0xc>)
 80a1a90:	681b      	ldr	r3, [r3, #0]
 80a1a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1a94:	9301      	str	r3, [sp, #4]
 80a1a96:	bd08      	pop	{r3, pc}
 80a1a98:	080601a4 	.word	0x080601a4

080a1a9c <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80a1a9c:	b508      	push	{r3, lr}
 80a1a9e:	4b02      	ldr	r3, [pc, #8]	; (80a1aa8 <system_set_usb_request_app_handler+0xc>)
 80a1aa0:	681b      	ldr	r3, [r3, #0]
 80a1aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1aa4:	9301      	str	r3, [sp, #4]
 80a1aa6:	bd08      	pop	{r3, pc}
 80a1aa8:	080601a4 	.word	0x080601a4

080a1aac <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80a1aac:	b508      	push	{r3, lr}
 80a1aae:	4b02      	ldr	r3, [pc, #8]	; (80a1ab8 <system_set_usb_request_result+0xc>)
 80a1ab0:	681b      	ldr	r3, [r3, #0]
 80a1ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1ab4:	9301      	str	r3, [sp, #4]
 80a1ab6:	bd08      	pop	{r3, pc}
 80a1ab8:	080601a4 	.word	0x080601a4

080a1abc <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1abc:	b508      	push	{r3, lr}
 80a1abe:	4b02      	ldr	r3, [pc, #8]	; (80a1ac8 <network_ready+0xc>)
 80a1ac0:	681b      	ldr	r3, [r3, #0]
 80a1ac2:	691b      	ldr	r3, [r3, #16]
 80a1ac4:	9301      	str	r3, [sp, #4]
 80a1ac6:	bd08      	pop	{r3, pc}
 80a1ac8:	080601c8 	.word	0x080601c8

080a1acc <free>:
#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
DYNALIB_FN(1, rt, free, void(void*))
 80a1acc:	b508      	push	{r3, lr}
 80a1ace:	4b02      	ldr	r3, [pc, #8]	; (80a1ad8 <free+0xc>)
 80a1ad0:	681b      	ldr	r3, [r3, #0]
 80a1ad2:	685b      	ldr	r3, [r3, #4]
 80a1ad4:	9301      	str	r3, [sp, #4]
 80a1ad6:	bd08      	pop	{r3, pc}
 80a1ad8:	080601a0 	.word	0x080601a0

080a1adc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a1adc:	b508      	push	{r3, lr}
 80a1ade:	4b02      	ldr	r3, [pc, #8]	; (80a1ae8 <vsnprintf+0xc>)
 80a1ae0:	681b      	ldr	r3, [r3, #0]
 80a1ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1ae4:	9301      	str	r3, [sp, #4]
 80a1ae6:	bd08      	pop	{r3, pc}
 80a1ae8:	080601a0 	.word	0x080601a0

080a1aec <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1aec:	4770      	bx	lr

080a1aee <_ZN8SPIClassD0Ev>:
 80a1aee:	b510      	push	{r4, lr}
 80a1af0:	4604      	mov	r4, r0
 80a1af2:	f7fe fad2 	bl	80a009a <_ZdlPv>
 80a1af6:	4620      	mov	r0, r4
 80a1af8:	bd10      	pop	{r4, pc}
	...

080a1afc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1afc:	b570      	push	{r4, r5, r6, lr}
 80a1afe:	4604      	mov	r4, r0
 80a1b00:	460e      	mov	r6, r1
 80a1b02:	4b07      	ldr	r3, [pc, #28]	; (80a1b20 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
	Mutex(os_mutex_t handle) : handle_(handle) {}

	/**
	 * Creates a new mutex.
	 */
	Mutex() : handle_(nullptr)
 80a1b04:	2500      	movs	r5, #0
 80a1b06:	6003      	str	r3, [r0, #0]
 80a1b08:	f840 5f0c 	str.w	r5, [r0, #12]!
	{
		os_mutex_create(&handle_);
 80a1b0c:	f7ff feb4 	bl	80a1878 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1b10:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1b12:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1b14:	f7ff fe90 	bl	80a1838 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1b18:	60a5      	str	r5, [r4, #8]
}
 80a1b1a:	4620      	mov	r0, r4
 80a1b1c:	bd70      	pop	{r4, r5, r6, pc}
 80a1b1e:	bf00      	nop
 80a1b20:	080a30b8 	.word	0x080a30b8

080a1b24 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1b24:	7900      	ldrb	r0, [r0, #4]
 80a1b26:	f7ff be8f 	b.w	80a1848 <HAL_SPI_Is_Enabled>

080a1b2a <_ZN5Servo17writeMicrosecondsEt>:
  // write(179).
  return a == this->minAngle || a == this->maxAngle ? a : a + 1;
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{
 80a1b2a:	f9b0 2000 	ldrsh.w	r2, [r0]

  if (!this->attached())
 80a1b2e:	1c53      	adds	r3, r2, #1
 80a1b30:	d00b      	beq.n	80a1b4a <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
 80a1b32:	8843      	ldrh	r3, [r0, #2]
 80a1b34:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 80a1b36:	428b      	cmp	r3, r1
 80a1b38:	d803      	bhi.n	80a1b42 <_ZN5Servo17writeMicrosecondsEt+0x18>
 80a1b3a:	4288      	cmp	r0, r1
 80a1b3c:	4603      	mov	r3, r0
 80a1b3e:	bf28      	it	cs
 80a1b40:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
 80a1b42:	4619      	mov	r1, r3
 80a1b44:	b290      	uxth	r0, r2
 80a1b46:	f7ff bf51 	b.w	80a19ec <HAL_Servo_Write_Pulse_Width>
 80a1b4a:	4770      	bx	lr

080a1b4c <_ZN5Servo11resetFieldsEv>:
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a1b4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
 80a1b50:	22b4      	movs	r2, #180	; 0xb4
 80a1b52:	8102      	strh	r2, [r0, #8]
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a1b54:	f44f 7208 	mov.w	r2, #544	; 0x220
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a1b58:	8003      	strh	r3, [r0, #0]
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a1b5a:	8042      	strh	r2, [r0, #2]
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a1b5c:	2300      	movs	r3, #0
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a1b5e:	f44f 6216 	mov.w	r2, #2400	; 0x960
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a1b62:	80c3      	strh	r3, [r0, #6]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a1b64:	8082      	strh	r2, [r0, #4]
  this->trim = 0;
 80a1b66:	60c3      	str	r3, [r0, #12]
 80a1b68:	4770      	bx	lr

080a1b6a <_ZN5ServoC1Ev>:
#define ANGLE_TO_US(a)    ((uint16_t)(map((a), this->minAngle, this->maxAngle, \
                                        this->minPW, this->maxPW)))
#define US_TO_ANGLE(us)   ((int16_t)(map((us), this->minPW, this->maxPW,  \
                                       this->minAngle, this->maxAngle)))

Servo::Servo()
 80a1b6a:	b508      	push	{r3, lr}
{
  this->resetFields();
 80a1b6c:	f7ff ffee 	bl	80a1b4c <_ZN5Servo11resetFieldsEv>
}
 80a1b70:	bd08      	pop	{r3, pc}

080a1b72 <_ZN5Servo6detachEv>:

  return true;
}

bool Servo::detach()
{
 80a1b72:	b510      	push	{r4, lr}
 80a1b74:	4604      	mov	r4, r0
 80a1b76:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
 80a1b7a:	1c43      	adds	r3, r0, #1
 80a1b7c:	d007      	beq.n	80a1b8e <_ZN5Servo6detachEv+0x1c>
  {
    return false;
  }

  HAL_Servo_Detach(this->pin);
 80a1b7e:	b280      	uxth	r0, r0
 80a1b80:	f7ff ff2c 	bl	80a19dc <HAL_Servo_Detach>

  this->resetFields();
 80a1b84:	4620      	mov	r0, r4
 80a1b86:	f7ff ffe1 	bl	80a1b4c <_ZN5Servo11resetFieldsEv>

  return true;
 80a1b8a:	2001      	movs	r0, #1
 80a1b8c:	bd10      	pop	{r4, pc}

bool Servo::detach()
{
  if (!this->attached())
  {
    return false;
 80a1b8e:	2000      	movs	r0, #0
  HAL_Servo_Detach(this->pin);

  this->resetFields();

  return true;
}
 80a1b90:	bd10      	pop	{r4, pc}

080a1b92 <_ZN5Servo6attachEtttss>:
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a1b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1b96:	460d      	mov	r5, r1
 80a1b98:	4604      	mov	r4, r0

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a1b9a:	2102      	movs	r1, #2
 80a1b9c:	4628      	mov	r0, r5
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a1b9e:	4690      	mov	r8, r2
 80a1ba0:	461f      	mov	r7, r3

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a1ba2:	f7ff fe11 	bl	80a17c8 <HAL_Validate_Pin_Function>
 80a1ba6:	2802      	cmp	r0, #2
 80a1ba8:	d001      	beq.n	80a1bae <_ZN5Servo6attachEtttss+0x1c>
  {
    return false;
 80a1baa:	2600      	movs	r6, #0
 80a1bac:	e019      	b.n	80a1be2 <_ZN5Servo6attachEtttss+0x50>
  }

  // Safety check
  if (!pinAvailable(pin))
 80a1bae:	4628      	mov	r0, r5
 80a1bb0:	f000 fb9c 	bl	80a22ec <pinAvailable>
 80a1bb4:	4606      	mov	r6, r0
 80a1bb6:	2800      	cmp	r0, #0
 80a1bb8:	d0f7      	beq.n	80a1baa <_ZN5Servo6attachEtttss+0x18>
  {
    return false;
  }

  if (this->attached())
 80a1bba:	f9b4 3000 	ldrsh.w	r3, [r4]
 80a1bbe:	3301      	adds	r3, #1
 80a1bc0:	d002      	beq.n	80a1bc8 <_ZN5Servo6attachEtttss+0x36>
  {
    this->detach();
 80a1bc2:	4620      	mov	r0, r4
 80a1bc4:	f7ff ffd5 	bl	80a1b72 <_ZN5Servo6detachEv>
  }

  this->pin = pin;
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a1bc8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  if (this->attached())
  {
    this->detach();
  }

  this->pin = pin;
 80a1bcc:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a1bce:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
 80a1bd0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  {
    this->detach();
  }

  this->pin = pin;
  this->minPW = minPW;
 80a1bd4:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
 80a1bd8:	80a7      	strh	r7, [r4, #4]
  this->minAngle = minAngle;
  this->maxAngle = maxAngle;
 80a1bda:	8123      	strh	r3, [r4, #8]

  HAL_Servo_Attach(this->pin);
 80a1bdc:	4628      	mov	r0, r5
 80a1bde:	f7ff fef5 	bl	80a19cc <HAL_Servo_Attach>

  return true;
}
 80a1be2:	4630      	mov	r0, r6
 80a1be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1be8 <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1be8:	2000      	movs	r0, #0
 80a1bea:	f7ff bf3f 	b.w	80a1a6c <set_system_mode>

080a1bee <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1bf0:	4606      	mov	r6, r0
 80a1bf2:	460d      	mov	r5, r1
 80a1bf4:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1bf6:	2400      	movs	r4, #0
  while (size--) {
 80a1bf8:	42bd      	cmp	r5, r7
 80a1bfa:	d00c      	beq.n	80a1c16 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1bfc:	6833      	ldr	r3, [r6, #0]
 80a1bfe:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1c02:	689b      	ldr	r3, [r3, #8]
 80a1c04:	4630      	mov	r0, r6
 80a1c06:	4798      	blx	r3
     if (chunk>=0)
 80a1c08:	2800      	cmp	r0, #0
 80a1c0a:	db01      	blt.n	80a1c10 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1c0c:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1c0e:	e7f3      	b.n	80a1bf8 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1c10:	2c00      	cmp	r4, #0
 80a1c12:	bf08      	it	eq
 80a1c14:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1c16:	4620      	mov	r0, r4
 80a1c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1c1a <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1c1a:	b570      	push	{r4, r5, r6, lr}
 80a1c1c:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1c1e:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1c20:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1c22:	b149      	cbz	r1, 80a1c38 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1c24:	f001 f9b3 	bl	80a2f8e <strlen>
 80a1c28:	682b      	ldr	r3, [r5, #0]
 80a1c2a:	4602      	mov	r2, r0
 80a1c2c:	4621      	mov	r1, r4
 80a1c2e:	4628      	mov	r0, r5
    }
 80a1c30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1c34:	68db      	ldr	r3, [r3, #12]
 80a1c36:	4718      	bx	r3
    }
 80a1c38:	bd70      	pop	{r4, r5, r6, pc}

080a1c3a <_ZN5Print5printEPKc>:
 80a1c3a:	b508      	push	{r3, lr}
 80a1c3c:	f7ff ffed 	bl	80a1c1a <_ZN5Print5writeEPKc>
 80a1c40:	bd08      	pop	{r3, pc}

080a1c42 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1c42:	6803      	ldr	r3, [r0, #0]
 80a1c44:	689b      	ldr	r3, [r3, #8]
 80a1c46:	4718      	bx	r3

080a1c48 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1c48:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1c4a:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1c4c:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1c4e:	f7ff fff8 	bl	80a1c42 <_ZN5Print5printEc>
  n += print('\n');
 80a1c52:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1c54:	4604      	mov	r4, r0
  n += print('\n');
 80a1c56:	4628      	mov	r0, r5
 80a1c58:	f7ff fff3 	bl	80a1c42 <_ZN5Print5printEc>
  return n;
}
 80a1c5c:	4420      	add	r0, r4
 80a1c5e:	bd38      	pop	{r3, r4, r5, pc}

080a1c60 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1c60:	b538      	push	{r3, r4, r5, lr}
 80a1c62:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1c64:	f7ff ffd9 	bl	80a1c1a <_ZN5Print5writeEPKc>
 80a1c68:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1c6a:	4628      	mov	r0, r5
 80a1c6c:	f7ff ffec 	bl	80a1c48 <_ZN5Print7printlnEv>
  return n;
}
 80a1c70:	4420      	add	r0, r4
 80a1c72:	bd38      	pop	{r3, r4, r5, pc}

080a1c74 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1c74:	2a01      	cmp	r2, #1
 80a1c76:	bf98      	it	ls
 80a1c78:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1c7a:	b530      	push	{r4, r5, lr}
 80a1c7c:	460b      	mov	r3, r1
 80a1c7e:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1c80:	2100      	movs	r1, #0
 80a1c82:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1c86:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1c8a:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1c8e:	fb05 3312 	mls	r3, r5, r2, r3
 80a1c92:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1c94:	2b09      	cmp	r3, #9
 80a1c96:	bf94      	ite	ls
 80a1c98:	3330      	addls	r3, #48	; 0x30
 80a1c9a:	3337      	addhi	r3, #55	; 0x37
 80a1c9c:	b2db      	uxtb	r3, r3
 80a1c9e:	4621      	mov	r1, r4
 80a1ca0:	f804 3901 	strb.w	r3, [r4], #-1
 80a1ca4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1ca6:	2d00      	cmp	r5, #0
 80a1ca8:	d1ef      	bne.n	80a1c8a <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1caa:	f7ff ffb6 	bl	80a1c1a <_ZN5Print5writeEPKc>
}
 80a1cae:	b00b      	add	sp, #44	; 0x2c
 80a1cb0:	bd30      	pop	{r4, r5, pc}

080a1cb2 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1cb2:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1cb4:	b922      	cbnz	r2, 80a1cc0 <_ZN5Print5printEmi+0xe>
 80a1cb6:	6803      	ldr	r3, [r0, #0]
 80a1cb8:	b2c9      	uxtb	r1, r1
 80a1cba:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1cbc:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1cbe:	4718      	bx	r3
  else return printNumber(n, base);
 80a1cc0:	b2d2      	uxtb	r2, r2
}
 80a1cc2:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1cc4:	f7ff bfd6 	b.w	80a1c74 <_ZN5Print11printNumberEmh>

080a1cc8 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1cc8:	f7ff bff3 	b.w	80a1cb2 <_ZN5Print5printEmi>

080a1ccc <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a1ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1cd0:	4607      	mov	r7, r0
 80a1cd2:	460e      	mov	r6, r1
  if (base == 0) {
 80a1cd4:	4615      	mov	r5, r2
 80a1cd6:	b92a      	cbnz	r2, 80a1ce4 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1cd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a1cdc:	6803      	ldr	r3, [r0, #0]
 80a1cde:	b2c9      	uxtb	r1, r1
 80a1ce0:	689b      	ldr	r3, [r3, #8]
 80a1ce2:	4718      	bx	r3
  } else if (base == 10) {
 80a1ce4:	2a0a      	cmp	r2, #10
 80a1ce6:	d102      	bne.n	80a1cee <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a1ce8:	2900      	cmp	r1, #0
 80a1cea:	da01      	bge.n	80a1cf0 <_ZN5Print5printEli+0x24>
 80a1cec:	e004      	b.n	80a1cf8 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1cee:	b2d2      	uxtb	r2, r2
  }
}
 80a1cf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1cf4:	f7ff bfbe 	b.w	80a1c74 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1cf8:	212d      	movs	r1, #45	; 0x2d
 80a1cfa:	f7ff ffa2 	bl	80a1c42 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a1cfe:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1d00:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a1d02:	4271      	negs	r1, r6
 80a1d04:	4638      	mov	r0, r7
 80a1d06:	f7ff ffb5 	bl	80a1c74 <_ZN5Print11printNumberEmh>
 80a1d0a:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1d10 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1d10:	f7ff bfdc 	b.w	80a1ccc <_ZN5Print5printEli>

080a1d14 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a1d14:	b40c      	push	{r2, r3}
 80a1d16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1d1a:	b087      	sub	sp, #28
 80a1d1c:	af00      	add	r7, sp, #0
 80a1d1e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a1d22:	f854 9b04 	ldr.w	r9, [r4], #4
 80a1d26:	4605      	mov	r5, r0
 80a1d28:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1d2a:	4623      	mov	r3, r4
 80a1d2c:	464a      	mov	r2, r9
 80a1d2e:	2114      	movs	r1, #20
 80a1d30:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a1d32:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1d34:	f7ff fed2 	bl	80a1adc <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a1d38:	2813      	cmp	r0, #19
 80a1d3a:	d805      	bhi.n	80a1d48 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1d3c:	1d39      	adds	r1, r7, #4
 80a1d3e:	4628      	mov	r0, r5
 80a1d40:	f7ff ff6b 	bl	80a1c1a <_ZN5Print5writeEPKc>
 80a1d44:	4604      	mov	r4, r0
 80a1d46:	e013      	b.n	80a1d70 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1d48:	f100 0308 	add.w	r3, r0, #8
 80a1d4c:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a1d50:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1d52:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a1d56:	1c41      	adds	r1, r0, #1
 80a1d58:	4623      	mov	r3, r4
 80a1d5a:	464a      	mov	r2, r9
 80a1d5c:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a1d5e:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a1d60:	f7ff febc 	bl	80a1adc <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1d64:	4669      	mov	r1, sp
 80a1d66:	4628      	mov	r0, r5
 80a1d68:	f7ff ff57 	bl	80a1c1a <_ZN5Print5writeEPKc>
 80a1d6c:	4604      	mov	r4, r0
 80a1d6e:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a1d70:	b11e      	cbz	r6, 80a1d7a <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a1d72:	4628      	mov	r0, r5
 80a1d74:	f7ff ff68 	bl	80a1c48 <_ZN5Print7printlnEv>
 80a1d78:	4404      	add	r4, r0
    return n;
}
 80a1d7a:	4620      	mov	r0, r4
 80a1d7c:	371c      	adds	r7, #28
 80a1d7e:	46bd      	mov	sp, r7
 80a1d80:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1d84:	b002      	add	sp, #8
 80a1d86:	4770      	bx	lr

080a1d88 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1d88:	4a01      	ldr	r2, [pc, #4]	; (80a1d90 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1d8a:	4b02      	ldr	r3, [pc, #8]	; (80a1d94 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1d8c:	601a      	str	r2, [r3, #0]
 80a1d8e:	4770      	bx	lr
 80a1d90:	080a3178 	.word	0x080a3178
 80a1d94:	20000410 	.word	0x20000410

080a1d98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1d98:	4b02      	ldr	r3, [pc, #8]	; (80a1da4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1d9a:	681a      	ldr	r2, [r3, #0]
 80a1d9c:	4b02      	ldr	r3, [pc, #8]	; (80a1da8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1d9e:	601a      	str	r2, [r3, #0]
 80a1da0:	4770      	bx	lr
 80a1da2:	bf00      	nop
 80a1da4:	20000354 	.word	0x20000354
 80a1da8:	20000414 	.word	0x20000414

080a1dac <delay>:
  return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1dac:	2100      	movs	r1, #0
 80a1dae:	f7ff be65 	b.w	80a1a7c <system_delay_ms>
	...

080a1db4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1db4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1db6:	4b14      	ldr	r3, [pc, #80]	; (80a1e08 <serialEventRun+0x54>)
 80a1db8:	b133      	cbz	r3, 80a1dc8 <serialEventRun+0x14>
 80a1dba:	f000 f925 	bl	80a2008 <_Z16_fetch_usbserialv>
 80a1dbe:	6803      	ldr	r3, [r0, #0]
 80a1dc0:	691b      	ldr	r3, [r3, #16]
 80a1dc2:	4798      	blx	r3
 80a1dc4:	2800      	cmp	r0, #0
 80a1dc6:	dc16      	bgt.n	80a1df6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1dc8:	4b10      	ldr	r3, [pc, #64]	; (80a1e0c <serialEventRun+0x58>)
 80a1dca:	b133      	cbz	r3, 80a1dda <serialEventRun+0x26>
 80a1dcc:	f000 f9ea 	bl	80a21a4 <_Z22__fetch_global_Serial1v>
 80a1dd0:	6803      	ldr	r3, [r0, #0]
 80a1dd2:	691b      	ldr	r3, [r3, #16]
 80a1dd4:	4798      	blx	r3
 80a1dd6:	2800      	cmp	r0, #0
 80a1dd8:	dc10      	bgt.n	80a1dfc <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1dda:	4b0d      	ldr	r3, [pc, #52]	; (80a1e10 <serialEventRun+0x5c>)
 80a1ddc:	b10b      	cbz	r3, 80a1de2 <serialEventRun+0x2e>
 80a1dde:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1de2:	4b0c      	ldr	r3, [pc, #48]	; (80a1e14 <serialEventRun+0x60>)
 80a1de4:	b17b      	cbz	r3, 80a1e06 <serialEventRun+0x52>
 80a1de6:	f000 f94b 	bl	80a2080 <_Z17_fetch_usbserial1v>
 80a1dea:	6803      	ldr	r3, [r0, #0]
 80a1dec:	691b      	ldr	r3, [r3, #16]
 80a1dee:	4798      	blx	r3
 80a1df0:	2800      	cmp	r0, #0
 80a1df2:	dc06      	bgt.n	80a1e02 <serialEventRun+0x4e>
 80a1df4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1df6:	f3af 8000 	nop.w
 80a1dfa:	e7e5      	b.n	80a1dc8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1dfc:	f3af 8000 	nop.w
 80a1e00:	e7eb      	b.n	80a1dda <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1e02:	f3af 8000 	nop.w
 80a1e06:	bd08      	pop	{r3, pc}
	...

080a1e18 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1e18:	b508      	push	{r3, lr}
	serialEventRun();
 80a1e1a:	f7ff ffcb 	bl	80a1db4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1e1e:	f7ff fd23 	bl	80a1868 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1e22:	4b01      	ldr	r3, [pc, #4]	; (80a1e28 <_post_loop+0x10>)
 80a1e24:	6018      	str	r0, [r3, #0]
 80a1e26:	bd08      	pop	{r3, pc}
 80a1e28:	200008a0 	.word	0x200008a0

080a1e2c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1e2c:	4802      	ldr	r0, [pc, #8]	; (80a1e38 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1e2e:	4a03      	ldr	r2, [pc, #12]	; (80a1e3c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1e30:	4903      	ldr	r1, [pc, #12]	; (80a1e40 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1e32:	1a12      	subs	r2, r2, r0
 80a1e34:	f001 b898 	b.w	80a2f68 <memcpy>
 80a1e38:	40024000 	.word	0x40024000
 80a1e3c:	40024004 	.word	0x40024004
 80a1e40:	080a32b0 	.word	0x080a32b0

080a1e44 <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80a1e44:	2000      	movs	r0, #0
 80a1e46:	4770      	bx	lr

080a1e48 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a1e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80a1e4a:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a1e4c:	4604      	mov	r4, r0
    switch (req->type) {
 80a1e4e:	2b0a      	cmp	r3, #10
 80a1e50:	d00e      	beq.n	80a1e70 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 80a1e52:	2b50      	cmp	r3, #80	; 0x50
 80a1e54:	d11c      	bne.n	80a1e90 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80a1e56:	4b10      	ldr	r3, [pc, #64]	; (80a1e98 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80a1e58:	681d      	ldr	r5, [r3, #0]
 80a1e5a:	b1cd      	cbz	r5, 80a1e90 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 80a1e5c:	7d03      	ldrb	r3, [r0, #20]
 80a1e5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a1e62:	9300      	str	r3, [sp, #0]
 80a1e64:	68c2      	ldr	r2, [r0, #12]
 80a1e66:	f100 0310 	add.w	r3, r0, #16
 80a1e6a:	6880      	ldr	r0, [r0, #8]
 80a1e6c:	47a8      	blx	r5
 80a1e6e:	e007      	b.n	80a1e80 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80a1e70:	f100 0310 	add.w	r3, r0, #16
 80a1e74:	68c2      	ldr	r2, [r0, #12]
 80a1e76:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a1e7a:	6880      	ldr	r0, [r0, #8]
 80a1e7c:	f7ff ffe2 	bl	80a1e44 <_Z26usb_request_custom_handlerPcjjPj>
 80a1e80:	b130      	cbz	r0, 80a1e90 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80a1e82:	2200      	movs	r2, #0
 80a1e84:	4620      	mov	r0, r4
 80a1e86:	4611      	mov	r1, r2
 80a1e88:	f7ff fe10 	bl	80a1aac <system_set_usb_request_result>
        return true;
 80a1e8c:	2001      	movs	r0, #1
 80a1e8e:	e000      	b.n	80a1e92 <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80a1e90:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80a1e92:	b003      	add	sp, #12
 80a1e94:	bd30      	pop	{r4, r5, pc}
 80a1e96:	bf00      	nop
 80a1e98:	20000418 	.word	0x20000418

080a1e9c <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80a1e9c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1e9e:	4c0c      	ldr	r4, [pc, #48]	; (80a1ed0 <module_user_init_hook+0x34>)
 80a1ea0:	4d0c      	ldr	r5, [pc, #48]	; (80a1ed4 <module_user_init_hook+0x38>)
 80a1ea2:	6823      	ldr	r3, [r4, #0]
 80a1ea4:	42ab      	cmp	r3, r5
 80a1ea6:	4b0c      	ldr	r3, [pc, #48]	; (80a1ed8 <module_user_init_hook+0x3c>)
 80a1ea8:	bf0c      	ite	eq
 80a1eaa:	2201      	moveq	r2, #1
 80a1eac:	2200      	movne	r2, #0
 80a1eae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1eb0:	d002      	beq.n	80a1eb8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1eb2:	f7ff ffbb 	bl	80a1e2c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1eb6:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a1eb8:	4b08      	ldr	r3, [pc, #32]	; (80a1edc <module_user_init_hook+0x40>)
 80a1eba:	b11b      	cbz	r3, 80a1ec4 <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1ebc:	f7ff fccc 	bl	80a1858 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a1ec0:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80a1ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80a1ec8:	2100      	movs	r1, #0
 80a1eca:	4805      	ldr	r0, [pc, #20]	; (80a1ee0 <module_user_init_hook+0x44>)
 80a1ecc:	f7ff bde6 	b.w	80a1a9c <system_set_usb_request_app_handler>
 80a1ed0:	40024000 	.word	0x40024000
 80a1ed4:	9a271c1e 	.word	0x9a271c1e
 80a1ed8:	2000041c 	.word	0x2000041c
 80a1edc:	00000000 	.word	0x00000000
 80a1ee0:	080a1e49 	.word	0x080a1e49

080a1ee4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1ee4:	4770      	bx	lr

080a1ee6 <_ZN9IPAddressD0Ev>:
 80a1ee6:	b510      	push	{r4, lr}
 80a1ee8:	4604      	mov	r4, r0
 80a1eea:	f7fe f8d6 	bl	80a009a <_ZdlPv>
 80a1eee:	4620      	mov	r0, r4
 80a1ef0:	bd10      	pop	{r4, pc}

080a1ef2 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1ef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1ef4:	460f      	mov	r7, r1
 80a1ef6:	f100 0608 	add.w	r6, r0, #8
 80a1efa:	1d05      	adds	r5, r0, #4
 80a1efc:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1efe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1f02:	220a      	movs	r2, #10
 80a1f04:	4638      	mov	r0, r7
 80a1f06:	f7ff fedf 	bl	80a1cc8 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1f0a:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1f0c:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1f0e:	d007      	beq.n	80a1f20 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1f10:	2c00      	cmp	r4, #0
 80a1f12:	d0f4      	beq.n	80a1efe <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1f14:	212e      	movs	r1, #46	; 0x2e
 80a1f16:	4638      	mov	r0, r7
 80a1f18:	f7ff fe93 	bl	80a1c42 <_ZN5Print5printEc>
 80a1f1c:	4404      	add	r4, r0
 80a1f1e:	e7ee      	b.n	80a1efe <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1f20:	4620      	mov	r0, r4
 80a1f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1f24 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1f24:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1f26:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1f2a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1f2e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1f32:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1f36:	2304      	movs	r3, #4
 80a1f38:	6041      	str	r1, [r0, #4]
 80a1f3a:	7503      	strb	r3, [r0, #20]
 80a1f3c:	bd10      	pop	{r4, pc}
	...

080a1f40 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1f42:	4d04      	ldr	r5, [pc, #16]	; (80a1f54 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1f44:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1f46:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1f4a:	9500      	str	r5, [sp, #0]
 80a1f4c:	f7ff ffea 	bl	80a1f24 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1f50:	b003      	add	sp, #12
 80a1f52:	bd30      	pop	{r4, r5, pc}
 80a1f54:	080a31d4 	.word	0x080a31d4

080a1f58 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1f58:	7441      	strb	r1, [r0, #17]
 80a1f5a:	4770      	bx	lr

080a1f5c <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a1f5c:	4770      	bx	lr

080a1f5e <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a1f5e:	2100      	movs	r1, #0
 80a1f60:	7c00      	ldrb	r0, [r0, #16]
 80a1f62:	f7ff bd6b 	b.w	80a1a3c <HAL_USB_USART_Receive_Data>

080a1f66 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a1f66:	2101      	movs	r1, #1
 80a1f68:	7c00      	ldrb	r0, [r0, #16]
 80a1f6a:	f7ff bd67 	b.w	80a1a3c <HAL_USB_USART_Receive_Data>

080a1f6e <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a1f6e:	7c00      	ldrb	r0, [r0, #16]
 80a1f70:	f7ff bd5c 	b.w	80a1a2c <HAL_USB_USART_Available_Data_For_Write>

080a1f74 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a1f74:	7c00      	ldrb	r0, [r0, #16]
 80a1f76:	f7ff bd51 	b.w	80a1a1c <HAL_USB_USART_Available_Data>

080a1f7a <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a1f7a:	b538      	push	{r3, r4, r5, lr}
 80a1f7c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1f7e:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a1f80:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1f82:	f7ff fd53 	bl	80a1a2c <HAL_USB_USART_Available_Data_For_Write>
 80a1f86:	2800      	cmp	r0, #0
 80a1f88:	dc01      	bgt.n	80a1f8e <_ZN9USBSerial5writeEh+0x14>
 80a1f8a:	7c60      	ldrb	r0, [r4, #17]
 80a1f8c:	b120      	cbz	r0, 80a1f98 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a1f8e:	4629      	mov	r1, r5
 80a1f90:	7c20      	ldrb	r0, [r4, #16]
 80a1f92:	f7ff fd5b 	bl	80a1a4c <HAL_USB_USART_Send_Data>
    return 1;
 80a1f96:	2001      	movs	r0, #1
  }
  return 0;
}
 80a1f98:	bd38      	pop	{r3, r4, r5, pc}

080a1f9a <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1f9a:	7c00      	ldrb	r0, [r0, #16]
 80a1f9c:	f7ff bd5e 	b.w	80a1a5c <HAL_USB_USART_Flush_Data>

080a1fa0 <_ZN9USBSerialD0Ev>:
 80a1fa0:	b510      	push	{r4, lr}
 80a1fa2:	4604      	mov	r4, r0
 80a1fa4:	f7fe f879 	bl	80a009a <_ZdlPv>
 80a1fa8:	4620      	mov	r0, r4
 80a1faa:	bd10      	pop	{r4, pc}

080a1fac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1fac:	b510      	push	{r4, lr}
 80a1fae:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1fb0:	2300      	movs	r3, #0
 80a1fb2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1fb8:	60a3      	str	r3, [r4, #8]
 80a1fba:	4b05      	ldr	r3, [pc, #20]	; (80a1fd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1fbc:	4608      	mov	r0, r1
 80a1fbe:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1fc0:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1fc2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1fc4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1fc6:	4611      	mov	r1, r2
 80a1fc8:	f7ff fd18 	bl	80a19fc <HAL_USB_USART_Init>
}
 80a1fcc:	4620      	mov	r0, r4
 80a1fce:	bd10      	pop	{r4, pc}
 80a1fd0:	080a31e8 	.word	0x080a31e8

080a1fd4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1fd4:	2200      	movs	r2, #0
 80a1fd6:	7c00      	ldrb	r0, [r0, #16]
 80a1fd8:	f7ff bd18 	b.w	80a1a0c <HAL_USB_USART_Begin>

080a1fdc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1fdc:	b510      	push	{r4, lr}
 80a1fde:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1fe0:	2214      	movs	r2, #20
 80a1fe2:	2100      	movs	r1, #0
 80a1fe4:	f000 ffcb 	bl	80a2f7e <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1fe8:	4b05      	ldr	r3, [pc, #20]	; (80a2000 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1fea:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1fec:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1fee:	4b05      	ldr	r3, [pc, #20]	; (80a2004 <_Z19acquireSerialBufferv+0x28>)
 80a1ff0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1ff2:	f240 1301 	movw	r3, #257	; 0x101
 80a1ff6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1ff8:	2381      	movs	r3, #129	; 0x81
 80a1ffa:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1ffc:	bd10      	pop	{r4, pc}
 80a1ffe:	bf00      	nop
 80a2000:	200004a5 	.word	0x200004a5
 80a2004:	20000424 	.word	0x20000424

080a2008 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2008:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a200a:	4d0e      	ldr	r5, [pc, #56]	; (80a2044 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a200c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a200e:	a801      	add	r0, sp, #4
 80a2010:	f7ff ffe4 	bl	80a1fdc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2014:	6829      	ldr	r1, [r5, #0]
 80a2016:	f011 0401 	ands.w	r4, r1, #1
 80a201a:	d110      	bne.n	80a203e <_Z16_fetch_usbserialv+0x36>
 80a201c:	4628      	mov	r0, r5
 80a201e:	f7fe f83e 	bl	80a009e <__cxa_guard_acquire>
 80a2022:	b160      	cbz	r0, 80a203e <_Z16_fetch_usbserialv+0x36>
 80a2024:	aa01      	add	r2, sp, #4
 80a2026:	4621      	mov	r1, r4
 80a2028:	4807      	ldr	r0, [pc, #28]	; (80a2048 <_Z16_fetch_usbserialv+0x40>)
 80a202a:	f7ff ffbf 	bl	80a1fac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a202e:	4628      	mov	r0, r5
 80a2030:	f7fe f83a 	bl	80a00a8 <__cxa_guard_release>
 80a2034:	4a05      	ldr	r2, [pc, #20]	; (80a204c <_Z16_fetch_usbserialv+0x44>)
 80a2036:	4906      	ldr	r1, [pc, #24]	; (80a2050 <_Z16_fetch_usbserialv+0x48>)
 80a2038:	4803      	ldr	r0, [pc, #12]	; (80a2048 <_Z16_fetch_usbserialv+0x40>)
 80a203a:	f000 fa13 	bl	80a2464 <__aeabi_atexit>
	return _usbserial;
}
 80a203e:	4802      	ldr	r0, [pc, #8]	; (80a2048 <_Z16_fetch_usbserialv+0x40>)
 80a2040:	b007      	add	sp, #28
 80a2042:	bd30      	pop	{r4, r5, pc}
 80a2044:	20000420 	.word	0x20000420
 80a2048:	200005a8 	.word	0x200005a8
 80a204c:	20000358 	.word	0x20000358
 80a2050:	080a1f5d 	.word	0x080a1f5d

080a2054 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2054:	b510      	push	{r4, lr}
 80a2056:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2058:	2214      	movs	r2, #20
 80a205a:	2100      	movs	r1, #0
 80a205c:	f000 ff8f 	bl	80a2f7e <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2060:	4b05      	ldr	r3, [pc, #20]	; (80a2078 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2062:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2064:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2066:	4b05      	ldr	r3, [pc, #20]	; (80a207c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2068:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a206a:	f240 1301 	movw	r3, #257	; 0x101
 80a206e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2070:	2381      	movs	r3, #129	; 0x81
 80a2072:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2074:	bd10      	pop	{r4, pc}
 80a2076:	bf00      	nop
 80a2078:	20000658 	.word	0x20000658
 80a207c:	200005c0 	.word	0x200005c0

080a2080 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2080:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2082:	4c0e      	ldr	r4, [pc, #56]	; (80a20bc <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2084:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2086:	a801      	add	r0, sp, #4
 80a2088:	f7ff ffe4 	bl	80a2054 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a208c:	6823      	ldr	r3, [r4, #0]
 80a208e:	07db      	lsls	r3, r3, #31
 80a2090:	d410      	bmi.n	80a20b4 <_Z17_fetch_usbserial1v+0x34>
 80a2092:	4620      	mov	r0, r4
 80a2094:	f7fe f803 	bl	80a009e <__cxa_guard_acquire>
 80a2098:	b160      	cbz	r0, 80a20b4 <_Z17_fetch_usbserial1v+0x34>
 80a209a:	aa01      	add	r2, sp, #4
 80a209c:	2101      	movs	r1, #1
 80a209e:	4808      	ldr	r0, [pc, #32]	; (80a20c0 <_Z17_fetch_usbserial1v+0x40>)
 80a20a0:	f7ff ff84 	bl	80a1fac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a20a4:	4620      	mov	r0, r4
 80a20a6:	f7fd ffff 	bl	80a00a8 <__cxa_guard_release>
 80a20aa:	4a06      	ldr	r2, [pc, #24]	; (80a20c4 <_Z17_fetch_usbserial1v+0x44>)
 80a20ac:	4906      	ldr	r1, [pc, #24]	; (80a20c8 <_Z17_fetch_usbserial1v+0x48>)
 80a20ae:	4804      	ldr	r0, [pc, #16]	; (80a20c0 <_Z17_fetch_usbserial1v+0x40>)
 80a20b0:	f000 f9d8 	bl	80a2464 <__aeabi_atexit>
  return _usbserial1;
}
 80a20b4:	4802      	ldr	r0, [pc, #8]	; (80a20c0 <_Z17_fetch_usbserial1v+0x40>)
 80a20b6:	b006      	add	sp, #24
 80a20b8:	bd10      	pop	{r4, pc}
 80a20ba:	bf00      	nop
 80a20bc:	200005bc 	.word	0x200005bc
 80a20c0:	20000644 	.word	0x20000644
 80a20c4:	20000358 	.word	0x20000358
 80a20c8:	080a1f5d 	.word	0x080a1f5d

080a20cc <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a20cc:	4700      	bx	r0
	...

080a20d0 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a20d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a20d2:	461c      	mov	r4, r3
 80a20d4:	b085      	sub	sp, #20
 80a20d6:	4605      	mov	r5, r0
 80a20d8:	460e      	mov	r6, r1
 80a20da:	4617      	mov	r7, r2
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a20dc:	f7ff fba4 	bl	80a1828 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80a20e0:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80a20e2:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a20e4:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a20e8:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a20ea:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a20ee:	bfb4      	ite	lt
 80a20f0:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a20f2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a20f6:	4628      	mov	r0, r5
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a20f8:	bfa4      	itt	ge
 80a20fa:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a20fe:	ab03      	addge	r3, sp, #12
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a2100:	9300      	str	r3, [sp, #0]
 80a2102:	4632      	mov	r2, r6
 80a2104:	463b      	mov	r3, r7
 80a2106:	4904      	ldr	r1, [pc, #16]	; (80a2118 <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a2108:	bfa8      	it	ge
 80a210a:	f88d 400d 	strbge.w	r4, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a210e:	f7ff fb83 	bl	80a1818 <HAL_Interrupts_Attach>
    return true;
}
 80a2112:	2001      	movs	r0, #1
 80a2114:	b005      	add	sp, #20
 80a2116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2118:	080a20cd 	.word	0x080a20cd

080a211c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a211c:	4770      	bx	lr

080a211e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a211e:	7441      	strb	r1, [r0, #17]
 80a2120:	4770      	bx	lr

080a2122 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a2122:	7c00      	ldrb	r0, [r0, #16]
 80a2124:	f7ff bbe8 	b.w	80a18f8 <HAL_USART_Available_Data_For_Write>

080a2128 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a2128:	7c00      	ldrb	r0, [r0, #16]
 80a212a:	f7ff bbbd 	b.w	80a18a8 <HAL_USART_Available_Data>

080a212e <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a212e:	7c00      	ldrb	r0, [r0, #16]
 80a2130:	f7ff bbca 	b.w	80a18c8 <HAL_USART_Peek_Data>

080a2134 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a2134:	7c00      	ldrb	r0, [r0, #16]
 80a2136:	f7ff bbbf 	b.w	80a18b8 <HAL_USART_Read_Data>

080a213a <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a213a:	7c00      	ldrb	r0, [r0, #16]
 80a213c:	f7ff bbcc 	b.w	80a18d8 <HAL_USART_Flush_Data>

080a2140 <_ZN11USARTSerialD0Ev>:
 80a2140:	b510      	push	{r4, lr}
 80a2142:	4604      	mov	r4, r0
 80a2144:	f7fd ffa9 	bl	80a009a <_ZdlPv>
 80a2148:	4620      	mov	r0, r4
 80a214a:	bd10      	pop	{r4, pc}

080a214c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a214c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a214e:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2150:	4604      	mov	r4, r0
 80a2152:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2154:	b925      	cbnz	r5, 80a2160 <_ZN11USARTSerial5writeEh+0x14>
 80a2156:	7c00      	ldrb	r0, [r0, #16]
 80a2158:	f7ff fbce 	bl	80a18f8 <HAL_USART_Available_Data_For_Write>
 80a215c:	2800      	cmp	r0, #0
 80a215e:	dd05      	ble.n	80a216c <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2160:	4631      	mov	r1, r6
 80a2162:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2168:	f7ff bb96 	b.w	80a1898 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a216c:	4628      	mov	r0, r5
 80a216e:	bd70      	pop	{r4, r5, r6, pc}

080a2170 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2170:	b510      	push	{r4, lr}
 80a2172:	4604      	mov	r4, r0
 80a2174:	4608      	mov	r0, r1
 80a2176:	4611      	mov	r1, r2
 80a2178:	2200      	movs	r2, #0
 80a217a:	6062      	str	r2, [r4, #4]
 80a217c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2180:	60a2      	str	r2, [r4, #8]
 80a2182:	4a05      	ldr	r2, [pc, #20]	; (80a2198 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2184:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2186:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2188:	2201      	movs	r2, #1
 80a218a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a218c:	461a      	mov	r2, r3
 80a218e:	f7ff fb7b 	bl	80a1888 <HAL_USART_Init>
}
 80a2192:	4620      	mov	r0, r4
 80a2194:	bd10      	pop	{r4, pc}
 80a2196:	bf00      	nop
 80a2198:	080a3218 	.word	0x080a3218

080a219c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a219c:	7c00      	ldrb	r0, [r0, #16]
 80a219e:	f7ff bba3 	b.w	80a18e8 <HAL_USART_Is_Enabled>
	...

080a21a4 <_Z22__fetch_global_Serial1v>:
// Preinstantiate Objects //////////////////////////////////////////////////////
static Ring_Buffer serial1_rx_buffer;
static Ring_Buffer serial1_tx_buffer;

USARTSerial& __fetch_global_Serial1()
{
 80a21a4:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a21a6:	4d0c      	ldr	r5, [pc, #48]	; (80a21d8 <_Z22__fetch_global_Serial1v+0x34>)
 80a21a8:	6829      	ldr	r1, [r5, #0]
 80a21aa:	f011 0401 	ands.w	r4, r1, #1
 80a21ae:	d111      	bne.n	80a21d4 <_Z22__fetch_global_Serial1v+0x30>
 80a21b0:	4628      	mov	r0, r5
 80a21b2:	f7fd ff74 	bl	80a009e <__cxa_guard_acquire>
 80a21b6:	b168      	cbz	r0, 80a21d4 <_Z22__fetch_global_Serial1v+0x30>
 80a21b8:	4a08      	ldr	r2, [pc, #32]	; (80a21dc <_Z22__fetch_global_Serial1v+0x38>)
 80a21ba:	4621      	mov	r1, r4
 80a21bc:	4b08      	ldr	r3, [pc, #32]	; (80a21e0 <_Z22__fetch_global_Serial1v+0x3c>)
 80a21be:	4809      	ldr	r0, [pc, #36]	; (80a21e4 <_Z22__fetch_global_Serial1v+0x40>)
 80a21c0:	f7ff ffd6 	bl	80a2170 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a21c4:	4628      	mov	r0, r5
 80a21c6:	f7fd ff6f 	bl	80a00a8 <__cxa_guard_release>
 80a21ca:	4a07      	ldr	r2, [pc, #28]	; (80a21e8 <_Z22__fetch_global_Serial1v+0x44>)
 80a21cc:	4907      	ldr	r1, [pc, #28]	; (80a21ec <_Z22__fetch_global_Serial1v+0x48>)
 80a21ce:	4805      	ldr	r0, [pc, #20]	; (80a21e4 <_Z22__fetch_global_Serial1v+0x40>)
 80a21d0:	f000 f948 	bl	80a2464 <__aeabi_atexit>
	return serial1;
}
 80a21d4:	4803      	ldr	r0, [pc, #12]	; (80a21e4 <_Z22__fetch_global_Serial1v+0x40>)
 80a21d6:	bd38      	pop	{r3, r4, r5, pc}
 80a21d8:	200007f4 	.word	0x200007f4
 80a21dc:	200007f8 	.word	0x200007f8
 80a21e0:	20000770 	.word	0x20000770
 80a21e4:	2000075c 	.word	0x2000075c
 80a21e8:	20000358 	.word	0x20000358
 80a21ec:	080a211d 	.word	0x080a211d

080a21f0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a21f0:	4770      	bx	lr

080a21f2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a21f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a21f4:	4606      	mov	r6, r0
 80a21f6:	4615      	mov	r5, r2
 80a21f8:	460c      	mov	r4, r1
 80a21fa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a21fc:	42bc      	cmp	r4, r7
 80a21fe:	d006      	beq.n	80a220e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2200:	6833      	ldr	r3, [r6, #0]
 80a2202:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2206:	689b      	ldr	r3, [r3, #8]
 80a2208:	4630      	mov	r0, r6
 80a220a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a220c:	e7f6      	b.n	80a21fc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a220e:	4628      	mov	r0, r5
 80a2210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2212 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2212:	2200      	movs	r2, #0
 80a2214:	7c00      	ldrb	r0, [r0, #16]
 80a2216:	f7ff bb9f 	b.w	80a1958 <HAL_I2C_Write_Data>

080a221a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a221a:	2100      	movs	r1, #0
 80a221c:	7c00      	ldrb	r0, [r0, #16]
 80a221e:	f7ff bba3 	b.w	80a1968 <HAL_I2C_Available_Data>

080a2222 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a2222:	2100      	movs	r1, #0
 80a2224:	7c00      	ldrb	r0, [r0, #16]
 80a2226:	f7ff bba7 	b.w	80a1978 <HAL_I2C_Read_Data>

080a222a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a222a:	2100      	movs	r1, #0
 80a222c:	7c00      	ldrb	r0, [r0, #16]
 80a222e:	f7ff bbab 	b.w	80a1988 <HAL_I2C_Peek_Data>

080a2232 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a2232:	2100      	movs	r1, #0
 80a2234:	7c00      	ldrb	r0, [r0, #16]
 80a2236:	f7ff bbaf 	b.w	80a1998 <HAL_I2C_Flush_Data>

080a223a <_ZN7TwoWireD0Ev>:
 80a223a:	b510      	push	{r4, lr}
 80a223c:	4604      	mov	r4, r0
 80a223e:	f7fd ff2c 	bl	80a009a <_ZdlPv>
 80a2242:	4620      	mov	r0, r4
 80a2244:	bd10      	pop	{r4, pc}
	...

080a2248 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2248:	b510      	push	{r4, lr}
 80a224a:	4604      	mov	r4, r0
 80a224c:	4608      	mov	r0, r1
 80a224e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2252:	60a3      	str	r3, [r4, #8]
 80a2254:	4b04      	ldr	r3, [pc, #16]	; (80a2268 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a2256:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a2258:	7420      	strb	r0, [r4, #16]
 80a225a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a225c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a225e:	f7ff fbab 	bl	80a19b8 <HAL_I2C_Init>

}
 80a2262:	4620      	mov	r0, r4
 80a2264:	bd10      	pop	{r4, pc}
 80a2266:	bf00      	nop
 80a2268:	080a3248 	.word	0x080a3248

080a226c <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a226c:	2200      	movs	r2, #0
 80a226e:	7c00      	ldrb	r0, [r0, #16]
 80a2270:	f7ff bb4a 	b.w	80a1908 <HAL_I2C_Set_Speed>

080a2274 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a2274:	2300      	movs	r3, #0
 80a2276:	461a      	mov	r2, r3
 80a2278:	4619      	mov	r1, r3
 80a227a:	7c00      	ldrb	r0, [r0, #16]
 80a227c:	f7ff bb4c 	b.w	80a1918 <HAL_I2C_Begin>

080a2280 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a2280:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a2282:	2400      	movs	r4, #0
 80a2284:	7c00      	ldrb	r0, [r0, #16]
 80a2286:	9400      	str	r4, [sp, #0]
 80a2288:	f7ff fb4e 	bl	80a1928 <HAL_I2C_Request_Data>
  return result;
}
 80a228c:	b2c0      	uxtb	r0, r0
 80a228e:	b002      	add	sp, #8
 80a2290:	bd10      	pop	{r4, pc}

080a2292 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a2292:	2301      	movs	r3, #1
 80a2294:	f7ff bff4 	b.w	80a2280 <_ZN7TwoWire11requestFromEhhh>

080a2298 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a2298:	2301      	movs	r3, #1
 80a229a:	b2d2      	uxtb	r2, r2
 80a229c:	b2c9      	uxtb	r1, r1
 80a229e:	f7ff bfef 	b.w	80a2280 <_ZN7TwoWire11requestFromEhhh>

080a22a2 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a22a2:	2200      	movs	r2, #0
 80a22a4:	7c00      	ldrb	r0, [r0, #16]
 80a22a6:	f7ff bb47 	b.w	80a1938 <HAL_I2C_Begin_Transmission>

080a22aa <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a22aa:	2200      	movs	r2, #0
 80a22ac:	7c00      	ldrb	r0, [r0, #16]
 80a22ae:	f7ff bb4b 	b.w	80a1948 <HAL_I2C_End_Transmission>

080a22b2 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a22b2:	2101      	movs	r1, #1
 80a22b4:	f7ff bff9 	b.w	80a22aa <_ZN7TwoWire15endTransmissionEh>

080a22b8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a22b8:	2100      	movs	r1, #0
 80a22ba:	7c00      	ldrb	r0, [r0, #16]
 80a22bc:	f7ff bb74 	b.w	80a19a8 <HAL_I2C_Is_Enabled>

080a22c0 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a22c0:	4770      	bx	lr

080a22c2 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a22c2:	2200      	movs	r2, #0
 80a22c4:	4611      	mov	r1, r2
 80a22c6:	4610      	mov	r0, r2
 80a22c8:	f7ff bbf8 	b.w	80a1abc <network_ready>

080a22cc <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a22cc:	4803      	ldr	r0, [pc, #12]	; (80a22dc <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a22ce:	4b04      	ldr	r3, [pc, #16]	; (80a22e0 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a22d0:	4a04      	ldr	r2, [pc, #16]	; (80a22e4 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a22d2:	4905      	ldr	r1, [pc, #20]	; (80a22e8 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a22d4:	6003      	str	r3, [r0, #0]
 80a22d6:	f000 b8c5 	b.w	80a2464 <__aeabi_atexit>
 80a22da:	bf00      	nop
 80a22dc:	2000087c 	.word	0x2000087c
 80a22e0:	080a3270 	.word	0x080a3270
 80a22e4:	20000358 	.word	0x20000358
 80a22e8:	080a22c1 	.word	0x080a22c1

080a22ec <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a22ec:	b510      	push	{r4, lr}
 80a22ee:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a22f0:	480f      	ldr	r0, [pc, #60]	; (80a2330 <pinAvailable+0x44>)
 80a22f2:	f7ff fc17 	bl	80a1b24 <_ZN8SPIClass9isEnabledEv>
 80a22f6:	b128      	cbz	r0, 80a2304 <pinAvailable+0x18>
 80a22f8:	f1a4 030d 	sub.w	r3, r4, #13
 80a22fc:	2b02      	cmp	r3, #2
 80a22fe:	d801      	bhi.n	80a2304 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2300:	2000      	movs	r0, #0
 80a2302:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2304:	f000 f88e 	bl	80a2424 <_Z19__fetch_global_Wirev>
 80a2308:	f7ff ffd6 	bl	80a22b8 <_ZN7TwoWire9isEnabledEv>
 80a230c:	b108      	cbz	r0, 80a2312 <pinAvailable+0x26>
 80a230e:	2c01      	cmp	r4, #1
 80a2310:	d9f6      	bls.n	80a2300 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2312:	f7ff ff47 	bl	80a21a4 <_Z22__fetch_global_Serial1v>
 80a2316:	f7ff ff41 	bl	80a219c <_ZN11USARTSerial9isEnabledEv>
 80a231a:	b118      	cbz	r0, 80a2324 <pinAvailable+0x38>
 80a231c:	f1a4 0312 	sub.w	r3, r4, #18
 80a2320:	2b01      	cmp	r3, #1
 80a2322:	d9ed      	bls.n	80a2300 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2324:	2c17      	cmp	r4, #23
 80a2326:	bf8c      	ite	hi
 80a2328:	2000      	movhi	r0, #0
 80a232a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a232c:	bd10      	pop	{r4, pc}
 80a232e:	bf00      	nop
 80a2330:	20000880 	.word	0x20000880

080a2334 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2334:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2336:	b538      	push	{r3, r4, r5, lr}
 80a2338:	4604      	mov	r4, r0
 80a233a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a233c:	d80a      	bhi.n	80a2354 <pinMode+0x20>
 80a233e:	29ff      	cmp	r1, #255	; 0xff
 80a2340:	d008      	beq.n	80a2354 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2342:	f7ff ffd3 	bl	80a22ec <pinAvailable>
 80a2346:	b128      	cbz	r0, 80a2354 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2348:	4629      	mov	r1, r5
 80a234a:	4620      	mov	r0, r4
}
 80a234c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2350:	f7ff ba42 	b.w	80a17d8 <HAL_Pin_Mode>
 80a2354:	bd38      	pop	{r3, r4, r5, pc}

080a2356 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2356:	b538      	push	{r3, r4, r5, lr}
 80a2358:	4604      	mov	r4, r0
 80a235a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a235c:	f7ff fa44 	bl	80a17e8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2360:	28ff      	cmp	r0, #255	; 0xff
 80a2362:	d010      	beq.n	80a2386 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2364:	2806      	cmp	r0, #6
 80a2366:	d804      	bhi.n	80a2372 <digitalWrite+0x1c>
 80a2368:	234d      	movs	r3, #77	; 0x4d
 80a236a:	fa23 f000 	lsr.w	r0, r3, r0
 80a236e:	07c3      	lsls	r3, r0, #31
 80a2370:	d409      	bmi.n	80a2386 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2372:	4620      	mov	r0, r4
 80a2374:	f7ff ffba 	bl	80a22ec <pinAvailable>
 80a2378:	b128      	cbz	r0, 80a2386 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a237a:	4629      	mov	r1, r5
 80a237c:	4620      	mov	r0, r4
}
 80a237e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2382:	f7ff ba39 	b.w	80a17f8 <HAL_GPIO_Write>
 80a2386:	bd38      	pop	{r3, r4, r5, pc}

080a2388 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2388:	b510      	push	{r4, lr}
 80a238a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a238c:	f7ff fa2c 	bl	80a17e8 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a2390:	3804      	subs	r0, #4
 80a2392:	b2c0      	uxtb	r0, r0
 80a2394:	2801      	cmp	r0, #1
 80a2396:	d908      	bls.n	80a23aa <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2398:	4620      	mov	r0, r4
 80a239a:	f7ff ffa7 	bl	80a22ec <pinAvailable>
 80a239e:	b120      	cbz	r0, 80a23aa <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a23a0:	4620      	mov	r0, r4
}
 80a23a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a23a6:	f7ff ba2f 	b.w	80a1808 <HAL_GPIO_Read>
}
 80a23aa:	2000      	movs	r0, #0
 80a23ac:	bd10      	pop	{r4, pc}
	...

080a23b0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a23b0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a23b2:	4c0c      	ldr	r4, [pc, #48]	; (80a23e4 <_GLOBAL__sub_I_SPI+0x34>)
 80a23b4:	4e0c      	ldr	r6, [pc, #48]	; (80a23e8 <_GLOBAL__sub_I_SPI+0x38>)
 80a23b6:	4d0d      	ldr	r5, [pc, #52]	; (80a23ec <_GLOBAL__sub_I_SPI+0x3c>)
 80a23b8:	2100      	movs	r1, #0
 80a23ba:	4620      	mov	r0, r4
 80a23bc:	f7ff fb9e 	bl	80a1afc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a23c0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a23c2:	4c0b      	ldr	r4, [pc, #44]	; (80a23f0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a23c4:	4632      	mov	r2, r6
 80a23c6:	4629      	mov	r1, r5
 80a23c8:	f000 f84c 	bl	80a2464 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a23cc:	2101      	movs	r1, #1
 80a23ce:	4620      	mov	r0, r4
 80a23d0:	f7ff fb94 	bl	80a1afc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a23d4:	4632      	mov	r2, r6
 80a23d6:	4629      	mov	r1, r5
 80a23d8:	4620      	mov	r0, r4
 80a23da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a23de:	f000 b841 	b.w	80a2464 <__aeabi_atexit>
 80a23e2:	bf00      	nop
 80a23e4:	20000880 	.word	0x20000880
 80a23e8:	20000358 	.word	0x20000358
 80a23ec:	080a1aed 	.word	0x080a1aed
 80a23f0:	20000890 	.word	0x20000890

080a23f4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a23f4:	b513      	push	{r0, r1, r4, lr}
 80a23f6:	4c08      	ldr	r4, [pc, #32]	; (80a2418 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a23f8:	2300      	movs	r3, #0
 80a23fa:	461a      	mov	r2, r3
 80a23fc:	4619      	mov	r1, r3
 80a23fe:	9300      	str	r3, [sp, #0]
 80a2400:	4620      	mov	r0, r4
 80a2402:	f7ff fd9d 	bl	80a1f40 <_ZN9IPAddressC1Ehhhh>
 80a2406:	4620      	mov	r0, r4
 80a2408:	4a04      	ldr	r2, [pc, #16]	; (80a241c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a240a:	4905      	ldr	r1, [pc, #20]	; (80a2420 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a240c:	b002      	add	sp, #8
 80a240e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2412:	f000 b827 	b.w	80a2464 <__aeabi_atexit>
 80a2416:	bf00      	nop
 80a2418:	200008a4 	.word	0x200008a4
 80a241c:	20000358 	.word	0x20000358
 80a2420:	080a1ee5 	.word	0x080a1ee5

080a2424 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2424:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2426:	4d0b      	ldr	r5, [pc, #44]	; (80a2454 <_Z19__fetch_global_Wirev+0x30>)
 80a2428:	6829      	ldr	r1, [r5, #0]
 80a242a:	f011 0401 	ands.w	r4, r1, #1
 80a242e:	d10f      	bne.n	80a2450 <_Z19__fetch_global_Wirev+0x2c>
 80a2430:	4628      	mov	r0, r5
 80a2432:	f7fd fe34 	bl	80a009e <__cxa_guard_acquire>
 80a2436:	b158      	cbz	r0, 80a2450 <_Z19__fetch_global_Wirev+0x2c>
 80a2438:	4621      	mov	r1, r4
 80a243a:	4807      	ldr	r0, [pc, #28]	; (80a2458 <_Z19__fetch_global_Wirev+0x34>)
 80a243c:	f7ff ff04 	bl	80a2248 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2440:	4628      	mov	r0, r5
 80a2442:	f7fd fe31 	bl	80a00a8 <__cxa_guard_release>
 80a2446:	4a05      	ldr	r2, [pc, #20]	; (80a245c <_Z19__fetch_global_Wirev+0x38>)
 80a2448:	4905      	ldr	r1, [pc, #20]	; (80a2460 <_Z19__fetch_global_Wirev+0x3c>)
 80a244a:	4803      	ldr	r0, [pc, #12]	; (80a2458 <_Z19__fetch_global_Wirev+0x34>)
 80a244c:	f000 f80a 	bl	80a2464 <__aeabi_atexit>
	return wire;
}
 80a2450:	4801      	ldr	r0, [pc, #4]	; (80a2458 <_Z19__fetch_global_Wirev+0x34>)
 80a2452:	bd38      	pop	{r3, r4, r5, pc}
 80a2454:	200008bc 	.word	0x200008bc
 80a2458:	200008c0 	.word	0x200008c0
 80a245c:	20000358 	.word	0x20000358
 80a2460:	080a21f1 	.word	0x080a21f1

080a2464 <__aeabi_atexit>:
 80a2464:	460b      	mov	r3, r1
 80a2466:	4601      	mov	r1, r0
 80a2468:	4618      	mov	r0, r3
 80a246a:	f000 bd6f 	b.w	80a2f4c <__cxa_atexit>
	...

080a2470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2470:	4b18      	ldr	r3, [pc, #96]	; (80a24d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2472:	681a      	ldr	r2, [r3, #0]
 80a2474:	07d1      	lsls	r1, r2, #31
 80a2476:	bf5c      	itt	pl
 80a2478:	2201      	movpl	r2, #1
 80a247a:	601a      	strpl	r2, [r3, #0]
 80a247c:	4b16      	ldr	r3, [pc, #88]	; (80a24d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a247e:	681a      	ldr	r2, [r3, #0]
 80a2480:	07d2      	lsls	r2, r2, #31
 80a2482:	bf5c      	itt	pl
 80a2484:	2201      	movpl	r2, #1
 80a2486:	601a      	strpl	r2, [r3, #0]
 80a2488:	4b14      	ldr	r3, [pc, #80]	; (80a24dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a248a:	681a      	ldr	r2, [r3, #0]
 80a248c:	07d0      	lsls	r0, r2, #31
 80a248e:	bf5c      	itt	pl
 80a2490:	2201      	movpl	r2, #1
 80a2492:	601a      	strpl	r2, [r3, #0]
 80a2494:	4b12      	ldr	r3, [pc, #72]	; (80a24e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2496:	681a      	ldr	r2, [r3, #0]
 80a2498:	07d1      	lsls	r1, r2, #31
 80a249a:	bf5c      	itt	pl
 80a249c:	2201      	movpl	r2, #1
 80a249e:	601a      	strpl	r2, [r3, #0]
 80a24a0:	4b10      	ldr	r3, [pc, #64]	; (80a24e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a24a2:	681a      	ldr	r2, [r3, #0]
 80a24a4:	07d2      	lsls	r2, r2, #31
 80a24a6:	bf5c      	itt	pl
 80a24a8:	2201      	movpl	r2, #1
 80a24aa:	601a      	strpl	r2, [r3, #0]
 80a24ac:	4b0e      	ldr	r3, [pc, #56]	; (80a24e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a24ae:	681a      	ldr	r2, [r3, #0]
 80a24b0:	07d0      	lsls	r0, r2, #31
 80a24b2:	bf5c      	itt	pl
 80a24b4:	2201      	movpl	r2, #1
 80a24b6:	601a      	strpl	r2, [r3, #0]
 80a24b8:	4b0c      	ldr	r3, [pc, #48]	; (80a24ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a24ba:	681a      	ldr	r2, [r3, #0]
 80a24bc:	07d1      	lsls	r1, r2, #31
 80a24be:	bf5c      	itt	pl
 80a24c0:	2201      	movpl	r2, #1
 80a24c2:	601a      	strpl	r2, [r3, #0]
 80a24c4:	4b0a      	ldr	r3, [pc, #40]	; (80a24f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a24c6:	681a      	ldr	r2, [r3, #0]
 80a24c8:	07d2      	lsls	r2, r2, #31
 80a24ca:	bf5c      	itt	pl
 80a24cc:	2201      	movpl	r2, #1
 80a24ce:	601a      	strpl	r2, [r3, #0]
 80a24d0:	4770      	bx	lr
 80a24d2:	bf00      	nop
 80a24d4:	200008f0 	.word	0x200008f0
 80a24d8:	200008ec 	.word	0x200008ec
 80a24dc:	200008e8 	.word	0x200008e8
 80a24e0:	200008e4 	.word	0x200008e4
 80a24e4:	200008e0 	.word	0x200008e0
 80a24e8:	200008dc 	.word	0x200008dc
 80a24ec:	200008d8 	.word	0x200008d8
 80a24f0:	200008d4 	.word	0x200008d4

080a24f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a24f4:	4b24      	ldr	r3, [pc, #144]	; (80a2588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a24f6:	681a      	ldr	r2, [r3, #0]
 80a24f8:	07d0      	lsls	r0, r2, #31
 80a24fa:	bf5c      	itt	pl
 80a24fc:	2201      	movpl	r2, #1
 80a24fe:	601a      	strpl	r2, [r3, #0]
 80a2500:	4b22      	ldr	r3, [pc, #136]	; (80a258c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2502:	681a      	ldr	r2, [r3, #0]
 80a2504:	07d1      	lsls	r1, r2, #31
 80a2506:	bf5c      	itt	pl
 80a2508:	2201      	movpl	r2, #1
 80a250a:	601a      	strpl	r2, [r3, #0]
 80a250c:	4b20      	ldr	r3, [pc, #128]	; (80a2590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a250e:	681a      	ldr	r2, [r3, #0]
 80a2510:	07d2      	lsls	r2, r2, #31
 80a2512:	bf5c      	itt	pl
 80a2514:	2201      	movpl	r2, #1
 80a2516:	601a      	strpl	r2, [r3, #0]
 80a2518:	4b1e      	ldr	r3, [pc, #120]	; (80a2594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a251a:	681a      	ldr	r2, [r3, #0]
 80a251c:	07d0      	lsls	r0, r2, #31
 80a251e:	bf5c      	itt	pl
 80a2520:	2201      	movpl	r2, #1
 80a2522:	601a      	strpl	r2, [r3, #0]
 80a2524:	4b1c      	ldr	r3, [pc, #112]	; (80a2598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2526:	681a      	ldr	r2, [r3, #0]
 80a2528:	07d1      	lsls	r1, r2, #31
 80a252a:	bf5c      	itt	pl
 80a252c:	2201      	movpl	r2, #1
 80a252e:	601a      	strpl	r2, [r3, #0]
 80a2530:	4b1a      	ldr	r3, [pc, #104]	; (80a259c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2532:	681a      	ldr	r2, [r3, #0]
 80a2534:	07d2      	lsls	r2, r2, #31
 80a2536:	bf5c      	itt	pl
 80a2538:	2201      	movpl	r2, #1
 80a253a:	601a      	strpl	r2, [r3, #0]
 80a253c:	4b18      	ldr	r3, [pc, #96]	; (80a25a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a253e:	681a      	ldr	r2, [r3, #0]
 80a2540:	07d0      	lsls	r0, r2, #31
 80a2542:	bf5c      	itt	pl
 80a2544:	2201      	movpl	r2, #1
 80a2546:	601a      	strpl	r2, [r3, #0]
 80a2548:	4b16      	ldr	r3, [pc, #88]	; (80a25a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a254a:	681a      	ldr	r2, [r3, #0]
 80a254c:	07d1      	lsls	r1, r2, #31
 80a254e:	bf5c      	itt	pl
 80a2550:	2201      	movpl	r2, #1
 80a2552:	601a      	strpl	r2, [r3, #0]
 80a2554:	4b14      	ldr	r3, [pc, #80]	; (80a25a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2556:	681a      	ldr	r2, [r3, #0]
 80a2558:	07d2      	lsls	r2, r2, #31
 80a255a:	bf5c      	itt	pl
 80a255c:	2201      	movpl	r2, #1
 80a255e:	601a      	strpl	r2, [r3, #0]
 80a2560:	4b12      	ldr	r3, [pc, #72]	; (80a25ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2562:	681a      	ldr	r2, [r3, #0]
 80a2564:	07d0      	lsls	r0, r2, #31
 80a2566:	bf5c      	itt	pl
 80a2568:	2201      	movpl	r2, #1
 80a256a:	601a      	strpl	r2, [r3, #0]
 80a256c:	4b10      	ldr	r3, [pc, #64]	; (80a25b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a256e:	681a      	ldr	r2, [r3, #0]
 80a2570:	07d1      	lsls	r1, r2, #31
 80a2572:	bf5c      	itt	pl
 80a2574:	2201      	movpl	r2, #1
 80a2576:	601a      	strpl	r2, [r3, #0]
 80a2578:	4b0e      	ldr	r3, [pc, #56]	; (80a25b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a257a:	681a      	ldr	r2, [r3, #0]
 80a257c:	07d2      	lsls	r2, r2, #31
 80a257e:	bf5c      	itt	pl
 80a2580:	2201      	movpl	r2, #1
 80a2582:	601a      	strpl	r2, [r3, #0]
 80a2584:	4770      	bx	lr
 80a2586:	bf00      	nop
 80a2588:	20000920 	.word	0x20000920
 80a258c:	2000091c 	.word	0x2000091c
 80a2590:	20000918 	.word	0x20000918
 80a2594:	20000914 	.word	0x20000914
 80a2598:	20000910 	.word	0x20000910
 80a259c:	2000090c 	.word	0x2000090c
 80a25a0:	20000908 	.word	0x20000908
 80a25a4:	20000904 	.word	0x20000904
 80a25a8:	20000900 	.word	0x20000900
 80a25ac:	200008fc 	.word	0x200008fc
 80a25b0:	200008f8 	.word	0x200008f8
 80a25b4:	200008f4 	.word	0x200008f4

080a25b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a25b8:	4b24      	ldr	r3, [pc, #144]	; (80a264c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a25ba:	681a      	ldr	r2, [r3, #0]
 80a25bc:	07d0      	lsls	r0, r2, #31
 80a25be:	bf5c      	itt	pl
 80a25c0:	2201      	movpl	r2, #1
 80a25c2:	601a      	strpl	r2, [r3, #0]
 80a25c4:	4b22      	ldr	r3, [pc, #136]	; (80a2650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a25c6:	681a      	ldr	r2, [r3, #0]
 80a25c8:	07d1      	lsls	r1, r2, #31
 80a25ca:	bf5c      	itt	pl
 80a25cc:	2201      	movpl	r2, #1
 80a25ce:	601a      	strpl	r2, [r3, #0]
 80a25d0:	4b20      	ldr	r3, [pc, #128]	; (80a2654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a25d2:	681a      	ldr	r2, [r3, #0]
 80a25d4:	07d2      	lsls	r2, r2, #31
 80a25d6:	bf5c      	itt	pl
 80a25d8:	2201      	movpl	r2, #1
 80a25da:	601a      	strpl	r2, [r3, #0]
 80a25dc:	4b1e      	ldr	r3, [pc, #120]	; (80a2658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a25de:	681a      	ldr	r2, [r3, #0]
 80a25e0:	07d0      	lsls	r0, r2, #31
 80a25e2:	bf5c      	itt	pl
 80a25e4:	2201      	movpl	r2, #1
 80a25e6:	601a      	strpl	r2, [r3, #0]
 80a25e8:	4b1c      	ldr	r3, [pc, #112]	; (80a265c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a25ea:	681a      	ldr	r2, [r3, #0]
 80a25ec:	07d1      	lsls	r1, r2, #31
 80a25ee:	bf5c      	itt	pl
 80a25f0:	2201      	movpl	r2, #1
 80a25f2:	601a      	strpl	r2, [r3, #0]
 80a25f4:	4b1a      	ldr	r3, [pc, #104]	; (80a2660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a25f6:	681a      	ldr	r2, [r3, #0]
 80a25f8:	07d2      	lsls	r2, r2, #31
 80a25fa:	bf5c      	itt	pl
 80a25fc:	2201      	movpl	r2, #1
 80a25fe:	601a      	strpl	r2, [r3, #0]
 80a2600:	4b18      	ldr	r3, [pc, #96]	; (80a2664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2602:	681a      	ldr	r2, [r3, #0]
 80a2604:	07d0      	lsls	r0, r2, #31
 80a2606:	bf5c      	itt	pl
 80a2608:	2201      	movpl	r2, #1
 80a260a:	601a      	strpl	r2, [r3, #0]
 80a260c:	4b16      	ldr	r3, [pc, #88]	; (80a2668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a260e:	681a      	ldr	r2, [r3, #0]
 80a2610:	07d1      	lsls	r1, r2, #31
 80a2612:	bf5c      	itt	pl
 80a2614:	2201      	movpl	r2, #1
 80a2616:	601a      	strpl	r2, [r3, #0]
 80a2618:	4b14      	ldr	r3, [pc, #80]	; (80a266c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a261a:	681a      	ldr	r2, [r3, #0]
 80a261c:	07d2      	lsls	r2, r2, #31
 80a261e:	bf5c      	itt	pl
 80a2620:	2201      	movpl	r2, #1
 80a2622:	601a      	strpl	r2, [r3, #0]
 80a2624:	4b12      	ldr	r3, [pc, #72]	; (80a2670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2626:	681a      	ldr	r2, [r3, #0]
 80a2628:	07d0      	lsls	r0, r2, #31
 80a262a:	bf5c      	itt	pl
 80a262c:	2201      	movpl	r2, #1
 80a262e:	601a      	strpl	r2, [r3, #0]
 80a2630:	4b10      	ldr	r3, [pc, #64]	; (80a2674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2632:	681a      	ldr	r2, [r3, #0]
 80a2634:	07d1      	lsls	r1, r2, #31
 80a2636:	bf5c      	itt	pl
 80a2638:	2201      	movpl	r2, #1
 80a263a:	601a      	strpl	r2, [r3, #0]
 80a263c:	4b0e      	ldr	r3, [pc, #56]	; (80a2678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a263e:	681a      	ldr	r2, [r3, #0]
 80a2640:	07d2      	lsls	r2, r2, #31
 80a2642:	bf5c      	itt	pl
 80a2644:	2201      	movpl	r2, #1
 80a2646:	601a      	strpl	r2, [r3, #0]
 80a2648:	4770      	bx	lr
 80a264a:	bf00      	nop
 80a264c:	20000950 	.word	0x20000950
 80a2650:	2000094c 	.word	0x2000094c
 80a2654:	20000948 	.word	0x20000948
 80a2658:	20000944 	.word	0x20000944
 80a265c:	20000940 	.word	0x20000940
 80a2660:	2000093c 	.word	0x2000093c
 80a2664:	20000938 	.word	0x20000938
 80a2668:	20000934 	.word	0x20000934
 80a266c:	20000930 	.word	0x20000930
 80a2670:	2000092c 	.word	0x2000092c
 80a2674:	20000928 	.word	0x20000928
 80a2678:	20000924 	.word	0x20000924

080a267c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a267c:	4b18      	ldr	r3, [pc, #96]	; (80a26e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a267e:	681a      	ldr	r2, [r3, #0]
 80a2680:	07d1      	lsls	r1, r2, #31
 80a2682:	bf5c      	itt	pl
 80a2684:	2201      	movpl	r2, #1
 80a2686:	601a      	strpl	r2, [r3, #0]
 80a2688:	4b16      	ldr	r3, [pc, #88]	; (80a26e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a268a:	681a      	ldr	r2, [r3, #0]
 80a268c:	07d2      	lsls	r2, r2, #31
 80a268e:	bf5c      	itt	pl
 80a2690:	2201      	movpl	r2, #1
 80a2692:	601a      	strpl	r2, [r3, #0]
 80a2694:	4b14      	ldr	r3, [pc, #80]	; (80a26e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2696:	681a      	ldr	r2, [r3, #0]
 80a2698:	07d0      	lsls	r0, r2, #31
 80a269a:	bf5c      	itt	pl
 80a269c:	2201      	movpl	r2, #1
 80a269e:	601a      	strpl	r2, [r3, #0]
 80a26a0:	4b12      	ldr	r3, [pc, #72]	; (80a26ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a26a2:	681a      	ldr	r2, [r3, #0]
 80a26a4:	07d1      	lsls	r1, r2, #31
 80a26a6:	bf5c      	itt	pl
 80a26a8:	2201      	movpl	r2, #1
 80a26aa:	601a      	strpl	r2, [r3, #0]
 80a26ac:	4b10      	ldr	r3, [pc, #64]	; (80a26f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a26ae:	681a      	ldr	r2, [r3, #0]
 80a26b0:	07d2      	lsls	r2, r2, #31
 80a26b2:	bf5c      	itt	pl
 80a26b4:	2201      	movpl	r2, #1
 80a26b6:	601a      	strpl	r2, [r3, #0]
 80a26b8:	4b0e      	ldr	r3, [pc, #56]	; (80a26f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a26ba:	681a      	ldr	r2, [r3, #0]
 80a26bc:	07d0      	lsls	r0, r2, #31
 80a26be:	bf5c      	itt	pl
 80a26c0:	2201      	movpl	r2, #1
 80a26c2:	601a      	strpl	r2, [r3, #0]
 80a26c4:	4b0c      	ldr	r3, [pc, #48]	; (80a26f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a26c6:	681a      	ldr	r2, [r3, #0]
 80a26c8:	07d1      	lsls	r1, r2, #31
 80a26ca:	bf5c      	itt	pl
 80a26cc:	2201      	movpl	r2, #1
 80a26ce:	601a      	strpl	r2, [r3, #0]
 80a26d0:	4b0a      	ldr	r3, [pc, #40]	; (80a26fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a26d2:	681a      	ldr	r2, [r3, #0]
 80a26d4:	07d2      	lsls	r2, r2, #31
 80a26d6:	bf5c      	itt	pl
 80a26d8:	2201      	movpl	r2, #1
 80a26da:	601a      	strpl	r2, [r3, #0]
 80a26dc:	4770      	bx	lr
 80a26de:	bf00      	nop
 80a26e0:	20000970 	.word	0x20000970
 80a26e4:	2000096c 	.word	0x2000096c
 80a26e8:	20000968 	.word	0x20000968
 80a26ec:	20000964 	.word	0x20000964
 80a26f0:	20000960 	.word	0x20000960
 80a26f4:	2000095c 	.word	0x2000095c
 80a26f8:	20000958 	.word	0x20000958
 80a26fc:	20000954 	.word	0x20000954

080a2700 <__aeabi_drsub>:
 80a2700:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2704:	e002      	b.n	80a270c <__adddf3>
 80a2706:	bf00      	nop

080a2708 <__aeabi_dsub>:
 80a2708:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a270c <__adddf3>:
 80a270c:	b530      	push	{r4, r5, lr}
 80a270e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2712:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2716:	ea94 0f05 	teq	r4, r5
 80a271a:	bf08      	it	eq
 80a271c:	ea90 0f02 	teqeq	r0, r2
 80a2720:	bf1f      	itttt	ne
 80a2722:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2726:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a272a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a272e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2732:	f000 80e2 	beq.w	80a28fa <__adddf3+0x1ee>
 80a2736:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a273a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a273e:	bfb8      	it	lt
 80a2740:	426d      	neglt	r5, r5
 80a2742:	dd0c      	ble.n	80a275e <__adddf3+0x52>
 80a2744:	442c      	add	r4, r5
 80a2746:	ea80 0202 	eor.w	r2, r0, r2
 80a274a:	ea81 0303 	eor.w	r3, r1, r3
 80a274e:	ea82 0000 	eor.w	r0, r2, r0
 80a2752:	ea83 0101 	eor.w	r1, r3, r1
 80a2756:	ea80 0202 	eor.w	r2, r0, r2
 80a275a:	ea81 0303 	eor.w	r3, r1, r3
 80a275e:	2d36      	cmp	r5, #54	; 0x36
 80a2760:	bf88      	it	hi
 80a2762:	bd30      	pophi	{r4, r5, pc}
 80a2764:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a276c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2770:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2774:	d002      	beq.n	80a277c <__adddf3+0x70>
 80a2776:	4240      	negs	r0, r0
 80a2778:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a277c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2784:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2788:	d002      	beq.n	80a2790 <__adddf3+0x84>
 80a278a:	4252      	negs	r2, r2
 80a278c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2790:	ea94 0f05 	teq	r4, r5
 80a2794:	f000 80a7 	beq.w	80a28e6 <__adddf3+0x1da>
 80a2798:	f1a4 0401 	sub.w	r4, r4, #1
 80a279c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a27a0:	db0d      	blt.n	80a27be <__adddf3+0xb2>
 80a27a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a27a6:	fa22 f205 	lsr.w	r2, r2, r5
 80a27aa:	1880      	adds	r0, r0, r2
 80a27ac:	f141 0100 	adc.w	r1, r1, #0
 80a27b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80a27b4:	1880      	adds	r0, r0, r2
 80a27b6:	fa43 f305 	asr.w	r3, r3, r5
 80a27ba:	4159      	adcs	r1, r3
 80a27bc:	e00e      	b.n	80a27dc <__adddf3+0xd0>
 80a27be:	f1a5 0520 	sub.w	r5, r5, #32
 80a27c2:	f10e 0e20 	add.w	lr, lr, #32
 80a27c6:	2a01      	cmp	r2, #1
 80a27c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a27cc:	bf28      	it	cs
 80a27ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a27d2:	fa43 f305 	asr.w	r3, r3, r5
 80a27d6:	18c0      	adds	r0, r0, r3
 80a27d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a27dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a27e0:	d507      	bpl.n	80a27f2 <__adddf3+0xe6>
 80a27e2:	f04f 0e00 	mov.w	lr, #0
 80a27e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80a27ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a27ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80a27f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a27f6:	d31b      	bcc.n	80a2830 <__adddf3+0x124>
 80a27f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a27fc:	d30c      	bcc.n	80a2818 <__adddf3+0x10c>
 80a27fe:	0849      	lsrs	r1, r1, #1
 80a2800:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2804:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2808:	f104 0401 	add.w	r4, r4, #1
 80a280c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2810:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2814:	f080 809a 	bcs.w	80a294c <__adddf3+0x240>
 80a2818:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a281c:	bf08      	it	eq
 80a281e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2822:	f150 0000 	adcs.w	r0, r0, #0
 80a2826:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a282a:	ea41 0105 	orr.w	r1, r1, r5
 80a282e:	bd30      	pop	{r4, r5, pc}
 80a2830:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2834:	4140      	adcs	r0, r0
 80a2836:	eb41 0101 	adc.w	r1, r1, r1
 80a283a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a283e:	f1a4 0401 	sub.w	r4, r4, #1
 80a2842:	d1e9      	bne.n	80a2818 <__adddf3+0x10c>
 80a2844:	f091 0f00 	teq	r1, #0
 80a2848:	bf04      	itt	eq
 80a284a:	4601      	moveq	r1, r0
 80a284c:	2000      	moveq	r0, #0
 80a284e:	fab1 f381 	clz	r3, r1
 80a2852:	bf08      	it	eq
 80a2854:	3320      	addeq	r3, #32
 80a2856:	f1a3 030b 	sub.w	r3, r3, #11
 80a285a:	f1b3 0220 	subs.w	r2, r3, #32
 80a285e:	da0c      	bge.n	80a287a <__adddf3+0x16e>
 80a2860:	320c      	adds	r2, #12
 80a2862:	dd08      	ble.n	80a2876 <__adddf3+0x16a>
 80a2864:	f102 0c14 	add.w	ip, r2, #20
 80a2868:	f1c2 020c 	rsb	r2, r2, #12
 80a286c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2870:	fa21 f102 	lsr.w	r1, r1, r2
 80a2874:	e00c      	b.n	80a2890 <__adddf3+0x184>
 80a2876:	f102 0214 	add.w	r2, r2, #20
 80a287a:	bfd8      	it	le
 80a287c:	f1c2 0c20 	rsble	ip, r2, #32
 80a2880:	fa01 f102 	lsl.w	r1, r1, r2
 80a2884:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2888:	bfdc      	itt	le
 80a288a:	ea41 010c 	orrle.w	r1, r1, ip
 80a288e:	4090      	lslle	r0, r2
 80a2890:	1ae4      	subs	r4, r4, r3
 80a2892:	bfa2      	ittt	ge
 80a2894:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2898:	4329      	orrge	r1, r5
 80a289a:	bd30      	popge	{r4, r5, pc}
 80a289c:	ea6f 0404 	mvn.w	r4, r4
 80a28a0:	3c1f      	subs	r4, #31
 80a28a2:	da1c      	bge.n	80a28de <__adddf3+0x1d2>
 80a28a4:	340c      	adds	r4, #12
 80a28a6:	dc0e      	bgt.n	80a28c6 <__adddf3+0x1ba>
 80a28a8:	f104 0414 	add.w	r4, r4, #20
 80a28ac:	f1c4 0220 	rsb	r2, r4, #32
 80a28b0:	fa20 f004 	lsr.w	r0, r0, r4
 80a28b4:	fa01 f302 	lsl.w	r3, r1, r2
 80a28b8:	ea40 0003 	orr.w	r0, r0, r3
 80a28bc:	fa21 f304 	lsr.w	r3, r1, r4
 80a28c0:	ea45 0103 	orr.w	r1, r5, r3
 80a28c4:	bd30      	pop	{r4, r5, pc}
 80a28c6:	f1c4 040c 	rsb	r4, r4, #12
 80a28ca:	f1c4 0220 	rsb	r2, r4, #32
 80a28ce:	fa20 f002 	lsr.w	r0, r0, r2
 80a28d2:	fa01 f304 	lsl.w	r3, r1, r4
 80a28d6:	ea40 0003 	orr.w	r0, r0, r3
 80a28da:	4629      	mov	r1, r5
 80a28dc:	bd30      	pop	{r4, r5, pc}
 80a28de:	fa21 f004 	lsr.w	r0, r1, r4
 80a28e2:	4629      	mov	r1, r5
 80a28e4:	bd30      	pop	{r4, r5, pc}
 80a28e6:	f094 0f00 	teq	r4, #0
 80a28ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a28ee:	bf06      	itte	eq
 80a28f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a28f4:	3401      	addeq	r4, #1
 80a28f6:	3d01      	subne	r5, #1
 80a28f8:	e74e      	b.n	80a2798 <__adddf3+0x8c>
 80a28fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a28fe:	bf18      	it	ne
 80a2900:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2904:	d029      	beq.n	80a295a <__adddf3+0x24e>
 80a2906:	ea94 0f05 	teq	r4, r5
 80a290a:	bf08      	it	eq
 80a290c:	ea90 0f02 	teqeq	r0, r2
 80a2910:	d005      	beq.n	80a291e <__adddf3+0x212>
 80a2912:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2916:	bf04      	itt	eq
 80a2918:	4619      	moveq	r1, r3
 80a291a:	4610      	moveq	r0, r2
 80a291c:	bd30      	pop	{r4, r5, pc}
 80a291e:	ea91 0f03 	teq	r1, r3
 80a2922:	bf1e      	ittt	ne
 80a2924:	2100      	movne	r1, #0
 80a2926:	2000      	movne	r0, #0
 80a2928:	bd30      	popne	{r4, r5, pc}
 80a292a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a292e:	d105      	bne.n	80a293c <__adddf3+0x230>
 80a2930:	0040      	lsls	r0, r0, #1
 80a2932:	4149      	adcs	r1, r1
 80a2934:	bf28      	it	cs
 80a2936:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a293a:	bd30      	pop	{r4, r5, pc}
 80a293c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2940:	bf3c      	itt	cc
 80a2942:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2946:	bd30      	popcc	{r4, r5, pc}
 80a2948:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a294c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2950:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2954:	f04f 0000 	mov.w	r0, #0
 80a2958:	bd30      	pop	{r4, r5, pc}
 80a295a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a295e:	bf1a      	itte	ne
 80a2960:	4619      	movne	r1, r3
 80a2962:	4610      	movne	r0, r2
 80a2964:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2968:	bf1c      	itt	ne
 80a296a:	460b      	movne	r3, r1
 80a296c:	4602      	movne	r2, r0
 80a296e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2972:	bf06      	itte	eq
 80a2974:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2978:	ea91 0f03 	teqeq	r1, r3
 80a297c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2980:	bd30      	pop	{r4, r5, pc}
 80a2982:	bf00      	nop

080a2984 <__aeabi_ui2d>:
 80a2984:	f090 0f00 	teq	r0, #0
 80a2988:	bf04      	itt	eq
 80a298a:	2100      	moveq	r1, #0
 80a298c:	4770      	bxeq	lr
 80a298e:	b530      	push	{r4, r5, lr}
 80a2990:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2994:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2998:	f04f 0500 	mov.w	r5, #0
 80a299c:	f04f 0100 	mov.w	r1, #0
 80a29a0:	e750      	b.n	80a2844 <__adddf3+0x138>
 80a29a2:	bf00      	nop

080a29a4 <__aeabi_i2d>:
 80a29a4:	f090 0f00 	teq	r0, #0
 80a29a8:	bf04      	itt	eq
 80a29aa:	2100      	moveq	r1, #0
 80a29ac:	4770      	bxeq	lr
 80a29ae:	b530      	push	{r4, r5, lr}
 80a29b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a29b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a29b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a29bc:	bf48      	it	mi
 80a29be:	4240      	negmi	r0, r0
 80a29c0:	f04f 0100 	mov.w	r1, #0
 80a29c4:	e73e      	b.n	80a2844 <__adddf3+0x138>
 80a29c6:	bf00      	nop

080a29c8 <__aeabi_f2d>:
 80a29c8:	0042      	lsls	r2, r0, #1
 80a29ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a29ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80a29d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a29d6:	bf1f      	itttt	ne
 80a29d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a29dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a29e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a29e4:	4770      	bxne	lr
 80a29e6:	f092 0f00 	teq	r2, #0
 80a29ea:	bf14      	ite	ne
 80a29ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a29f0:	4770      	bxeq	lr
 80a29f2:	b530      	push	{r4, r5, lr}
 80a29f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a29f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a29fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2a00:	e720      	b.n	80a2844 <__adddf3+0x138>
 80a2a02:	bf00      	nop

080a2a04 <__aeabi_ul2d>:
 80a2a04:	ea50 0201 	orrs.w	r2, r0, r1
 80a2a08:	bf08      	it	eq
 80a2a0a:	4770      	bxeq	lr
 80a2a0c:	b530      	push	{r4, r5, lr}
 80a2a0e:	f04f 0500 	mov.w	r5, #0
 80a2a12:	e00a      	b.n	80a2a2a <__aeabi_l2d+0x16>

080a2a14 <__aeabi_l2d>:
 80a2a14:	ea50 0201 	orrs.w	r2, r0, r1
 80a2a18:	bf08      	it	eq
 80a2a1a:	4770      	bxeq	lr
 80a2a1c:	b530      	push	{r4, r5, lr}
 80a2a1e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2a22:	d502      	bpl.n	80a2a2a <__aeabi_l2d+0x16>
 80a2a24:	4240      	negs	r0, r0
 80a2a26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2a2a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2a2e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2a32:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2a36:	f43f aedc 	beq.w	80a27f2 <__adddf3+0xe6>
 80a2a3a:	f04f 0203 	mov.w	r2, #3
 80a2a3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2a42:	bf18      	it	ne
 80a2a44:	3203      	addne	r2, #3
 80a2a46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2a4a:	bf18      	it	ne
 80a2a4c:	3203      	addne	r2, #3
 80a2a4e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2a52:	f1c2 0320 	rsb	r3, r2, #32
 80a2a56:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2a5a:	fa20 f002 	lsr.w	r0, r0, r2
 80a2a5e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2a62:	ea40 000e 	orr.w	r0, r0, lr
 80a2a66:	fa21 f102 	lsr.w	r1, r1, r2
 80a2a6a:	4414      	add	r4, r2
 80a2a6c:	e6c1      	b.n	80a27f2 <__adddf3+0xe6>
 80a2a6e:	bf00      	nop

080a2a70 <__gedf2>:
 80a2a70:	f04f 3cff 	mov.w	ip, #4294967295
 80a2a74:	e006      	b.n	80a2a84 <__cmpdf2+0x4>
 80a2a76:	bf00      	nop

080a2a78 <__ledf2>:
 80a2a78:	f04f 0c01 	mov.w	ip, #1
 80a2a7c:	e002      	b.n	80a2a84 <__cmpdf2+0x4>
 80a2a7e:	bf00      	nop

080a2a80 <__cmpdf2>:
 80a2a80:	f04f 0c01 	mov.w	ip, #1
 80a2a84:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2a94:	bf18      	it	ne
 80a2a96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2a9a:	d01b      	beq.n	80a2ad4 <__cmpdf2+0x54>
 80a2a9c:	b001      	add	sp, #4
 80a2a9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2aa2:	bf0c      	ite	eq
 80a2aa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2aa8:	ea91 0f03 	teqne	r1, r3
 80a2aac:	bf02      	ittt	eq
 80a2aae:	ea90 0f02 	teqeq	r0, r2
 80a2ab2:	2000      	moveq	r0, #0
 80a2ab4:	4770      	bxeq	lr
 80a2ab6:	f110 0f00 	cmn.w	r0, #0
 80a2aba:	ea91 0f03 	teq	r1, r3
 80a2abe:	bf58      	it	pl
 80a2ac0:	4299      	cmppl	r1, r3
 80a2ac2:	bf08      	it	eq
 80a2ac4:	4290      	cmpeq	r0, r2
 80a2ac6:	bf2c      	ite	cs
 80a2ac8:	17d8      	asrcs	r0, r3, #31
 80a2aca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2ace:	f040 0001 	orr.w	r0, r0, #1
 80a2ad2:	4770      	bx	lr
 80a2ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2adc:	d102      	bne.n	80a2ae4 <__cmpdf2+0x64>
 80a2ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2ae2:	d107      	bne.n	80a2af4 <__cmpdf2+0x74>
 80a2ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2aec:	d1d6      	bne.n	80a2a9c <__cmpdf2+0x1c>
 80a2aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2af2:	d0d3      	beq.n	80a2a9c <__cmpdf2+0x1c>
 80a2af4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2af8:	4770      	bx	lr
 80a2afa:	bf00      	nop

080a2afc <__aeabi_cdrcmple>:
 80a2afc:	4684      	mov	ip, r0
 80a2afe:	4610      	mov	r0, r2
 80a2b00:	4662      	mov	r2, ip
 80a2b02:	468c      	mov	ip, r1
 80a2b04:	4619      	mov	r1, r3
 80a2b06:	4663      	mov	r3, ip
 80a2b08:	e000      	b.n	80a2b0c <__aeabi_cdcmpeq>
 80a2b0a:	bf00      	nop

080a2b0c <__aeabi_cdcmpeq>:
 80a2b0c:	b501      	push	{r0, lr}
 80a2b0e:	f7ff ffb7 	bl	80a2a80 <__cmpdf2>
 80a2b12:	2800      	cmp	r0, #0
 80a2b14:	bf48      	it	mi
 80a2b16:	f110 0f00 	cmnmi.w	r0, #0
 80a2b1a:	bd01      	pop	{r0, pc}

080a2b1c <__aeabi_dcmpeq>:
 80a2b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2b20:	f7ff fff4 	bl	80a2b0c <__aeabi_cdcmpeq>
 80a2b24:	bf0c      	ite	eq
 80a2b26:	2001      	moveq	r0, #1
 80a2b28:	2000      	movne	r0, #0
 80a2b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2b2e:	bf00      	nop

080a2b30 <__aeabi_dcmplt>:
 80a2b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2b34:	f7ff ffea 	bl	80a2b0c <__aeabi_cdcmpeq>
 80a2b38:	bf34      	ite	cc
 80a2b3a:	2001      	movcc	r0, #1
 80a2b3c:	2000      	movcs	r0, #0
 80a2b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2b42:	bf00      	nop

080a2b44 <__aeabi_dcmple>:
 80a2b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2b48:	f7ff ffe0 	bl	80a2b0c <__aeabi_cdcmpeq>
 80a2b4c:	bf94      	ite	ls
 80a2b4e:	2001      	movls	r0, #1
 80a2b50:	2000      	movhi	r0, #0
 80a2b52:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2b56:	bf00      	nop

080a2b58 <__aeabi_dcmpge>:
 80a2b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2b5c:	f7ff ffce 	bl	80a2afc <__aeabi_cdrcmple>
 80a2b60:	bf94      	ite	ls
 80a2b62:	2001      	movls	r0, #1
 80a2b64:	2000      	movhi	r0, #0
 80a2b66:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2b6a:	bf00      	nop

080a2b6c <__aeabi_dcmpgt>:
 80a2b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2b70:	f7ff ffc4 	bl	80a2afc <__aeabi_cdrcmple>
 80a2b74:	bf34      	ite	cc
 80a2b76:	2001      	movcc	r0, #1
 80a2b78:	2000      	movcs	r0, #0
 80a2b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2b7e:	bf00      	nop

080a2b80 <__aeabi_fmul>:
 80a2b80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2b84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2b88:	bf1e      	ittt	ne
 80a2b8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2b8e:	ea92 0f0c 	teqne	r2, ip
 80a2b92:	ea93 0f0c 	teqne	r3, ip
 80a2b96:	d06f      	beq.n	80a2c78 <__aeabi_fmul+0xf8>
 80a2b98:	441a      	add	r2, r3
 80a2b9a:	ea80 0c01 	eor.w	ip, r0, r1
 80a2b9e:	0240      	lsls	r0, r0, #9
 80a2ba0:	bf18      	it	ne
 80a2ba2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a2ba6:	d01e      	beq.n	80a2be6 <__aeabi_fmul+0x66>
 80a2ba8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2bac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2bb0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2bb4:	fba0 3101 	umull	r3, r1, r0, r1
 80a2bb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2bbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2bc0:	bf3e      	ittt	cc
 80a2bc2:	0049      	lslcc	r1, r1, #1
 80a2bc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2bc8:	005b      	lslcc	r3, r3, #1
 80a2bca:	ea40 0001 	orr.w	r0, r0, r1
 80a2bce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a2bd2:	2afd      	cmp	r2, #253	; 0xfd
 80a2bd4:	d81d      	bhi.n	80a2c12 <__aeabi_fmul+0x92>
 80a2bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2bda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2bde:	bf08      	it	eq
 80a2be0:	f020 0001 	biceq.w	r0, r0, #1
 80a2be4:	4770      	bx	lr
 80a2be6:	f090 0f00 	teq	r0, #0
 80a2bea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2bee:	bf08      	it	eq
 80a2bf0:	0249      	lsleq	r1, r1, #9
 80a2bf2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2bf6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a2bfa:	3a7f      	subs	r2, #127	; 0x7f
 80a2bfc:	bfc2      	ittt	gt
 80a2bfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2c02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2c06:	4770      	bxgt	lr
 80a2c08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2c0c:	f04f 0300 	mov.w	r3, #0
 80a2c10:	3a01      	subs	r2, #1
 80a2c12:	dc5d      	bgt.n	80a2cd0 <__aeabi_fmul+0x150>
 80a2c14:	f112 0f19 	cmn.w	r2, #25
 80a2c18:	bfdc      	itt	le
 80a2c1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a2c1e:	4770      	bxle	lr
 80a2c20:	f1c2 0200 	rsb	r2, r2, #0
 80a2c24:	0041      	lsls	r1, r0, #1
 80a2c26:	fa21 f102 	lsr.w	r1, r1, r2
 80a2c2a:	f1c2 0220 	rsb	r2, r2, #32
 80a2c2e:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2c32:	ea5f 0031 	movs.w	r0, r1, rrx
 80a2c36:	f140 0000 	adc.w	r0, r0, #0
 80a2c3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a2c3e:	bf08      	it	eq
 80a2c40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2c44:	4770      	bx	lr
 80a2c46:	f092 0f00 	teq	r2, #0
 80a2c4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2c4e:	bf02      	ittt	eq
 80a2c50:	0040      	lsleq	r0, r0, #1
 80a2c52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2c56:	3a01      	subeq	r2, #1
 80a2c58:	d0f9      	beq.n	80a2c4e <__aeabi_fmul+0xce>
 80a2c5a:	ea40 000c 	orr.w	r0, r0, ip
 80a2c5e:	f093 0f00 	teq	r3, #0
 80a2c62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2c66:	bf02      	ittt	eq
 80a2c68:	0049      	lsleq	r1, r1, #1
 80a2c6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2c6e:	3b01      	subeq	r3, #1
 80a2c70:	d0f9      	beq.n	80a2c66 <__aeabi_fmul+0xe6>
 80a2c72:	ea41 010c 	orr.w	r1, r1, ip
 80a2c76:	e78f      	b.n	80a2b98 <__aeabi_fmul+0x18>
 80a2c78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2c7c:	ea92 0f0c 	teq	r2, ip
 80a2c80:	bf18      	it	ne
 80a2c82:	ea93 0f0c 	teqne	r3, ip
 80a2c86:	d00a      	beq.n	80a2c9e <__aeabi_fmul+0x11e>
 80a2c88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2c8c:	bf18      	it	ne
 80a2c8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2c92:	d1d8      	bne.n	80a2c46 <__aeabi_fmul+0xc6>
 80a2c94:	ea80 0001 	eor.w	r0, r0, r1
 80a2c98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2c9c:	4770      	bx	lr
 80a2c9e:	f090 0f00 	teq	r0, #0
 80a2ca2:	bf17      	itett	ne
 80a2ca4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2ca8:	4608      	moveq	r0, r1
 80a2caa:	f091 0f00 	teqne	r1, #0
 80a2cae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a2cb2:	d014      	beq.n	80a2cde <__aeabi_fmul+0x15e>
 80a2cb4:	ea92 0f0c 	teq	r2, ip
 80a2cb8:	d101      	bne.n	80a2cbe <__aeabi_fmul+0x13e>
 80a2cba:	0242      	lsls	r2, r0, #9
 80a2cbc:	d10f      	bne.n	80a2cde <__aeabi_fmul+0x15e>
 80a2cbe:	ea93 0f0c 	teq	r3, ip
 80a2cc2:	d103      	bne.n	80a2ccc <__aeabi_fmul+0x14c>
 80a2cc4:	024b      	lsls	r3, r1, #9
 80a2cc6:	bf18      	it	ne
 80a2cc8:	4608      	movne	r0, r1
 80a2cca:	d108      	bne.n	80a2cde <__aeabi_fmul+0x15e>
 80a2ccc:	ea80 0001 	eor.w	r0, r0, r1
 80a2cd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2cd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2cd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2cdc:	4770      	bx	lr
 80a2cde:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2ce2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a2ce6:	4770      	bx	lr

080a2ce8 <__aeabi_fdiv>:
 80a2ce8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2cec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2cf0:	bf1e      	ittt	ne
 80a2cf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2cf6:	ea92 0f0c 	teqne	r2, ip
 80a2cfa:	ea93 0f0c 	teqne	r3, ip
 80a2cfe:	d069      	beq.n	80a2dd4 <__aeabi_fdiv+0xec>
 80a2d00:	eba2 0203 	sub.w	r2, r2, r3
 80a2d04:	ea80 0c01 	eor.w	ip, r0, r1
 80a2d08:	0249      	lsls	r1, r1, #9
 80a2d0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a2d0e:	d037      	beq.n	80a2d80 <__aeabi_fdiv+0x98>
 80a2d10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a2d14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a2d18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2d20:	428b      	cmp	r3, r1
 80a2d22:	bf38      	it	cc
 80a2d24:	005b      	lslcc	r3, r3, #1
 80a2d26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a2d2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a2d2e:	428b      	cmp	r3, r1
 80a2d30:	bf24      	itt	cs
 80a2d32:	1a5b      	subcs	r3, r3, r1
 80a2d34:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2d38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2d3c:	bf24      	itt	cs
 80a2d3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a2d42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2d46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a2d4a:	bf24      	itt	cs
 80a2d4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2d50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2d54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a2d58:	bf24      	itt	cs
 80a2d5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a2d5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2d62:	011b      	lsls	r3, r3, #4
 80a2d64:	bf18      	it	ne
 80a2d66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a2d6a:	d1e0      	bne.n	80a2d2e <__aeabi_fdiv+0x46>
 80a2d6c:	2afd      	cmp	r2, #253	; 0xfd
 80a2d6e:	f63f af50 	bhi.w	80a2c12 <__aeabi_fmul+0x92>
 80a2d72:	428b      	cmp	r3, r1
 80a2d74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2d78:	bf08      	it	eq
 80a2d7a:	f020 0001 	biceq.w	r0, r0, #1
 80a2d7e:	4770      	bx	lr
 80a2d80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2d84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2d88:	327f      	adds	r2, #127	; 0x7f
 80a2d8a:	bfc2      	ittt	gt
 80a2d8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2d90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2d94:	4770      	bxgt	lr
 80a2d96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2d9a:	f04f 0300 	mov.w	r3, #0
 80a2d9e:	3a01      	subs	r2, #1
 80a2da0:	e737      	b.n	80a2c12 <__aeabi_fmul+0x92>
 80a2da2:	f092 0f00 	teq	r2, #0
 80a2da6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2daa:	bf02      	ittt	eq
 80a2dac:	0040      	lsleq	r0, r0, #1
 80a2dae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2db2:	3a01      	subeq	r2, #1
 80a2db4:	d0f9      	beq.n	80a2daa <__aeabi_fdiv+0xc2>
 80a2db6:	ea40 000c 	orr.w	r0, r0, ip
 80a2dba:	f093 0f00 	teq	r3, #0
 80a2dbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2dc2:	bf02      	ittt	eq
 80a2dc4:	0049      	lsleq	r1, r1, #1
 80a2dc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2dca:	3b01      	subeq	r3, #1
 80a2dcc:	d0f9      	beq.n	80a2dc2 <__aeabi_fdiv+0xda>
 80a2dce:	ea41 010c 	orr.w	r1, r1, ip
 80a2dd2:	e795      	b.n	80a2d00 <__aeabi_fdiv+0x18>
 80a2dd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2dd8:	ea92 0f0c 	teq	r2, ip
 80a2ddc:	d108      	bne.n	80a2df0 <__aeabi_fdiv+0x108>
 80a2dde:	0242      	lsls	r2, r0, #9
 80a2de0:	f47f af7d 	bne.w	80a2cde <__aeabi_fmul+0x15e>
 80a2de4:	ea93 0f0c 	teq	r3, ip
 80a2de8:	f47f af70 	bne.w	80a2ccc <__aeabi_fmul+0x14c>
 80a2dec:	4608      	mov	r0, r1
 80a2dee:	e776      	b.n	80a2cde <__aeabi_fmul+0x15e>
 80a2df0:	ea93 0f0c 	teq	r3, ip
 80a2df4:	d104      	bne.n	80a2e00 <__aeabi_fdiv+0x118>
 80a2df6:	024b      	lsls	r3, r1, #9
 80a2df8:	f43f af4c 	beq.w	80a2c94 <__aeabi_fmul+0x114>
 80a2dfc:	4608      	mov	r0, r1
 80a2dfe:	e76e      	b.n	80a2cde <__aeabi_fmul+0x15e>
 80a2e00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2e04:	bf18      	it	ne
 80a2e06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2e0a:	d1ca      	bne.n	80a2da2 <__aeabi_fdiv+0xba>
 80a2e0c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a2e10:	f47f af5c 	bne.w	80a2ccc <__aeabi_fmul+0x14c>
 80a2e14:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a2e18:	f47f af3c 	bne.w	80a2c94 <__aeabi_fmul+0x114>
 80a2e1c:	e75f      	b.n	80a2cde <__aeabi_fmul+0x15e>
 80a2e1e:	bf00      	nop

080a2e20 <__gesf2>:
 80a2e20:	f04f 3cff 	mov.w	ip, #4294967295
 80a2e24:	e006      	b.n	80a2e34 <__cmpsf2+0x4>
 80a2e26:	bf00      	nop

080a2e28 <__lesf2>:
 80a2e28:	f04f 0c01 	mov.w	ip, #1
 80a2e2c:	e002      	b.n	80a2e34 <__cmpsf2+0x4>
 80a2e2e:	bf00      	nop

080a2e30 <__cmpsf2>:
 80a2e30:	f04f 0c01 	mov.w	ip, #1
 80a2e34:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2e38:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2e3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2e40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2e44:	bf18      	it	ne
 80a2e46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2e4a:	d011      	beq.n	80a2e70 <__cmpsf2+0x40>
 80a2e4c:	b001      	add	sp, #4
 80a2e4e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a2e52:	bf18      	it	ne
 80a2e54:	ea90 0f01 	teqne	r0, r1
 80a2e58:	bf58      	it	pl
 80a2e5a:	ebb2 0003 	subspl.w	r0, r2, r3
 80a2e5e:	bf88      	it	hi
 80a2e60:	17c8      	asrhi	r0, r1, #31
 80a2e62:	bf38      	it	cc
 80a2e64:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a2e68:	bf18      	it	ne
 80a2e6a:	f040 0001 	orrne.w	r0, r0, #1
 80a2e6e:	4770      	bx	lr
 80a2e70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2e74:	d102      	bne.n	80a2e7c <__cmpsf2+0x4c>
 80a2e76:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a2e7a:	d105      	bne.n	80a2e88 <__cmpsf2+0x58>
 80a2e7c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2e80:	d1e4      	bne.n	80a2e4c <__cmpsf2+0x1c>
 80a2e82:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a2e86:	d0e1      	beq.n	80a2e4c <__cmpsf2+0x1c>
 80a2e88:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2e8c:	4770      	bx	lr
 80a2e8e:	bf00      	nop

080a2e90 <__aeabi_cfrcmple>:
 80a2e90:	4684      	mov	ip, r0
 80a2e92:	4608      	mov	r0, r1
 80a2e94:	4661      	mov	r1, ip
 80a2e96:	e7ff      	b.n	80a2e98 <__aeabi_cfcmpeq>

080a2e98 <__aeabi_cfcmpeq>:
 80a2e98:	b50f      	push	{r0, r1, r2, r3, lr}
 80a2e9a:	f7ff ffc9 	bl	80a2e30 <__cmpsf2>
 80a2e9e:	2800      	cmp	r0, #0
 80a2ea0:	bf48      	it	mi
 80a2ea2:	f110 0f00 	cmnmi.w	r0, #0
 80a2ea6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a2ea8 <__aeabi_fcmpeq>:
 80a2ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2eac:	f7ff fff4 	bl	80a2e98 <__aeabi_cfcmpeq>
 80a2eb0:	bf0c      	ite	eq
 80a2eb2:	2001      	moveq	r0, #1
 80a2eb4:	2000      	movne	r0, #0
 80a2eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2eba:	bf00      	nop

080a2ebc <__aeabi_fcmplt>:
 80a2ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2ec0:	f7ff ffea 	bl	80a2e98 <__aeabi_cfcmpeq>
 80a2ec4:	bf34      	ite	cc
 80a2ec6:	2001      	movcc	r0, #1
 80a2ec8:	2000      	movcs	r0, #0
 80a2eca:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2ece:	bf00      	nop

080a2ed0 <__aeabi_fcmple>:
 80a2ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2ed4:	f7ff ffe0 	bl	80a2e98 <__aeabi_cfcmpeq>
 80a2ed8:	bf94      	ite	ls
 80a2eda:	2001      	movls	r0, #1
 80a2edc:	2000      	movhi	r0, #0
 80a2ede:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2ee2:	bf00      	nop

080a2ee4 <__aeabi_fcmpge>:
 80a2ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2ee8:	f7ff ffd2 	bl	80a2e90 <__aeabi_cfrcmple>
 80a2eec:	bf94      	ite	ls
 80a2eee:	2001      	movls	r0, #1
 80a2ef0:	2000      	movhi	r0, #0
 80a2ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2ef6:	bf00      	nop

080a2ef8 <__aeabi_fcmpgt>:
 80a2ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2efc:	f7ff ffc8 	bl	80a2e90 <__aeabi_cfrcmple>
 80a2f00:	bf34      	ite	cc
 80a2f02:	2001      	movcc	r0, #1
 80a2f04:	2000      	movcs	r0, #0
 80a2f06:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2f0a:	bf00      	nop

080a2f0c <__aeabi_f2uiz>:
 80a2f0c:	0042      	lsls	r2, r0, #1
 80a2f0e:	d20e      	bcs.n	80a2f2e <__aeabi_f2uiz+0x22>
 80a2f10:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a2f14:	d30b      	bcc.n	80a2f2e <__aeabi_f2uiz+0x22>
 80a2f16:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a2f1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a2f1e:	d409      	bmi.n	80a2f34 <__aeabi_f2uiz+0x28>
 80a2f20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a2f24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2f28:	fa23 f002 	lsr.w	r0, r3, r2
 80a2f2c:	4770      	bx	lr
 80a2f2e:	f04f 0000 	mov.w	r0, #0
 80a2f32:	4770      	bx	lr
 80a2f34:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a2f38:	d101      	bne.n	80a2f3e <__aeabi_f2uiz+0x32>
 80a2f3a:	0242      	lsls	r2, r0, #9
 80a2f3c:	d102      	bne.n	80a2f44 <__aeabi_f2uiz+0x38>
 80a2f3e:	f04f 30ff 	mov.w	r0, #4294967295
 80a2f42:	4770      	bx	lr
 80a2f44:	f04f 0000 	mov.w	r0, #0
 80a2f48:	4770      	bx	lr
 80a2f4a:	bf00      	nop

080a2f4c <__cxa_atexit>:
 80a2f4c:	b510      	push	{r4, lr}
 80a2f4e:	4c05      	ldr	r4, [pc, #20]	; (80a2f64 <__cxa_atexit+0x18>)
 80a2f50:	4613      	mov	r3, r2
 80a2f52:	b12c      	cbz	r4, 80a2f60 <__cxa_atexit+0x14>
 80a2f54:	460a      	mov	r2, r1
 80a2f56:	4601      	mov	r1, r0
 80a2f58:	2002      	movs	r0, #2
 80a2f5a:	f3af 8000 	nop.w
 80a2f5e:	bd10      	pop	{r4, pc}
 80a2f60:	4620      	mov	r0, r4
 80a2f62:	bd10      	pop	{r4, pc}
 80a2f64:	00000000 	.word	0x00000000

080a2f68 <memcpy>:
 80a2f68:	b510      	push	{r4, lr}
 80a2f6a:	1e43      	subs	r3, r0, #1
 80a2f6c:	440a      	add	r2, r1
 80a2f6e:	4291      	cmp	r1, r2
 80a2f70:	d004      	beq.n	80a2f7c <memcpy+0x14>
 80a2f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2f7a:	e7f8      	b.n	80a2f6e <memcpy+0x6>
 80a2f7c:	bd10      	pop	{r4, pc}

080a2f7e <memset>:
 80a2f7e:	4603      	mov	r3, r0
 80a2f80:	4402      	add	r2, r0
 80a2f82:	4293      	cmp	r3, r2
 80a2f84:	d002      	beq.n	80a2f8c <memset+0xe>
 80a2f86:	f803 1b01 	strb.w	r1, [r3], #1
 80a2f8a:	e7fa      	b.n	80a2f82 <memset+0x4>
 80a2f8c:	4770      	bx	lr

080a2f8e <strlen>:
 80a2f8e:	4603      	mov	r3, r0
 80a2f90:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2f94:	2a00      	cmp	r2, #0
 80a2f96:	d1fb      	bne.n	80a2f90 <strlen+0x2>
 80a2f98:	1a18      	subs	r0, r3, r0
 80a2f9a:	3801      	subs	r0, #1
 80a2f9c:	4770      	bx	lr

080a2f9e <link_code_end>:
	...

080a2fa0 <dynalib_user>:
 80a2fa0:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2fb0:	0000 0000 6573 7574 5370 6375 6563 7373     ....setupSuccess
 80a2fc0:	253d 0064 6572 6f6d 6574 7320 6174 7574     =%d.remote statu
 80a2fd0:	3a73 2000 207c 7300 6e65 6f73 2072 3a30     s:. | .sensor 0:
 80a2fe0:	7300 6e65 6f73 2072 3a31 7300 6e65 6f73     .sensor 1:.senso
 80a2ff0:	2072 3a32 7300 6e65 6f73 2072 3a33 6600     r 2:.sensor 3:.f
 80a3000:	6f72 746e 6c20 6665 3a74 6600 6f72 746e     ront left:.front
 80a3010:	7220 6769 7468 003a 6162 6b63 6c20 6665      right:.back lef
 80a3020:	3a74 6200 6361 206b 6972 6867 3a74 2500     t:.back right:.%
 80a3030:	2c64 6425 252c 0064 6f6e 7320 6d61 6c70     d,%d,%d.no sampl
 80a3040:	0065 5320 4e45 4f53 2052 4954 454d 554f     e. SENSOR TIMEOU
 80a3050:	0054 0000                                   T...

080a3054 <_ZTV9LIS3DHI2C>:
	...
 80a305c:	1565 080a 1567 080a 15bb 080a 1573 080a     e...g.......s...
 80a306c:	6564 6976 6563 6e20 746f 6620 756f 646e     device not found
 80a307c:	7200 7365 7465 6974 676e 6c20 7361 4d74     .resetting lastM
 80a308c:	766f 6d65 6e65 2074 6e69 3174 735f 6372     ovement int1_src
 80a309c:	303d 2578 0078 6572 6163 696c 7262 7461     =0x%x.recalibrat
 80a30ac:	6e69 0067                                   ing.

080a30b0 <_ZTV8SPIClass>:
	...
 80a30b8:	1aed 080a 1aef 080a 0066 6e6c 6600 006e     ........f.ln.fn.
 80a30c8:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
 80a30d8:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
 80a30e8:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
 80a30f8:	7465 6961 736c 3d20 0020 6162 6475 5300     etails = .baud.S
 80a3108:	7265 6169 006c 5355 5342 7265 6169 316c     erial.USBSerial1
 80a3118:	7400 7079 0065 6170 6172 006d 6d63 0064     .type.param.cmd.
 80a3128:	6469 6800 646e 7300 7274 006d 6966 746c     id.hnd.strm.filt
 80a3138:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
 80a3148:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
 80a3158:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
 80a3168:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
 80a3178:	7061 0070 6f6e 656e 7400 6172 6563 6900     app.none.trace.i
 80a3188:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
 80a3198:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
 80a31a8:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
 80a31b8:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
 80a31c8:	0065 0000                                   e...

080a31cc <_ZTV9IPAddress>:
	...
 80a31d4:	1ef3 080a 1ee5 080a 1ee7 080a               ............

080a31e0 <_ZTV9USBSerial>:
	...
 80a31e8:	1f5d 080a 1fa1 080a 1f7b 080a 1bef 080a     ].......{.......
 80a31f8:	1f75 080a 1f5f 080a 1f67 080a 1f9b 080a     u..._...g.......
 80a3208:	1f6f 080a 1f59 080a                         o...Y...

080a3210 <_ZTV11USARTSerial>:
	...
 80a3218:	211d 080a 2141 080a 214d 080a 1bef 080a     .!..A!..M!......
 80a3228:	2129 080a 2135 080a 212f 080a 213b 080a     )!..5!../!..;!..
 80a3238:	211f 080a 2123 080a                         .!..#!..

080a3240 <_ZTV7TwoWire>:
	...
 80a3248:	21f1 080a 223b 080a 2213 080a 21f3 080a     .!..;"..."...!..
 80a3258:	221b 080a 2223 080a 222b 080a 2233 080a     ."..#"..+"..3"..

080a3268 <_ZTVN5spark9WiFiClassE>:
	...
 80a3270:	22c3 080a                                   ."..

080a3274 <link_const_variable_data_end>:
 80a3274:	080a0905 	.word	0x080a0905
 80a3278:	080a1561 	.word	0x080a1561
 80a327c:	080a17b5 	.word	0x080a17b5
 80a3280:	080a1be9 	.word	0x080a1be9
 80a3284:	080a1d89 	.word	0x080a1d89
 80a3288:	080a1d99 	.word	0x080a1d99
 80a328c:	080a22cd 	.word	0x080a22cd
 80a3290:	080a23b1 	.word	0x080a23b1
 80a3294:	080a23f5 	.word	0x080a23f5
 80a3298:	080a2471 	.word	0x080a2471
 80a329c:	080a24f5 	.word	0x080a24f5
 80a32a0:	080a25b9 	.word	0x080a25b9
 80a32a4:	080a267d 	.word	0x080a267d

080a32a8 <link_constructors_end>:
	...
