
C:/src/battlebots-sumo/v3/fuzzy/target/fuzzy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005498  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a54b0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000064  20000300  080a54b4  00030300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000628  20000364  20000364  00040364  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a5518  080a5518  00035518  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a5540  080a5540  00035540  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000982ca  00000000  00000000  00035544  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001060c  00000000  00000000  000cd80e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000148e4  00000000  00000000  000dde1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000020f0  00000000  00000000  000f26fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002ec0  00000000  00000000  000f47ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00025164  00000000  00000000  000f76ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002483e  00000000  00000000  0011c812  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000872bc  00000000  00000000  00141050  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000ba10  00000000  00000000  001c830c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	a4 51 0a 08                                         .Q..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f005 f89d 	bl	80a516c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f005 f8a2 	bl	80a5182 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a54b4 	.word	0x080a54b4
 80a004c:	20000364 	.word	0x20000364
 80a0050:	20000364 	.word	0x20000364
 80a0054:	2000098c 	.word	0x2000098c
 80a0058:	2000098c 	.word	0x2000098c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f003 fcb3 	bl	80a39c8 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a547c 	.word	0x080a547c
 80a0084:	080a54b0 	.word	0x080a54b0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f001 b888 	b.w	80a119c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f001 f8ab 	bl	80a11e8 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f003 bc55 	b.w	80a3944 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f003 ba47 	b.w	80a352c <malloc>

080a009e <_ZdlPv>:
 80a009e:	f003 ba4d 	b.w	80a353c <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z5FLISRv>:
// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
unsigned long lastPrintSample = 0;

void FLISR() {
 80a00b4:	b508      	push	{r3, lr}
    FLflag = digitalRead(FL);
 80a00b6:	4b05      	ldr	r3, [pc, #20]	; (80a00cc <_Z5FLISRv+0x18>)
 80a00b8:	8818      	ldrh	r0, [r3, #0]
 80a00ba:	f003 fef7 	bl	80a3eac <digitalRead>
 80a00be:	4b04      	ldr	r3, [pc, #16]	; (80a00d0 <_Z5FLISRv+0x1c>)
 80a00c0:	3000      	adds	r0, #0
 80a00c2:	bf18      	it	ne
 80a00c4:	2001      	movne	r0, #1
 80a00c6:	7018      	strb	r0, [r3, #0]
 80a00c8:	bd08      	pop	{r3, pc}
 80a00ca:	bf00      	nop
 80a00cc:	20000328 	.word	0x20000328
 80a00d0:	20000324 	.word	0x20000324

080a00d4 <_Z5FRISRv>:
}

void FRISR() {
 80a00d4:	b508      	push	{r3, lr}
    FRflag = digitalRead(FR);
 80a00d6:	4b05      	ldr	r3, [pc, #20]	; (80a00ec <_Z5FRISRv+0x18>)
 80a00d8:	8818      	ldrh	r0, [r3, #0]
 80a00da:	f003 fee7 	bl	80a3eac <digitalRead>
 80a00de:	4b04      	ldr	r3, [pc, #16]	; (80a00f0 <_Z5FRISRv+0x1c>)
 80a00e0:	3000      	adds	r0, #0
 80a00e2:	bf18      	it	ne
 80a00e4:	2001      	movne	r0, #1
 80a00e6:	7018      	strb	r0, [r3, #0]
 80a00e8:	bd08      	pop	{r3, pc}
 80a00ea:	bf00      	nop
 80a00ec:	20000318 	.word	0x20000318
 80a00f0:	20000344 	.word	0x20000344

080a00f4 <_Z5BLISRv>:
}

void BLISR() {
 80a00f4:	b508      	push	{r3, lr}
    BLflag = digitalRead(BL);
 80a00f6:	4b05      	ldr	r3, [pc, #20]	; (80a010c <_Z5BLISRv+0x18>)
 80a00f8:	8818      	ldrh	r0, [r3, #0]
 80a00fa:	f003 fed7 	bl	80a3eac <digitalRead>
 80a00fe:	4b04      	ldr	r3, [pc, #16]	; (80a0110 <_Z5BLISRv+0x1c>)
 80a0100:	3000      	adds	r0, #0
 80a0102:	bf18      	it	ne
 80a0104:	2001      	movne	r0, #1
 80a0106:	7018      	strb	r0, [r3, #0]
 80a0108:	bd08      	pop	{r3, pc}
 80a010a:	bf00      	nop
 80a010c:	2000031c 	.word	0x2000031c
 80a0110:	2000032c 	.word	0x2000032c

080a0114 <_Z5BRISRv>:
}

void BRISR() {
 80a0114:	b508      	push	{r3, lr}
    BRflag = digitalRead(BR);
 80a0116:	4b05      	ldr	r3, [pc, #20]	; (80a012c <_Z5BRISRv+0x18>)
 80a0118:	8818      	ldrh	r0, [r3, #0]
 80a011a:	f003 fec7 	bl	80a3eac <digitalRead>
 80a011e:	4b04      	ldr	r3, [pc, #16]	; (80a0130 <_Z5BRISRv+0x1c>)
 80a0120:	3000      	adds	r0, #0
 80a0122:	bf18      	it	ne
 80a0124:	2001      	movne	r0, #1
 80a0126:	7018      	strb	r0, [r3, #0]
 80a0128:	bd08      	pop	{r3, pc}
 80a012a:	bf00      	nop
 80a012c:	20000320 	.word	0x20000320
 80a0130:	2000035c 	.word	0x2000035c

080a0134 <_Z5RSISRv>:
}

void RSISR() {
 80a0134:	b508      	push	{r3, lr}
    RSflag = digitalRead(RS);
 80a0136:	4b05      	ldr	r3, [pc, #20]	; (80a014c <_Z5RSISRv+0x18>)
 80a0138:	8818      	ldrh	r0, [r3, #0]
 80a013a:	f003 feb7 	bl	80a3eac <digitalRead>
 80a013e:	4b04      	ldr	r3, [pc, #16]	; (80a0150 <_Z5RSISRv+0x1c>)
 80a0140:	3000      	adds	r0, #0
 80a0142:	bf18      	it	ne
 80a0144:	2001      	movne	r0, #1
 80a0146:	7018      	strb	r0, [r3, #0]
 80a0148:	bd08      	pop	{r3, pc}
 80a014a:	bf00      	nop
 80a014c:	20000300 	.word	0x20000300
 80a0150:	20000400 	.word	0x20000400

080a0154 <_Z8tof_initv>:
}

void tof_init() {
 80a0154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pinMode(A0, OUTPUT);
 80a0158:	2101      	movs	r1, #1
 80a015a:	200a      	movs	r0, #10
 80a015c:	f003 fe7c 	bl	80a3e58 <pinMode>
    pinMode(A1, OUTPUT);
 80a0160:	2101      	movs	r1, #1
 80a0162:	200b      	movs	r0, #11
 80a0164:	f003 fe78 	bl	80a3e58 <pinMode>
    pinMode(A2, OUTPUT);
 80a0168:	2101      	movs	r1, #1
 80a016a:	200c      	movs	r0, #12
 80a016c:	f003 fe74 	bl	80a3e58 <pinMode>
    pinMode(A3, OUTPUT);
 80a0170:	2101      	movs	r1, #1
 80a0172:	200d      	movs	r0, #13
 80a0174:	f003 fe70 	bl	80a3e58 <pinMode>
    digitalWrite(A0, LOW);
 80a0178:	2100      	movs	r1, #0
 80a017a:	200a      	movs	r0, #10
 80a017c:	f003 fe7d 	bl	80a3e7a <digitalWrite>
    digitalWrite(A1, LOW);
 80a0180:	2100      	movs	r1, #0
 80a0182:	200b      	movs	r0, #11
 80a0184:	f003 fe79 	bl	80a3e7a <digitalWrite>
    digitalWrite(A2, LOW);
 80a0188:	2100      	movs	r1, #0
 80a018a:	200c      	movs	r0, #12
 80a018c:	f003 fe75 	bl	80a3e7a <digitalWrite>
    digitalWrite(A3, LOW);
 80a0190:	2100      	movs	r1, #0
 80a0192:	200d      	movs	r0, #13
 80a0194:	f003 fe71 	bl	80a3e7a <digitalWrite>
    delay(500);
 80a0198:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a019c:	f003 fb7a 	bl	80a3894 <delay>

    Wire.setSpeed(CLOCK_SPEED_100KHZ);  // need to initialize i2c protocol after driving shdn pins low
 80a01a0:	f003 fed2 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a01a4:	4940      	ldr	r1, [pc, #256]	; (80a02a8 <_Z8tof_initv+0x154>)
 80a01a6:	f003 fdf3 	bl	80a3d90 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();
 80a01aa:	f003 fecd 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a01ae:	f003 fdf3 	bl	80a3d98 <_ZN7TwoWire5beginEv>

    delay(10);
 80a01b2:	200a      	movs	r0, #10
 80a01b4:	f003 fb6e 	bl	80a3894 <delay>
    digitalWrite(A0, HIGH);
 80a01b8:	2101      	movs	r1, #1
 80a01ba:	200a      	movs	r0, #10
 80a01bc:	f003 fe5d 	bl	80a3e7a <digitalWrite>
    digitalWrite(A1, HIGH);
 80a01c0:	2101      	movs	r1, #1
 80a01c2:	200b      	movs	r0, #11
 80a01c4:	f003 fe59 	bl	80a3e7a <digitalWrite>
    digitalWrite(A2, HIGH);
 80a01c8:	2101      	movs	r1, #1
 80a01ca:	200c      	movs	r0, #12
 80a01cc:	f003 fe55 	bl	80a3e7a <digitalWrite>
    digitalWrite(A3, HIGH);
 80a01d0:	2101      	movs	r1, #1
 80a01d2:	200d      	movs	r0, #13
 80a01d4:	f003 fe51 	bl	80a3e7a <digitalWrite>
    delay(10);
 80a01d8:	200a      	movs	r0, #10
 80a01da:	f003 fb5b 	bl	80a3894 <delay>
    digitalWrite(A1, LOW);
 80a01de:	2100      	movs	r1, #0
 80a01e0:	200b      	movs	r0, #11
 80a01e2:	f003 fe4a 	bl	80a3e7a <digitalWrite>
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
 80a01e6:	4f31      	ldr	r7, [pc, #196]	; (80a02ac <_Z8tof_initv+0x158>)
    digitalWrite(A1, HIGH);
    digitalWrite(A2, HIGH);
    digitalWrite(A3, HIGH);
    delay(10);
    digitalWrite(A1, LOW);
    digitalWrite(A2, LOW);
 80a01e8:	2100      	movs	r1, #0
 80a01ea:	200c      	movs	r0, #12
 80a01ec:	f003 fe45 	bl	80a3e7a <digitalWrite>
    digitalWrite(A3, LOW);
 80a01f0:	2100      	movs	r1, #0
 80a01f2:	200d      	movs	r0, #13
 80a01f4:	f003 fe41 	bl	80a3e7a <digitalWrite>
    sensor0.init();
 80a01f8:	2101      	movs	r1, #1
 80a01fa:	4638      	mov	r0, r7
 80a01fc:	f001 fd3c 	bl	80a1c78 <_ZN7VL53L0X4initEb>
    void startContinuous(uint32_t period_ms = 0);
    void stopContinuous(void);
    uint16_t readRangeContinuousMillimeters(void);
    uint16_t readRangeSingleMillimeters(void);

    inline void setTimeout(uint16_t timeout) { io_timeout = timeout; }
 80a0200:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    sensor0.setAddress(0x30);
 80a0204:	2130      	movs	r1, #48	; 0x30
 80a0206:	4638      	mov	r0, r7
 80a0208:	f001 f9eb 	bl	80a15e2 <_ZN7VL53L0X10setAddressEh>
    sensor0.setTimeout(1000);
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
 80a020c:	4e28      	ldr	r6, [pc, #160]	; (80a02b0 <_Z8tof_initv+0x15c>)
 80a020e:	f8c7 8004 	str.w	r8, [r7, #4]
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
    sensor0.setAddress(0x30);
    sensor0.setTimeout(1000);
    delay(10);
 80a0212:	200a      	movs	r0, #10
 80a0214:	f003 fb3e 	bl	80a3894 <delay>
    digitalWrite(A1, HIGH);
 80a0218:	2101      	movs	r1, #1
 80a021a:	200b      	movs	r0, #11
 80a021c:	f003 fe2d 	bl	80a3e7a <digitalWrite>
    sensor1.init();
 80a0220:	2101      	movs	r1, #1
 80a0222:	4630      	mov	r0, r6
 80a0224:	f001 fd28 	bl	80a1c78 <_ZN7VL53L0X4initEb>
    sensor1.setAddress(0x31);
 80a0228:	2131      	movs	r1, #49	; 0x31
 80a022a:	4630      	mov	r0, r6
 80a022c:	f001 f9d9 	bl	80a15e2 <_ZN7VL53L0X10setAddressEh>
    sensor1.setTimeout(1000);
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
 80a0230:	4d20      	ldr	r5, [pc, #128]	; (80a02b4 <_Z8tof_initv+0x160>)
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
    sensor1.setAddress(0x31);
    sensor1.setTimeout(1000);
    delay(10);
 80a0232:	200a      	movs	r0, #10
 80a0234:	f8c6 8004 	str.w	r8, [r6, #4]
 80a0238:	f003 fb2c 	bl	80a3894 <delay>
    digitalWrite(A2, HIGH);
 80a023c:	2101      	movs	r1, #1
 80a023e:	200c      	movs	r0, #12
 80a0240:	f003 fe1b 	bl	80a3e7a <digitalWrite>
    sensor2.init();
 80a0244:	2101      	movs	r1, #1
 80a0246:	4628      	mov	r0, r5
 80a0248:	f001 fd16 	bl	80a1c78 <_ZN7VL53L0X4initEb>
    sensor2.setAddress(0x32);
 80a024c:	2132      	movs	r1, #50	; 0x32
 80a024e:	4628      	mov	r0, r5
 80a0250:	f001 f9c7 	bl	80a15e2 <_ZN7VL53L0X10setAddressEh>
    sensor2.setTimeout(1000);
    delay(10);
    digitalWrite(A3, HIGH);
    sensor3.init();
 80a0254:	4c18      	ldr	r4, [pc, #96]	; (80a02b8 <_Z8tof_initv+0x164>)
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
    sensor2.setAddress(0x32);
    sensor2.setTimeout(1000);
    delay(10);
 80a0256:	200a      	movs	r0, #10
 80a0258:	f8c5 8004 	str.w	r8, [r5, #4]
 80a025c:	f003 fb1a 	bl	80a3894 <delay>
    digitalWrite(A3, HIGH);
 80a0260:	2101      	movs	r1, #1
 80a0262:	200d      	movs	r0, #13
 80a0264:	f003 fe09 	bl	80a3e7a <digitalWrite>
    sensor3.init();
 80a0268:	2101      	movs	r1, #1
 80a026a:	4620      	mov	r0, r4
 80a026c:	f001 fd04 	bl	80a1c78 <_ZN7VL53L0X4initEb>
    sensor3.setAddress(0x33);
 80a0270:	2133      	movs	r1, #51	; 0x33
 80a0272:	4620      	mov	r0, r4
 80a0274:	f001 f9b5 	bl	80a15e2 <_ZN7VL53L0X10setAddressEh>
    sensor3.setTimeout(1000);
    delay(10);
 80a0278:	200a      	movs	r0, #10
 80a027a:	f8c4 8004 	str.w	r8, [r4, #4]
 80a027e:	f003 fb09 	bl	80a3894 <delay>

    // Start continuous back-to-back mode (take readings as
    // fast as possible).  To use continuous timed mode
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
 80a0282:	4638      	mov	r0, r7
 80a0284:	210a      	movs	r1, #10
 80a0286:	f001 faca 	bl	80a181e <_ZN7VL53L0X15startContinuousEm>
    sensor1.startContinuous(10);
 80a028a:	4630      	mov	r0, r6
 80a028c:	210a      	movs	r1, #10
 80a028e:	f001 fac6 	bl	80a181e <_ZN7VL53L0X15startContinuousEm>
    sensor2.startContinuous(10);
 80a0292:	4628      	mov	r0, r5
 80a0294:	210a      	movs	r1, #10
 80a0296:	f001 fac2 	bl	80a181e <_ZN7VL53L0X15startContinuousEm>
    sensor3.startContinuous(10);			
 80a029a:	4620      	mov	r0, r4
}
 80a029c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
    sensor1.startContinuous(10);
    sensor2.startContinuous(10);
    sensor3.startContinuous(10);			
 80a02a0:	210a      	movs	r1, #10
 80a02a2:	f001 babc 	b.w	80a181e <_ZN7VL53L0X15startContinuousEm>
 80a02a6:	bf00      	nop
 80a02a8:	000186a0 	.word	0x000186a0
 80a02ac:	200003a8 	.word	0x200003a8
 80a02b0:	20000408 	.word	0x20000408
 80a02b4:	200003c0 	.word	0x200003c0
 80a02b8:	200003d8 	.word	0x200003d8

080a02bc <_Z10accel_initv>:
}

void accel_init() {
 80a02bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  LIS3DHConfig config;
 80a02be:	a801      	add	r0, sp, #4
 80a02c0:	f001 ffaf 	bl	80a2222 <_ZN12LIS3DHConfigC1Ev>
  config.setAccelMode(LIS3DH::RATE_400_HZ);
 80a02c4:	2170      	movs	r1, #112	; 0x70
 80a02c6:	a801      	add	r0, sp, #4
 80a02c8:	f001 ffb8 	bl	80a223c <_ZN12LIS3DHConfig12setAccelModeEh>

  bool setupSuccess = accel.setup(config);
 80a02cc:	a901      	add	r1, sp, #4
 80a02ce:	4803      	ldr	r0, [pc, #12]	; (80a02dc <_Z10accel_initv+0x20>)
 80a02d0:	f002 f80c 	bl	80a22ec <_ZN6LIS3DH5setupER12LIS3DHConfig>
  // Serial.printlnf("setupSuccess=%d", setupSuccess);
}
 80a02d4:	b005      	add	sp, #20
 80a02d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80a02da:	bf00      	nop
 80a02dc:	20000380 	.word	0x20000380

080a02e0 <_Z11others_initv>:

void others_init() {
 80a02e0:	b508      	push	{r3, lr}
	// Line sensors
  	pinMode(FL, INPUT);
 80a02e2:	4b12      	ldr	r3, [pc, #72]	; (80a032c <_Z11others_initv+0x4c>)
 80a02e4:	2100      	movs	r1, #0
 80a02e6:	8818      	ldrh	r0, [r3, #0]
 80a02e8:	f003 fdb6 	bl	80a3e58 <pinMode>
  	pinMode(FR, INPUT);
 80a02ec:	4b10      	ldr	r3, [pc, #64]	; (80a0330 <_Z11others_initv+0x50>)
 80a02ee:	2100      	movs	r1, #0
 80a02f0:	8818      	ldrh	r0, [r3, #0]
 80a02f2:	f003 fdb1 	bl	80a3e58 <pinMode>
  	pinMode(BL, INPUT);
 80a02f6:	4b0f      	ldr	r3, [pc, #60]	; (80a0334 <_Z11others_initv+0x54>)
 80a02f8:	2100      	movs	r1, #0
 80a02fa:	8818      	ldrh	r0, [r3, #0]
 80a02fc:	f003 fdac 	bl	80a3e58 <pinMode>
  	pinMode(BR, INPUT);
 80a0300:	4b0d      	ldr	r3, [pc, #52]	; (80a0338 <_Z11others_initv+0x58>)
 80a0302:	2100      	movs	r1, #0
 80a0304:	8818      	ldrh	r0, [r3, #0]
 80a0306:	f003 fda7 	bl	80a3e58 <pinMode>
  	// Remote switch
  	pinMode(RS, INPUT);
 80a030a:	4b0c      	ldr	r3, [pc, #48]	; (80a033c <_Z11others_initv+0x5c>)
 80a030c:	2100      	movs	r1, #0
 80a030e:	8818      	ldrh	r0, [r3, #0]
 80a0310:	f003 fda2 	bl	80a3e58 <pinMode>
  	// Car ESCs
  	pinMode(Lmotor, OUTPUT);
 80a0314:	4b0a      	ldr	r3, [pc, #40]	; (80a0340 <_Z11others_initv+0x60>)
 80a0316:	2101      	movs	r1, #1
 80a0318:	8818      	ldrh	r0, [r3, #0]
 80a031a:	f003 fd9d 	bl	80a3e58 <pinMode>
  	pinMode(Rmotor, OUTPUT);
 80a031e:	4b09      	ldr	r3, [pc, #36]	; (80a0344 <_Z11others_initv+0x64>)
 80a0320:	2101      	movs	r1, #1
 80a0322:	8818      	ldrh	r0, [r3, #0]

  	// ***Remove for competition***
  	// ***Serial monitor***
  	// Serial.begin(9600);	// *** need to modify before comp ***
}
 80a0324:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  	pinMode(BR, INPUT);
  	// Remote switch
  	pinMode(RS, INPUT);
  	// Car ESCs
  	pinMode(Lmotor, OUTPUT);
  	pinMode(Rmotor, OUTPUT);
 80a0328:	f003 bd96 	b.w	80a3e58 <pinMode>
 80a032c:	20000328 	.word	0x20000328
 80a0330:	20000318 	.word	0x20000318
 80a0334:	2000031c 	.word	0x2000031c
 80a0338:	20000320 	.word	0x20000320
 80a033c:	20000300 	.word	0x20000300
 80a0340:	20000348 	.word	0x20000348
 80a0344:	2000033c 	.word	0x2000033c

080a0348 <_Z14interrupt_initv>:
  	// ***Remove for competition***
  	// ***Serial monitor***
  	// Serial.begin(9600);	// *** need to modify before comp ***
}

void interrupt_init() {
 80a0348:	b513      	push	{r0, r1, r4, lr}
	// Line sensors
	attachInterrupt(FL, FLISR, CHANGE);
 80a034a:	4b18      	ldr	r3, [pc, #96]	; (80a03ac <_Z14interrupt_initv+0x64>)
 80a034c:	2400      	movs	r4, #0
 80a034e:	8818      	ldrh	r0, [r3, #0]
 80a0350:	4622      	mov	r2, r4
 80a0352:	9400      	str	r4, [sp, #0]
 80a0354:	f04f 33ff 	mov.w	r3, #4294967295
 80a0358:	4915      	ldr	r1, [pc, #84]	; (80a03b0 <_Z14interrupt_initv+0x68>)
 80a035a:	f003 fc4b 	bl	80a3bf4 <_Z15attachInterrupttPFvvE13InterruptModeah>
   	attachInterrupt(FR, FRISR, CHANGE);
 80a035e:	4b15      	ldr	r3, [pc, #84]	; (80a03b4 <_Z14interrupt_initv+0x6c>)
 80a0360:	4622      	mov	r2, r4
 80a0362:	8818      	ldrh	r0, [r3, #0]
 80a0364:	4914      	ldr	r1, [pc, #80]	; (80a03b8 <_Z14interrupt_initv+0x70>)
 80a0366:	9400      	str	r4, [sp, #0]
 80a0368:	f04f 33ff 	mov.w	r3, #4294967295
 80a036c:	f003 fc42 	bl	80a3bf4 <_Z15attachInterrupttPFvvE13InterruptModeah>
   	attachInterrupt(BL, BLISR, CHANGE);
 80a0370:	4b12      	ldr	r3, [pc, #72]	; (80a03bc <_Z14interrupt_initv+0x74>)
 80a0372:	4622      	mov	r2, r4
 80a0374:	8818      	ldrh	r0, [r3, #0]
 80a0376:	4912      	ldr	r1, [pc, #72]	; (80a03c0 <_Z14interrupt_initv+0x78>)
 80a0378:	9400      	str	r4, [sp, #0]
 80a037a:	f04f 33ff 	mov.w	r3, #4294967295
 80a037e:	f003 fc39 	bl	80a3bf4 <_Z15attachInterrupttPFvvE13InterruptModeah>
   	attachInterrupt(BR, BRISR, CHANGE);
 80a0382:	4b10      	ldr	r3, [pc, #64]	; (80a03c4 <_Z14interrupt_initv+0x7c>)
 80a0384:	4622      	mov	r2, r4
 80a0386:	8818      	ldrh	r0, [r3, #0]
 80a0388:	490f      	ldr	r1, [pc, #60]	; (80a03c8 <_Z14interrupt_initv+0x80>)
 80a038a:	9400      	str	r4, [sp, #0]
 80a038c:	f04f 33ff 	mov.w	r3, #4294967295
 80a0390:	f003 fc30 	bl	80a3bf4 <_Z15attachInterrupttPFvvE13InterruptModeah>
   	// Remote switch
   	attachInterrupt(RS, RSISR, CHANGE);
 80a0394:	4b0d      	ldr	r3, [pc, #52]	; (80a03cc <_Z14interrupt_initv+0x84>)
 80a0396:	4622      	mov	r2, r4
 80a0398:	8818      	ldrh	r0, [r3, #0]
 80a039a:	490d      	ldr	r1, [pc, #52]	; (80a03d0 <_Z14interrupt_initv+0x88>)
 80a039c:	9400      	str	r4, [sp, #0]
 80a039e:	f04f 33ff 	mov.w	r3, #4294967295
 80a03a2:	f003 fc27 	bl	80a3bf4 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
 80a03a6:	b002      	add	sp, #8
 80a03a8:	bd10      	pop	{r4, pc}
 80a03aa:	bf00      	nop
 80a03ac:	20000328 	.word	0x20000328
 80a03b0:	080a00b5 	.word	0x080a00b5
 80a03b4:	20000318 	.word	0x20000318
 80a03b8:	080a00d5 	.word	0x080a00d5
 80a03bc:	2000031c 	.word	0x2000031c
 80a03c0:	080a00f5 	.word	0x080a00f5
 80a03c4:	20000320 	.word	0x20000320
 80a03c8:	080a0115 	.word	0x080a0115
 80a03cc:	20000300 	.word	0x20000300
 80a03d0:	080a0135 	.word	0x080a0135

080a03d4 <_Z8ESC_initv>:

void ESC_init() {
 80a03d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Necessary for Servo objects
  	LESC.attach(Lmotor);
 80a03d6:	4b13      	ldr	r3, [pc, #76]	; (80a0424 <_Z8ESC_initv+0x50>)
 80a03d8:	4d13      	ldr	r5, [pc, #76]	; (80a0428 <_Z8ESC_initv+0x54>)
 80a03da:	2600      	movs	r6, #0
 80a03dc:	27b4      	movs	r7, #180	; 0xb4
 80a03de:	8819      	ldrh	r1, [r3, #0]
 80a03e0:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a03e4:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80a03e8:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a03ec:	4628      	mov	r0, r5
 80a03ee:	f003 f908 	bl	80a3602 <_ZN5Servo6attachEtttss>
  	RESC.attach(Rmotor);
 80a03f2:	4c0e      	ldr	r4, [pc, #56]	; (80a042c <_Z8ESC_initv+0x58>)
 80a03f4:	4b0e      	ldr	r3, [pc, #56]	; (80a0430 <_Z8ESC_initv+0x5c>)
 80a03f6:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a03fa:	8819      	ldrh	r1, [r3, #0]
 80a03fc:	4620      	mov	r0, r4
 80a03fe:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a0402:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80a0406:	f003 f8fc 	bl	80a3602 <_ZN5Servo6attachEtttss>
  	// Write stop command
  	LESC.writeMicroseconds(1500);
 80a040a:	4628      	mov	r0, r5
 80a040c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a0410:	f003 f8c3 	bl	80a359a <_ZN5Servo17writeMicrosecondsEt>
  	RESC.writeMicroseconds(1500);
 80a0414:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a0418:	4620      	mov	r0, r4
}
 80a041a:	b003      	add	sp, #12
 80a041c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	// Necessary for Servo objects
  	LESC.attach(Lmotor);
  	RESC.attach(Rmotor);
  	// Write stop command
  	LESC.writeMicroseconds(1500);
  	RESC.writeMicroseconds(1500);
 80a0420:	f003 b8bb 	b.w	80a359a <_ZN5Servo17writeMicrosecondsEt>
 80a0424:	20000348 	.word	0x20000348
 80a0428:	20000370 	.word	0x20000370
 80a042c:	200003f0 	.word	0x200003f0
 80a0430:	2000033c 	.word	0x2000033c

080a0434 <_Z10robot_initv>:
}

void robot_init() {
 80a0434:	b510      	push	{r4, lr}
  while(RSflag == LOW) {    // initial LOW
 80a0436:	4c0c      	ldr	r4, [pc, #48]	; (80a0468 <_Z10robot_initv+0x34>)
 80a0438:	7823      	ldrb	r3, [r4, #0]
 80a043a:	b92b      	cbnz	r3, 80a0448 <_Z10robot_initv+0x14>
    Serial.println("Waiting for Start");
 80a043c:	f003 fb76 	bl	80a3b2c <_Z16_fetch_usbserialv>
 80a0440:	490a      	ldr	r1, [pc, #40]	; (80a046c <_Z10robot_initv+0x38>)
 80a0442:	f003 f9b0 	bl	80a37a6 <_ZN5Print7printlnEPKc>
  	LESC.writeMicroseconds(1500);
  	RESC.writeMicroseconds(1500);
}

void robot_init() {
  while(RSflag == LOW) {    // initial LOW
 80a0446:	e7f7      	b.n	80a0438 <_Z10robot_initv+0x4>
    Serial.println("Waiting for Start");
  }
  Serial.println("Starting in 5 seconds...");
 80a0448:	f003 fb70 	bl	80a3b2c <_Z16_fetch_usbserialv>
 80a044c:	4908      	ldr	r1, [pc, #32]	; (80a0470 <_Z10robot_initv+0x3c>)
 80a044e:	f003 f9aa 	bl	80a37a6 <_ZN5Print7printlnEPKc>
  delay(5000);
 80a0452:	f241 3088 	movw	r0, #5000	; 0x1388
 80a0456:	f003 fa1d 	bl	80a3894 <delay>
  Serial.println("GO!");    
 80a045a:	f003 fb67 	bl	80a3b2c <_Z16_fetch_usbserialv>
}
 80a045e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  while(RSflag == LOW) {    // initial LOW
    Serial.println("Waiting for Start");
  }
  Serial.println("Starting in 5 seconds...");
  delay(5000);
  Serial.println("GO!");    
 80a0462:	4904      	ldr	r1, [pc, #16]	; (80a0474 <_Z10robot_initv+0x40>)
 80a0464:	f003 b99f 	b.w	80a37a6 <_ZN5Print7printlnEPKc>
 80a0468:	20000400 	.word	0x20000400
 80a046c:	080a51b8 	.word	0x080a51b8
 80a0470:	080a51ca 	.word	0x080a51ca
 80a0474:	080a51e3 	.word	0x080a51e3

080a0478 <_Z10fuzzy_initv>:
}

void fuzzy_init() {
 80a0478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // low = far, high = close

  // INPUT: 1 of 4
  FuzzyInput* LL_input = new FuzzyInput(1);
 80a047c:	2010      	movs	r0, #16
  Serial.println("Starting in 5 seconds...");
  delay(5000);
  Serial.println("GO!");    
}

void fuzzy_init() {
 80a047e:	b099      	sub	sp, #100	; 0x64
  // low = far, high = close

  // INPUT: 1 of 4
  FuzzyInput* LL_input = new FuzzyInput(1);
 80a0480:	f7ff fe0b 	bl	80a009a <_Znwj>
 80a0484:	4604      	mov	r4, r0
 80a0486:	b110      	cbz	r0, 80a048e <_Z10fuzzy_initv+0x16>
 80a0488:	2101      	movs	r1, #1
 80a048a:	f002 f9cc 	bl	80a2826 <_ZN10FuzzyInputC1Ei>
  FuzzySet* LL_low = new FuzzySet(low1, low2, low3, low4);
 80a048e:	2014      	movs	r0, #20
 80a0490:	f7ff fe03 	bl	80a009a <_Znwj>
 80a0494:	4605      	mov	r5, r0
 80a0496:	b1c8      	cbz	r0, 80a04cc <_Z10fuzzy_initv+0x54>
 80a0498:	4ba2      	ldr	r3, [pc, #648]	; (80a0724 <_Z10fuzzy_initv+0x2ac>)
 80a049a:	6818      	ldr	r0, [r3, #0]
 80a049c:	f004 fc1e 	bl	80a4cdc <__aeabi_i2f>
 80a04a0:	4ba1      	ldr	r3, [pc, #644]	; (80a0728 <_Z10fuzzy_initv+0x2b0>)
 80a04a2:	4680      	mov	r8, r0
 80a04a4:	6818      	ldr	r0, [r3, #0]
 80a04a6:	f004 fc19 	bl	80a4cdc <__aeabi_i2f>
 80a04aa:	4ba0      	ldr	r3, [pc, #640]	; (80a072c <_Z10fuzzy_initv+0x2b4>)
 80a04ac:	4607      	mov	r7, r0
 80a04ae:	6818      	ldr	r0, [r3, #0]
 80a04b0:	f004 fc14 	bl	80a4cdc <__aeabi_i2f>
 80a04b4:	4b9e      	ldr	r3, [pc, #632]	; (80a0730 <_Z10fuzzy_initv+0x2b8>)
 80a04b6:	4606      	mov	r6, r0
 80a04b8:	6818      	ldr	r0, [r3, #0]
 80a04ba:	f004 fc0f 	bl	80a4cdc <__aeabi_i2f>
 80a04be:	4643      	mov	r3, r8
 80a04c0:	9000      	str	r0, [sp, #0]
 80a04c2:	463a      	mov	r2, r7
 80a04c4:	4631      	mov	r1, r6
 80a04c6:	4628      	mov	r0, r5
 80a04c8:	f002 fc29 	bl	80a2d1e <_ZN8FuzzySetC1Effff>
  FuzzySet* LL_med = new FuzzySet(med1, med2, med3, med4);
 80a04cc:	2014      	movs	r0, #20
 80a04ce:	f7ff fde4 	bl	80a009a <_Znwj>
 80a04d2:	4680      	mov	r8, r0
 80a04d4:	b1c8      	cbz	r0, 80a050a <_Z10fuzzy_initv+0x92>
 80a04d6:	4b97      	ldr	r3, [pc, #604]	; (80a0734 <_Z10fuzzy_initv+0x2bc>)
 80a04d8:	6818      	ldr	r0, [r3, #0]
 80a04da:	f004 fbff 	bl	80a4cdc <__aeabi_i2f>
 80a04de:	4b96      	ldr	r3, [pc, #600]	; (80a0738 <_Z10fuzzy_initv+0x2c0>)
 80a04e0:	4681      	mov	r9, r0
 80a04e2:	6818      	ldr	r0, [r3, #0]
 80a04e4:	f004 fbfa 	bl	80a4cdc <__aeabi_i2f>
 80a04e8:	4b94      	ldr	r3, [pc, #592]	; (80a073c <_Z10fuzzy_initv+0x2c4>)
 80a04ea:	4607      	mov	r7, r0
 80a04ec:	6818      	ldr	r0, [r3, #0]
 80a04ee:	f004 fbf5 	bl	80a4cdc <__aeabi_i2f>
 80a04f2:	4b93      	ldr	r3, [pc, #588]	; (80a0740 <_Z10fuzzy_initv+0x2c8>)
 80a04f4:	4606      	mov	r6, r0
 80a04f6:	6818      	ldr	r0, [r3, #0]
 80a04f8:	f004 fbf0 	bl	80a4cdc <__aeabi_i2f>
 80a04fc:	464b      	mov	r3, r9
 80a04fe:	9000      	str	r0, [sp, #0]
 80a0500:	463a      	mov	r2, r7
 80a0502:	4631      	mov	r1, r6
 80a0504:	4640      	mov	r0, r8
 80a0506:	f002 fc0a 	bl	80a2d1e <_ZN8FuzzySetC1Effff>
  FuzzySet* LL_high = new FuzzySet(high1, high2, high3, high4);
 80a050a:	2014      	movs	r0, #20
 80a050c:	f7ff fdc5 	bl	80a009a <_Znwj>
 80a0510:	4607      	mov	r7, r0
 80a0512:	b1c8      	cbz	r0, 80a0548 <_Z10fuzzy_initv+0xd0>
 80a0514:	4b8b      	ldr	r3, [pc, #556]	; (80a0744 <_Z10fuzzy_initv+0x2cc>)
 80a0516:	6818      	ldr	r0, [r3, #0]
 80a0518:	f004 fbe0 	bl	80a4cdc <__aeabi_i2f>
 80a051c:	4b8a      	ldr	r3, [pc, #552]	; (80a0748 <_Z10fuzzy_initv+0x2d0>)
 80a051e:	4682      	mov	sl, r0
 80a0520:	6818      	ldr	r0, [r3, #0]
 80a0522:	f004 fbdb 	bl	80a4cdc <__aeabi_i2f>
 80a0526:	4b89      	ldr	r3, [pc, #548]	; (80a074c <_Z10fuzzy_initv+0x2d4>)
 80a0528:	4681      	mov	r9, r0
 80a052a:	6818      	ldr	r0, [r3, #0]
 80a052c:	f004 fbd6 	bl	80a4cdc <__aeabi_i2f>
 80a0530:	4b87      	ldr	r3, [pc, #540]	; (80a0750 <_Z10fuzzy_initv+0x2d8>)
 80a0532:	4606      	mov	r6, r0
 80a0534:	6818      	ldr	r0, [r3, #0]
 80a0536:	f004 fbd1 	bl	80a4cdc <__aeabi_i2f>
 80a053a:	4653      	mov	r3, sl
 80a053c:	9000      	str	r0, [sp, #0]
 80a053e:	464a      	mov	r2, r9
 80a0540:	4631      	mov	r1, r6
 80a0542:	4638      	mov	r0, r7
 80a0544:	f002 fbeb 	bl	80a2d1e <_ZN8FuzzySetC1Effff>
  LL_input->addFuzzySet(LL_low);
 80a0548:	4629      	mov	r1, r5
 80a054a:	4620      	mov	r0, r4
 80a054c:	f002 f987 	bl	80a285e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  LL_input->addFuzzySet(LL_med);
  LL_input->addFuzzySet(LL_high);
  fuzzy->addFuzzyInput(LL_input);
 80a0550:	4e80      	ldr	r6, [pc, #512]	; (80a0754 <_Z10fuzzy_initv+0x2dc>)
  FuzzyInput* LL_input = new FuzzyInput(1);
  FuzzySet* LL_low = new FuzzySet(low1, low2, low3, low4);
  FuzzySet* LL_med = new FuzzySet(med1, med2, med3, med4);
  FuzzySet* LL_high = new FuzzySet(high1, high2, high3, high4);
  LL_input->addFuzzySet(LL_low);
  LL_input->addFuzzySet(LL_med);
 80a0552:	4641      	mov	r1, r8
 80a0554:	4620      	mov	r0, r4
 80a0556:	f002 f982 	bl	80a285e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  LL_input->addFuzzySet(LL_high);
 80a055a:	4639      	mov	r1, r7
 80a055c:	4620      	mov	r0, r4
 80a055e:	f002 f97e 	bl	80a285e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyInput(LL_input);
 80a0562:	4621      	mov	r1, r4
 80a0564:	6830      	ldr	r0, [r6, #0]
 80a0566:	f002 fcae 	bl	80a2ec6 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>

  // INPUT: 2 of 4
  FuzzyInput* LM_input = new FuzzyInput(2);
 80a056a:	2010      	movs	r0, #16
 80a056c:	f7ff fd95 	bl	80a009a <_Znwj>
 80a0570:	46b3      	mov	fp, r6
 80a0572:	4604      	mov	r4, r0
 80a0574:	b110      	cbz	r0, 80a057c <_Z10fuzzy_initv+0x104>
 80a0576:	2102      	movs	r1, #2
 80a0578:	f002 f955 	bl	80a2826 <_ZN10FuzzyInputC1Ei>
  FuzzySet* LM_low = new FuzzySet(low1, low2, low3, low4);
 80a057c:	2014      	movs	r0, #20
 80a057e:	f7ff fd8c 	bl	80a009a <_Znwj>
 80a0582:	4606      	mov	r6, r0
 80a0584:	b1c8      	cbz	r0, 80a05ba <_Z10fuzzy_initv+0x142>
 80a0586:	4b67      	ldr	r3, [pc, #412]	; (80a0724 <_Z10fuzzy_initv+0x2ac>)
 80a0588:	6818      	ldr	r0, [r3, #0]
 80a058a:	f004 fba7 	bl	80a4cdc <__aeabi_i2f>
 80a058e:	4a66      	ldr	r2, [pc, #408]	; (80a0728 <_Z10fuzzy_initv+0x2b0>)
 80a0590:	9003      	str	r0, [sp, #12]
 80a0592:	6810      	ldr	r0, [r2, #0]
 80a0594:	f004 fba2 	bl	80a4cdc <__aeabi_i2f>
 80a0598:	4a64      	ldr	r2, [pc, #400]	; (80a072c <_Z10fuzzy_initv+0x2b4>)
 80a059a:	4682      	mov	sl, r0
 80a059c:	6810      	ldr	r0, [r2, #0]
 80a059e:	f004 fb9d 	bl	80a4cdc <__aeabi_i2f>
 80a05a2:	4a63      	ldr	r2, [pc, #396]	; (80a0730 <_Z10fuzzy_initv+0x2b8>)
 80a05a4:	4681      	mov	r9, r0
 80a05a6:	6810      	ldr	r0, [r2, #0]
 80a05a8:	f004 fb98 	bl	80a4cdc <__aeabi_i2f>
 80a05ac:	9b03      	ldr	r3, [sp, #12]
 80a05ae:	9000      	str	r0, [sp, #0]
 80a05b0:	4652      	mov	r2, sl
 80a05b2:	4649      	mov	r1, r9
 80a05b4:	4630      	mov	r0, r6
 80a05b6:	f002 fbb2 	bl	80a2d1e <_ZN8FuzzySetC1Effff>
  FuzzySet* LM_med = new FuzzySet(med1, med2, med3, med4);
 80a05ba:	2014      	movs	r0, #20
 80a05bc:	f7ff fd6d 	bl	80a009a <_Znwj>
 80a05c0:	4681      	mov	r9, r0
 80a05c2:	b1c8      	cbz	r0, 80a05f8 <_Z10fuzzy_initv+0x180>
 80a05c4:	4b5b      	ldr	r3, [pc, #364]	; (80a0734 <_Z10fuzzy_initv+0x2bc>)
 80a05c6:	6818      	ldr	r0, [r3, #0]
 80a05c8:	f004 fb88 	bl	80a4cdc <__aeabi_i2f>
 80a05cc:	4a5a      	ldr	r2, [pc, #360]	; (80a0738 <_Z10fuzzy_initv+0x2c0>)
 80a05ce:	9004      	str	r0, [sp, #16]
 80a05d0:	6810      	ldr	r0, [r2, #0]
 80a05d2:	f004 fb83 	bl	80a4cdc <__aeabi_i2f>
 80a05d6:	4959      	ldr	r1, [pc, #356]	; (80a073c <_Z10fuzzy_initv+0x2c4>)
 80a05d8:	9003      	str	r0, [sp, #12]
 80a05da:	6808      	ldr	r0, [r1, #0]
 80a05dc:	f004 fb7e 	bl	80a4cdc <__aeabi_i2f>
 80a05e0:	4957      	ldr	r1, [pc, #348]	; (80a0740 <_Z10fuzzy_initv+0x2c8>)
 80a05e2:	4682      	mov	sl, r0
 80a05e4:	6808      	ldr	r0, [r1, #0]
 80a05e6:	f004 fb79 	bl	80a4cdc <__aeabi_i2f>
 80a05ea:	9b04      	ldr	r3, [sp, #16]
 80a05ec:	9000      	str	r0, [sp, #0]
 80a05ee:	9a03      	ldr	r2, [sp, #12]
 80a05f0:	4651      	mov	r1, sl
 80a05f2:	4648      	mov	r0, r9
 80a05f4:	f002 fb93 	bl	80a2d1e <_ZN8FuzzySetC1Effff>
  FuzzySet* LM_high = new FuzzySet(high1, high2, high3, high4);
 80a05f8:	2014      	movs	r0, #20
 80a05fa:	f7ff fd4e 	bl	80a009a <_Znwj>
 80a05fe:	4682      	mov	sl, r0
 80a0600:	b1c0      	cbz	r0, 80a0634 <_Z10fuzzy_initv+0x1bc>
 80a0602:	4b50      	ldr	r3, [pc, #320]	; (80a0744 <_Z10fuzzy_initv+0x2cc>)
 80a0604:	6818      	ldr	r0, [r3, #0]
 80a0606:	f004 fb69 	bl	80a4cdc <__aeabi_i2f>
 80a060a:	4a4f      	ldr	r2, [pc, #316]	; (80a0748 <_Z10fuzzy_initv+0x2d0>)
 80a060c:	9005      	str	r0, [sp, #20]
 80a060e:	6810      	ldr	r0, [r2, #0]
 80a0610:	f004 fb64 	bl	80a4cdc <__aeabi_i2f>
 80a0614:	494d      	ldr	r1, [pc, #308]	; (80a074c <_Z10fuzzy_initv+0x2d4>)
 80a0616:	9004      	str	r0, [sp, #16]
 80a0618:	6808      	ldr	r0, [r1, #0]
 80a061a:	f004 fb5f 	bl	80a4cdc <__aeabi_i2f>
 80a061e:	9003      	str	r0, [sp, #12]
 80a0620:	484b      	ldr	r0, [pc, #300]	; (80a0750 <_Z10fuzzy_initv+0x2d8>)
 80a0622:	6800      	ldr	r0, [r0, #0]
 80a0624:	f004 fb5a 	bl	80a4cdc <__aeabi_i2f>
 80a0628:	a903      	add	r1, sp, #12
 80a062a:	9000      	str	r0, [sp, #0]
 80a062c:	c90e      	ldmia	r1, {r1, r2, r3}
 80a062e:	4650      	mov	r0, sl
 80a0630:	f002 fb75 	bl	80a2d1e <_ZN8FuzzySetC1Effff>
  LM_input->addFuzzySet(LM_low);
 80a0634:	4631      	mov	r1, r6
 80a0636:	4620      	mov	r0, r4
 80a0638:	f002 f911 	bl	80a285e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  LM_input->addFuzzySet(LM_med);
 80a063c:	4649      	mov	r1, r9
 80a063e:	4620      	mov	r0, r4
 80a0640:	f002 f90d 	bl	80a285e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  LM_input->addFuzzySet(LM_high);
 80a0644:	4651      	mov	r1, sl
 80a0646:	4620      	mov	r0, r4
 80a0648:	f002 f909 	bl	80a285e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyInput(LM_input);
 80a064c:	4621      	mov	r1, r4
 80a064e:	f8db 0000 	ldr.w	r0, [fp]
 80a0652:	f002 fc38 	bl	80a2ec6 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>

  // INPUT: 3 of 4
  FuzzyInput* RM_input = new FuzzyInput(3);
 80a0656:	2010      	movs	r0, #16
 80a0658:	f7ff fd1f 	bl	80a009a <_Znwj>
 80a065c:	4604      	mov	r4, r0
 80a065e:	b110      	cbz	r0, 80a0666 <_Z10fuzzy_initv+0x1ee>
 80a0660:	2103      	movs	r1, #3
 80a0662:	f002 f8e0 	bl	80a2826 <_ZN10FuzzyInputC1Ei>
  FuzzySet* RM_low = new FuzzySet(low1, low2, low3, low4);
 80a0666:	2014      	movs	r0, #20
 80a0668:	f7ff fd17 	bl	80a009a <_Znwj>
 80a066c:	9003      	str	r0, [sp, #12]
 80a066e:	b1c8      	cbz	r0, 80a06a4 <_Z10fuzzy_initv+0x22c>
 80a0670:	4b2c      	ldr	r3, [pc, #176]	; (80a0724 <_Z10fuzzy_initv+0x2ac>)
 80a0672:	6818      	ldr	r0, [r3, #0]
 80a0674:	f004 fb32 	bl	80a4cdc <__aeabi_i2f>
 80a0678:	4a2b      	ldr	r2, [pc, #172]	; (80a0728 <_Z10fuzzy_initv+0x2b0>)
 80a067a:	9005      	str	r0, [sp, #20]
 80a067c:	6810      	ldr	r0, [r2, #0]
 80a067e:	f004 fb2d 	bl	80a4cdc <__aeabi_i2f>
 80a0682:	492a      	ldr	r1, [pc, #168]	; (80a072c <_Z10fuzzy_initv+0x2b4>)
 80a0684:	9004      	str	r0, [sp, #16]
 80a0686:	6808      	ldr	r0, [r1, #0]
 80a0688:	f004 fb28 	bl	80a4cdc <__aeabi_i2f>
 80a068c:	4928      	ldr	r1, [pc, #160]	; (80a0730 <_Z10fuzzy_initv+0x2b8>)
 80a068e:	4683      	mov	fp, r0
 80a0690:	6808      	ldr	r0, [r1, #0]
 80a0692:	f004 fb23 	bl	80a4cdc <__aeabi_i2f>
 80a0696:	9b05      	ldr	r3, [sp, #20]
 80a0698:	9000      	str	r0, [sp, #0]
 80a069a:	9a04      	ldr	r2, [sp, #16]
 80a069c:	4659      	mov	r1, fp
 80a069e:	9803      	ldr	r0, [sp, #12]
 80a06a0:	f002 fb3d 	bl	80a2d1e <_ZN8FuzzySetC1Effff>
  FuzzySet* RM_med = new FuzzySet(med1, med2, med3, med4);
 80a06a4:	2014      	movs	r0, #20
 80a06a6:	f7ff fcf8 	bl	80a009a <_Znwj>
 80a06aa:	9004      	str	r0, [sp, #16]
 80a06ac:	b1c8      	cbz	r0, 80a06e2 <_Z10fuzzy_initv+0x26a>
 80a06ae:	4b21      	ldr	r3, [pc, #132]	; (80a0734 <_Z10fuzzy_initv+0x2bc>)
 80a06b0:	6818      	ldr	r0, [r3, #0]
 80a06b2:	f004 fb13 	bl	80a4cdc <__aeabi_i2f>
 80a06b6:	4a20      	ldr	r2, [pc, #128]	; (80a0738 <_Z10fuzzy_initv+0x2c0>)
 80a06b8:	9006      	str	r0, [sp, #24]
 80a06ba:	6810      	ldr	r0, [r2, #0]
 80a06bc:	f004 fb0e 	bl	80a4cdc <__aeabi_i2f>
 80a06c0:	491e      	ldr	r1, [pc, #120]	; (80a073c <_Z10fuzzy_initv+0x2c4>)
 80a06c2:	9005      	str	r0, [sp, #20]
 80a06c4:	6808      	ldr	r0, [r1, #0]
 80a06c6:	f004 fb09 	bl	80a4cdc <__aeabi_i2f>
 80a06ca:	491d      	ldr	r1, [pc, #116]	; (80a0740 <_Z10fuzzy_initv+0x2c8>)
 80a06cc:	4683      	mov	fp, r0
 80a06ce:	6808      	ldr	r0, [r1, #0]
 80a06d0:	f004 fb04 	bl	80a4cdc <__aeabi_i2f>
 80a06d4:	9b06      	ldr	r3, [sp, #24]
 80a06d6:	9000      	str	r0, [sp, #0]
 80a06d8:	9a05      	ldr	r2, [sp, #20]
 80a06da:	4659      	mov	r1, fp
 80a06dc:	9804      	ldr	r0, [sp, #16]
 80a06de:	f002 fb1e 	bl	80a2d1e <_ZN8FuzzySetC1Effff>
  FuzzySet* RM_high = new FuzzySet(high1, high2, high3, high4);
 80a06e2:	2014      	movs	r0, #20
 80a06e4:	f7ff fcd9 	bl	80a009a <_Znwj>
 80a06e8:	9005      	str	r0, [sp, #20]
 80a06ea:	2800      	cmp	r0, #0
 80a06ec:	d034      	beq.n	80a0758 <_Z10fuzzy_initv+0x2e0>
 80a06ee:	4b15      	ldr	r3, [pc, #84]	; (80a0744 <_Z10fuzzy_initv+0x2cc>)
 80a06f0:	6818      	ldr	r0, [r3, #0]
 80a06f2:	f004 faf3 	bl	80a4cdc <__aeabi_i2f>
 80a06f6:	4a14      	ldr	r2, [pc, #80]	; (80a0748 <_Z10fuzzy_initv+0x2d0>)
 80a06f8:	9007      	str	r0, [sp, #28]
 80a06fa:	6810      	ldr	r0, [r2, #0]
 80a06fc:	f004 faee 	bl	80a4cdc <__aeabi_i2f>
 80a0700:	4912      	ldr	r1, [pc, #72]	; (80a074c <_Z10fuzzy_initv+0x2d4>)
 80a0702:	9006      	str	r0, [sp, #24]
 80a0704:	6808      	ldr	r0, [r1, #0]
 80a0706:	f004 fae9 	bl	80a4cdc <__aeabi_i2f>
 80a070a:	4911      	ldr	r1, [pc, #68]	; (80a0750 <_Z10fuzzy_initv+0x2d8>)
 80a070c:	4683      	mov	fp, r0
 80a070e:	6808      	ldr	r0, [r1, #0]
 80a0710:	f004 fae4 	bl	80a4cdc <__aeabi_i2f>
 80a0714:	9b07      	ldr	r3, [sp, #28]
 80a0716:	9000      	str	r0, [sp, #0]
 80a0718:	9a06      	ldr	r2, [sp, #24]
 80a071a:	4659      	mov	r1, fp
 80a071c:	9805      	ldr	r0, [sp, #20]
 80a071e:	f002 fafe 	bl	80a2d1e <_ZN8FuzzySetC1Effff>
 80a0722:	e019      	b.n	80a0758 <_Z10fuzzy_initv+0x2e0>
 80a0724:	20000310 	.word	0x20000310
 80a0728:	2000030c 	.word	0x2000030c
 80a072c:	20000308 	.word	0x20000308
 80a0730:	20000314 	.word	0x20000314
 80a0734:	20000354 	.word	0x20000354
 80a0738:	20000350 	.word	0x20000350
 80a073c:	2000034c 	.word	0x2000034c
 80a0740:	20000358 	.word	0x20000358
 80a0744:	20000330 	.word	0x20000330
 80a0748:	20000338 	.word	0x20000338
 80a074c:	20000420 	.word	0x20000420
 80a0750:	20000334 	.word	0x20000334
 80a0754:	200003a4 	.word	0x200003a4
  RM_input->addFuzzySet(RM_low);
 80a0758:	9903      	ldr	r1, [sp, #12]
 80a075a:	4620      	mov	r0, r4
 80a075c:	f002 f87f 	bl	80a285e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  RM_input->addFuzzySet(RM_med);
 80a0760:	9904      	ldr	r1, [sp, #16]
 80a0762:	4620      	mov	r0, r4
 80a0764:	f002 f87b 	bl	80a285e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  RM_input->addFuzzySet(RM_high);
 80a0768:	9905      	ldr	r1, [sp, #20]
 80a076a:	4620      	mov	r0, r4
 80a076c:	f002 f877 	bl	80a285e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyInput(RM_input);
 80a0770:	4ba9      	ldr	r3, [pc, #676]	; (80a0a18 <_Z10fuzzy_initv+0x5a0>)
 80a0772:	4621      	mov	r1, r4
 80a0774:	6818      	ldr	r0, [r3, #0]
 80a0776:	f002 fba6 	bl	80a2ec6 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>

  // INPUT: 4 of 4
  FuzzyInput* RR_input = new FuzzyInput(4);
 80a077a:	2010      	movs	r0, #16
 80a077c:	f7ff fc8d 	bl	80a009a <_Znwj>
 80a0780:	4683      	mov	fp, r0
 80a0782:	b110      	cbz	r0, 80a078a <_Z10fuzzy_initv+0x312>
 80a0784:	2104      	movs	r1, #4
 80a0786:	f002 f84e 	bl	80a2826 <_ZN10FuzzyInputC1Ei>
  FuzzySet* RR_low = new FuzzySet(low1, low2, low3, low4);
 80a078a:	2014      	movs	r0, #20
 80a078c:	f7ff fc85 	bl	80a009a <_Znwj>
 80a0790:	4604      	mov	r4, r0
 80a0792:	b1c0      	cbz	r0, 80a07c6 <_Z10fuzzy_initv+0x34e>
 80a0794:	4ba1      	ldr	r3, [pc, #644]	; (80a0a1c <_Z10fuzzy_initv+0x5a4>)
 80a0796:	6818      	ldr	r0, [r3, #0]
 80a0798:	f004 faa0 	bl	80a4cdc <__aeabi_i2f>
 80a079c:	4aa0      	ldr	r2, [pc, #640]	; (80a0a20 <_Z10fuzzy_initv+0x5a8>)
 80a079e:	9008      	str	r0, [sp, #32]
 80a07a0:	6810      	ldr	r0, [r2, #0]
 80a07a2:	f004 fa9b 	bl	80a4cdc <__aeabi_i2f>
 80a07a6:	499f      	ldr	r1, [pc, #636]	; (80a0a24 <_Z10fuzzy_initv+0x5ac>)
 80a07a8:	9007      	str	r0, [sp, #28]
 80a07aa:	6808      	ldr	r0, [r1, #0]
 80a07ac:	f004 fa96 	bl	80a4cdc <__aeabi_i2f>
 80a07b0:	9006      	str	r0, [sp, #24]
 80a07b2:	489d      	ldr	r0, [pc, #628]	; (80a0a28 <_Z10fuzzy_initv+0x5b0>)
 80a07b4:	6800      	ldr	r0, [r0, #0]
 80a07b6:	f004 fa91 	bl	80a4cdc <__aeabi_i2f>
 80a07ba:	a906      	add	r1, sp, #24
 80a07bc:	9000      	str	r0, [sp, #0]
 80a07be:	c90e      	ldmia	r1, {r1, r2, r3}
 80a07c0:	4620      	mov	r0, r4
 80a07c2:	f002 faac 	bl	80a2d1e <_ZN8FuzzySetC1Effff>
  FuzzySet* RR_med = new FuzzySet(med1, med2, med3, med4);
 80a07c6:	2014      	movs	r0, #20
 80a07c8:	f7ff fc67 	bl	80a009a <_Znwj>
 80a07cc:	9006      	str	r0, [sp, #24]
 80a07ce:	b1b8      	cbz	r0, 80a0800 <_Z10fuzzy_initv+0x388>
 80a07d0:	4b96      	ldr	r3, [pc, #600]	; (80a0a2c <_Z10fuzzy_initv+0x5b4>)
 80a07d2:	6818      	ldr	r0, [r3, #0]
 80a07d4:	f004 fa82 	bl	80a4cdc <__aeabi_i2f>
 80a07d8:	4a95      	ldr	r2, [pc, #596]	; (80a0a30 <_Z10fuzzy_initv+0x5b8>)
 80a07da:	9009      	str	r0, [sp, #36]	; 0x24
 80a07dc:	6810      	ldr	r0, [r2, #0]
 80a07de:	f004 fa7d 	bl	80a4cdc <__aeabi_i2f>
 80a07e2:	4994      	ldr	r1, [pc, #592]	; (80a0a34 <_Z10fuzzy_initv+0x5bc>)
 80a07e4:	9008      	str	r0, [sp, #32]
 80a07e6:	6808      	ldr	r0, [r1, #0]
 80a07e8:	f004 fa78 	bl	80a4cdc <__aeabi_i2f>
 80a07ec:	9007      	str	r0, [sp, #28]
 80a07ee:	4892      	ldr	r0, [pc, #584]	; (80a0a38 <_Z10fuzzy_initv+0x5c0>)
 80a07f0:	6800      	ldr	r0, [r0, #0]
 80a07f2:	f004 fa73 	bl	80a4cdc <__aeabi_i2f>
 80a07f6:	9000      	str	r0, [sp, #0]
 80a07f8:	a806      	add	r0, sp, #24
 80a07fa:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80a07fc:	f002 fa8f 	bl	80a2d1e <_ZN8FuzzySetC1Effff>
  FuzzySet* RR_high = new FuzzySet(high1, high2, high3, high4);
 80a0800:	2014      	movs	r0, #20
 80a0802:	f7ff fc4a 	bl	80a009a <_Znwj>
 80a0806:	9007      	str	r0, [sp, #28]
 80a0808:	b1b8      	cbz	r0, 80a083a <_Z10fuzzy_initv+0x3c2>
 80a080a:	4b8c      	ldr	r3, [pc, #560]	; (80a0a3c <_Z10fuzzy_initv+0x5c4>)
 80a080c:	6818      	ldr	r0, [r3, #0]
 80a080e:	f004 fa65 	bl	80a4cdc <__aeabi_i2f>
 80a0812:	4a8b      	ldr	r2, [pc, #556]	; (80a0a40 <_Z10fuzzy_initv+0x5c8>)
 80a0814:	900a      	str	r0, [sp, #40]	; 0x28
 80a0816:	6810      	ldr	r0, [r2, #0]
 80a0818:	f004 fa60 	bl	80a4cdc <__aeabi_i2f>
 80a081c:	4989      	ldr	r1, [pc, #548]	; (80a0a44 <_Z10fuzzy_initv+0x5cc>)
 80a081e:	9009      	str	r0, [sp, #36]	; 0x24
 80a0820:	6808      	ldr	r0, [r1, #0]
 80a0822:	f004 fa5b 	bl	80a4cdc <__aeabi_i2f>
 80a0826:	9008      	str	r0, [sp, #32]
 80a0828:	4887      	ldr	r0, [pc, #540]	; (80a0a48 <_Z10fuzzy_initv+0x5d0>)
 80a082a:	6800      	ldr	r0, [r0, #0]
 80a082c:	f004 fa56 	bl	80a4cdc <__aeabi_i2f>
 80a0830:	9000      	str	r0, [sp, #0]
 80a0832:	a807      	add	r0, sp, #28
 80a0834:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80a0836:	f002 fa72 	bl	80a2d1e <_ZN8FuzzySetC1Effff>
  RR_input->addFuzzySet(RR_low);
 80a083a:	4621      	mov	r1, r4
 80a083c:	4658      	mov	r0, fp
 80a083e:	f002 f80e 	bl	80a285e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  RR_input->addFuzzySet(RR_med);
 80a0842:	9906      	ldr	r1, [sp, #24]
 80a0844:	4658      	mov	r0, fp
 80a0846:	f002 f80a 	bl	80a285e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  RR_input->addFuzzySet(RR_high);
 80a084a:	9907      	ldr	r1, [sp, #28]
 80a084c:	4658      	mov	r0, fp
 80a084e:	f002 f806 	bl	80a285e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyInput(RR_input);
 80a0852:	4b71      	ldr	r3, [pc, #452]	; (80a0a18 <_Z10fuzzy_initv+0x5a0>)
 80a0854:	4659      	mov	r1, fp
 80a0856:	6818      	ldr	r0, [r3, #0]
 80a0858:	f002 fb35 	bl	80a2ec6 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>

  // OUTPUT: 1 of 1 (Test 1 *********************************)
  FuzzyOutput* drive_state = new FuzzyOutput(1);
 80a085c:	2018      	movs	r0, #24
 80a085e:	f7ff fc1c 	bl	80a009a <_Znwj>
 80a0862:	4683      	mov	fp, r0
 80a0864:	b110      	cbz	r0, 80a086c <_Z10fuzzy_initv+0x3f4>
 80a0866:	2101      	movs	r1, #1
 80a0868:	f002 f815 	bl	80a2896 <_ZN11FuzzyOutputC1Ei>
  FuzzySet* full_left = new FuzzySet(0, 5, 15, 20);
 80a086c:	2014      	movs	r0, #20
 80a086e:	f7ff fc14 	bl	80a009a <_Znwj>
 80a0872:	900f      	str	r0, [sp, #60]	; 0x3c
 80a0874:	b130      	cbz	r0, 80a0884 <_Z10fuzzy_initv+0x40c>
 80a0876:	4b75      	ldr	r3, [pc, #468]	; (80a0a4c <_Z10fuzzy_initv+0x5d4>)
 80a0878:	4a75      	ldr	r2, [pc, #468]	; (80a0a50 <_Z10fuzzy_initv+0x5d8>)
 80a087a:	9300      	str	r3, [sp, #0]
 80a087c:	2100      	movs	r1, #0
 80a087e:	4b75      	ldr	r3, [pc, #468]	; (80a0a54 <_Z10fuzzy_initv+0x5dc>)
 80a0880:	f002 fa4d 	bl	80a2d1e <_ZN8FuzzySetC1Effff>
  FuzzySet* small_left = new FuzzySet(25, 30, 35, 40);
 80a0884:	2014      	movs	r0, #20
 80a0886:	f7ff fc08 	bl	80a009a <_Znwj>
 80a088a:	9010      	str	r0, [sp, #64]	; 0x40
 80a088c:	b130      	cbz	r0, 80a089c <_Z10fuzzy_initv+0x424>
 80a088e:	4b72      	ldr	r3, [pc, #456]	; (80a0a58 <_Z10fuzzy_initv+0x5e0>)
 80a0890:	4a72      	ldr	r2, [pc, #456]	; (80a0a5c <_Z10fuzzy_initv+0x5e4>)
 80a0892:	9300      	str	r3, [sp, #0]
 80a0894:	4972      	ldr	r1, [pc, #456]	; (80a0a60 <_Z10fuzzy_initv+0x5e8>)
 80a0896:	4b73      	ldr	r3, [pc, #460]	; (80a0a64 <_Z10fuzzy_initv+0x5ec>)
 80a0898:	f002 fa41 	bl	80a2d1e <_ZN8FuzzySetC1Effff>
  FuzzySet* center = new FuzzySet(45, 50, 55, 60);
 80a089c:	2014      	movs	r0, #20
 80a089e:	f7ff fbfc 	bl	80a009a <_Znwj>
 80a08a2:	9011      	str	r0, [sp, #68]	; 0x44
 80a08a4:	b130      	cbz	r0, 80a08b4 <_Z10fuzzy_initv+0x43c>
 80a08a6:	4b70      	ldr	r3, [pc, #448]	; (80a0a68 <_Z10fuzzy_initv+0x5f0>)
 80a08a8:	4a70      	ldr	r2, [pc, #448]	; (80a0a6c <_Z10fuzzy_initv+0x5f4>)
 80a08aa:	9300      	str	r3, [sp, #0]
 80a08ac:	4970      	ldr	r1, [pc, #448]	; (80a0a70 <_Z10fuzzy_initv+0x5f8>)
 80a08ae:	4b71      	ldr	r3, [pc, #452]	; (80a0a74 <_Z10fuzzy_initv+0x5fc>)
 80a08b0:	f002 fa35 	bl	80a2d1e <_ZN8FuzzySetC1Effff>
  FuzzySet* small_right = new FuzzySet(65, 70, 75, 80);
 80a08b4:	2014      	movs	r0, #20
 80a08b6:	f7ff fbf0 	bl	80a009a <_Znwj>
 80a08ba:	9012      	str	r0, [sp, #72]	; 0x48
 80a08bc:	b130      	cbz	r0, 80a08cc <_Z10fuzzy_initv+0x454>
 80a08be:	4b6e      	ldr	r3, [pc, #440]	; (80a0a78 <_Z10fuzzy_initv+0x600>)
 80a08c0:	4a6e      	ldr	r2, [pc, #440]	; (80a0a7c <_Z10fuzzy_initv+0x604>)
 80a08c2:	9300      	str	r3, [sp, #0]
 80a08c4:	496e      	ldr	r1, [pc, #440]	; (80a0a80 <_Z10fuzzy_initv+0x608>)
 80a08c6:	4b6f      	ldr	r3, [pc, #444]	; (80a0a84 <_Z10fuzzy_initv+0x60c>)
 80a08c8:	f002 fa29 	bl	80a2d1e <_ZN8FuzzySetC1Effff>
  FuzzySet* full_right = new FuzzySet(85, 90, 95, 100);
 80a08cc:	2014      	movs	r0, #20
 80a08ce:	f7ff fbe4 	bl	80a009a <_Znwj>
 80a08d2:	9013      	str	r0, [sp, #76]	; 0x4c
 80a08d4:	b130      	cbz	r0, 80a08e4 <_Z10fuzzy_initv+0x46c>
 80a08d6:	4b6c      	ldr	r3, [pc, #432]	; (80a0a88 <_Z10fuzzy_initv+0x610>)
 80a08d8:	4a6c      	ldr	r2, [pc, #432]	; (80a0a8c <_Z10fuzzy_initv+0x614>)
 80a08da:	9300      	str	r3, [sp, #0]
 80a08dc:	496c      	ldr	r1, [pc, #432]	; (80a0a90 <_Z10fuzzy_initv+0x618>)
 80a08de:	4b6d      	ldr	r3, [pc, #436]	; (80a0a94 <_Z10fuzzy_initv+0x61c>)
 80a08e0:	f002 fa1d 	bl	80a2d1e <_ZN8FuzzySetC1Effff>
  drive_state->addFuzzySet(full_left);
 80a08e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a08e6:	4658      	mov	r0, fp
 80a08e8:	f001 ffb9 	bl	80a285e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  drive_state->addFuzzySet(small_left);
 80a08ec:	9910      	ldr	r1, [sp, #64]	; 0x40
 80a08ee:	4658      	mov	r0, fp
 80a08f0:	f001 ffb5 	bl	80a285e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  drive_state->addFuzzySet(center);
 80a08f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a08f6:	4658      	mov	r0, fp
 80a08f8:	f001 ffb1 	bl	80a285e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  drive_state->addFuzzySet(small_right);
 80a08fc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80a08fe:	4658      	mov	r0, fp
 80a0900:	f001 ffad 	bl	80a285e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  drive_state->addFuzzySet(full_right);
 80a0904:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a0906:	4658      	mov	r0, fp
 80a0908:	f001 ffa9 	bl	80a285e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyOutput(drive_state);
 80a090c:	4b42      	ldr	r3, [pc, #264]	; (80a0a18 <_Z10fuzzy_initv+0x5a0>)
 80a090e:	4659      	mov	r1, fp
 80a0910:	6818      	ldr	r0, [r3, #0]
 80a0912:	f002 faeb 	bl	80a2eec <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput>

  // Building Left FuzzyRuleAntecedents (ALL COMBINATIONS)
  FuzzyRuleAntecedent* left_low_high = new FuzzyRuleAntecedent();
 80a0916:	2018      	movs	r0, #24
 80a0918:	f7ff fbbf 	bl	80a009a <_Znwj>
 80a091c:	900e      	str	r0, [sp, #56]	; 0x38
 80a091e:	b108      	cbz	r0, 80a0924 <_Z10fuzzy_initv+0x4ac>
 80a0920:	f002 fb5c 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  left_low_high->joinWithAND(LL_low, LM_high);
 80a0924:	4652      	mov	r2, sl
 80a0926:	4629      	mov	r1, r5
 80a0928:	980e      	ldr	r0, [sp, #56]	; 0x38
 80a092a:	f002 fb5f 	bl	80a2fec <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_med_high = new FuzzyRuleAntecedent();
 80a092e:	2018      	movs	r0, #24
 80a0930:	f7ff fbb3 	bl	80a009a <_Znwj>
 80a0934:	9009      	str	r0, [sp, #36]	; 0x24
 80a0936:	b108      	cbz	r0, 80a093c <_Z10fuzzy_initv+0x4c4>
 80a0938:	f002 fb50 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  left_med_high->joinWithAND(LL_med, LM_high);
 80a093c:	4652      	mov	r2, sl
 80a093e:	4641      	mov	r1, r8
 80a0940:	9809      	ldr	r0, [sp, #36]	; 0x24
 80a0942:	f002 fb53 	bl	80a2fec <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_low_med = new FuzzyRuleAntecedent();
 80a0946:	2018      	movs	r0, #24
 80a0948:	f7ff fba7 	bl	80a009a <_Znwj>
 80a094c:	900a      	str	r0, [sp, #40]	; 0x28
 80a094e:	b108      	cbz	r0, 80a0954 <_Z10fuzzy_initv+0x4dc>
 80a0950:	f002 fb44 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  left_low_med->joinWithAND(LL_low, LM_med);
 80a0954:	464a      	mov	r2, r9
 80a0956:	4629      	mov	r1, r5
 80a0958:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a095a:	f002 fb47 	bl	80a2fec <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_med_med = new FuzzyRuleAntecedent();
 80a095e:	2018      	movs	r0, #24
 80a0960:	f7ff fb9b 	bl	80a009a <_Znwj>
 80a0964:	9008      	str	r0, [sp, #32]
 80a0966:	b108      	cbz	r0, 80a096c <_Z10fuzzy_initv+0x4f4>
 80a0968:	f002 fb38 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  left_med_med->joinWithAND(LL_med, LM_med);
 80a096c:	464a      	mov	r2, r9
 80a096e:	4641      	mov	r1, r8
 80a0970:	9808      	ldr	r0, [sp, #32]
 80a0972:	f002 fb3b 	bl	80a2fec <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_high_high = new FuzzyRuleAntecedent();
 80a0976:	2018      	movs	r0, #24
 80a0978:	f7ff fb8f 	bl	80a009a <_Znwj>
 80a097c:	900d      	str	r0, [sp, #52]	; 0x34
 80a097e:	b108      	cbz	r0, 80a0984 <_Z10fuzzy_initv+0x50c>
 80a0980:	f002 fb2c 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  left_high_high->joinWithAND(LL_high, LM_high);
 80a0984:	4652      	mov	r2, sl
 80a0986:	4639      	mov	r1, r7
 80a0988:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a098a:	f002 fb2f 	bl	80a2fec <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_high_med = new FuzzyRuleAntecedent();
 80a098e:	2018      	movs	r0, #24
 80a0990:	f7ff fb83 	bl	80a009a <_Znwj>
 80a0994:	9014      	str	r0, [sp, #80]	; 0x50
 80a0996:	b108      	cbz	r0, 80a099c <_Z10fuzzy_initv+0x524>
 80a0998:	f002 fb20 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  left_high_med->joinWithAND(LL_high, LM_med);
 80a099c:	464a      	mov	r2, r9
 80a099e:	4639      	mov	r1, r7
 80a09a0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80a09a2:	f002 fb23 	bl	80a2fec <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_med_low = new FuzzyRuleAntecedent();
 80a09a6:	2018      	movs	r0, #24
 80a09a8:	f7ff fb77 	bl	80a009a <_Znwj>
 80a09ac:	9015      	str	r0, [sp, #84]	; 0x54
 80a09ae:	b108      	cbz	r0, 80a09b4 <_Z10fuzzy_initv+0x53c>
 80a09b0:	f002 fb14 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  left_med_low->joinWithAND(LL_med, LM_low);
 80a09b4:	4632      	mov	r2, r6
 80a09b6:	4641      	mov	r1, r8
 80a09b8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80a09ba:	f002 fb17 	bl	80a2fec <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_high_low = new FuzzyRuleAntecedent();
 80a09be:	2018      	movs	r0, #24
 80a09c0:	f7ff fb6b 	bl	80a009a <_Znwj>
 80a09c4:	9016      	str	r0, [sp, #88]	; 0x58
 80a09c6:	b108      	cbz	r0, 80a09cc <_Z10fuzzy_initv+0x554>
 80a09c8:	f002 fb08 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  left_high_low->joinWithAND(LL_high, LM_low);
 80a09cc:	4639      	mov	r1, r7
 80a09ce:	4632      	mov	r2, r6
 80a09d0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80a09d2:	f002 fb0b 	bl	80a2fec <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_low_low = new FuzzyRuleAntecedent();
 80a09d6:	2018      	movs	r0, #24
 80a09d8:	f7ff fb5f 	bl	80a009a <_Znwj>
 80a09dc:	4607      	mov	r7, r0
 80a09de:	b108      	cbz	r0, 80a09e4 <_Z10fuzzy_initv+0x56c>
 80a09e0:	f002 fafc 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  left_low_low->joinWithAND(LL_low, LM_low);
 80a09e4:	4632      	mov	r2, r6
 80a09e6:	4629      	mov	r1, r5
 80a09e8:	4638      	mov	r0, r7
 80a09ea:	f002 faff 	bl	80a2fec <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>

  // Building Right FuzzyRuleAntecedents
  FuzzyRuleAntecedent* right_high_low = new FuzzyRuleAntecedent();
 80a09ee:	2018      	movs	r0, #24
 80a09f0:	f7ff fb53 	bl	80a009a <_Znwj>
 80a09f4:	4606      	mov	r6, r0
 80a09f6:	b108      	cbz	r0, 80a09fc <_Z10fuzzy_initv+0x584>
 80a09f8:	f002 faf0 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  right_high_low->joinWithAND(RM_high, RR_low);
 80a09fc:	4622      	mov	r2, r4
 80a09fe:	9905      	ldr	r1, [sp, #20]
 80a0a00:	4630      	mov	r0, r6
 80a0a02:	f002 faf3 	bl	80a2fec <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_high_med = new FuzzyRuleAntecedent();
 80a0a06:	2018      	movs	r0, #24
 80a0a08:	f7ff fb47 	bl	80a009a <_Znwj>
 80a0a0c:	900b      	str	r0, [sp, #44]	; 0x2c
 80a0a0e:	2800      	cmp	r0, #0
 80a0a10:	d042      	beq.n	80a0a98 <_Z10fuzzy_initv+0x620>
 80a0a12:	f002 fae3 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
 80a0a16:	e03f      	b.n	80a0a98 <_Z10fuzzy_initv+0x620>
 80a0a18:	200003a4 	.word	0x200003a4
 80a0a1c:	20000310 	.word	0x20000310
 80a0a20:	2000030c 	.word	0x2000030c
 80a0a24:	20000308 	.word	0x20000308
 80a0a28:	20000314 	.word	0x20000314
 80a0a2c:	20000354 	.word	0x20000354
 80a0a30:	20000350 	.word	0x20000350
 80a0a34:	2000034c 	.word	0x2000034c
 80a0a38:	20000358 	.word	0x20000358
 80a0a3c:	20000330 	.word	0x20000330
 80a0a40:	20000338 	.word	0x20000338
 80a0a44:	20000420 	.word	0x20000420
 80a0a48:	20000334 	.word	0x20000334
 80a0a4c:	41a00000 	.word	0x41a00000
 80a0a50:	40a00000 	.word	0x40a00000
 80a0a54:	41700000 	.word	0x41700000
 80a0a58:	42200000 	.word	0x42200000
 80a0a5c:	41f00000 	.word	0x41f00000
 80a0a60:	41c80000 	.word	0x41c80000
 80a0a64:	420c0000 	.word	0x420c0000
 80a0a68:	42700000 	.word	0x42700000
 80a0a6c:	42480000 	.word	0x42480000
 80a0a70:	42340000 	.word	0x42340000
 80a0a74:	425c0000 	.word	0x425c0000
 80a0a78:	42a00000 	.word	0x42a00000
 80a0a7c:	428c0000 	.word	0x428c0000
 80a0a80:	42820000 	.word	0x42820000
 80a0a84:	42960000 	.word	0x42960000
 80a0a88:	42c80000 	.word	0x42c80000
 80a0a8c:	42b40000 	.word	0x42b40000
 80a0a90:	42aa0000 	.word	0x42aa0000
 80a0a94:	42be0000 	.word	0x42be0000
  right_high_med->joinWithAND(RM_high, RR_med);
 80a0a98:	9a06      	ldr	r2, [sp, #24]
 80a0a9a:	9905      	ldr	r1, [sp, #20]
 80a0a9c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a0a9e:	f002 faa5 	bl	80a2fec <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_med_low = new FuzzyRuleAntecedent();
 80a0aa2:	2018      	movs	r0, #24
 80a0aa4:	f7ff faf9 	bl	80a009a <_Znwj>
 80a0aa8:	900c      	str	r0, [sp, #48]	; 0x30
 80a0aaa:	b108      	cbz	r0, 80a0ab0 <_Z10fuzzy_initv+0x638>
 80a0aac:	f002 fa96 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  right_med_low->joinWithAND(RM_med, RR_low);
 80a0ab0:	4622      	mov	r2, r4
 80a0ab2:	9904      	ldr	r1, [sp, #16]
 80a0ab4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80a0ab6:	f002 fa99 	bl	80a2fec <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_low_med = new FuzzyRuleAntecedent();
 80a0aba:	2018      	movs	r0, #24
 80a0abc:	f7ff faed 	bl	80a009a <_Znwj>
 80a0ac0:	9017      	str	r0, [sp, #92]	; 0x5c
 80a0ac2:	b108      	cbz	r0, 80a0ac8 <_Z10fuzzy_initv+0x650>
 80a0ac4:	f002 fa8a 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  right_low_med->joinWithAND(RM_low, RR_med);
 80a0ac8:	9a06      	ldr	r2, [sp, #24]
 80a0aca:	9903      	ldr	r1, [sp, #12]
 80a0acc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80a0ace:	f002 fa8d 	bl	80a2fec <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_low_low = new FuzzyRuleAntecedent();
 80a0ad2:	2018      	movs	r0, #24
 80a0ad4:	f7ff fae1 	bl	80a009a <_Znwj>
 80a0ad8:	4605      	mov	r5, r0
 80a0ada:	b108      	cbz	r0, 80a0ae0 <_Z10fuzzy_initv+0x668>
 80a0adc:	f002 fa7e 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  right_low_low->joinWithAND(RM_low, RR_low);
 80a0ae0:	4622      	mov	r2, r4
 80a0ae2:	9903      	ldr	r1, [sp, #12]
 80a0ae4:	4628      	mov	r0, r5
 80a0ae6:	f002 fa81 	bl	80a2fec <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_med_med = new FuzzyRuleAntecedent();
 80a0aea:	2018      	movs	r0, #24
 80a0aec:	f7ff fad5 	bl	80a009a <_Znwj>
 80a0af0:	4683      	mov	fp, r0
 80a0af2:	b108      	cbz	r0, 80a0af8 <_Z10fuzzy_initv+0x680>
 80a0af4:	f002 fa72 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  right_med_med->joinWithAND(RM_med, RR_med);
 80a0af8:	9a06      	ldr	r2, [sp, #24]
 80a0afa:	9904      	ldr	r1, [sp, #16]
 80a0afc:	4658      	mov	r0, fp
 80a0afe:	f002 fa75 	bl	80a2fec <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_low_high = new FuzzyRuleAntecedent();
 80a0b02:	2018      	movs	r0, #24
 80a0b04:	f7ff fac9 	bl	80a009a <_Znwj>
 80a0b08:	9006      	str	r0, [sp, #24]
 80a0b0a:	b108      	cbz	r0, 80a0b10 <_Z10fuzzy_initv+0x698>
 80a0b0c:	f002 fa66 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  right_low_high->joinWithAND(RM_low, RR_high);
 80a0b10:	9a07      	ldr	r2, [sp, #28]
 80a0b12:	9903      	ldr	r1, [sp, #12]
 80a0b14:	9806      	ldr	r0, [sp, #24]
 80a0b16:	f002 fa69 	bl	80a2fec <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_high_high = new FuzzyRuleAntecedent();
 80a0b1a:	2018      	movs	r0, #24
 80a0b1c:	f7ff fabd 	bl	80a009a <_Znwj>
 80a0b20:	9003      	str	r0, [sp, #12]
 80a0b22:	b108      	cbz	r0, 80a0b28 <_Z10fuzzy_initv+0x6b0>
 80a0b24:	f002 fa5a 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  right_high_high->joinWithAND(RM_high, RR_high);
 80a0b28:	9a07      	ldr	r2, [sp, #28]
 80a0b2a:	9905      	ldr	r1, [sp, #20]
 80a0b2c:	9803      	ldr	r0, [sp, #12]
 80a0b2e:	f002 fa5d 	bl	80a2fec <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_med_high = new FuzzyRuleAntecedent();
 80a0b32:	2018      	movs	r0, #24
 80a0b34:	f7ff fab1 	bl	80a009a <_Znwj>
 80a0b38:	9005      	str	r0, [sp, #20]
 80a0b3a:	b108      	cbz	r0, 80a0b40 <_Z10fuzzy_initv+0x6c8>
 80a0b3c:	f002 fa4e 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  right_med_high->joinWithAND(RM_med, RR_high);
 80a0b40:	9a07      	ldr	r2, [sp, #28]
 80a0b42:	9904      	ldr	r1, [sp, #16]
 80a0b44:	9805      	ldr	r0, [sp, #20]
 80a0b46:	f002 fa51 	bl	80a2fec <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>

  // Building drive FuzzyRuleConsequents (Test 1 *********************************)
  // NOTE: you can add multiple outputs to 1 consequent
  FuzzyRuleConsequent* drive_center = new FuzzyRuleConsequent();
 80a0b4a:	2008      	movs	r0, #8
 80a0b4c:	f7ff faa5 	bl	80a009a <_Znwj>
 80a0b50:	4681      	mov	r9, r0
 80a0b52:	b108      	cbz	r0, 80a0b58 <_Z10fuzzy_initv+0x6e0>
 80a0b54:	f002 f98c 	bl	80a2e70 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_center->addOutput(center);
 80a0b58:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a0b5a:	4648      	mov	r0, r9
 80a0b5c:	f002 f98c 	bl	80a2e78 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  FuzzyRuleConsequent* drive_small_left = new FuzzyRuleConsequent();
 80a0b60:	2008      	movs	r0, #8
 80a0b62:	f7ff fa9a 	bl	80a009a <_Znwj>
 80a0b66:	4680      	mov	r8, r0
 80a0b68:	b108      	cbz	r0, 80a0b6e <_Z10fuzzy_initv+0x6f6>
 80a0b6a:	f002 f981 	bl	80a2e70 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_small_left->addOutput(small_left);  
 80a0b6e:	9910      	ldr	r1, [sp, #64]	; 0x40
 80a0b70:	4640      	mov	r0, r8
 80a0b72:	f002 f981 	bl	80a2e78 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  FuzzyRuleConsequent* drive_full_left = new FuzzyRuleConsequent();
 80a0b76:	2008      	movs	r0, #8
 80a0b78:	f7ff fa8f 	bl	80a009a <_Znwj>
 80a0b7c:	9004      	str	r0, [sp, #16]
 80a0b7e:	b108      	cbz	r0, 80a0b84 <_Z10fuzzy_initv+0x70c>
 80a0b80:	f002 f976 	bl	80a2e70 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_full_left->addOutput(full_left);
 80a0b84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a0b86:	9804      	ldr	r0, [sp, #16]
 80a0b88:	f002 f976 	bl	80a2e78 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  FuzzyRuleConsequent* drive_full_right = new FuzzyRuleConsequent();
 80a0b8c:	2008      	movs	r0, #8
 80a0b8e:	f7ff fa84 	bl	80a009a <_Znwj>
 80a0b92:	9007      	str	r0, [sp, #28]
 80a0b94:	b108      	cbz	r0, 80a0b9a <_Z10fuzzy_initv+0x722>
 80a0b96:	f002 f96b 	bl	80a2e70 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_full_right->addOutput(full_right);
 80a0b9a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a0b9c:	9807      	ldr	r0, [sp, #28]
 80a0b9e:	f002 f96b 	bl	80a2e78 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  FuzzyRuleConsequent* drive_small_right = new FuzzyRuleConsequent();
 80a0ba2:	2008      	movs	r0, #8
 80a0ba4:	f7ff fa79 	bl	80a009a <_Znwj>
 80a0ba8:	4604      	mov	r4, r0
 80a0baa:	b108      	cbz	r0, 80a0bb0 <_Z10fuzzy_initv+0x738>
 80a0bac:	f002 f960 	bl	80a2e70 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_small_right->addOutput(small_right);
 80a0bb0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80a0bb2:	4620      	mov	r0, r4
 80a0bb4:	f002 f960 	bl	80a2e78 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>

  // Building Complete FuzzyRuleAntedecents (Test 1 *********************************)
  // Combining (2) Left and (2) Right antecedents, merging with (1) drive consequent
  // And adding the FuzzyRules
  FuzzyRuleAntecedent* LHHL = new FuzzyRuleAntecedent();
 80a0bb8:	2018      	movs	r0, #24
 80a0bba:	f7ff fa6e 	bl	80a009a <_Znwj>
 80a0bbe:	4682      	mov	sl, r0
 80a0bc0:	b108      	cbz	r0, 80a0bc6 <_Z10fuzzy_initv+0x74e>
 80a0bc2:	f002 fa0b 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  LHHL->joinWithAND(left_low_high, right_high_low);
 80a0bc6:	4632      	mov	r2, r6
 80a0bc8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80a0bca:	4650      	mov	r0, sl
 80a0bcc:	f002 fa1d 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr1 = new FuzzyRule(1, LHHL, drive_center);
 80a0bd0:	2010      	movs	r0, #16
 80a0bd2:	f7ff fa62 	bl	80a009a <_Znwj>
 80a0bd6:	900f      	str	r0, [sp, #60]	; 0x3c
 80a0bd8:	b120      	cbz	r0, 80a0be4 <_Z10fuzzy_initv+0x76c>
 80a0bda:	464b      	mov	r3, r9
 80a0bdc:	4652      	mov	r2, sl
 80a0bde:	2101      	movs	r1, #1
 80a0be0:	f001 fbec 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr1);
 80a0be4:	4bb5      	ldr	r3, [pc, #724]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0be6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a0be8:	6818      	ldr	r0, [r3, #0]
 80a0bea:	f002 f997 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MHHL = new FuzzyRuleAntecedent();
 80a0bee:	2018      	movs	r0, #24
 80a0bf0:	f7ff fa53 	bl	80a009a <_Znwj>
 80a0bf4:	4682      	mov	sl, r0
 80a0bf6:	b108      	cbz	r0, 80a0bfc <_Z10fuzzy_initv+0x784>
 80a0bf8:	f002 f9f0 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  MHHL->joinWithAND(left_med_high, right_high_low);
 80a0bfc:	4632      	mov	r2, r6
 80a0bfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0c00:	4650      	mov	r0, sl
 80a0c02:	f002 fa02 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr2 = new FuzzyRule(2, MHHL, drive_center);
 80a0c06:	2010      	movs	r0, #16
 80a0c08:	f7ff fa47 	bl	80a009a <_Znwj>
 80a0c0c:	4606      	mov	r6, r0
 80a0c0e:	b120      	cbz	r0, 80a0c1a <_Z10fuzzy_initv+0x7a2>
 80a0c10:	464b      	mov	r3, r9
 80a0c12:	4652      	mov	r2, sl
 80a0c14:	2102      	movs	r1, #2
 80a0c16:	f001 fbd1 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr2); 
 80a0c1a:	4ba8      	ldr	r3, [pc, #672]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0c1c:	4631      	mov	r1, r6
 80a0c1e:	6818      	ldr	r0, [r3, #0]
 80a0c20:	f002 f97c 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LHHM = new FuzzyRuleAntecedent();
 80a0c24:	2018      	movs	r0, #24
 80a0c26:	f7ff fa38 	bl	80a009a <_Znwj>
 80a0c2a:	4606      	mov	r6, r0
 80a0c2c:	b108      	cbz	r0, 80a0c32 <_Z10fuzzy_initv+0x7ba>
 80a0c2e:	f002 f9d5 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  LHHM->joinWithAND(left_low_high, right_high_med);
 80a0c32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a0c34:	990e      	ldr	r1, [sp, #56]	; 0x38
 80a0c36:	4630      	mov	r0, r6
 80a0c38:	f002 f9e7 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr3 = new FuzzyRule(3, LHHM, drive_center);
 80a0c3c:	2010      	movs	r0, #16
 80a0c3e:	f7ff fa2c 	bl	80a009a <_Znwj>
 80a0c42:	4682      	mov	sl, r0
 80a0c44:	b120      	cbz	r0, 80a0c50 <_Z10fuzzy_initv+0x7d8>
 80a0c46:	464b      	mov	r3, r9
 80a0c48:	4632      	mov	r2, r6
 80a0c4a:	2103      	movs	r1, #3
 80a0c4c:	f001 fbb6 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr3);
 80a0c50:	4b9a      	ldr	r3, [pc, #616]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0c52:	4651      	mov	r1, sl
 80a0c54:	6818      	ldr	r0, [r3, #0]
 80a0c56:	f002 f961 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMML = new FuzzyRuleAntecedent();
 80a0c5a:	2018      	movs	r0, #24
 80a0c5c:	f7ff fa1d 	bl	80a009a <_Znwj>
 80a0c60:	4606      	mov	r6, r0
 80a0c62:	b108      	cbz	r0, 80a0c68 <_Z10fuzzy_initv+0x7f0>
 80a0c64:	f002 f9ba 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  LMML->joinWithAND(left_low_med, right_med_low);
 80a0c68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a0c6a:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a0c6c:	4630      	mov	r0, r6
 80a0c6e:	f002 f9cc 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr4 = new FuzzyRule(4, LMML, drive_center);
 80a0c72:	2010      	movs	r0, #16
 80a0c74:	f7ff fa11 	bl	80a009a <_Znwj>
 80a0c78:	4682      	mov	sl, r0
 80a0c7a:	b120      	cbz	r0, 80a0c86 <_Z10fuzzy_initv+0x80e>
 80a0c7c:	464b      	mov	r3, r9
 80a0c7e:	4632      	mov	r2, r6
 80a0c80:	2104      	movs	r1, #4
 80a0c82:	f001 fb9b 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr4);
 80a0c86:	4b8d      	ldr	r3, [pc, #564]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0c88:	4651      	mov	r1, sl
 80a0c8a:	6818      	ldr	r0, [r3, #0]
 80a0c8c:	f002 f946 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMMM = new FuzzyRuleAntecedent();
 80a0c90:	2018      	movs	r0, #24
 80a0c92:	f7ff fa02 	bl	80a009a <_Znwj>
 80a0c96:	4606      	mov	r6, r0
 80a0c98:	b108      	cbz	r0, 80a0c9e <_Z10fuzzy_initv+0x826>
 80a0c9a:	f002 f99f 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  MMMM->joinWithAND(left_med_med, right_med_med);
 80a0c9e:	465a      	mov	r2, fp
 80a0ca0:	9908      	ldr	r1, [sp, #32]
 80a0ca2:	4630      	mov	r0, r6
 80a0ca4:	f002 f9b1 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr5 = new FuzzyRule(5, MMMM, drive_center);
 80a0ca8:	2010      	movs	r0, #16
 80a0caa:	f7ff f9f6 	bl	80a009a <_Znwj>
 80a0cae:	4682      	mov	sl, r0
 80a0cb0:	b120      	cbz	r0, 80a0cbc <_Z10fuzzy_initv+0x844>
 80a0cb2:	464b      	mov	r3, r9
 80a0cb4:	4632      	mov	r2, r6
 80a0cb6:	2105      	movs	r1, #5
 80a0cb8:	f001 fb80 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr5);
 80a0cbc:	4b7f      	ldr	r3, [pc, #508]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0cbe:	4651      	mov	r1, sl
 80a0cc0:	6818      	ldr	r0, [r3, #0]
 80a0cc2:	f002 f92b 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HHLL = new FuzzyRuleAntecedent();
 80a0cc6:	2018      	movs	r0, #24
 80a0cc8:	f7ff f9e7 	bl	80a009a <_Znwj>
 80a0ccc:	4606      	mov	r6, r0
 80a0cce:	b108      	cbz	r0, 80a0cd4 <_Z10fuzzy_initv+0x85c>
 80a0cd0:	f002 f984 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  HHLL->joinWithAND(left_high_high, right_low_low);
 80a0cd4:	462a      	mov	r2, r5
 80a0cd6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a0cd8:	4630      	mov	r0, r6
 80a0cda:	f002 f996 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr6 = new FuzzyRule(6, HHLL, drive_small_left);
 80a0cde:	2010      	movs	r0, #16
 80a0ce0:	f7ff f9db 	bl	80a009a <_Znwj>
 80a0ce4:	4682      	mov	sl, r0
 80a0ce6:	b120      	cbz	r0, 80a0cf2 <_Z10fuzzy_initv+0x87a>
 80a0ce8:	4643      	mov	r3, r8
 80a0cea:	4632      	mov	r2, r6
 80a0cec:	2106      	movs	r1, #6
 80a0cee:	f001 fb65 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr6);
 80a0cf2:	4b72      	ldr	r3, [pc, #456]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0cf4:	4651      	mov	r1, sl
 80a0cf6:	6818      	ldr	r0, [r3, #0]
 80a0cf8:	f002 f910 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HHML = new FuzzyRuleAntecedent();
 80a0cfc:	2018      	movs	r0, #24
 80a0cfe:	f7ff f9cc 	bl	80a009a <_Znwj>
 80a0d02:	4606      	mov	r6, r0
 80a0d04:	b108      	cbz	r0, 80a0d0a <_Z10fuzzy_initv+0x892>
 80a0d06:	f002 f969 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  HHML->joinWithAND(left_high_high, right_med_low);
 80a0d0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a0d0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a0d0e:	4630      	mov	r0, r6
 80a0d10:	f002 f97b 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr7 = new FuzzyRule(6, HHML, drive_small_left);
 80a0d14:	2010      	movs	r0, #16
 80a0d16:	f7ff f9c0 	bl	80a009a <_Znwj>
 80a0d1a:	4682      	mov	sl, r0
 80a0d1c:	b120      	cbz	r0, 80a0d28 <_Z10fuzzy_initv+0x8b0>
 80a0d1e:	4643      	mov	r3, r8
 80a0d20:	4632      	mov	r2, r6
 80a0d22:	2106      	movs	r1, #6
 80a0d24:	f001 fb4a 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr7);
 80a0d28:	4b64      	ldr	r3, [pc, #400]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0d2a:	4651      	mov	r1, sl
 80a0d2c:	6818      	ldr	r0, [r3, #0]
 80a0d2e:	f002 f8f5 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HHMM = new FuzzyRuleAntecedent();
 80a0d32:	2018      	movs	r0, #24
 80a0d34:	f7ff f9b1 	bl	80a009a <_Znwj>
 80a0d38:	4606      	mov	r6, r0
 80a0d3a:	b108      	cbz	r0, 80a0d40 <_Z10fuzzy_initv+0x8c8>
 80a0d3c:	f002 f94e 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  HHMM->joinWithAND(left_high_high, right_med_med);
 80a0d40:	465a      	mov	r2, fp
 80a0d42:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a0d44:	4630      	mov	r0, r6
 80a0d46:	f002 f960 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr8 = new FuzzyRule(8, HHMM, drive_small_left);
 80a0d4a:	2010      	movs	r0, #16
 80a0d4c:	f7ff f9a5 	bl	80a009a <_Znwj>
 80a0d50:	4682      	mov	sl, r0
 80a0d52:	b120      	cbz	r0, 80a0d5e <_Z10fuzzy_initv+0x8e6>
 80a0d54:	4643      	mov	r3, r8
 80a0d56:	4632      	mov	r2, r6
 80a0d58:	2108      	movs	r1, #8
 80a0d5a:	f001 fb2f 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr8);
 80a0d5e:	4b57      	ldr	r3, [pc, #348]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0d60:	4651      	mov	r1, sl
 80a0d62:	6818      	ldr	r0, [r3, #0]
 80a0d64:	f002 f8da 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MHMM = new FuzzyRuleAntecedent();
 80a0d68:	2018      	movs	r0, #24
 80a0d6a:	f7ff f996 	bl	80a009a <_Znwj>
 80a0d6e:	4606      	mov	r6, r0
 80a0d70:	b108      	cbz	r0, 80a0d76 <_Z10fuzzy_initv+0x8fe>
 80a0d72:	f002 f933 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  MHMM->joinWithAND(left_med_high, right_med_med);
 80a0d76:	465a      	mov	r2, fp
 80a0d78:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0d7a:	4630      	mov	r0, r6
 80a0d7c:	f002 f945 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr9 = new FuzzyRule(9, MHMM, drive_small_left);
 80a0d80:	2010      	movs	r0, #16
 80a0d82:	f7ff f98a 	bl	80a009a <_Znwj>
 80a0d86:	4682      	mov	sl, r0
 80a0d88:	b120      	cbz	r0, 80a0d94 <_Z10fuzzy_initv+0x91c>
 80a0d8a:	4643      	mov	r3, r8
 80a0d8c:	4632      	mov	r2, r6
 80a0d8e:	2109      	movs	r1, #9
 80a0d90:	f001 fb14 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr9);
 80a0d94:	4b49      	ldr	r3, [pc, #292]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0d96:	4651      	mov	r1, sl
 80a0d98:	6818      	ldr	r0, [r3, #0]
 80a0d9a:	f002 f8bf 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MHML = new FuzzyRuleAntecedent();
 80a0d9e:	2018      	movs	r0, #24
 80a0da0:	f7ff f97b 	bl	80a009a <_Znwj>
 80a0da4:	4606      	mov	r6, r0
 80a0da6:	b108      	cbz	r0, 80a0dac <_Z10fuzzy_initv+0x934>
 80a0da8:	f002 f918 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  MHML->joinWithAND(left_med_high, right_med_low);
 80a0dac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a0dae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0db0:	4630      	mov	r0, r6
 80a0db2:	f002 f92a 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr10 = new FuzzyRule(10, MHML, drive_small_left);
 80a0db6:	2010      	movs	r0, #16
 80a0db8:	f7ff f96f 	bl	80a009a <_Znwj>
 80a0dbc:	4682      	mov	sl, r0
 80a0dbe:	b120      	cbz	r0, 80a0dca <_Z10fuzzy_initv+0x952>
 80a0dc0:	4643      	mov	r3, r8
 80a0dc2:	4632      	mov	r2, r6
 80a0dc4:	210a      	movs	r1, #10
 80a0dc6:	f001 faf9 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr10);
 80a0dca:	4b3c      	ldr	r3, [pc, #240]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0dcc:	4651      	mov	r1, sl
 80a0dce:	6818      	ldr	r0, [r3, #0]
 80a0dd0:	f002 f8a4 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MHLL = new FuzzyRuleAntecedent();
 80a0dd4:	2018      	movs	r0, #24
 80a0dd6:	f7ff f960 	bl	80a009a <_Znwj>
 80a0dda:	4606      	mov	r6, r0
 80a0ddc:	b108      	cbz	r0, 80a0de2 <_Z10fuzzy_initv+0x96a>
 80a0dde:	f002 f8fd 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  MHLL->joinWithAND(left_med_high, right_low_low);
 80a0de2:	462a      	mov	r2, r5
 80a0de4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0de6:	4630      	mov	r0, r6
 80a0de8:	f002 f90f 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr11 = new FuzzyRule(11, MHLL, drive_small_left);
 80a0dec:	2010      	movs	r0, #16
 80a0dee:	f7ff f954 	bl	80a009a <_Znwj>
 80a0df2:	4682      	mov	sl, r0
 80a0df4:	b120      	cbz	r0, 80a0e00 <_Z10fuzzy_initv+0x988>
 80a0df6:	4643      	mov	r3, r8
 80a0df8:	4632      	mov	r2, r6
 80a0dfa:	210b      	movs	r1, #11
 80a0dfc:	f001 fade 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr11);
 80a0e00:	4b2e      	ldr	r3, [pc, #184]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0e02:	4651      	mov	r1, sl
 80a0e04:	6818      	ldr	r0, [r3, #0]
 80a0e06:	f002 f889 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMML = new FuzzyRuleAntecedent();
 80a0e0a:	2018      	movs	r0, #24
 80a0e0c:	f7ff f945 	bl	80a009a <_Znwj>
 80a0e10:	4606      	mov	r6, r0
 80a0e12:	b108      	cbz	r0, 80a0e18 <_Z10fuzzy_initv+0x9a0>
 80a0e14:	f002 f8e2 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  MMML->joinWithAND(left_med_med, right_med_low);
 80a0e18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a0e1a:	9908      	ldr	r1, [sp, #32]
 80a0e1c:	4630      	mov	r0, r6
 80a0e1e:	f002 f8f4 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr12 = new FuzzyRule(12, MMML, drive_small_left);
 80a0e22:	2010      	movs	r0, #16
 80a0e24:	f7ff f939 	bl	80a009a <_Znwj>
 80a0e28:	4682      	mov	sl, r0
 80a0e2a:	b120      	cbz	r0, 80a0e36 <_Z10fuzzy_initv+0x9be>
 80a0e2c:	4643      	mov	r3, r8
 80a0e2e:	4632      	mov	r2, r6
 80a0e30:	210c      	movs	r1, #12
 80a0e32:	f001 fac3 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr12);
 80a0e36:	4b21      	ldr	r3, [pc, #132]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0e38:	4651      	mov	r1, sl
 80a0e3a:	6818      	ldr	r0, [r3, #0]
 80a0e3c:	f002 f86e 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMLL = new FuzzyRuleAntecedent();
 80a0e40:	2018      	movs	r0, #24
 80a0e42:	f7ff f92a 	bl	80a009a <_Znwj>
 80a0e46:	4606      	mov	r6, r0
 80a0e48:	b108      	cbz	r0, 80a0e4e <_Z10fuzzy_initv+0x9d6>
 80a0e4a:	f002 f8c7 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  MMLL->joinWithAND(left_med_med, right_low_low);
 80a0e4e:	462a      	mov	r2, r5
 80a0e50:	9908      	ldr	r1, [sp, #32]
 80a0e52:	4630      	mov	r0, r6
 80a0e54:	f002 f8d9 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr13 = new FuzzyRule(13, MMLL, drive_small_left);
 80a0e58:	2010      	movs	r0, #16
 80a0e5a:	f7ff f91e 	bl	80a009a <_Znwj>
 80a0e5e:	4682      	mov	sl, r0
 80a0e60:	b120      	cbz	r0, 80a0e6c <_Z10fuzzy_initv+0x9f4>
 80a0e62:	4643      	mov	r3, r8
 80a0e64:	4632      	mov	r2, r6
 80a0e66:	210d      	movs	r1, #13
 80a0e68:	f001 faa8 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr13);
 80a0e6c:	4b13      	ldr	r3, [pc, #76]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0e6e:	4651      	mov	r1, sl
 80a0e70:	6818      	ldr	r0, [r3, #0]
 80a0e72:	f002 f853 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HMLL = new FuzzyRuleAntecedent();
 80a0e76:	2018      	movs	r0, #24
 80a0e78:	f7ff f90f 	bl	80a009a <_Znwj>
 80a0e7c:	4606      	mov	r6, r0
 80a0e7e:	b108      	cbz	r0, 80a0e84 <_Z10fuzzy_initv+0xa0c>
 80a0e80:	f002 f8ac 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  HMLL->joinWithAND(left_high_med, right_low_low);
 80a0e84:	462a      	mov	r2, r5
 80a0e86:	9914      	ldr	r1, [sp, #80]	; 0x50
 80a0e88:	4630      	mov	r0, r6
 80a0e8a:	f002 f8be 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr14 = new FuzzyRule(14, HMLL, drive_small_left);
 80a0e8e:	2010      	movs	r0, #16
 80a0e90:	f7ff f903 	bl	80a009a <_Znwj>
 80a0e94:	4682      	mov	sl, r0
 80a0e96:	b120      	cbz	r0, 80a0ea2 <_Z10fuzzy_initv+0xa2a>
 80a0e98:	4643      	mov	r3, r8
 80a0e9a:	4632      	mov	r2, r6
 80a0e9c:	210e      	movs	r1, #14
 80a0e9e:	f001 fa8d 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr14);
 80a0ea2:	4b06      	ldr	r3, [pc, #24]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0ea4:	4651      	mov	r1, sl
 80a0ea6:	6818      	ldr	r0, [r3, #0]
 80a0ea8:	f002 f838 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MLLL = new FuzzyRuleAntecedent();
 80a0eac:	2018      	movs	r0, #24
 80a0eae:	f7ff f8f4 	bl	80a009a <_Znwj>
 80a0eb2:	4606      	mov	r6, r0
 80a0eb4:	b120      	cbz	r0, 80a0ec0 <_Z10fuzzy_initv+0xa48>
 80a0eb6:	f002 f891 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
 80a0eba:	e001      	b.n	80a0ec0 <_Z10fuzzy_initv+0xa48>
 80a0ebc:	200003a4 	.word	0x200003a4
  MLLL->joinWithAND(left_med_low, right_low_low);
 80a0ec0:	462a      	mov	r2, r5
 80a0ec2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80a0ec4:	4630      	mov	r0, r6
 80a0ec6:	f002 f8a0 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr15 = new FuzzyRule(15, MLLL, drive_small_left);
 80a0eca:	2010      	movs	r0, #16
 80a0ecc:	f7ff f8e5 	bl	80a009a <_Znwj>
 80a0ed0:	4682      	mov	sl, r0
 80a0ed2:	b120      	cbz	r0, 80a0ede <_Z10fuzzy_initv+0xa66>
 80a0ed4:	4643      	mov	r3, r8
 80a0ed6:	4632      	mov	r2, r6
 80a0ed8:	210f      	movs	r1, #15
 80a0eda:	f001 fa6f 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr15);
 80a0ede:	4bae      	ldr	r3, [pc, #696]	; (80a1198 <_Z10fuzzy_initv+0xd20>)
 80a0ee0:	4651      	mov	r1, sl
 80a0ee2:	6818      	ldr	r0, [r3, #0]
 80a0ee4:	f002 f81a 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HLLL = new FuzzyRuleAntecedent();
 80a0ee8:	2018      	movs	r0, #24
 80a0eea:	f7ff f8d6 	bl	80a009a <_Znwj>
 80a0eee:	4606      	mov	r6, r0
 80a0ef0:	b108      	cbz	r0, 80a0ef6 <_Z10fuzzy_initv+0xa7e>
 80a0ef2:	f002 f873 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  HLLL->joinWithAND(left_high_low, right_low_low);
 80a0ef6:	462a      	mov	r2, r5
 80a0ef8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80a0efa:	4630      	mov	r0, r6
 80a0efc:	f002 f885 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr16 = new FuzzyRule(16, HLLL, drive_full_left);
 80a0f00:	2010      	movs	r0, #16
 80a0f02:	f7ff f8ca 	bl	80a009a <_Znwj>
 80a0f06:	4680      	mov	r8, r0
 80a0f08:	b120      	cbz	r0, 80a0f14 <_Z10fuzzy_initv+0xa9c>
 80a0f0a:	9b04      	ldr	r3, [sp, #16]
 80a0f0c:	4632      	mov	r2, r6
 80a0f0e:	2110      	movs	r1, #16
 80a0f10:	f001 fa54 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr16);
 80a0f14:	4ea0      	ldr	r6, [pc, #640]	; (80a1198 <_Z10fuzzy_initv+0xd20>)
 80a0f16:	4641      	mov	r1, r8
 80a0f18:	6830      	ldr	r0, [r6, #0]
 80a0f1a:	f001 ffff 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLLH = new FuzzyRuleAntecedent();
 80a0f1e:	2018      	movs	r0, #24
 80a0f20:	f7ff f8bb 	bl	80a009a <_Znwj>
 80a0f24:	4680      	mov	r8, r0
 80a0f26:	b108      	cbz	r0, 80a0f2c <_Z10fuzzy_initv+0xab4>
 80a0f28:	f002 f858 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  LLLH->joinWithAND(left_low_low, right_low_high);
 80a0f2c:	9a06      	ldr	r2, [sp, #24]
 80a0f2e:	4639      	mov	r1, r7
 80a0f30:	4640      	mov	r0, r8
 80a0f32:	f002 f86a 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr17 = new FuzzyRule(17, LLLH, drive_full_right);
 80a0f36:	2010      	movs	r0, #16
 80a0f38:	f7ff f8af 	bl	80a009a <_Znwj>
 80a0f3c:	4682      	mov	sl, r0
 80a0f3e:	b120      	cbz	r0, 80a0f4a <_Z10fuzzy_initv+0xad2>
 80a0f40:	9b07      	ldr	r3, [sp, #28]
 80a0f42:	4642      	mov	r2, r8
 80a0f44:	2111      	movs	r1, #17
 80a0f46:	f001 fa39 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr17);
 80a0f4a:	4651      	mov	r1, sl
 80a0f4c:	6830      	ldr	r0, [r6, #0]
 80a0f4e:	f001 ffe5 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLHH = new FuzzyRuleAntecedent();
 80a0f52:	2018      	movs	r0, #24
 80a0f54:	f7ff f8a1 	bl	80a009a <_Znwj>
 80a0f58:	4606      	mov	r6, r0
 80a0f5a:	b108      	cbz	r0, 80a0f60 <_Z10fuzzy_initv+0xae8>
 80a0f5c:	f002 f83e 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  LLHH->joinWithAND(left_low_low, right_high_high);
 80a0f60:	9a03      	ldr	r2, [sp, #12]
 80a0f62:	4639      	mov	r1, r7
 80a0f64:	4630      	mov	r0, r6
 80a0f66:	f002 f850 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr18 = new FuzzyRule(18, LLHH, drive_small_right);
 80a0f6a:	2010      	movs	r0, #16
 80a0f6c:	f7ff f895 	bl	80a009a <_Znwj>
 80a0f70:	4680      	mov	r8, r0
 80a0f72:	b120      	cbz	r0, 80a0f7e <_Z10fuzzy_initv+0xb06>
 80a0f74:	4623      	mov	r3, r4
 80a0f76:	4632      	mov	r2, r6
 80a0f78:	2112      	movs	r1, #18
 80a0f7a:	f001 fa1f 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr18);
 80a0f7e:	4e86      	ldr	r6, [pc, #536]	; (80a1198 <_Z10fuzzy_initv+0xd20>)
 80a0f80:	4641      	mov	r1, r8
 80a0f82:	6830      	ldr	r0, [r6, #0]
 80a0f84:	f001 ffca 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMHH = new FuzzyRuleAntecedent();
 80a0f88:	2018      	movs	r0, #24
 80a0f8a:	f7ff f886 	bl	80a009a <_Znwj>
 80a0f8e:	4680      	mov	r8, r0
 80a0f90:	b108      	cbz	r0, 80a0f96 <_Z10fuzzy_initv+0xb1e>
 80a0f92:	f002 f823 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  LMHH->joinWithAND(left_low_med, right_high_high);
 80a0f96:	9a03      	ldr	r2, [sp, #12]
 80a0f98:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a0f9a:	4640      	mov	r0, r8
 80a0f9c:	f002 f835 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr19 = new FuzzyRule(19, LMHH, drive_small_right);
 80a0fa0:	2010      	movs	r0, #16
 80a0fa2:	f7ff f87a 	bl	80a009a <_Znwj>
 80a0fa6:	4682      	mov	sl, r0
 80a0fa8:	b120      	cbz	r0, 80a0fb4 <_Z10fuzzy_initv+0xb3c>
 80a0faa:	4623      	mov	r3, r4
 80a0fac:	4642      	mov	r2, r8
 80a0fae:	2113      	movs	r1, #19
 80a0fb0:	f001 fa04 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr19);
 80a0fb4:	4651      	mov	r1, sl
 80a0fb6:	6830      	ldr	r0, [r6, #0]
 80a0fb8:	f001 ffb0 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMHH = new FuzzyRuleAntecedent();
 80a0fbc:	2018      	movs	r0, #24
 80a0fbe:	f7ff f86c 	bl	80a009a <_Znwj>
 80a0fc2:	4606      	mov	r6, r0
 80a0fc4:	b108      	cbz	r0, 80a0fca <_Z10fuzzy_initv+0xb52>
 80a0fc6:	f002 f809 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  MMHH->joinWithAND(left_med_med, right_high_high);
 80a0fca:	9a03      	ldr	r2, [sp, #12]
 80a0fcc:	9908      	ldr	r1, [sp, #32]
 80a0fce:	4630      	mov	r0, r6
 80a0fd0:	f002 f81b 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr20 = new FuzzyRule(20, MMHH, drive_small_right);
 80a0fd4:	2010      	movs	r0, #16
 80a0fd6:	f7ff f860 	bl	80a009a <_Znwj>
 80a0fda:	4680      	mov	r8, r0
 80a0fdc:	b120      	cbz	r0, 80a0fe8 <_Z10fuzzy_initv+0xb70>
 80a0fde:	4623      	mov	r3, r4
 80a0fe0:	4632      	mov	r2, r6
 80a0fe2:	2114      	movs	r1, #20
 80a0fe4:	f001 f9ea 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr20);
 80a0fe8:	4e6b      	ldr	r6, [pc, #428]	; (80a1198 <_Z10fuzzy_initv+0xd20>)
 80a0fea:	4641      	mov	r1, r8
 80a0fec:	6830      	ldr	r0, [r6, #0]
 80a0fee:	f001 ff95 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMHM = new FuzzyRuleAntecedent();
 80a0ff2:	2018      	movs	r0, #24
 80a0ff4:	f7ff f851 	bl	80a009a <_Znwj>
 80a0ff8:	4680      	mov	r8, r0
 80a0ffa:	b108      	cbz	r0, 80a1000 <_Z10fuzzy_initv+0xb88>
 80a0ffc:	f001 ffee 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  MMHM->joinWithAND(left_med_med, right_high_med);
 80a1000:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a1002:	9908      	ldr	r1, [sp, #32]
 80a1004:	4640      	mov	r0, r8
 80a1006:	f002 f800 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr21 = new FuzzyRule(21, MMHM, drive_small_right);
 80a100a:	2010      	movs	r0, #16
 80a100c:	f7ff f845 	bl	80a009a <_Znwj>
 80a1010:	4682      	mov	sl, r0
 80a1012:	b120      	cbz	r0, 80a101e <_Z10fuzzy_initv+0xba6>
 80a1014:	4623      	mov	r3, r4
 80a1016:	4642      	mov	r2, r8
 80a1018:	2115      	movs	r1, #21
 80a101a:	f001 f9cf 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr21);
 80a101e:	4651      	mov	r1, sl
 80a1020:	6830      	ldr	r0, [r6, #0]
 80a1022:	f001 ff7b 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMHM = new FuzzyRuleAntecedent();
 80a1026:	2018      	movs	r0, #24
 80a1028:	f7ff f837 	bl	80a009a <_Znwj>
 80a102c:	4680      	mov	r8, r0
 80a102e:	b108      	cbz	r0, 80a1034 <_Z10fuzzy_initv+0xbbc>
 80a1030:	f001 ffd4 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  LMHM->joinWithAND(left_low_med, right_high_med);
 80a1034:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a1036:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a1038:	4640      	mov	r0, r8
 80a103a:	f001 ffe6 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr22 = new FuzzyRule(22, LMHM, drive_small_right);
 80a103e:	2010      	movs	r0, #16
 80a1040:	f7ff f82b 	bl	80a009a <_Znwj>
 80a1044:	4682      	mov	sl, r0
 80a1046:	b120      	cbz	r0, 80a1052 <_Z10fuzzy_initv+0xbda>
 80a1048:	4623      	mov	r3, r4
 80a104a:	4642      	mov	r2, r8
 80a104c:	2116      	movs	r1, #22
 80a104e:	f001 f9b5 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr22);
 80a1052:	4651      	mov	r1, sl
 80a1054:	6830      	ldr	r0, [r6, #0]
 80a1056:	f001 ff61 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLHM = new FuzzyRuleAntecedent();
 80a105a:	2018      	movs	r0, #24
 80a105c:	f7ff f81d 	bl	80a009a <_Znwj>
 80a1060:	4680      	mov	r8, r0
 80a1062:	b108      	cbz	r0, 80a1068 <_Z10fuzzy_initv+0xbf0>
 80a1064:	f001 ffba 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  LLHM->joinWithAND(left_low_low, right_high_med);
 80a1068:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a106a:	4639      	mov	r1, r7
 80a106c:	4640      	mov	r0, r8
 80a106e:	f001 ffcc 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr23 = new FuzzyRule(23, LLHM, drive_small_right);
 80a1072:	2010      	movs	r0, #16
 80a1074:	f7ff f811 	bl	80a009a <_Znwj>
 80a1078:	4682      	mov	sl, r0
 80a107a:	b120      	cbz	r0, 80a1086 <_Z10fuzzy_initv+0xc0e>
 80a107c:	4623      	mov	r3, r4
 80a107e:	4642      	mov	r2, r8
 80a1080:	2117      	movs	r1, #23
 80a1082:	f001 f99b 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr23);
 80a1086:	4651      	mov	r1, sl
 80a1088:	6830      	ldr	r0, [r6, #0]
 80a108a:	f001 ff47 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMMM = new FuzzyRuleAntecedent();
 80a108e:	2018      	movs	r0, #24
 80a1090:	f7ff f803 	bl	80a009a <_Znwj>
 80a1094:	4680      	mov	r8, r0
 80a1096:	b108      	cbz	r0, 80a109c <_Z10fuzzy_initv+0xc24>
 80a1098:	f001 ffa0 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  LMMM->joinWithAND(left_low_med, right_med_med);
 80a109c:	465a      	mov	r2, fp
 80a109e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a10a0:	4640      	mov	r0, r8
 80a10a2:	f001 ffb2 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr24 = new FuzzyRule(24, LMMM, drive_small_right);
 80a10a6:	2010      	movs	r0, #16
 80a10a8:	f7fe fff7 	bl	80a009a <_Znwj>
 80a10ac:	4682      	mov	sl, r0
 80a10ae:	b120      	cbz	r0, 80a10ba <_Z10fuzzy_initv+0xc42>
 80a10b0:	4623      	mov	r3, r4
 80a10b2:	4642      	mov	r2, r8
 80a10b4:	2118      	movs	r1, #24
 80a10b6:	f001 f981 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr24);
 80a10ba:	4651      	mov	r1, sl
 80a10bc:	6830      	ldr	r0, [r6, #0]
 80a10be:	f001 ff2d 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLMM = new FuzzyRuleAntecedent();
 80a10c2:	2018      	movs	r0, #24
 80a10c4:	f7fe ffe9 	bl	80a009a <_Znwj>
 80a10c8:	4680      	mov	r8, r0
 80a10ca:	b108      	cbz	r0, 80a10d0 <_Z10fuzzy_initv+0xc58>
 80a10cc:	f001 ff86 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  LLMM->joinWithAND(left_low_low, right_med_med);
 80a10d0:	465a      	mov	r2, fp
 80a10d2:	4639      	mov	r1, r7
 80a10d4:	4640      	mov	r0, r8
 80a10d6:	f001 ff98 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr25 = new FuzzyRule(25, LLMM, drive_small_right);
 80a10da:	2010      	movs	r0, #16
 80a10dc:	f7fe ffdd 	bl	80a009a <_Znwj>
 80a10e0:	4682      	mov	sl, r0
 80a10e2:	b120      	cbz	r0, 80a10ee <_Z10fuzzy_initv+0xc76>
 80a10e4:	4623      	mov	r3, r4
 80a10e6:	4642      	mov	r2, r8
 80a10e8:	2119      	movs	r1, #25
 80a10ea:	f001 f967 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr25);
 80a10ee:	4651      	mov	r1, sl
 80a10f0:	6830      	ldr	r0, [r6, #0]
 80a10f2:	f001 ff13 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLMH = new FuzzyRuleAntecedent();
 80a10f6:	2018      	movs	r0, #24
 80a10f8:	f7fe ffcf 	bl	80a009a <_Znwj>
 80a10fc:	4680      	mov	r8, r0
 80a10fe:	b108      	cbz	r0, 80a1104 <_Z10fuzzy_initv+0xc8c>
 80a1100:	f001 ff6c 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  LLMH->joinWithAND(left_low_low, right_med_high);
 80a1104:	9a05      	ldr	r2, [sp, #20]
 80a1106:	4639      	mov	r1, r7
 80a1108:	4640      	mov	r0, r8
 80a110a:	f001 ff7e 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr26 = new FuzzyRule(26, LLMH, drive_small_right);
 80a110e:	2010      	movs	r0, #16
 80a1110:	f7fe ffc3 	bl	80a009a <_Znwj>
 80a1114:	4682      	mov	sl, r0
 80a1116:	b120      	cbz	r0, 80a1122 <_Z10fuzzy_initv+0xcaa>
 80a1118:	4623      	mov	r3, r4
 80a111a:	4642      	mov	r2, r8
 80a111c:	211a      	movs	r1, #26
 80a111e:	f001 f94d 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr26);
 80a1122:	4651      	mov	r1, sl
 80a1124:	6830      	ldr	r0, [r6, #0]
 80a1126:	f001 fef9 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLLM = new FuzzyRuleAntecedent();
 80a112a:	2018      	movs	r0, #24
 80a112c:	f7fe ffb5 	bl	80a009a <_Znwj>
 80a1130:	4680      	mov	r8, r0
 80a1132:	b108      	cbz	r0, 80a1138 <_Z10fuzzy_initv+0xcc0>
 80a1134:	f001 ff52 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  LLLM->joinWithAND(left_low_low, right_low_med);
 80a1138:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a113a:	4639      	mov	r1, r7
 80a113c:	4640      	mov	r0, r8
 80a113e:	f001 ff64 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr27 = new FuzzyRule(27, LLLM, drive_small_right);
 80a1142:	2010      	movs	r0, #16
 80a1144:	f7fe ffa9 	bl	80a009a <_Znwj>
 80a1148:	4682      	mov	sl, r0
 80a114a:	b120      	cbz	r0, 80a1156 <_Z10fuzzy_initv+0xcde>
 80a114c:	4623      	mov	r3, r4
 80a114e:	4642      	mov	r2, r8
 80a1150:	211b      	movs	r1, #27
 80a1152:	f001 f933 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr27);
 80a1156:	4651      	mov	r1, sl
 80a1158:	6830      	ldr	r0, [r6, #0]
 80a115a:	f001 fedf 	bl	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLLL = new FuzzyRuleAntecedent();
 80a115e:	2018      	movs	r0, #24
 80a1160:	f7fe ff9b 	bl	80a009a <_Znwj>
 80a1164:	4604      	mov	r4, r0
 80a1166:	b108      	cbz	r0, 80a116c <_Z10fuzzy_initv+0xcf4>
 80a1168:	f001 ff38 	bl	80a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>
  LLLL->joinWithAND(left_low_low, right_low_low);
 80a116c:	462a      	mov	r2, r5
 80a116e:	4639      	mov	r1, r7
 80a1170:	4620      	mov	r0, r4
 80a1172:	f001 ff4a 	bl	80a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr28 = new FuzzyRule(28, LLLL, drive_center);	// should it be search?
 80a1176:	2010      	movs	r0, #16
 80a1178:	f7fe ff8f 	bl	80a009a <_Znwj>
 80a117c:	4605      	mov	r5, r0
 80a117e:	b120      	cbz	r0, 80a118a <_Z10fuzzy_initv+0xd12>
 80a1180:	464b      	mov	r3, r9
 80a1182:	4622      	mov	r2, r4
 80a1184:	211c      	movs	r1, #28
 80a1186:	f001 f919 	bl	80a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr28);
 80a118a:	4629      	mov	r1, r5
 80a118c:	6830      	ldr	r0, [r6, #0]
}
 80a118e:	b019      	add	sp, #100	; 0x64
 80a1190:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fuzzy->addFuzzyRule(fr27);

  FuzzyRuleAntecedent* LLLL = new FuzzyRuleAntecedent();
  LLLL->joinWithAND(left_low_low, right_low_low);
  FuzzyRule* fr28 = new FuzzyRule(28, LLLL, drive_center);	// should it be search?
  fuzzy->addFuzzyRule(fr28);
 80a1194:	f001 bec2 	b.w	80a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>
 80a1198:	200003a4 	.word	0x200003a4

080a119c <setup>:
}

void setup() {
 80a119c:	b508      	push	{r3, lr}
	tof_init();			// ToF and I2C
 80a119e:	f7fe ffd9 	bl	80a0154 <_Z8tof_initv>
	accel_init();		// accelerometer
 80a11a2:	f7ff f88b 	bl	80a02bc <_Z10accel_initv>
	others_init();		// line, remote, esc, ***printing***
 80a11a6:	f7ff f89b 	bl	80a02e0 <_Z11others_initv>
	interrupt_init();	// interrupts for lines and remote
 80a11aa:	f7ff f8cd 	bl	80a0348 <_Z14interrupt_initv>
	ESC_init();			// Car ESCs
 80a11ae:	f7ff f911 	bl	80a03d4 <_Z8ESC_initv>
	fuzzy_init();		// Fuzzy library************
 80a11b2:	f7ff f961 	bl	80a0478 <_Z10fuzzy_initv>

	RGB.control(true); 	// take control of the on-board LED for debugging
 80a11b6:	2001      	movs	r0, #1
 80a11b8:	f002 fb6f 	bl	80a389a <_ZN8RGBClass7controlEb>
  	// register cloud variables
	// Particle.variable("distance", distance);
	// Particle.variable("Left_ESC", L_command);
	// Particle.variable("Right_ESC", R_command);
	// *********************************************
}
 80a11bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ESC_init();			// Car ESCs
	fuzzy_init();		// Fuzzy library************

	RGB.control(true); 	// take control of the on-board LED for debugging

	robot_init();
 80a11c0:	f7ff b938 	b.w	80a0434 <_Z10robot_initv>

080a11c4 <_Z4stopv>:
	// Particle.variable("Left_ESC", L_command);
	// Particle.variable("Right_ESC", R_command);
	// *********************************************
}

void stop() {
 80a11c4:	b508      	push	{r3, lr}
  	LESC.writeMicroseconds(1500);
 80a11c6:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a11ca:	4805      	ldr	r0, [pc, #20]	; (80a11e0 <_Z4stopv+0x1c>)
 80a11cc:	f002 f9e5 	bl	80a359a <_ZN5Servo17writeMicrosecondsEt>
  	RESC.writeMicroseconds(1500);
}
 80a11d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	// *********************************************
}

void stop() {
  	LESC.writeMicroseconds(1500);
  	RESC.writeMicroseconds(1500);
 80a11d4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a11d8:	4802      	ldr	r0, [pc, #8]	; (80a11e4 <_Z4stopv+0x20>)
 80a11da:	f002 b9de 	b.w	80a359a <_ZN5Servo17writeMicrosecondsEt>
 80a11de:	bf00      	nop
 80a11e0:	20000370 	.word	0x20000370
 80a11e4:	200003f0 	.word	0x200003f0

080a11e8 <loop>:
}

void loop(){
 80a11e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	// sensorx.readRangeContinuousMillimeters();
	RR_distance = sensor0.readRangeContinuousMillimeters();
 80a11ec:	4899      	ldr	r0, [pc, #612]	; (80a1454 <loop+0x26c>)
 80a11ee:	f000 fb51 	bl	80a1894 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a11f2:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 80a14dc <loop+0x2f4>
	RM_distance = sensor1.readRangeContinuousMillimeters();
 80a11f6:	4f98      	ldr	r7, [pc, #608]	; (80a1458 <loop+0x270>)
  	RESC.writeMicroseconds(1500);
}

void loop(){
	// sensorx.readRangeContinuousMillimeters();
	RR_distance = sensor0.readRangeContinuousMillimeters();
 80a11f8:	f8a8 0000 	strh.w	r0, [r8]
	RM_distance = sensor1.readRangeContinuousMillimeters();
 80a11fc:	4897      	ldr	r0, [pc, #604]	; (80a145c <loop+0x274>)
 80a11fe:	f000 fb49 	bl	80a1894 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a1202:	8038      	strh	r0, [r7, #0]
	LM_distance = sensor2.readRangeContinuousMillimeters();
 80a1204:	4896      	ldr	r0, [pc, #600]	; (80a1460 <loop+0x278>)
 80a1206:	f000 fb45 	bl	80a1894 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a120a:	4e96      	ldr	r6, [pc, #600]	; (80a1464 <loop+0x27c>)
	LL_distance = sensor3.readRangeContinuousMillimeters();
 80a120c:	4d96      	ldr	r5, [pc, #600]	; (80a1468 <loop+0x280>)

void loop(){
	// sensorx.readRangeContinuousMillimeters();
	RR_distance = sensor0.readRangeContinuousMillimeters();
	RM_distance = sensor1.readRangeContinuousMillimeters();
	LM_distance = sensor2.readRangeContinuousMillimeters();
 80a120e:	8030      	strh	r0, [r6, #0]
	LL_distance = sensor3.readRangeContinuousMillimeters();
 80a1210:	4896      	ldr	r0, [pc, #600]	; (80a146c <loop+0x284>)
 80a1212:	f000 fb3f 	bl	80a1894 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a1216:	8028      	strh	r0, [r5, #0]

	// if (sensor0.timeoutOccurred() || sensor1.timeoutOccurred() || sensor2.timeoutOccurred() || sensor3.timeoutOccurred()) { Serial.print(" SENSOR TIMEOUT"); }

  	// FUZZY **************************************************

  	fuzzy->setInput(1, LL_distance);
 80a1218:	f003 fd5c 	bl	80a4cd4 <__aeabi_ui2f>
 80a121c:	4c94      	ldr	r4, [pc, #592]	; (80a1470 <loop+0x288>)
 80a121e:	4602      	mov	r2, r0
 80a1220:	2101      	movs	r1, #1
 80a1222:	6820      	ldr	r0, [r4, #0]
 80a1224:	f001 fe8d 	bl	80a2f42 <_ZN5Fuzzy8setInputEif>
  	fuzzy->setInput(2, LM_distance);
 80a1228:	8830      	ldrh	r0, [r6, #0]
 80a122a:	f003 fd53 	bl	80a4cd4 <__aeabi_ui2f>
 80a122e:	2102      	movs	r1, #2
 80a1230:	4602      	mov	r2, r0
 80a1232:	6820      	ldr	r0, [r4, #0]
 80a1234:	f001 fe85 	bl	80a2f42 <_ZN5Fuzzy8setInputEif>
  	fuzzy->setInput(3, RM_distance);
 80a1238:	8838      	ldrh	r0, [r7, #0]
 80a123a:	f003 fd4b 	bl	80a4cd4 <__aeabi_ui2f>
 80a123e:	2103      	movs	r1, #3
 80a1240:	4602      	mov	r2, r0
 80a1242:	6820      	ldr	r0, [r4, #0]
 80a1244:	f001 fe7d 	bl	80a2f42 <_ZN5Fuzzy8setInputEif>
  	fuzzy->setInput(4, RR_distance);
 80a1248:	f8b8 0000 	ldrh.w	r0, [r8]
 80a124c:	f003 fd42 	bl	80a4cd4 <__aeabi_ui2f>
 80a1250:	2104      	movs	r1, #4
 80a1252:	4602      	mov	r2, r0
 80a1254:	6820      	ldr	r0, [r4, #0]
 80a1256:	f001 fe74 	bl	80a2f42 <_ZN5Fuzzy8setInputEif>

  	fuzzy->fuzzify();
 80a125a:	6820      	ldr	r0, [r4, #0]
 80a125c:	f001 fe85 	bl	80a2f6a <_ZN5Fuzzy7fuzzifyEv>
  	output = fuzzy->defuzzify(1);
 80a1260:	2101      	movs	r1, #1
 80a1262:	6820      	ldr	r0, [r4, #0]
 80a1264:	f001 fea8 	bl	80a2fb8 <_ZN5Fuzzy9defuzzifyEi>
 80a1268:	4b82      	ldr	r3, [pc, #520]	; (80a1474 <loop+0x28c>)


  	if((output >= 0) && (output < 20)) {
 80a126a:	2100      	movs	r1, #0
  	fuzzy->setInput(2, LM_distance);
  	fuzzy->setInput(3, RM_distance);
  	fuzzy->setInput(4, RR_distance);

  	fuzzy->fuzzify();
  	output = fuzzy->defuzzify(1);
 80a126c:	6018      	str	r0, [r3, #0]
 80a126e:	4604      	mov	r4, r0


  	if((output >= 0) && (output < 20)) {
 80a1270:	f003 ff3a 	bl	80a50e8 <__aeabi_fcmpge>
 80a1274:	b198      	cbz	r0, 80a129e <loop+0xb6>
 80a1276:	4980      	ldr	r1, [pc, #512]	; (80a1478 <loop+0x290>)
 80a1278:	4620      	mov	r0, r4
 80a127a:	f003 ff21 	bl	80a50c0 <__aeabi_fcmplt>
 80a127e:	b170      	cbz	r0, 80a129e <loop+0xb6>
  		decision = "Full Left";
 80a1280:	497e      	ldr	r1, [pc, #504]	; (80a147c <loop+0x294>)
 80a1282:	487f      	ldr	r0, [pc, #508]	; (80a1480 <loop+0x298>)
 80a1284:	f002 fa45 	bl	80a3712 <_ZN6StringaSEPKc>
  		L_command = 1550;
 80a1288:	f240 620e 	movw	r2, #1550	; 0x60e
 80a128c:	4b7d      	ldr	r3, [pc, #500]	; (80a1484 <loop+0x29c>)
  		R_command = 1600;
  		RGB.color(0, 0, 255);
 80a128e:	2100      	movs	r1, #0
  	output = fuzzy->defuzzify(1);


  	if((output >= 0) && (output < 20)) {
  		decision = "Full Left";
  		L_command = 1550;
 80a1290:	601a      	str	r2, [r3, #0]
  		R_command = 1600;
 80a1292:	4b7d      	ldr	r3, [pc, #500]	; (80a1488 <loop+0x2a0>)
 80a1294:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80a1298:	601a      	str	r2, [r3, #0]
  		RGB.color(0, 0, 255);
 80a129a:	22ff      	movs	r2, #255	; 0xff
 80a129c:	e049      	b.n	80a1332 <loop+0x14a>
  	} else if((output >= 20) && (output < 40)) {
 80a129e:	4976      	ldr	r1, [pc, #472]	; (80a1478 <loop+0x290>)
 80a12a0:	4620      	mov	r0, r4
 80a12a2:	f003 ff21 	bl	80a50e8 <__aeabi_fcmpge>
 80a12a6:	b1a0      	cbz	r0, 80a12d2 <loop+0xea>
 80a12a8:	4978      	ldr	r1, [pc, #480]	; (80a148c <loop+0x2a4>)
 80a12aa:	4620      	mov	r0, r4
 80a12ac:	f003 ff08 	bl	80a50c0 <__aeabi_fcmplt>
 80a12b0:	b178      	cbz	r0, 80a12d2 <loop+0xea>
  		decision = "Small Left";
 80a12b2:	4977      	ldr	r1, [pc, #476]	; (80a1490 <loop+0x2a8>)
 80a12b4:	4872      	ldr	r0, [pc, #456]	; (80a1480 <loop+0x298>)
 80a12b6:	f002 fa2c 	bl	80a3712 <_ZN6StringaSEPKc>
   		L_command = 1575;
 80a12ba:	f240 6227 	movw	r2, #1575	; 0x627
 80a12be:	4b71      	ldr	r3, [pc, #452]	; (80a1484 <loop+0x29c>)
  		R_command = 1600;
  		RGB.color(0, 128, 128);
 80a12c0:	2000      	movs	r0, #0
  		L_command = 1550;
  		R_command = 1600;
  		RGB.color(0, 0, 255);
  	} else if((output >= 20) && (output < 40)) {
  		decision = "Small Left";
   		L_command = 1575;
 80a12c2:	601a      	str	r2, [r3, #0]
  		R_command = 1600;
 80a12c4:	4b70      	ldr	r3, [pc, #448]	; (80a1488 <loop+0x2a0>)
 80a12c6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80a12ca:	601a      	str	r2, [r3, #0]
  		RGB.color(0, 128, 128);
 80a12cc:	2280      	movs	r2, #128	; 0x80
 80a12ce:	4611      	mov	r1, r2
 80a12d0:	e04a      	b.n	80a1368 <loop+0x180>
	} else if((output >= 40) && (output < 60)) {
 80a12d2:	496e      	ldr	r1, [pc, #440]	; (80a148c <loop+0x2a4>)
 80a12d4:	4620      	mov	r0, r4
 80a12d6:	f003 ff07 	bl	80a50e8 <__aeabi_fcmpge>
 80a12da:	b190      	cbz	r0, 80a1302 <loop+0x11a>
 80a12dc:	496d      	ldr	r1, [pc, #436]	; (80a1494 <loop+0x2ac>)
 80a12de:	4620      	mov	r0, r4
 80a12e0:	f003 feee 	bl	80a50c0 <__aeabi_fcmplt>
 80a12e4:	b168      	cbz	r0, 80a1302 <loop+0x11a>
		decision = "Center";
 80a12e6:	496c      	ldr	r1, [pc, #432]	; (80a1498 <loop+0x2b0>)
 80a12e8:	4865      	ldr	r0, [pc, #404]	; (80a1480 <loop+0x298>)
 80a12ea:	f002 fa12 	bl	80a3712 <_ZN6StringaSEPKc>
  		L_command = 1550;
 80a12ee:	f240 630e 	movw	r3, #1550	; 0x60e
 80a12f2:	4a64      	ldr	r2, [pc, #400]	; (80a1484 <loop+0x29c>)
  		R_command = 1550;
  		RGB.color(0, 255, 0);
 80a12f4:	21ff      	movs	r1, #255	; 0xff
   		L_command = 1575;
  		R_command = 1600;
  		RGB.color(0, 128, 128);
	} else if((output >= 40) && (output < 60)) {
		decision = "Center";
  		L_command = 1550;
 80a12f6:	6013      	str	r3, [r2, #0]
  		R_command = 1550;
 80a12f8:	4a63      	ldr	r2, [pc, #396]	; (80a1488 <loop+0x2a0>)
 80a12fa:	6013      	str	r3, [r2, #0]
  		RGB.color(0, 255, 0);
 80a12fc:	2200      	movs	r2, #0
 80a12fe:	4610      	mov	r0, r2
 80a1300:	e032      	b.n	80a1368 <loop+0x180>
	} else if((output >= 60) && (output < 80)) {
 80a1302:	4964      	ldr	r1, [pc, #400]	; (80a1494 <loop+0x2ac>)
 80a1304:	4620      	mov	r0, r4
 80a1306:	f003 feef 	bl	80a50e8 <__aeabi_fcmpge>
 80a130a:	b1a0      	cbz	r0, 80a1336 <loop+0x14e>
 80a130c:	4963      	ldr	r1, [pc, #396]	; (80a149c <loop+0x2b4>)
 80a130e:	4620      	mov	r0, r4
 80a1310:	f003 fed6 	bl	80a50c0 <__aeabi_fcmplt>
 80a1314:	b178      	cbz	r0, 80a1336 <loop+0x14e>
		decision = "Small Right";
 80a1316:	4962      	ldr	r1, [pc, #392]	; (80a14a0 <loop+0x2b8>)
 80a1318:	4859      	ldr	r0, [pc, #356]	; (80a1480 <loop+0x298>)
 80a131a:	f002 f9fa 	bl	80a3712 <_ZN6StringaSEPKc>
  		L_command = 1600;
 80a131e:	4b59      	ldr	r3, [pc, #356]	; (80a1484 <loop+0x29c>)
 80a1320:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80a1324:	601a      	str	r2, [r3, #0]
  		R_command = 1575;
 80a1326:	f240 6227 	movw	r2, #1575	; 0x627
 80a132a:	4b57      	ldr	r3, [pc, #348]	; (80a1488 <loop+0x2a0>)
  		RGB.color(128, 128, 0);
 80a132c:	2180      	movs	r1, #128	; 0x80
  		R_command = 1550;
  		RGB.color(0, 255, 0);
	} else if((output >= 60) && (output < 80)) {
		decision = "Small Right";
  		L_command = 1600;
  		R_command = 1575;
 80a132e:	601a      	str	r2, [r3, #0]
  		RGB.color(128, 128, 0);
 80a1330:	2200      	movs	r2, #0
 80a1332:	4608      	mov	r0, r1
 80a1334:	e018      	b.n	80a1368 <loop+0x180>
	} else if((output >= 80) && (output < 100)) {
 80a1336:	4959      	ldr	r1, [pc, #356]	; (80a149c <loop+0x2b4>)
 80a1338:	4620      	mov	r0, r4
 80a133a:	f003 fed5 	bl	80a50e8 <__aeabi_fcmpge>
 80a133e:	b1a8      	cbz	r0, 80a136c <loop+0x184>
 80a1340:	4958      	ldr	r1, [pc, #352]	; (80a14a4 <loop+0x2bc>)
 80a1342:	4620      	mov	r0, r4
 80a1344:	f003 febc 	bl	80a50c0 <__aeabi_fcmplt>
 80a1348:	b180      	cbz	r0, 80a136c <loop+0x184>
		decision = "Full Right";
 80a134a:	4957      	ldr	r1, [pc, #348]	; (80a14a8 <loop+0x2c0>)
 80a134c:	484c      	ldr	r0, [pc, #304]	; (80a1480 <loop+0x298>)
 80a134e:	f002 f9e0 	bl	80a3712 <_ZN6StringaSEPKc>
  		L_command = 1600;
 80a1352:	4b4c      	ldr	r3, [pc, #304]	; (80a1484 <loop+0x29c>)
 80a1354:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80a1358:	601a      	str	r2, [r3, #0]
  		R_command = 1550;
 80a135a:	f240 620e 	movw	r2, #1550	; 0x60e
 80a135e:	4b4a      	ldr	r3, [pc, #296]	; (80a1488 <loop+0x2a0>)
  		RGB.color(255, 0, 0);
 80a1360:	20ff      	movs	r0, #255	; 0xff
  		R_command = 1575;
  		RGB.color(128, 128, 0);
	} else if((output >= 80) && (output < 100)) {
		decision = "Full Right";
  		L_command = 1600;
  		R_command = 1550;
 80a1362:	601a      	str	r2, [r3, #0]
  		RGB.color(255, 0, 0);
 80a1364:	2200      	movs	r2, #0
 80a1366:	4611      	mov	r1, r2
 80a1368:	f002 faa7 	bl	80a38ba <_ZN8RGBClass5colorEiii>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a136c:	f001 ff8c 	bl	80a3288 <HAL_Timer_Get_Milli_Seconds>
	}

	// Publish every 1 second (fastest rate)
	if(millis() - currentTime > 1000) {
 80a1370:	4c4e      	ldr	r4, [pc, #312]	; (80a14ac <loop+0x2c4>)
 80a1372:	6823      	ldr	r3, [r4, #0]
 80a1374:	1ac0      	subs	r0, r0, r3
 80a1376:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80a137a:	d902      	bls.n	80a1382 <loop+0x19a>
 80a137c:	f001 ff84 	bl	80a3288 <HAL_Timer_Get_Milli_Seconds>
		currentTime = millis();
 80a1380:	6020      	str	r0, [r4, #0]
	}

	// For serial debugging

  	Serial.print(decision);
 80a1382:	f002 fbd3 	bl	80a3b2c <_Z16_fetch_usbserialv>
 80a1386:	4b3e      	ldr	r3, [pc, #248]	; (80a1480 <loop+0x298>)
 80a1388:	6819      	ldr	r1, [r3, #0]
 80a138a:	f002 f9f9 	bl	80a3780 <_ZN5Print5printEPKc>
  	Serial.print(" | ");
 80a138e:	f002 fbcd 	bl	80a3b2c <_Z16_fetch_usbserialv>
 80a1392:	4947      	ldr	r1, [pc, #284]	; (80a14b0 <loop+0x2c8>)
 80a1394:	f002 f9f4 	bl	80a3780 <_ZN5Print5printEPKc>
  	Serial.print("sensor 0:");
 80a1398:	f002 fbc8 	bl	80a3b2c <_Z16_fetch_usbserialv>
 80a139c:	4945      	ldr	r1, [pc, #276]	; (80a14b4 <loop+0x2cc>)
 80a139e:	f002 f9ef 	bl	80a3780 <_ZN5Print5printEPKc>
  	Serial.print(RR_distance);
 80a13a2:	f002 fbc3 	bl	80a3b2c <_Z16_fetch_usbserialv>
 80a13a6:	220a      	movs	r2, #10
 80a13a8:	f8b8 1000 	ldrh.w	r1, [r8]
 80a13ac:	f002 fa53 	bl	80a3856 <_ZN5Print5printEii>
  	Serial.print(" | ");
 80a13b0:	f002 fbbc 	bl	80a3b2c <_Z16_fetch_usbserialv>
 80a13b4:	493e      	ldr	r1, [pc, #248]	; (80a14b0 <loop+0x2c8>)
 80a13b6:	f002 f9e3 	bl	80a3780 <_ZN5Print5printEPKc>
  	Serial.print("sensor 1:");
 80a13ba:	f002 fbb7 	bl	80a3b2c <_Z16_fetch_usbserialv>
 80a13be:	493e      	ldr	r1, [pc, #248]	; (80a14b8 <loop+0x2d0>)
 80a13c0:	f002 f9de 	bl	80a3780 <_ZN5Print5printEPKc>
  	Serial.print(RM_distance);
 80a13c4:	f002 fbb2 	bl	80a3b2c <_Z16_fetch_usbserialv>
 80a13c8:	220a      	movs	r2, #10
 80a13ca:	8839      	ldrh	r1, [r7, #0]
 80a13cc:	f002 fa43 	bl	80a3856 <_ZN5Print5printEii>
  	Serial.print(" | ");
 80a13d0:	f002 fbac 	bl	80a3b2c <_Z16_fetch_usbserialv>
 80a13d4:	4936      	ldr	r1, [pc, #216]	; (80a14b0 <loop+0x2c8>)
 80a13d6:	f002 f9d3 	bl	80a3780 <_ZN5Print5printEPKc>
  	Serial.print("sensor 2:");
 80a13da:	f002 fba7 	bl	80a3b2c <_Z16_fetch_usbserialv>
 80a13de:	4937      	ldr	r1, [pc, #220]	; (80a14bc <loop+0x2d4>)
 80a13e0:	f002 f9ce 	bl	80a3780 <_ZN5Print5printEPKc>
  	Serial.print(LM_distance);
 80a13e4:	f002 fba2 	bl	80a3b2c <_Z16_fetch_usbserialv>
 80a13e8:	220a      	movs	r2, #10
 80a13ea:	8831      	ldrh	r1, [r6, #0]
 80a13ec:	f002 fa33 	bl	80a3856 <_ZN5Print5printEii>
  	Serial.print(" | ");
 80a13f0:	f002 fb9c 	bl	80a3b2c <_Z16_fetch_usbserialv>
 80a13f4:	492e      	ldr	r1, [pc, #184]	; (80a14b0 <loop+0x2c8>)
 80a13f6:	f002 f9c3 	bl	80a3780 <_ZN5Print5printEPKc>
  	Serial.print("sensor 3:");
 80a13fa:	f002 fb97 	bl	80a3b2c <_Z16_fetch_usbserialv>
 80a13fe:	4930      	ldr	r1, [pc, #192]	; (80a14c0 <loop+0x2d8>)
 80a1400:	f002 f9be 	bl	80a3780 <_ZN5Print5printEPKc>
  	Serial.println(LL_distance);
 80a1404:	f002 fb92 	bl	80a3b2c <_Z16_fetch_usbserialv>
 80a1408:	8829      	ldrh	r1, [r5, #0]
 80a140a:	220a      	movs	r2, #10
 80a140c:	f002 fa25 	bl	80a385a <_ZN5Print7printlnEii>
  	// FUZZY ***********************************************


  	// obligatory sampling from accelerometer
  	LIS3DHSample sample;
  	if(!accel.getSample(sample)) {
 80a1410:	4669      	mov	r1, sp
 80a1412:	482c      	ldr	r0, [pc, #176]	; (80a14c4 <loop+0x2dc>)
 80a1414:	f000 ff32 	bl	80a227c <_ZN6LIS3DH9getSampleER12LIS3DHSample>
 80a1418:	b920      	cbnz	r0, 80a1424 <loop+0x23c>
  		Serial.println("no sample"); // ********************************
 80a141a:	f002 fb87 	bl	80a3b2c <_Z16_fetch_usbserialv>
 80a141e:	492a      	ldr	r1, [pc, #168]	; (80a14c8 <loop+0x2e0>)
 80a1420:	f002 f9c1 	bl	80a37a6 <_ZN5Print7printlnEPKc>
  		// Particle.publish("no sample");
  	}
// 
  	if(RSflag == LOW) {
 80a1424:	4b29      	ldr	r3, [pc, #164]	; (80a14cc <loop+0x2e4>)
 80a1426:	781b      	ldrb	r3, [r3, #0]
 80a1428:	b93b      	cbnz	r3, 80a143a <loop+0x252>
  		stop();
 80a142a:	f7ff fecb 	bl	80a11c4 <_Z4stopv>
  		Serial.print("STOPPED");
 80a142e:	f002 fb7d 	bl	80a3b2c <_Z16_fetch_usbserialv>
 80a1432:	4927      	ldr	r1, [pc, #156]	; (80a14d0 <loop+0x2e8>)
 80a1434:	f002 f9a4 	bl	80a3780 <_ZN5Print5printEPKc>
 80a1438:	e7fe      	b.n	80a1438 <loop+0x250>
  		while(true);
  		// System.reset();
  	}

  	LESC.writeMicroseconds(L_command);
 80a143a:	4b12      	ldr	r3, [pc, #72]	; (80a1484 <loop+0x29c>)
 80a143c:	4825      	ldr	r0, [pc, #148]	; (80a14d4 <loop+0x2ec>)
 80a143e:	8819      	ldrh	r1, [r3, #0]
 80a1440:	f002 f8ab 	bl	80a359a <_ZN5Servo17writeMicrosecondsEt>
  	RESC.writeMicroseconds(R_command);
 80a1444:	4b10      	ldr	r3, [pc, #64]	; (80a1488 <loop+0x2a0>)
 80a1446:	4824      	ldr	r0, [pc, #144]	; (80a14d8 <loop+0x2f0>)
 80a1448:	8819      	ldrh	r1, [r3, #0]
 80a144a:	f002 f8a6 	bl	80a359a <_ZN5Servo17writeMicrosecondsEt>
 80a144e:	b002      	add	sp, #8
 80a1450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1454:	200003a8 	.word	0x200003a8
 80a1458:	20000424 	.word	0x20000424
 80a145c:	20000408 	.word	0x20000408
 80a1460:	200003c0 	.word	0x200003c0
 80a1464:	20000402 	.word	0x20000402
 80a1468:	20000426 	.word	0x20000426
 80a146c:	200003d8 	.word	0x200003d8
 80a1470:	200003a4 	.word	0x200003a4
 80a1474:	20000368 	.word	0x20000368
 80a1478:	41a00000 	.word	0x41a00000
 80a147c:	080a51e7 	.word	0x080a51e7
 80a1480:	20000394 	.word	0x20000394
 80a1484:	20000340 	.word	0x20000340
 80a1488:	20000304 	.word	0x20000304
 80a148c:	42200000 	.word	0x42200000
 80a1490:	080a51f1 	.word	0x080a51f1
 80a1494:	42700000 	.word	0x42700000
 80a1498:	080a51fc 	.word	0x080a51fc
 80a149c:	42a00000 	.word	0x42a00000
 80a14a0:	080a5203 	.word	0x080a5203
 80a14a4:	42c80000 	.word	0x42c80000
 80a14a8:	080a520f 	.word	0x080a520f
 80a14ac:	20000404 	.word	0x20000404
 80a14b0:	080a521a 	.word	0x080a521a
 80a14b4:	080a521e 	.word	0x080a521e
 80a14b8:	080a5228 	.word	0x080a5228
 80a14bc:	080a5232 	.word	0x080a5232
 80a14c0:	080a523c 	.word	0x080a523c
 80a14c4:	20000380 	.word	0x20000380
 80a14c8:	080a5246 	.word	0x080a5246
 80a14cc:	20000400 	.word	0x20000400
 80a14d0:	080a5250 	.word	0x080a5250
 80a14d4:	20000370 	.word	0x20000370
 80a14d8:	200003f0 	.word	0x200003f0
 80a14dc:	2000036c 	.word	0x2000036c

080a14e0 <_GLOBAL__sub_I_high1>:
 80a14e0:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a14e2:	f001 fe79 	bl	80a31d8 <HAL_Pin_Map>

#if !defined(PARTICLE)
#  include <Wire.h>
#endif

VL53L0X sensor0;	// RR
 80a14e6:	481d      	ldr	r0, [pc, #116]	; (80a155c <_GLOBAL__sub_I_high1+0x7c>)
 80a14e8:	f000 f85a 	bl	80a15a0 <_ZN7VL53L0XC1Ev>
VL53L0X sensor1;	// RM
 80a14ec:	481c      	ldr	r0, [pc, #112]	; (80a1560 <_GLOBAL__sub_I_high1+0x80>)
 80a14ee:	f000 f857 	bl	80a15a0 <_ZN7VL53L0XC1Ev>
VL53L0X sensor2;	// LM
 80a14f2:	481c      	ldr	r0, [pc, #112]	; (80a1564 <_GLOBAL__sub_I_high1+0x84>)
 80a14f4:	f000 f854 	bl	80a15a0 <_ZN7VL53L0XC1Ev>
VL53L0X sensor3;	// LL
 80a14f8:	481b      	ldr	r0, [pc, #108]	; (80a1568 <_GLOBAL__sub_I_high1+0x88>)
 80a14fa:	f000 f851 	bl	80a15a0 <_ZN7VL53L0XC1Ev>
int BL = D5;
int BR = D6;

int RS = D4;

Servo LESC;
 80a14fe:	481b      	ldr	r0, [pc, #108]	; (80a156c <_GLOBAL__sub_I_high1+0x8c>)
 80a1500:	f002 f86b 	bl	80a35da <_ZN5ServoC1Ev>
Servo RESC;
 80a1504:	481a      	ldr	r0, [pc, #104]	; (80a1570 <_GLOBAL__sub_I_high1+0x90>)
 80a1506:	f002 f868 	bl	80a35da <_ZN5ServoC1Ev>
boolean BLflag = true;
boolean BRflag = true;

boolean RSflag = false;

Fuzzy* fuzzy = new Fuzzy();
 80a150a:	2018      	movs	r0, #24
 80a150c:	f7fe fdc5 	bl	80a009a <_Znwj>
 80a1510:	4604      	mov	r4, r0
 80a1512:	b108      	cbz	r0, 80a1518 <_GLOBAL__sub_I_high1+0x38>
 80a1514:	f001 fccf 	bl	80a2eb6 <_ZN5FuzzyC1Ev>
 80a1518:	4b16      	ldr	r3, [pc, #88]	; (80a1574 <_GLOBAL__sub_I_high1+0x94>)
float output;
String decision;
 80a151a:	4917      	ldr	r1, [pc, #92]	; (80a1578 <_GLOBAL__sub_I_high1+0x98>)
 80a151c:	4817      	ldr	r0, [pc, #92]	; (80a157c <_GLOBAL__sub_I_high1+0x9c>)
boolean BLflag = true;
boolean BRflag = true;

boolean RSflag = false;

Fuzzy* fuzzy = new Fuzzy();
 80a151e:	601c      	str	r4, [r3, #0]
float output;
String decision;
 80a1520:	f002 f8e4 	bl	80a36ec <_ZN6StringC1EPK19__FlashStringHelper>
 80a1524:	4a16      	ldr	r2, [pc, #88]	; (80a1580 <_GLOBAL__sub_I_high1+0xa0>)
 80a1526:	4917      	ldr	r1, [pc, #92]	; (80a1584 <_GLOBAL__sub_I_high1+0xa4>)
 80a1528:	4814      	ldr	r0, [pc, #80]	; (80a157c <_GLOBAL__sub_I_high1+0x9c>)
 80a152a:	f002 fd2d 	bl	80a3f88 <__aeabi_atexit>
unsigned long currentTime = 0;

SYSTEM_THREAD(ENABLED);
 80a152e:	2100      	movs	r1, #0
 80a1530:	2001      	movs	r0, #1
 80a1532:	f001 ffdb 	bl	80a34ec <system_thread_set_state>

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1536:	2003      	movs	r0, #3
 80a1538:	f001 ffc8 	bl	80a34cc <set_system_mode>
// SYSTEM_MODE(AUTOMATIC);


// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
 80a153c:	f002 fd04 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a1540:	2200      	movs	r2, #0
 80a1542:	4601      	mov	r1, r0
 80a1544:	2311      	movs	r3, #17
 80a1546:	4810      	ldr	r0, [pc, #64]	; (80a1588 <_GLOBAL__sub_I_high1+0xa8>)
 80a1548:	f000 ff2c 	bl	80a23a4 <_ZN9LIS3DHI2CC1ER7TwoWirehi>
  		// System.reset();
  	}

  	LESC.writeMicroseconds(L_command);
  	RESC.writeMicroseconds(R_command);
 80a154c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// SYSTEM_MODE(AUTOMATIC);


// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
 80a1550:	4a0b      	ldr	r2, [pc, #44]	; (80a1580 <_GLOBAL__sub_I_high1+0xa0>)
 80a1552:	490e      	ldr	r1, [pc, #56]	; (80a158c <_GLOBAL__sub_I_high1+0xac>)
 80a1554:	480c      	ldr	r0, [pc, #48]	; (80a1588 <_GLOBAL__sub_I_high1+0xa8>)
 80a1556:	f002 bd17 	b.w	80a3f88 <__aeabi_atexit>
 80a155a:	bf00      	nop
 80a155c:	200003a8 	.word	0x200003a8
 80a1560:	20000408 	.word	0x20000408
 80a1564:	200003c0 	.word	0x200003c0
 80a1568:	200003d8 	.word	0x200003d8
 80a156c:	20000370 	.word	0x20000370
 80a1570:	200003f0 	.word	0x200003f0
 80a1574:	200003a4 	.word	0x200003a4
 80a1578:	080a52da 	.word	0x080a52da
 80a157c:	20000394 	.word	0x20000394
 80a1580:	20000364 	.word	0x20000364
 80a1584:	080a365f 	.word	0x080a365f
 80a1588:	20000380 	.word	0x20000380
 80a158c:	080a2169 	.word	0x080a2169

080a1590 <_ZN7TwoWire5writeEm>:
  virtual int peek(void);
  virtual void flush(void);
  void onReceive(void (*)(int));
  void onRequest(void (*)(void));

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
 80a1590:	6803      	ldr	r3, [r0, #0]
 80a1592:	b2c9      	uxtb	r1, r1
 80a1594:	689b      	ldr	r3, [r3, #8]
 80a1596:	4718      	bx	r3

080a1598 <_ZN7TwoWire5writeEi>:
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a1598:	6803      	ldr	r3, [r0, #0]
 80a159a:	b2c9      	uxtb	r1, r1
 80a159c:	689b      	ldr	r3, [r3, #8]
 80a159e:	4718      	bx	r3

080a15a0 <_ZN7VL53L0XC1Ev>:
// Constructors ////////////////////////////////////////////////////////////////

VL53L0X::VL53L0X(void)
  : address(ADDRESS_DEFAULT)
  , io_timeout(0) // no timeout
  , did_timeout(false)
 80a15a0:	2229      	movs	r2, #41	; 0x29
 80a15a2:	7042      	strb	r2, [r0, #1]
 80a15a4:	2200      	movs	r2, #0
 80a15a6:	6042      	str	r2, [r0, #4]
 80a15a8:	7202      	strb	r2, [r0, #8]
{
}
 80a15aa:	4770      	bx	lr

080a15ac <_ZN7VL53L0X8writeRegEhh>:
  return true;
}

// Write an 8-bit register
void VL53L0X::writeReg(uint8_t reg, uint8_t value)
{
 80a15ac:	b570      	push	{r4, r5, r6, lr}
 80a15ae:	4604      	mov	r4, r0
 80a15b0:	4615      	mov	r5, r2
 80a15b2:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a15b4:	f002 fcc8 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a15b8:	7861      	ldrb	r1, [r4, #1]
 80a15ba:	f002 fc04 	bl	80a3dc6 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a15be:	f002 fcc3 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a15c2:	6803      	ldr	r3, [r0, #0]
 80a15c4:	4631      	mov	r1, r6
 80a15c6:	689b      	ldr	r3, [r3, #8]
 80a15c8:	4798      	blx	r3
  Wire.write(value);
 80a15ca:	f002 fcbd 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a15ce:	6803      	ldr	r3, [r0, #0]
 80a15d0:	4629      	mov	r1, r5
 80a15d2:	689b      	ldr	r3, [r3, #8]
 80a15d4:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a15d6:	f002 fcb7 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a15da:	f002 fbfc 	bl	80a3dd6 <_ZN7TwoWire15endTransmissionEv>
 80a15de:	7020      	strb	r0, [r4, #0]
 80a15e0:	bd70      	pop	{r4, r5, r6, pc}

080a15e2 <_ZN7VL53L0X10setAddressEh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void VL53L0X::setAddress(uint8_t new_addr)
{
 80a15e2:	b538      	push	{r3, r4, r5, lr}
 80a15e4:	4605      	mov	r5, r0
 80a15e6:	460c      	mov	r4, r1
  writeReg(I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 80a15e8:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80a15ec:	218a      	movs	r1, #138	; 0x8a
 80a15ee:	f7ff ffdd 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  address = new_addr;
 80a15f2:	706c      	strb	r4, [r5, #1]
 80a15f4:	bd38      	pop	{r3, r4, r5, pc}

080a15f6 <_ZN7VL53L0X13writeReg16BitEht>:
  last_status = Wire.endTransmission();
}

// Write a 16-bit register
void VL53L0X::writeReg16Bit(uint8_t reg, uint16_t value)
{
 80a15f6:	b570      	push	{r4, r5, r6, lr}
 80a15f8:	4604      	mov	r4, r0
 80a15fa:	4615      	mov	r5, r2
 80a15fc:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a15fe:	f002 fca3 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a1602:	7861      	ldrb	r1, [r4, #1]
 80a1604:	f002 fbdf 	bl	80a3dc6 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a1608:	f002 fc9e 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a160c:	6803      	ldr	r3, [r0, #0]
 80a160e:	4631      	mov	r1, r6
 80a1610:	689b      	ldr	r3, [r3, #8]
 80a1612:	4798      	blx	r3
  Wire.write((value >> 8) & 0xFF); // value high byte
 80a1614:	f002 fc98 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a1618:	0a29      	lsrs	r1, r5, #8
 80a161a:	f7ff ffbd 	bl	80a1598 <_ZN7TwoWire5writeEi>
  Wire.write( value       & 0xFF); // value low byte
 80a161e:	f002 fc93 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a1622:	b2e9      	uxtb	r1, r5
 80a1624:	f7ff ffb8 	bl	80a1598 <_ZN7TwoWire5writeEi>
  last_status = Wire.endTransmission();
 80a1628:	f002 fc8e 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a162c:	f002 fbd3 	bl	80a3dd6 <_ZN7TwoWire15endTransmissionEv>
 80a1630:	7020      	strb	r0, [r4, #0]
 80a1632:	bd70      	pop	{r4, r5, r6, pc}

080a1634 <_ZN7VL53L0X13writeReg32BitEhm>:
}

// Write a 32-bit register
void VL53L0X::writeReg32Bit(uint8_t reg, uint32_t value)
{
 80a1634:	b570      	push	{r4, r5, r6, lr}
 80a1636:	4605      	mov	r5, r0
 80a1638:	4614      	mov	r4, r2
 80a163a:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a163c:	f002 fc84 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a1640:	7869      	ldrb	r1, [r5, #1]
 80a1642:	f002 fbc0 	bl	80a3dc6 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a1646:	f002 fc7f 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a164a:	6803      	ldr	r3, [r0, #0]
 80a164c:	4631      	mov	r1, r6
 80a164e:	689b      	ldr	r3, [r3, #8]
 80a1650:	4798      	blx	r3
  Wire.write((value >> 24) & 0xFF); // value highest byte
 80a1652:	f002 fc79 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a1656:	0e21      	lsrs	r1, r4, #24
 80a1658:	f7ff ff9a 	bl	80a1590 <_ZN7TwoWire5writeEm>
  Wire.write((value >> 16) & 0xFF);
 80a165c:	f002 fc74 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a1660:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80a1664:	f7ff ff94 	bl	80a1590 <_ZN7TwoWire5writeEm>
  Wire.write((value >>  8) & 0xFF);
 80a1668:	f002 fc6e 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a166c:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80a1670:	f7ff ff8e 	bl	80a1590 <_ZN7TwoWire5writeEm>
  Wire.write( value        & 0xFF); // value lowest byte
 80a1674:	f002 fc68 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a1678:	b2e1      	uxtb	r1, r4
 80a167a:	f7ff ff89 	bl	80a1590 <_ZN7TwoWire5writeEm>
  last_status = Wire.endTransmission();
 80a167e:	f002 fc63 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a1682:	f002 fba8 	bl	80a3dd6 <_ZN7TwoWire15endTransmissionEv>
 80a1686:	7028      	strb	r0, [r5, #0]
 80a1688:	bd70      	pop	{r4, r5, r6, pc}

080a168a <_ZN7VL53L0X7readRegEh>:
}

// Read an 8-bit register
uint8_t VL53L0X::readReg(uint8_t reg)
{
 80a168a:	b538      	push	{r3, r4, r5, lr}
 80a168c:	4604      	mov	r4, r0
 80a168e:	460d      	mov	r5, r1
  uint8_t value;

  Wire.beginTransmission(address);
 80a1690:	f002 fc5a 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a1694:	7861      	ldrb	r1, [r4, #1]
 80a1696:	f002 fb96 	bl	80a3dc6 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a169a:	f002 fc55 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a169e:	6803      	ldr	r3, [r0, #0]
 80a16a0:	4629      	mov	r1, r5
 80a16a2:	689b      	ldr	r3, [r3, #8]
 80a16a4:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a16a6:	f002 fc4f 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a16aa:	f002 fb94 	bl	80a3dd6 <_ZN7TwoWire15endTransmissionEv>
 80a16ae:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)1);
 80a16b0:	f002 fc4a 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a16b4:	2201      	movs	r2, #1
 80a16b6:	7861      	ldrb	r1, [r4, #1]
 80a16b8:	f002 fb7d 	bl	80a3db6 <_ZN7TwoWire11requestFromEhh>
  value = Wire.read();
 80a16bc:	f002 fc44 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a16c0:	6803      	ldr	r3, [r0, #0]
 80a16c2:	695b      	ldr	r3, [r3, #20]
 80a16c4:	4798      	blx	r3

  return value;
}
 80a16c6:	b2c0      	uxtb	r0, r0
 80a16c8:	bd38      	pop	{r3, r4, r5, pc}

080a16ca <_ZN7VL53L0X12readReg16BitEh>:

// Read a 16-bit register
uint16_t VL53L0X::readReg16Bit(uint8_t reg)
{
 80a16ca:	b538      	push	{r3, r4, r5, lr}
 80a16cc:	4604      	mov	r4, r0
 80a16ce:	460d      	mov	r5, r1
  uint16_t value;

  Wire.beginTransmission(address);
 80a16d0:	f002 fc3a 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a16d4:	7861      	ldrb	r1, [r4, #1]
 80a16d6:	f002 fb76 	bl	80a3dc6 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a16da:	f002 fc35 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a16de:	6803      	ldr	r3, [r0, #0]
 80a16e0:	4629      	mov	r1, r5
 80a16e2:	689b      	ldr	r3, [r3, #8]
 80a16e4:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a16e6:	f002 fc2f 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a16ea:	f002 fb74 	bl	80a3dd6 <_ZN7TwoWire15endTransmissionEv>
 80a16ee:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)2);
 80a16f0:	f002 fc2a 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a16f4:	7861      	ldrb	r1, [r4, #1]
 80a16f6:	2202      	movs	r2, #2
 80a16f8:	f002 fb5d 	bl	80a3db6 <_ZN7TwoWire11requestFromEhh>
  value  = (uint16_t)Wire.read() << 8; // value high byte
 80a16fc:	f002 fc24 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a1700:	6803      	ldr	r3, [r0, #0]
 80a1702:	695b      	ldr	r3, [r3, #20]
 80a1704:	4798      	blx	r3
 80a1706:	4604      	mov	r4, r0
  value |=           Wire.read();      // value low byte
 80a1708:	f002 fc1e 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a170c:	6803      	ldr	r3, [r0, #0]
 80a170e:	695b      	ldr	r3, [r3, #20]
 80a1710:	4798      	blx	r3
 80a1712:	ea40 2004 	orr.w	r0, r0, r4, lsl #8

  return value;
}
 80a1716:	b280      	uxth	r0, r0
 80a1718:	bd38      	pop	{r3, r4, r5, pc}

080a171a <_ZN7VL53L0X10writeMultiEhPKhh>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
 80a171a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a171c:	4606      	mov	r6, r0
 80a171e:	4614      	mov	r4, r2
 80a1720:	461d      	mov	r5, r3
 80a1722:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a1724:	f002 fc10 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a1728:	7871      	ldrb	r1, [r6, #1]
 80a172a:	f002 fb4c 	bl	80a3dc6 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a172e:	f002 fc0b 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a1732:	6803      	ldr	r3, [r0, #0]
 80a1734:	4639      	mov	r1, r7
 80a1736:	689b      	ldr	r3, [r3, #8]
 80a1738:	4798      	blx	r3
 80a173a:	4425      	add	r5, r4

  while (count-- > 0)
 80a173c:	42ac      	cmp	r4, r5
 80a173e:	d007      	beq.n	80a1750 <_ZN7VL53L0X10writeMultiEhPKhh+0x36>
  {
    Wire.write(*(src++));
 80a1740:	f002 fc02 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a1744:	6803      	ldr	r3, [r0, #0]
 80a1746:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a174a:	689b      	ldr	r3, [r3, #8]
 80a174c:	4798      	blx	r3
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
  Wire.beginTransmission(address);
  Wire.write(reg);

  while (count-- > 0)
 80a174e:	e7f5      	b.n	80a173c <_ZN7VL53L0X10writeMultiEhPKhh+0x22>
  {
    Wire.write(*(src++));
  }

  last_status = Wire.endTransmission();
 80a1750:	f002 fbfa 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a1754:	f002 fb3f 	bl	80a3dd6 <_ZN7TwoWire15endTransmissionEv>
 80a1758:	7030      	strb	r0, [r6, #0]
 80a175a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a175c <_ZN7VL53L0X9readMultiEhPhh>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void VL53L0X::readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 80a175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a175e:	4606      	mov	r6, r0
 80a1760:	4614      	mov	r4, r2
 80a1762:	461d      	mov	r5, r3
 80a1764:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a1766:	f002 fbef 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a176a:	7871      	ldrb	r1, [r6, #1]
 80a176c:	f002 fb2b 	bl	80a3dc6 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a1770:	f002 fbea 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a1774:	6803      	ldr	r3, [r0, #0]
 80a1776:	4639      	mov	r1, r7
 80a1778:	689b      	ldr	r3, [r3, #8]
 80a177a:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a177c:	f002 fbe4 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a1780:	f002 fb29 	bl	80a3dd6 <_ZN7TwoWire15endTransmissionEv>
 80a1784:	7030      	strb	r0, [r6, #0]

  Wire.requestFrom(address, count);
 80a1786:	f002 fbdf 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a178a:	462a      	mov	r2, r5
 80a178c:	7871      	ldrb	r1, [r6, #1]
 80a178e:	f002 fb12 	bl	80a3db6 <_ZN7TwoWire11requestFromEhh>
 80a1792:	4425      	add	r5, r4

  while (count-- > 0)
 80a1794:	42ac      	cmp	r4, r5
 80a1796:	d007      	beq.n	80a17a8 <_ZN7VL53L0X9readMultiEhPhh+0x4c>
  {
    *(dst++) = Wire.read();
 80a1798:	f002 fbd6 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a179c:	6803      	ldr	r3, [r0, #0]
 80a179e:	695b      	ldr	r3, [r3, #20]
 80a17a0:	4798      	blx	r3
 80a17a2:	f804 0b01 	strb.w	r0, [r4], #1
  Wire.write(reg);
  last_status = Wire.endTransmission();

  Wire.requestFrom(address, count);

  while (count-- > 0)
 80a17a6:	e7f5      	b.n	80a1794 <_ZN7VL53L0X9readMultiEhPhh+0x38>
 80a17a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a17aa:	0000      	movs	r0, r0
 80a17ac:	0000      	movs	r0, r0
	...

080a17b0 <_ZN7VL53L0X18setSignalRateLimitEf>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
 80a17b0:	b570      	push	{r4, r5, r6, lr}
 80a17b2:	460d      	mov	r5, r1
 80a17b4:	4606      	mov	r6, r0
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a17b6:	2100      	movs	r1, #0
 80a17b8:	4628      	mov	r0, r5
 80a17ba:	f003 fc81 	bl	80a50c0 <__aeabi_fcmplt>
 80a17be:	b9b0      	cbnz	r0, 80a17ee <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>
 80a17c0:	4628      	mov	r0, r5
 80a17c2:	f002 fe93 	bl	80a44ec <__aeabi_f2d>
 80a17c6:	a30c      	add	r3, pc, #48	; (adr r3, 80a17f8 <_ZN7VL53L0X18setSignalRateLimitEf+0x48>)
 80a17c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a17cc:	f003 f972 	bl	80a4ab4 <__aeabi_dcmpgt>
 80a17d0:	b968      	cbnz	r0, 80a17ee <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80a17d2:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80a17d6:	4628      	mov	r0, r5
 80a17d8:	f003 fad4 	bl	80a4d84 <__aeabi_fmul>
 80a17dc:	f003 fc98 	bl	80a5110 <__aeabi_f2uiz>
 80a17e0:	2144      	movs	r1, #68	; 0x44
 80a17e2:	b282      	uxth	r2, r0
 80a17e4:	4630      	mov	r0, r6
 80a17e6:	f7ff ff06 	bl	80a15f6 <_ZN7VL53L0X13writeReg16BitEht>
 80a17ea:	2001      	movs	r0, #1
 80a17ec:	bd70      	pop	{r4, r5, r6, pc}
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a17ee:	2000      	movs	r0, #0
 80a17f0:	bd70      	pop	{r4, r5, r6, pc}
 80a17f2:	bf00      	nop
 80a17f4:	f3af 8000 	nop.w
 80a17f8:	0a3d70a4 	.word	0x0a3d70a4
 80a17fc:	407fffd7 	.word	0x407fffd7

080a1800 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>:
}

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t VL53L0X::getVcselPulsePeriod(vcselPeriodType type)
{
 80a1800:	b508      	push	{r3, lr}
  if (type == VcselPeriodPreRange)
 80a1802:	b909      	cbnz	r1, 80a1808 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x8>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80a1804:	2150      	movs	r1, #80	; 0x50
 80a1806:	e002      	b.n	80a180e <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0xe>
  }
  else if (type == VcselPeriodFinalRange)
 80a1808:	2901      	cmp	r1, #1
 80a180a:	d106      	bne.n	80a181a <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x1a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a180c:	2170      	movs	r1, #112	; 0x70
 80a180e:	f7ff ff3c 	bl	80a168a <_ZN7VL53L0X7readRegEh>
 80a1812:	3001      	adds	r0, #1
 80a1814:	0040      	lsls	r0, r0, #1
 80a1816:	b2c0      	uxtb	r0, r0
 80a1818:	bd08      	pop	{r3, pc}
  }
  else { return 255; }
 80a181a:	20ff      	movs	r0, #255	; 0xff
}
 80a181c:	bd08      	pop	{r3, pc}

080a181e <_ZN7VL53L0X15startContinuousEm>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X::startContinuous(uint32_t period_ms)
{
 80a181e:	b538      	push	{r3, r4, r5, lr}
 80a1820:	4604      	mov	r4, r0
 80a1822:	460d      	mov	r5, r1
  writeReg(0x80, 0x01);
 80a1824:	2201      	movs	r2, #1
 80a1826:	2180      	movs	r1, #128	; 0x80
 80a1828:	f7ff fec0 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a182c:	2201      	movs	r2, #1
 80a182e:	21ff      	movs	r1, #255	; 0xff
 80a1830:	4620      	mov	r0, r4
 80a1832:	f7ff febb 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a1836:	2200      	movs	r2, #0
 80a1838:	4611      	mov	r1, r2
 80a183a:	4620      	mov	r0, r4
 80a183c:	f7ff feb6 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x91, stop_variable);
 80a1840:	7c22      	ldrb	r2, [r4, #16]
 80a1842:	2191      	movs	r1, #145	; 0x91
 80a1844:	4620      	mov	r0, r4
 80a1846:	f7ff feb1 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a184a:	2201      	movs	r2, #1
 80a184c:	2100      	movs	r1, #0
 80a184e:	4620      	mov	r0, r4
 80a1850:	f7ff feac 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1854:	2200      	movs	r2, #0
 80a1856:	21ff      	movs	r1, #255	; 0xff
 80a1858:	4620      	mov	r0, r4
 80a185a:	f7ff fea7 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a185e:	2200      	movs	r2, #0
 80a1860:	2180      	movs	r1, #128	; 0x80
 80a1862:	4620      	mov	r0, r4
 80a1864:	f7ff fea2 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  if (period_ms != 0)
 80a1868:	b16d      	cbz	r5, 80a1886 <_ZN7VL53L0X15startContinuousEm+0x68>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 80a186a:	21f8      	movs	r1, #248	; 0xf8
 80a186c:	4620      	mov	r0, r4
 80a186e:	f7ff ff2c 	bl	80a16ca <_ZN7VL53L0X12readReg16BitEh>

    if (osc_calibrate_val != 0)
 80a1872:	b100      	cbz	r0, 80a1876 <_ZN7VL53L0X15startContinuousEm+0x58>
    {
      period_ms *= osc_calibrate_val;
 80a1874:	4345      	muls	r5, r0
    }

    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 80a1876:	462a      	mov	r2, r5
 80a1878:	2104      	movs	r1, #4
 80a187a:	4620      	mov	r0, r4
 80a187c:	f7ff feda 	bl	80a1634 <_ZN7VL53L0X13writeReg32BitEhm>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 80a1880:	2204      	movs	r2, #4
 80a1882:	2100      	movs	r1, #0
 80a1884:	e001      	b.n	80a188a <_ZN7VL53L0X15startContinuousEm+0x6c>
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a1886:	4629      	mov	r1, r5
 80a1888:	2202      	movs	r2, #2
 80a188a:	4620      	mov	r0, r4
  }
}
 80a188c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a1890:	f7ff be8c 	b.w	80a15ac <_ZN7VL53L0X8writeRegEhh>

080a1894 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t VL53L0X::readRangeContinuousMillimeters(void)
{
 80a1894:	b538      	push	{r3, r4, r5, lr}
 80a1896:	4604      	mov	r4, r0
 80a1898:	f001 fcf6 	bl	80a3288 <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a189c:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a189e:	2113      	movs	r1, #19
 80a18a0:	4620      	mov	r0, r4
 80a18a2:	f7ff fef2 	bl	80a168a <_ZN7VL53L0X7readRegEh>
 80a18a6:	0743      	lsls	r3, r0, #29
 80a18a8:	d10e      	bne.n	80a18c8 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0x34>
  {
    if (checkTimeoutExpired())
 80a18aa:	6863      	ldr	r3, [r4, #4]
 80a18ac:	2b00      	cmp	r3, #0
 80a18ae:	d0f6      	beq.n	80a189e <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
 80a18b0:	f001 fcea 	bl	80a3288 <HAL_Timer_Get_Milli_Seconds>
 80a18b4:	68e3      	ldr	r3, [r4, #12]
 80a18b6:	1ac0      	subs	r0, r0, r3
 80a18b8:	6863      	ldr	r3, [r4, #4]
 80a18ba:	4298      	cmp	r0, r3
 80a18bc:	d9ef      	bls.n	80a189e <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
    {
      did_timeout = true;
 80a18be:	2301      	movs	r3, #1
 80a18c0:	7223      	strb	r3, [r4, #8]
      return 65535;
 80a18c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  return range;
}
 80a18c6:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);
 80a18c8:	211e      	movs	r1, #30
 80a18ca:	4620      	mov	r0, r4
 80a18cc:	f7ff fefd 	bl	80a16ca <_ZN7VL53L0X12readReg16BitEh>
 80a18d0:	4605      	mov	r5, r0

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a18d2:	2201      	movs	r2, #1
 80a18d4:	4620      	mov	r0, r4
 80a18d6:	210b      	movs	r1, #11
 80a18d8:	f7ff fe68 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
 80a18dc:	4628      	mov	r0, r5
 80a18de:	bd38      	pop	{r3, r4, r5, pc}

080a18e0 <_ZN7VL53L0X11getSpadInfoEPhPb>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X::getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80a18e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a18e2:	4604      	mov	r4, r0
 80a18e4:	460f      	mov	r7, r1
 80a18e6:	4616      	mov	r6, r2
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80a18e8:	2180      	movs	r1, #128	; 0x80
 80a18ea:	2201      	movs	r2, #1
 80a18ec:	f7ff fe5e 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a18f0:	2201      	movs	r2, #1
 80a18f2:	21ff      	movs	r1, #255	; 0xff
 80a18f4:	4620      	mov	r0, r4
 80a18f6:	f7ff fe59 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a18fa:	2200      	movs	r2, #0
 80a18fc:	4611      	mov	r1, r2
 80a18fe:	4620      	mov	r0, r4
 80a1900:	f7ff fe54 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x06);
 80a1904:	2206      	movs	r2, #6
 80a1906:	21ff      	movs	r1, #255	; 0xff
 80a1908:	4620      	mov	r0, r4
 80a190a:	f7ff fe4f 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg(0x83) | 0x04);
 80a190e:	2183      	movs	r1, #131	; 0x83
 80a1910:	4620      	mov	r0, r4
 80a1912:	f7ff feba 	bl	80a168a <_ZN7VL53L0X7readRegEh>
 80a1916:	f040 0204 	orr.w	r2, r0, #4
 80a191a:	b2d2      	uxtb	r2, r2
 80a191c:	2183      	movs	r1, #131	; 0x83
 80a191e:	4620      	mov	r0, r4
 80a1920:	f7ff fe44 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x07);
 80a1924:	2207      	movs	r2, #7
 80a1926:	21ff      	movs	r1, #255	; 0xff
 80a1928:	4620      	mov	r0, r4
 80a192a:	f7ff fe3f 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x81, 0x01);
 80a192e:	2201      	movs	r2, #1
 80a1930:	2181      	movs	r1, #129	; 0x81
 80a1932:	4620      	mov	r0, r4
 80a1934:	f7ff fe3a 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a1938:	2201      	movs	r2, #1
 80a193a:	2180      	movs	r1, #128	; 0x80
 80a193c:	4620      	mov	r0, r4
 80a193e:	f7ff fe35 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x94, 0x6b);
 80a1942:	226b      	movs	r2, #107	; 0x6b
 80a1944:	2194      	movs	r1, #148	; 0x94
 80a1946:	4620      	mov	r0, r4
 80a1948:	f7ff fe30 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, 0x00);
 80a194c:	2200      	movs	r2, #0
 80a194e:	2183      	movs	r1, #131	; 0x83
 80a1950:	4620      	mov	r0, r4
 80a1952:	f7ff fe2b 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
 80a1956:	f001 fc97 	bl	80a3288 <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a195a:	60e0      	str	r0, [r4, #12]
  while (readReg(0x83) == 0x00)
 80a195c:	2183      	movs	r1, #131	; 0x83
 80a195e:	4620      	mov	r0, r4
 80a1960:	f7ff fe93 	bl	80a168a <_ZN7VL53L0X7readRegEh>
 80a1964:	4605      	mov	r5, r0
 80a1966:	b958      	cbnz	r0, 80a1980 <_ZN7VL53L0X11getSpadInfoEPhPb+0xa0>
  {
    if (checkTimeoutExpired()) { return false; }
 80a1968:	6863      	ldr	r3, [r4, #4]
 80a196a:	2b00      	cmp	r3, #0
 80a196c:	d0f6      	beq.n	80a195c <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a196e:	f001 fc8b 	bl	80a3288 <HAL_Timer_Get_Milli_Seconds>
 80a1972:	68e3      	ldr	r3, [r4, #12]
 80a1974:	1ac0      	subs	r0, r0, r3
 80a1976:	6863      	ldr	r3, [r4, #4]
 80a1978:	4298      	cmp	r0, r3
 80a197a:	d9ef      	bls.n	80a195c <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a197c:	4628      	mov	r0, r5

  writeReg(0xFF, 0x00);
  writeReg(0x80, 0x00);

  return true;
}
 80a197e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  startTimeout();
  while (readReg(0x83) == 0x00)
  {
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
 80a1980:	2201      	movs	r2, #1
 80a1982:	4620      	mov	r0, r4
 80a1984:	2183      	movs	r1, #131	; 0x83
 80a1986:	f7ff fe11 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  tmp = readReg(0x92);
 80a198a:	2192      	movs	r1, #146	; 0x92
 80a198c:	4620      	mov	r0, r4
 80a198e:	f7ff fe7c 	bl	80a168a <_ZN7VL53L0X7readRegEh>

  *count = tmp & 0x7f;
 80a1992:	f000 037f 	and.w	r3, r0, #127	; 0x7f
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a1996:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
 80a199a:	703b      	strb	r3, [r7, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;

  writeReg(0x81, 0x00);
 80a199c:	2200      	movs	r2, #0
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a199e:	7030      	strb	r0, [r6, #0]

  writeReg(0x81, 0x00);
 80a19a0:	2181      	movs	r1, #129	; 0x81
 80a19a2:	4620      	mov	r0, r4
 80a19a4:	f7ff fe02 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x06);
 80a19a8:	2206      	movs	r2, #6
 80a19aa:	4620      	mov	r0, r4
 80a19ac:	21ff      	movs	r1, #255	; 0xff
 80a19ae:	f7ff fdfd 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg( 0x83  & ~0x04));
 80a19b2:	2183      	movs	r1, #131	; 0x83
 80a19b4:	4620      	mov	r0, r4
 80a19b6:	f7ff fe68 	bl	80a168a <_ZN7VL53L0X7readRegEh>
 80a19ba:	2183      	movs	r1, #131	; 0x83
 80a19bc:	4602      	mov	r2, r0
 80a19be:	4620      	mov	r0, r4
 80a19c0:	f7ff fdf4 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a19c4:	4620      	mov	r0, r4
 80a19c6:	2201      	movs	r2, #1
 80a19c8:	21ff      	movs	r1, #255	; 0xff
 80a19ca:	f7ff fdef 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a19ce:	4620      	mov	r0, r4
 80a19d0:	2201      	movs	r2, #1
 80a19d2:	2100      	movs	r1, #0
 80a19d4:	f7ff fdea 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a19d8:	4620      	mov	r0, r4
 80a19da:	2200      	movs	r2, #0
 80a19dc:	21ff      	movs	r1, #255	; 0xff
 80a19de:	f7ff fde5 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a19e2:	4620      	mov	r0, r4
 80a19e4:	2200      	movs	r2, #0
 80a19e6:	2180      	movs	r1, #128	; 0x80
 80a19e8:	f7ff fde0 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  return true;
 80a19ec:	2001      	movs	r0, #1
 80a19ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a19f0 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>:
}

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X::getSequenceStepEnables(SequenceStepEnables * enables)
{
 80a19f0:	b510      	push	{r4, lr}
 80a19f2:	460c      	mov	r4, r1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 80a19f4:	2101      	movs	r1, #1
 80a19f6:	f7ff fe48 	bl	80a168a <_ZN7VL53L0X7readRegEh>

  enables->tcc          = (sequence_config >> 4) & 0x1;
 80a19fa:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80a19fe:	7023      	strb	r3, [r4, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 80a1a00:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80a1a04:	70a3      	strb	r3, [r4, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 80a1a06:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80a1a0a:	7063      	strb	r3, [r4, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a1a0c:	f3c0 1380 	ubfx	r3, r0, #6, #1
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a1a10:	f3c0 10c0 	ubfx	r0, r0, #7, #1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);

  enables->tcc          = (sequence_config >> 4) & 0x1;
  enables->dss          = (sequence_config >> 3) & 0x1;
  enables->msrc         = (sequence_config >> 2) & 0x1;
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a1a14:	70e3      	strb	r3, [r4, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a1a16:	7120      	strb	r0, [r4, #4]
 80a1a18:	bd10      	pop	{r4, pc}

080a1a1a <_ZN7VL53L0X13decodeTimeoutEm>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X::decodeTimeout(uint32_t reg_val)
{
 80a1a1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a1a1e:	4298      	cmp	r0, r3
 80a1a20:	bf28      	it	cs
 80a1a22:	4618      	movcs	r0, r3
  if (reg_val > 0xFFFF) reg_val = 0xFFFF;
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80a1a24:	b2c3      	uxtb	r3, r0
 80a1a26:	0a00      	lsrs	r0, r0, #8
 80a1a28:	fa03 f000 	lsl.w	r0, r3, r0
 80a1a2c:	3001      	adds	r0, #1
}
 80a1a2e:	b280      	uxth	r0, r0
 80a1a30:	4770      	bx	lr

080a1a32 <_ZN7VL53L0X13encodeTimeoutEm>:
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a1a32:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80a1a36:	d201      	bcs.n	80a1a3c <_ZN7VL53L0X13encodeTimeoutEm+0xa>

  // format: "(LSByte * 2^MSByte) + 1"
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
 80a1a38:	b178      	cbz	r0, 80a1a5a <_ZN7VL53L0X13encodeTimeoutEm+0x28>
 80a1a3a:	e001      	b.n	80a1a40 <_ZN7VL53L0X13encodeTimeoutEm+0xe>
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a1a3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;
 80a1a40:	3801      	subs	r0, #1
 80a1a42:	2300      	movs	r3, #0

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a1a44:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 80a1a48:	b29a      	uxth	r2, r3
 80a1a4a:	f103 0301 	add.w	r3, r3, #1
 80a1a4e:	d001      	beq.n	80a1a54 <_ZN7VL53L0X13encodeTimeoutEm+0x22>
    {
      ls_byte >>= 1;
 80a1a50:	0840      	lsrs	r0, r0, #1

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a1a52:	e7f7      	b.n	80a1a44 <_ZN7VL53L0X13encodeTimeoutEm+0x12>
    {
      ls_byte >>= 1;
      ms_byte++;
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 80a1a54:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80a1a58:	b280      	uxth	r0, r0
  }
  else { return 0; }
}
 80a1a5a:	4770      	bx	lr

080a1a5c <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1a5c:	4b08      	ldr	r3, [pc, #32]	; (80a1a80 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh+0x24>)

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a1a5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1a62:	4359      	muls	r1, r3
}

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80a1a64:	b510      	push	{r4, lr}
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1a66:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a1a6a:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 80a1a6e:	fbb1 f3f2 	udiv	r3, r1, r2
 80a1a72:	fbb1 f1f4 	udiv	r1, r1, r4
 80a1a76:	fb00 1003 	mla	r0, r0, r3, r1
}
 80a1a7a:	fbb0 f0f2 	udiv	r0, r0, r2
 80a1a7e:	bd10      	pop	{r4, pc}
 80a1a80:	003a2f00 	.word	0x003a2f00

080a1a84 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a1a84:	b570      	push	{r4, r5, r6, lr}
 80a1a86:	460e      	mov	r6, r1
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a1a88:	2100      	movs	r1, #0
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a1a8a:	4614      	mov	r4, r2
 80a1a8c:	4605      	mov	r5, r0
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a1a8e:	f7ff feb7 	bl	80a1800 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a1a92:	2146      	movs	r1, #70	; 0x46
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a1a94:	8020      	strh	r0, [r4, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a1a96:	4628      	mov	r0, r5
 80a1a98:	f7ff fdf7 	bl	80a168a <_ZN7VL53L0X7readRegEh>
 80a1a9c:	3001      	adds	r0, #1
 80a1a9e:	b280      	uxth	r0, r0
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a1aa0:	7821      	ldrb	r1, [r4, #0]
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a1aa2:	80a0      	strh	r0, [r4, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a1aa4:	f7ff ffda 	bl	80a1a5c <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a1aa8:	2151      	movs	r1, #81	; 0x51
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a1aaa:	60e0      	str	r0, [r4, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a1aac:	4628      	mov	r0, r5
 80a1aae:	f7ff fe0c 	bl	80a16ca <_ZN7VL53L0X12readReg16BitEh>
 80a1ab2:	f7ff ffb2 	bl	80a1a1a <_ZN7VL53L0X13decodeTimeoutEm>
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a1ab6:	7821      	ldrb	r1, [r4, #0]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a1ab8:	80e0      	strh	r0, [r4, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a1aba:	f7ff ffcf 	bl	80a1a5c <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a1abe:	2170      	movs	r1, #112	; 0x70

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a1ac0:	6120      	str	r0, [r4, #16]
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a1ac2:	4628      	mov	r0, r5
 80a1ac4:	f7ff fde1 	bl	80a168a <_ZN7VL53L0X7readRegEh>
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 80a1ac8:	3001      	adds	r0, #1
 80a1aca:	0040      	lsls	r0, r0, #1
 80a1acc:	b2c0      	uxtb	r0, r0
 80a1ace:	8060      	strh	r0, [r4, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a1ad0:	2171      	movs	r1, #113	; 0x71
 80a1ad2:	4628      	mov	r0, r5
 80a1ad4:	f7ff fdf9 	bl	80a16ca <_ZN7VL53L0X12readReg16BitEh>
 80a1ad8:	f7ff ff9f 	bl	80a1a1a <_ZN7VL53L0X13decodeTimeoutEm>
 80a1adc:	8120      	strh	r0, [r4, #8]

  if (enables->pre_range)
 80a1ade:	78f3      	ldrb	r3, [r6, #3]
 80a1ae0:	b113      	cbz	r3, 80a1ae8 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE+0x64>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 80a1ae2:	88e3      	ldrh	r3, [r4, #6]
 80a1ae4:	1ac0      	subs	r0, r0, r3
 80a1ae6:	8120      	strh	r0, [r4, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 80a1ae8:	78a1      	ldrb	r1, [r4, #2]
 80a1aea:	8920      	ldrh	r0, [r4, #8]
 80a1aec:	f7ff ffb6 	bl	80a1a5c <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->final_range_vcsel_period_pclks);
 80a1af0:	6160      	str	r0, [r4, #20]
 80a1af2:	bd70      	pop	{r4, r5, r6, pc}

080a1af4 <_ZN7VL53L0X26getMeasurementTimingBudgetEv>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t VL53L0X::getMeasurementTimingBudget(void)
{
 80a1af4:	b510      	push	{r4, lr}
 80a1af6:	4604      	mov	r4, r0
 80a1af8:	b088      	sub	sp, #32
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a1afa:	4669      	mov	r1, sp
 80a1afc:	f7ff ff78 	bl	80a19f0 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a1b00:	aa02      	add	r2, sp, #8
 80a1b02:	4669      	mov	r1, sp
 80a1b04:	4620      	mov	r0, r4
 80a1b06:	f7ff ffbd 	bl	80a1a84 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a1b0a:	f89d 3000 	ldrb.w	r3, [sp]
 80a1b0e:	b11b      	cbz	r3, 80a1b18 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x24>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a1b10:	9805      	ldr	r0, [sp, #20]
 80a1b12:	f600 5084 	addw	r0, r0, #3460	; 0xd84
 80a1b16:	e001      	b.n	80a1b1c <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x28>
  uint16_t const DssOverhead        = 690;
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80a1b18:	f640 3036 	movw	r0, #2870	; 0xb36
  if (enables.tcc)
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a1b1c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a1b20:	b12b      	cbz	r3, 80a1b2e <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x3a>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a1b22:	9b05      	ldr	r3, [sp, #20]
 80a1b24:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a1b28:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a1b2c:	e006      	b.n	80a1b3c <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  }
  else if (enables.msrc)
 80a1b2e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a1b32:	b11b      	cbz	r3, 80a1b3c <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a1b34:	9b05      	ldr	r3, [sp, #20]
 80a1b36:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a1b3a:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a1b3c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80a1b40:	b11b      	cbz	r3, 80a1b4a <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x56>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a1b42:	9b06      	ldr	r3, [sp, #24]
 80a1b44:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a1b48:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a1b4a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a1b4e:	b11b      	cbz	r3, 80a1b58 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x64>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80a1b50:	9b07      	ldr	r3, [sp, #28]
 80a1b52:	f203 2326 	addw	r3, r3, #550	; 0x226
 80a1b56:	4418      	add	r0, r3
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 80a1b58:	6160      	str	r0, [r4, #20]
  return budget_us;
}
 80a1b5a:	b008      	add	sp, #32
 80a1b5c:	bd10      	pop	{r4, pc}
	...

080a1b60 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1b60:	4b08      	ldr	r3, [pc, #32]	; (80a1b84 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh+0x24>)

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a1b62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1b66:	4359      	muls	r1, r3

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a1b68:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1b6c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a1b70:	fbb1 f3f3 	udiv	r3, r1, r3
 80a1b74:	fbb1 f1f2 	udiv	r1, r1, r2
 80a1b78:	fb02 3000 	mla	r0, r2, r0, r3
}
 80a1b7c:	fbb0 f0f1 	udiv	r0, r0, r1
 80a1b80:	4770      	bx	lr
 80a1b82:	bf00      	nop
 80a1b84:	003a2f00 	.word	0x003a2f00

080a1b88 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>:
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a1b88:	f644 631f 	movw	r3, #19999	; 0x4e1f
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a1b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a1b8e:	4299      	cmp	r1, r3
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a1b90:	b089      	sub	sp, #36	; 0x24
 80a1b92:	4606      	mov	r6, r0
 80a1b94:	460d      	mov	r5, r1
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a1b96:	d942      	bls.n	80a1c1e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>

  uint32_t used_budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a1b98:	4669      	mov	r1, sp
 80a1b9a:	f7ff ff29 	bl	80a19f0 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a1b9e:	aa02      	add	r2, sp, #8
 80a1ba0:	4669      	mov	r1, sp
 80a1ba2:	4630      	mov	r0, r6
 80a1ba4:	f7ff ff6e 	bl	80a1a84 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a1ba8:	f89d 3000 	ldrb.w	r3, [sp]
 80a1bac:	b11b      	cbz	r3, 80a1bb6 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x2e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a1bae:	9805      	ldr	r0, [sp, #20]
 80a1bb0:	f600 3036 	addw	r0, r0, #2870	; 0xb36
 80a1bb4:	e001      	b.n	80a1bba <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x32>

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80a1bb6:	f640 00e8 	movw	r0, #2280	; 0x8e8
  if (enables.tcc)
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a1bba:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a1bbe:	b12b      	cbz	r3, 80a1bcc <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x44>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a1bc0:	9b05      	ldr	r3, [sp, #20]
 80a1bc2:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a1bc6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a1bca:	e006      	b.n	80a1bda <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  }
  else if (enables.msrc)
 80a1bcc:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a1bd0:	b11b      	cbz	r3, 80a1bda <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a1bd2:	9b05      	ldr	r3, [sp, #20]
 80a1bd4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a1bd8:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a1bda:	f89d 7003 	ldrb.w	r7, [sp, #3]
 80a1bde:	b11f      	cbz	r7, 80a1be8 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x60>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a1be0:	9b06      	ldr	r3, [sp, #24]
 80a1be2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a1be6:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a1be8:	f89d 4004 	ldrb.w	r4, [sp, #4]
 80a1bec:	b1ac      	cbz	r4, 80a1c1a <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x92>
  {
    used_budget_us += FinalRangeOverhead;
 80a1bee:	f200 2026 	addw	r0, r0, #550	; 0x226
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80a1bf2:	4285      	cmp	r5, r0
 80a1bf4:	d313      	bcc.n	80a1c1e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint32_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80a1bf6:	f89d 100a 	ldrb.w	r1, [sp, #10]
 80a1bfa:	1a28      	subs	r0, r5, r0
 80a1bfc:	f7ff ffb0 	bl	80a1b60 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>

    if (enables.pre_range)
 80a1c00:	b117      	cbz	r7, 80a1c08 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x80>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80a1c02:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80a1c06:	4418      	add	r0, r3
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80a1c08:	f7ff ff13 	bl	80a1a32 <_ZN7VL53L0X13encodeTimeoutEm>
      encodeTimeout(final_range_timeout_mclks));
 80a1c0c:	2171      	movs	r1, #113	; 0x71
 80a1c0e:	4602      	mov	r2, r0
 80a1c10:	4630      	mov	r0, r6
 80a1c12:	f7ff fcf0 	bl	80a15f6 <_ZN7VL53L0X13writeReg16BitEht>

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 80a1c16:	6175      	str	r5, [r6, #20]
 80a1c18:	e002      	b.n	80a1c20 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  }
  return true;
 80a1c1a:	2401      	movs	r4, #1
 80a1c1c:	e000      	b.n	80a1c20 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a1c1e:	2400      	movs	r4, #0
    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
  }
  return true;
}
 80a1c20:	4620      	mov	r0, r4
 80a1c22:	b009      	add	sp, #36	; 0x24
 80a1c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1c26 <_ZN7VL53L0X27performSingleRefCalibrationEh>:
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a1c26:	b538      	push	{r3, r4, r5, lr}
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a1c28:	f041 0201 	orr.w	r2, r1, #1
 80a1c2c:	2100      	movs	r1, #0
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a1c2e:	4604      	mov	r4, r0
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a1c30:	f7ff fcbc 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
 80a1c34:	f001 fb28 	bl	80a3288 <HAL_Timer_Get_Milli_Seconds>

  startTimeout();
 80a1c38:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a1c3a:	2113      	movs	r1, #19
 80a1c3c:	4620      	mov	r0, r4
 80a1c3e:	f7ff fd24 	bl	80a168a <_ZN7VL53L0X7readRegEh>
 80a1c42:	f010 0507 	ands.w	r5, r0, #7
 80a1c46:	d10b      	bne.n	80a1c60 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x3a>
  {
    if (checkTimeoutExpired()) { return false; }
 80a1c48:	6863      	ldr	r3, [r4, #4]
 80a1c4a:	2b00      	cmp	r3, #0
 80a1c4c:	d0f5      	beq.n	80a1c3a <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a1c4e:	f001 fb1b 	bl	80a3288 <HAL_Timer_Get_Milli_Seconds>
 80a1c52:	68e3      	ldr	r3, [r4, #12]
 80a1c54:	1ac0      	subs	r0, r0, r3
 80a1c56:	6863      	ldr	r3, [r4, #4]
 80a1c58:	4298      	cmp	r0, r3
 80a1c5a:	d9ee      	bls.n	80a1c3a <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a1c5c:	4628      	mov	r0, r5
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  writeReg(SYSRANGE_START, 0x00);

  return true;
}
 80a1c5e:	bd38      	pop	{r3, r4, r5, pc}
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
  {
    if (checkTimeoutExpired()) { return false; }
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a1c60:	4620      	mov	r0, r4
 80a1c62:	2201      	movs	r2, #1
 80a1c64:	210b      	movs	r1, #11
 80a1c66:	f7ff fca1 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  writeReg(SYSRANGE_START, 0x00);
 80a1c6a:	2200      	movs	r2, #0
 80a1c6c:	4620      	mov	r0, r4
 80a1c6e:	4611      	mov	r1, r2
 80a1c70:	f7ff fc9c 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
 80a1c74:	2001      	movs	r0, #1
 80a1c76:	bd38      	pop	{r3, r4, r5, pc}

080a1c78 <_ZN7VL53L0X4initEb>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool VL53L0X::init(bool io_2v8)
{
 80a1c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1c7a:	4604      	mov	r4, r0
 80a1c7c:	b085      	sub	sp, #20
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 80a1c7e:	b149      	cbz	r1, 80a1c94 <_ZN7VL53L0X4initEb+0x1c>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 80a1c80:	2189      	movs	r1, #137	; 0x89
 80a1c82:	f7ff fd02 	bl	80a168a <_ZN7VL53L0X7readRegEh>
 80a1c86:	f040 0201 	orr.w	r2, r0, #1
 80a1c8a:	b2d2      	uxtb	r2, r2
 80a1c8c:	2189      	movs	r1, #137	; 0x89
 80a1c8e:	4620      	mov	r0, r4
 80a1c90:	f7ff fc8c 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 80a1c94:	2200      	movs	r2, #0
 80a1c96:	2188      	movs	r1, #136	; 0x88
 80a1c98:	4620      	mov	r0, r4
 80a1c9a:	f7ff fc87 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a1c9e:	2201      	movs	r2, #1
 80a1ca0:	2180      	movs	r1, #128	; 0x80
 80a1ca2:	4620      	mov	r0, r4
 80a1ca4:	f7ff fc82 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a1ca8:	2201      	movs	r2, #1
 80a1caa:	21ff      	movs	r1, #255	; 0xff
 80a1cac:	4620      	mov	r0, r4
 80a1cae:	f7ff fc7d 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a1cb2:	2200      	movs	r2, #0
 80a1cb4:	4611      	mov	r1, r2
 80a1cb6:	4620      	mov	r0, r4
 80a1cb8:	f7ff fc78 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  stop_variable = readReg(0x91);
 80a1cbc:	2191      	movs	r1, #145	; 0x91
 80a1cbe:	4620      	mov	r0, r4
 80a1cc0:	f7ff fce3 	bl	80a168a <_ZN7VL53L0X7readRegEh>
  writeReg(0x00, 0x01);
 80a1cc4:	2201      	movs	r2, #1
  writeReg(0x88, 0x00);

  writeReg(0x80, 0x01);
  writeReg(0xFF, 0x01);
  writeReg(0x00, 0x00);
  stop_variable = readReg(0x91);
 80a1cc6:	7420      	strb	r0, [r4, #16]
  writeReg(0x00, 0x01);
 80a1cc8:	2100      	movs	r1, #0
 80a1cca:	4620      	mov	r0, r4
 80a1ccc:	f7ff fc6e 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1cd0:	2200      	movs	r2, #0
 80a1cd2:	21ff      	movs	r1, #255	; 0xff
 80a1cd4:	4620      	mov	r0, r4
 80a1cd6:	f7ff fc69 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a1cda:	2200      	movs	r2, #0
 80a1cdc:	2180      	movs	r1, #128	; 0x80
 80a1cde:	4620      	mov	r0, r4
 80a1ce0:	f7ff fc64 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80a1ce4:	2160      	movs	r1, #96	; 0x60
 80a1ce6:	4620      	mov	r0, r4
 80a1ce8:	f7ff fccf 	bl	80a168a <_ZN7VL53L0X7readRegEh>
 80a1cec:	f040 0212 	orr.w	r2, r0, #18
 80a1cf0:	b2d2      	uxtb	r2, r2
 80a1cf2:	2160      	movs	r1, #96	; 0x60
 80a1cf4:	4620      	mov	r0, r4
 80a1cf6:	f7ff fc59 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80a1cfa:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a1cfe:	4620      	mov	r0, r4
 80a1d00:	f7ff fd56 	bl	80a17b0 <_ZN7VL53L0X18setSignalRateLimitEf>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80a1d04:	22ff      	movs	r2, #255	; 0xff
 80a1d06:	2101      	movs	r1, #1
 80a1d08:	4620      	mov	r0, r4
 80a1d0a:	f7ff fc4f 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80a1d0e:	f10d 0207 	add.w	r2, sp, #7
 80a1d12:	f10d 0106 	add.w	r1, sp, #6
 80a1d16:	4620      	mov	r0, r4
 80a1d18:	f7ff fde2 	bl	80a18e0 <_ZN7VL53L0X11getSpadInfoEPhPb>
 80a1d1c:	b908      	cbnz	r0, 80a1d22 <_ZN7VL53L0X4initEb+0xaa>
 80a1d1e:	2500      	movs	r5, #0
 80a1d20:	e21d      	b.n	80a215e <_ZN7VL53L0X4initEb+0x4e6>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a1d22:	2306      	movs	r3, #6
 80a1d24:	aa02      	add	r2, sp, #8
 80a1d26:	21b0      	movs	r1, #176	; 0xb0
 80a1d28:	4620      	mov	r0, r4
 80a1d2a:	f7ff fd17 	bl	80a175c <_ZN7VL53L0X9readMultiEhPhh>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 80a1d2e:	2201      	movs	r2, #1
 80a1d30:	21ff      	movs	r1, #255	; 0xff
 80a1d32:	4620      	mov	r0, r4
 80a1d34:	f7ff fc3a 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80a1d38:	2200      	movs	r2, #0
 80a1d3a:	214f      	movs	r1, #79	; 0x4f
 80a1d3c:	4620      	mov	r0, r4
 80a1d3e:	f7ff fc35 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80a1d42:	222c      	movs	r2, #44	; 0x2c
 80a1d44:	214e      	movs	r1, #78	; 0x4e
 80a1d46:	4620      	mov	r0, r4
 80a1d48:	f7ff fc30 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1d4c:	2200      	movs	r2, #0
 80a1d4e:	21ff      	movs	r1, #255	; 0xff
 80a1d50:	4620      	mov	r0, r4
 80a1d52:	f7ff fc2b 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1d56:	2500      	movs	r5, #0

  writeReg(0xFF, 0x01);
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80a1d58:	4620      	mov	r0, r4
 80a1d5a:	21b6      	movs	r1, #182	; 0xb6
 80a1d5c:	22b4      	movs	r2, #180	; 0xb4
 80a1d5e:	f7ff fc25 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;
 80a1d62:	4629      	mov	r1, r5
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a1d64:	f89d 3007 	ldrb.w	r3, [sp, #7]
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1d68:	f89d 6006 	ldrb.w	r6, [sp, #6]
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a1d6c:	2b00      	cmp	r3, #0
 80a1d6e:	bf14      	ite	ne
 80a1d70:	200c      	movne	r0, #12
 80a1d72:	2000      	moveq	r0, #0
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1d74:	2701      	movs	r7, #1
 80a1d76:	b2eb      	uxtb	r3, r5
 80a1d78:	08da      	lsrs	r2, r3, #3
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1d7a:	4298      	cmp	r0, r3
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1d7c:	f10d 0e10 	add.w	lr, sp, #16
 80a1d80:	f003 0307 	and.w	r3, r3, #7
 80a1d84:	4472      	add	r2, lr
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1d86:	d801      	bhi.n	80a1d8c <_ZN7VL53L0X4initEb+0x114>
 80a1d88:	428e      	cmp	r6, r1
 80a1d8a:	d108      	bne.n	80a1d9e <_ZN7VL53L0X4initEb+0x126>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1d8c:	f812 ec08 	ldrb.w	lr, [r2, #-8]
 80a1d90:	fa07 f303 	lsl.w	r3, r7, r3
 80a1d94:	ea2e 0303 	bic.w	r3, lr, r3
 80a1d98:	f802 3c08 	strb.w	r3, [r2, #-8]
 80a1d9c:	e007      	b.n	80a1dae <_ZN7VL53L0X4initEb+0x136>
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 80a1d9e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80a1da2:	fa42 f303 	asr.w	r3, r2, r3
 80a1da6:	07db      	lsls	r3, r3, #31
    {
      spads_enabled++;
 80a1da8:	bf44      	itt	mi
 80a1daa:	3101      	addmi	r1, #1
 80a1dac:	b2c9      	uxtbmi	r1, r1
 80a1dae:	3501      	adds	r5, #1
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
 80a1db0:	2d30      	cmp	r5, #48	; 0x30
 80a1db2:	d1e0      	bne.n	80a1d76 <_ZN7VL53L0X4initEb+0xfe>
    {
      spads_enabled++;
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a1db4:	2306      	movs	r3, #6
 80a1db6:	aa02      	add	r2, sp, #8
 80a1db8:	21b0      	movs	r1, #176	; 0xb0
 80a1dba:	4620      	mov	r0, r4
 80a1dbc:	f7ff fcad 	bl	80a171a <_ZN7VL53L0X10writeMultiEhPKhh>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 80a1dc0:	2201      	movs	r2, #1
 80a1dc2:	21ff      	movs	r1, #255	; 0xff
 80a1dc4:	4620      	mov	r0, r4
 80a1dc6:	f7ff fbf1 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a1dca:	2200      	movs	r2, #0
 80a1dcc:	4611      	mov	r1, r2
 80a1dce:	4620      	mov	r0, r4
 80a1dd0:	f7ff fbec 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1dd4:	2200      	movs	r2, #0
 80a1dd6:	21ff      	movs	r1, #255	; 0xff
 80a1dd8:	4620      	mov	r0, r4
 80a1dda:	f7ff fbe7 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x09, 0x00);
 80a1dde:	2200      	movs	r2, #0
 80a1de0:	2109      	movs	r1, #9
 80a1de2:	4620      	mov	r0, r4
 80a1de4:	f7ff fbe2 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x10, 0x00);
 80a1de8:	2200      	movs	r2, #0
 80a1dea:	2110      	movs	r1, #16
 80a1dec:	4620      	mov	r0, r4
 80a1dee:	f7ff fbdd 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x11, 0x00);
 80a1df2:	2200      	movs	r2, #0
 80a1df4:	2111      	movs	r1, #17
 80a1df6:	4620      	mov	r0, r4
 80a1df8:	f7ff fbd8 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x24, 0x01);
 80a1dfc:	2201      	movs	r2, #1
 80a1dfe:	2124      	movs	r1, #36	; 0x24
 80a1e00:	4620      	mov	r0, r4
 80a1e02:	f7ff fbd3 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x25, 0xFF);
 80a1e06:	22ff      	movs	r2, #255	; 0xff
 80a1e08:	2125      	movs	r1, #37	; 0x25
 80a1e0a:	4620      	mov	r0, r4
 80a1e0c:	f7ff fbce 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x75, 0x00);
 80a1e10:	2200      	movs	r2, #0
 80a1e12:	2175      	movs	r1, #117	; 0x75
 80a1e14:	4620      	mov	r0, r4
 80a1e16:	f7ff fbc9 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1e1a:	2201      	movs	r2, #1
 80a1e1c:	21ff      	movs	r1, #255	; 0xff
 80a1e1e:	4620      	mov	r0, r4
 80a1e20:	f7ff fbc4 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4E, 0x2C);
 80a1e24:	222c      	movs	r2, #44	; 0x2c
 80a1e26:	214e      	movs	r1, #78	; 0x4e
 80a1e28:	4620      	mov	r0, r4
 80a1e2a:	f7ff fbbf 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x00);
 80a1e2e:	2200      	movs	r2, #0
 80a1e30:	2148      	movs	r1, #72	; 0x48
 80a1e32:	4620      	mov	r0, r4
 80a1e34:	f7ff fbba 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x20);
 80a1e38:	2220      	movs	r2, #32
 80a1e3a:	4629      	mov	r1, r5
 80a1e3c:	4620      	mov	r0, r4
 80a1e3e:	f7ff fbb5 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1e42:	2200      	movs	r2, #0
 80a1e44:	21ff      	movs	r1, #255	; 0xff
 80a1e46:	4620      	mov	r0, r4
 80a1e48:	f7ff fbb0 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x09);
 80a1e4c:	2209      	movs	r2, #9
 80a1e4e:	4629      	mov	r1, r5
 80a1e50:	4620      	mov	r0, r4
 80a1e52:	f7ff fbab 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x54, 0x00);
 80a1e56:	2200      	movs	r2, #0
 80a1e58:	2154      	movs	r1, #84	; 0x54
 80a1e5a:	4620      	mov	r0, r4
 80a1e5c:	f7ff fba6 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a1e60:	2204      	movs	r2, #4
 80a1e62:	2131      	movs	r1, #49	; 0x31
 80a1e64:	4620      	mov	r0, r4
 80a1e66:	f7ff fba1 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x32, 0x03);
 80a1e6a:	2203      	movs	r2, #3
 80a1e6c:	2132      	movs	r1, #50	; 0x32
 80a1e6e:	4620      	mov	r0, r4
 80a1e70:	f7ff fb9c 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x83);
 80a1e74:	2283      	movs	r2, #131	; 0x83
 80a1e76:	2140      	movs	r1, #64	; 0x40
 80a1e78:	4620      	mov	r0, r4
 80a1e7a:	f7ff fb97 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x25);
 80a1e7e:	2225      	movs	r2, #37	; 0x25
 80a1e80:	2146      	movs	r1, #70	; 0x46
 80a1e82:	4620      	mov	r0, r4
 80a1e84:	f7ff fb92 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x60, 0x00);
 80a1e88:	2200      	movs	r2, #0
 80a1e8a:	2160      	movs	r1, #96	; 0x60
 80a1e8c:	4620      	mov	r0, r4
 80a1e8e:	f7ff fb8d 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x27, 0x00);
 80a1e92:	2200      	movs	r2, #0
 80a1e94:	2127      	movs	r1, #39	; 0x27
 80a1e96:	4620      	mov	r0, r4
 80a1e98:	f7ff fb88 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x50, 0x06);
 80a1e9c:	2206      	movs	r2, #6
 80a1e9e:	2150      	movs	r1, #80	; 0x50
 80a1ea0:	4620      	mov	r0, r4
 80a1ea2:	f7ff fb83 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x51, 0x00);
 80a1ea6:	2200      	movs	r2, #0
 80a1ea8:	2151      	movs	r1, #81	; 0x51
 80a1eaa:	4620      	mov	r0, r4
 80a1eac:	f7ff fb7e 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x52, 0x96);
 80a1eb0:	2296      	movs	r2, #150	; 0x96
 80a1eb2:	2152      	movs	r1, #82	; 0x52
 80a1eb4:	4620      	mov	r0, r4
 80a1eb6:	f7ff fb79 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x56, 0x08);
 80a1eba:	2208      	movs	r2, #8
 80a1ebc:	2156      	movs	r1, #86	; 0x56
 80a1ebe:	4620      	mov	r0, r4
 80a1ec0:	f7ff fb74 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x57, 0x30);
 80a1ec4:	462a      	mov	r2, r5
 80a1ec6:	2157      	movs	r1, #87	; 0x57
 80a1ec8:	4620      	mov	r0, r4
 80a1eca:	f7ff fb6f 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x61, 0x00);
 80a1ece:	2200      	movs	r2, #0
 80a1ed0:	2161      	movs	r1, #97	; 0x61
 80a1ed2:	4620      	mov	r0, r4
 80a1ed4:	f7ff fb6a 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x62, 0x00);
 80a1ed8:	2200      	movs	r2, #0
 80a1eda:	2162      	movs	r1, #98	; 0x62
 80a1edc:	4620      	mov	r0, r4
 80a1ede:	f7ff fb65 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x64, 0x00);
 80a1ee2:	2200      	movs	r2, #0
 80a1ee4:	2164      	movs	r1, #100	; 0x64
 80a1ee6:	4620      	mov	r0, r4
 80a1ee8:	f7ff fb60 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x65, 0x00);
 80a1eec:	2200      	movs	r2, #0
 80a1eee:	2165      	movs	r1, #101	; 0x65
 80a1ef0:	4620      	mov	r0, r4
 80a1ef2:	f7ff fb5b 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x66, 0xA0);
 80a1ef6:	22a0      	movs	r2, #160	; 0xa0
 80a1ef8:	2166      	movs	r1, #102	; 0x66
 80a1efa:	4620      	mov	r0, r4
 80a1efc:	f7ff fb56 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1f00:	2201      	movs	r2, #1
 80a1f02:	21ff      	movs	r1, #255	; 0xff
 80a1f04:	4620      	mov	r0, r4
 80a1f06:	f7ff fb51 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x22, 0x32);
 80a1f0a:	2232      	movs	r2, #50	; 0x32
 80a1f0c:	2122      	movs	r1, #34	; 0x22
 80a1f0e:	4620      	mov	r0, r4
 80a1f10:	f7ff fb4c 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x14);
 80a1f14:	2214      	movs	r2, #20
 80a1f16:	2147      	movs	r1, #71	; 0x47
 80a1f18:	4620      	mov	r0, r4
 80a1f1a:	f7ff fb47 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x49, 0xFF);
 80a1f1e:	22ff      	movs	r2, #255	; 0xff
 80a1f20:	2149      	movs	r1, #73	; 0x49
 80a1f22:	4620      	mov	r0, r4
 80a1f24:	f7ff fb42 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4A, 0x00);
 80a1f28:	2200      	movs	r2, #0
 80a1f2a:	214a      	movs	r1, #74	; 0x4a
 80a1f2c:	4620      	mov	r0, r4
 80a1f2e:	f7ff fb3d 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1f32:	2200      	movs	r2, #0
 80a1f34:	21ff      	movs	r1, #255	; 0xff
 80a1f36:	4620      	mov	r0, r4
 80a1f38:	f7ff fb38 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7A, 0x0A);
 80a1f3c:	220a      	movs	r2, #10
 80a1f3e:	217a      	movs	r1, #122	; 0x7a
 80a1f40:	4620      	mov	r0, r4
 80a1f42:	f7ff fb33 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7B, 0x00);
 80a1f46:	2200      	movs	r2, #0
 80a1f48:	217b      	movs	r1, #123	; 0x7b
 80a1f4a:	4620      	mov	r0, r4
 80a1f4c:	f7ff fb2e 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x78, 0x21);
 80a1f50:	2221      	movs	r2, #33	; 0x21
 80a1f52:	2178      	movs	r1, #120	; 0x78
 80a1f54:	4620      	mov	r0, r4
 80a1f56:	f7ff fb29 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1f5a:	2201      	movs	r2, #1
 80a1f5c:	21ff      	movs	r1, #255	; 0xff
 80a1f5e:	4620      	mov	r0, r4
 80a1f60:	f7ff fb24 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x23, 0x34);
 80a1f64:	2234      	movs	r2, #52	; 0x34
 80a1f66:	2123      	movs	r1, #35	; 0x23
 80a1f68:	4620      	mov	r0, r4
 80a1f6a:	f7ff fb1f 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x42, 0x00);
 80a1f6e:	2200      	movs	r2, #0
 80a1f70:	2142      	movs	r1, #66	; 0x42
 80a1f72:	4620      	mov	r0, r4
 80a1f74:	f7ff fb1a 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0xFF);
 80a1f78:	22ff      	movs	r2, #255	; 0xff
 80a1f7a:	2144      	movs	r1, #68	; 0x44
 80a1f7c:	4620      	mov	r0, r4
 80a1f7e:	f7ff fb15 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x26);
 80a1f82:	2226      	movs	r2, #38	; 0x26
 80a1f84:	2145      	movs	r1, #69	; 0x45
 80a1f86:	4620      	mov	r0, r4
 80a1f88:	f7ff fb10 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x05);
 80a1f8c:	2205      	movs	r2, #5
 80a1f8e:	2146      	movs	r1, #70	; 0x46
 80a1f90:	4620      	mov	r0, r4
 80a1f92:	f7ff fb0b 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x40);
 80a1f96:	2240      	movs	r2, #64	; 0x40
 80a1f98:	4611      	mov	r1, r2
 80a1f9a:	4620      	mov	r0, r4
 80a1f9c:	f7ff fb06 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0E, 0x06);
 80a1fa0:	2206      	movs	r2, #6
 80a1fa2:	210e      	movs	r1, #14
 80a1fa4:	4620      	mov	r0, r4
 80a1fa6:	f7ff fb01 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x20, 0x1A);
 80a1faa:	221a      	movs	r2, #26
 80a1fac:	2120      	movs	r1, #32
 80a1fae:	4620      	mov	r0, r4
 80a1fb0:	f7ff fafc 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x43, 0x40);
 80a1fb4:	2240      	movs	r2, #64	; 0x40
 80a1fb6:	2143      	movs	r1, #67	; 0x43
 80a1fb8:	4620      	mov	r0, r4
 80a1fba:	f7ff faf7 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1fbe:	2200      	movs	r2, #0
 80a1fc0:	21ff      	movs	r1, #255	; 0xff
 80a1fc2:	4620      	mov	r0, r4
 80a1fc4:	f7ff faf2 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x34, 0x03);
 80a1fc8:	2203      	movs	r2, #3
 80a1fca:	2134      	movs	r1, #52	; 0x34
 80a1fcc:	4620      	mov	r0, r4
 80a1fce:	f7ff faed 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x35, 0x44);
 80a1fd2:	2244      	movs	r2, #68	; 0x44
 80a1fd4:	2135      	movs	r1, #53	; 0x35
 80a1fd6:	4620      	mov	r0, r4
 80a1fd8:	f7ff fae8 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1fdc:	2201      	movs	r2, #1
 80a1fde:	21ff      	movs	r1, #255	; 0xff
 80a1fe0:	4620      	mov	r0, r4
 80a1fe2:	f7ff fae3 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a1fe6:	2204      	movs	r2, #4
 80a1fe8:	2131      	movs	r1, #49	; 0x31
 80a1fea:	4620      	mov	r0, r4
 80a1fec:	f7ff fade 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4B, 0x09);
 80a1ff0:	2209      	movs	r2, #9
 80a1ff2:	214b      	movs	r1, #75	; 0x4b
 80a1ff4:	4620      	mov	r0, r4
 80a1ff6:	f7ff fad9 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4C, 0x05);
 80a1ffa:	2205      	movs	r2, #5
 80a1ffc:	214c      	movs	r1, #76	; 0x4c
 80a1ffe:	4620      	mov	r0, r4
 80a2000:	f7ff fad4 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4D, 0x04);
 80a2004:	2204      	movs	r2, #4
 80a2006:	214d      	movs	r1, #77	; 0x4d
 80a2008:	4620      	mov	r0, r4
 80a200a:	f7ff facf 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a200e:	2200      	movs	r2, #0
 80a2010:	21ff      	movs	r1, #255	; 0xff
 80a2012:	4620      	mov	r0, r4
 80a2014:	f7ff faca 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0x00);
 80a2018:	2200      	movs	r2, #0
 80a201a:	2144      	movs	r1, #68	; 0x44
 80a201c:	4620      	mov	r0, r4
 80a201e:	f7ff fac5 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x20);
 80a2022:	2220      	movs	r2, #32
 80a2024:	2145      	movs	r1, #69	; 0x45
 80a2026:	4620      	mov	r0, r4
 80a2028:	f7ff fac0 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x08);
 80a202c:	2208      	movs	r2, #8
 80a202e:	2147      	movs	r1, #71	; 0x47
 80a2030:	4620      	mov	r0, r4
 80a2032:	f7ff fabb 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x28);
 80a2036:	2228      	movs	r2, #40	; 0x28
 80a2038:	2148      	movs	r1, #72	; 0x48
 80a203a:	4620      	mov	r0, r4
 80a203c:	f7ff fab6 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x67, 0x00);
 80a2040:	2200      	movs	r2, #0
 80a2042:	2167      	movs	r1, #103	; 0x67
 80a2044:	4620      	mov	r0, r4
 80a2046:	f7ff fab1 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x70, 0x04);
 80a204a:	2204      	movs	r2, #4
 80a204c:	2170      	movs	r1, #112	; 0x70
 80a204e:	4620      	mov	r0, r4
 80a2050:	f7ff faac 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x71, 0x01);
 80a2054:	2201      	movs	r2, #1
 80a2056:	2171      	movs	r1, #113	; 0x71
 80a2058:	4620      	mov	r0, r4
 80a205a:	f7ff faa7 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x72, 0xFE);
 80a205e:	22fe      	movs	r2, #254	; 0xfe
 80a2060:	2172      	movs	r1, #114	; 0x72
 80a2062:	4620      	mov	r0, r4
 80a2064:	f7ff faa2 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x76, 0x00);
 80a2068:	2200      	movs	r2, #0
 80a206a:	2176      	movs	r1, #118	; 0x76
 80a206c:	4620      	mov	r0, r4
 80a206e:	f7ff fa9d 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x77, 0x00);
 80a2072:	2200      	movs	r2, #0
 80a2074:	2177      	movs	r1, #119	; 0x77
 80a2076:	4620      	mov	r0, r4
 80a2078:	f7ff fa98 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a207c:	2201      	movs	r2, #1
 80a207e:	21ff      	movs	r1, #255	; 0xff
 80a2080:	4620      	mov	r0, r4
 80a2082:	f7ff fa93 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0D, 0x01);
 80a2086:	2201      	movs	r2, #1
 80a2088:	210d      	movs	r1, #13
 80a208a:	4620      	mov	r0, r4
 80a208c:	f7ff fa8e 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a2090:	2200      	movs	r2, #0
 80a2092:	21ff      	movs	r1, #255	; 0xff
 80a2094:	4620      	mov	r0, r4
 80a2096:	f7ff fa89 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x01);
 80a209a:	2201      	movs	r2, #1
 80a209c:	2180      	movs	r1, #128	; 0x80
 80a209e:	4620      	mov	r0, r4
 80a20a0:	f7ff fa84 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x01, 0xF8);
 80a20a4:	22f8      	movs	r2, #248	; 0xf8
 80a20a6:	2101      	movs	r1, #1
 80a20a8:	4620      	mov	r0, r4
 80a20aa:	f7ff fa7f 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a20ae:	2201      	movs	r2, #1
 80a20b0:	21ff      	movs	r1, #255	; 0xff
 80a20b2:	4620      	mov	r0, r4
 80a20b4:	f7ff fa7a 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x8E, 0x01);
 80a20b8:	2201      	movs	r2, #1
 80a20ba:	218e      	movs	r1, #142	; 0x8e
 80a20bc:	4620      	mov	r0, r4
 80a20be:	f7ff fa75 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a20c2:	2201      	movs	r2, #1
 80a20c4:	2100      	movs	r1, #0
 80a20c6:	4620      	mov	r0, r4
 80a20c8:	f7ff fa70 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a20cc:	2200      	movs	r2, #0
 80a20ce:	21ff      	movs	r1, #255	; 0xff
 80a20d0:	4620      	mov	r0, r4
 80a20d2:	f7ff fa6b 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a20d6:	2200      	movs	r2, #0
 80a20d8:	2180      	movs	r1, #128	; 0x80
 80a20da:	4620      	mov	r0, r4
 80a20dc:	f7ff fa66 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80a20e0:	2204      	movs	r2, #4
 80a20e2:	210a      	movs	r1, #10
 80a20e4:	4620      	mov	r0, r4
 80a20e6:	f7ff fa61 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80a20ea:	2184      	movs	r1, #132	; 0x84
 80a20ec:	4620      	mov	r0, r4
 80a20ee:	f7ff facc 	bl	80a168a <_ZN7VL53L0X7readRegEh>
 80a20f2:	2184      	movs	r1, #132	; 0x84
 80a20f4:	f000 02ef 	and.w	r2, r0, #239	; 0xef
 80a20f8:	4620      	mov	r0, r4
 80a20fa:	f7ff fa57 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a20fe:	2201      	movs	r2, #1
 80a2100:	210b      	movs	r1, #11
 80a2102:	4620      	mov	r0, r4
 80a2104:	f7ff fa52 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a2108:	4620      	mov	r0, r4
 80a210a:	f7ff fcf3 	bl	80a1af4 <_ZN7VL53L0X26getMeasurementTimingBudgetEv>
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a210e:	22e8      	movs	r2, #232	; 0xe8
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a2110:	6160      	str	r0, [r4, #20]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a2112:	2101      	movs	r1, #1
 80a2114:	4620      	mov	r0, r4
 80a2116:	f7ff fa49 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(measurement_timing_budget_us);
 80a211a:	6961      	ldr	r1, [r4, #20]
 80a211c:	4620      	mov	r0, r4
 80a211e:	f7ff fd33 	bl	80a1b88 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80a2122:	2201      	movs	r2, #1
 80a2124:	4611      	mov	r1, r2
 80a2126:	4620      	mov	r0, r4
 80a2128:	f7ff fa40 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x40)) { return false; }
 80a212c:	2140      	movs	r1, #64	; 0x40
 80a212e:	4620      	mov	r0, r4
 80a2130:	f7ff fd79 	bl	80a1c26 <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a2134:	2800      	cmp	r0, #0
 80a2136:	f43f adf2 	beq.w	80a1d1e <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80a213a:	2202      	movs	r2, #2
 80a213c:	2101      	movs	r1, #1
 80a213e:	4620      	mov	r0, r4
 80a2140:	f7ff fa34 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x00)) { return false; }
 80a2144:	2100      	movs	r1, #0
 80a2146:	4620      	mov	r0, r4
 80a2148:	f7ff fd6d 	bl	80a1c26 <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a214c:	4605      	mov	r5, r0
 80a214e:	2800      	cmp	r0, #0
 80a2150:	f43f ade5 	beq.w	80a1d1e <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a2154:	22e8      	movs	r2, #232	; 0xe8
 80a2156:	2101      	movs	r1, #1
 80a2158:	4620      	mov	r0, r4
 80a215a:	f7ff fa27 	bl	80a15ac <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_PerformRefCalibration() end

  return true;
}
 80a215e:	4628      	mov	r0, r5
 80a2160:	b005      	add	sp, #20
 80a2162:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2164 <_GLOBAL__sub_I__ZN7VL53L0XC2Ev>:
 80a2164:	f001 b838 	b.w	80a31d8 <HAL_Pin_Map>

080a2168 <_ZN9LIS3DHI2CD1Ev>:

}

LIS3DHI2C::~LIS3DHI2C() {

}
 80a2168:	4770      	bx	lr

080a216a <_ZN9LIS3DHI2CD0Ev>:

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {

}

LIS3DHI2C::~LIS3DHI2C() {
 80a216a:	b510      	push	{r4, lr}
 80a216c:	4604      	mov	r4, r0

}
 80a216e:	f7fd ff96 	bl	80a009e <_ZdlPv>
 80a2172:	4620      	mov	r0, r4
 80a2174:	bd10      	pop	{r4, pc}

080a2176 <_ZN9LIS3DHI2C9writeDataEhPKhj>:
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a2176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2178:	4605      	mov	r5, r0
 80a217a:	461e      	mov	r6, r3
 80a217c:	460f      	mov	r7, r1

	wire.beginTransmission(getI2CAddr());
 80a217e:	7c01      	ldrb	r1, [r0, #16]
 80a2180:	68c0      	ldr	r0, [r0, #12]
 80a2182:	f041 0118 	orr.w	r1, r1, #24
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a2186:	4614      	mov	r4, r2

	wire.beginTransmission(getI2CAddr());
 80a2188:	f001 fe1d 	bl	80a3dc6 <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a218c:	68e8      	ldr	r0, [r5, #12]

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a218e:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a2190:	6803      	ldr	r3, [r0, #0]
bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a2192:	bf88      	it	hi
 80a2194:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a2198:	689b      	ldr	r3, [r3, #8]
 80a219a:	4639      	mov	r1, r7
 80a219c:	4798      	blx	r3
 80a219e:	4426      	add	r6, r4
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a21a0:	42a6      	cmp	r6, r4
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a21a2:	68e8      	ldr	r0, [r5, #12]

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a21a4:	d005      	beq.n	80a21b2 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x3c>
		wire.write(buf[ii]);
 80a21a6:	6803      	ldr	r3, [r0, #0]
 80a21a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a21ac:	689b      	ldr	r3, [r3, #8]
 80a21ae:	4798      	blx	r3

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a21b0:	e7f6      	b.n	80a21a0 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x2a>
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a21b2:	f001 fe10 	bl	80a3dd6 <_ZN7TwoWire15endTransmissionEv>

	return (res == 0);
}
 80a21b6:	fab0 f080 	clz	r0, r0
 80a21ba:	0940      	lsrs	r0, r0, #5
 80a21bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a21be <_ZN9LIS3DHI2C8readDataEhPhj>:

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a21be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a21c0:	4604      	mov	r4, r0
 80a21c2:	461e      	mov	r6, r3
 80a21c4:	460f      	mov	r7, r1
	wire.beginTransmission(getI2CAddr());
 80a21c6:	7c01      	ldrb	r1, [r0, #16]
 80a21c8:	68c0      	ldr	r0, [r0, #12]
 80a21ca:	f041 0118 	orr.w	r1, r1, #24

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a21ce:	4615      	mov	r5, r2
	wire.beginTransmission(getI2CAddr());
 80a21d0:	f001 fdf9 	bl	80a3dc6 <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a21d4:	68e0      	ldr	r0, [r4, #12]
}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a21d6:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a21d8:	6803      	ldr	r3, [r0, #0]

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a21da:	bf88      	it	hi
 80a21dc:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a21e0:	689b      	ldr	r3, [r3, #8]
 80a21e2:	4639      	mov	r1, r7
 80a21e4:	4798      	blx	r3

	uint8_t res = wire.endTransmission();
 80a21e6:	68e0      	ldr	r0, [r4, #12]
 80a21e8:	f001 fdf5 	bl	80a3dd6 <_ZN7TwoWire15endTransmissionEv>
	if (res != 0) {
 80a21ec:	b9a8      	cbnz	r0, 80a221a <_ZN9LIS3DHI2C8readDataEhPhj+0x5c>
		return false;
	}

	wire.requestFrom((int)getI2CAddr(), numBytes);
 80a21ee:	7c21      	ldrb	r1, [r4, #16]
 80a21f0:	4632      	mov	r2, r6
 80a21f2:	f041 0118 	orr.w	r1, r1, #24
 80a21f6:	68e0      	ldr	r0, [r4, #12]
 80a21f8:	f001 fde0 	bl	80a3dbc <_ZN7TwoWire11requestFromEii>
 80a21fc:	442e      	add	r6, r5
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
 80a21fe:	42ae      	cmp	r6, r5
 80a2200:	d00d      	beq.n	80a221e <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
 80a2202:	68e0      	ldr	r0, [r4, #12]
 80a2204:	6803      	ldr	r3, [r0, #0]
 80a2206:	691b      	ldr	r3, [r3, #16]
 80a2208:	4798      	blx	r3
 80a220a:	b140      	cbz	r0, 80a221e <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
		buf[ii] = wire.read();
 80a220c:	68e0      	ldr	r0, [r4, #12]
 80a220e:	6803      	ldr	r3, [r0, #0]
 80a2210:	695b      	ldr	r3, [r3, #20]
 80a2212:	4798      	blx	r3
 80a2214:	f805 0b01 	strb.w	r0, [r5], #1
 80a2218:	e7f1      	b.n	80a21fe <_ZN9LIS3DHI2C8readDataEhPhj+0x40>
	}
	wire.write(addr);

	uint8_t res = wire.endTransmission();
	if (res != 0) {
		return false;
 80a221a:	2000      	movs	r0, #0
 80a221c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a221e:	2001      	movs	r0, #1
	wire.requestFrom((int)getI2CAddr(), numBytes);
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
		buf[ii] = wire.read();
	}
	return true;
}
 80a2220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2222 <_ZN12LIS3DHConfigC1Ev>:
#include "LIS3DH.h"

// Official project location:
// https://github.com/rickkas7/LIS3DH

LIS3DHConfig::LIS3DHConfig() {
 80a2222:	2200      	movs	r2, #0
 80a2224:	7002      	strb	r2, [r0, #0]
 80a2226:	7042      	strb	r2, [r0, #1]
 80a2228:	7082      	strb	r2, [r0, #2]
 80a222a:	70c2      	strb	r2, [r0, #3]
 80a222c:	7102      	strb	r2, [r0, #4]
 80a222e:	7142      	strb	r2, [r0, #5]
 80a2230:	7182      	strb	r2, [r0, #6]
 80a2232:	71c2      	strb	r2, [r0, #7]
 80a2234:	7202      	strb	r2, [r0, #8]
 80a2236:	7242      	strb	r2, [r0, #9]
 80a2238:	7282      	strb	r2, [r0, #10]
}
 80a223a:	4770      	bx	lr

080a223c <_ZN12LIS3DHConfig12setAccelModeEh>:
}

LIS3DHConfig &LIS3DHConfig::setAccelMode(uint8_t rate) {

	// Enable specified rate, with XYZ detection enabled
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
 80a223c:	f041 0107 	orr.w	r1, r1, #7
 80a2240:	7001      	strb	r1, [r0, #0]

	return *this;
}
 80a2242:	4770      	bx	lr

080a2244 <_ZN6LIS3DH13readRegister8Eh>:

	return pos;
}


uint8_t LIS3DH::readRegister8(uint8_t addr) {
 80a2244:	b513      	push	{r0, r1, r4, lr}

	uint8_t resp[1];
	readData(addr, resp, sizeof(resp));
 80a2246:	6803      	ldr	r3, [r0, #0]
 80a2248:	aa01      	add	r2, sp, #4
 80a224a:	689c      	ldr	r4, [r3, #8]
 80a224c:	2301      	movs	r3, #1
 80a224e:	47a0      	blx	r4

	return resp[0];
}
 80a2250:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80a2254:	b002      	add	sp, #8
 80a2256:	bd10      	pop	{r4, pc}

080a2258 <_ZN6LIS3DH9hasDeviceEv>:
LIS3DH::~LIS3DH() {

}


bool LIS3DH::hasDevice() {
 80a2258:	b538      	push	{r3, r4, r5, lr}
 80a225a:	4605      	mov	r5, r0
 80a225c:	240a      	movs	r4, #10
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
 80a225e:	210f      	movs	r1, #15
 80a2260:	4628      	mov	r0, r5
 80a2262:	f7ff ffef 	bl	80a2244 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
 80a2266:	2833      	cmp	r0, #51	; 0x33
			found = true;
 80a2268:	f04f 0001 	mov.w	r0, #1

bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
		if (whoami == WHO_AM_I) {
 80a226c:	d005      	beq.n	80a227a <_ZN6LIS3DH9hasDeviceEv+0x22>
			found = true;
			break;
		}
		delay(1);
 80a226e:	f001 fb11 	bl	80a3894 <delay>
}


bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
 80a2272:	3c01      	subs	r4, #1
 80a2274:	d1f3      	bne.n	80a225e <_ZN6LIS3DH9hasDeviceEv+0x6>

}


bool LIS3DH::hasDevice() {
	bool found = false;
 80a2276:	4620      	mov	r0, r4
 80a2278:	bd38      	pop	{r3, r4, r5, pc}
			break;
		}
		delay(1);
	}
	return found;
}
 80a227a:	bd38      	pop	{r3, r4, r5, pc}

080a227c <_ZN6LIS3DH9getSampleER12LIS3DHSample>:

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a227c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a227e:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a2280:	2107      	movs	r1, #7

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a2282:	4606      	mov	r6, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a2284:	f7ff ffde 	bl	80a2244 <_ZN6LIS3DH13readRegister8Eh>
 80a2288:	f000 0008 	and.w	r0, r0, #8

	bool hasData = ((statusAuxReg & STATUS_AUX_321DA) != 0);
 80a228c:	2800      	cmp	r0, #0
 80a228e:	bf14      	ite	ne
 80a2290:	2501      	movne	r5, #1
 80a2292:	2500      	moveq	r5, #0

	//Serial.printlnf("fifoSrcReg=0x%02x", fifoSrcReg);

	if (hasData) {
 80a2294:	d01b      	beq.n	80a22ce <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x52>
		uint8_t resp[6];
		readData(REG_OUT_X_L, resp, sizeof(resp));
 80a2296:	6833      	ldr	r3, [r6, #0]
 80a2298:	466a      	mov	r2, sp
 80a229a:	689f      	ldr	r7, [r3, #8]
 80a229c:	2128      	movs	r1, #40	; 0x28
 80a229e:	2306      	movs	r3, #6
 80a22a0:	4630      	mov	r0, r6
 80a22a2:	47b8      	blx	r7

		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
 80a22a4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a22a8:	f89d 3000 	ldrb.w	r3, [sp]
 80a22ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a22b0:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
 80a22b2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a22b6:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a22ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a22be:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
 80a22c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a22c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a22c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a22cc:	80a3      	strh	r3, [r4, #4]
	}
	return hasData;
}
 80a22ce:	4628      	mov	r0, r5
 80a22d0:	b003      	add	sp, #12
 80a22d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a22d4 <_ZN6LIS3DH14writeRegister8Ehh>:

	return resp[0] | (((uint16_t)resp[1]) << 8);
}


void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
 80a22d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a22d6:	ac02      	add	r4, sp, #8

	writeData(addr, req, sizeof(req));
 80a22d8:	6803      	ldr	r3, [r0, #0]

void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a22da:	f804 2d04 	strb.w	r2, [r4, #-4]!

	writeData(addr, req, sizeof(req));
 80a22de:	68dd      	ldr	r5, [r3, #12]
 80a22e0:	4622      	mov	r2, r4
 80a22e2:	2301      	movs	r3, #1
 80a22e4:	47a8      	blx	r5
}
 80a22e6:	b003      	add	sp, #12
 80a22e8:	bd30      	pop	{r4, r5, pc}
	...

080a22ec <_ZN6LIS3DH5setupER12LIS3DHConfig>:
		delay(1);
	}
	return found;
}

bool LIS3DH::setup(LIS3DHConfig &config) {
 80a22ec:	b570      	push	{r4, r5, r6, lr}
 80a22ee:	4604      	mov	r4, r0
 80a22f0:	460d      	mov	r5, r1

	if (!hasDevice()) {
 80a22f2:	f7ff ffb1 	bl	80a2258 <_ZN6LIS3DH9hasDeviceEv>
 80a22f6:	4606      	mov	r6, r0
 80a22f8:	b928      	cbnz	r0, 80a2306 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		Serial.println("device not found");
 80a22fa:	f001 fc17 	bl	80a3b2c <_Z16_fetch_usbserialv>
 80a22fe:	4928      	ldr	r1, [pc, #160]	; (80a23a0 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
 80a2300:	f001 fa51 	bl	80a37a6 <_ZN5Print7printlnEPKc>
		return false;
 80a2304:	e049      	b.n	80a239a <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
	}

	writeRegister8(REG_CTRL_REG1, config.reg1);
 80a2306:	782a      	ldrb	r2, [r5, #0]
 80a2308:	2120      	movs	r1, #32
 80a230a:	4620      	mov	r0, r4
 80a230c:	f7ff ffe2 	bl	80a22d4 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
 80a2310:	786a      	ldrb	r2, [r5, #1]
 80a2312:	2121      	movs	r1, #33	; 0x21
 80a2314:	4620      	mov	r0, r4
 80a2316:	f7ff ffdd 	bl	80a22d4 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
 80a231a:	78aa      	ldrb	r2, [r5, #2]
 80a231c:	2122      	movs	r1, #34	; 0x22
 80a231e:	4620      	mov	r0, r4
 80a2320:	f7ff ffd8 	bl	80a22d4 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
 80a2324:	78ea      	ldrb	r2, [r5, #3]
 80a2326:	2123      	movs	r1, #35	; 0x23
 80a2328:	4620      	mov	r0, r4
 80a232a:	f7ff ffd3 	bl	80a22d4 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
 80a232e:	792a      	ldrb	r2, [r5, #4]
 80a2330:	2124      	movs	r1, #36	; 0x24
 80a2332:	4620      	mov	r0, r4
 80a2334:	f7ff ffce 	bl	80a22d4 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
 80a2338:	796a      	ldrb	r2, [r5, #5]
 80a233a:	2125      	movs	r1, #37	; 0x25
 80a233c:	4620      	mov	r0, r4
 80a233e:	f7ff ffc9 	bl	80a22d4 <_ZN6LIS3DH14writeRegister8Ehh>

	if (config.setReference) {
 80a2342:	79ab      	ldrb	r3, [r5, #6]
 80a2344:	b11b      	cbz	r3, 80a234e <_ZN6LIS3DH5setupER12LIS3DHConfig+0x62>
		// In normal mode, reading the reference register sets it for the current normal force
		// (the normal force of gravity acting on the device)
		readRegister8(REG_REFERENCE);
 80a2346:	2126      	movs	r1, #38	; 0x26
 80a2348:	4620      	mov	r0, r4
 80a234a:	f7ff ff7b 	bl	80a2244 <_ZN6LIS3DH13readRegister8Eh>
	}
	// Set FIFO mode
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
 80a234e:	7aaa      	ldrb	r2, [r5, #10]
 80a2350:	212e      	movs	r1, #46	; 0x2e
 80a2352:	4620      	mov	r0, r4
 80a2354:	f7ff ffbe 	bl	80a22d4 <_ZN6LIS3DH14writeRegister8Ehh>



	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
 80a2358:	78ab      	ldrb	r3, [r5, #2]
 80a235a:	065b      	lsls	r3, r3, #25
 80a235c:	d51d      	bpl.n	80a239a <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>

		writeRegister8(REG_INT1_THS, config.int1_ths);
 80a235e:	79ea      	ldrb	r2, [r5, #7]
 80a2360:	2132      	movs	r1, #50	; 0x32
 80a2362:	4620      	mov	r0, r4
 80a2364:	f7ff ffb6 	bl	80a22d4 <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
 80a2368:	7a2a      	ldrb	r2, [r5, #8]
 80a236a:	2133      	movs	r1, #51	; 0x33
 80a236c:	4620      	mov	r0, r4
 80a236e:	f7ff ffb1 	bl	80a22d4 <_ZN6LIS3DH14writeRegister8Ehh>

		if (intPin >= 0) {
 80a2372:	6863      	ldr	r3, [r4, #4]
 80a2374:	2b00      	cmp	r3, #0
 80a2376:	db0a      	blt.n	80a238e <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa2>
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a2378:	7a6a      	ldrb	r2, [r5, #9]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a237a:	4620      	mov	r0, r4
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a237c:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a237e:	2130      	movs	r1, #48	; 0x30
 80a2380:	f7ff ffa8 	bl	80a22d4 <_ZN6LIS3DH14writeRegister8Ehh>

			// Clear the interrupt just in case
			readRegister8(REG_INT1_SRC);
 80a2384:	2131      	movs	r1, #49	; 0x31
 80a2386:	4620      	mov	r0, r4
 80a2388:	f7ff ff5c 	bl	80a2244 <_ZN6LIS3DH13readRegister8Eh>
 80a238c:	e005      	b.n	80a239a <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
		}
		else {
			int1_cfg = 0;
 80a238e:	2200      	movs	r2, #0
 80a2390:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
 80a2392:	2130      	movs	r1, #48	; 0x30
 80a2394:	4620      	mov	r0, r4
 80a2396:	f7ff ff9d 	bl	80a22d4 <_ZN6LIS3DH14writeRegister8Ehh>




	return true;
}
 80a239a:	4630      	mov	r0, r6
 80a239c:	bd70      	pop	{r4, r5, r6, pc}
 80a239e:	bf00      	nop
 80a23a0:	080a5270 	.word	0x080a5270

080a23a4 <_ZN9LIS3DHI2CC1ER7TwoWirehi>:

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a23a4:	b510      	push	{r4, lr}

	return *this;
}


LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
 80a23a6:	6043      	str	r3, [r0, #4]

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a23a8:	4b02      	ldr	r3, [pc, #8]	; (80a23b4 <_ZN9LIS3DHI2CC1ER7TwoWirehi+0x10>)
 80a23aa:	60c1      	str	r1, [r0, #12]
 80a23ac:	6003      	str	r3, [r0, #0]
 80a23ae:	7402      	strb	r2, [r0, #16]

}
 80a23b0:	bd10      	pop	{r4, pc}
 80a23b2:	bf00      	nop
 80a23b4:	080a5260 	.word	0x080a5260

080a23b8 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:
 80a23b8:	f000 bf0e 	b.w	80a31d8 <HAL_Pin_Map>

080a23bc <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>:
#include "FuzzyRule.h"

FuzzyRule::FuzzyRule(){
}

FuzzyRule::FuzzyRule(int index, FuzzyRuleAntecedent* fuzzyRuleAntecedent, FuzzyRuleConsequent* fuzzyRuleConsequent){
 80a23bc:	b510      	push	{r4, lr}
    this->index = index;
    this->fuzzyRuleAntecedent = fuzzyRuleAntecedent;
    this->fuzzyRuleConsequent = fuzzyRuleConsequent;
 80a23be:	60c3      	str	r3, [r0, #12]
    this->fired = false;
 80a23c0:	2300      	movs	r3, #0

FuzzyRule::FuzzyRule(){
}

FuzzyRule::FuzzyRule(int index, FuzzyRuleAntecedent* fuzzyRuleAntecedent, FuzzyRuleConsequent* fuzzyRuleConsequent){
    this->index = index;
 80a23c2:	6001      	str	r1, [r0, #0]
    this->fuzzyRuleAntecedent = fuzzyRuleAntecedent;
 80a23c4:	6082      	str	r2, [r0, #8]
    this->fuzzyRuleConsequent = fuzzyRuleConsequent;
    this->fired = false;
 80a23c6:	7103      	strb	r3, [r0, #4]
}
 80a23c8:	bd10      	pop	{r4, pc}

080a23ca <_ZN9FuzzyRule18evaluateExpressionEv>:

int FuzzyRule::getIndex(){
    return this->index;
}

bool FuzzyRule::evaluateExpression(){
 80a23ca:	b538      	push	{r3, r4, r5, lr}
 80a23cc:	4604      	mov	r4, r0
    if (this->fuzzyRuleAntecedent != NULL){
 80a23ce:	6880      	ldr	r0, [r0, #8]
 80a23d0:	b170      	cbz	r0, 80a23f0 <_ZN9FuzzyRule18evaluateExpressionEv+0x26>
        float powerOfAntecedent = this->fuzzyRuleAntecedent->evaluate();
 80a23d2:	f000 fe29 	bl	80a3028 <_ZN19FuzzyRuleAntecedent8evaluateEv>

        (powerOfAntecedent > 0.0) ?    (this->fired = true) : (this->fired = false);
 80a23d6:	2100      	movs	r1, #0
    return this->index;
}

bool FuzzyRule::evaluateExpression(){
    if (this->fuzzyRuleAntecedent != NULL){
        float powerOfAntecedent = this->fuzzyRuleAntecedent->evaluate();
 80a23d8:	4605      	mov	r5, r0

        (powerOfAntecedent > 0.0) ?    (this->fired = true) : (this->fired = false);
 80a23da:	f002 fe8f 	bl	80a50fc <__aeabi_fcmpgt>
 80a23de:	b110      	cbz	r0, 80a23e6 <_ZN9FuzzyRule18evaluateExpressionEv+0x1c>
 80a23e0:	2301      	movs	r3, #1
 80a23e2:	7123      	strb	r3, [r4, #4]
 80a23e4:	e000      	b.n	80a23e8 <_ZN9FuzzyRule18evaluateExpressionEv+0x1e>
 80a23e6:	7120      	strb	r0, [r4, #4]
        
        this->fuzzyRuleConsequent->evaluate(powerOfAntecedent);
 80a23e8:	4629      	mov	r1, r5
 80a23ea:	68e0      	ldr	r0, [r4, #12]
 80a23ec:	f000 fd57 	bl	80a2e9e <_ZN19FuzzyRuleConsequent8evaluateEf>
    }
    return this->fired;
}
 80a23f0:	7920      	ldrb	r0, [r4, #4]
 80a23f2:	bd38      	pop	{r3, r4, r5, pc}

080a23f4 <_ZN16FuzzyCompositionC1Ev>:
#include "FuzzyComposition.h"
#include <math.h>

// CONSTRUTORES
FuzzyComposition::FuzzyComposition(){
    this->pointsCursor     = NULL;
 80a23f4:	2200      	movs	r2, #0
 80a23f6:	6002      	str	r2, [r0, #0]
    this->points         = NULL;
 80a23f8:	6042      	str	r2, [r0, #4]
}
 80a23fa:	4770      	bx	lr

080a23fc <_ZN16FuzzyComposition8addPointEff>:
// DESTRUTOR
FuzzyComposition::~FuzzyComposition(){
    this->cleanPoints(this->points);
}

bool FuzzyComposition::addPoint(float point, float pertinence){
 80a23fc:	b570      	push	{r4, r5, r6, lr}
 80a23fe:	4604      	mov	r4, r0
    pointsArray* aux;
    // Alocando espaço na memória
    if((aux = (pointsArray* ) malloc(sizeof(pointsArray))) == NULL){
 80a2400:	2010      	movs	r0, #16
// DESTRUTOR
FuzzyComposition::~FuzzyComposition(){
    this->cleanPoints(this->points);
}

bool FuzzyComposition::addPoint(float point, float pertinence){
 80a2402:	460e      	mov	r6, r1
 80a2404:	4615      	mov	r5, r2
    pointsArray* aux;
    // Alocando espaço na memória
    if((aux = (pointsArray* ) malloc(sizeof(pointsArray))) == NULL){
 80a2406:	f001 f891 	bl	80a352c <malloc>
 80a240a:	2300      	movs	r3, #0
 80a240c:	b170      	cbz	r0, 80a242c <_ZN16FuzzyComposition8addPointEff+0x30>
        return false;
    }
    aux->previous = NULL;
 80a240e:	6003      	str	r3, [r0, #0]
    aux->point = point;
 80a2410:	6046      	str	r6, [r0, #4]
    aux->pertinence = pertinence;
 80a2412:	6085      	str	r5, [r0, #8]
    aux->next = NULL;
 80a2414:	60c3      	str	r3, [r0, #12]

    if(this->points == NULL){
 80a2416:	6863      	ldr	r3, [r4, #4]
 80a2418:	b913      	cbnz	r3, 80a2420 <_ZN16FuzzyComposition8addPointEff+0x24>
        this->points = aux;
 80a241a:	6060      	str	r0, [r4, #4]
        this->pointsCursor  = aux;
 80a241c:	6020      	str	r0, [r4, #0]
 80a241e:	e004      	b.n	80a242a <_ZN16FuzzyComposition8addPointEff+0x2e>
    }else{
        aux->previous = this->pointsCursor;
 80a2420:	6823      	ldr	r3, [r4, #0]
 80a2422:	6003      	str	r3, [r0, #0]
        this->pointsCursor = aux;
 80a2424:	6020      	str	r0, [r4, #0]
        aux->previous->next = this->pointsCursor;
 80a2426:	6803      	ldr	r3, [r0, #0]
 80a2428:	60d8      	str	r0, [r3, #12]
    }
    return true;
 80a242a:	2001      	movs	r0, #1
}
 80a242c:	bd70      	pop	{r4, r5, r6, pc}

080a242e <_ZN16FuzzyComposition10checkPointEff>:

bool FuzzyComposition::checkPoint(float point, float pertinence){
 80a242e:	b570      	push	{r4, r5, r6, lr}
 80a2430:	460d      	mov	r5, r1
 80a2432:	4616      	mov	r6, r2
    pointsArray* aux;
    aux = this->pointsCursor;
 80a2434:	6804      	ldr	r4, [r0, #0]
    while(aux != NULL){
 80a2436:	b15c      	cbz	r4, 80a2450 <_ZN16FuzzyComposition10checkPointEff+0x22>
        if(aux->point == point && aux->pertinence == pertinence){
 80a2438:	4629      	mov	r1, r5
 80a243a:	6860      	ldr	r0, [r4, #4]
 80a243c:	f002 fe36 	bl	80a50ac <__aeabi_fcmpeq>
 80a2440:	b120      	cbz	r0, 80a244c <_ZN16FuzzyComposition10checkPointEff+0x1e>
 80a2442:	4631      	mov	r1, r6
 80a2444:	68a0      	ldr	r0, [r4, #8]
 80a2446:	f002 fe31 	bl	80a50ac <__aeabi_fcmpeq>
 80a244a:	b918      	cbnz	r0, 80a2454 <_ZN16FuzzyComposition10checkPointEff+0x26>
            return true;
        }
        aux = aux->previous;
 80a244c:	6824      	ldr	r4, [r4, #0]
}

bool FuzzyComposition::checkPoint(float point, float pertinence){
    pointsArray* aux;
    aux = this->pointsCursor;
    while(aux != NULL){
 80a244e:	e7f2      	b.n	80a2436 <_ZN16FuzzyComposition10checkPointEff+0x8>
        if(aux->point == point && aux->pertinence == pertinence){
            return true;
        }
        aux = aux->previous;
    }
    return false;
 80a2450:	4620      	mov	r0, r4
 80a2452:	bd70      	pop	{r4, r5, r6, pc}
bool FuzzyComposition::checkPoint(float point, float pertinence){
    pointsArray* aux;
    aux = this->pointsCursor;
    while(aux != NULL){
        if(aux->point == point && aux->pertinence == pertinence){
            return true;
 80a2454:	2001      	movs	r0, #1
        }
        aux = aux->previous;
    }
    return false;
}
 80a2456:	bd70      	pop	{r4, r5, r6, pc}

080a2458 <_ZN16FuzzyComposition8avaliateEv>:
        aux = aux->next;
    }
    return true;
}

float FuzzyComposition::avaliate(){
 80a2458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pointsArray* aux;
    float numerator     = 0.0;
    float denominator   = 0.0;
 80a245c:	2700      	movs	r7, #0
    return true;
}

float FuzzyComposition::avaliate(){
    pointsArray* aux;
    float numerator     = 0.0;
 80a245e:	46ba      	mov	sl, r7
    float denominator   = 0.0;

    aux = this->points;
 80a2460:	6845      	ldr	r5, [r0, #4]
    while(aux != NULL){
 80a2462:	2d00      	cmp	r5, #0
 80a2464:	f000 80b1 	beq.w	80a25ca <_ZN16FuzzyComposition8avaliateEv+0x172>
        if(aux->next != NULL){
 80a2468:	68ee      	ldr	r6, [r5, #12]
 80a246a:	b90e      	cbnz	r6, 80a2470 <_ZN16FuzzyComposition8avaliateEv+0x18>
        aux = aux->next;
    }
    return true;
}

float FuzzyComposition::avaliate(){
 80a246c:	4635      	mov	r5, r6
 80a246e:	e7f8      	b.n	80a2462 <_ZN16FuzzyComposition8avaliateEv+0xa>
    aux = this->points;
    while(aux != NULL){
        if(aux->next != NULL){
            float area = 0.0;
            float middle = 0.0;
            if(aux->point == aux->next->point){
 80a2470:	686c      	ldr	r4, [r5, #4]
 80a2472:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80a2476:	4620      	mov	r0, r4
 80a2478:	4641      	mov	r1, r8
 80a247a:	f002 fe17 	bl	80a50ac <__aeabi_fcmpeq>
 80a247e:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80a2482:	b108      	cbz	r0, 80a2488 <_ZN16FuzzyComposition8avaliateEv+0x30>
                // Se Singleton
                area     = aux->pertinence;
 80a2484:	465d      	mov	r5, fp
 80a2486:	e091      	b.n	80a25ac <_ZN16FuzzyComposition8avaliateEv+0x154>
                middle   = aux->point;
            }else if(aux->pertinence == 0.0 || aux->next->pertinence == 0.0){
 80a2488:	2100      	movs	r1, #0
 80a248a:	4658      	mov	r0, fp
 80a248c:	f002 fe0e 	bl	80a50ac <__aeabi_fcmpeq>
 80a2490:	b930      	cbnz	r0, 80a24a0 <_ZN16FuzzyComposition8avaliateEv+0x48>
 80a2492:	68b5      	ldr	r5, [r6, #8]
 80a2494:	2100      	movs	r1, #0
 80a2496:	4628      	mov	r0, r5
 80a2498:	f002 fe08 	bl	80a50ac <__aeabi_fcmpeq>
 80a249c:	2800      	cmp	r0, #0
 80a249e:	d036      	beq.n	80a250e <_ZN16FuzzyComposition8avaliateEv+0xb6>
                // Se triangulo
                float pertinence;
                if(aux->pertinence > 0.0){
 80a24a0:	2100      	movs	r1, #0
 80a24a2:	4658      	mov	r0, fp
 80a24a4:	f002 fe2a 	bl	80a50fc <__aeabi_fcmpgt>
 80a24a8:	b908      	cbnz	r0, 80a24ae <_ZN16FuzzyComposition8avaliateEv+0x56>
                    pertinence = aux->pertinence;
                }else{
                    pertinence = aux->next->pertinence;
 80a24aa:	68b5      	ldr	r5, [r6, #8]
 80a24ac:	e000      	b.n	80a24b0 <_ZN16FuzzyComposition8avaliateEv+0x58>
                middle   = aux->point;
            }else if(aux->pertinence == 0.0 || aux->next->pertinence == 0.0){
                // Se triangulo
                float pertinence;
                if(aux->pertinence > 0.0){
                    pertinence = aux->pertinence;
 80a24ae:	465d      	mov	r5, fp
                }else{
                    pertinence = aux->next->pertinence;
                }
                area = ((aux->next->point - aux->point) * pertinence) / 2.0;
 80a24b0:	4621      	mov	r1, r4
 80a24b2:	4640      	mov	r0, r8
 80a24b4:	f002 fb5c 	bl	80a4b70 <__aeabi_fsub>
 80a24b8:	4601      	mov	r1, r0
 80a24ba:	4680      	mov	r8, r0
 80a24bc:	4628      	mov	r0, r5
 80a24be:	f002 fc61 	bl	80a4d84 <__aeabi_fmul>
 80a24c2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a24c6:	f002 fc5d 	bl	80a4d84 <__aeabi_fmul>
                if(aux->pertinence < aux->next->pertinence){
 80a24ca:	68b1      	ldr	r1, [r6, #8]
                if(aux->pertinence > 0.0){
                    pertinence = aux->pertinence;
                }else{
                    pertinence = aux->next->pertinence;
                }
                area = ((aux->next->point - aux->point) * pertinence) / 2.0;
 80a24cc:	4605      	mov	r5, r0
                if(aux->pertinence < aux->next->pertinence){
 80a24ce:	4658      	mov	r0, fp
 80a24d0:	f002 fdf6 	bl	80a50c0 <__aeabi_fcmplt>
 80a24d4:	b128      	cbz	r0, 80a24e2 <_ZN16FuzzyComposition8avaliateEv+0x8a>
                    middle = ((aux->next->point - aux->point) / 1.5) + aux->point;
 80a24d6:	4640      	mov	r0, r8
 80a24d8:	f002 f808 	bl	80a44ec <__aeabi_f2d>
 80a24dc:	2200      	movs	r2, #0
 80a24de:	4b42      	ldr	r3, [pc, #264]	; (80a25e8 <_ZN16FuzzyComposition8avaliateEv+0x190>)
 80a24e0:	e004      	b.n	80a24ec <_ZN16FuzzyComposition8avaliateEv+0x94>
                }else{
                    middle = ((aux->next->point - aux->point) / 3.0) + aux->point;
 80a24e2:	4640      	mov	r0, r8
 80a24e4:	f002 f802 	bl	80a44ec <__aeabi_f2d>
 80a24e8:	4b40      	ldr	r3, [pc, #256]	; (80a25ec <_ZN16FuzzyComposition8avaliateEv+0x194>)
 80a24ea:	2200      	movs	r2, #0
 80a24ec:	f002 f97c 	bl	80a47e8 <__aeabi_ddiv>
 80a24f0:	4680      	mov	r8, r0
 80a24f2:	4620      	mov	r0, r4
 80a24f4:	4689      	mov	r9, r1
 80a24f6:	f001 fff9 	bl	80a44ec <__aeabi_f2d>
 80a24fa:	4602      	mov	r2, r0
 80a24fc:	460b      	mov	r3, r1
 80a24fe:	4640      	mov	r0, r8
 80a2500:	4649      	mov	r1, r9
 80a2502:	f001 fe95 	bl	80a4230 <__adddf3>
 80a2506:	f002 fadf 	bl	80a4ac8 <__aeabi_d2f>
 80a250a:	4604      	mov	r4, r0
 80a250c:	e04e      	b.n	80a25ac <_ZN16FuzzyComposition8avaliateEv+0x154>
                }
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence == aux->next->pertinence)){
 80a250e:	2100      	movs	r1, #0
 80a2510:	4658      	mov	r0, fp
 80a2512:	f002 fdf3 	bl	80a50fc <__aeabi_fcmpgt>
 80a2516:	2100      	movs	r1, #0
 80a2518:	b1c0      	cbz	r0, 80a254c <_ZN16FuzzyComposition8avaliateEv+0xf4>
 80a251a:	4628      	mov	r0, r5
 80a251c:	f002 fdee 	bl	80a50fc <__aeabi_fcmpgt>
 80a2520:	b1c0      	cbz	r0, 80a2554 <_ZN16FuzzyComposition8avaliateEv+0xfc>
 80a2522:	4629      	mov	r1, r5
 80a2524:	4658      	mov	r0, fp
 80a2526:	f002 fdc1 	bl	80a50ac <__aeabi_fcmpeq>
 80a252a:	b1e8      	cbz	r0, 80a2568 <_ZN16FuzzyComposition8avaliateEv+0x110>
                // Se quadrado
                area = (aux->next->point - aux->point) * aux->pertinence;
 80a252c:	4621      	mov	r1, r4
 80a252e:	4640      	mov	r0, r8
 80a2530:	f002 fb1e 	bl	80a4b70 <__aeabi_fsub>
 80a2534:	4601      	mov	r1, r0
 80a2536:	4680      	mov	r8, r0
 80a2538:	4658      	mov	r0, fp
 80a253a:	f002 fc23 	bl	80a4d84 <__aeabi_fmul>
 80a253e:	4605      	mov	r5, r0
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
 80a2540:	4640      	mov	r0, r8
 80a2542:	f001 ffd3 	bl	80a44ec <__aeabi_f2d>
 80a2546:	2200      	movs	r2, #0
 80a2548:	4b29      	ldr	r3, [pc, #164]	; (80a25f0 <_ZN16FuzzyComposition8avaliateEv+0x198>)
 80a254a:	e02a      	b.n	80a25a2 <_ZN16FuzzyComposition8avaliateEv+0x14a>
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence != aux->next->pertinence)){
 80a254c:	4658      	mov	r0, fp
 80a254e:	f002 fdd5 	bl	80a50fc <__aeabi_fcmpgt>
 80a2552:	b348      	cbz	r0, 80a25a8 <_ZN16FuzzyComposition8avaliateEv+0x150>
 80a2554:	2100      	movs	r1, #0
 80a2556:	4628      	mov	r0, r5
 80a2558:	f002 fdd0 	bl	80a50fc <__aeabi_fcmpgt>
 80a255c:	b320      	cbz	r0, 80a25a8 <_ZN16FuzzyComposition8avaliateEv+0x150>
 80a255e:	4629      	mov	r1, r5
 80a2560:	4658      	mov	r0, fp
 80a2562:	f002 fda3 	bl	80a50ac <__aeabi_fcmpeq>
 80a2566:	b9f8      	cbnz	r0, 80a25a8 <_ZN16FuzzyComposition8avaliateEv+0x150>
                // Se trapezio
                area = ((aux->pertinence + aux->next->pertinence) / 2.0) * (aux->next->point - aux->point);
 80a2568:	4621      	mov	r1, r4
 80a256a:	4640      	mov	r0, r8
 80a256c:	f002 fb00 	bl	80a4b70 <__aeabi_fsub>
 80a2570:	f001 ffbc 	bl	80a44ec <__aeabi_f2d>
 80a2574:	4680      	mov	r8, r0
 80a2576:	4689      	mov	r9, r1
 80a2578:	4658      	mov	r0, fp
 80a257a:	4629      	mov	r1, r5
 80a257c:	f002 fafa 	bl	80a4b74 <__addsf3>
 80a2580:	f001 ffb4 	bl	80a44ec <__aeabi_f2d>
 80a2584:	2200      	movs	r2, #0
 80a2586:	4b1a      	ldr	r3, [pc, #104]	; (80a25f0 <_ZN16FuzzyComposition8avaliateEv+0x198>)
 80a2588:	f002 f804 	bl	80a4594 <__aeabi_dmul>
 80a258c:	4642      	mov	r2, r8
 80a258e:	464b      	mov	r3, r9
 80a2590:	f002 f800 	bl	80a4594 <__aeabi_dmul>
 80a2594:	f002 fa98 	bl	80a4ac8 <__aeabi_d2f>
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
 80a2598:	4649      	mov	r1, r9
                // Se quadrado
                area = (aux->next->point - aux->point) * aux->pertinence;
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence != aux->next->pertinence)){
                // Se trapezio
                area = ((aux->pertinence + aux->next->pertinence) / 2.0) * (aux->next->point - aux->point);
 80a259a:	4605      	mov	r5, r0
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
 80a259c:	4640      	mov	r0, r8
 80a259e:	4b14      	ldr	r3, [pc, #80]	; (80a25f0 <_ZN16FuzzyComposition8avaliateEv+0x198>)
 80a25a0:	2200      	movs	r2, #0
 80a25a2:	f001 fff7 	bl	80a4594 <__aeabi_dmul>
 80a25a6:	e7a3      	b.n	80a24f0 <_ZN16FuzzyComposition8avaliateEv+0x98>

    aux = this->points;
    while(aux != NULL){
        if(aux->next != NULL){
            float area = 0.0;
            float middle = 0.0;
 80a25a8:	2400      	movs	r4, #0
    float denominator   = 0.0;

    aux = this->points;
    while(aux != NULL){
        if(aux->next != NULL){
            float area = 0.0;
 80a25aa:	4625      	mov	r5, r4
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence != aux->next->pertinence)){
                // Se trapezio
                area = ((aux->pertinence + aux->next->pertinence) / 2.0) * (aux->next->point - aux->point);
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
            }
            numerator += middle * area;
 80a25ac:	4621      	mov	r1, r4
 80a25ae:	4628      	mov	r0, r5
 80a25b0:	f002 fbe8 	bl	80a4d84 <__aeabi_fmul>
 80a25b4:	4601      	mov	r1, r0
 80a25b6:	4650      	mov	r0, sl
 80a25b8:	f002 fadc 	bl	80a4b74 <__addsf3>
            denominator += area;
 80a25bc:	4629      	mov	r1, r5
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence != aux->next->pertinence)){
                // Se trapezio
                area = ((aux->pertinence + aux->next->pertinence) / 2.0) * (aux->next->point - aux->point);
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
            }
            numerator += middle * area;
 80a25be:	4682      	mov	sl, r0
            denominator += area;
 80a25c0:	4638      	mov	r0, r7
 80a25c2:	f002 fad7 	bl	80a4b74 <__addsf3>
 80a25c6:	4607      	mov	r7, r0
 80a25c8:	e750      	b.n	80a246c <_ZN16FuzzyComposition8avaliateEv+0x14>
        }
        aux = aux->next;
    }

    if(denominator == 0.0){
 80a25ca:	2100      	movs	r1, #0
 80a25cc:	4638      	mov	r0, r7
 80a25ce:	f002 fd6d 	bl	80a50ac <__aeabi_fcmpeq>
 80a25d2:	b928      	cbnz	r0, 80a25e0 <_ZN16FuzzyComposition8avaliateEv+0x188>
        return 0.0;
    }else{
        return numerator / denominator;
 80a25d4:	4639      	mov	r1, r7
 80a25d6:	4650      	mov	r0, sl
 80a25d8:	f002 fc88 	bl	80a4eec <__aeabi_fdiv>
 80a25dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }
        aux = aux->next;
    }

    if(denominator == 0.0){
        return 0.0;
 80a25e0:	2000      	movs	r0, #0
    }else{
        return numerator / denominator;
    }
}
 80a25e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a25e6:	bf00      	nop
 80a25e8:	3ff80000 	.word	0x3ff80000
 80a25ec:	40080000 	.word	0x40080000
 80a25f0:	3fe00000 	.word	0x3fe00000

080a25f4 <_ZN16FuzzyComposition11cleanPointsEP11pointsArray>:
    this->pointsCursor = NULL;
    return true;
}

// MÉTODOS PRIVADOS
void FuzzyComposition::cleanPoints(pointsArray* aux){
 80a25f4:	b510      	push	{r4, lr}
    if(aux != NULL){
 80a25f6:	460c      	mov	r4, r1
 80a25f8:	b139      	cbz	r1, 80a260a <_ZN16FuzzyComposition11cleanPointsEP11pointsArray+0x16>
        // Esvaziando a memória alocada
        this->cleanPoints(aux->next);
 80a25fa:	68c9      	ldr	r1, [r1, #12]
 80a25fc:	f7ff fffa 	bl	80a25f4 <_ZN16FuzzyComposition11cleanPointsEP11pointsArray>
        free(aux);
 80a2600:	4620      	mov	r0, r4
    }
}
 80a2602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// MÉTODOS PRIVADOS
void FuzzyComposition::cleanPoints(pointsArray* aux){
    if(aux != NULL){
        // Esvaziando a memória alocada
        this->cleanPoints(aux->next);
        free(aux);
 80a2606:	f000 bf99 	b.w	80a353c <free>
 80a260a:	bd10      	pop	{r4, pc}

080a260c <_ZN16FuzzyComposition5emptyEv>:
    }else{
        return numerator / denominator;
    }
}

bool FuzzyComposition::empty(){
 80a260c:	b510      	push	{r4, lr}
 80a260e:	4604      	mov	r4, r0
    // limpando a memória
    this->cleanPoints(this->points);
 80a2610:	6841      	ldr	r1, [r0, #4]
 80a2612:	f7ff ffef 	bl	80a25f4 <_ZN16FuzzyComposition11cleanPointsEP11pointsArray>
    // resetando os ponteiros
    this->points = NULL;
 80a2616:	2300      	movs	r3, #0
 80a2618:	6063      	str	r3, [r4, #4]
    this->pointsCursor = NULL;
 80a261a:	6023      	str	r3, [r4, #0]
    return true;
}
 80a261c:	2001      	movs	r0, #1
 80a261e:	bd10      	pop	{r4, pc}

080a2620 <_ZN16FuzzyComposition8rmvPointEP11pointsArray>:

        return true;
    }
}

bool FuzzyComposition::rmvPoint(pointsArray* point){
 80a2620:	b508      	push	{r3, lr}
    if(point != NULL){
 80a2622:	b111      	cbz	r1, 80a262a <_ZN16FuzzyComposition8rmvPointEP11pointsArray+0xa>
        free(point);
 80a2624:	4608      	mov	r0, r1
 80a2626:	f000 ff89 	bl	80a353c <free>
    }
    return true;
}
 80a262a:	2001      	movs	r0, #1
 80a262c:	bd08      	pop	{r3, pc}
	...

080a2630 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_>:
        this->cleanPoints(aux->next);
        free(aux);
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
 80a2630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2634:	461e      	mov	r6, r3
    float x1 = aSegmentBegin->point;
 80a2636:	684b      	ldr	r3, [r1, #4]
        this->cleanPoints(aux->next);
        free(aux);
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
 80a2638:	b087      	sub	sp, #28
    float x1 = aSegmentBegin->point;
 80a263a:	9301      	str	r3, [sp, #4]
    float y1 = aSegmentBegin->pertinence;
 80a263c:	688b      	ldr	r3, [r1, #8]
    float x2 = aSegmentEnd->point;
    float y2 = aSegmentEnd->pertinence;
    float x3 = bSegmentBegin->point;
    float y3 = bSegmentBegin->pertinence;
 80a263e:	f8d6 9008 	ldr.w	r9, [r6, #8]
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
    float x1 = aSegmentBegin->point;
    float y1 = aSegmentBegin->pertinence;
 80a2642:	9302      	str	r3, [sp, #8]
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2644:	9b10      	ldr	r3, [sp, #64]	; 0x40
        this->cleanPoints(aux->next);
        free(aux);
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
 80a2646:	9005      	str	r0, [sp, #20]
 80a2648:	460c      	mov	r4, r1
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a264a:	6898      	ldr	r0, [r3, #8]
 80a264c:	4649      	mov	r1, r9
        this->cleanPoints(aux->next);
        free(aux);
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
 80a264e:	4617      	mov	r7, r2
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2650:	f002 fa8e 	bl	80a4b70 <__aeabi_fsub>
 80a2654:	9901      	ldr	r1, [sp, #4]
 80a2656:	4682      	mov	sl, r0
 80a2658:	6878      	ldr	r0, [r7, #4]
 80a265a:	f002 fa89 	bl	80a4b70 <__aeabi_fsub>
bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
    float x1 = aSegmentBegin->point;
    float y1 = aSegmentBegin->pertinence;
    float x2 = aSegmentEnd->point;
    float y2 = aSegmentEnd->pertinence;
    float x3 = bSegmentBegin->point;
 80a265e:	f8d6 8004 	ldr.w	r8, [r6, #4]
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2662:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a2664:	4641      	mov	r1, r8
 80a2666:	9003      	str	r0, [sp, #12]
 80a2668:	6858      	ldr	r0, [r3, #4]
 80a266a:	f002 fa81 	bl	80a4b70 <__aeabi_fsub>
 80a266e:	9902      	ldr	r1, [sp, #8]
 80a2670:	4683      	mov	fp, r0
 80a2672:	68b8      	ldr	r0, [r7, #8]
 80a2674:	f002 fa7c 	bl	80a4b70 <__aeabi_fsub>
 80a2678:	9903      	ldr	r1, [sp, #12]
 80a267a:	9004      	str	r0, [sp, #16]
 80a267c:	4650      	mov	r0, sl
 80a267e:	f002 fb81 	bl	80a4d84 <__aeabi_fmul>
 80a2682:	9904      	ldr	r1, [sp, #16]
 80a2684:	4605      	mov	r5, r0
 80a2686:	4658      	mov	r0, fp
 80a2688:	f002 fb7c 	bl	80a4d84 <__aeabi_fmul>
 80a268c:	4601      	mov	r1, r0
 80a268e:	4628      	mov	r0, r5
 80a2690:	f002 fa6e 	bl	80a4b70 <__aeabi_fsub>
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a2694:	4649      	mov	r1, r9
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2696:	4605      	mov	r5, r0
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a2698:	9802      	ldr	r0, [sp, #8]
 80a269a:	f002 fa69 	bl	80a4b70 <__aeabi_fsub>
 80a269e:	4641      	mov	r1, r8
 80a26a0:	4681      	mov	r9, r0
 80a26a2:	9801      	ldr	r0, [sp, #4]
 80a26a4:	f002 fa64 	bl	80a4b70 <__aeabi_fsub>
 80a26a8:	4649      	mov	r1, r9
 80a26aa:	4680      	mov	r8, r0
 80a26ac:	4658      	mov	r0, fp
 80a26ae:	f002 fb69 	bl	80a4d84 <__aeabi_fmul>
 80a26b2:	4641      	mov	r1, r8
 80a26b4:	4683      	mov	fp, r0
 80a26b6:	4650      	mov	r0, sl
 80a26b8:	f002 fb64 	bl	80a4d84 <__aeabi_fmul>
 80a26bc:	4601      	mov	r1, r0
 80a26be:	4658      	mov	r0, fp
 80a26c0:	f002 fa56 	bl	80a4b70 <__aeabi_fsub>
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a26c4:	4649      	mov	r1, r9
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a26c6:	4682      	mov	sl, r0
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a26c8:	9803      	ldr	r0, [sp, #12]
 80a26ca:	f002 fb5b 	bl	80a4d84 <__aeabi_fmul>
 80a26ce:	4641      	mov	r1, r8
 80a26d0:	4681      	mov	r9, r0
 80a26d2:	9804      	ldr	r0, [sp, #16]
 80a26d4:	f002 fb56 	bl	80a4d84 <__aeabi_fmul>
 80a26d8:	4601      	mov	r1, r0
 80a26da:	4648      	mov	r0, r9
 80a26dc:	f002 fa48 	bl	80a4b70 <__aeabi_fsub>

    if(denom < 0.0){
 80a26e0:	2100      	movs	r1, #0
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a26e2:	4680      	mov	r8, r0

    if(denom < 0.0){
 80a26e4:	4628      	mov	r0, r5
 80a26e6:	f002 fceb 	bl	80a50c0 <__aeabi_fcmplt>
 80a26ea:	b108      	cbz	r0, 80a26f0 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xc0>
        denom *= -1.0;
 80a26ec:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    }
    if(numera < 0.0){
 80a26f0:	2100      	movs	r1, #0
 80a26f2:	4650      	mov	r0, sl
 80a26f4:	f002 fce4 	bl	80a50c0 <__aeabi_fcmplt>
 80a26f8:	b108      	cbz	r0, 80a26fe <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xce>
        numera *= -1.0;
 80a26fa:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
    }
    if(numerb < 0.0){
 80a26fe:	2100      	movs	r1, #0
 80a2700:	4640      	mov	r0, r8
 80a2702:	f002 fcdd 	bl	80a50c0 <__aeabi_fcmplt>
 80a2706:	b108      	cbz	r0, 80a270c <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xdc>
        numerb *= -1.0;
 80a2708:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
    }

    // Se os seguimentos forem paralelos, retornar falso
    if(denom < EPS){
 80a270c:	4628      	mov	r0, r5
 80a270e:	f001 feed 	bl	80a44ec <__aeabi_f2d>
 80a2712:	a331      	add	r3, pc, #196	; (adr r3, 80a27d8 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x1a8>)
 80a2714:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2718:	f002 f9ae 	bl	80a4a78 <__aeabi_dcmplt>
 80a271c:	b108      	cbz	r0, 80a2722 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xf2>
        return false;
 80a271e:	2000      	movs	r0, #0
 80a2720:	e057      	b.n	80a27d2 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x1a2>
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
 80a2722:	4629      	mov	r1, r5
 80a2724:	4650      	mov	r0, sl
 80a2726:	f002 fbe1 	bl	80a4eec <__aeabi_fdiv>
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a272a:	2100      	movs	r1, #0
    if(denom < EPS){
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
 80a272c:	4681      	mov	r9, r0
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a272e:	f002 fcc7 	bl	80a50c0 <__aeabi_fcmplt>
 80a2732:	2800      	cmp	r0, #0
 80a2734:	d1f3      	bne.n	80a271e <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
 80a2736:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a273a:	4648      	mov	r0, r9
 80a273c:	f002 fcde 	bl	80a50fc <__aeabi_fcmpgt>
 80a2740:	2800      	cmp	r0, #0
 80a2742:	d1ec      	bne.n	80a271e <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
    mub = numerb / denom;
 80a2744:	4629      	mov	r1, r5
 80a2746:	4640      	mov	r0, r8
 80a2748:	f002 fbd0 	bl	80a4eec <__aeabi_fdiv>
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a274c:	2100      	movs	r1, #0
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
    mub = numerb / denom;
 80a274e:	4605      	mov	r5, r0
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a2750:	f002 fcb6 	bl	80a50c0 <__aeabi_fcmplt>
 80a2754:	2800      	cmp	r0, #0
 80a2756:	d1e2      	bne.n	80a271e <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
 80a2758:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a275c:	4628      	mov	r0, r5
 80a275e:	f002 fccd 	bl	80a50fc <__aeabi_fcmpgt>
 80a2762:	2800      	cmp	r0, #0
 80a2764:	d1db      	bne.n	80a271e <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
        return false;
    }else{
        // Calculando o ponto e a pertinencia do novo elemento
        point         = x1 + mua * (x2 - x1);
 80a2766:	4649      	mov	r1, r9
 80a2768:	9803      	ldr	r0, [sp, #12]
 80a276a:	f002 fb0b 	bl	80a4d84 <__aeabi_fmul>
 80a276e:	9901      	ldr	r1, [sp, #4]
 80a2770:	f002 fa00 	bl	80a4b74 <__addsf3>
        pertinence     = y1 + mua * (y2 - y1);
 80a2774:	4649      	mov	r1, r9
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
        return false;
    }else{
        // Calculando o ponto e a pertinencia do novo elemento
        point         = x1 + mua * (x2 - x1);
 80a2776:	4605      	mov	r5, r0
        pertinence     = y1 + mua * (y2 - y1);
 80a2778:	9804      	ldr	r0, [sp, #16]
 80a277a:	f002 fb03 	bl	80a4d84 <__aeabi_fmul>
 80a277e:	9902      	ldr	r1, [sp, #8]
 80a2780:	f002 f9f8 	bl	80a4b74 <__addsf3>
 80a2784:	4680      	mov	r8, r0

        // Adicionando um novo ponto
        pointsArray* aux;
        // Alocando espaço na memória
        if((aux = (pointsArray *) malloc(sizeof(pointsArray))) == NULL){
 80a2786:	2010      	movs	r0, #16
 80a2788:	f000 fed0 	bl	80a352c <malloc>
 80a278c:	2800      	cmp	r0, #0
 80a278e:	d0c6      	beq.n	80a271e <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
            return false;
        }

        aux->previous = bSegmentEnd;
 80a2790:	9b10      	ldr	r3, [sp, #64]	; 0x40
        aux->point = point;
 80a2792:	6045      	str	r5, [r0, #4]
        // Alocando espaço na memória
        if((aux = (pointsArray *) malloc(sizeof(pointsArray))) == NULL){
            return false;
        }

        aux->previous = bSegmentEnd;
 80a2794:	6003      	str	r3, [r0, #0]
        aux->point = point;
        aux->pertinence = pertinence;
 80a2796:	f8c0 8008 	str.w	r8, [r0, #8]
        aux->next = aSegmentEnd;
 80a279a:	60c7      	str	r7, [r0, #12]

        bSegmentEnd->next = aux;
 80a279c:	60d8      	str	r0, [r3, #12]
        aSegmentEnd->previous = aux;
 80a279e:	6038      	str	r0, [r7, #0]

        float stopPoint = bSegmentBegin->point;
 80a27a0:	6877      	ldr	r7, [r6, #4]
        float stopPertinence = bSegmentBegin->pertinence;
 80a27a2:	68b6      	ldr	r6, [r6, #8]

        pointsArray* temp = aSegmentBegin;
        pointsArray* excl;

        do{
            float pointToCompare = temp->point;
 80a27a4:	f8d4 9004 	ldr.w	r9, [r4, #4]
            float pertinenceToCompare = temp->pertinence;

            excl = temp->previous;

            this->rmvPoint(temp);
 80a27a8:	4621      	mov	r1, r4
 80a27aa:	9805      	ldr	r0, [sp, #20]
        pointsArray* temp = aSegmentBegin;
        pointsArray* excl;

        do{
            float pointToCompare = temp->point;
            float pertinenceToCompare = temp->pertinence;
 80a27ac:	f8d4 8008 	ldr.w	r8, [r4, #8]

            excl = temp->previous;
 80a27b0:	6825      	ldr	r5, [r4, #0]

            this->rmvPoint(temp);
 80a27b2:	f7ff ff35 	bl	80a2620 <_ZN16FuzzyComposition8rmvPointEP11pointsArray>

            temp = excl;

            if(stopPoint == pointToCompare && stopPertinence == pertinenceToCompare){
 80a27b6:	4649      	mov	r1, r9
 80a27b8:	4638      	mov	r0, r7
 80a27ba:	f002 fc77 	bl	80a50ac <__aeabi_fcmpeq>
 80a27be:	b120      	cbz	r0, 80a27ca <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x19a>
 80a27c0:	4641      	mov	r1, r8
 80a27c2:	4630      	mov	r0, r6
 80a27c4:	f002 fc72 	bl	80a50ac <__aeabi_fcmpeq>
 80a27c8:	b910      	cbnz	r0, 80a27d0 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x1a0>
 80a27ca:	462c      	mov	r4, r5
                break;
            }
        }while(temp != NULL);
 80a27cc:	2d00      	cmp	r5, #0
 80a27ce:	d1e9      	bne.n	80a27a4 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x174>

        return true;
 80a27d0:	2001      	movs	r0, #1
    }
}
 80a27d2:	b007      	add	sp, #28
 80a27d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a27d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80a27dc:	3f50624d 	.word	0x3f50624d

080a27e0 <_ZN16FuzzyComposition5buildEv>:
        aux = aux->previous;
    }
    return false;
}

bool FuzzyComposition::build(){
 80a27e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a27e2:	4606      	mov	r6, r0
    pointsArray* aux;

    aux = this->points;
 80a27e4:	6845      	ldr	r5, [r0, #4]
    while(aux != NULL){
 80a27e6:	b1dd      	cbz	r5, 80a2820 <_ZN16FuzzyComposition5buildEv+0x40>
 80a27e8:	462c      	mov	r4, r5
        pointsArray* temp = aux;
        while(temp->previous != NULL){
 80a27ea:	6827      	ldr	r7, [r4, #0]
 80a27ec:	b1b7      	cbz	r7, 80a281c <_ZN16FuzzyComposition5buildEv+0x3c>
            if(temp->point < temp->previous->point){
 80a27ee:	6879      	ldr	r1, [r7, #4]
 80a27f0:	6860      	ldr	r0, [r4, #4]
 80a27f2:	f002 fc65 	bl	80a50c0 <__aeabi_fcmplt>
 80a27f6:	b908      	cbnz	r0, 80a27fc <_ZN16FuzzyComposition5buildEv+0x1c>
 80a27f8:	463c      	mov	r4, r7
 80a27fa:	e7f6      	b.n	80a27ea <_ZN16FuzzyComposition5buildEv+0xa>
 80a27fc:	4627      	mov	r7, r4
            temp = temp->previous;
        }
        pointsArray* zPoint;
        if(temp != NULL){
            zPoint = temp;
            while(temp->previous != NULL){
 80a27fe:	683b      	ldr	r3, [r7, #0]
 80a2800:	b163      	cbz	r3, 80a281c <_ZN16FuzzyComposition5buildEv+0x3c>
                bool result = false;
                if(temp->previous->previous != NULL){
 80a2802:	681a      	ldr	r2, [r3, #0]
 80a2804:	b142      	cbz	r2, 80a2818 <_ZN16FuzzyComposition5buildEv+0x38>
                    result = rebuild(zPoint, zPoint->next, temp->previous, temp->previous->previous);
 80a2806:	9200      	str	r2, [sp, #0]
 80a2808:	68e2      	ldr	r2, [r4, #12]
 80a280a:	4621      	mov	r1, r4
 80a280c:	4630      	mov	r0, r6
 80a280e:	f7ff ff0f 	bl	80a2630 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_>
                }
                if(result == true){
 80a2812:	b108      	cbz	r0, 80a2818 <_ZN16FuzzyComposition5buildEv+0x38>
                    aux = this->points;
 80a2814:	6875      	ldr	r5, [r6, #4]
                    break;
 80a2816:	e001      	b.n	80a281c <_ZN16FuzzyComposition5buildEv+0x3c>
                }
                temp = temp->previous;
 80a2818:	683f      	ldr	r7, [r7, #0]
            temp = temp->previous;
        }
        pointsArray* zPoint;
        if(temp != NULL){
            zPoint = temp;
            while(temp->previous != NULL){
 80a281a:	e7f0      	b.n	80a27fe <_ZN16FuzzyComposition5buildEv+0x1e>
                    break;
                }
                temp = temp->previous;
            }
        }
        aux = aux->next;
 80a281c:	68ed      	ldr	r5, [r5, #12]

bool FuzzyComposition::build(){
    pointsArray* aux;

    aux = this->points;
    while(aux != NULL){
 80a281e:	e7e2      	b.n	80a27e6 <_ZN16FuzzyComposition5buildEv+0x6>
            }
        }
        aux = aux->next;
    }
    return true;
}
 80a2820:	2001      	movs	r0, #1
 80a2822:	b003      	add	sp, #12
 80a2824:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2826 <_ZN10FuzzyInputC1Ei>:

// CONSTRUTORES
FuzzyInput::FuzzyInput() : FuzzyIO(){
}

FuzzyInput::FuzzyInput(int index) : FuzzyIO(index){
 80a2826:	b510      	push	{r4, lr}
 80a2828:	4604      	mov	r4, r0
 80a282a:	f000 f80f 	bl	80a284c <_ZN7FuzzyIOC1Ei>
}
 80a282e:	4620      	mov	r0, r4
 80a2830:	bd10      	pop	{r4, pc}

080a2832 <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv>:
// DESTRUTOR
FuzzyInput::~FuzzyInput(){
}

// MÉTODOS PÚBLICOS
bool FuzzyInput::calculateFuzzySetPertinences(){
 80a2832:	b538      	push	{r3, r4, r5, lr}
 80a2834:	4605      	mov	r5, r0
    fuzzySetArray *aux;
    aux = this->fuzzySets;
 80a2836:	6884      	ldr	r4, [r0, #8]

    while(aux != NULL){
 80a2838:	b134      	cbz	r4, 80a2848 <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv+0x16>
        if (aux->fuzzySet != NULL){
 80a283a:	6820      	ldr	r0, [r4, #0]
 80a283c:	b110      	cbz	r0, 80a2844 <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv+0x12>
            aux->fuzzySet->calculatePertinence(this->crispInput);
 80a283e:	6869      	ldr	r1, [r5, #4]
 80a2840:	f000 fa7e 	bl	80a2d40 <_ZN8FuzzySet19calculatePertinenceEf>
        }
        aux = aux->next;
 80a2844:	6864      	ldr	r4, [r4, #4]
// MÉTODOS PÚBLICOS
bool FuzzyInput::calculateFuzzySetPertinences(){
    fuzzySetArray *aux;
    aux = this->fuzzySets;

    while(aux != NULL){
 80a2846:	e7f7      	b.n	80a2838 <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv+0x6>
        }
        aux = aux->next;
    }
    
    return true;
 80a2848:	2001      	movs	r0, #1
 80a284a:	bd38      	pop	{r3, r4, r5, pc}

080a284c <_ZN7FuzzyIOC1Ei>:
}

FuzzyIO::FuzzyIO(int index){
    this->index = index;
    // Iniciando os ponteiros como nulo
    this->fuzzySets          = NULL;
 80a284c:	2200      	movs	r2, #0
// CONSTRUTORES
FuzzyIO::FuzzyIO(){
}

FuzzyIO::FuzzyIO(int index){
    this->index = index;
 80a284e:	6001      	str	r1, [r0, #0]
    // Iniciando os ponteiros como nulo
    this->fuzzySets          = NULL;
 80a2850:	6082      	str	r2, [r0, #8]
    this->fuzzySetsCursor    = NULL;
 80a2852:	60c2      	str	r2, [r0, #12]
}
 80a2854:	4770      	bx	lr

080a2856 <_ZN7FuzzyIO8getIndexEv>:
}

// MÉTODOS PÚBLICOS
int FuzzyIO::getIndex(){
    return this->index;
}
 80a2856:	6800      	ldr	r0, [r0, #0]
 80a2858:	4770      	bx	lr

080a285a <_ZN7FuzzyIO13setCrispInputEf>:

void FuzzyIO::setCrispInput(float crispInput){
    this->crispInput = crispInput;
 80a285a:	6041      	str	r1, [r0, #4]
 80a285c:	4770      	bx	lr

080a285e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>:

float FuzzyIO::getCrispInput(){
    return this->crispInput;
}

bool FuzzyIO::addFuzzySet(FuzzySet* fuzzySet){
 80a285e:	b538      	push	{r3, r4, r5, lr}
 80a2860:	4604      	mov	r4, r0
    fuzzySetArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetArray *) malloc(sizeof(fuzzySetArray))) == NULL){
 80a2862:	2008      	movs	r0, #8

float FuzzyIO::getCrispInput(){
    return this->crispInput;
}

bool FuzzyIO::addFuzzySet(FuzzySet* fuzzySet){
 80a2864:	460d      	mov	r5, r1
    fuzzySetArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetArray *) malloc(sizeof(fuzzySetArray))) == NULL){
 80a2866:	f000 fe61 	bl	80a352c <malloc>
 80a286a:	b150      	cbz	r0, 80a2882 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet+0x24>
        return false;
    }
    aux->fuzzySet     = fuzzySet;
    aux->next         = NULL;
 80a286c:	2300      	movs	r3, #0
    fuzzySetArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetArray *) malloc(sizeof(fuzzySetArray))) == NULL){
        return false;
    }
    aux->fuzzySet     = fuzzySet;
 80a286e:	6005      	str	r5, [r0, #0]
    aux->next         = NULL;
 80a2870:	6043      	str	r3, [r0, #4]

    if(this->fuzzySets == NULL){
 80a2872:	68a3      	ldr	r3, [r4, #8]
 80a2874:	b90b      	cbnz	r3, 80a287a <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet+0x1c>
        this->fuzzySets = aux;
 80a2876:	60a0      	str	r0, [r4, #8]
 80a2878:	e001      	b.n	80a287e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet+0x20>
        this->fuzzySetsCursor = aux;
    }else{
        this->fuzzySetsCursor->next = aux;
 80a287a:	68e3      	ldr	r3, [r4, #12]
 80a287c:	6058      	str	r0, [r3, #4]
        this->fuzzySetsCursor = aux;
 80a287e:	60e0      	str	r0, [r4, #12]
    }
    return true;
 80a2880:	2001      	movs	r0, #1
}
 80a2882:	bd38      	pop	{r3, r4, r5, pc}

080a2884 <_ZN7FuzzyIO14resetFuzzySetsEv>:

void FuzzyIO::resetFuzzySets(){
 80a2884:	b510      	push	{r4, lr}
    fuzzySetArray* fuzzySetsAux;
    fuzzySetsAux = this->fuzzySets;
 80a2886:	6884      	ldr	r4, [r0, #8]
    // Calculando as pertinências de totos os FuzzyInputs
    while(fuzzySetsAux != NULL){
 80a2888:	b124      	cbz	r4, 80a2894 <_ZN7FuzzyIO14resetFuzzySetsEv+0x10>
        fuzzySetsAux->fuzzySet->reset();
 80a288a:	6820      	ldr	r0, [r4, #0]
 80a288c:	f000 faed 	bl	80a2e6a <_ZN8FuzzySet5resetEv>
        fuzzySetsAux = fuzzySetsAux->next;
 80a2890:	6864      	ldr	r4, [r4, #4]

void FuzzyIO::resetFuzzySets(){
    fuzzySetArray* fuzzySetsAux;
    fuzzySetsAux = this->fuzzySets;
    // Calculando as pertinências de totos os FuzzyInputs
    while(fuzzySetsAux != NULL){
 80a2892:	e7f9      	b.n	80a2888 <_ZN7FuzzyIO14resetFuzzySetsEv+0x4>
 80a2894:	bd10      	pop	{r4, pc}

080a2896 <_ZN11FuzzyOutputC1Ei>:

// CONSTRUTORES
FuzzyOutput::FuzzyOutput() : FuzzyIO(){
}

FuzzyOutput::FuzzyOutput(int index) : FuzzyIO(index){
 80a2896:	b510      	push	{r4, lr}
 80a2898:	4604      	mov	r4, r0
 80a289a:	f7ff ffd7 	bl	80a284c <_ZN7FuzzyIOC1Ei>
 80a289e:	f104 0010 	add.w	r0, r4, #16
 80a28a2:	f7ff fda7 	bl	80a23f4 <_ZN16FuzzyCompositionC1Ev>
}
 80a28a6:	4620      	mov	r0, r4
 80a28a8:	bd10      	pop	{r4, pc}

080a28aa <_ZN11FuzzyOutput14getCrispOutputEv>:

    return true;
}

float FuzzyOutput::getCrispOutput(){
    return this->fuzzyComposition.avaliate();
 80a28aa:	3010      	adds	r0, #16
 80a28ac:	f7ff bdd4 	b.w	80a2458 <_ZN16FuzzyComposition8avaliateEv>

080a28b0 <_ZN11FuzzyOutput5orderEv>:
}

// Um simples Bubble Sort
bool FuzzyOutput::order(){
 80a28b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fuzzySetArray *aux1;
    fuzzySetArray *aux2;

    aux1 = this->fuzzySets;
 80a28b2:	6884      	ldr	r4, [r0, #8]
float FuzzyOutput::getCrispOutput(){
    return this->fuzzyComposition.avaliate();
}

// Um simples Bubble Sort
bool FuzzyOutput::order(){
 80a28b4:	4606      	mov	r6, r0
    fuzzySetArray *aux1;
    fuzzySetArray *aux2;

    aux1 = this->fuzzySets;
 80a28b6:	4625      	mov	r5, r4
    aux2 = this->fuzzySets;

    while(aux1 != NULL){
 80a28b8:	b1cd      	cbz	r5, 80a28ee <_ZN11FuzzyOutput5orderEv+0x3e>
        while(aux2 != NULL){
 80a28ba:	b1ac      	cbz	r4, 80a28e8 <_ZN11FuzzyOutput5orderEv+0x38>
            if(aux2->next != NULL){
 80a28bc:	6863      	ldr	r3, [r4, #4]
 80a28be:	b18b      	cbz	r3, 80a28e4 <_ZN11FuzzyOutput5orderEv+0x34>
                if(aux2->fuzzySet->getPointA() > aux2->next->fuzzySet->getPointA()){
 80a28c0:	6820      	ldr	r0, [r4, #0]
 80a28c2:	f000 fa35 	bl	80a2d30 <_ZN8FuzzySet9getPointAEv>
 80a28c6:	6863      	ldr	r3, [r4, #4]
 80a28c8:	4607      	mov	r7, r0
 80a28ca:	6818      	ldr	r0, [r3, #0]
 80a28cc:	f000 fa30 	bl	80a2d30 <_ZN8FuzzySet9getPointAEv>
 80a28d0:	4601      	mov	r1, r0
 80a28d2:	4638      	mov	r0, r7
 80a28d4:	f002 fc12 	bl	80a50fc <__aeabi_fcmpgt>
 80a28d8:	b120      	cbz	r0, 80a28e4 <_ZN11FuzzyOutput5orderEv+0x34>

// MÉTODOS PRIVADOS
bool FuzzyOutput::swap(fuzzySetArray* fuzzySetA, fuzzySetArray* fuzzySetB){
    FuzzySet* aux;
    
    aux = fuzzySetA->fuzzySet;
 80a28da:	e894 000c 	ldmia.w	r4, {r2, r3}
    fuzzySetA->fuzzySet = fuzzySetB->fuzzySet;
 80a28de:	6819      	ldr	r1, [r3, #0]
 80a28e0:	6021      	str	r1, [r4, #0]
    fuzzySetB->fuzzySet = aux;
 80a28e2:	601a      	str	r2, [r3, #0]
            if(aux2->next != NULL){
                if(aux2->fuzzySet->getPointA() > aux2->next->fuzzySet->getPointA()){
                    this->swap(aux2, aux2->next);
                }
            }
            aux2 = aux2->next;
 80a28e4:	6864      	ldr	r4, [r4, #4]

    aux1 = this->fuzzySets;
    aux2 = this->fuzzySets;

    while(aux1 != NULL){
        while(aux2 != NULL){
 80a28e6:	e7e8      	b.n	80a28ba <_ZN11FuzzyOutput5orderEv+0xa>
                    this->swap(aux2, aux2->next);
                }
            }
            aux2 = aux2->next;
        }
        aux2 = this->fuzzySets;
 80a28e8:	68b4      	ldr	r4, [r6, #8]
        aux1 = aux1->next;
 80a28ea:	686d      	ldr	r5, [r5, #4]
    fuzzySetArray *aux2;

    aux1 = this->fuzzySets;
    aux2 = this->fuzzySets;

    while(aux1 != NULL){
 80a28ec:	e7e4      	b.n	80a28b8 <_ZN11FuzzyOutput5orderEv+0x8>
        }
        aux2 = this->fuzzySets;
        aux1 = aux1->next;
    }
    return true;
}
 80a28ee:	2001      	movs	r0, #1
 80a28f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a28f2:	0000      	movs	r0, r0
 80a28f4:	0000      	movs	r0, r0
	...

080a28f8 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_>:
    fuzzySetB->fuzzySet = aux;

    return true;
}

bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
 80a28f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a28fc:	9810      	ldr	r0, [sp, #64]	; 0x40
    fuzzySetB->fuzzySet = aux;

    return true;
}

bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
 80a28fe:	460f      	mov	r7, r1
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2900:	990e      	ldr	r1, [sp, #56]	; 0x38
    fuzzySetB->fuzzySet = aux;

    return true;
}

bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
 80a2902:	4615      	mov	r5, r2
 80a2904:	461c      	mov	r4, r3
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2906:	f002 f933 	bl	80a4b70 <__aeabi_fsub>
 80a290a:	4639      	mov	r1, r7
 80a290c:	4682      	mov	sl, r0
 80a290e:	4620      	mov	r0, r4
 80a2910:	f002 f92e 	bl	80a4b70 <__aeabi_fsub>
 80a2914:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a2916:	4680      	mov	r8, r0
 80a2918:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80a291a:	f002 f929 	bl	80a4b70 <__aeabi_fsub>
 80a291e:	4629      	mov	r1, r5
 80a2920:	4683      	mov	fp, r0
 80a2922:	980c      	ldr	r0, [sp, #48]	; 0x30
 80a2924:	f002 f924 	bl	80a4b70 <__aeabi_fsub>
 80a2928:	4641      	mov	r1, r8
 80a292a:	4606      	mov	r6, r0
 80a292c:	4650      	mov	r0, sl
 80a292e:	f002 fa29 	bl	80a4d84 <__aeabi_fmul>
 80a2932:	4631      	mov	r1, r6
 80a2934:	4604      	mov	r4, r0
 80a2936:	4658      	mov	r0, fp
 80a2938:	f002 fa24 	bl	80a4d84 <__aeabi_fmul>
 80a293c:	4601      	mov	r1, r0
 80a293e:	4620      	mov	r0, r4
 80a2940:	f002 f916 	bl	80a4b70 <__aeabi_fsub>
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a2944:	990e      	ldr	r1, [sp, #56]	; 0x38

bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2946:	4604      	mov	r4, r0
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a2948:	4628      	mov	r0, r5
 80a294a:	f002 f911 	bl	80a4b70 <__aeabi_fsub>
 80a294e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a2950:	4681      	mov	r9, r0
 80a2952:	4638      	mov	r0, r7
 80a2954:	f002 f90c 	bl	80a4b70 <__aeabi_fsub>
 80a2958:	4649      	mov	r1, r9
 80a295a:	9001      	str	r0, [sp, #4]
 80a295c:	4658      	mov	r0, fp
 80a295e:	f002 fa11 	bl	80a4d84 <__aeabi_fmul>
 80a2962:	9901      	ldr	r1, [sp, #4]
 80a2964:	4683      	mov	fp, r0
 80a2966:	4650      	mov	r0, sl
 80a2968:	f002 fa0c 	bl	80a4d84 <__aeabi_fmul>
 80a296c:	4601      	mov	r1, r0
 80a296e:	4658      	mov	r0, fp
 80a2970:	f002 f8fe 	bl	80a4b70 <__aeabi_fsub>
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a2974:	4649      	mov	r1, r9
bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a2976:	4682      	mov	sl, r0
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a2978:	4640      	mov	r0, r8
 80a297a:	f002 fa03 	bl	80a4d84 <__aeabi_fmul>
 80a297e:	9901      	ldr	r1, [sp, #4]
 80a2980:	4681      	mov	r9, r0
 80a2982:	4630      	mov	r0, r6
 80a2984:	f002 f9fe 	bl	80a4d84 <__aeabi_fmul>
 80a2988:	4601      	mov	r1, r0
 80a298a:	4648      	mov	r0, r9
 80a298c:	f002 f8f0 	bl	80a4b70 <__aeabi_fsub>

    if(denom < 0.0){
 80a2990:	2100      	movs	r1, #0
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a2992:	4681      	mov	r9, r0

    if(denom < 0.0){
 80a2994:	4620      	mov	r0, r4
 80a2996:	f002 fb93 	bl	80a50c0 <__aeabi_fcmplt>
 80a299a:	b108      	cbz	r0, 80a29a0 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0xa8>
        denom *= -1.0;
 80a299c:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    }
    if(numera < 0.0){
 80a29a0:	2100      	movs	r1, #0
 80a29a2:	4650      	mov	r0, sl
 80a29a4:	f002 fb8c 	bl	80a50c0 <__aeabi_fcmplt>
 80a29a8:	b108      	cbz	r0, 80a29ae <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0xb6>
        numera *= -1.0;
 80a29aa:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
    }
    if(numerb < 0.0){
 80a29ae:	2100      	movs	r1, #0
 80a29b0:	4648      	mov	r0, r9
 80a29b2:	f002 fb85 	bl	80a50c0 <__aeabi_fcmplt>
 80a29b6:	b108      	cbz	r0, 80a29bc <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0xc4>
        numerb *= -1.0;
 80a29b8:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
    }

    // Se os seguimentos forem paralelos, retornar falso
    if(denom < EPS){
 80a29bc:	4620      	mov	r0, r4
 80a29be:	f001 fd95 	bl	80a44ec <__aeabi_f2d>
 80a29c2:	a321      	add	r3, pc, #132	; (adr r3, 80a2a48 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x150>)
 80a29c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a29c8:	f002 f856 	bl	80a4a78 <__aeabi_dcmplt>
 80a29cc:	9001      	str	r0, [sp, #4]
 80a29ce:	2800      	cmp	r0, #0
 80a29d0:	d133      	bne.n	80a2a3a <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x142>
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
 80a29d2:	4621      	mov	r1, r4
 80a29d4:	4650      	mov	r0, sl
 80a29d6:	f002 fa89 	bl	80a4eec <__aeabi_fdiv>
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a29da:	2100      	movs	r1, #0
    if(denom < EPS){
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
 80a29dc:	4682      	mov	sl, r0
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a29de:	f002 fb6f 	bl	80a50c0 <__aeabi_fcmplt>
 80a29e2:	bb50      	cbnz	r0, 80a2a3a <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x142>
 80a29e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a29e8:	4650      	mov	r0, sl
 80a29ea:	f002 fb87 	bl	80a50fc <__aeabi_fcmpgt>
 80a29ee:	bb20      	cbnz	r0, 80a2a3a <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x142>
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
    mub = numerb / denom;
 80a29f0:	4621      	mov	r1, r4
 80a29f2:	9001      	str	r0, [sp, #4]
 80a29f4:	4648      	mov	r0, r9
 80a29f6:	f002 fa79 	bl	80a4eec <__aeabi_fdiv>
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a29fa:	2100      	movs	r1, #0
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
    mub = numerb / denom;
 80a29fc:	4681      	mov	r9, r0
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a29fe:	f002 fb5f 	bl	80a50c0 <__aeabi_fcmplt>
 80a2a02:	4604      	mov	r4, r0
 80a2a04:	b9c8      	cbnz	r0, 80a2a3a <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x142>
 80a2a06:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2a0a:	4648      	mov	r0, r9
 80a2a0c:	f002 fb76 	bl	80a50fc <__aeabi_fcmpgt>
 80a2a10:	b9a8      	cbnz	r0, 80a2a3e <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x146>
        return false;
    }else{
        // Calculando o ponto e a pertinencia do novo elemento
        *point      = x1 + mua * (x2 - x1);
 80a2a12:	4651      	mov	r1, sl
 80a2a14:	4640      	mov	r0, r8
 80a2a16:	f002 f9b5 	bl	80a4d84 <__aeabi_fmul>
 80a2a1a:	4639      	mov	r1, r7
 80a2a1c:	f002 f8aa 	bl	80a4b74 <__addsf3>
 80a2a20:	9b11      	ldr	r3, [sp, #68]	; 0x44
        *pertinence = y1 + mua * (y2 - y1);
 80a2a22:	4651      	mov	r1, sl
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
        return false;
    }else{
        // Calculando o ponto e a pertinencia do novo elemento
        *point      = x1 + mua * (x2 - x1);
 80a2a24:	6018      	str	r0, [r3, #0]
        *pertinence = y1 + mua * (y2 - y1);
 80a2a26:	4630      	mov	r0, r6
 80a2a28:	f002 f9ac 	bl	80a4d84 <__aeabi_fmul>
 80a2a2c:	4629      	mov	r1, r5
 80a2a2e:	f002 f8a1 	bl	80a4b74 <__addsf3>
 80a2a32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a2a34:	6018      	str	r0, [r3, #0]

        return true;
 80a2a36:	2001      	movs	r0, #1
 80a2a38:	e002      	b.n	80a2a40 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x148>
        numerb *= -1.0;
    }

    // Se os seguimentos forem paralelos, retornar falso
    if(denom < EPS){
        return false;
 80a2a3a:	2000      	movs	r0, #0
 80a2a3c:	e000      	b.n	80a2a40 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x148>
 80a2a3e:	4620      	mov	r0, r4
        *point      = x1 + mua * (x2 - x1);
        *pertinence = y1 + mua * (y2 - y1);

        return true;
    }
 80a2a40:	b003      	add	sp, #12
 80a2a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2a46:	bf00      	nop
 80a2a48:	d2f1a9fc 	.word	0xd2f1a9fc
 80a2a4c:	3f50624d 	.word	0x3f50624d

080a2a50 <_ZN11FuzzyOutput8truncateEv>:
FuzzyOutput::~FuzzyOutput(){
    this->fuzzyComposition.empty();
}

// MÉTODOS PÚBLICOS
bool FuzzyOutput::truncate(){
 80a2a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2a54:	4606      	mov	r6, r0
    // esvaziando a composição
    this->fuzzyComposition.empty();
 80a2a56:	f100 0510 	add.w	r5, r0, #16
FuzzyOutput::~FuzzyOutput(){
    this->fuzzyComposition.empty();
}

// MÉTODOS PÚBLICOS
bool FuzzyOutput::truncate(){
 80a2a5a:	b091      	sub	sp, #68	; 0x44
    // esvaziando a composição
    this->fuzzyComposition.empty();
 80a2a5c:	4628      	mov	r0, r5
 80a2a5e:	f7ff fdd5 	bl	80a260c <_ZN16FuzzyComposition5emptyEv>

    fuzzySetArray *aux;
    aux = this->fuzzySets;
 80a2a62:	68b4      	ldr	r4, [r6, #8]
                        this->fuzzyComposition.addPoint(newPointC, newPertinenceC);
                    }
                }
            }else if(aux->fuzzySet->getPointB() != aux->fuzzySet->getPointC()){
                // se trapezio
                if(aux->fuzzySet->getPertinence() == 1.0){
 80a2a64:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
                    }
                }else{
                    float newPointB         = aux->fuzzySet->getPointB();
                    float newPertinenceB    = aux->fuzzySet->getPertinence();

                    rebuild(aux->fuzzySet->getPointA(), 0.0, aux->fuzzySet->getPointB(), 1.0, aux->fuzzySet->getPointA(), aux->fuzzySet->getPertinence(), aux->fuzzySet->getPointD(), aux->fuzzySet->getPertinence(), &newPointB, &newPertinenceB);
 80a2a68:	af0d      	add	r7, sp, #52	; 0x34
    // esvaziando a composição
    this->fuzzyComposition.empty();

    fuzzySetArray *aux;
    aux = this->fuzzySets;
    while(aux != NULL){
 80a2a6a:	2c00      	cmp	r4, #0
 80a2a6c:	f000 8150 	beq.w	80a2d10 <_ZN11FuzzyOutput8truncateEv+0x2c0>
        if(aux->fuzzySet->getPertinence() > 0.0){
 80a2a70:	6820      	ldr	r0, [r4, #0]
 80a2a72:	f000 f9f8 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a2a76:	2100      	movs	r1, #0
 80a2a78:	f002 fb40 	bl	80a50fc <__aeabi_fcmpgt>
 80a2a7c:	2800      	cmp	r0, #0
 80a2a7e:	f000 80d8 	beq.w	80a2c32 <_ZN11FuzzyOutput8truncateEv+0x1e2>
            // Se não for trapezio iniciado com pertinencia 1 (sem o triangulo esquerdo)
            if(aux->fuzzySet->getPointA() != aux->fuzzySet->getPointB()){
 80a2a82:	6820      	ldr	r0, [r4, #0]
 80a2a84:	f000 f954 	bl	80a2d30 <_ZN8FuzzySet9getPointAEv>
 80a2a88:	4680      	mov	r8, r0
 80a2a8a:	6820      	ldr	r0, [r4, #0]
 80a2a8c:	f000 f952 	bl	80a2d34 <_ZN8FuzzySet9getPointBEv>
 80a2a90:	4601      	mov	r1, r0
 80a2a92:	4640      	mov	r0, r8
 80a2a94:	f002 fb0a 	bl	80a50ac <__aeabi_fcmpeq>
 80a2a98:	b980      	cbnz	r0, 80a2abc <_ZN11FuzzyOutput8truncateEv+0x6c>
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointA(), 0.0) == false){
 80a2a9a:	6820      	ldr	r0, [r4, #0]
 80a2a9c:	f000 f948 	bl	80a2d30 <_ZN8FuzzySet9getPointAEv>
 80a2aa0:	2200      	movs	r2, #0
 80a2aa2:	4601      	mov	r1, r0
 80a2aa4:	4628      	mov	r0, r5
 80a2aa6:	f7ff fcc2 	bl	80a242e <_ZN16FuzzyComposition10checkPointEff>
 80a2aaa:	b938      	cbnz	r0, 80a2abc <_ZN11FuzzyOutput8truncateEv+0x6c>
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointA(), 0.0);
 80a2aac:	6820      	ldr	r0, [r4, #0]
 80a2aae:	f000 f93f 	bl	80a2d30 <_ZN8FuzzySet9getPointAEv>
 80a2ab2:	2200      	movs	r2, #0
 80a2ab4:	4601      	mov	r1, r0
 80a2ab6:	4628      	mov	r0, r5
 80a2ab8:	f7ff fca0 	bl	80a23fc <_ZN16FuzzyComposition8addPointEff>
                }
            }

            if(aux->fuzzySet->getPointB() == aux->fuzzySet->getPointC() && aux->fuzzySet->getPointA() != aux->fuzzySet->getPointD()){
 80a2abc:	6820      	ldr	r0, [r4, #0]
 80a2abe:	f000 f939 	bl	80a2d34 <_ZN8FuzzySet9getPointBEv>
 80a2ac2:	4680      	mov	r8, r0
 80a2ac4:	6820      	ldr	r0, [r4, #0]
 80a2ac6:	f000 f937 	bl	80a2d38 <_ZN8FuzzySet9getPointCEv>
 80a2aca:	4601      	mov	r1, r0
 80a2acc:	4640      	mov	r0, r8
 80a2ace:	f002 faed 	bl	80a50ac <__aeabi_fcmpeq>
 80a2ad2:	b168      	cbz	r0, 80a2af0 <_ZN11FuzzyOutput8truncateEv+0xa0>
 80a2ad4:	6820      	ldr	r0, [r4, #0]
 80a2ad6:	f000 f92b 	bl	80a2d30 <_ZN8FuzzySet9getPointAEv>
 80a2ada:	4680      	mov	r8, r0
 80a2adc:	6820      	ldr	r0, [r4, #0]
 80a2ade:	f000 f92d 	bl	80a2d3c <_ZN8FuzzySet9getPointDEv>
 80a2ae2:	4601      	mov	r1, r0
 80a2ae4:	4640      	mov	r0, r8
 80a2ae6:	f002 fae1 	bl	80a50ac <__aeabi_fcmpeq>
 80a2aea:	2800      	cmp	r0, #0
 80a2aec:	f000 80a3 	beq.w	80a2c36 <_ZN11FuzzyOutput8truncateEv+0x1e6>

                    if(this->fuzzyComposition.checkPoint(newPointC, newPertinenceC) == false){
                        this->fuzzyComposition.addPoint(newPointC, newPertinenceC);
                    }
                }
            }else if(aux->fuzzySet->getPointB() != aux->fuzzySet->getPointC()){
 80a2af0:	6820      	ldr	r0, [r4, #0]
 80a2af2:	f000 f91f 	bl	80a2d34 <_ZN8FuzzySet9getPointBEv>
 80a2af6:	4680      	mov	r8, r0
 80a2af8:	6820      	ldr	r0, [r4, #0]
 80a2afa:	f000 f91d 	bl	80a2d38 <_ZN8FuzzySet9getPointCEv>
 80a2afe:	4601      	mov	r1, r0
 80a2b00:	4640      	mov	r0, r8
 80a2b02:	f002 fad3 	bl	80a50ac <__aeabi_fcmpeq>
 80a2b06:	2800      	cmp	r0, #0
 80a2b08:	f040 809f 	bne.w	80a2c4a <_ZN11FuzzyOutput8truncateEv+0x1fa>
                // se trapezio
                if(aux->fuzzySet->getPertinence() == 1.0){
 80a2b0c:	6820      	ldr	r0, [r4, #0]
 80a2b0e:	f000 f9aa 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a2b12:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2b16:	f002 fac9 	bl	80a50ac <__aeabi_fcmpeq>
 80a2b1a:	2800      	cmp	r0, #0
 80a2b1c:	f040 80c4 	bne.w	80a2ca8 <_ZN11FuzzyOutput8truncateEv+0x258>

                    if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointC(), aux->fuzzySet->getPertinence()) == false){
                        this->fuzzyComposition.addPoint(aux->fuzzySet->getPointC(), aux->fuzzySet->getPertinence());
                    }
                }else{
                    float newPointB         = aux->fuzzySet->getPointB();
 80a2b20:	6820      	ldr	r0, [r4, #0]
 80a2b22:	f000 f907 	bl	80a2d34 <_ZN8FuzzySet9getPointBEv>
 80a2b26:	900c      	str	r0, [sp, #48]	; 0x30
                    float newPertinenceB    = aux->fuzzySet->getPertinence();
 80a2b28:	6820      	ldr	r0, [r4, #0]
 80a2b2a:	f000 f99c 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a2b2e:	900d      	str	r0, [sp, #52]	; 0x34

                    rebuild(aux->fuzzySet->getPointA(), 0.0, aux->fuzzySet->getPointB(), 1.0, aux->fuzzySet->getPointA(), aux->fuzzySet->getPertinence(), aux->fuzzySet->getPointD(), aux->fuzzySet->getPertinence(), &newPointB, &newPertinenceB);
 80a2b30:	6820      	ldr	r0, [r4, #0]
 80a2b32:	f000 f8fd 	bl	80a2d30 <_ZN8FuzzySet9getPointAEv>
 80a2b36:	4680      	mov	r8, r0
 80a2b38:	6820      	ldr	r0, [r4, #0]
 80a2b3a:	f000 f8fb 	bl	80a2d34 <_ZN8FuzzySet9getPointBEv>
 80a2b3e:	4682      	mov	sl, r0
 80a2b40:	6820      	ldr	r0, [r4, #0]
 80a2b42:	f000 f8f5 	bl	80a2d30 <_ZN8FuzzySet9getPointAEv>
 80a2b46:	4683      	mov	fp, r0
 80a2b48:	6820      	ldr	r0, [r4, #0]
 80a2b4a:	f000 f98c 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a2b4e:	900a      	str	r0, [sp, #40]	; 0x28
 80a2b50:	6820      	ldr	r0, [r4, #0]
 80a2b52:	f000 f8f3 	bl	80a2d3c <_ZN8FuzzySet9getPointDEv>
 80a2b56:	9009      	str	r0, [sp, #36]	; 0x24
 80a2b58:	6820      	ldr	r0, [r4, #0]
 80a2b5a:	f000 f984 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a2b5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a2b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a2b62:	a90c      	add	r1, sp, #48	; 0x30
 80a2b64:	9105      	str	r1, [sp, #20]
 80a2b66:	9004      	str	r0, [sp, #16]
 80a2b68:	9203      	str	r2, [sp, #12]
 80a2b6a:	9302      	str	r3, [sp, #8]
 80a2b6c:	2200      	movs	r2, #0
 80a2b6e:	4641      	mov	r1, r8
 80a2b70:	9706      	str	r7, [sp, #24]
 80a2b72:	f8cd b004 	str.w	fp, [sp, #4]
 80a2b76:	f8cd 9000 	str.w	r9, [sp]
 80a2b7a:	4653      	mov	r3, sl
 80a2b7c:	4630      	mov	r0, r6
 80a2b7e:	f7ff febb 	bl	80a28f8 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_>

                    if(this->fuzzyComposition.checkPoint(newPointB, newPertinenceB) == false){
 80a2b82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a2b84:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a2b86:	4628      	mov	r0, r5
 80a2b88:	f7ff fc51 	bl	80a242e <_ZN16FuzzyComposition10checkPointEff>
 80a2b8c:	b920      	cbnz	r0, 80a2b98 <_ZN11FuzzyOutput8truncateEv+0x148>
                        this->fuzzyComposition.addPoint(newPointB, newPertinenceB);
 80a2b8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a2b90:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a2b92:	4628      	mov	r0, r5
 80a2b94:	f7ff fc32 	bl	80a23fc <_ZN16FuzzyComposition8addPointEff>
                    }

                    float newPointC         = aux->fuzzySet->getPointB();
 80a2b98:	6820      	ldr	r0, [r4, #0]
 80a2b9a:	f000 f8cb 	bl	80a2d34 <_ZN8FuzzySet9getPointBEv>
 80a2b9e:	900e      	str	r0, [sp, #56]	; 0x38
                    float newPertinenceC    = aux->fuzzySet->getPertinence();
 80a2ba0:	6820      	ldr	r0, [r4, #0]
 80a2ba2:	f000 f960 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a2ba6:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 80a2baa:	f848 0d04 	str.w	r0, [r8, #-4]!

                    rebuild(aux->fuzzySet->getPointC(), 1.0, aux->fuzzySet->getPointD(), 0.0, aux->fuzzySet->getPointA(), aux->fuzzySet->getPertinence(), aux->fuzzySet->getPointD(), aux->fuzzySet->getPertinence(), &newPointC, &newPertinenceC);
 80a2bae:	6820      	ldr	r0, [r4, #0]
 80a2bb0:	f000 f8c2 	bl	80a2d38 <_ZN8FuzzySet9getPointCEv>
 80a2bb4:	4682      	mov	sl, r0
 80a2bb6:	6820      	ldr	r0, [r4, #0]
 80a2bb8:	f000 f8c0 	bl	80a2d3c <_ZN8FuzzySet9getPointDEv>
 80a2bbc:	4683      	mov	fp, r0
 80a2bbe:	6820      	ldr	r0, [r4, #0]
 80a2bc0:	f000 f8b6 	bl	80a2d30 <_ZN8FuzzySet9getPointAEv>
 80a2bc4:	9009      	str	r0, [sp, #36]	; 0x24
 80a2bc6:	6820      	ldr	r0, [r4, #0]
 80a2bc8:	f000 f94d 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a2bcc:	900b      	str	r0, [sp, #44]	; 0x2c
 80a2bce:	6820      	ldr	r0, [r4, #0]
 80a2bd0:	f000 f8b4 	bl	80a2d3c <_ZN8FuzzySet9getPointDEv>
 80a2bd4:	900a      	str	r0, [sp, #40]	; 0x28
 80a2bd6:	6820      	ldr	r0, [r4, #0]
 80a2bd8:	f000 f945 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a2bdc:	ab0e      	add	r3, sp, #56	; 0x38
 80a2bde:	9305      	str	r3, [sp, #20]
 80a2be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a2be2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a2be4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a2be6:	9301      	str	r3, [sp, #4]
 80a2be8:	2300      	movs	r3, #0
 80a2bea:	9004      	str	r0, [sp, #16]
 80a2bec:	9103      	str	r1, [sp, #12]
 80a2bee:	9202      	str	r2, [sp, #8]
 80a2bf0:	9300      	str	r3, [sp, #0]
 80a2bf2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80a2bf6:	4651      	mov	r1, sl
 80a2bf8:	f8cd 8018 	str.w	r8, [sp, #24]
 80a2bfc:	465b      	mov	r3, fp
 80a2bfe:	4630      	mov	r0, r6
 80a2c00:	f7ff fe7a 	bl	80a28f8 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_>

                    if(this->fuzzyComposition.checkPoint(newPointC, newPertinenceC) == false){
 80a2c04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a2c06:	990e      	ldr	r1, [sp, #56]	; 0x38
 80a2c08:	4628      	mov	r0, r5
 80a2c0a:	f7ff fc10 	bl	80a242e <_ZN16FuzzyComposition10checkPointEff>
 80a2c0e:	b920      	cbnz	r0, 80a2c1a <_ZN11FuzzyOutput8truncateEv+0x1ca>
                        this->fuzzyComposition.addPoint(newPointC, newPertinenceC);
 80a2c10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a2c12:	990e      	ldr	r1, [sp, #56]	; 0x38
                    }
                }
            }else{
                //senao singleton
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence()) == false){
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence());
 80a2c14:	4628      	mov	r0, r5
 80a2c16:	f7ff fbf1 	bl	80a23fc <_ZN16FuzzyComposition8addPointEff>
                }
            }
            
            //Se não for trapezio iniciado com pertinencia 1 (sem o triangulo direito)
            if(aux->fuzzySet->getPointC() != aux->fuzzySet->getPointD()){
 80a2c1a:	6820      	ldr	r0, [r4, #0]
 80a2c1c:	f000 f88c 	bl	80a2d38 <_ZN8FuzzySet9getPointCEv>
 80a2c20:	4680      	mov	r8, r0
 80a2c22:	6820      	ldr	r0, [r4, #0]
 80a2c24:	f000 f88a 	bl	80a2d3c <_ZN8FuzzySet9getPointDEv>
 80a2c28:	4601      	mov	r1, r0
 80a2c2a:	4640      	mov	r0, r8
 80a2c2c:	f002 fa3e 	bl	80a50ac <__aeabi_fcmpeq>
 80a2c30:	b318      	cbz	r0, 80a2c7a <_ZN11FuzzyOutput8truncateEv+0x22a>
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointD(), 0.0) == false || aux->fuzzySet->getPointD() == aux->fuzzySet->getPointA()){
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointD(), 0.0);
                }
            }
        }
        aux = aux->next;
 80a2c32:	6864      	ldr	r4, [r4, #4]
    // esvaziando a composição
    this->fuzzyComposition.empty();

    fuzzySetArray *aux;
    aux = this->fuzzySets;
    while(aux != NULL){
 80a2c34:	e719      	b.n	80a2a6a <_ZN11FuzzyOutput8truncateEv+0x1a>
                }
            }

            if(aux->fuzzySet->getPointB() == aux->fuzzySet->getPointC() && aux->fuzzySet->getPointA() != aux->fuzzySet->getPointD()){
                // se trinagulo
                if(aux->fuzzySet->getPertinence() == 1.0){
 80a2c36:	6820      	ldr	r0, [r4, #0]
 80a2c38:	f000 f915 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a2c3c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2c40:	f002 fa34 	bl	80a50ac <__aeabi_fcmpeq>
 80a2c44:	2800      	cmp	r0, #0
 80a2c46:	f43f af6b 	beq.w	80a2b20 <_ZN11FuzzyOutput8truncateEv+0xd0>
                        this->fuzzyComposition.addPoint(newPointC, newPertinenceC);
                    }
                }
            }else{
                //senao singleton
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence()) == false){
 80a2c4a:	6820      	ldr	r0, [r4, #0]
 80a2c4c:	f000 f872 	bl	80a2d34 <_ZN8FuzzySet9getPointBEv>
 80a2c50:	4680      	mov	r8, r0
 80a2c52:	6820      	ldr	r0, [r4, #0]
 80a2c54:	f000 f907 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a2c58:	4641      	mov	r1, r8
 80a2c5a:	4602      	mov	r2, r0
 80a2c5c:	4628      	mov	r0, r5
 80a2c5e:	f7ff fbe6 	bl	80a242e <_ZN16FuzzyComposition10checkPointEff>
 80a2c62:	2800      	cmp	r0, #0
 80a2c64:	d1d9      	bne.n	80a2c1a <_ZN11FuzzyOutput8truncateEv+0x1ca>
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence());
 80a2c66:	6820      	ldr	r0, [r4, #0]
 80a2c68:	f000 f864 	bl	80a2d34 <_ZN8FuzzySet9getPointBEv>
 80a2c6c:	4680      	mov	r8, r0
 80a2c6e:	6820      	ldr	r0, [r4, #0]
 80a2c70:	f000 f8f9 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a2c74:	4641      	mov	r1, r8
 80a2c76:	4602      	mov	r2, r0
 80a2c78:	e7cc      	b.n	80a2c14 <_ZN11FuzzyOutput8truncateEv+0x1c4>
                }
            }
            
            //Se não for trapezio iniciado com pertinencia 1 (sem o triangulo direito)
            if(aux->fuzzySet->getPointC() != aux->fuzzySet->getPointD()){
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointD(), 0.0) == false || aux->fuzzySet->getPointD() == aux->fuzzySet->getPointA()){
 80a2c7a:	6820      	ldr	r0, [r4, #0]
 80a2c7c:	f000 f85e 	bl	80a2d3c <_ZN8FuzzySet9getPointDEv>
 80a2c80:	2200      	movs	r2, #0
 80a2c82:	4601      	mov	r1, r0
 80a2c84:	4628      	mov	r0, r5
 80a2c86:	f7ff fbd2 	bl	80a242e <_ZN16FuzzyComposition10checkPointEff>
 80a2c8a:	2800      	cmp	r0, #0
 80a2c8c:	d037      	beq.n	80a2cfe <_ZN11FuzzyOutput8truncateEv+0x2ae>
 80a2c8e:	6820      	ldr	r0, [r4, #0]
 80a2c90:	f000 f854 	bl	80a2d3c <_ZN8FuzzySet9getPointDEv>
 80a2c94:	4680      	mov	r8, r0
 80a2c96:	6820      	ldr	r0, [r4, #0]
 80a2c98:	f000 f84a 	bl	80a2d30 <_ZN8FuzzySet9getPointAEv>
 80a2c9c:	4601      	mov	r1, r0
 80a2c9e:	4640      	mov	r0, r8
 80a2ca0:	f002 fa04 	bl	80a50ac <__aeabi_fcmpeq>
 80a2ca4:	bb58      	cbnz	r0, 80a2cfe <_ZN11FuzzyOutput8truncateEv+0x2ae>
 80a2ca6:	e7c4      	b.n	80a2c32 <_ZN11FuzzyOutput8truncateEv+0x1e2>
                    }
                }
            }else if(aux->fuzzySet->getPointB() != aux->fuzzySet->getPointC()){
                // se trapezio
                if(aux->fuzzySet->getPertinence() == 1.0){
                    if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence()) == false){
 80a2ca8:	6820      	ldr	r0, [r4, #0]
 80a2caa:	f000 f843 	bl	80a2d34 <_ZN8FuzzySet9getPointBEv>
 80a2cae:	4680      	mov	r8, r0
 80a2cb0:	6820      	ldr	r0, [r4, #0]
 80a2cb2:	f000 f8d8 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a2cb6:	4641      	mov	r1, r8
 80a2cb8:	4602      	mov	r2, r0
 80a2cba:	4628      	mov	r0, r5
 80a2cbc:	f7ff fbb7 	bl	80a242e <_ZN16FuzzyComposition10checkPointEff>
 80a2cc0:	b958      	cbnz	r0, 80a2cda <_ZN11FuzzyOutput8truncateEv+0x28a>
                        this->fuzzyComposition.addPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence());
 80a2cc2:	6820      	ldr	r0, [r4, #0]
 80a2cc4:	f000 f836 	bl	80a2d34 <_ZN8FuzzySet9getPointBEv>
 80a2cc8:	4680      	mov	r8, r0
 80a2cca:	6820      	ldr	r0, [r4, #0]
 80a2ccc:	f000 f8cb 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a2cd0:	4641      	mov	r1, r8
 80a2cd2:	4602      	mov	r2, r0
 80a2cd4:	4628      	mov	r0, r5
 80a2cd6:	f7ff fb91 	bl	80a23fc <_ZN16FuzzyComposition8addPointEff>
                    }

                    if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointC(), aux->fuzzySet->getPertinence()) == false){
 80a2cda:	6820      	ldr	r0, [r4, #0]
 80a2cdc:	f000 f82c 	bl	80a2d38 <_ZN8FuzzySet9getPointCEv>
 80a2ce0:	4680      	mov	r8, r0
 80a2ce2:	6820      	ldr	r0, [r4, #0]
 80a2ce4:	f000 f8bf 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a2ce8:	4641      	mov	r1, r8
 80a2cea:	4602      	mov	r2, r0
 80a2cec:	4628      	mov	r0, r5
 80a2cee:	f7ff fb9e 	bl	80a242e <_ZN16FuzzyComposition10checkPointEff>
 80a2cf2:	2800      	cmp	r0, #0
 80a2cf4:	d191      	bne.n	80a2c1a <_ZN11FuzzyOutput8truncateEv+0x1ca>
                        this->fuzzyComposition.addPoint(aux->fuzzySet->getPointC(), aux->fuzzySet->getPertinence());
 80a2cf6:	6820      	ldr	r0, [r4, #0]
 80a2cf8:	f000 f81e 	bl	80a2d38 <_ZN8FuzzySet9getPointCEv>
 80a2cfc:	e7b6      	b.n	80a2c6c <_ZN11FuzzyOutput8truncateEv+0x21c>
            }
            
            //Se não for trapezio iniciado com pertinencia 1 (sem o triangulo direito)
            if(aux->fuzzySet->getPointC() != aux->fuzzySet->getPointD()){
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointD(), 0.0) == false || aux->fuzzySet->getPointD() == aux->fuzzySet->getPointA()){
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointD(), 0.0);
 80a2cfe:	6820      	ldr	r0, [r4, #0]
 80a2d00:	f000 f81c 	bl	80a2d3c <_ZN8FuzzySet9getPointDEv>
 80a2d04:	2200      	movs	r2, #0
 80a2d06:	4601      	mov	r1, r0
 80a2d08:	4628      	mov	r0, r5
 80a2d0a:	f7ff fb77 	bl	80a23fc <_ZN16FuzzyComposition8addPointEff>
 80a2d0e:	e790      	b.n	80a2c32 <_ZN11FuzzyOutput8truncateEv+0x1e2>
            }
        }
        aux = aux->next;
    }

    this->fuzzyComposition.build();
 80a2d10:	4628      	mov	r0, r5
 80a2d12:	f7ff fd65 	bl	80a27e0 <_ZN16FuzzyComposition5buildEv>

    return true;
}
 80a2d16:	2001      	movs	r0, #1
 80a2d18:	b011      	add	sp, #68	; 0x44
 80a2d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2d1e <_ZN8FuzzySetC1Effff>:
#include "FuzzySet.h"

FuzzySet::FuzzySet(){
}

FuzzySet::FuzzySet(float a, float b, float c, float d){
 80a2d1e:	b510      	push	{r4, lr}
    this->a = a;
    this->b = b;
    this->c = c;
 80a2d20:	6083      	str	r3, [r0, #8]
    this->d = d;
 80a2d22:	9b02      	ldr	r3, [sp, #8]

FuzzySet::FuzzySet(){
}

FuzzySet::FuzzySet(float a, float b, float c, float d){
    this->a = a;
 80a2d24:	6001      	str	r1, [r0, #0]
    this->b = b;
    this->c = c;
    this->d = d;
 80a2d26:	60c3      	str	r3, [r0, #12]
    this->pertinence = 0.0;
 80a2d28:	2300      	movs	r3, #0
FuzzySet::FuzzySet(){
}

FuzzySet::FuzzySet(float a, float b, float c, float d){
    this->a = a;
    this->b = b;
 80a2d2a:	6042      	str	r2, [r0, #4]
    this->c = c;
    this->d = d;
    this->pertinence = 0.0;
 80a2d2c:	6103      	str	r3, [r0, #16]
}
 80a2d2e:	bd10      	pop	{r4, pc}

080a2d30 <_ZN8FuzzySet9getPointAEv>:

float FuzzySet::getPointA(){
    return this->a;
}
 80a2d30:	6800      	ldr	r0, [r0, #0]
 80a2d32:	4770      	bx	lr

080a2d34 <_ZN8FuzzySet9getPointBEv>:

float FuzzySet::getPointB(){
    return this->b;
}
 80a2d34:	6840      	ldr	r0, [r0, #4]
 80a2d36:	4770      	bx	lr

080a2d38 <_ZN8FuzzySet9getPointCEv>:

float FuzzySet::getPointC(){
    return this->c;
}
 80a2d38:	6880      	ldr	r0, [r0, #8]
 80a2d3a:	4770      	bx	lr

080a2d3c <_ZN8FuzzySet9getPointDEv>:

float FuzzySet::getPointD(){
    return this->d;
}
 80a2d3c:	68c0      	ldr	r0, [r0, #12]
 80a2d3e:	4770      	bx	lr

080a2d40 <_ZN8FuzzySet19calculatePertinenceEf>:

bool FuzzySet::calculatePertinence(float crispValue){
 80a2d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float slope;

    if (crispValue < this->a){
 80a2d44:	6807      	ldr	r7, [r0, #0]

float FuzzySet::getPointD(){
    return this->d;
}

bool FuzzySet::calculatePertinence(float crispValue){
 80a2d46:	4604      	mov	r4, r0
    float slope;

    if (crispValue < this->a){
 80a2d48:	4638      	mov	r0, r7

float FuzzySet::getPointD(){
    return this->d;
}

bool FuzzySet::calculatePertinence(float crispValue){
 80a2d4a:	460d      	mov	r5, r1
    float slope;

    if (crispValue < this->a){
 80a2d4c:	f002 f9d6 	bl	80a50fc <__aeabi_fcmpgt>
 80a2d50:	6866      	ldr	r6, [r4, #4]
 80a2d52:	b198      	cbz	r0, 80a2d7c <_ZN8FuzzySet19calculatePertinenceEf+0x3c>
        if (this->a == this->b && this->b != this->c && this->c != this->d){
 80a2d54:	4631      	mov	r1, r6
 80a2d56:	4638      	mov	r0, r7
 80a2d58:	f002 f9a8 	bl	80a50ac <__aeabi_fcmpeq>
 80a2d5c:	2800      	cmp	r0, #0
 80a2d5e:	d02e      	beq.n	80a2dbe <_ZN8FuzzySet19calculatePertinenceEf+0x7e>
 80a2d60:	68a5      	ldr	r5, [r4, #8]
 80a2d62:	4630      	mov	r0, r6
 80a2d64:	4629      	mov	r1, r5
 80a2d66:	f002 f9a1 	bl	80a50ac <__aeabi_fcmpeq>
 80a2d6a:	bb40      	cbnz	r0, 80a2dbe <_ZN8FuzzySet19calculatePertinenceEf+0x7e>
 80a2d6c:	4628      	mov	r0, r5
 80a2d6e:	68e1      	ldr	r1, [r4, #12]
 80a2d70:	f002 f99c 	bl	80a50ac <__aeabi_fcmpeq>
 80a2d74:	bb18      	cbnz	r0, 80a2dbe <_ZN8FuzzySet19calculatePertinenceEf+0x7e>
            this->pertinence = 1.0;
 80a2d76:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80a2d7a:	e021      	b.n	80a2dc0 <_ZN8FuzzySet19calculatePertinenceEf+0x80>
        }else{
            this->pertinence = 0.0;
        }
    }else if (crispValue >= this->a && crispValue < this->b){
 80a2d7c:	4629      	mov	r1, r5
 80a2d7e:	4638      	mov	r0, r7
 80a2d80:	f002 f9a8 	bl	80a50d4 <__aeabi_fcmple>
 80a2d84:	b9f0      	cbnz	r0, 80a2dc4 <_ZN8FuzzySet19calculatePertinenceEf+0x84>
        slope = 1.0 / (this->b - this->a);
        this->pertinence = slope * (crispValue - this->b) + 1.0;
    }else if (crispValue >= this->b && crispValue <= this->c){
 80a2d86:	4631      	mov	r1, r6
 80a2d88:	4628      	mov	r0, r5
 80a2d8a:	f002 f9ad 	bl	80a50e8 <__aeabi_fcmpge>
 80a2d8e:	2800      	cmp	r0, #0
 80a2d90:	d12f      	bne.n	80a2df2 <_ZN8FuzzySet19calculatePertinenceEf+0xb2>
        this->pertinence = 1.0;
    }else if (crispValue > this->c && crispValue <= this->d){
 80a2d92:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80a2d96:	4628      	mov	r0, r5
 80a2d98:	4641      	mov	r1, r8
 80a2d9a:	f002 f9af 	bl	80a50fc <__aeabi_fcmpgt>
 80a2d9e:	f8d4 900c 	ldr.w	r9, [r4, #12]
 80a2da2:	2800      	cmp	r0, #0
 80a2da4:	d12c      	bne.n	80a2e00 <_ZN8FuzzySet19calculatePertinenceEf+0xc0>
        slope = 1.0 / (this->c - this->d);
        this->pertinence = slope * (crispValue - this->c) + 1.0;
    }else if (crispValue > this->d){
 80a2da6:	4649      	mov	r1, r9
 80a2da8:	4628      	mov	r0, r5
 80a2daa:	f002 f9a7 	bl	80a50fc <__aeabi_fcmpgt>
 80a2dae:	2800      	cmp	r0, #0
 80a2db0:	d04d      	beq.n	80a2e4e <_ZN8FuzzySet19calculatePertinenceEf+0x10e>
        if (this->c == this->d && this->c != this->b && this->b != this->a){
 80a2db2:	4649      	mov	r1, r9
 80a2db4:	4640      	mov	r0, r8
 80a2db6:	f002 f979 	bl	80a50ac <__aeabi_fcmpeq>
 80a2dba:	2800      	cmp	r0, #0
 80a2dbc:	d13e      	bne.n	80a2e3c <_ZN8FuzzySet19calculatePertinenceEf+0xfc>

    if (crispValue < this->a){
        if (this->a == this->b && this->b != this->c && this->c != this->d){
            this->pertinence = 1.0;
        }else{
            this->pertinence = 0.0;
 80a2dbe:	2300      	movs	r3, #0
 80a2dc0:	6123      	str	r3, [r4, #16]
 80a2dc2:	e044      	b.n	80a2e4e <_ZN8FuzzySet19calculatePertinenceEf+0x10e>
        }
    }else if (crispValue >= this->a && crispValue < this->b){
 80a2dc4:	4631      	mov	r1, r6
 80a2dc6:	4628      	mov	r0, r5
 80a2dc8:	f002 f97a 	bl	80a50c0 <__aeabi_fcmplt>
 80a2dcc:	2800      	cmp	r0, #0
 80a2dce:	d0da      	beq.n	80a2d86 <_ZN8FuzzySet19calculatePertinenceEf+0x46>
        slope = 1.0 / (this->b - this->a);
        this->pertinence = slope * (crispValue - this->b) + 1.0;
 80a2dd0:	4639      	mov	r1, r7
 80a2dd2:	4630      	mov	r0, r6
 80a2dd4:	f001 fecc 	bl	80a4b70 <__aeabi_fsub>
 80a2dd8:	4601      	mov	r1, r0
 80a2dda:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a2dde:	f002 f885 	bl	80a4eec <__aeabi_fdiv>
 80a2de2:	4631      	mov	r1, r6
 80a2de4:	4607      	mov	r7, r0
 80a2de6:	4628      	mov	r0, r5
 80a2de8:	f001 fec2 	bl	80a4b70 <__aeabi_fsub>
 80a2dec:	4601      	mov	r1, r0
 80a2dee:	4638      	mov	r0, r7
 80a2df0:	e01c      	b.n	80a2e2c <_ZN8FuzzySet19calculatePertinenceEf+0xec>
    }else if (crispValue >= this->b && crispValue <= this->c){
 80a2df2:	68a1      	ldr	r1, [r4, #8]
 80a2df4:	4628      	mov	r0, r5
 80a2df6:	f002 f96d 	bl	80a50d4 <__aeabi_fcmple>
 80a2dfa:	2800      	cmp	r0, #0
 80a2dfc:	d0c9      	beq.n	80a2d92 <_ZN8FuzzySet19calculatePertinenceEf+0x52>
 80a2dfe:	e7ba      	b.n	80a2d76 <_ZN8FuzzySet19calculatePertinenceEf+0x36>
        this->pertinence = 1.0;
    }else if (crispValue > this->c && crispValue <= this->d){
 80a2e00:	4649      	mov	r1, r9
 80a2e02:	4628      	mov	r0, r5
 80a2e04:	f002 f966 	bl	80a50d4 <__aeabi_fcmple>
 80a2e08:	2800      	cmp	r0, #0
 80a2e0a:	d0cc      	beq.n	80a2da6 <_ZN8FuzzySet19calculatePertinenceEf+0x66>
        slope = 1.0 / (this->c - this->d);
        this->pertinence = slope * (crispValue - this->c) + 1.0;
 80a2e0c:	4649      	mov	r1, r9
 80a2e0e:	4640      	mov	r0, r8
 80a2e10:	f001 feae 	bl	80a4b70 <__aeabi_fsub>
 80a2e14:	4601      	mov	r1, r0
 80a2e16:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a2e1a:	f002 f867 	bl	80a4eec <__aeabi_fdiv>
 80a2e1e:	4641      	mov	r1, r8
 80a2e20:	4606      	mov	r6, r0
 80a2e22:	4628      	mov	r0, r5
 80a2e24:	f001 fea4 	bl	80a4b70 <__aeabi_fsub>
 80a2e28:	4601      	mov	r1, r0
 80a2e2a:	4630      	mov	r0, r6
 80a2e2c:	f001 ffaa 	bl	80a4d84 <__aeabi_fmul>
 80a2e30:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2e34:	f001 fe9e 	bl	80a4b74 <__addsf3>
 80a2e38:	6120      	str	r0, [r4, #16]
 80a2e3a:	e008      	b.n	80a2e4e <_ZN8FuzzySet19calculatePertinenceEf+0x10e>
    }else if (crispValue > this->d){
        if (this->c == this->d && this->c != this->b && this->b != this->a){
 80a2e3c:	4641      	mov	r1, r8
 80a2e3e:	4630      	mov	r0, r6
 80a2e40:	f002 f934 	bl	80a50ac <__aeabi_fcmpeq>
 80a2e44:	2800      	cmp	r0, #0
 80a2e46:	d1ba      	bne.n	80a2dbe <_ZN8FuzzySet19calculatePertinenceEf+0x7e>
 80a2e48:	4631      	mov	r1, r6
 80a2e4a:	4638      	mov	r0, r7
 80a2e4c:	e790      	b.n	80a2d70 <_ZN8FuzzySet19calculatePertinenceEf+0x30>
        }else{
            this->pertinence = 0.0;
        }
    }
    return true;
}
 80a2e4e:	2001      	movs	r0, #1
 80a2e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a2e54 <_ZN8FuzzySet13setPertinenceEf>:

void FuzzySet::setPertinence(float pertinence){
 80a2e54:	b538      	push	{r3, r4, r5, lr}
 80a2e56:	4604      	mov	r4, r0
    if(this->pertinence < pertinence){
 80a2e58:	6900      	ldr	r0, [r0, #16]
        }
    }
    return true;
}

void FuzzySet::setPertinence(float pertinence){
 80a2e5a:	460d      	mov	r5, r1
    if(this->pertinence < pertinence){
 80a2e5c:	f002 f930 	bl	80a50c0 <__aeabi_fcmplt>
 80a2e60:	b100      	cbz	r0, 80a2e64 <_ZN8FuzzySet13setPertinenceEf+0x10>
        this->pertinence = pertinence;
 80a2e62:	6125      	str	r5, [r4, #16]
 80a2e64:	bd38      	pop	{r3, r4, r5, pc}

080a2e66 <_ZN8FuzzySet13getPertinenceEv>:
    }
}

float FuzzySet::getPertinence(){
    return this->pertinence;
}
 80a2e66:	6900      	ldr	r0, [r0, #16]
 80a2e68:	4770      	bx	lr

080a2e6a <_ZN8FuzzySet5resetEv>:

void FuzzySet::reset(){
    this->pertinence = 0.0;
 80a2e6a:	2300      	movs	r3, #0
 80a2e6c:	6103      	str	r3, [r0, #16]
 80a2e6e:	4770      	bx	lr

080a2e70 <_ZN19FuzzyRuleConsequentC1Ev>:
 */
#include "FuzzyRuleConsequent.h"

// CONSTRUTORES
FuzzyRuleConsequent::FuzzyRuleConsequent(){
    this->fuzzySetOutputs = NULL;
 80a2e70:	2200      	movs	r2, #0
 80a2e72:	6042      	str	r2, [r0, #4]
    this->fuzzySetOutputsCursor = NULL;
 80a2e74:	6002      	str	r2, [r0, #0]
}
 80a2e76:	4770      	bx	lr

080a2e78 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>:
FuzzyRuleConsequent::~FuzzyRuleConsequent(){
    this->cleanFuzzySets(this->fuzzySetOutputs);
}

// MÉTODOS PÚBLICOS
bool FuzzyRuleConsequent::addOutput(FuzzySet* fuzzySet){
 80a2e78:	b538      	push	{r3, r4, r5, lr}
 80a2e7a:	4604      	mov	r4, r0
    fuzzySetOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetOutputArray *) malloc(sizeof(fuzzySetOutputArray))) == NULL){
 80a2e7c:	2008      	movs	r0, #8
FuzzyRuleConsequent::~FuzzyRuleConsequent(){
    this->cleanFuzzySets(this->fuzzySetOutputs);
}

// MÉTODOS PÚBLICOS
bool FuzzyRuleConsequent::addOutput(FuzzySet* fuzzySet){
 80a2e7e:	460d      	mov	r5, r1
    fuzzySetOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetOutputArray *) malloc(sizeof(fuzzySetOutputArray))) == NULL){
 80a2e80:	f000 fb54 	bl	80a352c <malloc>
 80a2e84:	b150      	cbz	r0, 80a2e9c <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet+0x24>
        return false;
    }
    aux->fuzzySet     = fuzzySet;
    aux->next         = NULL;
 80a2e86:	2300      	movs	r3, #0
    fuzzySetOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetOutputArray *) malloc(sizeof(fuzzySetOutputArray))) == NULL){
        return false;
    }
    aux->fuzzySet     = fuzzySet;
 80a2e88:	6005      	str	r5, [r0, #0]
    aux->next         = NULL;
 80a2e8a:	6043      	str	r3, [r0, #4]

    if(this->fuzzySetOutputs == NULL){
 80a2e8c:	6863      	ldr	r3, [r4, #4]
 80a2e8e:	b90b      	cbnz	r3, 80a2e94 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet+0x1c>
        this->fuzzySetOutputs = aux;
 80a2e90:	6060      	str	r0, [r4, #4]
 80a2e92:	e001      	b.n	80a2e98 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet+0x20>
        this->fuzzySetOutputsCursor    = aux;
    }else{
        this->fuzzySetOutputsCursor->next = aux;
 80a2e94:	6823      	ldr	r3, [r4, #0]
 80a2e96:	6058      	str	r0, [r3, #4]
        this->fuzzySetOutputsCursor = aux;
 80a2e98:	6020      	str	r0, [r4, #0]
    }
    return true;
 80a2e9a:	2001      	movs	r0, #1
}
 80a2e9c:	bd38      	pop	{r3, r4, r5, pc}

080a2e9e <_ZN19FuzzyRuleConsequent8evaluateEf>:

bool FuzzyRuleConsequent::evaluate(float power){
 80a2e9e:	b538      	push	{r3, r4, r5, lr}
 80a2ea0:	460d      	mov	r5, r1
    fuzzySetOutputArray *aux;
    aux = this->fuzzySetOutputs;
 80a2ea2:	6844      	ldr	r4, [r0, #4]
    while(aux != NULL){
 80a2ea4:	b12c      	cbz	r4, 80a2eb2 <_ZN19FuzzyRuleConsequent8evaluateEf+0x14>
        aux->fuzzySet->setPertinence(power);
 80a2ea6:	6820      	ldr	r0, [r4, #0]
 80a2ea8:	4629      	mov	r1, r5
 80a2eaa:	f7ff ffd3 	bl	80a2e54 <_ZN8FuzzySet13setPertinenceEf>
        aux = aux->next;
 80a2eae:	6864      	ldr	r4, [r4, #4]
}

bool FuzzyRuleConsequent::evaluate(float power){
    fuzzySetOutputArray *aux;
    aux = this->fuzzySetOutputs;
    while(aux != NULL){
 80a2eb0:	e7f8      	b.n	80a2ea4 <_ZN19FuzzyRuleConsequent8evaluateEf+0x6>
        aux->fuzzySet->setPertinence(power);
        aux = aux->next;
    }
    return true;
}
 80a2eb2:	2001      	movs	r0, #1
 80a2eb4:	bd38      	pop	{r3, r4, r5, pc}

080a2eb6 <_ZN5FuzzyC1Ev>:

// CONSTRUTORES
Fuzzy::Fuzzy(){
    // Iniciando os ponteiros como nulo
    // FuzzyInput
    this->fuzzyInputs       = NULL;
 80a2eb6:	2200      	movs	r2, #0
 80a2eb8:	6042      	str	r2, [r0, #4]
    this->fuzzyInputsCursor = NULL;
 80a2eba:	6002      	str	r2, [r0, #0]
    // FuzzyOutput
    this->fuzzyOutputs          = NULL;
 80a2ebc:	60c2      	str	r2, [r0, #12]
    this->fuzzyOutputsCursor    = NULL;
 80a2ebe:	6082      	str	r2, [r0, #8]
    // FuzzyRule
    this->fuzzyRules        = NULL;
 80a2ec0:	6142      	str	r2, [r0, #20]
    this->fuzzyRulesCursor  = NULL;
 80a2ec2:	6102      	str	r2, [r0, #16]
}
 80a2ec4:	4770      	bx	lr

080a2ec6 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>:
    this->cleanFuzzyOutputs(this->fuzzyOutputs);
    this->cleanFuzzyRules(this->fuzzyRules);
}

// MÉTODOS PÚBLICOS
bool Fuzzy::addFuzzyInput(FuzzyInput* fuzzyInput){
 80a2ec6:	b538      	push	{r3, r4, r5, lr}
 80a2ec8:	4604      	mov	r4, r0
    fuzzyInputArray* aux;
    
    // Alocando espaço na memória
    if((aux = (fuzzyInputArray *) malloc(sizeof(fuzzyInputArray))) == NULL){
 80a2eca:	2008      	movs	r0, #8
    this->cleanFuzzyOutputs(this->fuzzyOutputs);
    this->cleanFuzzyRules(this->fuzzyRules);
}

// MÉTODOS PÚBLICOS
bool Fuzzy::addFuzzyInput(FuzzyInput* fuzzyInput){
 80a2ecc:	460d      	mov	r5, r1
    fuzzyInputArray* aux;
    
    // Alocando espaço na memória
    if((aux = (fuzzyInputArray *) malloc(sizeof(fuzzyInputArray))) == NULL){
 80a2ece:	f000 fb2d 	bl	80a352c <malloc>
 80a2ed2:	b150      	cbz	r0, 80a2eea <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput+0x24>
        return false;
    }

    aux->fuzzyInput = fuzzyInput;
    aux->next = NULL;
 80a2ed4:	2300      	movs	r3, #0
    // Alocando espaço na memória
    if((aux = (fuzzyInputArray *) malloc(sizeof(fuzzyInputArray))) == NULL){
        return false;
    }

    aux->fuzzyInput = fuzzyInput;
 80a2ed6:	6005      	str	r5, [r0, #0]
    aux->next = NULL;
 80a2ed8:	6043      	str	r3, [r0, #4]

    if(this->fuzzyInputs == NULL){
 80a2eda:	6863      	ldr	r3, [r4, #4]
 80a2edc:	b90b      	cbnz	r3, 80a2ee2 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput+0x1c>
        this->fuzzyInputs = aux;
 80a2ede:	6060      	str	r0, [r4, #4]
 80a2ee0:	e001      	b.n	80a2ee6 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput+0x20>
        this->fuzzyInputsCursor  = aux;
    }else{
        this->fuzzyInputsCursor->next = aux;
 80a2ee2:	6823      	ldr	r3, [r4, #0]
 80a2ee4:	6058      	str	r0, [r3, #4]
        this->fuzzyInputsCursor = aux;
 80a2ee6:	6020      	str	r0, [r4, #0]
    }

    return true;
 80a2ee8:	2001      	movs	r0, #1
}
 80a2eea:	bd38      	pop	{r3, r4, r5, pc}

080a2eec <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput>:

bool Fuzzy::addFuzzyOutput(FuzzyOutput* fuzzyOutput){
 80a2eec:	b570      	push	{r4, r5, r6, lr}
 80a2eee:	4605      	mov	r5, r0
    fuzzyOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzyOutputArray *) malloc(sizeof(fuzzyOutputArray))) == NULL){
 80a2ef0:	2008      	movs	r0, #8
    }

    return true;
}

bool Fuzzy::addFuzzyOutput(FuzzyOutput* fuzzyOutput){
 80a2ef2:	460e      	mov	r6, r1
    fuzzyOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzyOutputArray *) malloc(sizeof(fuzzyOutputArray))) == NULL){
 80a2ef4:	f000 fb1a 	bl	80a352c <malloc>
 80a2ef8:	4604      	mov	r4, r0
 80a2efa:	b170      	cbz	r0, 80a2f1a <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput+0x2e>
        return false;
    }
    aux->fuzzyOutput = fuzzyOutput;
    aux->next = NULL;
 80a2efc:	2300      	movs	r3, #0
 80a2efe:	6043      	str	r3, [r0, #4]
    fuzzyOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzyOutputArray *) malloc(sizeof(fuzzyOutputArray))) == NULL){
        return false;
    }
    aux->fuzzyOutput = fuzzyOutput;
 80a2f00:	6006      	str	r6, [r0, #0]
    aux->next = NULL;

    // Ordenando o fuzzyOutput
    fuzzyOutput->order();
 80a2f02:	4630      	mov	r0, r6
 80a2f04:	f7ff fcd4 	bl	80a28b0 <_ZN11FuzzyOutput5orderEv>

    if(this->fuzzyOutputs == NULL){
 80a2f08:	68eb      	ldr	r3, [r5, #12]
 80a2f0a:	b90b      	cbnz	r3, 80a2f10 <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput+0x24>
        this->fuzzyOutputs = aux;
 80a2f0c:	60ec      	str	r4, [r5, #12]
 80a2f0e:	e001      	b.n	80a2f14 <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput+0x28>
        this->fuzzyOutputsCursor  = aux;
    }else{
        this->fuzzyOutputsCursor->next = aux;
 80a2f10:	68ab      	ldr	r3, [r5, #8]
 80a2f12:	605c      	str	r4, [r3, #4]
        this->fuzzyOutputsCursor = aux;
 80a2f14:	60ac      	str	r4, [r5, #8]
    }
    return true;
 80a2f16:	2001      	movs	r0, #1
 80a2f18:	bd70      	pop	{r4, r5, r6, pc}
}
 80a2f1a:	bd70      	pop	{r4, r5, r6, pc}

080a2f1c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>:

bool Fuzzy::addFuzzyRule(FuzzyRule* fuzzyRule){
 80a2f1c:	b538      	push	{r3, r4, r5, lr}
 80a2f1e:	4604      	mov	r4, r0
    fuzzyRuleArray* aux;
    // Alocando espaço na memória
    if((aux = (fuzzyRuleArray *) malloc(sizeof(fuzzyRuleArray))) == NULL){
 80a2f20:	2008      	movs	r0, #8
        this->fuzzyOutputsCursor = aux;
    }
    return true;
}

bool Fuzzy::addFuzzyRule(FuzzyRule* fuzzyRule){
 80a2f22:	460d      	mov	r5, r1
    fuzzyRuleArray* aux;
    // Alocando espaço na memória
    if((aux = (fuzzyRuleArray *) malloc(sizeof(fuzzyRuleArray))) == NULL){
 80a2f24:	f000 fb02 	bl	80a352c <malloc>
 80a2f28:	b150      	cbz	r0, 80a2f40 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule+0x24>
        return false;
    }
    aux->fuzzyRule = fuzzyRule;
    aux->next = NULL;
 80a2f2a:	2300      	movs	r3, #0
    fuzzyRuleArray* aux;
    // Alocando espaço na memória
    if((aux = (fuzzyRuleArray *) malloc(sizeof(fuzzyRuleArray))) == NULL){
        return false;
    }
    aux->fuzzyRule = fuzzyRule;
 80a2f2c:	6005      	str	r5, [r0, #0]
    aux->next = NULL;
 80a2f2e:	6043      	str	r3, [r0, #4]

    if(this->fuzzyRules == NULL){
 80a2f30:	6963      	ldr	r3, [r4, #20]
 80a2f32:	b90b      	cbnz	r3, 80a2f38 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule+0x1c>
        this->fuzzyRules = aux;
 80a2f34:	6160      	str	r0, [r4, #20]
 80a2f36:	e001      	b.n	80a2f3c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule+0x20>
        this->fuzzyRulesCursor  = aux;
    }else{
        this->fuzzyRulesCursor->next = aux;
 80a2f38:	6923      	ldr	r3, [r4, #16]
 80a2f3a:	6058      	str	r0, [r3, #4]
        this->fuzzyRulesCursor = aux;
 80a2f3c:	6120      	str	r0, [r4, #16]
    }
    return true;
 80a2f3e:	2001      	movs	r0, #1
}
 80a2f40:	bd38      	pop	{r3, r4, r5, pc}

080a2f42 <_ZN5Fuzzy8setInputEif>:

bool Fuzzy::setInput(int fuzzyInputIndex, float crispValue){
 80a2f42:	b570      	push	{r4, r5, r6, lr}
 80a2f44:	460d      	mov	r5, r1
 80a2f46:	4616      	mov	r6, r2
    fuzzyInputArray *aux;
    aux = this->fuzzyInputs;
 80a2f48:	6844      	ldr	r4, [r0, #4]

    while(aux != NULL){
 80a2f4a:	b164      	cbz	r4, 80a2f66 <_ZN5Fuzzy8setInputEif+0x24>
        if(aux->fuzzyInput->getIndex() == fuzzyInputIndex){
 80a2f4c:	6820      	ldr	r0, [r4, #0]
 80a2f4e:	f7ff fc82 	bl	80a2856 <_ZN7FuzzyIO8getIndexEv>
 80a2f52:	42a8      	cmp	r0, r5
 80a2f54:	d105      	bne.n	80a2f62 <_ZN5Fuzzy8setInputEif+0x20>
            aux->fuzzyInput->setCrispInput(crispValue);
 80a2f56:	6820      	ldr	r0, [r4, #0]
 80a2f58:	4631      	mov	r1, r6
 80a2f5a:	f7ff fc7e 	bl	80a285a <_ZN7FuzzyIO13setCrispInputEf>
            return true;
 80a2f5e:	2001      	movs	r0, #1
 80a2f60:	bd70      	pop	{r4, r5, r6, pc}
        }
        aux = aux->next;
 80a2f62:	6864      	ldr	r4, [r4, #4]

bool Fuzzy::setInput(int fuzzyInputIndex, float crispValue){
    fuzzyInputArray *aux;
    aux = this->fuzzyInputs;

    while(aux != NULL){
 80a2f64:	e7f1      	b.n	80a2f4a <_ZN5Fuzzy8setInputEif+0x8>
            aux->fuzzyInput->setCrispInput(crispValue);
            return true;
        }
        aux = aux->next;
    }
    return false;
 80a2f66:	4620      	mov	r0, r4
}
 80a2f68:	bd70      	pop	{r4, r5, r6, pc}

080a2f6a <_ZN5Fuzzy7fuzzifyEv>:

bool Fuzzy::fuzzify(){
 80a2f6a:	b538      	push	{r3, r4, r5, lr}
 80a2f6c:	4604      	mov	r4, r0
    fuzzyInputArray* fuzzyInputAux;

    fuzzyOutputArray *fuzzyOutputAux;

    fuzzyInputAux = this->fuzzyInputs;
 80a2f6e:	6845      	ldr	r5, [r0, #4]
    while(fuzzyInputAux != NULL){
 80a2f70:	b125      	cbz	r5, 80a2f7c <_ZN5Fuzzy7fuzzifyEv+0x12>
        fuzzyInputAux->fuzzyInput->resetFuzzySets();
 80a2f72:	6828      	ldr	r0, [r5, #0]
 80a2f74:	f7ff fc86 	bl	80a2884 <_ZN7FuzzyIO14resetFuzzySetsEv>
        fuzzyInputAux = fuzzyInputAux->next;
 80a2f78:	686d      	ldr	r5, [r5, #4]
    fuzzyInputArray* fuzzyInputAux;

    fuzzyOutputArray *fuzzyOutputAux;

    fuzzyInputAux = this->fuzzyInputs;
    while(fuzzyInputAux != NULL){
 80a2f7a:	e7f9      	b.n	80a2f70 <_ZN5Fuzzy7fuzzifyEv+0x6>
        fuzzyInputAux->fuzzyInput->resetFuzzySets();
        fuzzyInputAux = fuzzyInputAux->next;
    }

    fuzzyOutputAux = this->fuzzyOutputs;
 80a2f7c:	68e5      	ldr	r5, [r4, #12]
    while(fuzzyOutputAux != NULL){
 80a2f7e:	b125      	cbz	r5, 80a2f8a <_ZN5Fuzzy7fuzzifyEv+0x20>
        fuzzyOutputAux->fuzzyOutput->resetFuzzySets();
 80a2f80:	6828      	ldr	r0, [r5, #0]
 80a2f82:	f7ff fc7f 	bl	80a2884 <_ZN7FuzzyIO14resetFuzzySetsEv>
        fuzzyOutputAux = fuzzyOutputAux->next;
 80a2f86:	686d      	ldr	r5, [r5, #4]
        fuzzyInputAux->fuzzyInput->resetFuzzySets();
        fuzzyInputAux = fuzzyInputAux->next;
    }

    fuzzyOutputAux = this->fuzzyOutputs;
    while(fuzzyOutputAux != NULL){
 80a2f88:	e7f9      	b.n	80a2f7e <_ZN5Fuzzy7fuzzifyEv+0x14>
        fuzzyOutputAux->fuzzyOutput->resetFuzzySets();
        fuzzyOutputAux = fuzzyOutputAux->next;
    }

    // Calculando a pertinência de todos os FuzzyInputs
    fuzzyInputAux = this->fuzzyInputs;
 80a2f8a:	6865      	ldr	r5, [r4, #4]
    while(fuzzyInputAux != NULL){
 80a2f8c:	b125      	cbz	r5, 80a2f98 <_ZN5Fuzzy7fuzzifyEv+0x2e>
        fuzzyInputAux->fuzzyInput->calculateFuzzySetPertinences();
 80a2f8e:	6828      	ldr	r0, [r5, #0]
 80a2f90:	f7ff fc4f 	bl	80a2832 <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv>
        fuzzyInputAux = fuzzyInputAux->next;
 80a2f94:	686d      	ldr	r5, [r5, #4]
        fuzzyOutputAux = fuzzyOutputAux->next;
    }

    // Calculando a pertinência de todos os FuzzyInputs
    fuzzyInputAux = this->fuzzyInputs;
    while(fuzzyInputAux != NULL){
 80a2f96:	e7f9      	b.n	80a2f8c <_ZN5Fuzzy7fuzzifyEv+0x22>
        fuzzyInputAux = fuzzyInputAux->next;
    }

    // Avaliando quais regras foram disparadas
    fuzzyRuleArray* fuzzyRuleAux;
    fuzzyRuleAux = this->fuzzyRules;
 80a2f98:	6965      	ldr	r5, [r4, #20]
    // Calculando as pertinências de totos os FuzzyInputs
    while(fuzzyRuleAux != NULL){
 80a2f9a:	b125      	cbz	r5, 80a2fa6 <_ZN5Fuzzy7fuzzifyEv+0x3c>
        fuzzyRuleAux->fuzzyRule->evaluateExpression();
 80a2f9c:	6828      	ldr	r0, [r5, #0]
 80a2f9e:	f7ff fa14 	bl	80a23ca <_ZN9FuzzyRule18evaluateExpressionEv>
        fuzzyRuleAux = fuzzyRuleAux->next;
 80a2fa2:	686d      	ldr	r5, [r5, #4]

    // Avaliando quais regras foram disparadas
    fuzzyRuleArray* fuzzyRuleAux;
    fuzzyRuleAux = this->fuzzyRules;
    // Calculando as pertinências de totos os FuzzyInputs
    while(fuzzyRuleAux != NULL){
 80a2fa4:	e7f9      	b.n	80a2f9a <_ZN5Fuzzy7fuzzifyEv+0x30>
        fuzzyRuleAux->fuzzyRule->evaluateExpression();
        fuzzyRuleAux = fuzzyRuleAux->next;
    }

    // Truncado os conjuntos de saída
    fuzzyOutputAux = this->fuzzyOutputs;
 80a2fa6:	68e4      	ldr	r4, [r4, #12]
    while(fuzzyOutputAux != NULL){
 80a2fa8:	b124      	cbz	r4, 80a2fb4 <_ZN5Fuzzy7fuzzifyEv+0x4a>
        fuzzyOutputAux->fuzzyOutput->truncate();
 80a2faa:	6820      	ldr	r0, [r4, #0]
 80a2fac:	f7ff fd50 	bl	80a2a50 <_ZN11FuzzyOutput8truncateEv>
        fuzzyOutputAux = fuzzyOutputAux->next;
 80a2fb0:	6864      	ldr	r4, [r4, #4]
        fuzzyRuleAux = fuzzyRuleAux->next;
    }

    // Truncado os conjuntos de saída
    fuzzyOutputAux = this->fuzzyOutputs;
    while(fuzzyOutputAux != NULL){
 80a2fb2:	e7f9      	b.n	80a2fa8 <_ZN5Fuzzy7fuzzifyEv+0x3e>
        fuzzyOutputAux->fuzzyOutput->truncate();
        fuzzyOutputAux = fuzzyOutputAux->next;
    }

    return true;
}
 80a2fb4:	2001      	movs	r0, #1
 80a2fb6:	bd38      	pop	{r3, r4, r5, pc}

080a2fb8 <_ZN5Fuzzy9defuzzifyEi>:
        aux = aux->next;
    }
    return false;
}

float Fuzzy::defuzzify(int fuzzyOutputIndex){
 80a2fb8:	b538      	push	{r3, r4, r5, lr}
 80a2fba:	460d      	mov	r5, r1
    fuzzyOutputArray *aux;
    aux = this->fuzzyOutputs;
 80a2fbc:	68c4      	ldr	r4, [r0, #12]
    while(aux != NULL){
 80a2fbe:	b15c      	cbz	r4, 80a2fd8 <_ZN5Fuzzy9defuzzifyEi+0x20>
        if(aux->fuzzyOutput->getIndex() == fuzzyOutputIndex){
 80a2fc0:	6820      	ldr	r0, [r4, #0]
 80a2fc2:	f7ff fc48 	bl	80a2856 <_ZN7FuzzyIO8getIndexEv>
 80a2fc6:	42a8      	cmp	r0, r5
 80a2fc8:	d104      	bne.n	80a2fd4 <_ZN5Fuzzy9defuzzifyEi+0x1c>
            return aux->fuzzyOutput->getCrispOutput();
 80a2fca:	6820      	ldr	r0, [r4, #0]
        }
        aux = aux->next;
    }
    return 0;
}
 80a2fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
float Fuzzy::defuzzify(int fuzzyOutputIndex){
    fuzzyOutputArray *aux;
    aux = this->fuzzyOutputs;
    while(aux != NULL){
        if(aux->fuzzyOutput->getIndex() == fuzzyOutputIndex){
            return aux->fuzzyOutput->getCrispOutput();
 80a2fd0:	f7ff bc6b 	b.w	80a28aa <_ZN11FuzzyOutput14getCrispOutputEv>
        }
        aux = aux->next;
 80a2fd4:	6864      	ldr	r4, [r4, #4]
}

float Fuzzy::defuzzify(int fuzzyOutputIndex){
    fuzzyOutputArray *aux;
    aux = this->fuzzyOutputs;
    while(aux != NULL){
 80a2fd6:	e7f2      	b.n	80a2fbe <_ZN5Fuzzy9defuzzifyEi+0x6>
            return aux->fuzzyOutput->getCrispOutput();
        }
        aux = aux->next;
    }
    return 0;
}
 80a2fd8:	2000      	movs	r0, #0
 80a2fda:	bd38      	pop	{r3, r4, r5, pc}

080a2fdc <_ZN19FuzzyRuleAntecedentC1Ev>:
 */
#include "FuzzyRuleAntecedent.h"

// CONSTRUTORES
FuzzyRuleAntecedent::FuzzyRuleAntecedent(){
    this->op = 0;
 80a2fdc:	2200      	movs	r2, #0
 80a2fde:	6002      	str	r2, [r0, #0]
    this->mode = 0;
 80a2fe0:	6042      	str	r2, [r0, #4]
    this->fuzzySet1 = NULL;
 80a2fe2:	6082      	str	r2, [r0, #8]
    this->fuzzySet2 = NULL;
 80a2fe4:	60c2      	str	r2, [r0, #12]
    this->fuzzyRuleAntecedent1 = NULL;
 80a2fe6:	6102      	str	r2, [r0, #16]
    this->fuzzyRuleAntecedent2 = NULL;
 80a2fe8:	6142      	str	r2, [r0, #20]
}
 80a2fea:	4770      	bx	lr

080a2fec <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>:
        return true;
    }
    return false;
}

bool FuzzyRuleAntecedent::joinWithAND(FuzzySet* fuzzySet1, FuzzySet* fuzzySet2){
 80a2fec:	b510      	push	{r4, lr}
 80a2fee:	4603      	mov	r3, r0
    if(fuzzySet1 != NULL && fuzzySet2 != NULL){
 80a2ff0:	b139      	cbz	r1, 80a3002 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_+0x16>
 80a2ff2:	b142      	cbz	r2, 80a3006 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_+0x1a>
        this->op = OP_AND;
        this->mode = MODE_FS_FS;
 80a2ff4:	2001      	movs	r0, #1
 80a2ff6:	2402      	movs	r4, #2
 80a2ff8:	e883 0011 	stmia.w	r3, {r0, r4}
        this->fuzzySet1 = fuzzySet1;
 80a2ffc:	6099      	str	r1, [r3, #8]
        this->fuzzySet2 = fuzzySet2;
 80a2ffe:	60da      	str	r2, [r3, #12]
        return true;
 80a3000:	bd10      	pop	{r4, pc}
    }
    return false;
 80a3002:	4608      	mov	r0, r1
 80a3004:	bd10      	pop	{r4, pc}
 80a3006:	4610      	mov	r0, r2
}
 80a3008:	bd10      	pop	{r4, pc}

080a300a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>:
        return true;
    }
    return false;
}

bool FuzzyRuleAntecedent::joinWithAND(FuzzyRuleAntecedent* fuzzyRuleAntecedent1, FuzzyRuleAntecedent* fuzzyRuleAntecedent2){
 80a300a:	b510      	push	{r4, lr}
 80a300c:	4603      	mov	r3, r0
    if(fuzzyRuleAntecedent1 != NULL && fuzzyRuleAntecedent2 != NULL){
 80a300e:	b139      	cbz	r1, 80a3020 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_+0x16>
 80a3010:	b142      	cbz	r2, 80a3024 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_+0x1a>
        this->op = OP_AND;
        this->mode = MODE_FRA_FRA;
 80a3012:	2001      	movs	r0, #1
 80a3014:	2404      	movs	r4, #4
 80a3016:	e883 0011 	stmia.w	r3, {r0, r4}
        this->fuzzyRuleAntecedent1 = fuzzyRuleAntecedent1;
 80a301a:	6119      	str	r1, [r3, #16]
        this->fuzzyRuleAntecedent2 = fuzzyRuleAntecedent2;
 80a301c:	615a      	str	r2, [r3, #20]
        return true;
 80a301e:	bd10      	pop	{r4, pc}
    }
    return false;
 80a3020:	4608      	mov	r0, r1
 80a3022:	bd10      	pop	{r4, pc}
 80a3024:	4610      	mov	r0, r2
}
 80a3026:	bd10      	pop	{r4, pc}

080a3028 <_ZN19FuzzyRuleAntecedent8evaluateEv>:
        return true;
    }
    return false;
}

float FuzzyRuleAntecedent::evaluate(){
 80a3028:	b538      	push	{r3, r4, r5, lr}
 80a302a:	4604      	mov	r4, r0
    switch(this->mode){
 80a302c:	6863      	ldr	r3, [r4, #4]
 80a302e:	3b01      	subs	r3, #1
 80a3030:	2b03      	cmp	r3, #3
 80a3032:	f200 80ce 	bhi.w	80a31d2 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
 80a3036:	e8df f003 	tbb	[pc, r3]
 80a303a:	0276      	.short	0x0276
 80a303c:	7b37      	.short	0x7b37
        case MODE_FS:
            return this->fuzzySet1->getPertinence();
            break;
        case MODE_FS_FS:
            switch(this->op){
 80a303e:	6823      	ldr	r3, [r4, #0]
 80a3040:	2b01      	cmp	r3, #1
 80a3042:	d002      	beq.n	80a304a <_ZN19FuzzyRuleAntecedent8evaluateEv+0x22>
 80a3044:	2b02      	cmp	r3, #2
 80a3046:	d01e      	beq.n	80a3086 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x5e>
 80a3048:	e0c3      	b.n	80a31d2 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                case OP_AND:
                    if(this->fuzzySet1->getPertinence() > 0.0 && this->fuzzySet2->getPertinence() > 0.0){
 80a304a:	68a0      	ldr	r0, [r4, #8]
 80a304c:	f7ff ff0b 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a3050:	2100      	movs	r1, #0
 80a3052:	f002 f853 	bl	80a50fc <__aeabi_fcmpgt>
 80a3056:	2800      	cmp	r0, #0
 80a3058:	f000 80bb 	beq.w	80a31d2 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
 80a305c:	68e0      	ldr	r0, [r4, #12]
 80a305e:	f7ff ff02 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a3062:	2100      	movs	r1, #0
 80a3064:	f002 f84a 	bl	80a50fc <__aeabi_fcmpgt>
 80a3068:	2800      	cmp	r0, #0
 80a306a:	f000 80b2 	beq.w	80a31d2 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        if(this->fuzzySet1->getPertinence() < this->fuzzySet2->getPertinence()){
 80a306e:	68a0      	ldr	r0, [r4, #8]
 80a3070:	f7ff fef9 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a3074:	4605      	mov	r5, r0
 80a3076:	68e0      	ldr	r0, [r4, #12]
 80a3078:	f7ff fef5 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a307c:	4601      	mov	r1, r0
 80a307e:	4628      	mov	r0, r5
 80a3080:	f002 f81e 	bl	80a50c0 <__aeabi_fcmplt>
 80a3084:	e090      	b.n	80a31a8 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x180>
                    }else{
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(this->fuzzySet1->getPertinence() > 0.0 || this->fuzzySet2->getPertinence() > 0.0){
 80a3086:	68a0      	ldr	r0, [r4, #8]
 80a3088:	f7ff feed 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a308c:	2100      	movs	r1, #0
 80a308e:	f002 f835 	bl	80a50fc <__aeabi_fcmpgt>
 80a3092:	2800      	cmp	r0, #0
 80a3094:	d17d      	bne.n	80a3192 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x16a>
 80a3096:	68e0      	ldr	r0, [r4, #12]
 80a3098:	f7ff fee5 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a309c:	2100      	movs	r1, #0
 80a309e:	f002 f82d 	bl	80a50fc <__aeabi_fcmpgt>
 80a30a2:	2800      	cmp	r0, #0
 80a30a4:	d175      	bne.n	80a3192 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x16a>
 80a30a6:	e094      	b.n	80a31d2 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                default:
                    return 0.0;
            }
            break;
        case MODE_FS_FRA:
            switch(this->op){
 80a30a8:	6823      	ldr	r3, [r4, #0]
 80a30aa:	2b01      	cmp	r3, #1
 80a30ac:	d002      	beq.n	80a30b4 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x8c>
 80a30ae:	2b02      	cmp	r3, #2
 80a30b0:	d01d      	beq.n	80a30ee <_ZN19FuzzyRuleAntecedent8evaluateEv+0xc6>
 80a30b2:	e08e      	b.n	80a31d2 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                case OP_AND:
                    if(this->fuzzySet1->getPertinence() > 0.0 && fuzzyRuleAntecedent1->evaluate() > 0.0){
 80a30b4:	68a0      	ldr	r0, [r4, #8]
 80a30b6:	f7ff fed6 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a30ba:	2100      	movs	r1, #0
 80a30bc:	f002 f81e 	bl	80a50fc <__aeabi_fcmpgt>
 80a30c0:	2800      	cmp	r0, #0
 80a30c2:	f000 8086 	beq.w	80a31d2 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
 80a30c6:	6920      	ldr	r0, [r4, #16]
 80a30c8:	f7ff ffae 	bl	80a3028 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a30cc:	2100      	movs	r1, #0
 80a30ce:	f002 f815 	bl	80a50fc <__aeabi_fcmpgt>
 80a30d2:	2800      	cmp	r0, #0
 80a30d4:	d07d      	beq.n	80a31d2 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        if(this->fuzzySet1->getPertinence() < fuzzyRuleAntecedent1->evaluate()){
 80a30d6:	68a0      	ldr	r0, [r4, #8]
 80a30d8:	f7ff fec5 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a30dc:	4605      	mov	r5, r0
 80a30de:	6920      	ldr	r0, [r4, #16]
 80a30e0:	f7ff ffa2 	bl	80a3028 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a30e4:	4601      	mov	r1, r0
 80a30e6:	4628      	mov	r0, r5
 80a30e8:	f001 ffea 	bl	80a50c0 <__aeabi_fcmplt>
 80a30ec:	e019      	b.n	80a3122 <_ZN19FuzzyRuleAntecedent8evaluateEv+0xfa>
                    }else{
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(this->fuzzySet1->getPertinence() > 0.0 || fuzzyRuleAntecedent1->evaluate() > 0.0){
 80a30ee:	68a0      	ldr	r0, [r4, #8]
 80a30f0:	f7ff feb9 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a30f4:	2100      	movs	r1, #0
 80a30f6:	f002 f801 	bl	80a50fc <__aeabi_fcmpgt>
 80a30fa:	b938      	cbnz	r0, 80a310c <_ZN19FuzzyRuleAntecedent8evaluateEv+0xe4>
 80a30fc:	6920      	ldr	r0, [r4, #16]
 80a30fe:	f7ff ff93 	bl	80a3028 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3102:	2100      	movs	r1, #0
 80a3104:	f001 fffa 	bl	80a50fc <__aeabi_fcmpgt>
 80a3108:	2800      	cmp	r0, #0
 80a310a:	d062      	beq.n	80a31d2 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        if(this->fuzzySet1->getPertinence() > fuzzyRuleAntecedent1->evaluate()){
 80a310c:	68a0      	ldr	r0, [r4, #8]
 80a310e:	f7ff feaa 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a3112:	4605      	mov	r5, r0
 80a3114:	6920      	ldr	r0, [r4, #16]
 80a3116:	f7ff ff87 	bl	80a3028 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a311a:	4601      	mov	r1, r0
 80a311c:	4628      	mov	r0, r5
 80a311e:	f001 ffed 	bl	80a50fc <__aeabi_fcmpgt>
 80a3122:	2800      	cmp	r0, #0
 80a3124:	d044      	beq.n	80a31b0 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x188>
                            return this->fuzzySet1->getPertinence();
 80a3126:	68a0      	ldr	r0, [r4, #8]
            break;
        default:
            return 0.0;
    }
    return 0.0;
 80a3128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                    }
                    break;
                case OP_OR:
                    if(this->fuzzySet1->getPertinence() > 0.0 || fuzzyRuleAntecedent1->evaluate() > 0.0){
                        if(this->fuzzySet1->getPertinence() > fuzzyRuleAntecedent1->evaluate()){
                            return this->fuzzySet1->getPertinence();
 80a312c:	f7ff be9b 	b.w	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
                default:
                    return 0.0;
            }
            break;
        case MODE_FRA_FRA:
            switch(this->op){
 80a3130:	6823      	ldr	r3, [r4, #0]
 80a3132:	2b01      	cmp	r3, #1
 80a3134:	d002      	beq.n	80a313c <_ZN19FuzzyRuleAntecedent8evaluateEv+0x114>
 80a3136:	2b02      	cmp	r3, #2
 80a3138:	d01c      	beq.n	80a3174 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x14c>
 80a313a:	e04a      	b.n	80a31d2 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                case OP_AND:
                    if(fuzzyRuleAntecedent1->evaluate() > 0.0 && fuzzyRuleAntecedent2->evaluate() > 0.0){
 80a313c:	6920      	ldr	r0, [r4, #16]
 80a313e:	f7ff ff73 	bl	80a3028 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3142:	2100      	movs	r1, #0
 80a3144:	f001 ffda 	bl	80a50fc <__aeabi_fcmpgt>
 80a3148:	2800      	cmp	r0, #0
 80a314a:	d042      	beq.n	80a31d2 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
 80a314c:	6960      	ldr	r0, [r4, #20]
 80a314e:	f7ff ff6b 	bl	80a3028 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3152:	2100      	movs	r1, #0
 80a3154:	f001 ffd2 	bl	80a50fc <__aeabi_fcmpgt>
 80a3158:	2800      	cmp	r0, #0
 80a315a:	d03a      	beq.n	80a31d2 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        if(fuzzyRuleAntecedent1->evaluate() < fuzzyRuleAntecedent2->evaluate()){
 80a315c:	6920      	ldr	r0, [r4, #16]
 80a315e:	f7ff ff63 	bl	80a3028 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3162:	4605      	mov	r5, r0
 80a3164:	6960      	ldr	r0, [r4, #20]
 80a3166:	f7ff ff5f 	bl	80a3028 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a316a:	4601      	mov	r1, r0
 80a316c:	4628      	mov	r0, r5
 80a316e:	f001 ffa7 	bl	80a50c0 <__aeabi_fcmplt>
 80a3172:	e02a      	b.n	80a31ca <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1a2>
                    }else{
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(fuzzyRuleAntecedent1->evaluate() > 0.0 || fuzzyRuleAntecedent2->evaluate() > 0.0){
 80a3174:	6920      	ldr	r0, [r4, #16]
 80a3176:	f7ff ff57 	bl	80a3028 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a317a:	2100      	movs	r1, #0
 80a317c:	f001 ffbe 	bl	80a50fc <__aeabi_fcmpgt>
 80a3180:	b9c0      	cbnz	r0, 80a31b4 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x18c>
 80a3182:	6960      	ldr	r0, [r4, #20]
 80a3184:	f7ff ff50 	bl	80a3028 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3188:	2100      	movs	r1, #0
 80a318a:	f001 ffb7 	bl	80a50fc <__aeabi_fcmpgt>
 80a318e:	b988      	cbnz	r0, 80a31b4 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x18c>
 80a3190:	e01f      	b.n	80a31d2 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(this->fuzzySet1->getPertinence() > 0.0 || this->fuzzySet2->getPertinence() > 0.0){
                        if(this->fuzzySet1->getPertinence() > this->fuzzySet2->getPertinence()){
 80a3192:	68a0      	ldr	r0, [r4, #8]
 80a3194:	f7ff fe67 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a3198:	4605      	mov	r5, r0
 80a319a:	68e0      	ldr	r0, [r4, #12]
 80a319c:	f7ff fe63 	bl	80a2e66 <_ZN8FuzzySet13getPertinenceEv>
 80a31a0:	4601      	mov	r1, r0
 80a31a2:	4628      	mov	r0, r5
 80a31a4:	f001 ffaa 	bl	80a50fc <__aeabi_fcmpgt>
 80a31a8:	2800      	cmp	r0, #0
 80a31aa:	d1bc      	bne.n	80a3126 <_ZN19FuzzyRuleAntecedent8evaluateEv+0xfe>
                            return this->fuzzySet1->getPertinence();
                        }else{
                            return this->fuzzySet2->getPertinence();
 80a31ac:	68e0      	ldr	r0, [r4, #12]
 80a31ae:	e7bb      	b.n	80a3128 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x100>
                    }
                    break;
                case OP_OR:
                    if(fuzzyRuleAntecedent1->evaluate() > 0.0 || fuzzyRuleAntecedent2->evaluate() > 0.0){
                        if(fuzzyRuleAntecedent1->evaluate() > fuzzyRuleAntecedent2->evaluate()){
                            return fuzzyRuleAntecedent1->evaluate();
 80a31b0:	6924      	ldr	r4, [r4, #16]
 80a31b2:	e73b      	b.n	80a302c <_ZN19FuzzyRuleAntecedent8evaluateEv+0x4>
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(fuzzyRuleAntecedent1->evaluate() > 0.0 || fuzzyRuleAntecedent2->evaluate() > 0.0){
                        if(fuzzyRuleAntecedent1->evaluate() > fuzzyRuleAntecedent2->evaluate()){
 80a31b4:	6920      	ldr	r0, [r4, #16]
 80a31b6:	f7ff ff37 	bl	80a3028 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a31ba:	4605      	mov	r5, r0
 80a31bc:	6960      	ldr	r0, [r4, #20]
 80a31be:	f7ff ff33 	bl	80a3028 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a31c2:	4601      	mov	r1, r0
 80a31c4:	4628      	mov	r0, r5
 80a31c6:	f001 ff99 	bl	80a50fc <__aeabi_fcmpgt>
 80a31ca:	2800      	cmp	r0, #0
 80a31cc:	d1f0      	bne.n	80a31b0 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x188>
                            return fuzzyRuleAntecedent1->evaluate();
                        }else{
                            return fuzzyRuleAntecedent2->evaluate();
 80a31ce:	6964      	ldr	r4, [r4, #20]
 80a31d0:	e72c      	b.n	80a302c <_ZN19FuzzyRuleAntecedent8evaluateEv+0x4>
            break;
        default:
            return 0.0;
    }
    return 0.0;
 80a31d2:	2000      	movs	r0, #0
 80a31d4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a31d8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a31d8:	b508      	push	{r3, lr}
 80a31da:	4b02      	ldr	r3, [pc, #8]	; (80a31e4 <HAL_Pin_Map+0xc>)
 80a31dc:	681b      	ldr	r3, [r3, #0]
 80a31de:	681b      	ldr	r3, [r3, #0]
 80a31e0:	9301      	str	r3, [sp, #4]
 80a31e2:	bd08      	pop	{r3, pc}
 80a31e4:	080601b0 	.word	0x080601b0

080a31e8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a31e8:	b508      	push	{r3, lr}
 80a31ea:	4b02      	ldr	r3, [pc, #8]	; (80a31f4 <HAL_Validate_Pin_Function+0xc>)
 80a31ec:	681b      	ldr	r3, [r3, #0]
 80a31ee:	685b      	ldr	r3, [r3, #4]
 80a31f0:	9301      	str	r3, [sp, #4]
 80a31f2:	bd08      	pop	{r3, pc}
 80a31f4:	080601b0 	.word	0x080601b0

080a31f8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a31f8:	b508      	push	{r3, lr}
 80a31fa:	4b02      	ldr	r3, [pc, #8]	; (80a3204 <HAL_Pin_Mode+0xc>)
 80a31fc:	681b      	ldr	r3, [r3, #0]
 80a31fe:	689b      	ldr	r3, [r3, #8]
 80a3200:	9301      	str	r3, [sp, #4]
 80a3202:	bd08      	pop	{r3, pc}
 80a3204:	080601b0 	.word	0x080601b0

080a3208 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a3208:	b508      	push	{r3, lr}
 80a320a:	4b02      	ldr	r3, [pc, #8]	; (80a3214 <HAL_Get_Pin_Mode+0xc>)
 80a320c:	681b      	ldr	r3, [r3, #0]
 80a320e:	68db      	ldr	r3, [r3, #12]
 80a3210:	9301      	str	r3, [sp, #4]
 80a3212:	bd08      	pop	{r3, pc}
 80a3214:	080601b0 	.word	0x080601b0

080a3218 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a3218:	b508      	push	{r3, lr}
 80a321a:	4b02      	ldr	r3, [pc, #8]	; (80a3224 <HAL_GPIO_Write+0xc>)
 80a321c:	681b      	ldr	r3, [r3, #0]
 80a321e:	691b      	ldr	r3, [r3, #16]
 80a3220:	9301      	str	r3, [sp, #4]
 80a3222:	bd08      	pop	{r3, pc}
 80a3224:	080601b0 	.word	0x080601b0

080a3228 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a3228:	b508      	push	{r3, lr}
 80a322a:	4b02      	ldr	r3, [pc, #8]	; (80a3234 <HAL_GPIO_Read+0xc>)
 80a322c:	681b      	ldr	r3, [r3, #0]
 80a322e:	695b      	ldr	r3, [r3, #20]
 80a3230:	9301      	str	r3, [sp, #4]
 80a3232:	bd08      	pop	{r3, pc}
 80a3234:	080601b0 	.word	0x080601b0

080a3238 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a3238:	b508      	push	{r3, lr}
 80a323a:	4b02      	ldr	r3, [pc, #8]	; (80a3244 <HAL_Interrupts_Attach+0xc>)
 80a323c:	681b      	ldr	r3, [r3, #0]
 80a323e:	699b      	ldr	r3, [r3, #24]
 80a3240:	9301      	str	r3, [sp, #4]
 80a3242:	bd08      	pop	{r3, pc}
 80a3244:	080601b0 	.word	0x080601b0

080a3248 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a3248:	b508      	push	{r3, lr}
 80a324a:	4b02      	ldr	r3, [pc, #8]	; (80a3254 <HAL_Interrupts_Detach+0xc>)
 80a324c:	681b      	ldr	r3, [r3, #0]
 80a324e:	69db      	ldr	r3, [r3, #28]
 80a3250:	9301      	str	r3, [sp, #4]
 80a3252:	bd08      	pop	{r3, pc}
 80a3254:	080601b0 	.word	0x080601b0

080a3258 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a3258:	b508      	push	{r3, lr}
 80a325a:	4b02      	ldr	r3, [pc, #8]	; (80a3264 <HAL_SPI_Init+0xc>)
 80a325c:	681b      	ldr	r3, [r3, #0]
 80a325e:	69db      	ldr	r3, [r3, #28]
 80a3260:	9301      	str	r3, [sp, #4]
 80a3262:	bd08      	pop	{r3, pc}
 80a3264:	080601b4 	.word	0x080601b4

080a3268 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a3268:	b508      	push	{r3, lr}
 80a326a:	4b02      	ldr	r3, [pc, #8]	; (80a3274 <HAL_SPI_Is_Enabled+0xc>)
 80a326c:	681b      	ldr	r3, [r3, #0]
 80a326e:	6a1b      	ldr	r3, [r3, #32]
 80a3270:	9301      	str	r3, [sp, #4]
 80a3272:	bd08      	pop	{r3, pc}
 80a3274:	080601b4 	.word	0x080601b4

080a3278 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a3278:	b508      	push	{r3, lr}
 80a327a:	4b02      	ldr	r3, [pc, #8]	; (80a3284 <HAL_RNG_GetRandomNumber+0xc>)
 80a327c:	681b      	ldr	r3, [r3, #0]
 80a327e:	685b      	ldr	r3, [r3, #4]
 80a3280:	9301      	str	r3, [sp, #4]
 80a3282:	bd08      	pop	{r3, pc}
 80a3284:	0806019c 	.word	0x0806019c

080a3288 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a3288:	b508      	push	{r3, lr}
 80a328a:	4b02      	ldr	r3, [pc, #8]	; (80a3294 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a328c:	681b      	ldr	r3, [r3, #0]
 80a328e:	695b      	ldr	r3, [r3, #20]
 80a3290:	9301      	str	r3, [sp, #4]
 80a3292:	bd08      	pop	{r3, pc}
 80a3294:	0806019c 	.word	0x0806019c

080a3298 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a3298:	b508      	push	{r3, lr}
 80a329a:	4b02      	ldr	r3, [pc, #8]	; (80a32a4 <os_mutex_create+0xc>)
 80a329c:	681b      	ldr	r3, [r3, #0]
 80a329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a32a0:	9301      	str	r3, [sp, #4]
 80a32a2:	bd08      	pop	{r3, pc}
 80a32a4:	080601d0 	.word	0x080601d0

080a32a8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a32a8:	b508      	push	{r3, lr}
 80a32aa:	4b02      	ldr	r3, [pc, #8]	; (80a32b4 <HAL_USART_Init+0xc>)
 80a32ac:	681b      	ldr	r3, [r3, #0]
 80a32ae:	699b      	ldr	r3, [r3, #24]
 80a32b0:	9301      	str	r3, [sp, #4]
 80a32b2:	bd08      	pop	{r3, pc}
 80a32b4:	080601c4 	.word	0x080601c4

080a32b8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a32b8:	b508      	push	{r3, lr}
 80a32ba:	4b02      	ldr	r3, [pc, #8]	; (80a32c4 <HAL_USART_Write_Data+0xc>)
 80a32bc:	681b      	ldr	r3, [r3, #0]
 80a32be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a32c0:	9301      	str	r3, [sp, #4]
 80a32c2:	bd08      	pop	{r3, pc}
 80a32c4:	080601c4 	.word	0x080601c4

080a32c8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a32c8:	b508      	push	{r3, lr}
 80a32ca:	4b02      	ldr	r3, [pc, #8]	; (80a32d4 <HAL_USART_Available_Data+0xc>)
 80a32cc:	681b      	ldr	r3, [r3, #0]
 80a32ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a32d0:	9301      	str	r3, [sp, #4]
 80a32d2:	bd08      	pop	{r3, pc}
 80a32d4:	080601c4 	.word	0x080601c4

080a32d8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a32d8:	b508      	push	{r3, lr}
 80a32da:	4b02      	ldr	r3, [pc, #8]	; (80a32e4 <HAL_USART_Read_Data+0xc>)
 80a32dc:	681b      	ldr	r3, [r3, #0]
 80a32de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a32e0:	9301      	str	r3, [sp, #4]
 80a32e2:	bd08      	pop	{r3, pc}
 80a32e4:	080601c4 	.word	0x080601c4

080a32e8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a32e8:	b508      	push	{r3, lr}
 80a32ea:	4b02      	ldr	r3, [pc, #8]	; (80a32f4 <HAL_USART_Peek_Data+0xc>)
 80a32ec:	681b      	ldr	r3, [r3, #0]
 80a32ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a32f0:	9301      	str	r3, [sp, #4]
 80a32f2:	bd08      	pop	{r3, pc}
 80a32f4:	080601c4 	.word	0x080601c4

080a32f8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a32f8:	b508      	push	{r3, lr}
 80a32fa:	4b02      	ldr	r3, [pc, #8]	; (80a3304 <HAL_USART_Flush_Data+0xc>)
 80a32fc:	681b      	ldr	r3, [r3, #0]
 80a32fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3300:	9301      	str	r3, [sp, #4]
 80a3302:	bd08      	pop	{r3, pc}
 80a3304:	080601c4 	.word	0x080601c4

080a3308 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a3308:	b508      	push	{r3, lr}
 80a330a:	4b02      	ldr	r3, [pc, #8]	; (80a3314 <HAL_USART_Is_Enabled+0xc>)
 80a330c:	681b      	ldr	r3, [r3, #0]
 80a330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a3310:	9301      	str	r3, [sp, #4]
 80a3312:	bd08      	pop	{r3, pc}
 80a3314:	080601c4 	.word	0x080601c4

080a3318 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a3318:	b508      	push	{r3, lr}
 80a331a:	4b02      	ldr	r3, [pc, #8]	; (80a3324 <HAL_USART_Available_Data_For_Write+0xc>)
 80a331c:	681b      	ldr	r3, [r3, #0]
 80a331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3320:	9301      	str	r3, [sp, #4]
 80a3322:	bd08      	pop	{r3, pc}
 80a3324:	080601c4 	.word	0x080601c4

080a3328 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a3328:	b508      	push	{r3, lr}
 80a332a:	4b02      	ldr	r3, [pc, #8]	; (80a3334 <HAL_I2C_Set_Speed+0xc>)
 80a332c:	681b      	ldr	r3, [r3, #0]
 80a332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3330:	9301      	str	r3, [sp, #4]
 80a3332:	bd08      	pop	{r3, pc}
 80a3334:	080601ac 	.word	0x080601ac

080a3338 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a3338:	b508      	push	{r3, lr}
 80a333a:	4b02      	ldr	r3, [pc, #8]	; (80a3344 <HAL_I2C_Begin+0xc>)
 80a333c:	681b      	ldr	r3, [r3, #0]
 80a333e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a3340:	9301      	str	r3, [sp, #4]
 80a3342:	bd08      	pop	{r3, pc}
 80a3344:	080601ac 	.word	0x080601ac

080a3348 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a3348:	b508      	push	{r3, lr}
 80a334a:	4b02      	ldr	r3, [pc, #8]	; (80a3354 <HAL_I2C_Request_Data+0xc>)
 80a334c:	681b      	ldr	r3, [r3, #0]
 80a334e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a3350:	9301      	str	r3, [sp, #4]
 80a3352:	bd08      	pop	{r3, pc}
 80a3354:	080601ac 	.word	0x080601ac

080a3358 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a3358:	b508      	push	{r3, lr}
 80a335a:	4b02      	ldr	r3, [pc, #8]	; (80a3364 <HAL_I2C_Begin_Transmission+0xc>)
 80a335c:	681b      	ldr	r3, [r3, #0]
 80a335e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a3360:	9301      	str	r3, [sp, #4]
 80a3362:	bd08      	pop	{r3, pc}
 80a3364:	080601ac 	.word	0x080601ac

080a3368 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a3368:	b508      	push	{r3, lr}
 80a336a:	4b02      	ldr	r3, [pc, #8]	; (80a3374 <HAL_I2C_End_Transmission+0xc>)
 80a336c:	681b      	ldr	r3, [r3, #0]
 80a336e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a3370:	9301      	str	r3, [sp, #4]
 80a3372:	bd08      	pop	{r3, pc}
 80a3374:	080601ac 	.word	0x080601ac

080a3378 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a3378:	b508      	push	{r3, lr}
 80a337a:	4b02      	ldr	r3, [pc, #8]	; (80a3384 <HAL_I2C_Write_Data+0xc>)
 80a337c:	681b      	ldr	r3, [r3, #0]
 80a337e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a3380:	9301      	str	r3, [sp, #4]
 80a3382:	bd08      	pop	{r3, pc}
 80a3384:	080601ac 	.word	0x080601ac

080a3388 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a3388:	b508      	push	{r3, lr}
 80a338a:	4b02      	ldr	r3, [pc, #8]	; (80a3394 <HAL_I2C_Available_Data+0xc>)
 80a338c:	681b      	ldr	r3, [r3, #0]
 80a338e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a3390:	9301      	str	r3, [sp, #4]
 80a3392:	bd08      	pop	{r3, pc}
 80a3394:	080601ac 	.word	0x080601ac

080a3398 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a3398:	b508      	push	{r3, lr}
 80a339a:	4b02      	ldr	r3, [pc, #8]	; (80a33a4 <HAL_I2C_Read_Data+0xc>)
 80a339c:	681b      	ldr	r3, [r3, #0]
 80a339e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a33a0:	9301      	str	r3, [sp, #4]
 80a33a2:	bd08      	pop	{r3, pc}
 80a33a4:	080601ac 	.word	0x080601ac

080a33a8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a33a8:	b508      	push	{r3, lr}
 80a33aa:	4b02      	ldr	r3, [pc, #8]	; (80a33b4 <HAL_I2C_Peek_Data+0xc>)
 80a33ac:	681b      	ldr	r3, [r3, #0]
 80a33ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a33b0:	9301      	str	r3, [sp, #4]
 80a33b2:	bd08      	pop	{r3, pc}
 80a33b4:	080601ac 	.word	0x080601ac

080a33b8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a33b8:	b508      	push	{r3, lr}
 80a33ba:	4b02      	ldr	r3, [pc, #8]	; (80a33c4 <HAL_I2C_Flush_Data+0xc>)
 80a33bc:	681b      	ldr	r3, [r3, #0]
 80a33be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a33c0:	9301      	str	r3, [sp, #4]
 80a33c2:	bd08      	pop	{r3, pc}
 80a33c4:	080601ac 	.word	0x080601ac

080a33c8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a33c8:	b508      	push	{r3, lr}
 80a33ca:	4b02      	ldr	r3, [pc, #8]	; (80a33d4 <HAL_I2C_Is_Enabled+0xc>)
 80a33cc:	681b      	ldr	r3, [r3, #0]
 80a33ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a33d0:	9301      	str	r3, [sp, #4]
 80a33d2:	bd08      	pop	{r3, pc}
 80a33d4:	080601ac 	.word	0x080601ac

080a33d8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a33d8:	b508      	push	{r3, lr}
 80a33da:	4b03      	ldr	r3, [pc, #12]	; (80a33e8 <HAL_I2C_Init+0x10>)
 80a33dc:	681b      	ldr	r3, [r3, #0]
 80a33de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a33e2:	9301      	str	r3, [sp, #4]
 80a33e4:	bd08      	pop	{r3, pc}
 80a33e6:	0000      	.short	0x0000
 80a33e8:	080601ac 	.word	0x080601ac

080a33ec <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
 80a33ec:	b508      	push	{r3, lr}
 80a33ee:	4b02      	ldr	r3, [pc, #8]	; (80a33f8 <HAL_Servo_Attach+0xc>)
 80a33f0:	681b      	ldr	r3, [r3, #0]
 80a33f2:	691b      	ldr	r3, [r3, #16]
 80a33f4:	9301      	str	r3, [sp, #4]
 80a33f6:	bd08      	pop	{r3, pc}
 80a33f8:	080601a8 	.word	0x080601a8

080a33fc <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
 80a33fc:	b508      	push	{r3, lr}
 80a33fe:	4b02      	ldr	r3, [pc, #8]	; (80a3408 <HAL_Servo_Detach+0xc>)
 80a3400:	681b      	ldr	r3, [r3, #0]
 80a3402:	695b      	ldr	r3, [r3, #20]
 80a3404:	9301      	str	r3, [sp, #4]
 80a3406:	bd08      	pop	{r3, pc}
 80a3408:	080601a8 	.word	0x080601a8

080a340c <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
 80a340c:	b508      	push	{r3, lr}
 80a340e:	4b02      	ldr	r3, [pc, #8]	; (80a3418 <HAL_Servo_Write_Pulse_Width+0xc>)
 80a3410:	681b      	ldr	r3, [r3, #0]
 80a3412:	699b      	ldr	r3, [r3, #24]
 80a3414:	9301      	str	r3, [sp, #4]
 80a3416:	bd08      	pop	{r3, pc}
 80a3418:	080601a8 	.word	0x080601a8

080a341c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a341c:	b508      	push	{r3, lr}
 80a341e:	4b02      	ldr	r3, [pc, #8]	; (80a3428 <HAL_USB_USART_Init+0xc>)
 80a3420:	681b      	ldr	r3, [r3, #0]
 80a3422:	681b      	ldr	r3, [r3, #0]
 80a3424:	9301      	str	r3, [sp, #4]
 80a3426:	bd08      	pop	{r3, pc}
 80a3428:	080601d8 	.word	0x080601d8

080a342c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a342c:	b508      	push	{r3, lr}
 80a342e:	4b02      	ldr	r3, [pc, #8]	; (80a3438 <HAL_USB_USART_Available_Data+0xc>)
 80a3430:	681b      	ldr	r3, [r3, #0]
 80a3432:	691b      	ldr	r3, [r3, #16]
 80a3434:	9301      	str	r3, [sp, #4]
 80a3436:	bd08      	pop	{r3, pc}
 80a3438:	080601d8 	.word	0x080601d8

080a343c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a343c:	b508      	push	{r3, lr}
 80a343e:	4b02      	ldr	r3, [pc, #8]	; (80a3448 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a3440:	681b      	ldr	r3, [r3, #0]
 80a3442:	695b      	ldr	r3, [r3, #20]
 80a3444:	9301      	str	r3, [sp, #4]
 80a3446:	bd08      	pop	{r3, pc}
 80a3448:	080601d8 	.word	0x080601d8

080a344c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a344c:	b508      	push	{r3, lr}
 80a344e:	4b02      	ldr	r3, [pc, #8]	; (80a3458 <HAL_USB_USART_Receive_Data+0xc>)
 80a3450:	681b      	ldr	r3, [r3, #0]
 80a3452:	699b      	ldr	r3, [r3, #24]
 80a3454:	9301      	str	r3, [sp, #4]
 80a3456:	bd08      	pop	{r3, pc}
 80a3458:	080601d8 	.word	0x080601d8

080a345c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a345c:	b508      	push	{r3, lr}
 80a345e:	4b02      	ldr	r3, [pc, #8]	; (80a3468 <HAL_USB_USART_Send_Data+0xc>)
 80a3460:	681b      	ldr	r3, [r3, #0]
 80a3462:	69db      	ldr	r3, [r3, #28]
 80a3464:	9301      	str	r3, [sp, #4]
 80a3466:	bd08      	pop	{r3, pc}
 80a3468:	080601d8 	.word	0x080601d8

080a346c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a346c:	b508      	push	{r3, lr}
 80a346e:	4b02      	ldr	r3, [pc, #8]	; (80a3478 <HAL_USB_USART_Flush_Data+0xc>)
 80a3470:	681b      	ldr	r3, [r3, #0]
 80a3472:	6a1b      	ldr	r3, [r3, #32]
 80a3474:	9301      	str	r3, [sp, #4]
 80a3476:	bd08      	pop	{r3, pc}
 80a3478:	080601d8 	.word	0x080601d8

080a347c <LED_SetSignalingColor>:
#include "dynalib.h"

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
 80a347c:	b508      	push	{r3, lr}
 80a347e:	4b02      	ldr	r3, [pc, #8]	; (80a3488 <LED_SetSignalingColor+0xc>)
 80a3480:	681b      	ldr	r3, [r3, #0]
 80a3482:	685b      	ldr	r3, [r3, #4]
 80a3484:	9301      	str	r3, [sp, #4]
 80a3486:	bd08      	pop	{r3, pc}
 80a3488:	080201a8 	.word	0x080201a8

080a348c <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 80a348c:	b508      	push	{r3, lr}
 80a348e:	4b02      	ldr	r3, [pc, #8]	; (80a3498 <LED_Signaling_Start+0xc>)
 80a3490:	681b      	ldr	r3, [r3, #0]
 80a3492:	689b      	ldr	r3, [r3, #8]
 80a3494:	9301      	str	r3, [sp, #4]
 80a3496:	bd08      	pop	{r3, pc}
 80a3498:	080201a8 	.word	0x080201a8

080a349c <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80a349c:	b508      	push	{r3, lr}
 80a349e:	4b02      	ldr	r3, [pc, #8]	; (80a34a8 <LED_Signaling_Stop+0xc>)
 80a34a0:	681b      	ldr	r3, [r3, #0]
 80a34a2:	68db      	ldr	r3, [r3, #12]
 80a34a4:	9301      	str	r3, [sp, #4]
 80a34a6:	bd08      	pop	{r3, pc}
 80a34a8:	080201a8 	.word	0x080201a8

080a34ac <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80a34ac:	b508      	push	{r3, lr}
 80a34ae:	4b02      	ldr	r3, [pc, #8]	; (80a34b8 <LED_RGB_IsOverRidden+0xc>)
 80a34b0:	681b      	ldr	r3, [r3, #0]
 80a34b2:	699b      	ldr	r3, [r3, #24]
 80a34b4:	9301      	str	r3, [sp, #4]
 80a34b6:	bd08      	pop	{r3, pc}
 80a34b8:	080201a8 	.word	0x080201a8

080a34bc <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
 80a34bc:	b508      	push	{r3, lr}
 80a34be:	4b02      	ldr	r3, [pc, #8]	; (80a34c8 <LED_On+0xc>)
 80a34c0:	681b      	ldr	r3, [r3, #0]
 80a34c2:	69db      	ldr	r3, [r3, #28]
 80a34c4:	9301      	str	r3, [sp, #4]
 80a34c6:	bd08      	pop	{r3, pc}
 80a34c8:	080201a8 	.word	0x080201a8

080a34cc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a34cc:	b508      	push	{r3, lr}
 80a34ce:	4b02      	ldr	r3, [pc, #8]	; (80a34d8 <set_system_mode+0xc>)
 80a34d0:	681b      	ldr	r3, [r3, #0]
 80a34d2:	685b      	ldr	r3, [r3, #4]
 80a34d4:	9301      	str	r3, [sp, #4]
 80a34d6:	bd08      	pop	{r3, pc}
 80a34d8:	080601a4 	.word	0x080601a4

080a34dc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a34dc:	b508      	push	{r3, lr}
 80a34de:	4b02      	ldr	r3, [pc, #8]	; (80a34e8 <system_delay_ms+0xc>)
 80a34e0:	681b      	ldr	r3, [r3, #0]
 80a34e2:	695b      	ldr	r3, [r3, #20]
 80a34e4:	9301      	str	r3, [sp, #4]
 80a34e6:	bd08      	pop	{r3, pc}
 80a34e8:	080601a4 	.word	0x080601a4

080a34ec <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a34ec:	b508      	push	{r3, lr}
 80a34ee:	4b02      	ldr	r3, [pc, #8]	; (80a34f8 <system_thread_set_state+0xc>)
 80a34f0:	681b      	ldr	r3, [r3, #0]
 80a34f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a34f4:	9301      	str	r3, [sp, #4]
 80a34f6:	bd08      	pop	{r3, pc}
 80a34f8:	080601a4 	.word	0x080601a4

080a34fc <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80a34fc:	b508      	push	{r3, lr}
 80a34fe:	4b02      	ldr	r3, [pc, #8]	; (80a3508 <system_set_usb_request_app_handler+0xc>)
 80a3500:	681b      	ldr	r3, [r3, #0]
 80a3502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a3504:	9301      	str	r3, [sp, #4]
 80a3506:	bd08      	pop	{r3, pc}
 80a3508:	080601a4 	.word	0x080601a4

080a350c <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80a350c:	b508      	push	{r3, lr}
 80a350e:	4b02      	ldr	r3, [pc, #8]	; (80a3518 <system_set_usb_request_result+0xc>)
 80a3510:	681b      	ldr	r3, [r3, #0]
 80a3512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a3514:	9301      	str	r3, [sp, #4]
 80a3516:	bd08      	pop	{r3, pc}
 80a3518:	080601a4 	.word	0x080601a4

080a351c <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a351c:	b508      	push	{r3, lr}
 80a351e:	4b02      	ldr	r3, [pc, #8]	; (80a3528 <network_ready+0xc>)
 80a3520:	681b      	ldr	r3, [r3, #0]
 80a3522:	691b      	ldr	r3, [r3, #16]
 80a3524:	9301      	str	r3, [sp, #4]
 80a3526:	bd08      	pop	{r3, pc}
 80a3528:	080601c8 	.word	0x080601c8

080a352c <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a352c:	b508      	push	{r3, lr}
 80a352e:	4b02      	ldr	r3, [pc, #8]	; (80a3538 <malloc+0xc>)
 80a3530:	681b      	ldr	r3, [r3, #0]
 80a3532:	681b      	ldr	r3, [r3, #0]
 80a3534:	9301      	str	r3, [sp, #4]
 80a3536:	bd08      	pop	{r3, pc}
 80a3538:	080601a0 	.word	0x080601a0

080a353c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a353c:	b508      	push	{r3, lr}
 80a353e:	4b02      	ldr	r3, [pc, #8]	; (80a3548 <free+0xc>)
 80a3540:	681b      	ldr	r3, [r3, #0]
 80a3542:	685b      	ldr	r3, [r3, #4]
 80a3544:	9301      	str	r3, [sp, #4]
 80a3546:	bd08      	pop	{r3, pc}
 80a3548:	080601a0 	.word	0x080601a0

080a354c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a354c:	b508      	push	{r3, lr}
 80a354e:	4b02      	ldr	r3, [pc, #8]	; (80a3558 <realloc+0xc>)
 80a3550:	681b      	ldr	r3, [r3, #0]
 80a3552:	689b      	ldr	r3, [r3, #8]
 80a3554:	9301      	str	r3, [sp, #4]
 80a3556:	bd08      	pop	{r3, pc}
 80a3558:	080601a0 	.word	0x080601a0

080a355c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a355c:	4770      	bx	lr

080a355e <_ZN8SPIClassD0Ev>:
 80a355e:	b510      	push	{r4, lr}
 80a3560:	4604      	mov	r4, r0
 80a3562:	f7fc fd9c 	bl	80a009e <_ZdlPv>
 80a3566:	4620      	mov	r0, r4
 80a3568:	bd10      	pop	{r4, pc}
	...

080a356c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a356c:	b570      	push	{r4, r5, r6, lr}
 80a356e:	4604      	mov	r4, r0
 80a3570:	460e      	mov	r6, r1
 80a3572:	4b07      	ldr	r3, [pc, #28]	; (80a3590 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
	Mutex(os_mutex_t handle) : handle_(handle) {}

	/**
	 * Creates a new mutex.
	 */
	Mutex() : handle_(nullptr)
 80a3574:	2500      	movs	r5, #0
 80a3576:	6003      	str	r3, [r0, #0]
 80a3578:	f840 5f0c 	str.w	r5, [r0, #12]!
	{
		os_mutex_create(&handle_);
 80a357c:	f7ff fe8c 	bl	80a3298 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a3580:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a3582:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a3584:	f7ff fe68 	bl	80a3258 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a3588:	60a5      	str	r5, [r4, #8]
}
 80a358a:	4620      	mov	r0, r4
 80a358c:	bd70      	pop	{r4, r5, r6, pc}
 80a358e:	bf00      	nop
 80a3590:	080a52bc 	.word	0x080a52bc

080a3594 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a3594:	7900      	ldrb	r0, [r0, #4]
 80a3596:	f7ff be67 	b.w	80a3268 <HAL_SPI_Is_Enabled>

080a359a <_ZN5Servo17writeMicrosecondsEt>:
  // write(179).
  return a == this->minAngle || a == this->maxAngle ? a : a + 1;
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{
 80a359a:	f9b0 2000 	ldrsh.w	r2, [r0]

  if (!this->attached())
 80a359e:	1c53      	adds	r3, r2, #1
 80a35a0:	d00b      	beq.n	80a35ba <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
 80a35a2:	8843      	ldrh	r3, [r0, #2]
 80a35a4:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 80a35a6:	428b      	cmp	r3, r1
 80a35a8:	d803      	bhi.n	80a35b2 <_ZN5Servo17writeMicrosecondsEt+0x18>
 80a35aa:	4288      	cmp	r0, r1
 80a35ac:	4603      	mov	r3, r0
 80a35ae:	bf28      	it	cs
 80a35b0:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
 80a35b2:	4619      	mov	r1, r3
 80a35b4:	b290      	uxth	r0, r2
 80a35b6:	f7ff bf29 	b.w	80a340c <HAL_Servo_Write_Pulse_Width>
 80a35ba:	4770      	bx	lr

080a35bc <_ZN5Servo11resetFieldsEv>:
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a35bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
 80a35c0:	22b4      	movs	r2, #180	; 0xb4
 80a35c2:	8102      	strh	r2, [r0, #8]
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a35c4:	f44f 7208 	mov.w	r2, #544	; 0x220
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a35c8:	8003      	strh	r3, [r0, #0]
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a35ca:	8042      	strh	r2, [r0, #2]
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a35cc:	2300      	movs	r3, #0
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a35ce:	f44f 6216 	mov.w	r2, #2400	; 0x960
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a35d2:	80c3      	strh	r3, [r0, #6]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a35d4:	8082      	strh	r2, [r0, #4]
  this->trim = 0;
 80a35d6:	60c3      	str	r3, [r0, #12]
 80a35d8:	4770      	bx	lr

080a35da <_ZN5ServoC1Ev>:
#define ANGLE_TO_US(a)    ((uint16_t)(map((a), this->minAngle, this->maxAngle, \
                                        this->minPW, this->maxPW)))
#define US_TO_ANGLE(us)   ((int16_t)(map((us), this->minPW, this->maxPW,  \
                                       this->minAngle, this->maxAngle)))

Servo::Servo()
 80a35da:	b508      	push	{r3, lr}
{
  this->resetFields();
 80a35dc:	f7ff ffee 	bl	80a35bc <_ZN5Servo11resetFieldsEv>
}
 80a35e0:	bd08      	pop	{r3, pc}

080a35e2 <_ZN5Servo6detachEv>:

  return true;
}

bool Servo::detach()
{
 80a35e2:	b510      	push	{r4, lr}
 80a35e4:	4604      	mov	r4, r0
 80a35e6:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
 80a35ea:	1c43      	adds	r3, r0, #1
 80a35ec:	d007      	beq.n	80a35fe <_ZN5Servo6detachEv+0x1c>
  {
    return false;
  }

  HAL_Servo_Detach(this->pin);
 80a35ee:	b280      	uxth	r0, r0
 80a35f0:	f7ff ff04 	bl	80a33fc <HAL_Servo_Detach>

  this->resetFields();
 80a35f4:	4620      	mov	r0, r4
 80a35f6:	f7ff ffe1 	bl	80a35bc <_ZN5Servo11resetFieldsEv>

  return true;
 80a35fa:	2001      	movs	r0, #1
 80a35fc:	bd10      	pop	{r4, pc}

bool Servo::detach()
{
  if (!this->attached())
  {
    return false;
 80a35fe:	2000      	movs	r0, #0
  HAL_Servo_Detach(this->pin);

  this->resetFields();

  return true;
}
 80a3600:	bd10      	pop	{r4, pc}

080a3602 <_ZN5Servo6attachEtttss>:
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a3602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3606:	460d      	mov	r5, r1
 80a3608:	4604      	mov	r4, r0

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a360a:	2102      	movs	r1, #2
 80a360c:	4628      	mov	r0, r5
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a360e:	4690      	mov	r8, r2
 80a3610:	461f      	mov	r7, r3

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a3612:	f7ff fde9 	bl	80a31e8 <HAL_Validate_Pin_Function>
 80a3616:	2802      	cmp	r0, #2
 80a3618:	d001      	beq.n	80a361e <_ZN5Servo6attachEtttss+0x1c>
  {
    return false;
 80a361a:	2600      	movs	r6, #0
 80a361c:	e019      	b.n	80a3652 <_ZN5Servo6attachEtttss+0x50>
  }

  // Safety check
  if (!pinAvailable(pin))
 80a361e:	4628      	mov	r0, r5
 80a3620:	f000 fbf6 	bl	80a3e10 <pinAvailable>
 80a3624:	4606      	mov	r6, r0
 80a3626:	2800      	cmp	r0, #0
 80a3628:	d0f7      	beq.n	80a361a <_ZN5Servo6attachEtttss+0x18>
  {
    return false;
  }

  if (this->attached())
 80a362a:	f9b4 3000 	ldrsh.w	r3, [r4]
 80a362e:	3301      	adds	r3, #1
 80a3630:	d002      	beq.n	80a3638 <_ZN5Servo6attachEtttss+0x36>
  {
    this->detach();
 80a3632:	4620      	mov	r0, r4
 80a3634:	f7ff ffd5 	bl	80a35e2 <_ZN5Servo6detachEv>
  }

  this->pin = pin;
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a3638:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  if (this->attached())
  {
    this->detach();
  }

  this->pin = pin;
 80a363c:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a363e:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
 80a3640:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  {
    this->detach();
  }

  this->pin = pin;
  this->minPW = minPW;
 80a3644:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
 80a3648:	80a7      	strh	r7, [r4, #4]
  this->minAngle = minAngle;
  this->maxAngle = maxAngle;
 80a364a:	8123      	strh	r3, [r4, #8]

  HAL_Servo_Attach(this->pin);
 80a364c:	4628      	mov	r0, r5
 80a364e:	f7ff fecd 	bl	80a33ec <HAL_Servo_Attach>

  return true;
}
 80a3652:	4630      	mov	r0, r6
 80a3654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3658 <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a3658:	2000      	movs	r0, #0
 80a365a:	f7ff bf37 	b.w	80a34cc <set_system_mode>

080a365e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a365e:	b510      	push	{r4, lr}
 80a3660:	4604      	mov	r4, r0
{
	free(buffer);
 80a3662:	6800      	ldr	r0, [r0, #0]
 80a3664:	f7ff ff6a 	bl	80a353c <free>
}
 80a3668:	4620      	mov	r0, r4
 80a366a:	bd10      	pop	{r4, pc}

080a366c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a366c:	b510      	push	{r4, lr}
 80a366e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a3670:	6800      	ldr	r0, [r0, #0]
 80a3672:	b108      	cbz	r0, 80a3678 <_ZN6String10invalidateEv+0xc>
 80a3674:	f7ff ff62 	bl	80a353c <free>
	buffer = NULL;
 80a3678:	2300      	movs	r3, #0
 80a367a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a367c:	60a3      	str	r3, [r4, #8]
 80a367e:	6063      	str	r3, [r4, #4]
 80a3680:	bd10      	pop	{r4, pc}

080a3682 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a3682:	b538      	push	{r3, r4, r5, lr}
 80a3684:	4604      	mov	r4, r0
 80a3686:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a3688:	6800      	ldr	r0, [r0, #0]
 80a368a:	3101      	adds	r1, #1
 80a368c:	f7ff ff5e 	bl	80a354c <realloc>
	if (newbuffer) {
 80a3690:	b110      	cbz	r0, 80a3698 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a3692:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a3696:	2001      	movs	r0, #1
	}
	return 0;
}
 80a3698:	bd38      	pop	{r3, r4, r5, pc}

080a369a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a369a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a369c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a369e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a36a0:	b113      	cbz	r3, 80a36a8 <_ZN6String7reserveEj+0xe>
 80a36a2:	6843      	ldr	r3, [r0, #4]
 80a36a4:	428b      	cmp	r3, r1
 80a36a6:	d207      	bcs.n	80a36b8 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a36a8:	4620      	mov	r0, r4
 80a36aa:	f7ff ffea 	bl	80a3682 <_ZN6String12changeBufferEj>
 80a36ae:	b120      	cbz	r0, 80a36ba <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a36b0:	68a3      	ldr	r3, [r4, #8]
 80a36b2:	b90b      	cbnz	r3, 80a36b8 <_ZN6String7reserveEj+0x1e>
 80a36b4:	6822      	ldr	r2, [r4, #0]
 80a36b6:	7013      	strb	r3, [r2, #0]
 80a36b8:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a36ba:	bd10      	pop	{r4, pc}

080a36bc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a36bc:	b570      	push	{r4, r5, r6, lr}
 80a36be:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a36c0:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a36c2:	4604      	mov	r4, r0
 80a36c4:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a36c6:	f7ff ffe8 	bl	80a369a <_ZN6String7reserveEj>
 80a36ca:	b918      	cbnz	r0, 80a36d4 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a36cc:	4620      	mov	r0, r4
 80a36ce:	f7ff ffcd 	bl	80a366c <_ZN6String10invalidateEv>
		return *this;
 80a36d2:	e009      	b.n	80a36e8 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a36d4:	462a      	mov	r2, r5
 80a36d6:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a36d8:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a36da:	6820      	ldr	r0, [r4, #0]
 80a36dc:	f001 fd46 	bl	80a516c <memcpy>
	buffer[len] = 0;
 80a36e0:	6822      	ldr	r2, [r4, #0]
 80a36e2:	68a3      	ldr	r3, [r4, #8]
 80a36e4:	2100      	movs	r1, #0
 80a36e6:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a36e8:	4620      	mov	r0, r4
 80a36ea:	bd70      	pop	{r4, r5, r6, pc}

080a36ec <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a36ec:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a36ee:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a36f0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a36f2:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a36f4:	6043      	str	r3, [r0, #4]
	len = 0;
 80a36f6:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a36f8:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a36fa:	460d      	mov	r5, r1
 80a36fc:	b139      	cbz	r1, 80a370e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a36fe:	4608      	mov	r0, r1
 80a3700:	f001 fd47 	bl	80a5192 <strlen>
 80a3704:	4629      	mov	r1, r5
 80a3706:	4602      	mov	r2, r0
 80a3708:	4620      	mov	r0, r4
 80a370a:	f7ff ffd7 	bl	80a36bc <_ZN6String4copyEPKcj>
}
 80a370e:	4620      	mov	r0, r4
 80a3710:	bd38      	pop	{r3, r4, r5, pc}

080a3712 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a3712:	b538      	push	{r3, r4, r5, lr}
 80a3714:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a3716:	460c      	mov	r4, r1
 80a3718:	b141      	cbz	r1, 80a372c <_ZN6StringaSEPKc+0x1a>
 80a371a:	4608      	mov	r0, r1
 80a371c:	f001 fd39 	bl	80a5192 <strlen>
 80a3720:	4621      	mov	r1, r4
 80a3722:	4602      	mov	r2, r0
 80a3724:	4628      	mov	r0, r5
 80a3726:	f7ff ffc9 	bl	80a36bc <_ZN6String4copyEPKcj>
 80a372a:	e001      	b.n	80a3730 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a372c:	f7ff ff9e 	bl	80a366c <_ZN6String10invalidateEv>

	return *this;
}
 80a3730:	4628      	mov	r0, r5
 80a3732:	bd38      	pop	{r3, r4, r5, pc}

080a3734 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a3734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3736:	4606      	mov	r6, r0
 80a3738:	460d      	mov	r5, r1
 80a373a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a373c:	2400      	movs	r4, #0
  while (size--) {
 80a373e:	42bd      	cmp	r5, r7
 80a3740:	d00c      	beq.n	80a375c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a3742:	6833      	ldr	r3, [r6, #0]
 80a3744:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a3748:	689b      	ldr	r3, [r3, #8]
 80a374a:	4630      	mov	r0, r6
 80a374c:	4798      	blx	r3
     if (chunk>=0)
 80a374e:	2800      	cmp	r0, #0
 80a3750:	db01      	blt.n	80a3756 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a3752:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a3754:	e7f3      	b.n	80a373e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a3756:	2c00      	cmp	r4, #0
 80a3758:	bf08      	it	eq
 80a375a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a375c:	4620      	mov	r0, r4
 80a375e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3760 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a3760:	b570      	push	{r4, r5, r6, lr}
 80a3762:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a3764:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a3766:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a3768:	b149      	cbz	r1, 80a377e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a376a:	f001 fd12 	bl	80a5192 <strlen>
 80a376e:	682b      	ldr	r3, [r5, #0]
 80a3770:	4602      	mov	r2, r0
 80a3772:	4621      	mov	r1, r4
 80a3774:	4628      	mov	r0, r5
    }
 80a3776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a377a:	68db      	ldr	r3, [r3, #12]
 80a377c:	4718      	bx	r3
    }
 80a377e:	bd70      	pop	{r4, r5, r6, pc}

080a3780 <_ZN5Print5printEPKc>:
 80a3780:	b508      	push	{r3, lr}
 80a3782:	f7ff ffed 	bl	80a3760 <_ZN5Print5writeEPKc>
 80a3786:	bd08      	pop	{r3, pc}

080a3788 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a3788:	6803      	ldr	r3, [r0, #0]
 80a378a:	689b      	ldr	r3, [r3, #8]
 80a378c:	4718      	bx	r3

080a378e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a378e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a3790:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a3792:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a3794:	f7ff fff8 	bl	80a3788 <_ZN5Print5printEc>
  n += print('\n');
 80a3798:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a379a:	4604      	mov	r4, r0
  n += print('\n');
 80a379c:	4628      	mov	r0, r5
 80a379e:	f7ff fff3 	bl	80a3788 <_ZN5Print5printEc>
  return n;
}
 80a37a2:	4420      	add	r0, r4
 80a37a4:	bd38      	pop	{r3, r4, r5, pc}

080a37a6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a37a6:	b538      	push	{r3, r4, r5, lr}
 80a37a8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a37aa:	f7ff ffd9 	bl	80a3760 <_ZN5Print5writeEPKc>
 80a37ae:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a37b0:	4628      	mov	r0, r5
 80a37b2:	f7ff ffec 	bl	80a378e <_ZN5Print7printlnEv>
  return n;
}
 80a37b6:	4420      	add	r0, r4
 80a37b8:	bd38      	pop	{r3, r4, r5, pc}

080a37ba <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a37ba:	2a01      	cmp	r2, #1
 80a37bc:	bf98      	it	ls
 80a37be:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a37c0:	b530      	push	{r4, r5, lr}
 80a37c2:	460b      	mov	r3, r1
 80a37c4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a37c6:	2100      	movs	r1, #0
 80a37c8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a37cc:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a37d0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a37d4:	fb05 3312 	mls	r3, r5, r2, r3
 80a37d8:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a37da:	2b09      	cmp	r3, #9
 80a37dc:	bf94      	ite	ls
 80a37de:	3330      	addls	r3, #48	; 0x30
 80a37e0:	3337      	addhi	r3, #55	; 0x37
 80a37e2:	b2db      	uxtb	r3, r3
 80a37e4:	4621      	mov	r1, r4
 80a37e6:	f804 3901 	strb.w	r3, [r4], #-1
 80a37ea:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a37ec:	2d00      	cmp	r5, #0
 80a37ee:	d1ef      	bne.n	80a37d0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a37f0:	f7ff ffb6 	bl	80a3760 <_ZN5Print5writeEPKc>
}
 80a37f4:	b00b      	add	sp, #44	; 0x2c
 80a37f6:	bd30      	pop	{r4, r5, pc}

080a37f8 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a37f8:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a37fa:	b922      	cbnz	r2, 80a3806 <_ZN5Print5printEmi+0xe>
 80a37fc:	6803      	ldr	r3, [r0, #0]
 80a37fe:	b2c9      	uxtb	r1, r1
 80a3800:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a3802:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a3804:	4718      	bx	r3
  else return printNumber(n, base);
 80a3806:	b2d2      	uxtb	r2, r2
}
 80a3808:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a380a:	f7ff bfd6 	b.w	80a37ba <_ZN5Print11printNumberEmh>

080a380e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a380e:	f7ff bff3 	b.w	80a37f8 <_ZN5Print5printEmi>

080a3812 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a3812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3816:	4607      	mov	r7, r0
 80a3818:	460e      	mov	r6, r1
  if (base == 0) {
 80a381a:	4615      	mov	r5, r2
 80a381c:	b92a      	cbnz	r2, 80a382a <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a381e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a3822:	6803      	ldr	r3, [r0, #0]
 80a3824:	b2c9      	uxtb	r1, r1
 80a3826:	689b      	ldr	r3, [r3, #8]
 80a3828:	4718      	bx	r3
  } else if (base == 10) {
 80a382a:	2a0a      	cmp	r2, #10
 80a382c:	d102      	bne.n	80a3834 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a382e:	2900      	cmp	r1, #0
 80a3830:	da01      	bge.n	80a3836 <_ZN5Print5printEli+0x24>
 80a3832:	e004      	b.n	80a383e <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a3834:	b2d2      	uxtb	r2, r2
  }
}
 80a3836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a383a:	f7ff bfbe 	b.w	80a37ba <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a383e:	212d      	movs	r1, #45	; 0x2d
 80a3840:	f7ff ffa2 	bl	80a3788 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a3844:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a3846:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a3848:	4271      	negs	r1, r6
 80a384a:	4638      	mov	r0, r7
 80a384c:	f7ff ffb5 	bl	80a37ba <_ZN5Print11printNumberEmh>
 80a3850:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a3852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3856 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a3856:	f7ff bfdc 	b.w	80a3812 <_ZN5Print5printEli>

080a385a <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a385a:	b538      	push	{r3, r4, r5, lr}
 80a385c:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a385e:	f7ff ffd8 	bl	80a3812 <_ZN5Print5printEli>
 80a3862:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a3864:	4628      	mov	r0, r5
 80a3866:	f7ff ff92 	bl	80a378e <_ZN5Print7printlnEv>
  return n;
}
 80a386a:	4420      	add	r0, r4
 80a386c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a3870 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a3870:	4a01      	ldr	r2, [pc, #4]	; (80a3878 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a3872:	4b02      	ldr	r3, [pc, #8]	; (80a387c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a3874:	601a      	str	r2, [r3, #0]
 80a3876:	4770      	bx	lr
 80a3878:	080a537f 	.word	0x080a537f
 80a387c:	20000428 	.word	0x20000428

080a3880 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a3880:	4b02      	ldr	r3, [pc, #8]	; (80a388c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a3882:	681a      	ldr	r2, [r3, #0]
 80a3884:	4b02      	ldr	r3, [pc, #8]	; (80a3890 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a3886:	601a      	str	r2, [r3, #0]
 80a3888:	4770      	bx	lr
 80a388a:	bf00      	nop
 80a388c:	20000360 	.word	0x20000360
 80a3890:	2000042c 	.word	0x2000042c

080a3894 <delay>:
  return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a3894:	2100      	movs	r1, #0
 80a3896:	f7ff be21 	b.w	80a34dc <system_delay_ms>

080a389a <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 80a389a:	b510      	push	{r4, lr}
 80a389c:	4604      	mov	r4, r0
#include "core_hal.h"
#include "rgbled.h"

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 80a389e:	f7ff fe05 	bl	80a34ac <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if(override == controlled())
 80a38a2:	4284      	cmp	r4, r0
 80a38a4:	d008      	beq.n	80a38b8 <_ZN8RGBClass7controlEb+0x1e>
            return;
    else if (override)
 80a38a6:	b11c      	cbz	r4, 80a38b0 <_ZN8RGBClass7controlEb+0x16>
            LED_Signaling_Start();
    else
            LED_Signaling_Stop();
}
 80a38a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if(override == controlled())
            return;
    else if (override)
            LED_Signaling_Start();
 80a38ac:	f7ff bdee 	b.w	80a348c <LED_Signaling_Start>
    else
            LED_Signaling_Stop();
}
 80a38b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if(override == controlled())
            return;
    else if (override)
            LED_Signaling_Start();
    else
            LED_Signaling_Stop();
 80a38b4:	f7ff bdf2 	b.w	80a349c <LED_Signaling_Stop>
 80a38b8:	bd10      	pop	{r4, pc}

080a38ba <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
 80a38ba:	b570      	push	{r4, r5, r6, lr}
 80a38bc:	4605      	mov	r5, r0
 80a38be:	460e      	mov	r6, r1
 80a38c0:	4614      	mov	r4, r2
#include "core_hal.h"
#include "rgbled.h"

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 80a38c2:	f7ff fdf3 	bl	80a34ac <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled())
 80a38c6:	b150      	cbz	r0, 80a38de <_ZN8RGBClass5colorEiii+0x24>
            return;

    LED_SetSignalingColor(red << 16 | green << 8 | blue);
 80a38c8:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
 80a38cc:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80a38d0:	f7ff fdd4 	bl	80a347c <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
 80a38d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled())
            return;

    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
 80a38d8:	20e7      	movs	r0, #231	; 0xe7
 80a38da:	f7ff bdef 	b.w	80a34bc <LED_On>
 80a38de:	bd70      	pop	{r4, r5, r6, pc}

080a38e0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a38e0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a38e2:	4b14      	ldr	r3, [pc, #80]	; (80a3934 <serialEventRun+0x54>)
 80a38e4:	b133      	cbz	r3, 80a38f4 <serialEventRun+0x14>
 80a38e6:	f000 f921 	bl	80a3b2c <_Z16_fetch_usbserialv>
 80a38ea:	6803      	ldr	r3, [r0, #0]
 80a38ec:	691b      	ldr	r3, [r3, #16]
 80a38ee:	4798      	blx	r3
 80a38f0:	2800      	cmp	r0, #0
 80a38f2:	dc16      	bgt.n	80a3922 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a38f4:	4b10      	ldr	r3, [pc, #64]	; (80a3938 <serialEventRun+0x58>)
 80a38f6:	b133      	cbz	r3, 80a3906 <serialEventRun+0x26>
 80a38f8:	f000 f9e6 	bl	80a3cc8 <_Z22__fetch_global_Serial1v>
 80a38fc:	6803      	ldr	r3, [r0, #0]
 80a38fe:	691b      	ldr	r3, [r3, #16]
 80a3900:	4798      	blx	r3
 80a3902:	2800      	cmp	r0, #0
 80a3904:	dc10      	bgt.n	80a3928 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a3906:	4b0d      	ldr	r3, [pc, #52]	; (80a393c <serialEventRun+0x5c>)
 80a3908:	b10b      	cbz	r3, 80a390e <serialEventRun+0x2e>
 80a390a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a390e:	4b0c      	ldr	r3, [pc, #48]	; (80a3940 <serialEventRun+0x60>)
 80a3910:	b17b      	cbz	r3, 80a3932 <serialEventRun+0x52>
 80a3912:	f000 f947 	bl	80a3ba4 <_Z17_fetch_usbserial1v>
 80a3916:	6803      	ldr	r3, [r0, #0]
 80a3918:	691b      	ldr	r3, [r3, #16]
 80a391a:	4798      	blx	r3
 80a391c:	2800      	cmp	r0, #0
 80a391e:	dc06      	bgt.n	80a392e <serialEventRun+0x4e>
 80a3920:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a3922:	f3af 8000 	nop.w
 80a3926:	e7e5      	b.n	80a38f4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a3928:	f3af 8000 	nop.w
 80a392c:	e7eb      	b.n	80a3906 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a392e:	f3af 8000 	nop.w
 80a3932:	bd08      	pop	{r3, pc}
	...

080a3944 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a3944:	b508      	push	{r3, lr}
	serialEventRun();
 80a3946:	f7ff ffcb 	bl	80a38e0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a394a:	f7ff fc9d 	bl	80a3288 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a394e:	4b01      	ldr	r3, [pc, #4]	; (80a3954 <_post_loop+0x10>)
 80a3950:	6018      	str	r0, [r3, #0]
 80a3952:	bd08      	pop	{r3, pc}
 80a3954:	200008b8 	.word	0x200008b8

080a3958 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a3958:	4802      	ldr	r0, [pc, #8]	; (80a3964 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a395a:	4a03      	ldr	r2, [pc, #12]	; (80a3968 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a395c:	4903      	ldr	r1, [pc, #12]	; (80a396c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a395e:	1a12      	subs	r2, r2, r0
 80a3960:	f001 bc04 	b.w	80a516c <memcpy>
 80a3964:	40024000 	.word	0x40024000
 80a3968:	40024004 	.word	0x40024004
 80a396c:	080a54b0 	.word	0x080a54b0

080a3970 <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80a3970:	2000      	movs	r0, #0
 80a3972:	4770      	bx	lr

080a3974 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a3974:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80a3976:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a3978:	4604      	mov	r4, r0
    switch (req->type) {
 80a397a:	2b0a      	cmp	r3, #10
 80a397c:	d00e      	beq.n	80a399c <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 80a397e:	2b50      	cmp	r3, #80	; 0x50
 80a3980:	d11c      	bne.n	80a39bc <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80a3982:	4b10      	ldr	r3, [pc, #64]	; (80a39c4 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80a3984:	681d      	ldr	r5, [r3, #0]
 80a3986:	b1cd      	cbz	r5, 80a39bc <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 80a3988:	7d03      	ldrb	r3, [r0, #20]
 80a398a:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a398e:	9300      	str	r3, [sp, #0]
 80a3990:	68c2      	ldr	r2, [r0, #12]
 80a3992:	f100 0310 	add.w	r3, r0, #16
 80a3996:	6880      	ldr	r0, [r0, #8]
 80a3998:	47a8      	blx	r5
 80a399a:	e007      	b.n	80a39ac <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80a399c:	f100 0310 	add.w	r3, r0, #16
 80a39a0:	68c2      	ldr	r2, [r0, #12]
 80a39a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a39a6:	6880      	ldr	r0, [r0, #8]
 80a39a8:	f7ff ffe2 	bl	80a3970 <_Z26usb_request_custom_handlerPcjjPj>
 80a39ac:	b130      	cbz	r0, 80a39bc <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80a39ae:	2200      	movs	r2, #0
 80a39b0:	4620      	mov	r0, r4
 80a39b2:	4611      	mov	r1, r2
 80a39b4:	f7ff fdaa 	bl	80a350c <system_set_usb_request_result>
        return true;
 80a39b8:	2001      	movs	r0, #1
 80a39ba:	e000      	b.n	80a39be <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80a39bc:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80a39be:	b003      	add	sp, #12
 80a39c0:	bd30      	pop	{r4, r5, pc}
 80a39c2:	bf00      	nop
 80a39c4:	20000430 	.word	0x20000430

080a39c8 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80a39c8:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a39ca:	4c0c      	ldr	r4, [pc, #48]	; (80a39fc <module_user_init_hook+0x34>)
 80a39cc:	4d0c      	ldr	r5, [pc, #48]	; (80a3a00 <module_user_init_hook+0x38>)
 80a39ce:	6823      	ldr	r3, [r4, #0]
 80a39d0:	42ab      	cmp	r3, r5
 80a39d2:	4b0c      	ldr	r3, [pc, #48]	; (80a3a04 <module_user_init_hook+0x3c>)
 80a39d4:	bf0c      	ite	eq
 80a39d6:	2201      	moveq	r2, #1
 80a39d8:	2200      	movne	r2, #0
 80a39da:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a39dc:	d002      	beq.n	80a39e4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a39de:	f7ff ffbb 	bl	80a3958 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a39e2:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a39e4:	4b08      	ldr	r3, [pc, #32]	; (80a3a08 <module_user_init_hook+0x40>)
 80a39e6:	b11b      	cbz	r3, 80a39f0 <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a39e8:	f7ff fc46 	bl	80a3278 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a39ec:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80a39f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80a39f4:	2100      	movs	r1, #0
 80a39f6:	4805      	ldr	r0, [pc, #20]	; (80a3a0c <module_user_init_hook+0x44>)
 80a39f8:	f7ff bd80 	b.w	80a34fc <system_set_usb_request_app_handler>
 80a39fc:	40024000 	.word	0x40024000
 80a3a00:	9a271c1e 	.word	0x9a271c1e
 80a3a04:	20000434 	.word	0x20000434
 80a3a08:	00000000 	.word	0x00000000
 80a3a0c:	080a3975 	.word	0x080a3975

080a3a10 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a3a10:	4770      	bx	lr

080a3a12 <_ZN9IPAddressD0Ev>:
 80a3a12:	b510      	push	{r4, lr}
 80a3a14:	4604      	mov	r4, r0
 80a3a16:	f7fc fb42 	bl	80a009e <_ZdlPv>
 80a3a1a:	4620      	mov	r0, r4
 80a3a1c:	bd10      	pop	{r4, pc}

080a3a1e <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a3a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3a20:	460f      	mov	r7, r1
 80a3a22:	f100 0608 	add.w	r6, r0, #8
 80a3a26:	1d05      	adds	r5, r0, #4
 80a3a28:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3a2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a3a2e:	220a      	movs	r2, #10
 80a3a30:	4638      	mov	r0, r7
 80a3a32:	f7ff feec 	bl	80a380e <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3a36:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3a38:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3a3a:	d007      	beq.n	80a3a4c <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a3a3c:	2c00      	cmp	r4, #0
 80a3a3e:	d0f4      	beq.n	80a3a2a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a3a40:	212e      	movs	r1, #46	; 0x2e
 80a3a42:	4638      	mov	r0, r7
 80a3a44:	f7ff fea0 	bl	80a3788 <_ZN5Print5printEc>
 80a3a48:	4404      	add	r4, r0
 80a3a4a:	e7ee      	b.n	80a3a2a <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a3a4c:	4620      	mov	r0, r4
 80a3a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3a50 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a3a50:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a3a52:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a3a56:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a3a5a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a3a5e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a3a62:	2304      	movs	r3, #4
 80a3a64:	6041      	str	r1, [r0, #4]
 80a3a66:	7503      	strb	r3, [r0, #20]
 80a3a68:	bd10      	pop	{r4, pc}
	...

080a3a6c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a3a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a3a6e:	4d04      	ldr	r5, [pc, #16]	; (80a3a80 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a3a70:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a3a72:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a3a76:	9500      	str	r5, [sp, #0]
 80a3a78:	f7ff ffea 	bl	80a3a50 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a3a7c:	b003      	add	sp, #12
 80a3a7e:	bd30      	pop	{r4, r5, pc}
 80a3a80:	080a53dc 	.word	0x080a53dc

080a3a84 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3a84:	7441      	strb	r1, [r0, #17]
 80a3a86:	4770      	bx	lr

080a3a88 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a3a88:	4770      	bx	lr

080a3a8a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a3a8a:	2100      	movs	r1, #0
 80a3a8c:	7c00      	ldrb	r0, [r0, #16]
 80a3a8e:	f7ff bcdd 	b.w	80a344c <HAL_USB_USART_Receive_Data>

080a3a92 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a3a92:	2101      	movs	r1, #1
 80a3a94:	7c00      	ldrb	r0, [r0, #16]
 80a3a96:	f7ff bcd9 	b.w	80a344c <HAL_USB_USART_Receive_Data>

080a3a9a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a3a9a:	7c00      	ldrb	r0, [r0, #16]
 80a3a9c:	f7ff bcce 	b.w	80a343c <HAL_USB_USART_Available_Data_For_Write>

080a3aa0 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a3aa0:	7c00      	ldrb	r0, [r0, #16]
 80a3aa2:	f7ff bcc3 	b.w	80a342c <HAL_USB_USART_Available_Data>

080a3aa6 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a3aa6:	b538      	push	{r3, r4, r5, lr}
 80a3aa8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3aaa:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a3aac:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3aae:	f7ff fcc5 	bl	80a343c <HAL_USB_USART_Available_Data_For_Write>
 80a3ab2:	2800      	cmp	r0, #0
 80a3ab4:	dc01      	bgt.n	80a3aba <_ZN9USBSerial5writeEh+0x14>
 80a3ab6:	7c60      	ldrb	r0, [r4, #17]
 80a3ab8:	b120      	cbz	r0, 80a3ac4 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a3aba:	4629      	mov	r1, r5
 80a3abc:	7c20      	ldrb	r0, [r4, #16]
 80a3abe:	f7ff fccd 	bl	80a345c <HAL_USB_USART_Send_Data>
    return 1;
 80a3ac2:	2001      	movs	r0, #1
  }
  return 0;
}
 80a3ac4:	bd38      	pop	{r3, r4, r5, pc}

080a3ac6 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a3ac6:	7c00      	ldrb	r0, [r0, #16]
 80a3ac8:	f7ff bcd0 	b.w	80a346c <HAL_USB_USART_Flush_Data>

080a3acc <_ZN9USBSerialD0Ev>:
 80a3acc:	b510      	push	{r4, lr}
 80a3ace:	4604      	mov	r4, r0
 80a3ad0:	f7fc fae5 	bl	80a009e <_ZdlPv>
 80a3ad4:	4620      	mov	r0, r4
 80a3ad6:	bd10      	pop	{r4, pc}

080a3ad8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3ad8:	b510      	push	{r4, lr}
 80a3ada:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a3adc:	2300      	movs	r3, #0
 80a3ade:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3ae0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3ae4:	60a3      	str	r3, [r4, #8]
 80a3ae6:	4b05      	ldr	r3, [pc, #20]	; (80a3afc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a3ae8:	4608      	mov	r0, r1
 80a3aea:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a3aec:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a3aee:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a3af0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a3af2:	4611      	mov	r1, r2
 80a3af4:	f7ff fc92 	bl	80a341c <HAL_USB_USART_Init>
}
 80a3af8:	4620      	mov	r0, r4
 80a3afa:	bd10      	pop	{r4, pc}
 80a3afc:	080a53f0 	.word	0x080a53f0

080a3b00 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a3b00:	b510      	push	{r4, lr}
 80a3b02:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3b04:	2214      	movs	r2, #20
 80a3b06:	2100      	movs	r1, #0
 80a3b08:	f001 fb3b 	bl	80a5182 <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3b0c:	4b05      	ldr	r3, [pc, #20]	; (80a3b24 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3b0e:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3b10:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a3b12:	4b05      	ldr	r3, [pc, #20]	; (80a3b28 <_Z19acquireSerialBufferv+0x28>)
 80a3b14:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3b16:	f240 1301 	movw	r3, #257	; 0x101
 80a3b1a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3b1c:	2381      	movs	r3, #129	; 0x81
 80a3b1e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3b20:	bd10      	pop	{r4, pc}
 80a3b22:	bf00      	nop
 80a3b24:	200004bd 	.word	0x200004bd
 80a3b28:	2000043c 	.word	0x2000043c

080a3b2c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a3b2c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3b2e:	4d0e      	ldr	r5, [pc, #56]	; (80a3b68 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a3b30:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a3b32:	a801      	add	r0, sp, #4
 80a3b34:	f7ff ffe4 	bl	80a3b00 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3b38:	6829      	ldr	r1, [r5, #0]
 80a3b3a:	f011 0401 	ands.w	r4, r1, #1
 80a3b3e:	d110      	bne.n	80a3b62 <_Z16_fetch_usbserialv+0x36>
 80a3b40:	4628      	mov	r0, r5
 80a3b42:	f7fc faae 	bl	80a00a2 <__cxa_guard_acquire>
 80a3b46:	b160      	cbz	r0, 80a3b62 <_Z16_fetch_usbserialv+0x36>
 80a3b48:	aa01      	add	r2, sp, #4
 80a3b4a:	4621      	mov	r1, r4
 80a3b4c:	4807      	ldr	r0, [pc, #28]	; (80a3b6c <_Z16_fetch_usbserialv+0x40>)
 80a3b4e:	f7ff ffc3 	bl	80a3ad8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3b52:	4628      	mov	r0, r5
 80a3b54:	f7fc faaa 	bl	80a00ac <__cxa_guard_release>
 80a3b58:	4a05      	ldr	r2, [pc, #20]	; (80a3b70 <_Z16_fetch_usbserialv+0x44>)
 80a3b5a:	4906      	ldr	r1, [pc, #24]	; (80a3b74 <_Z16_fetch_usbserialv+0x48>)
 80a3b5c:	4803      	ldr	r0, [pc, #12]	; (80a3b6c <_Z16_fetch_usbserialv+0x40>)
 80a3b5e:	f000 fa13 	bl	80a3f88 <__aeabi_atexit>
	return _usbserial;
}
 80a3b62:	4802      	ldr	r0, [pc, #8]	; (80a3b6c <_Z16_fetch_usbserialv+0x40>)
 80a3b64:	b007      	add	sp, #28
 80a3b66:	bd30      	pop	{r4, r5, pc}
 80a3b68:	20000438 	.word	0x20000438
 80a3b6c:	200005c0 	.word	0x200005c0
 80a3b70:	20000364 	.word	0x20000364
 80a3b74:	080a3a89 	.word	0x080a3a89

080a3b78 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a3b78:	b510      	push	{r4, lr}
 80a3b7a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3b7c:	2214      	movs	r2, #20
 80a3b7e:	2100      	movs	r1, #0
 80a3b80:	f001 faff 	bl	80a5182 <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3b84:	4b05      	ldr	r3, [pc, #20]	; (80a3b9c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3b86:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3b88:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a3b8a:	4b05      	ldr	r3, [pc, #20]	; (80a3ba0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a3b8c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3b8e:	f240 1301 	movw	r3, #257	; 0x101
 80a3b92:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3b94:	2381      	movs	r3, #129	; 0x81
 80a3b96:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3b98:	bd10      	pop	{r4, pc}
 80a3b9a:	bf00      	nop
 80a3b9c:	20000670 	.word	0x20000670
 80a3ba0:	200005d8 	.word	0x200005d8

080a3ba4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3ba4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3ba6:	4c0e      	ldr	r4, [pc, #56]	; (80a3be0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a3ba8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a3baa:	a801      	add	r0, sp, #4
 80a3bac:	f7ff ffe4 	bl	80a3b78 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3bb0:	6823      	ldr	r3, [r4, #0]
 80a3bb2:	07db      	lsls	r3, r3, #31
 80a3bb4:	d410      	bmi.n	80a3bd8 <_Z17_fetch_usbserial1v+0x34>
 80a3bb6:	4620      	mov	r0, r4
 80a3bb8:	f7fc fa73 	bl	80a00a2 <__cxa_guard_acquire>
 80a3bbc:	b160      	cbz	r0, 80a3bd8 <_Z17_fetch_usbserial1v+0x34>
 80a3bbe:	aa01      	add	r2, sp, #4
 80a3bc0:	2101      	movs	r1, #1
 80a3bc2:	4808      	ldr	r0, [pc, #32]	; (80a3be4 <_Z17_fetch_usbserial1v+0x40>)
 80a3bc4:	f7ff ff88 	bl	80a3ad8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3bc8:	4620      	mov	r0, r4
 80a3bca:	f7fc fa6f 	bl	80a00ac <__cxa_guard_release>
 80a3bce:	4a06      	ldr	r2, [pc, #24]	; (80a3be8 <_Z17_fetch_usbserial1v+0x44>)
 80a3bd0:	4906      	ldr	r1, [pc, #24]	; (80a3bec <_Z17_fetch_usbserial1v+0x48>)
 80a3bd2:	4804      	ldr	r0, [pc, #16]	; (80a3be4 <_Z17_fetch_usbserial1v+0x40>)
 80a3bd4:	f000 f9d8 	bl	80a3f88 <__aeabi_atexit>
  return _usbserial1;
}
 80a3bd8:	4802      	ldr	r0, [pc, #8]	; (80a3be4 <_Z17_fetch_usbserial1v+0x40>)
 80a3bda:	b006      	add	sp, #24
 80a3bdc:	bd10      	pop	{r4, pc}
 80a3bde:	bf00      	nop
 80a3be0:	200005d4 	.word	0x200005d4
 80a3be4:	2000065c 	.word	0x2000065c
 80a3be8:	20000364 	.word	0x20000364
 80a3bec:	080a3a89 	.word	0x080a3a89

080a3bf0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a3bf0:	4700      	bx	r0
	...

080a3bf4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a3bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3bf6:	461c      	mov	r4, r3
 80a3bf8:	b085      	sub	sp, #20
 80a3bfa:	4605      	mov	r5, r0
 80a3bfc:	460e      	mov	r6, r1
 80a3bfe:	4617      	mov	r7, r2
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a3c00:	f7ff fb22 	bl	80a3248 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80a3c04:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80a3c06:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a3c08:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a3c0c:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a3c0e:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a3c12:	bfb4      	ite	lt
 80a3c14:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a3c16:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a3c1a:	4628      	mov	r0, r5
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a3c1c:	bfa4      	itt	ge
 80a3c1e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a3c22:	ab03      	addge	r3, sp, #12
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a3c24:	9300      	str	r3, [sp, #0]
 80a3c26:	4632      	mov	r2, r6
 80a3c28:	463b      	mov	r3, r7
 80a3c2a:	4904      	ldr	r1, [pc, #16]	; (80a3c3c <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a3c2c:	bfa8      	it	ge
 80a3c2e:	f88d 400d 	strbge.w	r4, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a3c32:	f7ff fb01 	bl	80a3238 <HAL_Interrupts_Attach>
    return true;
}
 80a3c36:	2001      	movs	r0, #1
 80a3c38:	b005      	add	sp, #20
 80a3c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3c3c:	080a3bf1 	.word	0x080a3bf1

080a3c40 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a3c40:	4770      	bx	lr

080a3c42 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3c42:	7441      	strb	r1, [r0, #17]
 80a3c44:	4770      	bx	lr

080a3c46 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a3c46:	7c00      	ldrb	r0, [r0, #16]
 80a3c48:	f7ff bb66 	b.w	80a3318 <HAL_USART_Available_Data_For_Write>

080a3c4c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a3c4c:	7c00      	ldrb	r0, [r0, #16]
 80a3c4e:	f7ff bb3b 	b.w	80a32c8 <HAL_USART_Available_Data>

080a3c52 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a3c52:	7c00      	ldrb	r0, [r0, #16]
 80a3c54:	f7ff bb48 	b.w	80a32e8 <HAL_USART_Peek_Data>

080a3c58 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a3c58:	7c00      	ldrb	r0, [r0, #16]
 80a3c5a:	f7ff bb3d 	b.w	80a32d8 <HAL_USART_Read_Data>

080a3c5e <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a3c5e:	7c00      	ldrb	r0, [r0, #16]
 80a3c60:	f7ff bb4a 	b.w	80a32f8 <HAL_USART_Flush_Data>

080a3c64 <_ZN11USARTSerialD0Ev>:
 80a3c64:	b510      	push	{r4, lr}
 80a3c66:	4604      	mov	r4, r0
 80a3c68:	f7fc fa19 	bl	80a009e <_ZdlPv>
 80a3c6c:	4620      	mov	r0, r4
 80a3c6e:	bd10      	pop	{r4, pc}

080a3c70 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3c70:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3c72:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a3c74:	4604      	mov	r4, r0
 80a3c76:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3c78:	b925      	cbnz	r5, 80a3c84 <_ZN11USARTSerial5writeEh+0x14>
 80a3c7a:	7c00      	ldrb	r0, [r0, #16]
 80a3c7c:	f7ff fb4c 	bl	80a3318 <HAL_USART_Available_Data_For_Write>
 80a3c80:	2800      	cmp	r0, #0
 80a3c82:	dd05      	ble.n	80a3c90 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3c84:	4631      	mov	r1, r6
 80a3c86:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a3c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3c8c:	f7ff bb14 	b.w	80a32b8 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a3c90:	4628      	mov	r0, r5
 80a3c92:	bd70      	pop	{r4, r5, r6, pc}

080a3c94 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3c94:	b510      	push	{r4, lr}
 80a3c96:	4604      	mov	r4, r0
 80a3c98:	4608      	mov	r0, r1
 80a3c9a:	4611      	mov	r1, r2
 80a3c9c:	2200      	movs	r2, #0
 80a3c9e:	6062      	str	r2, [r4, #4]
 80a3ca0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3ca4:	60a2      	str	r2, [r4, #8]
 80a3ca6:	4a05      	ldr	r2, [pc, #20]	; (80a3cbc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a3ca8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3caa:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a3cac:	2201      	movs	r2, #1
 80a3cae:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a3cb0:	461a      	mov	r2, r3
 80a3cb2:	f7ff faf9 	bl	80a32a8 <HAL_USART_Init>
}
 80a3cb6:	4620      	mov	r0, r4
 80a3cb8:	bd10      	pop	{r4, pc}
 80a3cba:	bf00      	nop
 80a3cbc:	080a5420 	.word	0x080a5420

080a3cc0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a3cc0:	7c00      	ldrb	r0, [r0, #16]
 80a3cc2:	f7ff bb21 	b.w	80a3308 <HAL_USART_Is_Enabled>
	...

080a3cc8 <_Z22__fetch_global_Serial1v>:
// Preinstantiate Objects //////////////////////////////////////////////////////
static Ring_Buffer serial1_rx_buffer;
static Ring_Buffer serial1_tx_buffer;

USARTSerial& __fetch_global_Serial1()
{
 80a3cc8:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a3cca:	4d0c      	ldr	r5, [pc, #48]	; (80a3cfc <_Z22__fetch_global_Serial1v+0x34>)
 80a3ccc:	6829      	ldr	r1, [r5, #0]
 80a3cce:	f011 0401 	ands.w	r4, r1, #1
 80a3cd2:	d111      	bne.n	80a3cf8 <_Z22__fetch_global_Serial1v+0x30>
 80a3cd4:	4628      	mov	r0, r5
 80a3cd6:	f7fc f9e4 	bl	80a00a2 <__cxa_guard_acquire>
 80a3cda:	b168      	cbz	r0, 80a3cf8 <_Z22__fetch_global_Serial1v+0x30>
 80a3cdc:	4a08      	ldr	r2, [pc, #32]	; (80a3d00 <_Z22__fetch_global_Serial1v+0x38>)
 80a3cde:	4621      	mov	r1, r4
 80a3ce0:	4b08      	ldr	r3, [pc, #32]	; (80a3d04 <_Z22__fetch_global_Serial1v+0x3c>)
 80a3ce2:	4809      	ldr	r0, [pc, #36]	; (80a3d08 <_Z22__fetch_global_Serial1v+0x40>)
 80a3ce4:	f7ff ffd6 	bl	80a3c94 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a3ce8:	4628      	mov	r0, r5
 80a3cea:	f7fc f9df 	bl	80a00ac <__cxa_guard_release>
 80a3cee:	4a07      	ldr	r2, [pc, #28]	; (80a3d0c <_Z22__fetch_global_Serial1v+0x44>)
 80a3cf0:	4907      	ldr	r1, [pc, #28]	; (80a3d10 <_Z22__fetch_global_Serial1v+0x48>)
 80a3cf2:	4805      	ldr	r0, [pc, #20]	; (80a3d08 <_Z22__fetch_global_Serial1v+0x40>)
 80a3cf4:	f000 f948 	bl	80a3f88 <__aeabi_atexit>
	return serial1;
}
 80a3cf8:	4803      	ldr	r0, [pc, #12]	; (80a3d08 <_Z22__fetch_global_Serial1v+0x40>)
 80a3cfa:	bd38      	pop	{r3, r4, r5, pc}
 80a3cfc:	2000080c 	.word	0x2000080c
 80a3d00:	20000810 	.word	0x20000810
 80a3d04:	20000788 	.word	0x20000788
 80a3d08:	20000774 	.word	0x20000774
 80a3d0c:	20000364 	.word	0x20000364
 80a3d10:	080a3c41 	.word	0x080a3c41

080a3d14 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a3d14:	4770      	bx	lr

080a3d16 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a3d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3d18:	4606      	mov	r6, r0
 80a3d1a:	4615      	mov	r5, r2
 80a3d1c:	460c      	mov	r4, r1
 80a3d1e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3d20:	42bc      	cmp	r4, r7
 80a3d22:	d006      	beq.n	80a3d32 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a3d24:	6833      	ldr	r3, [r6, #0]
 80a3d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a3d2a:	689b      	ldr	r3, [r3, #8]
 80a3d2c:	4630      	mov	r0, r6
 80a3d2e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3d30:	e7f6      	b.n	80a3d20 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a3d32:	4628      	mov	r0, r5
 80a3d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3d36 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a3d36:	2200      	movs	r2, #0
 80a3d38:	7c00      	ldrb	r0, [r0, #16]
 80a3d3a:	f7ff bb1d 	b.w	80a3378 <HAL_I2C_Write_Data>

080a3d3e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a3d3e:	2100      	movs	r1, #0
 80a3d40:	7c00      	ldrb	r0, [r0, #16]
 80a3d42:	f7ff bb21 	b.w	80a3388 <HAL_I2C_Available_Data>

080a3d46 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a3d46:	2100      	movs	r1, #0
 80a3d48:	7c00      	ldrb	r0, [r0, #16]
 80a3d4a:	f7ff bb25 	b.w	80a3398 <HAL_I2C_Read_Data>

080a3d4e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a3d4e:	2100      	movs	r1, #0
 80a3d50:	7c00      	ldrb	r0, [r0, #16]
 80a3d52:	f7ff bb29 	b.w	80a33a8 <HAL_I2C_Peek_Data>

080a3d56 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a3d56:	2100      	movs	r1, #0
 80a3d58:	7c00      	ldrb	r0, [r0, #16]
 80a3d5a:	f7ff bb2d 	b.w	80a33b8 <HAL_I2C_Flush_Data>

080a3d5e <_ZN7TwoWireD0Ev>:
 80a3d5e:	b510      	push	{r4, lr}
 80a3d60:	4604      	mov	r4, r0
 80a3d62:	f7fc f99c 	bl	80a009e <_ZdlPv>
 80a3d66:	4620      	mov	r0, r4
 80a3d68:	bd10      	pop	{r4, pc}
	...

080a3d6c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a3d6c:	b510      	push	{r4, lr}
 80a3d6e:	4604      	mov	r4, r0
 80a3d70:	4608      	mov	r0, r1
 80a3d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3d76:	60a3      	str	r3, [r4, #8]
 80a3d78:	4b04      	ldr	r3, [pc, #16]	; (80a3d8c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a3d7a:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a3d7c:	7420      	strb	r0, [r4, #16]
 80a3d7e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a3d80:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a3d82:	f7ff fb29 	bl	80a33d8 <HAL_I2C_Init>

}
 80a3d86:	4620      	mov	r0, r4
 80a3d88:	bd10      	pop	{r4, pc}
 80a3d8a:	bf00      	nop
 80a3d8c:	080a5450 	.word	0x080a5450

080a3d90 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a3d90:	2200      	movs	r2, #0
 80a3d92:	7c00      	ldrb	r0, [r0, #16]
 80a3d94:	f7ff bac8 	b.w	80a3328 <HAL_I2C_Set_Speed>

080a3d98 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a3d98:	2300      	movs	r3, #0
 80a3d9a:	461a      	mov	r2, r3
 80a3d9c:	4619      	mov	r1, r3
 80a3d9e:	7c00      	ldrb	r0, [r0, #16]
 80a3da0:	f7ff baca 	b.w	80a3338 <HAL_I2C_Begin>

080a3da4 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a3da4:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a3da6:	2400      	movs	r4, #0
 80a3da8:	7c00      	ldrb	r0, [r0, #16]
 80a3daa:	9400      	str	r4, [sp, #0]
 80a3dac:	f7ff facc 	bl	80a3348 <HAL_I2C_Request_Data>
  return result;
}
 80a3db0:	b2c0      	uxtb	r0, r0
 80a3db2:	b002      	add	sp, #8
 80a3db4:	bd10      	pop	{r4, pc}

080a3db6 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a3db6:	2301      	movs	r3, #1
 80a3db8:	f7ff bff4 	b.w	80a3da4 <_ZN7TwoWire11requestFromEhhh>

080a3dbc <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a3dbc:	2301      	movs	r3, #1
 80a3dbe:	b2d2      	uxtb	r2, r2
 80a3dc0:	b2c9      	uxtb	r1, r1
 80a3dc2:	f7ff bfef 	b.w	80a3da4 <_ZN7TwoWire11requestFromEhhh>

080a3dc6 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a3dc6:	2200      	movs	r2, #0
 80a3dc8:	7c00      	ldrb	r0, [r0, #16]
 80a3dca:	f7ff bac5 	b.w	80a3358 <HAL_I2C_Begin_Transmission>

080a3dce <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a3dce:	2200      	movs	r2, #0
 80a3dd0:	7c00      	ldrb	r0, [r0, #16]
 80a3dd2:	f7ff bac9 	b.w	80a3368 <HAL_I2C_End_Transmission>

080a3dd6 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a3dd6:	2101      	movs	r1, #1
 80a3dd8:	f7ff bff9 	b.w	80a3dce <_ZN7TwoWire15endTransmissionEh>

080a3ddc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a3ddc:	2100      	movs	r1, #0
 80a3dde:	7c00      	ldrb	r0, [r0, #16]
 80a3de0:	f7ff baf2 	b.w	80a33c8 <HAL_I2C_Is_Enabled>

080a3de4 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a3de4:	4770      	bx	lr

080a3de6 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a3de6:	2200      	movs	r2, #0
 80a3de8:	4611      	mov	r1, r2
 80a3dea:	4610      	mov	r0, r2
 80a3dec:	f7ff bb96 	b.w	80a351c <network_ready>

080a3df0 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a3df0:	4803      	ldr	r0, [pc, #12]	; (80a3e00 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a3df2:	4b04      	ldr	r3, [pc, #16]	; (80a3e04 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a3df4:	4a04      	ldr	r2, [pc, #16]	; (80a3e08 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a3df6:	4905      	ldr	r1, [pc, #20]	; (80a3e0c <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a3df8:	6003      	str	r3, [r0, #0]
 80a3dfa:	f000 b8c5 	b.w	80a3f88 <__aeabi_atexit>
 80a3dfe:	bf00      	nop
 80a3e00:	20000894 	.word	0x20000894
 80a3e04:	080a5478 	.word	0x080a5478
 80a3e08:	20000364 	.word	0x20000364
 80a3e0c:	080a3de5 	.word	0x080a3de5

080a3e10 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a3e10:	b510      	push	{r4, lr}
 80a3e12:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a3e14:	480f      	ldr	r0, [pc, #60]	; (80a3e54 <pinAvailable+0x44>)
 80a3e16:	f7ff fbbd 	bl	80a3594 <_ZN8SPIClass9isEnabledEv>
 80a3e1a:	b128      	cbz	r0, 80a3e28 <pinAvailable+0x18>
 80a3e1c:	f1a4 030d 	sub.w	r3, r4, #13
 80a3e20:	2b02      	cmp	r3, #2
 80a3e22:	d801      	bhi.n	80a3e28 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a3e24:	2000      	movs	r0, #0
 80a3e26:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a3e28:	f000 f88e 	bl	80a3f48 <_Z19__fetch_global_Wirev>
 80a3e2c:	f7ff ffd6 	bl	80a3ddc <_ZN7TwoWire9isEnabledEv>
 80a3e30:	b108      	cbz	r0, 80a3e36 <pinAvailable+0x26>
 80a3e32:	2c01      	cmp	r4, #1
 80a3e34:	d9f6      	bls.n	80a3e24 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a3e36:	f7ff ff47 	bl	80a3cc8 <_Z22__fetch_global_Serial1v>
 80a3e3a:	f7ff ff41 	bl	80a3cc0 <_ZN11USARTSerial9isEnabledEv>
 80a3e3e:	b118      	cbz	r0, 80a3e48 <pinAvailable+0x38>
 80a3e40:	f1a4 0312 	sub.w	r3, r4, #18
 80a3e44:	2b01      	cmp	r3, #1
 80a3e46:	d9ed      	bls.n	80a3e24 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a3e48:	2c17      	cmp	r4, #23
 80a3e4a:	bf8c      	ite	hi
 80a3e4c:	2000      	movhi	r0, #0
 80a3e4e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a3e50:	bd10      	pop	{r4, pc}
 80a3e52:	bf00      	nop
 80a3e54:	20000898 	.word	0x20000898

080a3e58 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3e58:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a3e5a:	b538      	push	{r3, r4, r5, lr}
 80a3e5c:	4604      	mov	r4, r0
 80a3e5e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3e60:	d80a      	bhi.n	80a3e78 <pinMode+0x20>
 80a3e62:	29ff      	cmp	r1, #255	; 0xff
 80a3e64:	d008      	beq.n	80a3e78 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a3e66:	f7ff ffd3 	bl	80a3e10 <pinAvailable>
 80a3e6a:	b128      	cbz	r0, 80a3e78 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3e6c:	4629      	mov	r1, r5
 80a3e6e:	4620      	mov	r0, r4
}
 80a3e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3e74:	f7ff b9c0 	b.w	80a31f8 <HAL_Pin_Mode>
 80a3e78:	bd38      	pop	{r3, r4, r5, pc}

080a3e7a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3e7a:	b538      	push	{r3, r4, r5, lr}
 80a3e7c:	4604      	mov	r4, r0
 80a3e7e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3e80:	f7ff f9c2 	bl	80a3208 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3e84:	28ff      	cmp	r0, #255	; 0xff
 80a3e86:	d010      	beq.n	80a3eaa <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a3e88:	2806      	cmp	r0, #6
 80a3e8a:	d804      	bhi.n	80a3e96 <digitalWrite+0x1c>
 80a3e8c:	234d      	movs	r3, #77	; 0x4d
 80a3e8e:	fa23 f000 	lsr.w	r0, r3, r0
 80a3e92:	07c3      	lsls	r3, r0, #31
 80a3e94:	d409      	bmi.n	80a3eaa <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a3e96:	4620      	mov	r0, r4
 80a3e98:	f7ff ffba 	bl	80a3e10 <pinAvailable>
 80a3e9c:	b128      	cbz	r0, 80a3eaa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3e9e:	4629      	mov	r1, r5
 80a3ea0:	4620      	mov	r0, r4
}
 80a3ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3ea6:	f7ff b9b7 	b.w	80a3218 <HAL_GPIO_Write>
 80a3eaa:	bd38      	pop	{r3, r4, r5, pc}

080a3eac <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a3eac:	b510      	push	{r4, lr}
 80a3eae:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3eb0:	f7ff f9aa 	bl	80a3208 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a3eb4:	3804      	subs	r0, #4
 80a3eb6:	b2c0      	uxtb	r0, r0
 80a3eb8:	2801      	cmp	r0, #1
 80a3eba:	d908      	bls.n	80a3ece <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a3ebc:	4620      	mov	r0, r4
 80a3ebe:	f7ff ffa7 	bl	80a3e10 <pinAvailable>
 80a3ec2:	b120      	cbz	r0, 80a3ece <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a3ec4:	4620      	mov	r0, r4
}
 80a3ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a3eca:	f7ff b9ad 	b.w	80a3228 <HAL_GPIO_Read>
}
 80a3ece:	2000      	movs	r0, #0
 80a3ed0:	bd10      	pop	{r4, pc}
	...

080a3ed4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3ed4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3ed6:	4c0c      	ldr	r4, [pc, #48]	; (80a3f08 <_GLOBAL__sub_I_SPI+0x34>)
 80a3ed8:	4e0c      	ldr	r6, [pc, #48]	; (80a3f0c <_GLOBAL__sub_I_SPI+0x38>)
 80a3eda:	4d0d      	ldr	r5, [pc, #52]	; (80a3f10 <_GLOBAL__sub_I_SPI+0x3c>)
 80a3edc:	2100      	movs	r1, #0
 80a3ede:	4620      	mov	r0, r4
 80a3ee0:	f7ff fb44 	bl	80a356c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3ee4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3ee6:	4c0b      	ldr	r4, [pc, #44]	; (80a3f14 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3ee8:	4632      	mov	r2, r6
 80a3eea:	4629      	mov	r1, r5
 80a3eec:	f000 f84c 	bl	80a3f88 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3ef0:	2101      	movs	r1, #1
 80a3ef2:	4620      	mov	r0, r4
 80a3ef4:	f7ff fb3a 	bl	80a356c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3ef8:	4632      	mov	r2, r6
 80a3efa:	4629      	mov	r1, r5
 80a3efc:	4620      	mov	r0, r4
 80a3efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a3f02:	f000 b841 	b.w	80a3f88 <__aeabi_atexit>
 80a3f06:	bf00      	nop
 80a3f08:	20000898 	.word	0x20000898
 80a3f0c:	20000364 	.word	0x20000364
 80a3f10:	080a355d 	.word	0x080a355d
 80a3f14:	200008a8 	.word	0x200008a8

080a3f18 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3f18:	b513      	push	{r0, r1, r4, lr}
 80a3f1a:	4c08      	ldr	r4, [pc, #32]	; (80a3f3c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3f1c:	2300      	movs	r3, #0
 80a3f1e:	461a      	mov	r2, r3
 80a3f20:	4619      	mov	r1, r3
 80a3f22:	9300      	str	r3, [sp, #0]
 80a3f24:	4620      	mov	r0, r4
 80a3f26:	f7ff fda1 	bl	80a3a6c <_ZN9IPAddressC1Ehhhh>
 80a3f2a:	4620      	mov	r0, r4
 80a3f2c:	4a04      	ldr	r2, [pc, #16]	; (80a3f40 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3f2e:	4905      	ldr	r1, [pc, #20]	; (80a3f44 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3f30:	b002      	add	sp, #8
 80a3f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3f36:	f000 b827 	b.w	80a3f88 <__aeabi_atexit>
 80a3f3a:	bf00      	nop
 80a3f3c:	200008bc 	.word	0x200008bc
 80a3f40:	20000364 	.word	0x20000364
 80a3f44:	080a3a11 	.word	0x080a3a11

080a3f48 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a3f48:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a3f4a:	4d0b      	ldr	r5, [pc, #44]	; (80a3f78 <_Z19__fetch_global_Wirev+0x30>)
 80a3f4c:	6829      	ldr	r1, [r5, #0]
 80a3f4e:	f011 0401 	ands.w	r4, r1, #1
 80a3f52:	d10f      	bne.n	80a3f74 <_Z19__fetch_global_Wirev+0x2c>
 80a3f54:	4628      	mov	r0, r5
 80a3f56:	f7fc f8a4 	bl	80a00a2 <__cxa_guard_acquire>
 80a3f5a:	b158      	cbz	r0, 80a3f74 <_Z19__fetch_global_Wirev+0x2c>
 80a3f5c:	4621      	mov	r1, r4
 80a3f5e:	4807      	ldr	r0, [pc, #28]	; (80a3f7c <_Z19__fetch_global_Wirev+0x34>)
 80a3f60:	f7ff ff04 	bl	80a3d6c <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a3f64:	4628      	mov	r0, r5
 80a3f66:	f7fc f8a1 	bl	80a00ac <__cxa_guard_release>
 80a3f6a:	4a05      	ldr	r2, [pc, #20]	; (80a3f80 <_Z19__fetch_global_Wirev+0x38>)
 80a3f6c:	4905      	ldr	r1, [pc, #20]	; (80a3f84 <_Z19__fetch_global_Wirev+0x3c>)
 80a3f6e:	4803      	ldr	r0, [pc, #12]	; (80a3f7c <_Z19__fetch_global_Wirev+0x34>)
 80a3f70:	f000 f80a 	bl	80a3f88 <__aeabi_atexit>
	return wire;
}
 80a3f74:	4801      	ldr	r0, [pc, #4]	; (80a3f7c <_Z19__fetch_global_Wirev+0x34>)
 80a3f76:	bd38      	pop	{r3, r4, r5, pc}
 80a3f78:	200008d4 	.word	0x200008d4
 80a3f7c:	200008d8 	.word	0x200008d8
 80a3f80:	20000364 	.word	0x20000364
 80a3f84:	080a3d15 	.word	0x080a3d15

080a3f88 <__aeabi_atexit>:
 80a3f88:	460b      	mov	r3, r1
 80a3f8a:	4601      	mov	r1, r0
 80a3f8c:	4618      	mov	r0, r3
 80a3f8e:	f001 b8df 	b.w	80a5150 <__cxa_atexit>
	...

080a3f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3f94:	4b18      	ldr	r3, [pc, #96]	; (80a3ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3f96:	681a      	ldr	r2, [r3, #0]
 80a3f98:	07d1      	lsls	r1, r2, #31
 80a3f9a:	bf5c      	itt	pl
 80a3f9c:	2201      	movpl	r2, #1
 80a3f9e:	601a      	strpl	r2, [r3, #0]
 80a3fa0:	4b16      	ldr	r3, [pc, #88]	; (80a3ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3fa2:	681a      	ldr	r2, [r3, #0]
 80a3fa4:	07d2      	lsls	r2, r2, #31
 80a3fa6:	bf5c      	itt	pl
 80a3fa8:	2201      	movpl	r2, #1
 80a3faa:	601a      	strpl	r2, [r3, #0]
 80a3fac:	4b14      	ldr	r3, [pc, #80]	; (80a4000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3fae:	681a      	ldr	r2, [r3, #0]
 80a3fb0:	07d0      	lsls	r0, r2, #31
 80a3fb2:	bf5c      	itt	pl
 80a3fb4:	2201      	movpl	r2, #1
 80a3fb6:	601a      	strpl	r2, [r3, #0]
 80a3fb8:	4b12      	ldr	r3, [pc, #72]	; (80a4004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3fba:	681a      	ldr	r2, [r3, #0]
 80a3fbc:	07d1      	lsls	r1, r2, #31
 80a3fbe:	bf5c      	itt	pl
 80a3fc0:	2201      	movpl	r2, #1
 80a3fc2:	601a      	strpl	r2, [r3, #0]
 80a3fc4:	4b10      	ldr	r3, [pc, #64]	; (80a4008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3fc6:	681a      	ldr	r2, [r3, #0]
 80a3fc8:	07d2      	lsls	r2, r2, #31
 80a3fca:	bf5c      	itt	pl
 80a3fcc:	2201      	movpl	r2, #1
 80a3fce:	601a      	strpl	r2, [r3, #0]
 80a3fd0:	4b0e      	ldr	r3, [pc, #56]	; (80a400c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3fd2:	681a      	ldr	r2, [r3, #0]
 80a3fd4:	07d0      	lsls	r0, r2, #31
 80a3fd6:	bf5c      	itt	pl
 80a3fd8:	2201      	movpl	r2, #1
 80a3fda:	601a      	strpl	r2, [r3, #0]
 80a3fdc:	4b0c      	ldr	r3, [pc, #48]	; (80a4010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3fde:	681a      	ldr	r2, [r3, #0]
 80a3fe0:	07d1      	lsls	r1, r2, #31
 80a3fe2:	bf5c      	itt	pl
 80a3fe4:	2201      	movpl	r2, #1
 80a3fe6:	601a      	strpl	r2, [r3, #0]
 80a3fe8:	4b0a      	ldr	r3, [pc, #40]	; (80a4014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3fea:	681a      	ldr	r2, [r3, #0]
 80a3fec:	07d2      	lsls	r2, r2, #31
 80a3fee:	bf5c      	itt	pl
 80a3ff0:	2201      	movpl	r2, #1
 80a3ff2:	601a      	strpl	r2, [r3, #0]
 80a3ff4:	4770      	bx	lr
 80a3ff6:	bf00      	nop
 80a3ff8:	20000908 	.word	0x20000908
 80a3ffc:	20000904 	.word	0x20000904
 80a4000:	20000900 	.word	0x20000900
 80a4004:	200008fc 	.word	0x200008fc
 80a4008:	200008f8 	.word	0x200008f8
 80a400c:	200008f4 	.word	0x200008f4
 80a4010:	200008f0 	.word	0x200008f0
 80a4014:	200008ec 	.word	0x200008ec

080a4018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a4018:	4b24      	ldr	r3, [pc, #144]	; (80a40ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a401a:	681a      	ldr	r2, [r3, #0]
 80a401c:	07d0      	lsls	r0, r2, #31
 80a401e:	bf5c      	itt	pl
 80a4020:	2201      	movpl	r2, #1
 80a4022:	601a      	strpl	r2, [r3, #0]
 80a4024:	4b22      	ldr	r3, [pc, #136]	; (80a40b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a4026:	681a      	ldr	r2, [r3, #0]
 80a4028:	07d1      	lsls	r1, r2, #31
 80a402a:	bf5c      	itt	pl
 80a402c:	2201      	movpl	r2, #1
 80a402e:	601a      	strpl	r2, [r3, #0]
 80a4030:	4b20      	ldr	r3, [pc, #128]	; (80a40b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a4032:	681a      	ldr	r2, [r3, #0]
 80a4034:	07d2      	lsls	r2, r2, #31
 80a4036:	bf5c      	itt	pl
 80a4038:	2201      	movpl	r2, #1
 80a403a:	601a      	strpl	r2, [r3, #0]
 80a403c:	4b1e      	ldr	r3, [pc, #120]	; (80a40b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a403e:	681a      	ldr	r2, [r3, #0]
 80a4040:	07d0      	lsls	r0, r2, #31
 80a4042:	bf5c      	itt	pl
 80a4044:	2201      	movpl	r2, #1
 80a4046:	601a      	strpl	r2, [r3, #0]
 80a4048:	4b1c      	ldr	r3, [pc, #112]	; (80a40bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a404a:	681a      	ldr	r2, [r3, #0]
 80a404c:	07d1      	lsls	r1, r2, #31
 80a404e:	bf5c      	itt	pl
 80a4050:	2201      	movpl	r2, #1
 80a4052:	601a      	strpl	r2, [r3, #0]
 80a4054:	4b1a      	ldr	r3, [pc, #104]	; (80a40c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a4056:	681a      	ldr	r2, [r3, #0]
 80a4058:	07d2      	lsls	r2, r2, #31
 80a405a:	bf5c      	itt	pl
 80a405c:	2201      	movpl	r2, #1
 80a405e:	601a      	strpl	r2, [r3, #0]
 80a4060:	4b18      	ldr	r3, [pc, #96]	; (80a40c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a4062:	681a      	ldr	r2, [r3, #0]
 80a4064:	07d0      	lsls	r0, r2, #31
 80a4066:	bf5c      	itt	pl
 80a4068:	2201      	movpl	r2, #1
 80a406a:	601a      	strpl	r2, [r3, #0]
 80a406c:	4b16      	ldr	r3, [pc, #88]	; (80a40c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a406e:	681a      	ldr	r2, [r3, #0]
 80a4070:	07d1      	lsls	r1, r2, #31
 80a4072:	bf5c      	itt	pl
 80a4074:	2201      	movpl	r2, #1
 80a4076:	601a      	strpl	r2, [r3, #0]
 80a4078:	4b14      	ldr	r3, [pc, #80]	; (80a40cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a407a:	681a      	ldr	r2, [r3, #0]
 80a407c:	07d2      	lsls	r2, r2, #31
 80a407e:	bf5c      	itt	pl
 80a4080:	2201      	movpl	r2, #1
 80a4082:	601a      	strpl	r2, [r3, #0]
 80a4084:	4b12      	ldr	r3, [pc, #72]	; (80a40d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a4086:	681a      	ldr	r2, [r3, #0]
 80a4088:	07d0      	lsls	r0, r2, #31
 80a408a:	bf5c      	itt	pl
 80a408c:	2201      	movpl	r2, #1
 80a408e:	601a      	strpl	r2, [r3, #0]
 80a4090:	4b10      	ldr	r3, [pc, #64]	; (80a40d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a4092:	681a      	ldr	r2, [r3, #0]
 80a4094:	07d1      	lsls	r1, r2, #31
 80a4096:	bf5c      	itt	pl
 80a4098:	2201      	movpl	r2, #1
 80a409a:	601a      	strpl	r2, [r3, #0]
 80a409c:	4b0e      	ldr	r3, [pc, #56]	; (80a40d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a409e:	681a      	ldr	r2, [r3, #0]
 80a40a0:	07d2      	lsls	r2, r2, #31
 80a40a2:	bf5c      	itt	pl
 80a40a4:	2201      	movpl	r2, #1
 80a40a6:	601a      	strpl	r2, [r3, #0]
 80a40a8:	4770      	bx	lr
 80a40aa:	bf00      	nop
 80a40ac:	20000938 	.word	0x20000938
 80a40b0:	20000934 	.word	0x20000934
 80a40b4:	20000930 	.word	0x20000930
 80a40b8:	2000092c 	.word	0x2000092c
 80a40bc:	20000928 	.word	0x20000928
 80a40c0:	20000924 	.word	0x20000924
 80a40c4:	20000920 	.word	0x20000920
 80a40c8:	2000091c 	.word	0x2000091c
 80a40cc:	20000918 	.word	0x20000918
 80a40d0:	20000914 	.word	0x20000914
 80a40d4:	20000910 	.word	0x20000910
 80a40d8:	2000090c 	.word	0x2000090c

080a40dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a40dc:	4b24      	ldr	r3, [pc, #144]	; (80a4170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a40de:	681a      	ldr	r2, [r3, #0]
 80a40e0:	07d0      	lsls	r0, r2, #31
 80a40e2:	bf5c      	itt	pl
 80a40e4:	2201      	movpl	r2, #1
 80a40e6:	601a      	strpl	r2, [r3, #0]
 80a40e8:	4b22      	ldr	r3, [pc, #136]	; (80a4174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a40ea:	681a      	ldr	r2, [r3, #0]
 80a40ec:	07d1      	lsls	r1, r2, #31
 80a40ee:	bf5c      	itt	pl
 80a40f0:	2201      	movpl	r2, #1
 80a40f2:	601a      	strpl	r2, [r3, #0]
 80a40f4:	4b20      	ldr	r3, [pc, #128]	; (80a4178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a40f6:	681a      	ldr	r2, [r3, #0]
 80a40f8:	07d2      	lsls	r2, r2, #31
 80a40fa:	bf5c      	itt	pl
 80a40fc:	2201      	movpl	r2, #1
 80a40fe:	601a      	strpl	r2, [r3, #0]
 80a4100:	4b1e      	ldr	r3, [pc, #120]	; (80a417c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a4102:	681a      	ldr	r2, [r3, #0]
 80a4104:	07d0      	lsls	r0, r2, #31
 80a4106:	bf5c      	itt	pl
 80a4108:	2201      	movpl	r2, #1
 80a410a:	601a      	strpl	r2, [r3, #0]
 80a410c:	4b1c      	ldr	r3, [pc, #112]	; (80a4180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a410e:	681a      	ldr	r2, [r3, #0]
 80a4110:	07d1      	lsls	r1, r2, #31
 80a4112:	bf5c      	itt	pl
 80a4114:	2201      	movpl	r2, #1
 80a4116:	601a      	strpl	r2, [r3, #0]
 80a4118:	4b1a      	ldr	r3, [pc, #104]	; (80a4184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a411a:	681a      	ldr	r2, [r3, #0]
 80a411c:	07d2      	lsls	r2, r2, #31
 80a411e:	bf5c      	itt	pl
 80a4120:	2201      	movpl	r2, #1
 80a4122:	601a      	strpl	r2, [r3, #0]
 80a4124:	4b18      	ldr	r3, [pc, #96]	; (80a4188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a4126:	681a      	ldr	r2, [r3, #0]
 80a4128:	07d0      	lsls	r0, r2, #31
 80a412a:	bf5c      	itt	pl
 80a412c:	2201      	movpl	r2, #1
 80a412e:	601a      	strpl	r2, [r3, #0]
 80a4130:	4b16      	ldr	r3, [pc, #88]	; (80a418c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a4132:	681a      	ldr	r2, [r3, #0]
 80a4134:	07d1      	lsls	r1, r2, #31
 80a4136:	bf5c      	itt	pl
 80a4138:	2201      	movpl	r2, #1
 80a413a:	601a      	strpl	r2, [r3, #0]
 80a413c:	4b14      	ldr	r3, [pc, #80]	; (80a4190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a413e:	681a      	ldr	r2, [r3, #0]
 80a4140:	07d2      	lsls	r2, r2, #31
 80a4142:	bf5c      	itt	pl
 80a4144:	2201      	movpl	r2, #1
 80a4146:	601a      	strpl	r2, [r3, #0]
 80a4148:	4b12      	ldr	r3, [pc, #72]	; (80a4194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a414a:	681a      	ldr	r2, [r3, #0]
 80a414c:	07d0      	lsls	r0, r2, #31
 80a414e:	bf5c      	itt	pl
 80a4150:	2201      	movpl	r2, #1
 80a4152:	601a      	strpl	r2, [r3, #0]
 80a4154:	4b10      	ldr	r3, [pc, #64]	; (80a4198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a4156:	681a      	ldr	r2, [r3, #0]
 80a4158:	07d1      	lsls	r1, r2, #31
 80a415a:	bf5c      	itt	pl
 80a415c:	2201      	movpl	r2, #1
 80a415e:	601a      	strpl	r2, [r3, #0]
 80a4160:	4b0e      	ldr	r3, [pc, #56]	; (80a419c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a4162:	681a      	ldr	r2, [r3, #0]
 80a4164:	07d2      	lsls	r2, r2, #31
 80a4166:	bf5c      	itt	pl
 80a4168:	2201      	movpl	r2, #1
 80a416a:	601a      	strpl	r2, [r3, #0]
 80a416c:	4770      	bx	lr
 80a416e:	bf00      	nop
 80a4170:	20000968 	.word	0x20000968
 80a4174:	20000964 	.word	0x20000964
 80a4178:	20000960 	.word	0x20000960
 80a417c:	2000095c 	.word	0x2000095c
 80a4180:	20000958 	.word	0x20000958
 80a4184:	20000954 	.word	0x20000954
 80a4188:	20000950 	.word	0x20000950
 80a418c:	2000094c 	.word	0x2000094c
 80a4190:	20000948 	.word	0x20000948
 80a4194:	20000944 	.word	0x20000944
 80a4198:	20000940 	.word	0x20000940
 80a419c:	2000093c 	.word	0x2000093c

080a41a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a41a0:	4b18      	ldr	r3, [pc, #96]	; (80a4204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a41a2:	681a      	ldr	r2, [r3, #0]
 80a41a4:	07d1      	lsls	r1, r2, #31
 80a41a6:	bf5c      	itt	pl
 80a41a8:	2201      	movpl	r2, #1
 80a41aa:	601a      	strpl	r2, [r3, #0]
 80a41ac:	4b16      	ldr	r3, [pc, #88]	; (80a4208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a41ae:	681a      	ldr	r2, [r3, #0]
 80a41b0:	07d2      	lsls	r2, r2, #31
 80a41b2:	bf5c      	itt	pl
 80a41b4:	2201      	movpl	r2, #1
 80a41b6:	601a      	strpl	r2, [r3, #0]
 80a41b8:	4b14      	ldr	r3, [pc, #80]	; (80a420c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a41ba:	681a      	ldr	r2, [r3, #0]
 80a41bc:	07d0      	lsls	r0, r2, #31
 80a41be:	bf5c      	itt	pl
 80a41c0:	2201      	movpl	r2, #1
 80a41c2:	601a      	strpl	r2, [r3, #0]
 80a41c4:	4b12      	ldr	r3, [pc, #72]	; (80a4210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a41c6:	681a      	ldr	r2, [r3, #0]
 80a41c8:	07d1      	lsls	r1, r2, #31
 80a41ca:	bf5c      	itt	pl
 80a41cc:	2201      	movpl	r2, #1
 80a41ce:	601a      	strpl	r2, [r3, #0]
 80a41d0:	4b10      	ldr	r3, [pc, #64]	; (80a4214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a41d2:	681a      	ldr	r2, [r3, #0]
 80a41d4:	07d2      	lsls	r2, r2, #31
 80a41d6:	bf5c      	itt	pl
 80a41d8:	2201      	movpl	r2, #1
 80a41da:	601a      	strpl	r2, [r3, #0]
 80a41dc:	4b0e      	ldr	r3, [pc, #56]	; (80a4218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a41de:	681a      	ldr	r2, [r3, #0]
 80a41e0:	07d0      	lsls	r0, r2, #31
 80a41e2:	bf5c      	itt	pl
 80a41e4:	2201      	movpl	r2, #1
 80a41e6:	601a      	strpl	r2, [r3, #0]
 80a41e8:	4b0c      	ldr	r3, [pc, #48]	; (80a421c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a41ea:	681a      	ldr	r2, [r3, #0]
 80a41ec:	07d1      	lsls	r1, r2, #31
 80a41ee:	bf5c      	itt	pl
 80a41f0:	2201      	movpl	r2, #1
 80a41f2:	601a      	strpl	r2, [r3, #0]
 80a41f4:	4b0a      	ldr	r3, [pc, #40]	; (80a4220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a41f6:	681a      	ldr	r2, [r3, #0]
 80a41f8:	07d2      	lsls	r2, r2, #31
 80a41fa:	bf5c      	itt	pl
 80a41fc:	2201      	movpl	r2, #1
 80a41fe:	601a      	strpl	r2, [r3, #0]
 80a4200:	4770      	bx	lr
 80a4202:	bf00      	nop
 80a4204:	20000988 	.word	0x20000988
 80a4208:	20000984 	.word	0x20000984
 80a420c:	20000980 	.word	0x20000980
 80a4210:	2000097c 	.word	0x2000097c
 80a4214:	20000978 	.word	0x20000978
 80a4218:	20000974 	.word	0x20000974
 80a421c:	20000970 	.word	0x20000970
 80a4220:	2000096c 	.word	0x2000096c

080a4224 <__aeabi_drsub>:
 80a4224:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a4228:	e002      	b.n	80a4230 <__adddf3>
 80a422a:	bf00      	nop

080a422c <__aeabi_dsub>:
 80a422c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a4230 <__adddf3>:
 80a4230:	b530      	push	{r4, r5, lr}
 80a4232:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a4236:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a423a:	ea94 0f05 	teq	r4, r5
 80a423e:	bf08      	it	eq
 80a4240:	ea90 0f02 	teqeq	r0, r2
 80a4244:	bf1f      	itttt	ne
 80a4246:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a424a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a424e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a4252:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4256:	f000 80e2 	beq.w	80a441e <__adddf3+0x1ee>
 80a425a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a425e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a4262:	bfb8      	it	lt
 80a4264:	426d      	neglt	r5, r5
 80a4266:	dd0c      	ble.n	80a4282 <__adddf3+0x52>
 80a4268:	442c      	add	r4, r5
 80a426a:	ea80 0202 	eor.w	r2, r0, r2
 80a426e:	ea81 0303 	eor.w	r3, r1, r3
 80a4272:	ea82 0000 	eor.w	r0, r2, r0
 80a4276:	ea83 0101 	eor.w	r1, r3, r1
 80a427a:	ea80 0202 	eor.w	r2, r0, r2
 80a427e:	ea81 0303 	eor.w	r3, r1, r3
 80a4282:	2d36      	cmp	r5, #54	; 0x36
 80a4284:	bf88      	it	hi
 80a4286:	bd30      	pophi	{r4, r5, pc}
 80a4288:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a428c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4290:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a4294:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a4298:	d002      	beq.n	80a42a0 <__adddf3+0x70>
 80a429a:	4240      	negs	r0, r0
 80a429c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a42a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a42a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a42a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a42ac:	d002      	beq.n	80a42b4 <__adddf3+0x84>
 80a42ae:	4252      	negs	r2, r2
 80a42b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a42b4:	ea94 0f05 	teq	r4, r5
 80a42b8:	f000 80a7 	beq.w	80a440a <__adddf3+0x1da>
 80a42bc:	f1a4 0401 	sub.w	r4, r4, #1
 80a42c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80a42c4:	db0d      	blt.n	80a42e2 <__adddf3+0xb2>
 80a42c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a42ca:	fa22 f205 	lsr.w	r2, r2, r5
 80a42ce:	1880      	adds	r0, r0, r2
 80a42d0:	f141 0100 	adc.w	r1, r1, #0
 80a42d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80a42d8:	1880      	adds	r0, r0, r2
 80a42da:	fa43 f305 	asr.w	r3, r3, r5
 80a42de:	4159      	adcs	r1, r3
 80a42e0:	e00e      	b.n	80a4300 <__adddf3+0xd0>
 80a42e2:	f1a5 0520 	sub.w	r5, r5, #32
 80a42e6:	f10e 0e20 	add.w	lr, lr, #32
 80a42ea:	2a01      	cmp	r2, #1
 80a42ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a42f0:	bf28      	it	cs
 80a42f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a42f6:	fa43 f305 	asr.w	r3, r3, r5
 80a42fa:	18c0      	adds	r0, r0, r3
 80a42fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a4300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4304:	d507      	bpl.n	80a4316 <__adddf3+0xe6>
 80a4306:	f04f 0e00 	mov.w	lr, #0
 80a430a:	f1dc 0c00 	rsbs	ip, ip, #0
 80a430e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a4312:	eb6e 0101 	sbc.w	r1, lr, r1
 80a4316:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a431a:	d31b      	bcc.n	80a4354 <__adddf3+0x124>
 80a431c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a4320:	d30c      	bcc.n	80a433c <__adddf3+0x10c>
 80a4322:	0849      	lsrs	r1, r1, #1
 80a4324:	ea5f 0030 	movs.w	r0, r0, rrx
 80a4328:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a432c:	f104 0401 	add.w	r4, r4, #1
 80a4330:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a4334:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a4338:	f080 809a 	bcs.w	80a4470 <__adddf3+0x240>
 80a433c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4340:	bf08      	it	eq
 80a4342:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4346:	f150 0000 	adcs.w	r0, r0, #0
 80a434a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a434e:	ea41 0105 	orr.w	r1, r1, r5
 80a4352:	bd30      	pop	{r4, r5, pc}
 80a4354:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a4358:	4140      	adcs	r0, r0
 80a435a:	eb41 0101 	adc.w	r1, r1, r1
 80a435e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4362:	f1a4 0401 	sub.w	r4, r4, #1
 80a4366:	d1e9      	bne.n	80a433c <__adddf3+0x10c>
 80a4368:	f091 0f00 	teq	r1, #0
 80a436c:	bf04      	itt	eq
 80a436e:	4601      	moveq	r1, r0
 80a4370:	2000      	moveq	r0, #0
 80a4372:	fab1 f381 	clz	r3, r1
 80a4376:	bf08      	it	eq
 80a4378:	3320      	addeq	r3, #32
 80a437a:	f1a3 030b 	sub.w	r3, r3, #11
 80a437e:	f1b3 0220 	subs.w	r2, r3, #32
 80a4382:	da0c      	bge.n	80a439e <__adddf3+0x16e>
 80a4384:	320c      	adds	r2, #12
 80a4386:	dd08      	ble.n	80a439a <__adddf3+0x16a>
 80a4388:	f102 0c14 	add.w	ip, r2, #20
 80a438c:	f1c2 020c 	rsb	r2, r2, #12
 80a4390:	fa01 f00c 	lsl.w	r0, r1, ip
 80a4394:	fa21 f102 	lsr.w	r1, r1, r2
 80a4398:	e00c      	b.n	80a43b4 <__adddf3+0x184>
 80a439a:	f102 0214 	add.w	r2, r2, #20
 80a439e:	bfd8      	it	le
 80a43a0:	f1c2 0c20 	rsble	ip, r2, #32
 80a43a4:	fa01 f102 	lsl.w	r1, r1, r2
 80a43a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a43ac:	bfdc      	itt	le
 80a43ae:	ea41 010c 	orrle.w	r1, r1, ip
 80a43b2:	4090      	lslle	r0, r2
 80a43b4:	1ae4      	subs	r4, r4, r3
 80a43b6:	bfa2      	ittt	ge
 80a43b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a43bc:	4329      	orrge	r1, r5
 80a43be:	bd30      	popge	{r4, r5, pc}
 80a43c0:	ea6f 0404 	mvn.w	r4, r4
 80a43c4:	3c1f      	subs	r4, #31
 80a43c6:	da1c      	bge.n	80a4402 <__adddf3+0x1d2>
 80a43c8:	340c      	adds	r4, #12
 80a43ca:	dc0e      	bgt.n	80a43ea <__adddf3+0x1ba>
 80a43cc:	f104 0414 	add.w	r4, r4, #20
 80a43d0:	f1c4 0220 	rsb	r2, r4, #32
 80a43d4:	fa20 f004 	lsr.w	r0, r0, r4
 80a43d8:	fa01 f302 	lsl.w	r3, r1, r2
 80a43dc:	ea40 0003 	orr.w	r0, r0, r3
 80a43e0:	fa21 f304 	lsr.w	r3, r1, r4
 80a43e4:	ea45 0103 	orr.w	r1, r5, r3
 80a43e8:	bd30      	pop	{r4, r5, pc}
 80a43ea:	f1c4 040c 	rsb	r4, r4, #12
 80a43ee:	f1c4 0220 	rsb	r2, r4, #32
 80a43f2:	fa20 f002 	lsr.w	r0, r0, r2
 80a43f6:	fa01 f304 	lsl.w	r3, r1, r4
 80a43fa:	ea40 0003 	orr.w	r0, r0, r3
 80a43fe:	4629      	mov	r1, r5
 80a4400:	bd30      	pop	{r4, r5, pc}
 80a4402:	fa21 f004 	lsr.w	r0, r1, r4
 80a4406:	4629      	mov	r1, r5
 80a4408:	bd30      	pop	{r4, r5, pc}
 80a440a:	f094 0f00 	teq	r4, #0
 80a440e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a4412:	bf06      	itte	eq
 80a4414:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a4418:	3401      	addeq	r4, #1
 80a441a:	3d01      	subne	r5, #1
 80a441c:	e74e      	b.n	80a42bc <__adddf3+0x8c>
 80a441e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4422:	bf18      	it	ne
 80a4424:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4428:	d029      	beq.n	80a447e <__adddf3+0x24e>
 80a442a:	ea94 0f05 	teq	r4, r5
 80a442e:	bf08      	it	eq
 80a4430:	ea90 0f02 	teqeq	r0, r2
 80a4434:	d005      	beq.n	80a4442 <__adddf3+0x212>
 80a4436:	ea54 0c00 	orrs.w	ip, r4, r0
 80a443a:	bf04      	itt	eq
 80a443c:	4619      	moveq	r1, r3
 80a443e:	4610      	moveq	r0, r2
 80a4440:	bd30      	pop	{r4, r5, pc}
 80a4442:	ea91 0f03 	teq	r1, r3
 80a4446:	bf1e      	ittt	ne
 80a4448:	2100      	movne	r1, #0
 80a444a:	2000      	movne	r0, #0
 80a444c:	bd30      	popne	{r4, r5, pc}
 80a444e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a4452:	d105      	bne.n	80a4460 <__adddf3+0x230>
 80a4454:	0040      	lsls	r0, r0, #1
 80a4456:	4149      	adcs	r1, r1
 80a4458:	bf28      	it	cs
 80a445a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a445e:	bd30      	pop	{r4, r5, pc}
 80a4460:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a4464:	bf3c      	itt	cc
 80a4466:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a446a:	bd30      	popcc	{r4, r5, pc}
 80a446c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4470:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a4474:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4478:	f04f 0000 	mov.w	r0, #0
 80a447c:	bd30      	pop	{r4, r5, pc}
 80a447e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4482:	bf1a      	itte	ne
 80a4484:	4619      	movne	r1, r3
 80a4486:	4610      	movne	r0, r2
 80a4488:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a448c:	bf1c      	itt	ne
 80a448e:	460b      	movne	r3, r1
 80a4490:	4602      	movne	r2, r0
 80a4492:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4496:	bf06      	itte	eq
 80a4498:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a449c:	ea91 0f03 	teqeq	r1, r3
 80a44a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a44a4:	bd30      	pop	{r4, r5, pc}
 80a44a6:	bf00      	nop

080a44a8 <__aeabi_ui2d>:
 80a44a8:	f090 0f00 	teq	r0, #0
 80a44ac:	bf04      	itt	eq
 80a44ae:	2100      	moveq	r1, #0
 80a44b0:	4770      	bxeq	lr
 80a44b2:	b530      	push	{r4, r5, lr}
 80a44b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a44b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a44bc:	f04f 0500 	mov.w	r5, #0
 80a44c0:	f04f 0100 	mov.w	r1, #0
 80a44c4:	e750      	b.n	80a4368 <__adddf3+0x138>
 80a44c6:	bf00      	nop

080a44c8 <__aeabi_i2d>:
 80a44c8:	f090 0f00 	teq	r0, #0
 80a44cc:	bf04      	itt	eq
 80a44ce:	2100      	moveq	r1, #0
 80a44d0:	4770      	bxeq	lr
 80a44d2:	b530      	push	{r4, r5, lr}
 80a44d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a44d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a44dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a44e0:	bf48      	it	mi
 80a44e2:	4240      	negmi	r0, r0
 80a44e4:	f04f 0100 	mov.w	r1, #0
 80a44e8:	e73e      	b.n	80a4368 <__adddf3+0x138>
 80a44ea:	bf00      	nop

080a44ec <__aeabi_f2d>:
 80a44ec:	0042      	lsls	r2, r0, #1
 80a44ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a44f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a44f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a44fa:	bf1f      	itttt	ne
 80a44fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a4500:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4504:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a4508:	4770      	bxne	lr
 80a450a:	f092 0f00 	teq	r2, #0
 80a450e:	bf14      	ite	ne
 80a4510:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4514:	4770      	bxeq	lr
 80a4516:	b530      	push	{r4, r5, lr}
 80a4518:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a451c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4520:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4524:	e720      	b.n	80a4368 <__adddf3+0x138>
 80a4526:	bf00      	nop

080a4528 <__aeabi_ul2d>:
 80a4528:	ea50 0201 	orrs.w	r2, r0, r1
 80a452c:	bf08      	it	eq
 80a452e:	4770      	bxeq	lr
 80a4530:	b530      	push	{r4, r5, lr}
 80a4532:	f04f 0500 	mov.w	r5, #0
 80a4536:	e00a      	b.n	80a454e <__aeabi_l2d+0x16>

080a4538 <__aeabi_l2d>:
 80a4538:	ea50 0201 	orrs.w	r2, r0, r1
 80a453c:	bf08      	it	eq
 80a453e:	4770      	bxeq	lr
 80a4540:	b530      	push	{r4, r5, lr}
 80a4542:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a4546:	d502      	bpl.n	80a454e <__aeabi_l2d+0x16>
 80a4548:	4240      	negs	r0, r0
 80a454a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a454e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4552:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4556:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a455a:	f43f aedc 	beq.w	80a4316 <__adddf3+0xe6>
 80a455e:	f04f 0203 	mov.w	r2, #3
 80a4562:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4566:	bf18      	it	ne
 80a4568:	3203      	addne	r2, #3
 80a456a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a456e:	bf18      	it	ne
 80a4570:	3203      	addne	r2, #3
 80a4572:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a4576:	f1c2 0320 	rsb	r3, r2, #32
 80a457a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a457e:	fa20 f002 	lsr.w	r0, r0, r2
 80a4582:	fa01 fe03 	lsl.w	lr, r1, r3
 80a4586:	ea40 000e 	orr.w	r0, r0, lr
 80a458a:	fa21 f102 	lsr.w	r1, r1, r2
 80a458e:	4414      	add	r4, r2
 80a4590:	e6c1      	b.n	80a4316 <__adddf3+0xe6>
 80a4592:	bf00      	nop

080a4594 <__aeabi_dmul>:
 80a4594:	b570      	push	{r4, r5, r6, lr}
 80a4596:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a459a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a459e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a45a2:	bf1d      	ittte	ne
 80a45a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a45a8:	ea94 0f0c 	teqne	r4, ip
 80a45ac:	ea95 0f0c 	teqne	r5, ip
 80a45b0:	f000 f8de 	bleq	80a4770 <__aeabi_dmul+0x1dc>
 80a45b4:	442c      	add	r4, r5
 80a45b6:	ea81 0603 	eor.w	r6, r1, r3
 80a45ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a45be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a45c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a45c6:	bf18      	it	ne
 80a45c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a45cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a45d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a45d4:	d038      	beq.n	80a4648 <__aeabi_dmul+0xb4>
 80a45d6:	fba0 ce02 	umull	ip, lr, r0, r2
 80a45da:	f04f 0500 	mov.w	r5, #0
 80a45de:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a45e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a45e6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a45ea:	f04f 0600 	mov.w	r6, #0
 80a45ee:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a45f2:	f09c 0f00 	teq	ip, #0
 80a45f6:	bf18      	it	ne
 80a45f8:	f04e 0e01 	orrne.w	lr, lr, #1
 80a45fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a4600:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a4604:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a4608:	d204      	bcs.n	80a4614 <__aeabi_dmul+0x80>
 80a460a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a460e:	416d      	adcs	r5, r5
 80a4610:	eb46 0606 	adc.w	r6, r6, r6
 80a4614:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a4618:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a461c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a4620:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a4624:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a4628:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a462c:	bf88      	it	hi
 80a462e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4632:	d81e      	bhi.n	80a4672 <__aeabi_dmul+0xde>
 80a4634:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a4638:	bf08      	it	eq
 80a463a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a463e:	f150 0000 	adcs.w	r0, r0, #0
 80a4642:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4646:	bd70      	pop	{r4, r5, r6, pc}
 80a4648:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a464c:	ea46 0101 	orr.w	r1, r6, r1
 80a4650:	ea40 0002 	orr.w	r0, r0, r2
 80a4654:	ea81 0103 	eor.w	r1, r1, r3
 80a4658:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a465c:	bfc2      	ittt	gt
 80a465e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4662:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4666:	bd70      	popgt	{r4, r5, r6, pc}
 80a4668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a466c:	f04f 0e00 	mov.w	lr, #0
 80a4670:	3c01      	subs	r4, #1
 80a4672:	f300 80ab 	bgt.w	80a47cc <__aeabi_dmul+0x238>
 80a4676:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a467a:	bfde      	ittt	le
 80a467c:	2000      	movle	r0, #0
 80a467e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a4682:	bd70      	pople	{r4, r5, r6, pc}
 80a4684:	f1c4 0400 	rsb	r4, r4, #0
 80a4688:	3c20      	subs	r4, #32
 80a468a:	da35      	bge.n	80a46f8 <__aeabi_dmul+0x164>
 80a468c:	340c      	adds	r4, #12
 80a468e:	dc1b      	bgt.n	80a46c8 <__aeabi_dmul+0x134>
 80a4690:	f104 0414 	add.w	r4, r4, #20
 80a4694:	f1c4 0520 	rsb	r5, r4, #32
 80a4698:	fa00 f305 	lsl.w	r3, r0, r5
 80a469c:	fa20 f004 	lsr.w	r0, r0, r4
 80a46a0:	fa01 f205 	lsl.w	r2, r1, r5
 80a46a4:	ea40 0002 	orr.w	r0, r0, r2
 80a46a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a46ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a46b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a46b4:	fa21 f604 	lsr.w	r6, r1, r4
 80a46b8:	eb42 0106 	adc.w	r1, r2, r6
 80a46bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a46c0:	bf08      	it	eq
 80a46c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a46c6:	bd70      	pop	{r4, r5, r6, pc}
 80a46c8:	f1c4 040c 	rsb	r4, r4, #12
 80a46cc:	f1c4 0520 	rsb	r5, r4, #32
 80a46d0:	fa00 f304 	lsl.w	r3, r0, r4
 80a46d4:	fa20 f005 	lsr.w	r0, r0, r5
 80a46d8:	fa01 f204 	lsl.w	r2, r1, r4
 80a46dc:	ea40 0002 	orr.w	r0, r0, r2
 80a46e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a46e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a46e8:	f141 0100 	adc.w	r1, r1, #0
 80a46ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a46f0:	bf08      	it	eq
 80a46f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a46f6:	bd70      	pop	{r4, r5, r6, pc}
 80a46f8:	f1c4 0520 	rsb	r5, r4, #32
 80a46fc:	fa00 f205 	lsl.w	r2, r0, r5
 80a4700:	ea4e 0e02 	orr.w	lr, lr, r2
 80a4704:	fa20 f304 	lsr.w	r3, r0, r4
 80a4708:	fa01 f205 	lsl.w	r2, r1, r5
 80a470c:	ea43 0302 	orr.w	r3, r3, r2
 80a4710:	fa21 f004 	lsr.w	r0, r1, r4
 80a4714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4718:	fa21 f204 	lsr.w	r2, r1, r4
 80a471c:	ea20 0002 	bic.w	r0, r0, r2
 80a4720:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a4724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4728:	bf08      	it	eq
 80a472a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a472e:	bd70      	pop	{r4, r5, r6, pc}
 80a4730:	f094 0f00 	teq	r4, #0
 80a4734:	d10f      	bne.n	80a4756 <__aeabi_dmul+0x1c2>
 80a4736:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a473a:	0040      	lsls	r0, r0, #1
 80a473c:	eb41 0101 	adc.w	r1, r1, r1
 80a4740:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4744:	bf08      	it	eq
 80a4746:	3c01      	subeq	r4, #1
 80a4748:	d0f7      	beq.n	80a473a <__aeabi_dmul+0x1a6>
 80a474a:	ea41 0106 	orr.w	r1, r1, r6
 80a474e:	f095 0f00 	teq	r5, #0
 80a4752:	bf18      	it	ne
 80a4754:	4770      	bxne	lr
 80a4756:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a475a:	0052      	lsls	r2, r2, #1
 80a475c:	eb43 0303 	adc.w	r3, r3, r3
 80a4760:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a4764:	bf08      	it	eq
 80a4766:	3d01      	subeq	r5, #1
 80a4768:	d0f7      	beq.n	80a475a <__aeabi_dmul+0x1c6>
 80a476a:	ea43 0306 	orr.w	r3, r3, r6
 80a476e:	4770      	bx	lr
 80a4770:	ea94 0f0c 	teq	r4, ip
 80a4774:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4778:	bf18      	it	ne
 80a477a:	ea95 0f0c 	teqne	r5, ip
 80a477e:	d00c      	beq.n	80a479a <__aeabi_dmul+0x206>
 80a4780:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4784:	bf18      	it	ne
 80a4786:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a478a:	d1d1      	bne.n	80a4730 <__aeabi_dmul+0x19c>
 80a478c:	ea81 0103 	eor.w	r1, r1, r3
 80a4790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4794:	f04f 0000 	mov.w	r0, #0
 80a4798:	bd70      	pop	{r4, r5, r6, pc}
 80a479a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a479e:	bf06      	itte	eq
 80a47a0:	4610      	moveq	r0, r2
 80a47a2:	4619      	moveq	r1, r3
 80a47a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a47a8:	d019      	beq.n	80a47de <__aeabi_dmul+0x24a>
 80a47aa:	ea94 0f0c 	teq	r4, ip
 80a47ae:	d102      	bne.n	80a47b6 <__aeabi_dmul+0x222>
 80a47b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a47b4:	d113      	bne.n	80a47de <__aeabi_dmul+0x24a>
 80a47b6:	ea95 0f0c 	teq	r5, ip
 80a47ba:	d105      	bne.n	80a47c8 <__aeabi_dmul+0x234>
 80a47bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a47c0:	bf1c      	itt	ne
 80a47c2:	4610      	movne	r0, r2
 80a47c4:	4619      	movne	r1, r3
 80a47c6:	d10a      	bne.n	80a47de <__aeabi_dmul+0x24a>
 80a47c8:	ea81 0103 	eor.w	r1, r1, r3
 80a47cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a47d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a47d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a47d8:	f04f 0000 	mov.w	r0, #0
 80a47dc:	bd70      	pop	{r4, r5, r6, pc}
 80a47de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a47e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a47e6:	bd70      	pop	{r4, r5, r6, pc}

080a47e8 <__aeabi_ddiv>:
 80a47e8:	b570      	push	{r4, r5, r6, lr}
 80a47ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a47ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a47f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a47f6:	bf1d      	ittte	ne
 80a47f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a47fc:	ea94 0f0c 	teqne	r4, ip
 80a4800:	ea95 0f0c 	teqne	r5, ip
 80a4804:	f000 f8a7 	bleq	80a4956 <__aeabi_ddiv+0x16e>
 80a4808:	eba4 0405 	sub.w	r4, r4, r5
 80a480c:	ea81 0e03 	eor.w	lr, r1, r3
 80a4810:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4814:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4818:	f000 8088 	beq.w	80a492c <__aeabi_ddiv+0x144>
 80a481c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4820:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4824:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a4828:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a482c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4830:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a4834:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a4838:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a483c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a4840:	429d      	cmp	r5, r3
 80a4842:	bf08      	it	eq
 80a4844:	4296      	cmpeq	r6, r2
 80a4846:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a484a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a484e:	d202      	bcs.n	80a4856 <__aeabi_ddiv+0x6e>
 80a4850:	085b      	lsrs	r3, r3, #1
 80a4852:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4856:	1ab6      	subs	r6, r6, r2
 80a4858:	eb65 0503 	sbc.w	r5, r5, r3
 80a485c:	085b      	lsrs	r3, r3, #1
 80a485e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4862:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a4866:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a486a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a486e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4872:	bf22      	ittt	cs
 80a4874:	1ab6      	subcs	r6, r6, r2
 80a4876:	4675      	movcs	r5, lr
 80a4878:	ea40 000c 	orrcs.w	r0, r0, ip
 80a487c:	085b      	lsrs	r3, r3, #1
 80a487e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4882:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4886:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a488a:	bf22      	ittt	cs
 80a488c:	1ab6      	subcs	r6, r6, r2
 80a488e:	4675      	movcs	r5, lr
 80a4890:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4894:	085b      	lsrs	r3, r3, #1
 80a4896:	ea4f 0232 	mov.w	r2, r2, rrx
 80a489a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a489e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a48a2:	bf22      	ittt	cs
 80a48a4:	1ab6      	subcs	r6, r6, r2
 80a48a6:	4675      	movcs	r5, lr
 80a48a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a48ac:	085b      	lsrs	r3, r3, #1
 80a48ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80a48b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a48b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a48ba:	bf22      	ittt	cs
 80a48bc:	1ab6      	subcs	r6, r6, r2
 80a48be:	4675      	movcs	r5, lr
 80a48c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a48c4:	ea55 0e06 	orrs.w	lr, r5, r6
 80a48c8:	d018      	beq.n	80a48fc <__aeabi_ddiv+0x114>
 80a48ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a48ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a48d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a48d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a48da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a48de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a48e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a48e6:	d1c0      	bne.n	80a486a <__aeabi_ddiv+0x82>
 80a48e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a48ec:	d10b      	bne.n	80a4906 <__aeabi_ddiv+0x11e>
 80a48ee:	ea41 0100 	orr.w	r1, r1, r0
 80a48f2:	f04f 0000 	mov.w	r0, #0
 80a48f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a48fa:	e7b6      	b.n	80a486a <__aeabi_ddiv+0x82>
 80a48fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4900:	bf04      	itt	eq
 80a4902:	4301      	orreq	r1, r0
 80a4904:	2000      	moveq	r0, #0
 80a4906:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a490a:	bf88      	it	hi
 80a490c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4910:	f63f aeaf 	bhi.w	80a4672 <__aeabi_dmul+0xde>
 80a4914:	ebb5 0c03 	subs.w	ip, r5, r3
 80a4918:	bf04      	itt	eq
 80a491a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a491e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4922:	f150 0000 	adcs.w	r0, r0, #0
 80a4926:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a492a:	bd70      	pop	{r4, r5, r6, pc}
 80a492c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a4930:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a4934:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a4938:	bfc2      	ittt	gt
 80a493a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a493e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4942:	bd70      	popgt	{r4, r5, r6, pc}
 80a4944:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4948:	f04f 0e00 	mov.w	lr, #0
 80a494c:	3c01      	subs	r4, #1
 80a494e:	e690      	b.n	80a4672 <__aeabi_dmul+0xde>
 80a4950:	ea45 0e06 	orr.w	lr, r5, r6
 80a4954:	e68d      	b.n	80a4672 <__aeabi_dmul+0xde>
 80a4956:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a495a:	ea94 0f0c 	teq	r4, ip
 80a495e:	bf08      	it	eq
 80a4960:	ea95 0f0c 	teqeq	r5, ip
 80a4964:	f43f af3b 	beq.w	80a47de <__aeabi_dmul+0x24a>
 80a4968:	ea94 0f0c 	teq	r4, ip
 80a496c:	d10a      	bne.n	80a4984 <__aeabi_ddiv+0x19c>
 80a496e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4972:	f47f af34 	bne.w	80a47de <__aeabi_dmul+0x24a>
 80a4976:	ea95 0f0c 	teq	r5, ip
 80a497a:	f47f af25 	bne.w	80a47c8 <__aeabi_dmul+0x234>
 80a497e:	4610      	mov	r0, r2
 80a4980:	4619      	mov	r1, r3
 80a4982:	e72c      	b.n	80a47de <__aeabi_dmul+0x24a>
 80a4984:	ea95 0f0c 	teq	r5, ip
 80a4988:	d106      	bne.n	80a4998 <__aeabi_ddiv+0x1b0>
 80a498a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a498e:	f43f aefd 	beq.w	80a478c <__aeabi_dmul+0x1f8>
 80a4992:	4610      	mov	r0, r2
 80a4994:	4619      	mov	r1, r3
 80a4996:	e722      	b.n	80a47de <__aeabi_dmul+0x24a>
 80a4998:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a499c:	bf18      	it	ne
 80a499e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a49a2:	f47f aec5 	bne.w	80a4730 <__aeabi_dmul+0x19c>
 80a49a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a49aa:	f47f af0d 	bne.w	80a47c8 <__aeabi_dmul+0x234>
 80a49ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a49b2:	f47f aeeb 	bne.w	80a478c <__aeabi_dmul+0x1f8>
 80a49b6:	e712      	b.n	80a47de <__aeabi_dmul+0x24a>

080a49b8 <__gedf2>:
 80a49b8:	f04f 3cff 	mov.w	ip, #4294967295
 80a49bc:	e006      	b.n	80a49cc <__cmpdf2+0x4>
 80a49be:	bf00      	nop

080a49c0 <__ledf2>:
 80a49c0:	f04f 0c01 	mov.w	ip, #1
 80a49c4:	e002      	b.n	80a49cc <__cmpdf2+0x4>
 80a49c6:	bf00      	nop

080a49c8 <__cmpdf2>:
 80a49c8:	f04f 0c01 	mov.w	ip, #1
 80a49cc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a49d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a49d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a49d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a49dc:	bf18      	it	ne
 80a49de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a49e2:	d01b      	beq.n	80a4a1c <__cmpdf2+0x54>
 80a49e4:	b001      	add	sp, #4
 80a49e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a49ea:	bf0c      	ite	eq
 80a49ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a49f0:	ea91 0f03 	teqne	r1, r3
 80a49f4:	bf02      	ittt	eq
 80a49f6:	ea90 0f02 	teqeq	r0, r2
 80a49fa:	2000      	moveq	r0, #0
 80a49fc:	4770      	bxeq	lr
 80a49fe:	f110 0f00 	cmn.w	r0, #0
 80a4a02:	ea91 0f03 	teq	r1, r3
 80a4a06:	bf58      	it	pl
 80a4a08:	4299      	cmppl	r1, r3
 80a4a0a:	bf08      	it	eq
 80a4a0c:	4290      	cmpeq	r0, r2
 80a4a0e:	bf2c      	ite	cs
 80a4a10:	17d8      	asrcs	r0, r3, #31
 80a4a12:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a4a16:	f040 0001 	orr.w	r0, r0, #1
 80a4a1a:	4770      	bx	lr
 80a4a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4a24:	d102      	bne.n	80a4a2c <__cmpdf2+0x64>
 80a4a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4a2a:	d107      	bne.n	80a4a3c <__cmpdf2+0x74>
 80a4a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4a34:	d1d6      	bne.n	80a49e4 <__cmpdf2+0x1c>
 80a4a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a4a3a:	d0d3      	beq.n	80a49e4 <__cmpdf2+0x1c>
 80a4a3c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4a40:	4770      	bx	lr
 80a4a42:	bf00      	nop

080a4a44 <__aeabi_cdrcmple>:
 80a4a44:	4684      	mov	ip, r0
 80a4a46:	4610      	mov	r0, r2
 80a4a48:	4662      	mov	r2, ip
 80a4a4a:	468c      	mov	ip, r1
 80a4a4c:	4619      	mov	r1, r3
 80a4a4e:	4663      	mov	r3, ip
 80a4a50:	e000      	b.n	80a4a54 <__aeabi_cdcmpeq>
 80a4a52:	bf00      	nop

080a4a54 <__aeabi_cdcmpeq>:
 80a4a54:	b501      	push	{r0, lr}
 80a4a56:	f7ff ffb7 	bl	80a49c8 <__cmpdf2>
 80a4a5a:	2800      	cmp	r0, #0
 80a4a5c:	bf48      	it	mi
 80a4a5e:	f110 0f00 	cmnmi.w	r0, #0
 80a4a62:	bd01      	pop	{r0, pc}

080a4a64 <__aeabi_dcmpeq>:
 80a4a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4a68:	f7ff fff4 	bl	80a4a54 <__aeabi_cdcmpeq>
 80a4a6c:	bf0c      	ite	eq
 80a4a6e:	2001      	moveq	r0, #1
 80a4a70:	2000      	movne	r0, #0
 80a4a72:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4a76:	bf00      	nop

080a4a78 <__aeabi_dcmplt>:
 80a4a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4a7c:	f7ff ffea 	bl	80a4a54 <__aeabi_cdcmpeq>
 80a4a80:	bf34      	ite	cc
 80a4a82:	2001      	movcc	r0, #1
 80a4a84:	2000      	movcs	r0, #0
 80a4a86:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4a8a:	bf00      	nop

080a4a8c <__aeabi_dcmple>:
 80a4a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4a90:	f7ff ffe0 	bl	80a4a54 <__aeabi_cdcmpeq>
 80a4a94:	bf94      	ite	ls
 80a4a96:	2001      	movls	r0, #1
 80a4a98:	2000      	movhi	r0, #0
 80a4a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4a9e:	bf00      	nop

080a4aa0 <__aeabi_dcmpge>:
 80a4aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4aa4:	f7ff ffce 	bl	80a4a44 <__aeabi_cdrcmple>
 80a4aa8:	bf94      	ite	ls
 80a4aaa:	2001      	movls	r0, #1
 80a4aac:	2000      	movhi	r0, #0
 80a4aae:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4ab2:	bf00      	nop

080a4ab4 <__aeabi_dcmpgt>:
 80a4ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4ab8:	f7ff ffc4 	bl	80a4a44 <__aeabi_cdrcmple>
 80a4abc:	bf34      	ite	cc
 80a4abe:	2001      	movcc	r0, #1
 80a4ac0:	2000      	movcs	r0, #0
 80a4ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4ac6:	bf00      	nop

080a4ac8 <__aeabi_d2f>:
 80a4ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a4ad0:	bf24      	itt	cs
 80a4ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a4ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a4ada:	d90d      	bls.n	80a4af8 <__aeabi_d2f+0x30>
 80a4adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a4ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a4ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a4aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a4af0:	bf08      	it	eq
 80a4af2:	f020 0001 	biceq.w	r0, r0, #1
 80a4af6:	4770      	bx	lr
 80a4af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a4afc:	d121      	bne.n	80a4b42 <__aeabi_d2f+0x7a>
 80a4afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a4b02:	bfbc      	itt	lt
 80a4b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a4b08:	4770      	bxlt	lr
 80a4b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a4b12:	f1c2 0218 	rsb	r2, r2, #24
 80a4b16:	f1c2 0c20 	rsb	ip, r2, #32
 80a4b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 80a4b1e:	fa20 f002 	lsr.w	r0, r0, r2
 80a4b22:	bf18      	it	ne
 80a4b24:	f040 0001 	orrne.w	r0, r0, #1
 80a4b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a4b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a4b34:	ea40 000c 	orr.w	r0, r0, ip
 80a4b38:	fa23 f302 	lsr.w	r3, r3, r2
 80a4b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a4b40:	e7cc      	b.n	80a4adc <__aeabi_d2f+0x14>
 80a4b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a4b46:	d107      	bne.n	80a4b58 <__aeabi_d2f+0x90>
 80a4b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a4b4c:	bf1e      	ittt	ne
 80a4b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a4b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a4b56:	4770      	bxne	lr
 80a4b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a4b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4b64:	4770      	bx	lr
 80a4b66:	bf00      	nop

080a4b68 <__aeabi_frsub>:
 80a4b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a4b6c:	e002      	b.n	80a4b74 <__addsf3>
 80a4b6e:	bf00      	nop

080a4b70 <__aeabi_fsub>:
 80a4b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a4b74 <__addsf3>:
 80a4b74:	0042      	lsls	r2, r0, #1
 80a4b76:	bf1f      	itttt	ne
 80a4b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a4b7c:	ea92 0f03 	teqne	r2, r3
 80a4b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a4b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4b88:	d06a      	beq.n	80a4c60 <__addsf3+0xec>
 80a4b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a4b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a4b92:	bfc1      	itttt	gt
 80a4b94:	18d2      	addgt	r2, r2, r3
 80a4b96:	4041      	eorgt	r1, r0
 80a4b98:	4048      	eorgt	r0, r1
 80a4b9a:	4041      	eorgt	r1, r0
 80a4b9c:	bfb8      	it	lt
 80a4b9e:	425b      	neglt	r3, r3
 80a4ba0:	2b19      	cmp	r3, #25
 80a4ba2:	bf88      	it	hi
 80a4ba4:	4770      	bxhi	lr
 80a4ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a4bb2:	bf18      	it	ne
 80a4bb4:	4240      	negne	r0, r0
 80a4bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a4bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a4bc2:	bf18      	it	ne
 80a4bc4:	4249      	negne	r1, r1
 80a4bc6:	ea92 0f03 	teq	r2, r3
 80a4bca:	d03f      	beq.n	80a4c4c <__addsf3+0xd8>
 80a4bcc:	f1a2 0201 	sub.w	r2, r2, #1
 80a4bd0:	fa41 fc03 	asr.w	ip, r1, r3
 80a4bd4:	eb10 000c 	adds.w	r0, r0, ip
 80a4bd8:	f1c3 0320 	rsb	r3, r3, #32
 80a4bdc:	fa01 f103 	lsl.w	r1, r1, r3
 80a4be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4be4:	d502      	bpl.n	80a4bec <__addsf3+0x78>
 80a4be6:	4249      	negs	r1, r1
 80a4be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a4bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a4bf0:	d313      	bcc.n	80a4c1a <__addsf3+0xa6>
 80a4bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a4bf6:	d306      	bcc.n	80a4c06 <__addsf3+0x92>
 80a4bf8:	0840      	lsrs	r0, r0, #1
 80a4bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4bfe:	f102 0201 	add.w	r2, r2, #1
 80a4c02:	2afe      	cmp	r2, #254	; 0xfe
 80a4c04:	d251      	bcs.n	80a4caa <__addsf3+0x136>
 80a4c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a4c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4c0e:	bf08      	it	eq
 80a4c10:	f020 0001 	biceq.w	r0, r0, #1
 80a4c14:	ea40 0003 	orr.w	r0, r0, r3
 80a4c18:	4770      	bx	lr
 80a4c1a:	0049      	lsls	r1, r1, #1
 80a4c1c:	eb40 0000 	adc.w	r0, r0, r0
 80a4c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a4c24:	f1a2 0201 	sub.w	r2, r2, #1
 80a4c28:	d1ed      	bne.n	80a4c06 <__addsf3+0x92>
 80a4c2a:	fab0 fc80 	clz	ip, r0
 80a4c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 80a4c32:	ebb2 020c 	subs.w	r2, r2, ip
 80a4c36:	fa00 f00c 	lsl.w	r0, r0, ip
 80a4c3a:	bfaa      	itet	ge
 80a4c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4c40:	4252      	neglt	r2, r2
 80a4c42:	4318      	orrge	r0, r3
 80a4c44:	bfbc      	itt	lt
 80a4c46:	40d0      	lsrlt	r0, r2
 80a4c48:	4318      	orrlt	r0, r3
 80a4c4a:	4770      	bx	lr
 80a4c4c:	f092 0f00 	teq	r2, #0
 80a4c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a4c54:	bf06      	itte	eq
 80a4c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a4c5a:	3201      	addeq	r2, #1
 80a4c5c:	3b01      	subne	r3, #1
 80a4c5e:	e7b5      	b.n	80a4bcc <__addsf3+0x58>
 80a4c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4c68:	bf18      	it	ne
 80a4c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4c6e:	d021      	beq.n	80a4cb4 <__addsf3+0x140>
 80a4c70:	ea92 0f03 	teq	r2, r3
 80a4c74:	d004      	beq.n	80a4c80 <__addsf3+0x10c>
 80a4c76:	f092 0f00 	teq	r2, #0
 80a4c7a:	bf08      	it	eq
 80a4c7c:	4608      	moveq	r0, r1
 80a4c7e:	4770      	bx	lr
 80a4c80:	ea90 0f01 	teq	r0, r1
 80a4c84:	bf1c      	itt	ne
 80a4c86:	2000      	movne	r0, #0
 80a4c88:	4770      	bxne	lr
 80a4c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a4c8e:	d104      	bne.n	80a4c9a <__addsf3+0x126>
 80a4c90:	0040      	lsls	r0, r0, #1
 80a4c92:	bf28      	it	cs
 80a4c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a4c98:	4770      	bx	lr
 80a4c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a4c9e:	bf3c      	itt	cc
 80a4ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a4ca4:	4770      	bxcc	lr
 80a4ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a4cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4cb2:	4770      	bx	lr
 80a4cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4cb8:	bf16      	itet	ne
 80a4cba:	4608      	movne	r0, r1
 80a4cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a4cc0:	4601      	movne	r1, r0
 80a4cc2:	0242      	lsls	r2, r0, #9
 80a4cc4:	bf06      	itte	eq
 80a4cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a4cca:	ea90 0f01 	teqeq	r0, r1
 80a4cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a4cd2:	4770      	bx	lr

080a4cd4 <__aeabi_ui2f>:
 80a4cd4:	f04f 0300 	mov.w	r3, #0
 80a4cd8:	e004      	b.n	80a4ce4 <__aeabi_i2f+0x8>
 80a4cda:	bf00      	nop

080a4cdc <__aeabi_i2f>:
 80a4cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a4ce0:	bf48      	it	mi
 80a4ce2:	4240      	negmi	r0, r0
 80a4ce4:	ea5f 0c00 	movs.w	ip, r0
 80a4ce8:	bf08      	it	eq
 80a4cea:	4770      	bxeq	lr
 80a4cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a4cf0:	4601      	mov	r1, r0
 80a4cf2:	f04f 0000 	mov.w	r0, #0
 80a4cf6:	e01c      	b.n	80a4d32 <__aeabi_l2f+0x2a>

080a4cf8 <__aeabi_ul2f>:
 80a4cf8:	ea50 0201 	orrs.w	r2, r0, r1
 80a4cfc:	bf08      	it	eq
 80a4cfe:	4770      	bxeq	lr
 80a4d00:	f04f 0300 	mov.w	r3, #0
 80a4d04:	e00a      	b.n	80a4d1c <__aeabi_l2f+0x14>
 80a4d06:	bf00      	nop

080a4d08 <__aeabi_l2f>:
 80a4d08:	ea50 0201 	orrs.w	r2, r0, r1
 80a4d0c:	bf08      	it	eq
 80a4d0e:	4770      	bxeq	lr
 80a4d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a4d14:	d502      	bpl.n	80a4d1c <__aeabi_l2f+0x14>
 80a4d16:	4240      	negs	r0, r0
 80a4d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4d1c:	ea5f 0c01 	movs.w	ip, r1
 80a4d20:	bf02      	ittt	eq
 80a4d22:	4684      	moveq	ip, r0
 80a4d24:	4601      	moveq	r1, r0
 80a4d26:	2000      	moveq	r0, #0
 80a4d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a4d2c:	bf08      	it	eq
 80a4d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a4d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a4d36:	fabc f28c 	clz	r2, ip
 80a4d3a:	3a08      	subs	r2, #8
 80a4d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4d40:	db10      	blt.n	80a4d64 <__aeabi_l2f+0x5c>
 80a4d42:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4d46:	4463      	add	r3, ip
 80a4d48:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4d4c:	f1c2 0220 	rsb	r2, r2, #32
 80a4d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4d54:	fa20 f202 	lsr.w	r2, r0, r2
 80a4d58:	eb43 0002 	adc.w	r0, r3, r2
 80a4d5c:	bf08      	it	eq
 80a4d5e:	f020 0001 	biceq.w	r0, r0, #1
 80a4d62:	4770      	bx	lr
 80a4d64:	f102 0220 	add.w	r2, r2, #32
 80a4d68:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4d6c:	f1c2 0220 	rsb	r2, r2, #32
 80a4d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a4d74:	fa21 f202 	lsr.w	r2, r1, r2
 80a4d78:	eb43 0002 	adc.w	r0, r3, r2
 80a4d7c:	bf08      	it	eq
 80a4d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4d82:	4770      	bx	lr

080a4d84 <__aeabi_fmul>:
 80a4d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4d8c:	bf1e      	ittt	ne
 80a4d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4d92:	ea92 0f0c 	teqne	r2, ip
 80a4d96:	ea93 0f0c 	teqne	r3, ip
 80a4d9a:	d06f      	beq.n	80a4e7c <__aeabi_fmul+0xf8>
 80a4d9c:	441a      	add	r2, r3
 80a4d9e:	ea80 0c01 	eor.w	ip, r0, r1
 80a4da2:	0240      	lsls	r0, r0, #9
 80a4da4:	bf18      	it	ne
 80a4da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a4daa:	d01e      	beq.n	80a4dea <__aeabi_fmul+0x66>
 80a4dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a4db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a4db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a4db8:	fba0 3101 	umull	r3, r1, r0, r1
 80a4dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a4dc4:	bf3e      	ittt	cc
 80a4dc6:	0049      	lslcc	r1, r1, #1
 80a4dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a4dcc:	005b      	lslcc	r3, r3, #1
 80a4dce:	ea40 0001 	orr.w	r0, r0, r1
 80a4dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a4dd6:	2afd      	cmp	r2, #253	; 0xfd
 80a4dd8:	d81d      	bhi.n	80a4e16 <__aeabi_fmul+0x92>
 80a4dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a4dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4de2:	bf08      	it	eq
 80a4de4:	f020 0001 	biceq.w	r0, r0, #1
 80a4de8:	4770      	bx	lr
 80a4dea:	f090 0f00 	teq	r0, #0
 80a4dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4df2:	bf08      	it	eq
 80a4df4:	0249      	lsleq	r1, r1, #9
 80a4df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a4dfe:	3a7f      	subs	r2, #127	; 0x7f
 80a4e00:	bfc2      	ittt	gt
 80a4e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4e0a:	4770      	bxgt	lr
 80a4e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4e10:	f04f 0300 	mov.w	r3, #0
 80a4e14:	3a01      	subs	r2, #1
 80a4e16:	dc5d      	bgt.n	80a4ed4 <__aeabi_fmul+0x150>
 80a4e18:	f112 0f19 	cmn.w	r2, #25
 80a4e1c:	bfdc      	itt	le
 80a4e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a4e22:	4770      	bxle	lr
 80a4e24:	f1c2 0200 	rsb	r2, r2, #0
 80a4e28:	0041      	lsls	r1, r0, #1
 80a4e2a:	fa21 f102 	lsr.w	r1, r1, r2
 80a4e2e:	f1c2 0220 	rsb	r2, r2, #32
 80a4e32:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4e36:	ea5f 0031 	movs.w	r0, r1, rrx
 80a4e3a:	f140 0000 	adc.w	r0, r0, #0
 80a4e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a4e42:	bf08      	it	eq
 80a4e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4e48:	4770      	bx	lr
 80a4e4a:	f092 0f00 	teq	r2, #0
 80a4e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4e52:	bf02      	ittt	eq
 80a4e54:	0040      	lsleq	r0, r0, #1
 80a4e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4e5a:	3a01      	subeq	r2, #1
 80a4e5c:	d0f9      	beq.n	80a4e52 <__aeabi_fmul+0xce>
 80a4e5e:	ea40 000c 	orr.w	r0, r0, ip
 80a4e62:	f093 0f00 	teq	r3, #0
 80a4e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4e6a:	bf02      	ittt	eq
 80a4e6c:	0049      	lsleq	r1, r1, #1
 80a4e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4e72:	3b01      	subeq	r3, #1
 80a4e74:	d0f9      	beq.n	80a4e6a <__aeabi_fmul+0xe6>
 80a4e76:	ea41 010c 	orr.w	r1, r1, ip
 80a4e7a:	e78f      	b.n	80a4d9c <__aeabi_fmul+0x18>
 80a4e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4e80:	ea92 0f0c 	teq	r2, ip
 80a4e84:	bf18      	it	ne
 80a4e86:	ea93 0f0c 	teqne	r3, ip
 80a4e8a:	d00a      	beq.n	80a4ea2 <__aeabi_fmul+0x11e>
 80a4e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4e90:	bf18      	it	ne
 80a4e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4e96:	d1d8      	bne.n	80a4e4a <__aeabi_fmul+0xc6>
 80a4e98:	ea80 0001 	eor.w	r0, r0, r1
 80a4e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4ea0:	4770      	bx	lr
 80a4ea2:	f090 0f00 	teq	r0, #0
 80a4ea6:	bf17      	itett	ne
 80a4ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a4eac:	4608      	moveq	r0, r1
 80a4eae:	f091 0f00 	teqne	r1, #0
 80a4eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a4eb6:	d014      	beq.n	80a4ee2 <__aeabi_fmul+0x15e>
 80a4eb8:	ea92 0f0c 	teq	r2, ip
 80a4ebc:	d101      	bne.n	80a4ec2 <__aeabi_fmul+0x13e>
 80a4ebe:	0242      	lsls	r2, r0, #9
 80a4ec0:	d10f      	bne.n	80a4ee2 <__aeabi_fmul+0x15e>
 80a4ec2:	ea93 0f0c 	teq	r3, ip
 80a4ec6:	d103      	bne.n	80a4ed0 <__aeabi_fmul+0x14c>
 80a4ec8:	024b      	lsls	r3, r1, #9
 80a4eca:	bf18      	it	ne
 80a4ecc:	4608      	movne	r0, r1
 80a4ece:	d108      	bne.n	80a4ee2 <__aeabi_fmul+0x15e>
 80a4ed0:	ea80 0001 	eor.w	r0, r0, r1
 80a4ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4ee0:	4770      	bx	lr
 80a4ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a4eea:	4770      	bx	lr

080a4eec <__aeabi_fdiv>:
 80a4eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4ef4:	bf1e      	ittt	ne
 80a4ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4efa:	ea92 0f0c 	teqne	r2, ip
 80a4efe:	ea93 0f0c 	teqne	r3, ip
 80a4f02:	d069      	beq.n	80a4fd8 <__aeabi_fdiv+0xec>
 80a4f04:	eba2 0203 	sub.w	r2, r2, r3
 80a4f08:	ea80 0c01 	eor.w	ip, r0, r1
 80a4f0c:	0249      	lsls	r1, r1, #9
 80a4f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a4f12:	d037      	beq.n	80a4f84 <__aeabi_fdiv+0x98>
 80a4f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a4f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a4f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a4f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4f24:	428b      	cmp	r3, r1
 80a4f26:	bf38      	it	cc
 80a4f28:	005b      	lslcc	r3, r3, #1
 80a4f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a4f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a4f32:	428b      	cmp	r3, r1
 80a4f34:	bf24      	itt	cs
 80a4f36:	1a5b      	subcs	r3, r3, r1
 80a4f38:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4f40:	bf24      	itt	cs
 80a4f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a4f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a4f4e:	bf24      	itt	cs
 80a4f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a4f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a4f5c:	bf24      	itt	cs
 80a4f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a4f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4f66:	011b      	lsls	r3, r3, #4
 80a4f68:	bf18      	it	ne
 80a4f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a4f6e:	d1e0      	bne.n	80a4f32 <__aeabi_fdiv+0x46>
 80a4f70:	2afd      	cmp	r2, #253	; 0xfd
 80a4f72:	f63f af50 	bhi.w	80a4e16 <__aeabi_fmul+0x92>
 80a4f76:	428b      	cmp	r3, r1
 80a4f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4f7c:	bf08      	it	eq
 80a4f7e:	f020 0001 	biceq.w	r0, r0, #1
 80a4f82:	4770      	bx	lr
 80a4f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4f8c:	327f      	adds	r2, #127	; 0x7f
 80a4f8e:	bfc2      	ittt	gt
 80a4f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4f98:	4770      	bxgt	lr
 80a4f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4f9e:	f04f 0300 	mov.w	r3, #0
 80a4fa2:	3a01      	subs	r2, #1
 80a4fa4:	e737      	b.n	80a4e16 <__aeabi_fmul+0x92>
 80a4fa6:	f092 0f00 	teq	r2, #0
 80a4faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4fae:	bf02      	ittt	eq
 80a4fb0:	0040      	lsleq	r0, r0, #1
 80a4fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4fb6:	3a01      	subeq	r2, #1
 80a4fb8:	d0f9      	beq.n	80a4fae <__aeabi_fdiv+0xc2>
 80a4fba:	ea40 000c 	orr.w	r0, r0, ip
 80a4fbe:	f093 0f00 	teq	r3, #0
 80a4fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4fc6:	bf02      	ittt	eq
 80a4fc8:	0049      	lsleq	r1, r1, #1
 80a4fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4fce:	3b01      	subeq	r3, #1
 80a4fd0:	d0f9      	beq.n	80a4fc6 <__aeabi_fdiv+0xda>
 80a4fd2:	ea41 010c 	orr.w	r1, r1, ip
 80a4fd6:	e795      	b.n	80a4f04 <__aeabi_fdiv+0x18>
 80a4fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4fdc:	ea92 0f0c 	teq	r2, ip
 80a4fe0:	d108      	bne.n	80a4ff4 <__aeabi_fdiv+0x108>
 80a4fe2:	0242      	lsls	r2, r0, #9
 80a4fe4:	f47f af7d 	bne.w	80a4ee2 <__aeabi_fmul+0x15e>
 80a4fe8:	ea93 0f0c 	teq	r3, ip
 80a4fec:	f47f af70 	bne.w	80a4ed0 <__aeabi_fmul+0x14c>
 80a4ff0:	4608      	mov	r0, r1
 80a4ff2:	e776      	b.n	80a4ee2 <__aeabi_fmul+0x15e>
 80a4ff4:	ea93 0f0c 	teq	r3, ip
 80a4ff8:	d104      	bne.n	80a5004 <__aeabi_fdiv+0x118>
 80a4ffa:	024b      	lsls	r3, r1, #9
 80a4ffc:	f43f af4c 	beq.w	80a4e98 <__aeabi_fmul+0x114>
 80a5000:	4608      	mov	r0, r1
 80a5002:	e76e      	b.n	80a4ee2 <__aeabi_fmul+0x15e>
 80a5004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5008:	bf18      	it	ne
 80a500a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a500e:	d1ca      	bne.n	80a4fa6 <__aeabi_fdiv+0xba>
 80a5010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a5014:	f47f af5c 	bne.w	80a4ed0 <__aeabi_fmul+0x14c>
 80a5018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a501c:	f47f af3c 	bne.w	80a4e98 <__aeabi_fmul+0x114>
 80a5020:	e75f      	b.n	80a4ee2 <__aeabi_fmul+0x15e>
 80a5022:	bf00      	nop

080a5024 <__gesf2>:
 80a5024:	f04f 3cff 	mov.w	ip, #4294967295
 80a5028:	e006      	b.n	80a5038 <__cmpsf2+0x4>
 80a502a:	bf00      	nop

080a502c <__lesf2>:
 80a502c:	f04f 0c01 	mov.w	ip, #1
 80a5030:	e002      	b.n	80a5038 <__cmpsf2+0x4>
 80a5032:	bf00      	nop

080a5034 <__cmpsf2>:
 80a5034:	f04f 0c01 	mov.w	ip, #1
 80a5038:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a503c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a5040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5048:	bf18      	it	ne
 80a504a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a504e:	d011      	beq.n	80a5074 <__cmpsf2+0x40>
 80a5050:	b001      	add	sp, #4
 80a5052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a5056:	bf18      	it	ne
 80a5058:	ea90 0f01 	teqne	r0, r1
 80a505c:	bf58      	it	pl
 80a505e:	ebb2 0003 	subspl.w	r0, r2, r3
 80a5062:	bf88      	it	hi
 80a5064:	17c8      	asrhi	r0, r1, #31
 80a5066:	bf38      	it	cc
 80a5068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a506c:	bf18      	it	ne
 80a506e:	f040 0001 	orrne.w	r0, r0, #1
 80a5072:	4770      	bx	lr
 80a5074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5078:	d102      	bne.n	80a5080 <__cmpsf2+0x4c>
 80a507a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a507e:	d105      	bne.n	80a508c <__cmpsf2+0x58>
 80a5080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a5084:	d1e4      	bne.n	80a5050 <__cmpsf2+0x1c>
 80a5086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a508a:	d0e1      	beq.n	80a5050 <__cmpsf2+0x1c>
 80a508c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5090:	4770      	bx	lr
 80a5092:	bf00      	nop

080a5094 <__aeabi_cfrcmple>:
 80a5094:	4684      	mov	ip, r0
 80a5096:	4608      	mov	r0, r1
 80a5098:	4661      	mov	r1, ip
 80a509a:	e7ff      	b.n	80a509c <__aeabi_cfcmpeq>

080a509c <__aeabi_cfcmpeq>:
 80a509c:	b50f      	push	{r0, r1, r2, r3, lr}
 80a509e:	f7ff ffc9 	bl	80a5034 <__cmpsf2>
 80a50a2:	2800      	cmp	r0, #0
 80a50a4:	bf48      	it	mi
 80a50a6:	f110 0f00 	cmnmi.w	r0, #0
 80a50aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a50ac <__aeabi_fcmpeq>:
 80a50ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a50b0:	f7ff fff4 	bl	80a509c <__aeabi_cfcmpeq>
 80a50b4:	bf0c      	ite	eq
 80a50b6:	2001      	moveq	r0, #1
 80a50b8:	2000      	movne	r0, #0
 80a50ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80a50be:	bf00      	nop

080a50c0 <__aeabi_fcmplt>:
 80a50c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a50c4:	f7ff ffea 	bl	80a509c <__aeabi_cfcmpeq>
 80a50c8:	bf34      	ite	cc
 80a50ca:	2001      	movcc	r0, #1
 80a50cc:	2000      	movcs	r0, #0
 80a50ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80a50d2:	bf00      	nop

080a50d4 <__aeabi_fcmple>:
 80a50d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a50d8:	f7ff ffe0 	bl	80a509c <__aeabi_cfcmpeq>
 80a50dc:	bf94      	ite	ls
 80a50de:	2001      	movls	r0, #1
 80a50e0:	2000      	movhi	r0, #0
 80a50e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a50e6:	bf00      	nop

080a50e8 <__aeabi_fcmpge>:
 80a50e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a50ec:	f7ff ffd2 	bl	80a5094 <__aeabi_cfrcmple>
 80a50f0:	bf94      	ite	ls
 80a50f2:	2001      	movls	r0, #1
 80a50f4:	2000      	movhi	r0, #0
 80a50f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a50fa:	bf00      	nop

080a50fc <__aeabi_fcmpgt>:
 80a50fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5100:	f7ff ffc8 	bl	80a5094 <__aeabi_cfrcmple>
 80a5104:	bf34      	ite	cc
 80a5106:	2001      	movcc	r0, #1
 80a5108:	2000      	movcs	r0, #0
 80a510a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a510e:	bf00      	nop

080a5110 <__aeabi_f2uiz>:
 80a5110:	0042      	lsls	r2, r0, #1
 80a5112:	d20e      	bcs.n	80a5132 <__aeabi_f2uiz+0x22>
 80a5114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a5118:	d30b      	bcc.n	80a5132 <__aeabi_f2uiz+0x22>
 80a511a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a511e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a5122:	d409      	bmi.n	80a5138 <__aeabi_f2uiz+0x28>
 80a5124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a5128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a512c:	fa23 f002 	lsr.w	r0, r3, r2
 80a5130:	4770      	bx	lr
 80a5132:	f04f 0000 	mov.w	r0, #0
 80a5136:	4770      	bx	lr
 80a5138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a513c:	d101      	bne.n	80a5142 <__aeabi_f2uiz+0x32>
 80a513e:	0242      	lsls	r2, r0, #9
 80a5140:	d102      	bne.n	80a5148 <__aeabi_f2uiz+0x38>
 80a5142:	f04f 30ff 	mov.w	r0, #4294967295
 80a5146:	4770      	bx	lr
 80a5148:	f04f 0000 	mov.w	r0, #0
 80a514c:	4770      	bx	lr
 80a514e:	bf00      	nop

080a5150 <__cxa_atexit>:
 80a5150:	b510      	push	{r4, lr}
 80a5152:	4c05      	ldr	r4, [pc, #20]	; (80a5168 <__cxa_atexit+0x18>)
 80a5154:	4613      	mov	r3, r2
 80a5156:	b12c      	cbz	r4, 80a5164 <__cxa_atexit+0x14>
 80a5158:	460a      	mov	r2, r1
 80a515a:	4601      	mov	r1, r0
 80a515c:	2002      	movs	r0, #2
 80a515e:	f3af 8000 	nop.w
 80a5162:	bd10      	pop	{r4, pc}
 80a5164:	4620      	mov	r0, r4
 80a5166:	bd10      	pop	{r4, pc}
 80a5168:	00000000 	.word	0x00000000

080a516c <memcpy>:
 80a516c:	b510      	push	{r4, lr}
 80a516e:	1e43      	subs	r3, r0, #1
 80a5170:	440a      	add	r2, r1
 80a5172:	4291      	cmp	r1, r2
 80a5174:	d004      	beq.n	80a5180 <memcpy+0x14>
 80a5176:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a517a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a517e:	e7f8      	b.n	80a5172 <memcpy+0x6>
 80a5180:	bd10      	pop	{r4, pc}

080a5182 <memset>:
 80a5182:	4603      	mov	r3, r0
 80a5184:	4402      	add	r2, r0
 80a5186:	4293      	cmp	r3, r2
 80a5188:	d002      	beq.n	80a5190 <memset+0xe>
 80a518a:	f803 1b01 	strb.w	r1, [r3], #1
 80a518e:	e7fa      	b.n	80a5186 <memset+0x4>
 80a5190:	4770      	bx	lr

080a5192 <strlen>:
 80a5192:	4603      	mov	r3, r0
 80a5194:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a5198:	2a00      	cmp	r2, #0
 80a519a:	d1fb      	bne.n	80a5194 <strlen+0x2>
 80a519c:	1a18      	subs	r0, r3, r0
 80a519e:	3801      	subs	r0, #1
 80a51a0:	4770      	bx	lr

080a51a2 <link_code_end>:
	...

080a51a4 <dynalib_user>:
 80a51a4:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a51b4:	0000 0000 6157 7469 6e69 2067 6f66 2072     ....Waiting for 
 80a51c4:	7453 7261 0074 7453 7261 6974 676e 6920     Start.Starting i
 80a51d4:	206e 2035 6573 6f63 646e 2e73 2e2e 4700     n 5 seconds....G
 80a51e4:	214f 4600 6c75 206c 654c 7466 5300 616d     O!.Full Left.Sma
 80a51f4:	6c6c 4c20 6665 0074 6543 746e 7265 5300     ll Left.Center.S
 80a5204:	616d 6c6c 5220 6769 7468 4600 6c75 206c     mall Right.Full 
 80a5214:	6952 6867 0074 7c20 0020 6573 736e 726f     Right. | .sensor
 80a5224:	3020 003a 6573 736e 726f 3120 003a 6573      0:.sensor 1:.se
 80a5234:	736e 726f 3220 003a 6573 736e 726f 3320     nsor 2:.sensor 3
 80a5244:	003a 6f6e 7320 6d61 6c70 0065 5453 504f     :.no sample.STOP
 80a5254:	4550 0044                                   PED.

080a5258 <_ZTV9LIS3DHI2C>:
	...
 80a5260:	2169 080a 216b 080a 21bf 080a 2177 080a     i!..k!...!..w!..
 80a5270:	6564 6976 6563 6e20 746f 6620 756f 646e     device not found
 80a5280:	7200 7365 7465 6974 676e 6c20 7361 4d74     .resetting lastM
 80a5290:	766f 6d65 6e65 2074 6e69 3174 735f 6372     ovement int1_src
 80a52a0:	303d 2578 0078 6572 6163 696c 7262 7461     =0x%x.recalibrat
 80a52b0:	6e69 0067                                   ing.

080a52b4 <_ZTV8SPIClass>:
	...
 80a52bc:	355d 080a 355f 080a 0066 6e6c 6600 006e     ]5.._5..f.ln.fn.
 80a52cc:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
 80a52dc:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
 80a52ec:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 80a52fc:	0069 6564 6174 6c69 2073 203d 6200 7561     i.details = .bau
 80a530c:	0064 6553 6972 6c61 5500 4253 6553 6972     d.Serial.USBSeri
 80a531c:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
 80a532c:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
 80a533c:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
 80a534c:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
 80a535c:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
 80a536c:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
 80a537c:	7265 6100 7070 6e00 6e6f 0065 7274 6361     er.app.none.trac
 80a538c:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
 80a539c:	0072 6170 696e 0063 6c61 006c 005a 2b25     r.panic.all.Z.%+
 80a53ac:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a53bc:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a53cc:	6974 656d 0000 0000                         time....

080a53d4 <_ZTV9IPAddress>:
	...
 80a53dc:	3a1f 080a 3a11 080a 3a13 080a               .:...:...:..

080a53e8 <_ZTV9USBSerial>:
	...
 80a53f0:	3a89 080a 3acd 080a 3aa7 080a 3735 080a     .:...:...:..57..
 80a5400:	3aa1 080a 3a8b 080a 3a93 080a 3ac7 080a     .:...:...:...:..
 80a5410:	3a9b 080a 3a85 080a                         .:...:..

080a5418 <_ZTV11USARTSerial>:
	...
 80a5420:	3c41 080a 3c65 080a 3c71 080a 3735 080a     A<..e<..q<..57..
 80a5430:	3c4d 080a 3c59 080a 3c53 080a 3c5f 080a     M<..Y<..S<.._<..
 80a5440:	3c43 080a 3c47 080a                         C<..G<..

080a5448 <_ZTV7TwoWire>:
	...
 80a5450:	3d15 080a 3d5f 080a 3d37 080a 3d17 080a     .=.._=..7=...=..
 80a5460:	3d3f 080a 3d47 080a 3d4f 080a 3d57 080a     ?=..G=..O=..W=..

080a5470 <_ZTVN5spark9WiFiClassE>:
	...
 80a5478:	3de7 080a                                   .=..

080a547c <link_const_variable_data_end>:
 80a547c:	080a14e1 	.word	0x080a14e1
 80a5480:	080a2165 	.word	0x080a2165
 80a5484:	080a23b9 	.word	0x080a23b9
 80a5488:	080a3659 	.word	0x080a3659
 80a548c:	080a3871 	.word	0x080a3871
 80a5490:	080a3881 	.word	0x080a3881
 80a5494:	080a3df1 	.word	0x080a3df1
 80a5498:	080a3ed5 	.word	0x080a3ed5
 80a549c:	080a3f19 	.word	0x080a3f19
 80a54a0:	080a3f95 	.word	0x080a3f95
 80a54a4:	080a4019 	.word	0x080a4019
 80a54a8:	080a40dd 	.word	0x080a40dd
 80a54ac:	080a41a1 	.word	0x080a41a1
