
C:/src/battlebots-sumo/v3/fuzzy/target/fuzzy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005938  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a5950  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000064  20000300  080a5954  00030300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000062c  20000364  20000364  00040364  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a59b8  080a59b8  000359b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a59e0  080a59e0  000359e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000a87f3  00000000  00000000  000359e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00011535  00000000  00000000  000de1d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00016056  00000000  00000000  000ef70c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002118  00000000  00000000  00105762  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000031b8  00000000  00000000  0010787a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00025562  00000000  00000000  0010aa32  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000262d3  00000000  00000000  0012ff94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00090c82  00000000  00000000  00156267  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bcf4  00000000  00000000  001e6eec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	20 56 0a 08                                          V..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f005 fadb 	bl	80a55e8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f005 fae0 	bl	80a55fe <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a5954 	.word	0x080a5954
 80a004c:	20000364 	.word	0x20000364
 80a0050:	20000364 	.word	0x20000364
 80a0054:	20000990 	.word	0x20000990
 80a0058:	20000990 	.word	0x20000990

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f003 fc61 	bl	80a3924 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a591c 	.word	0x080a591c
 80a0084:	080a5950 	.word	0x080a5950

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f001 b896 	b.w	80a11b8 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f001 f8a5 	bl	80a11dc <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f003 bc03 	b.w	80a38a0 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f003 b9df 	b.w	80a345c <malloc>

080a009e <_ZdlPv>:
 80a009e:	f003 b9e5 	b.w	80a346c <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z5FLISRv>:
// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
unsigned long lastPrintSample = 0;

void FLISR() {
 80a00b4:	b508      	push	{r3, lr}
    FLflag = digitalRead(FL);
 80a00b6:	4b05      	ldr	r3, [pc, #20]	; (80a00cc <_Z5FLISRv+0x18>)
 80a00b8:	8818      	ldrh	r0, [r3, #0]
 80a00ba:	f004 f933 	bl	80a4324 <digitalRead>
 80a00be:	4b04      	ldr	r3, [pc, #16]	; (80a00d0 <_Z5FLISRv+0x1c>)
 80a00c0:	3000      	adds	r0, #0
 80a00c2:	bf18      	it	ne
 80a00c4:	2001      	movne	r0, #1
 80a00c6:	7018      	strb	r0, [r3, #0]
 80a00c8:	bd08      	pop	{r3, pc}
 80a00ca:	bf00      	nop
 80a00cc:	20000328 	.word	0x20000328
 80a00d0:	20000324 	.word	0x20000324

080a00d4 <_Z5FRISRv>:
}

void FRISR() {
 80a00d4:	b508      	push	{r3, lr}
    FRflag = digitalRead(FR);
 80a00d6:	4b05      	ldr	r3, [pc, #20]	; (80a00ec <_Z5FRISRv+0x18>)
 80a00d8:	8818      	ldrh	r0, [r3, #0]
 80a00da:	f004 f923 	bl	80a4324 <digitalRead>
 80a00de:	4b04      	ldr	r3, [pc, #16]	; (80a00f0 <_Z5FRISRv+0x1c>)
 80a00e0:	3000      	adds	r0, #0
 80a00e2:	bf18      	it	ne
 80a00e4:	2001      	movne	r0, #1
 80a00e6:	7018      	strb	r0, [r3, #0]
 80a00e8:	bd08      	pop	{r3, pc}
 80a00ea:	bf00      	nop
 80a00ec:	20000318 	.word	0x20000318
 80a00f0:	20000344 	.word	0x20000344

080a00f4 <_Z5BLISRv>:
}

void BLISR() {
 80a00f4:	b508      	push	{r3, lr}
    BLflag = digitalRead(BL);
 80a00f6:	4b05      	ldr	r3, [pc, #20]	; (80a010c <_Z5BLISRv+0x18>)
 80a00f8:	8818      	ldrh	r0, [r3, #0]
 80a00fa:	f004 f913 	bl	80a4324 <digitalRead>
 80a00fe:	4b04      	ldr	r3, [pc, #16]	; (80a0110 <_Z5BLISRv+0x1c>)
 80a0100:	3000      	adds	r0, #0
 80a0102:	bf18      	it	ne
 80a0104:	2001      	movne	r0, #1
 80a0106:	7018      	strb	r0, [r3, #0]
 80a0108:	bd08      	pop	{r3, pc}
 80a010a:	bf00      	nop
 80a010c:	2000031c 	.word	0x2000031c
 80a0110:	2000032c 	.word	0x2000032c

080a0114 <_Z5BRISRv>:
}

void BRISR() {
 80a0114:	b508      	push	{r3, lr}
    BRflag = digitalRead(BR);
 80a0116:	4b05      	ldr	r3, [pc, #20]	; (80a012c <_Z5BRISRv+0x18>)
 80a0118:	8818      	ldrh	r0, [r3, #0]
 80a011a:	f004 f903 	bl	80a4324 <digitalRead>
 80a011e:	4b04      	ldr	r3, [pc, #16]	; (80a0130 <_Z5BRISRv+0x1c>)
 80a0120:	3000      	adds	r0, #0
 80a0122:	bf18      	it	ne
 80a0124:	2001      	movne	r0, #1
 80a0126:	7018      	strb	r0, [r3, #0]
 80a0128:	bd08      	pop	{r3, pc}
 80a012a:	bf00      	nop
 80a012c:	20000320 	.word	0x20000320
 80a0130:	2000035c 	.word	0x2000035c

080a0134 <_Z5RSISRv>:
}

void RSISR() {
 80a0134:	b508      	push	{r3, lr}
    RSflag = digitalRead(RS);
 80a0136:	4b05      	ldr	r3, [pc, #20]	; (80a014c <_Z5RSISRv+0x18>)
 80a0138:	8818      	ldrh	r0, [r3, #0]
 80a013a:	f004 f8f3 	bl	80a4324 <digitalRead>
 80a013e:	4b04      	ldr	r3, [pc, #16]	; (80a0150 <_Z5RSISRv+0x1c>)
 80a0140:	3000      	adds	r0, #0
 80a0142:	bf18      	it	ne
 80a0144:	2001      	movne	r0, #1
 80a0146:	7018      	strb	r0, [r3, #0]
 80a0148:	bd08      	pop	{r3, pc}
 80a014a:	bf00      	nop
 80a014c:	20000300 	.word	0x20000300
 80a0150:	2000041c 	.word	0x2000041c

080a0154 <_Z8tof_initv>:
}

void tof_init() {
 80a0154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pinMode(A0, OUTPUT);
 80a0158:	2101      	movs	r1, #1
 80a015a:	200a      	movs	r0, #10
 80a015c:	f004 f8b8 	bl	80a42d0 <pinMode>
    pinMode(A1, OUTPUT);
 80a0160:	2101      	movs	r1, #1
 80a0162:	200b      	movs	r0, #11
 80a0164:	f004 f8b4 	bl	80a42d0 <pinMode>
    pinMode(A2, OUTPUT);
 80a0168:	2101      	movs	r1, #1
 80a016a:	200c      	movs	r0, #12
 80a016c:	f004 f8b0 	bl	80a42d0 <pinMode>
    pinMode(A3, OUTPUT);
 80a0170:	2101      	movs	r1, #1
 80a0172:	200d      	movs	r0, #13
 80a0174:	f004 f8ac 	bl	80a42d0 <pinMode>
    digitalWrite(A0, LOW);
 80a0178:	2100      	movs	r1, #0
 80a017a:	200a      	movs	r0, #10
 80a017c:	f004 f8b9 	bl	80a42f2 <digitalWrite>
    digitalWrite(A1, LOW);
 80a0180:	2100      	movs	r1, #0
 80a0182:	200b      	movs	r0, #11
 80a0184:	f004 f8b5 	bl	80a42f2 <digitalWrite>
    digitalWrite(A2, LOW);
 80a0188:	2100      	movs	r1, #0
 80a018a:	200c      	movs	r0, #12
 80a018c:	f004 f8b1 	bl	80a42f2 <digitalWrite>
    digitalWrite(A3, LOW);
 80a0190:	2100      	movs	r1, #0
 80a0192:	200d      	movs	r0, #13
 80a0194:	f004 f8ad 	bl	80a42f2 <digitalWrite>
    delay(500);
 80a0198:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a019c:	f003 fb4a 	bl	80a3834 <delay>

    Wire.setSpeed(CLOCK_SPEED_100KHZ);  // need to initialize i2c protocol after driving shdn pins low
 80a01a0:	f004 f90e 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a01a4:	4940      	ldr	r1, [pc, #256]	; (80a02a8 <_Z8tof_initv+0x154>)
 80a01a6:	f004 f82f 	bl	80a4208 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();
 80a01aa:	f004 f909 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a01ae:	f004 f82f 	bl	80a4210 <_ZN7TwoWire5beginEv>

    delay(10);
 80a01b2:	200a      	movs	r0, #10
 80a01b4:	f003 fb3e 	bl	80a3834 <delay>
    digitalWrite(A0, HIGH);
 80a01b8:	2101      	movs	r1, #1
 80a01ba:	200a      	movs	r0, #10
 80a01bc:	f004 f899 	bl	80a42f2 <digitalWrite>
    digitalWrite(A1, HIGH);
 80a01c0:	2101      	movs	r1, #1
 80a01c2:	200b      	movs	r0, #11
 80a01c4:	f004 f895 	bl	80a42f2 <digitalWrite>
    digitalWrite(A2, HIGH);
 80a01c8:	2101      	movs	r1, #1
 80a01ca:	200c      	movs	r0, #12
 80a01cc:	f004 f891 	bl	80a42f2 <digitalWrite>
    digitalWrite(A3, HIGH);
 80a01d0:	2101      	movs	r1, #1
 80a01d2:	200d      	movs	r0, #13
 80a01d4:	f004 f88d 	bl	80a42f2 <digitalWrite>
    delay(10);
 80a01d8:	200a      	movs	r0, #10
 80a01da:	f003 fb2b 	bl	80a3834 <delay>
    digitalWrite(A1, LOW);
 80a01de:	2100      	movs	r1, #0
 80a01e0:	200b      	movs	r0, #11
 80a01e2:	f004 f886 	bl	80a42f2 <digitalWrite>
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
 80a01e6:	4f31      	ldr	r7, [pc, #196]	; (80a02ac <_Z8tof_initv+0x158>)
    digitalWrite(A1, HIGH);
    digitalWrite(A2, HIGH);
    digitalWrite(A3, HIGH);
    delay(10);
    digitalWrite(A1, LOW);
    digitalWrite(A2, LOW);
 80a01e8:	2100      	movs	r1, #0
 80a01ea:	200c      	movs	r0, #12
 80a01ec:	f004 f881 	bl	80a42f2 <digitalWrite>
    digitalWrite(A3, LOW);
 80a01f0:	2100      	movs	r1, #0
 80a01f2:	200d      	movs	r0, #13
 80a01f4:	f004 f87d 	bl	80a42f2 <digitalWrite>
    sensor0.init();
 80a01f8:	2101      	movs	r1, #1
 80a01fa:	4638      	mov	r0, r7
 80a01fc:	f001 fcd2 	bl	80a1ba4 <_ZN7VL53L0X4initEb>
    void startContinuous(uint32_t period_ms = 0);
    void stopContinuous(void);
    uint16_t readRangeContinuousMillimeters(void);
    uint16_t readRangeSingleMillimeters(void);

    inline void setTimeout(uint16_t timeout) { io_timeout = timeout; }
 80a0200:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    sensor0.setAddress(0x30);
 80a0204:	2130      	movs	r1, #48	; 0x30
 80a0206:	4638      	mov	r0, r7
 80a0208:	f001 f97d 	bl	80a1506 <_ZN7VL53L0X10setAddressEh>
    sensor0.setTimeout(1000);
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
 80a020c:	4e28      	ldr	r6, [pc, #160]	; (80a02b0 <_Z8tof_initv+0x15c>)
 80a020e:	f8c7 8004 	str.w	r8, [r7, #4]
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
    sensor0.setAddress(0x30);
    sensor0.setTimeout(1000);
    delay(10);
 80a0212:	200a      	movs	r0, #10
 80a0214:	f003 fb0e 	bl	80a3834 <delay>
    digitalWrite(A1, HIGH);
 80a0218:	2101      	movs	r1, #1
 80a021a:	200b      	movs	r0, #11
 80a021c:	f004 f869 	bl	80a42f2 <digitalWrite>
    sensor1.init();
 80a0220:	2101      	movs	r1, #1
 80a0222:	4630      	mov	r0, r6
 80a0224:	f001 fcbe 	bl	80a1ba4 <_ZN7VL53L0X4initEb>
    sensor1.setAddress(0x31);
 80a0228:	2131      	movs	r1, #49	; 0x31
 80a022a:	4630      	mov	r0, r6
 80a022c:	f001 f96b 	bl	80a1506 <_ZN7VL53L0X10setAddressEh>
    sensor1.setTimeout(1000);
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
 80a0230:	4d20      	ldr	r5, [pc, #128]	; (80a02b4 <_Z8tof_initv+0x160>)
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
    sensor1.setAddress(0x31);
    sensor1.setTimeout(1000);
    delay(10);
 80a0232:	200a      	movs	r0, #10
 80a0234:	f8c6 8004 	str.w	r8, [r6, #4]
 80a0238:	f003 fafc 	bl	80a3834 <delay>
    digitalWrite(A2, HIGH);
 80a023c:	2101      	movs	r1, #1
 80a023e:	200c      	movs	r0, #12
 80a0240:	f004 f857 	bl	80a42f2 <digitalWrite>
    sensor2.init();
 80a0244:	2101      	movs	r1, #1
 80a0246:	4628      	mov	r0, r5
 80a0248:	f001 fcac 	bl	80a1ba4 <_ZN7VL53L0X4initEb>
    sensor2.setAddress(0x32);
 80a024c:	2132      	movs	r1, #50	; 0x32
 80a024e:	4628      	mov	r0, r5
 80a0250:	f001 f959 	bl	80a1506 <_ZN7VL53L0X10setAddressEh>
    sensor2.setTimeout(1000);
    delay(10);
    digitalWrite(A3, HIGH);
    sensor3.init();
 80a0254:	4c18      	ldr	r4, [pc, #96]	; (80a02b8 <_Z8tof_initv+0x164>)
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
    sensor2.setAddress(0x32);
    sensor2.setTimeout(1000);
    delay(10);
 80a0256:	200a      	movs	r0, #10
 80a0258:	f8c5 8004 	str.w	r8, [r5, #4]
 80a025c:	f003 faea 	bl	80a3834 <delay>
    digitalWrite(A3, HIGH);
 80a0260:	2101      	movs	r1, #1
 80a0262:	200d      	movs	r0, #13
 80a0264:	f004 f845 	bl	80a42f2 <digitalWrite>
    sensor3.init();
 80a0268:	2101      	movs	r1, #1
 80a026a:	4620      	mov	r0, r4
 80a026c:	f001 fc9a 	bl	80a1ba4 <_ZN7VL53L0X4initEb>
    sensor3.setAddress(0x33);
 80a0270:	2133      	movs	r1, #51	; 0x33
 80a0272:	4620      	mov	r0, r4
 80a0274:	f001 f947 	bl	80a1506 <_ZN7VL53L0X10setAddressEh>
    sensor3.setTimeout(1000);
    delay(10);
 80a0278:	200a      	movs	r0, #10
 80a027a:	f8c4 8004 	str.w	r8, [r4, #4]
 80a027e:	f003 fad9 	bl	80a3834 <delay>

    // Start continuous back-to-back mode (take readings as
    // fast as possible).  To use continuous timed mode
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
 80a0282:	4638      	mov	r0, r7
 80a0284:	210a      	movs	r1, #10
 80a0286:	f001 fa5a 	bl	80a173e <_ZN7VL53L0X15startContinuousEm>
    sensor1.startContinuous(10);
 80a028a:	4630      	mov	r0, r6
 80a028c:	210a      	movs	r1, #10
 80a028e:	f001 fa56 	bl	80a173e <_ZN7VL53L0X15startContinuousEm>
    sensor2.startContinuous(10);
 80a0292:	4628      	mov	r0, r5
 80a0294:	210a      	movs	r1, #10
 80a0296:	f001 fa52 	bl	80a173e <_ZN7VL53L0X15startContinuousEm>
    sensor3.startContinuous(10);			
 80a029a:	4620      	mov	r0, r4
}
 80a029c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
    sensor1.startContinuous(10);
    sensor2.startContinuous(10);
    sensor3.startContinuous(10);			
 80a02a0:	210a      	movs	r1, #10
 80a02a2:	f001 ba4c 	b.w	80a173e <_ZN7VL53L0X15startContinuousEm>
 80a02a6:	bf00      	nop
 80a02a8:	000186a0 	.word	0x000186a0
 80a02ac:	200003a8 	.word	0x200003a8
 80a02b0:	200003c0 	.word	0x200003c0
 80a02b4:	200003d8 	.word	0x200003d8
 80a02b8:	200003f0 	.word	0x200003f0

080a02bc <_Z10accel_initv>:
}

void accel_init() {
 80a02bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  LIS3DHConfig config;
 80a02be:	a801      	add	r0, sp, #4
 80a02c0:	f001 ff45 	bl	80a214e <_ZN12LIS3DHConfigC1Ev>
  config.setAccelMode(LIS3DH::RATE_400_HZ);
 80a02c4:	2170      	movs	r1, #112	; 0x70
 80a02c6:	a801      	add	r0, sp, #4
 80a02c8:	f001 ff4e 	bl	80a2168 <_ZN12LIS3DHConfig12setAccelModeEh>

  bool setupSuccess = accel.setup(config);
 80a02cc:	a901      	add	r1, sp, #4
 80a02ce:	4806      	ldr	r0, [pc, #24]	; (80a02e8 <_Z10accel_initv+0x2c>)
 80a02d0:	f001 ffa2 	bl	80a2218 <_ZN6LIS3DH5setupER12LIS3DHConfig>
 80a02d4:	4604      	mov	r4, r0
  Serial.printlnf("setupSuccess=%d", setupSuccess);
 80a02d6:	f003 fe53 	bl	80a3f80 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a02da:	4623      	mov	r3, r4
 80a02dc:	4a03      	ldr	r2, [pc, #12]	; (80a02ec <_Z10accel_initv+0x30>)
 80a02de:	2101      	movs	r1, #1
 80a02e0:	f003 fa3f 	bl	80a3762 <_ZN5Print11printf_implEbPKcz>
}
 80a02e4:	b004      	add	sp, #16
 80a02e6:	bd10      	pop	{r4, pc}
 80a02e8:	20000380 	.word	0x20000380
 80a02ec:	080a5634 	.word	0x080a5634

080a02f0 <_Z11others_initv>:

void others_init() {
 80a02f0:	b508      	push	{r3, lr}
	// Line sensors
  	pinMode(FL, INPUT);
 80a02f2:	4b15      	ldr	r3, [pc, #84]	; (80a0348 <_Z11others_initv+0x58>)
 80a02f4:	2100      	movs	r1, #0
 80a02f6:	8818      	ldrh	r0, [r3, #0]
 80a02f8:	f003 ffea 	bl	80a42d0 <pinMode>
  	pinMode(FR, INPUT);
 80a02fc:	4b13      	ldr	r3, [pc, #76]	; (80a034c <_Z11others_initv+0x5c>)
 80a02fe:	2100      	movs	r1, #0
 80a0300:	8818      	ldrh	r0, [r3, #0]
 80a0302:	f003 ffe5 	bl	80a42d0 <pinMode>
  	pinMode(BL, INPUT);
 80a0306:	4b12      	ldr	r3, [pc, #72]	; (80a0350 <_Z11others_initv+0x60>)
 80a0308:	2100      	movs	r1, #0
 80a030a:	8818      	ldrh	r0, [r3, #0]
 80a030c:	f003 ffe0 	bl	80a42d0 <pinMode>
  	pinMode(BR, INPUT);
 80a0310:	4b10      	ldr	r3, [pc, #64]	; (80a0354 <_Z11others_initv+0x64>)
 80a0312:	2100      	movs	r1, #0
 80a0314:	8818      	ldrh	r0, [r3, #0]
 80a0316:	f003 ffdb 	bl	80a42d0 <pinMode>
  	// Remote switch
  	pinMode(RS, INPUT);
 80a031a:	4b0f      	ldr	r3, [pc, #60]	; (80a0358 <_Z11others_initv+0x68>)
 80a031c:	2100      	movs	r1, #0
 80a031e:	8818      	ldrh	r0, [r3, #0]
 80a0320:	f003 ffd6 	bl	80a42d0 <pinMode>
  	// Car ESCs
  	pinMode(Lmotor, OUTPUT);
 80a0324:	4b0d      	ldr	r3, [pc, #52]	; (80a035c <_Z11others_initv+0x6c>)
 80a0326:	2101      	movs	r1, #1
 80a0328:	8818      	ldrh	r0, [r3, #0]
 80a032a:	f003 ffd1 	bl	80a42d0 <pinMode>
  	pinMode(Rmotor, OUTPUT);
 80a032e:	4b0c      	ldr	r3, [pc, #48]	; (80a0360 <_Z11others_initv+0x70>)
 80a0330:	2101      	movs	r1, #1
 80a0332:	8818      	ldrh	r0, [r3, #0]
 80a0334:	f003 ffcc 	bl	80a42d0 <pinMode>

  	// ***Remove for competition***
  	// ***Serial monitor***
  	Serial.begin(9600);	// *** need to modify before comp ***
 80a0338:	f003 fe22 	bl	80a3f80 <_Z16_fetch_usbserialv>
}
 80a033c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  	pinMode(Lmotor, OUTPUT);
  	pinMode(Rmotor, OUTPUT);

  	// ***Remove for competition***
  	// ***Serial monitor***
  	Serial.begin(9600);	// *** need to modify before comp ***
 80a0340:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0344:	f003 be02 	b.w	80a3f4c <_ZN9USBSerial5beginEl>
 80a0348:	20000328 	.word	0x20000328
 80a034c:	20000318 	.word	0x20000318
 80a0350:	2000031c 	.word	0x2000031c
 80a0354:	20000320 	.word	0x20000320
 80a0358:	20000300 	.word	0x20000300
 80a035c:	20000348 	.word	0x20000348
 80a0360:	2000033c 	.word	0x2000033c

080a0364 <_Z14interrupt_initv>:
}

void interrupt_init() {
 80a0364:	b513      	push	{r0, r1, r4, lr}
	// Line sensors
	attachInterrupt(FL, FLISR, CHANGE);
 80a0366:	4b18      	ldr	r3, [pc, #96]	; (80a03c8 <_Z14interrupt_initv+0x64>)
 80a0368:	2400      	movs	r4, #0
 80a036a:	8818      	ldrh	r0, [r3, #0]
 80a036c:	4622      	mov	r2, r4
 80a036e:	9400      	str	r4, [sp, #0]
 80a0370:	f04f 33ff 	mov.w	r3, #4294967295
 80a0374:	4915      	ldr	r1, [pc, #84]	; (80a03cc <_Z14interrupt_initv+0x68>)
 80a0376:	f003 fe67 	bl	80a4048 <_Z15attachInterrupttPFvvE13InterruptModeah>
   	attachInterrupt(FR, FRISR, CHANGE);
 80a037a:	4b15      	ldr	r3, [pc, #84]	; (80a03d0 <_Z14interrupt_initv+0x6c>)
 80a037c:	4622      	mov	r2, r4
 80a037e:	8818      	ldrh	r0, [r3, #0]
 80a0380:	4914      	ldr	r1, [pc, #80]	; (80a03d4 <_Z14interrupt_initv+0x70>)
 80a0382:	9400      	str	r4, [sp, #0]
 80a0384:	f04f 33ff 	mov.w	r3, #4294967295
 80a0388:	f003 fe5e 	bl	80a4048 <_Z15attachInterrupttPFvvE13InterruptModeah>
   	attachInterrupt(BL, BLISR, CHANGE);
 80a038c:	4b12      	ldr	r3, [pc, #72]	; (80a03d8 <_Z14interrupt_initv+0x74>)
 80a038e:	4622      	mov	r2, r4
 80a0390:	8818      	ldrh	r0, [r3, #0]
 80a0392:	4912      	ldr	r1, [pc, #72]	; (80a03dc <_Z14interrupt_initv+0x78>)
 80a0394:	9400      	str	r4, [sp, #0]
 80a0396:	f04f 33ff 	mov.w	r3, #4294967295
 80a039a:	f003 fe55 	bl	80a4048 <_Z15attachInterrupttPFvvE13InterruptModeah>
   	attachInterrupt(BR, BRISR, CHANGE);
 80a039e:	4b10      	ldr	r3, [pc, #64]	; (80a03e0 <_Z14interrupt_initv+0x7c>)
 80a03a0:	4622      	mov	r2, r4
 80a03a2:	8818      	ldrh	r0, [r3, #0]
 80a03a4:	490f      	ldr	r1, [pc, #60]	; (80a03e4 <_Z14interrupt_initv+0x80>)
 80a03a6:	9400      	str	r4, [sp, #0]
 80a03a8:	f04f 33ff 	mov.w	r3, #4294967295
 80a03ac:	f003 fe4c 	bl	80a4048 <_Z15attachInterrupttPFvvE13InterruptModeah>
   	// Remote switch
   	attachInterrupt(RS, RSISR, CHANGE);
 80a03b0:	4b0d      	ldr	r3, [pc, #52]	; (80a03e8 <_Z14interrupt_initv+0x84>)
 80a03b2:	4622      	mov	r2, r4
 80a03b4:	8818      	ldrh	r0, [r3, #0]
 80a03b6:	490d      	ldr	r1, [pc, #52]	; (80a03ec <_Z14interrupt_initv+0x88>)
 80a03b8:	9400      	str	r4, [sp, #0]
 80a03ba:	f04f 33ff 	mov.w	r3, #4294967295
 80a03be:	f003 fe43 	bl	80a4048 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
 80a03c2:	b002      	add	sp, #8
 80a03c4:	bd10      	pop	{r4, pc}
 80a03c6:	bf00      	nop
 80a03c8:	20000328 	.word	0x20000328
 80a03cc:	080a00b5 	.word	0x080a00b5
 80a03d0:	20000318 	.word	0x20000318
 80a03d4:	080a00d5 	.word	0x080a00d5
 80a03d8:	2000031c 	.word	0x2000031c
 80a03dc:	080a00f5 	.word	0x080a00f5
 80a03e0:	20000320 	.word	0x20000320
 80a03e4:	080a0115 	.word	0x080a0115
 80a03e8:	20000300 	.word	0x20000300
 80a03ec:	080a0135 	.word	0x080a0135

080a03f0 <_Z8ESC_initv>:

void ESC_init() {
 80a03f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Necessary for Servo objects
  	LESC.attach(Lmotor);
 80a03f2:	4b13      	ldr	r3, [pc, #76]	; (80a0440 <_Z8ESC_initv+0x50>)
 80a03f4:	4d13      	ldr	r5, [pc, #76]	; (80a0444 <_Z8ESC_initv+0x54>)
 80a03f6:	2600      	movs	r6, #0
 80a03f8:	27b4      	movs	r7, #180	; 0xb4
 80a03fa:	8819      	ldrh	r1, [r3, #0]
 80a03fc:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a0400:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80a0404:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a0408:	4628      	mov	r0, r5
 80a040a:	f003 f8a2 	bl	80a3552 <_ZN5Servo6attachEtttss>
  	RESC.attach(Rmotor);
 80a040e:	4c0e      	ldr	r4, [pc, #56]	; (80a0448 <_Z8ESC_initv+0x58>)
 80a0410:	4b0e      	ldr	r3, [pc, #56]	; (80a044c <_Z8ESC_initv+0x5c>)
 80a0412:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a0416:	8819      	ldrh	r1, [r3, #0]
 80a0418:	4620      	mov	r0, r4
 80a041a:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a041e:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80a0422:	f003 f896 	bl	80a3552 <_ZN5Servo6attachEtttss>
  	// Write stop command
  	LESC.writeMicroseconds(1500);
 80a0426:	4628      	mov	r0, r5
 80a0428:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a042c:	f003 f85d 	bl	80a34ea <_ZN5Servo17writeMicrosecondsEt>
  	RESC.writeMicroseconds(1500);
 80a0430:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a0434:	4620      	mov	r0, r4
}
 80a0436:	b003      	add	sp, #12
 80a0438:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	// Necessary for Servo objects
  	LESC.attach(Lmotor);
  	RESC.attach(Rmotor);
  	// Write stop command
  	LESC.writeMicroseconds(1500);
  	RESC.writeMicroseconds(1500);
 80a043c:	f003 b855 	b.w	80a34ea <_ZN5Servo17writeMicrosecondsEt>
 80a0440:	20000348 	.word	0x20000348
 80a0444:	20000370 	.word	0x20000370
 80a0448:	2000040c 	.word	0x2000040c
 80a044c:	2000033c 	.word	0x2000033c

080a0450 <_Z10robot_initv>:
}

void robot_init() {
 80a0450:	b510      	push	{r4, lr}
  while(!RSflag) {    // initial LOW
 80a0452:	4c0c      	ldr	r4, [pc, #48]	; (80a0484 <_Z10robot_initv+0x34>)
 80a0454:	7823      	ldrb	r3, [r4, #0]
 80a0456:	b92b      	cbnz	r3, 80a0464 <_Z10robot_initv+0x14>
    Serial.println("Waiting for Start");
 80a0458:	f003 fd92 	bl	80a3f80 <_Z16_fetch_usbserialv>
 80a045c:	490a      	ldr	r1, [pc, #40]	; (80a0488 <_Z10robot_initv+0x38>)
 80a045e:	f003 f94a 	bl	80a36f6 <_ZN5Print7printlnEPKc>
  	LESC.writeMicroseconds(1500);
  	RESC.writeMicroseconds(1500);
}

void robot_init() {
  while(!RSflag) {    // initial LOW
 80a0462:	e7f7      	b.n	80a0454 <_Z10robot_initv+0x4>
    Serial.println("Waiting for Start");
  }
  Serial.println("Starting in 5 seconds...");
 80a0464:	f003 fd8c 	bl	80a3f80 <_Z16_fetch_usbserialv>
 80a0468:	4908      	ldr	r1, [pc, #32]	; (80a048c <_Z10robot_initv+0x3c>)
 80a046a:	f003 f944 	bl	80a36f6 <_ZN5Print7printlnEPKc>
  delay(5000);
 80a046e:	f241 3088 	movw	r0, #5000	; 0x1388
 80a0472:	f003 f9df 	bl	80a3834 <delay>
  Serial.println("GO!");    
 80a0476:	f003 fd83 	bl	80a3f80 <_Z16_fetch_usbserialv>
}
 80a047a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  while(!RSflag) {    // initial LOW
    Serial.println("Waiting for Start");
  }
  Serial.println("Starting in 5 seconds...");
  delay(5000);
  Serial.println("GO!");    
 80a047e:	4904      	ldr	r1, [pc, #16]	; (80a0490 <_Z10robot_initv+0x40>)
 80a0480:	f003 b939 	b.w	80a36f6 <_ZN5Print7printlnEPKc>
 80a0484:	2000041c 	.word	0x2000041c
 80a0488:	080a5644 	.word	0x080a5644
 80a048c:	080a5656 	.word	0x080a5656
 80a0490:	080a566f 	.word	0x080a566f

080a0494 <_Z10fuzzy_initv>:
}

void fuzzy_init() {
 80a0494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // low = far, high = close

  // INPUT: 1 of 4
  FuzzyInput* LL_input = new FuzzyInput(1);
 80a0498:	2010      	movs	r0, #16
  Serial.println("Starting in 5 seconds...");
  delay(5000);
  Serial.println("GO!");    
}

void fuzzy_init() {
 80a049a:	b099      	sub	sp, #100	; 0x64
  // low = far, high = close

  // INPUT: 1 of 4
  FuzzyInput* LL_input = new FuzzyInput(1);
 80a049c:	f7ff fdfd 	bl	80a009a <_Znwj>
 80a04a0:	4604      	mov	r4, r0
 80a04a2:	b110      	cbz	r0, 80a04aa <_Z10fuzzy_initv+0x16>
 80a04a4:	2101      	movs	r1, #1
 80a04a6:	f002 f956 	bl	80a2756 <_ZN10FuzzyInputC1Ei>
  FuzzySet* LL_low = new FuzzySet(low1, low2, low3, low4);
 80a04aa:	2014      	movs	r0, #20
 80a04ac:	f7ff fdf5 	bl	80a009a <_Znwj>
 80a04b0:	4605      	mov	r5, r0
 80a04b2:	b1c8      	cbz	r0, 80a04e8 <_Z10fuzzy_initv+0x54>
 80a04b4:	4ba2      	ldr	r3, [pc, #648]	; (80a0740 <_Z10fuzzy_initv+0x2ac>)
 80a04b6:	6818      	ldr	r0, [r3, #0]
 80a04b8:	f004 fe4e 	bl	80a5158 <__aeabi_i2f>
 80a04bc:	4ba1      	ldr	r3, [pc, #644]	; (80a0744 <_Z10fuzzy_initv+0x2b0>)
 80a04be:	4680      	mov	r8, r0
 80a04c0:	6818      	ldr	r0, [r3, #0]
 80a04c2:	f004 fe49 	bl	80a5158 <__aeabi_i2f>
 80a04c6:	4ba0      	ldr	r3, [pc, #640]	; (80a0748 <_Z10fuzzy_initv+0x2b4>)
 80a04c8:	4607      	mov	r7, r0
 80a04ca:	6818      	ldr	r0, [r3, #0]
 80a04cc:	f004 fe44 	bl	80a5158 <__aeabi_i2f>
 80a04d0:	4b9e      	ldr	r3, [pc, #632]	; (80a074c <_Z10fuzzy_initv+0x2b8>)
 80a04d2:	4606      	mov	r6, r0
 80a04d4:	6818      	ldr	r0, [r3, #0]
 80a04d6:	f004 fe3f 	bl	80a5158 <__aeabi_i2f>
 80a04da:	4643      	mov	r3, r8
 80a04dc:	9000      	str	r0, [sp, #0]
 80a04de:	463a      	mov	r2, r7
 80a04e0:	4631      	mov	r1, r6
 80a04e2:	4628      	mov	r0, r5
 80a04e4:	f002 fbb3 	bl	80a2c4e <_ZN8FuzzySetC1Effff>
  FuzzySet* LL_med = new FuzzySet(med1, med2, med3, med4);
 80a04e8:	2014      	movs	r0, #20
 80a04ea:	f7ff fdd6 	bl	80a009a <_Znwj>
 80a04ee:	4680      	mov	r8, r0
 80a04f0:	b1c8      	cbz	r0, 80a0526 <_Z10fuzzy_initv+0x92>
 80a04f2:	4b97      	ldr	r3, [pc, #604]	; (80a0750 <_Z10fuzzy_initv+0x2bc>)
 80a04f4:	6818      	ldr	r0, [r3, #0]
 80a04f6:	f004 fe2f 	bl	80a5158 <__aeabi_i2f>
 80a04fa:	4b96      	ldr	r3, [pc, #600]	; (80a0754 <_Z10fuzzy_initv+0x2c0>)
 80a04fc:	4681      	mov	r9, r0
 80a04fe:	6818      	ldr	r0, [r3, #0]
 80a0500:	f004 fe2a 	bl	80a5158 <__aeabi_i2f>
 80a0504:	4b94      	ldr	r3, [pc, #592]	; (80a0758 <_Z10fuzzy_initv+0x2c4>)
 80a0506:	4607      	mov	r7, r0
 80a0508:	6818      	ldr	r0, [r3, #0]
 80a050a:	f004 fe25 	bl	80a5158 <__aeabi_i2f>
 80a050e:	4b93      	ldr	r3, [pc, #588]	; (80a075c <_Z10fuzzy_initv+0x2c8>)
 80a0510:	4606      	mov	r6, r0
 80a0512:	6818      	ldr	r0, [r3, #0]
 80a0514:	f004 fe20 	bl	80a5158 <__aeabi_i2f>
 80a0518:	464b      	mov	r3, r9
 80a051a:	9000      	str	r0, [sp, #0]
 80a051c:	463a      	mov	r2, r7
 80a051e:	4631      	mov	r1, r6
 80a0520:	4640      	mov	r0, r8
 80a0522:	f002 fb94 	bl	80a2c4e <_ZN8FuzzySetC1Effff>
  FuzzySet* LL_high = new FuzzySet(high1, high2, high3, high4);
 80a0526:	2014      	movs	r0, #20
 80a0528:	f7ff fdb7 	bl	80a009a <_Znwj>
 80a052c:	4607      	mov	r7, r0
 80a052e:	b1c8      	cbz	r0, 80a0564 <_Z10fuzzy_initv+0xd0>
 80a0530:	4b8b      	ldr	r3, [pc, #556]	; (80a0760 <_Z10fuzzy_initv+0x2cc>)
 80a0532:	6818      	ldr	r0, [r3, #0]
 80a0534:	f004 fe10 	bl	80a5158 <__aeabi_i2f>
 80a0538:	4b8a      	ldr	r3, [pc, #552]	; (80a0764 <_Z10fuzzy_initv+0x2d0>)
 80a053a:	4682      	mov	sl, r0
 80a053c:	6818      	ldr	r0, [r3, #0]
 80a053e:	f004 fe0b 	bl	80a5158 <__aeabi_i2f>
 80a0542:	4b89      	ldr	r3, [pc, #548]	; (80a0768 <_Z10fuzzy_initv+0x2d4>)
 80a0544:	4681      	mov	r9, r0
 80a0546:	6818      	ldr	r0, [r3, #0]
 80a0548:	f004 fe06 	bl	80a5158 <__aeabi_i2f>
 80a054c:	4b87      	ldr	r3, [pc, #540]	; (80a076c <_Z10fuzzy_initv+0x2d8>)
 80a054e:	4606      	mov	r6, r0
 80a0550:	6818      	ldr	r0, [r3, #0]
 80a0552:	f004 fe01 	bl	80a5158 <__aeabi_i2f>
 80a0556:	4653      	mov	r3, sl
 80a0558:	9000      	str	r0, [sp, #0]
 80a055a:	464a      	mov	r2, r9
 80a055c:	4631      	mov	r1, r6
 80a055e:	4638      	mov	r0, r7
 80a0560:	f002 fb75 	bl	80a2c4e <_ZN8FuzzySetC1Effff>
  LL_input->addFuzzySet(LL_low);
 80a0564:	4629      	mov	r1, r5
 80a0566:	4620      	mov	r0, r4
 80a0568:	f002 f911 	bl	80a278e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  LL_input->addFuzzySet(LL_med);
  LL_input->addFuzzySet(LL_high);
  fuzzy->addFuzzyInput(LL_input);
 80a056c:	4e80      	ldr	r6, [pc, #512]	; (80a0770 <_Z10fuzzy_initv+0x2dc>)
  FuzzyInput* LL_input = new FuzzyInput(1);
  FuzzySet* LL_low = new FuzzySet(low1, low2, low3, low4);
  FuzzySet* LL_med = new FuzzySet(med1, med2, med3, med4);
  FuzzySet* LL_high = new FuzzySet(high1, high2, high3, high4);
  LL_input->addFuzzySet(LL_low);
  LL_input->addFuzzySet(LL_med);
 80a056e:	4641      	mov	r1, r8
 80a0570:	4620      	mov	r0, r4
 80a0572:	f002 f90c 	bl	80a278e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  LL_input->addFuzzySet(LL_high);
 80a0576:	4639      	mov	r1, r7
 80a0578:	4620      	mov	r0, r4
 80a057a:	f002 f908 	bl	80a278e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyInput(LL_input);
 80a057e:	4621      	mov	r1, r4
 80a0580:	6830      	ldr	r0, [r6, #0]
 80a0582:	f002 fc38 	bl	80a2df6 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>

  // INPUT: 2 of 4
  FuzzyInput* LM_input = new FuzzyInput(2);
 80a0586:	2010      	movs	r0, #16
 80a0588:	f7ff fd87 	bl	80a009a <_Znwj>
 80a058c:	46b3      	mov	fp, r6
 80a058e:	4604      	mov	r4, r0
 80a0590:	b110      	cbz	r0, 80a0598 <_Z10fuzzy_initv+0x104>
 80a0592:	2102      	movs	r1, #2
 80a0594:	f002 f8df 	bl	80a2756 <_ZN10FuzzyInputC1Ei>
  FuzzySet* LM_low = new FuzzySet(low1, low2, low3, low4);
 80a0598:	2014      	movs	r0, #20
 80a059a:	f7ff fd7e 	bl	80a009a <_Znwj>
 80a059e:	4606      	mov	r6, r0
 80a05a0:	b1c8      	cbz	r0, 80a05d6 <_Z10fuzzy_initv+0x142>
 80a05a2:	4b67      	ldr	r3, [pc, #412]	; (80a0740 <_Z10fuzzy_initv+0x2ac>)
 80a05a4:	6818      	ldr	r0, [r3, #0]
 80a05a6:	f004 fdd7 	bl	80a5158 <__aeabi_i2f>
 80a05aa:	4a66      	ldr	r2, [pc, #408]	; (80a0744 <_Z10fuzzy_initv+0x2b0>)
 80a05ac:	9003      	str	r0, [sp, #12]
 80a05ae:	6810      	ldr	r0, [r2, #0]
 80a05b0:	f004 fdd2 	bl	80a5158 <__aeabi_i2f>
 80a05b4:	4a64      	ldr	r2, [pc, #400]	; (80a0748 <_Z10fuzzy_initv+0x2b4>)
 80a05b6:	4682      	mov	sl, r0
 80a05b8:	6810      	ldr	r0, [r2, #0]
 80a05ba:	f004 fdcd 	bl	80a5158 <__aeabi_i2f>
 80a05be:	4a63      	ldr	r2, [pc, #396]	; (80a074c <_Z10fuzzy_initv+0x2b8>)
 80a05c0:	4681      	mov	r9, r0
 80a05c2:	6810      	ldr	r0, [r2, #0]
 80a05c4:	f004 fdc8 	bl	80a5158 <__aeabi_i2f>
 80a05c8:	9b03      	ldr	r3, [sp, #12]
 80a05ca:	9000      	str	r0, [sp, #0]
 80a05cc:	4652      	mov	r2, sl
 80a05ce:	4649      	mov	r1, r9
 80a05d0:	4630      	mov	r0, r6
 80a05d2:	f002 fb3c 	bl	80a2c4e <_ZN8FuzzySetC1Effff>
  FuzzySet* LM_med = new FuzzySet(med1, med2, med3, med4);
 80a05d6:	2014      	movs	r0, #20
 80a05d8:	f7ff fd5f 	bl	80a009a <_Znwj>
 80a05dc:	4681      	mov	r9, r0
 80a05de:	b1c8      	cbz	r0, 80a0614 <_Z10fuzzy_initv+0x180>
 80a05e0:	4b5b      	ldr	r3, [pc, #364]	; (80a0750 <_Z10fuzzy_initv+0x2bc>)
 80a05e2:	6818      	ldr	r0, [r3, #0]
 80a05e4:	f004 fdb8 	bl	80a5158 <__aeabi_i2f>
 80a05e8:	4a5a      	ldr	r2, [pc, #360]	; (80a0754 <_Z10fuzzy_initv+0x2c0>)
 80a05ea:	9004      	str	r0, [sp, #16]
 80a05ec:	6810      	ldr	r0, [r2, #0]
 80a05ee:	f004 fdb3 	bl	80a5158 <__aeabi_i2f>
 80a05f2:	4959      	ldr	r1, [pc, #356]	; (80a0758 <_Z10fuzzy_initv+0x2c4>)
 80a05f4:	9003      	str	r0, [sp, #12]
 80a05f6:	6808      	ldr	r0, [r1, #0]
 80a05f8:	f004 fdae 	bl	80a5158 <__aeabi_i2f>
 80a05fc:	4957      	ldr	r1, [pc, #348]	; (80a075c <_Z10fuzzy_initv+0x2c8>)
 80a05fe:	4682      	mov	sl, r0
 80a0600:	6808      	ldr	r0, [r1, #0]
 80a0602:	f004 fda9 	bl	80a5158 <__aeabi_i2f>
 80a0606:	9b04      	ldr	r3, [sp, #16]
 80a0608:	9000      	str	r0, [sp, #0]
 80a060a:	9a03      	ldr	r2, [sp, #12]
 80a060c:	4651      	mov	r1, sl
 80a060e:	4648      	mov	r0, r9
 80a0610:	f002 fb1d 	bl	80a2c4e <_ZN8FuzzySetC1Effff>
  FuzzySet* LM_high = new FuzzySet(high1, high2, high3, high4);
 80a0614:	2014      	movs	r0, #20
 80a0616:	f7ff fd40 	bl	80a009a <_Znwj>
 80a061a:	4682      	mov	sl, r0
 80a061c:	b1c0      	cbz	r0, 80a0650 <_Z10fuzzy_initv+0x1bc>
 80a061e:	4b50      	ldr	r3, [pc, #320]	; (80a0760 <_Z10fuzzy_initv+0x2cc>)
 80a0620:	6818      	ldr	r0, [r3, #0]
 80a0622:	f004 fd99 	bl	80a5158 <__aeabi_i2f>
 80a0626:	4a4f      	ldr	r2, [pc, #316]	; (80a0764 <_Z10fuzzy_initv+0x2d0>)
 80a0628:	9005      	str	r0, [sp, #20]
 80a062a:	6810      	ldr	r0, [r2, #0]
 80a062c:	f004 fd94 	bl	80a5158 <__aeabi_i2f>
 80a0630:	494d      	ldr	r1, [pc, #308]	; (80a0768 <_Z10fuzzy_initv+0x2d4>)
 80a0632:	9004      	str	r0, [sp, #16]
 80a0634:	6808      	ldr	r0, [r1, #0]
 80a0636:	f004 fd8f 	bl	80a5158 <__aeabi_i2f>
 80a063a:	9003      	str	r0, [sp, #12]
 80a063c:	484b      	ldr	r0, [pc, #300]	; (80a076c <_Z10fuzzy_initv+0x2d8>)
 80a063e:	6800      	ldr	r0, [r0, #0]
 80a0640:	f004 fd8a 	bl	80a5158 <__aeabi_i2f>
 80a0644:	a903      	add	r1, sp, #12
 80a0646:	9000      	str	r0, [sp, #0]
 80a0648:	c90e      	ldmia	r1, {r1, r2, r3}
 80a064a:	4650      	mov	r0, sl
 80a064c:	f002 faff 	bl	80a2c4e <_ZN8FuzzySetC1Effff>
  LM_input->addFuzzySet(LM_low);
 80a0650:	4631      	mov	r1, r6
 80a0652:	4620      	mov	r0, r4
 80a0654:	f002 f89b 	bl	80a278e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  LM_input->addFuzzySet(LM_med);
 80a0658:	4649      	mov	r1, r9
 80a065a:	4620      	mov	r0, r4
 80a065c:	f002 f897 	bl	80a278e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  LM_input->addFuzzySet(LM_high);
 80a0660:	4651      	mov	r1, sl
 80a0662:	4620      	mov	r0, r4
 80a0664:	f002 f893 	bl	80a278e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyInput(LM_input);
 80a0668:	4621      	mov	r1, r4
 80a066a:	f8db 0000 	ldr.w	r0, [fp]
 80a066e:	f002 fbc2 	bl	80a2df6 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>

  // INPUT: 3 of 4
  FuzzyInput* RM_input = new FuzzyInput(3);
 80a0672:	2010      	movs	r0, #16
 80a0674:	f7ff fd11 	bl	80a009a <_Znwj>
 80a0678:	4604      	mov	r4, r0
 80a067a:	b110      	cbz	r0, 80a0682 <_Z10fuzzy_initv+0x1ee>
 80a067c:	2103      	movs	r1, #3
 80a067e:	f002 f86a 	bl	80a2756 <_ZN10FuzzyInputC1Ei>
  FuzzySet* RM_low = new FuzzySet(low1, low2, low3, low4);
 80a0682:	2014      	movs	r0, #20
 80a0684:	f7ff fd09 	bl	80a009a <_Znwj>
 80a0688:	9003      	str	r0, [sp, #12]
 80a068a:	b1c8      	cbz	r0, 80a06c0 <_Z10fuzzy_initv+0x22c>
 80a068c:	4b2c      	ldr	r3, [pc, #176]	; (80a0740 <_Z10fuzzy_initv+0x2ac>)
 80a068e:	6818      	ldr	r0, [r3, #0]
 80a0690:	f004 fd62 	bl	80a5158 <__aeabi_i2f>
 80a0694:	4a2b      	ldr	r2, [pc, #172]	; (80a0744 <_Z10fuzzy_initv+0x2b0>)
 80a0696:	9005      	str	r0, [sp, #20]
 80a0698:	6810      	ldr	r0, [r2, #0]
 80a069a:	f004 fd5d 	bl	80a5158 <__aeabi_i2f>
 80a069e:	492a      	ldr	r1, [pc, #168]	; (80a0748 <_Z10fuzzy_initv+0x2b4>)
 80a06a0:	9004      	str	r0, [sp, #16]
 80a06a2:	6808      	ldr	r0, [r1, #0]
 80a06a4:	f004 fd58 	bl	80a5158 <__aeabi_i2f>
 80a06a8:	4928      	ldr	r1, [pc, #160]	; (80a074c <_Z10fuzzy_initv+0x2b8>)
 80a06aa:	4683      	mov	fp, r0
 80a06ac:	6808      	ldr	r0, [r1, #0]
 80a06ae:	f004 fd53 	bl	80a5158 <__aeabi_i2f>
 80a06b2:	9b05      	ldr	r3, [sp, #20]
 80a06b4:	9000      	str	r0, [sp, #0]
 80a06b6:	9a04      	ldr	r2, [sp, #16]
 80a06b8:	4659      	mov	r1, fp
 80a06ba:	9803      	ldr	r0, [sp, #12]
 80a06bc:	f002 fac7 	bl	80a2c4e <_ZN8FuzzySetC1Effff>
  FuzzySet* RM_med = new FuzzySet(med1, med2, med3, med4);
 80a06c0:	2014      	movs	r0, #20
 80a06c2:	f7ff fcea 	bl	80a009a <_Znwj>
 80a06c6:	9004      	str	r0, [sp, #16]
 80a06c8:	b1c8      	cbz	r0, 80a06fe <_Z10fuzzy_initv+0x26a>
 80a06ca:	4b21      	ldr	r3, [pc, #132]	; (80a0750 <_Z10fuzzy_initv+0x2bc>)
 80a06cc:	6818      	ldr	r0, [r3, #0]
 80a06ce:	f004 fd43 	bl	80a5158 <__aeabi_i2f>
 80a06d2:	4a20      	ldr	r2, [pc, #128]	; (80a0754 <_Z10fuzzy_initv+0x2c0>)
 80a06d4:	9006      	str	r0, [sp, #24]
 80a06d6:	6810      	ldr	r0, [r2, #0]
 80a06d8:	f004 fd3e 	bl	80a5158 <__aeabi_i2f>
 80a06dc:	491e      	ldr	r1, [pc, #120]	; (80a0758 <_Z10fuzzy_initv+0x2c4>)
 80a06de:	9005      	str	r0, [sp, #20]
 80a06e0:	6808      	ldr	r0, [r1, #0]
 80a06e2:	f004 fd39 	bl	80a5158 <__aeabi_i2f>
 80a06e6:	491d      	ldr	r1, [pc, #116]	; (80a075c <_Z10fuzzy_initv+0x2c8>)
 80a06e8:	4683      	mov	fp, r0
 80a06ea:	6808      	ldr	r0, [r1, #0]
 80a06ec:	f004 fd34 	bl	80a5158 <__aeabi_i2f>
 80a06f0:	9b06      	ldr	r3, [sp, #24]
 80a06f2:	9000      	str	r0, [sp, #0]
 80a06f4:	9a05      	ldr	r2, [sp, #20]
 80a06f6:	4659      	mov	r1, fp
 80a06f8:	9804      	ldr	r0, [sp, #16]
 80a06fa:	f002 faa8 	bl	80a2c4e <_ZN8FuzzySetC1Effff>
  FuzzySet* RM_high = new FuzzySet(high1, high2, high3, high4);
 80a06fe:	2014      	movs	r0, #20
 80a0700:	f7ff fccb 	bl	80a009a <_Znwj>
 80a0704:	9005      	str	r0, [sp, #20]
 80a0706:	2800      	cmp	r0, #0
 80a0708:	d034      	beq.n	80a0774 <_Z10fuzzy_initv+0x2e0>
 80a070a:	4b15      	ldr	r3, [pc, #84]	; (80a0760 <_Z10fuzzy_initv+0x2cc>)
 80a070c:	6818      	ldr	r0, [r3, #0]
 80a070e:	f004 fd23 	bl	80a5158 <__aeabi_i2f>
 80a0712:	4a14      	ldr	r2, [pc, #80]	; (80a0764 <_Z10fuzzy_initv+0x2d0>)
 80a0714:	9007      	str	r0, [sp, #28]
 80a0716:	6810      	ldr	r0, [r2, #0]
 80a0718:	f004 fd1e 	bl	80a5158 <__aeabi_i2f>
 80a071c:	4912      	ldr	r1, [pc, #72]	; (80a0768 <_Z10fuzzy_initv+0x2d4>)
 80a071e:	9006      	str	r0, [sp, #24]
 80a0720:	6808      	ldr	r0, [r1, #0]
 80a0722:	f004 fd19 	bl	80a5158 <__aeabi_i2f>
 80a0726:	4911      	ldr	r1, [pc, #68]	; (80a076c <_Z10fuzzy_initv+0x2d8>)
 80a0728:	4683      	mov	fp, r0
 80a072a:	6808      	ldr	r0, [r1, #0]
 80a072c:	f004 fd14 	bl	80a5158 <__aeabi_i2f>
 80a0730:	9b07      	ldr	r3, [sp, #28]
 80a0732:	9000      	str	r0, [sp, #0]
 80a0734:	9a06      	ldr	r2, [sp, #24]
 80a0736:	4659      	mov	r1, fp
 80a0738:	9805      	ldr	r0, [sp, #20]
 80a073a:	f002 fa88 	bl	80a2c4e <_ZN8FuzzySetC1Effff>
 80a073e:	e019      	b.n	80a0774 <_Z10fuzzy_initv+0x2e0>
 80a0740:	20000310 	.word	0x20000310
 80a0744:	2000030c 	.word	0x2000030c
 80a0748:	20000308 	.word	0x20000308
 80a074c:	20000314 	.word	0x20000314
 80a0750:	20000354 	.word	0x20000354
 80a0754:	20000350 	.word	0x20000350
 80a0758:	2000034c 	.word	0x2000034c
 80a075c:	20000358 	.word	0x20000358
 80a0760:	20000330 	.word	0x20000330
 80a0764:	20000338 	.word	0x20000338
 80a0768:	20000424 	.word	0x20000424
 80a076c:	20000334 	.word	0x20000334
 80a0770:	200003a4 	.word	0x200003a4
  RM_input->addFuzzySet(RM_low);
 80a0774:	9903      	ldr	r1, [sp, #12]
 80a0776:	4620      	mov	r0, r4
 80a0778:	f002 f809 	bl	80a278e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  RM_input->addFuzzySet(RM_med);
 80a077c:	9904      	ldr	r1, [sp, #16]
 80a077e:	4620      	mov	r0, r4
 80a0780:	f002 f805 	bl	80a278e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  RM_input->addFuzzySet(RM_high);
 80a0784:	9905      	ldr	r1, [sp, #20]
 80a0786:	4620      	mov	r0, r4
 80a0788:	f002 f801 	bl	80a278e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyInput(RM_input);
 80a078c:	4ba9      	ldr	r3, [pc, #676]	; (80a0a34 <_Z10fuzzy_initv+0x5a0>)
 80a078e:	4621      	mov	r1, r4
 80a0790:	6818      	ldr	r0, [r3, #0]
 80a0792:	f002 fb30 	bl	80a2df6 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>

  // INPUT: 4 of 4
  FuzzyInput* RR_input = new FuzzyInput(4);
 80a0796:	2010      	movs	r0, #16
 80a0798:	f7ff fc7f 	bl	80a009a <_Znwj>
 80a079c:	4683      	mov	fp, r0
 80a079e:	b110      	cbz	r0, 80a07a6 <_Z10fuzzy_initv+0x312>
 80a07a0:	2104      	movs	r1, #4
 80a07a2:	f001 ffd8 	bl	80a2756 <_ZN10FuzzyInputC1Ei>
  FuzzySet* RR_low = new FuzzySet(low1, low2, low3, low4);
 80a07a6:	2014      	movs	r0, #20
 80a07a8:	f7ff fc77 	bl	80a009a <_Znwj>
 80a07ac:	4604      	mov	r4, r0
 80a07ae:	b1c0      	cbz	r0, 80a07e2 <_Z10fuzzy_initv+0x34e>
 80a07b0:	4ba1      	ldr	r3, [pc, #644]	; (80a0a38 <_Z10fuzzy_initv+0x5a4>)
 80a07b2:	6818      	ldr	r0, [r3, #0]
 80a07b4:	f004 fcd0 	bl	80a5158 <__aeabi_i2f>
 80a07b8:	4aa0      	ldr	r2, [pc, #640]	; (80a0a3c <_Z10fuzzy_initv+0x5a8>)
 80a07ba:	9008      	str	r0, [sp, #32]
 80a07bc:	6810      	ldr	r0, [r2, #0]
 80a07be:	f004 fccb 	bl	80a5158 <__aeabi_i2f>
 80a07c2:	499f      	ldr	r1, [pc, #636]	; (80a0a40 <_Z10fuzzy_initv+0x5ac>)
 80a07c4:	9007      	str	r0, [sp, #28]
 80a07c6:	6808      	ldr	r0, [r1, #0]
 80a07c8:	f004 fcc6 	bl	80a5158 <__aeabi_i2f>
 80a07cc:	9006      	str	r0, [sp, #24]
 80a07ce:	489d      	ldr	r0, [pc, #628]	; (80a0a44 <_Z10fuzzy_initv+0x5b0>)
 80a07d0:	6800      	ldr	r0, [r0, #0]
 80a07d2:	f004 fcc1 	bl	80a5158 <__aeabi_i2f>
 80a07d6:	a906      	add	r1, sp, #24
 80a07d8:	9000      	str	r0, [sp, #0]
 80a07da:	c90e      	ldmia	r1, {r1, r2, r3}
 80a07dc:	4620      	mov	r0, r4
 80a07de:	f002 fa36 	bl	80a2c4e <_ZN8FuzzySetC1Effff>
  FuzzySet* RR_med = new FuzzySet(med1, med2, med3, med4);
 80a07e2:	2014      	movs	r0, #20
 80a07e4:	f7ff fc59 	bl	80a009a <_Znwj>
 80a07e8:	9006      	str	r0, [sp, #24]
 80a07ea:	b1b8      	cbz	r0, 80a081c <_Z10fuzzy_initv+0x388>
 80a07ec:	4b96      	ldr	r3, [pc, #600]	; (80a0a48 <_Z10fuzzy_initv+0x5b4>)
 80a07ee:	6818      	ldr	r0, [r3, #0]
 80a07f0:	f004 fcb2 	bl	80a5158 <__aeabi_i2f>
 80a07f4:	4a95      	ldr	r2, [pc, #596]	; (80a0a4c <_Z10fuzzy_initv+0x5b8>)
 80a07f6:	9009      	str	r0, [sp, #36]	; 0x24
 80a07f8:	6810      	ldr	r0, [r2, #0]
 80a07fa:	f004 fcad 	bl	80a5158 <__aeabi_i2f>
 80a07fe:	4994      	ldr	r1, [pc, #592]	; (80a0a50 <_Z10fuzzy_initv+0x5bc>)
 80a0800:	9008      	str	r0, [sp, #32]
 80a0802:	6808      	ldr	r0, [r1, #0]
 80a0804:	f004 fca8 	bl	80a5158 <__aeabi_i2f>
 80a0808:	9007      	str	r0, [sp, #28]
 80a080a:	4892      	ldr	r0, [pc, #584]	; (80a0a54 <_Z10fuzzy_initv+0x5c0>)
 80a080c:	6800      	ldr	r0, [r0, #0]
 80a080e:	f004 fca3 	bl	80a5158 <__aeabi_i2f>
 80a0812:	9000      	str	r0, [sp, #0]
 80a0814:	a806      	add	r0, sp, #24
 80a0816:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80a0818:	f002 fa19 	bl	80a2c4e <_ZN8FuzzySetC1Effff>
  FuzzySet* RR_high = new FuzzySet(high1, high2, high3, high4);
 80a081c:	2014      	movs	r0, #20
 80a081e:	f7ff fc3c 	bl	80a009a <_Znwj>
 80a0822:	9007      	str	r0, [sp, #28]
 80a0824:	b1b8      	cbz	r0, 80a0856 <_Z10fuzzy_initv+0x3c2>
 80a0826:	4b8c      	ldr	r3, [pc, #560]	; (80a0a58 <_Z10fuzzy_initv+0x5c4>)
 80a0828:	6818      	ldr	r0, [r3, #0]
 80a082a:	f004 fc95 	bl	80a5158 <__aeabi_i2f>
 80a082e:	4a8b      	ldr	r2, [pc, #556]	; (80a0a5c <_Z10fuzzy_initv+0x5c8>)
 80a0830:	900a      	str	r0, [sp, #40]	; 0x28
 80a0832:	6810      	ldr	r0, [r2, #0]
 80a0834:	f004 fc90 	bl	80a5158 <__aeabi_i2f>
 80a0838:	4989      	ldr	r1, [pc, #548]	; (80a0a60 <_Z10fuzzy_initv+0x5cc>)
 80a083a:	9009      	str	r0, [sp, #36]	; 0x24
 80a083c:	6808      	ldr	r0, [r1, #0]
 80a083e:	f004 fc8b 	bl	80a5158 <__aeabi_i2f>
 80a0842:	9008      	str	r0, [sp, #32]
 80a0844:	4887      	ldr	r0, [pc, #540]	; (80a0a64 <_Z10fuzzy_initv+0x5d0>)
 80a0846:	6800      	ldr	r0, [r0, #0]
 80a0848:	f004 fc86 	bl	80a5158 <__aeabi_i2f>
 80a084c:	9000      	str	r0, [sp, #0]
 80a084e:	a807      	add	r0, sp, #28
 80a0850:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80a0852:	f002 f9fc 	bl	80a2c4e <_ZN8FuzzySetC1Effff>
  RR_input->addFuzzySet(RR_low);
 80a0856:	4621      	mov	r1, r4
 80a0858:	4658      	mov	r0, fp
 80a085a:	f001 ff98 	bl	80a278e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  RR_input->addFuzzySet(RR_med);
 80a085e:	9906      	ldr	r1, [sp, #24]
 80a0860:	4658      	mov	r0, fp
 80a0862:	f001 ff94 	bl	80a278e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  RR_input->addFuzzySet(RR_high);
 80a0866:	9907      	ldr	r1, [sp, #28]
 80a0868:	4658      	mov	r0, fp
 80a086a:	f001 ff90 	bl	80a278e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyInput(RR_input);
 80a086e:	4b71      	ldr	r3, [pc, #452]	; (80a0a34 <_Z10fuzzy_initv+0x5a0>)
 80a0870:	4659      	mov	r1, fp
 80a0872:	6818      	ldr	r0, [r3, #0]
 80a0874:	f002 fabf 	bl	80a2df6 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>

  // OUTPUT: 1 of 1 (Test 1 *********************************)
  FuzzyOutput* drive_state = new FuzzyOutput(1);
 80a0878:	2018      	movs	r0, #24
 80a087a:	f7ff fc0e 	bl	80a009a <_Znwj>
 80a087e:	4683      	mov	fp, r0
 80a0880:	b110      	cbz	r0, 80a0888 <_Z10fuzzy_initv+0x3f4>
 80a0882:	2101      	movs	r1, #1
 80a0884:	f001 ff9f 	bl	80a27c6 <_ZN11FuzzyOutputC1Ei>
  FuzzySet* full_left = new FuzzySet(0, 5, 15, 20);
 80a0888:	2014      	movs	r0, #20
 80a088a:	f7ff fc06 	bl	80a009a <_Znwj>
 80a088e:	900f      	str	r0, [sp, #60]	; 0x3c
 80a0890:	b130      	cbz	r0, 80a08a0 <_Z10fuzzy_initv+0x40c>
 80a0892:	4b75      	ldr	r3, [pc, #468]	; (80a0a68 <_Z10fuzzy_initv+0x5d4>)
 80a0894:	4a75      	ldr	r2, [pc, #468]	; (80a0a6c <_Z10fuzzy_initv+0x5d8>)
 80a0896:	9300      	str	r3, [sp, #0]
 80a0898:	2100      	movs	r1, #0
 80a089a:	4b75      	ldr	r3, [pc, #468]	; (80a0a70 <_Z10fuzzy_initv+0x5dc>)
 80a089c:	f002 f9d7 	bl	80a2c4e <_ZN8FuzzySetC1Effff>
  FuzzySet* small_left = new FuzzySet(25, 30, 35, 40);
 80a08a0:	2014      	movs	r0, #20
 80a08a2:	f7ff fbfa 	bl	80a009a <_Znwj>
 80a08a6:	9010      	str	r0, [sp, #64]	; 0x40
 80a08a8:	b130      	cbz	r0, 80a08b8 <_Z10fuzzy_initv+0x424>
 80a08aa:	4b72      	ldr	r3, [pc, #456]	; (80a0a74 <_Z10fuzzy_initv+0x5e0>)
 80a08ac:	4a72      	ldr	r2, [pc, #456]	; (80a0a78 <_Z10fuzzy_initv+0x5e4>)
 80a08ae:	9300      	str	r3, [sp, #0]
 80a08b0:	4972      	ldr	r1, [pc, #456]	; (80a0a7c <_Z10fuzzy_initv+0x5e8>)
 80a08b2:	4b73      	ldr	r3, [pc, #460]	; (80a0a80 <_Z10fuzzy_initv+0x5ec>)
 80a08b4:	f002 f9cb 	bl	80a2c4e <_ZN8FuzzySetC1Effff>
  FuzzySet* center = new FuzzySet(45, 50, 55, 60);
 80a08b8:	2014      	movs	r0, #20
 80a08ba:	f7ff fbee 	bl	80a009a <_Znwj>
 80a08be:	9011      	str	r0, [sp, #68]	; 0x44
 80a08c0:	b130      	cbz	r0, 80a08d0 <_Z10fuzzy_initv+0x43c>
 80a08c2:	4b70      	ldr	r3, [pc, #448]	; (80a0a84 <_Z10fuzzy_initv+0x5f0>)
 80a08c4:	4a70      	ldr	r2, [pc, #448]	; (80a0a88 <_Z10fuzzy_initv+0x5f4>)
 80a08c6:	9300      	str	r3, [sp, #0]
 80a08c8:	4970      	ldr	r1, [pc, #448]	; (80a0a8c <_Z10fuzzy_initv+0x5f8>)
 80a08ca:	4b71      	ldr	r3, [pc, #452]	; (80a0a90 <_Z10fuzzy_initv+0x5fc>)
 80a08cc:	f002 f9bf 	bl	80a2c4e <_ZN8FuzzySetC1Effff>
  FuzzySet* small_right = new FuzzySet(65, 70, 75, 80);
 80a08d0:	2014      	movs	r0, #20
 80a08d2:	f7ff fbe2 	bl	80a009a <_Znwj>
 80a08d6:	9012      	str	r0, [sp, #72]	; 0x48
 80a08d8:	b130      	cbz	r0, 80a08e8 <_Z10fuzzy_initv+0x454>
 80a08da:	4b6e      	ldr	r3, [pc, #440]	; (80a0a94 <_Z10fuzzy_initv+0x600>)
 80a08dc:	4a6e      	ldr	r2, [pc, #440]	; (80a0a98 <_Z10fuzzy_initv+0x604>)
 80a08de:	9300      	str	r3, [sp, #0]
 80a08e0:	496e      	ldr	r1, [pc, #440]	; (80a0a9c <_Z10fuzzy_initv+0x608>)
 80a08e2:	4b6f      	ldr	r3, [pc, #444]	; (80a0aa0 <_Z10fuzzy_initv+0x60c>)
 80a08e4:	f002 f9b3 	bl	80a2c4e <_ZN8FuzzySetC1Effff>
  FuzzySet* full_right = new FuzzySet(85, 90, 95, 100);
 80a08e8:	2014      	movs	r0, #20
 80a08ea:	f7ff fbd6 	bl	80a009a <_Znwj>
 80a08ee:	9013      	str	r0, [sp, #76]	; 0x4c
 80a08f0:	b130      	cbz	r0, 80a0900 <_Z10fuzzy_initv+0x46c>
 80a08f2:	4b6c      	ldr	r3, [pc, #432]	; (80a0aa4 <_Z10fuzzy_initv+0x610>)
 80a08f4:	4a6c      	ldr	r2, [pc, #432]	; (80a0aa8 <_Z10fuzzy_initv+0x614>)
 80a08f6:	9300      	str	r3, [sp, #0]
 80a08f8:	496c      	ldr	r1, [pc, #432]	; (80a0aac <_Z10fuzzy_initv+0x618>)
 80a08fa:	4b6d      	ldr	r3, [pc, #436]	; (80a0ab0 <_Z10fuzzy_initv+0x61c>)
 80a08fc:	f002 f9a7 	bl	80a2c4e <_ZN8FuzzySetC1Effff>
  drive_state->addFuzzySet(full_left);
 80a0900:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a0902:	4658      	mov	r0, fp
 80a0904:	f001 ff43 	bl	80a278e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  drive_state->addFuzzySet(small_left);
 80a0908:	9910      	ldr	r1, [sp, #64]	; 0x40
 80a090a:	4658      	mov	r0, fp
 80a090c:	f001 ff3f 	bl	80a278e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  drive_state->addFuzzySet(center);
 80a0910:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a0912:	4658      	mov	r0, fp
 80a0914:	f001 ff3b 	bl	80a278e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  drive_state->addFuzzySet(small_right);
 80a0918:	9912      	ldr	r1, [sp, #72]	; 0x48
 80a091a:	4658      	mov	r0, fp
 80a091c:	f001 ff37 	bl	80a278e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  drive_state->addFuzzySet(full_right);
 80a0920:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a0922:	4658      	mov	r0, fp
 80a0924:	f001 ff33 	bl	80a278e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyOutput(drive_state);
 80a0928:	4b42      	ldr	r3, [pc, #264]	; (80a0a34 <_Z10fuzzy_initv+0x5a0>)
 80a092a:	4659      	mov	r1, fp
 80a092c:	6818      	ldr	r0, [r3, #0]
 80a092e:	f002 fa75 	bl	80a2e1c <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput>

  // Building Left FuzzyRuleAntecedents (ALL COMBINATIONS)
  FuzzyRuleAntecedent* left_low_high = new FuzzyRuleAntecedent();
 80a0932:	2018      	movs	r0, #24
 80a0934:	f7ff fbb1 	bl	80a009a <_Znwj>
 80a0938:	900e      	str	r0, [sp, #56]	; 0x38
 80a093a:	b108      	cbz	r0, 80a0940 <_Z10fuzzy_initv+0x4ac>
 80a093c:	f002 fae6 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  left_low_high->joinWithAND(LL_low, LM_high);
 80a0940:	4652      	mov	r2, sl
 80a0942:	4629      	mov	r1, r5
 80a0944:	980e      	ldr	r0, [sp, #56]	; 0x38
 80a0946:	f002 fae9 	bl	80a2f1c <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_med_high = new FuzzyRuleAntecedent();
 80a094a:	2018      	movs	r0, #24
 80a094c:	f7ff fba5 	bl	80a009a <_Znwj>
 80a0950:	9009      	str	r0, [sp, #36]	; 0x24
 80a0952:	b108      	cbz	r0, 80a0958 <_Z10fuzzy_initv+0x4c4>
 80a0954:	f002 fada 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  left_med_high->joinWithAND(LL_med, LM_high);
 80a0958:	4652      	mov	r2, sl
 80a095a:	4641      	mov	r1, r8
 80a095c:	9809      	ldr	r0, [sp, #36]	; 0x24
 80a095e:	f002 fadd 	bl	80a2f1c <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_low_med = new FuzzyRuleAntecedent();
 80a0962:	2018      	movs	r0, #24
 80a0964:	f7ff fb99 	bl	80a009a <_Znwj>
 80a0968:	900a      	str	r0, [sp, #40]	; 0x28
 80a096a:	b108      	cbz	r0, 80a0970 <_Z10fuzzy_initv+0x4dc>
 80a096c:	f002 face 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  left_low_med->joinWithAND(LL_low, LM_med);
 80a0970:	464a      	mov	r2, r9
 80a0972:	4629      	mov	r1, r5
 80a0974:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a0976:	f002 fad1 	bl	80a2f1c <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_med_med = new FuzzyRuleAntecedent();
 80a097a:	2018      	movs	r0, #24
 80a097c:	f7ff fb8d 	bl	80a009a <_Znwj>
 80a0980:	9008      	str	r0, [sp, #32]
 80a0982:	b108      	cbz	r0, 80a0988 <_Z10fuzzy_initv+0x4f4>
 80a0984:	f002 fac2 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  left_med_med->joinWithAND(LL_med, LM_med);
 80a0988:	464a      	mov	r2, r9
 80a098a:	4641      	mov	r1, r8
 80a098c:	9808      	ldr	r0, [sp, #32]
 80a098e:	f002 fac5 	bl	80a2f1c <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_high_high = new FuzzyRuleAntecedent();
 80a0992:	2018      	movs	r0, #24
 80a0994:	f7ff fb81 	bl	80a009a <_Znwj>
 80a0998:	900d      	str	r0, [sp, #52]	; 0x34
 80a099a:	b108      	cbz	r0, 80a09a0 <_Z10fuzzy_initv+0x50c>
 80a099c:	f002 fab6 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  left_high_high->joinWithAND(LL_high, LM_high);
 80a09a0:	4652      	mov	r2, sl
 80a09a2:	4639      	mov	r1, r7
 80a09a4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a09a6:	f002 fab9 	bl	80a2f1c <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_high_med = new FuzzyRuleAntecedent();
 80a09aa:	2018      	movs	r0, #24
 80a09ac:	f7ff fb75 	bl	80a009a <_Znwj>
 80a09b0:	9014      	str	r0, [sp, #80]	; 0x50
 80a09b2:	b108      	cbz	r0, 80a09b8 <_Z10fuzzy_initv+0x524>
 80a09b4:	f002 faaa 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  left_high_med->joinWithAND(LL_high, LM_med);
 80a09b8:	464a      	mov	r2, r9
 80a09ba:	4639      	mov	r1, r7
 80a09bc:	9814      	ldr	r0, [sp, #80]	; 0x50
 80a09be:	f002 faad 	bl	80a2f1c <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_med_low = new FuzzyRuleAntecedent();
 80a09c2:	2018      	movs	r0, #24
 80a09c4:	f7ff fb69 	bl	80a009a <_Znwj>
 80a09c8:	9015      	str	r0, [sp, #84]	; 0x54
 80a09ca:	b108      	cbz	r0, 80a09d0 <_Z10fuzzy_initv+0x53c>
 80a09cc:	f002 fa9e 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  left_med_low->joinWithAND(LL_med, LM_low);
 80a09d0:	4632      	mov	r2, r6
 80a09d2:	4641      	mov	r1, r8
 80a09d4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80a09d6:	f002 faa1 	bl	80a2f1c <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_high_low = new FuzzyRuleAntecedent();
 80a09da:	2018      	movs	r0, #24
 80a09dc:	f7ff fb5d 	bl	80a009a <_Znwj>
 80a09e0:	9016      	str	r0, [sp, #88]	; 0x58
 80a09e2:	b108      	cbz	r0, 80a09e8 <_Z10fuzzy_initv+0x554>
 80a09e4:	f002 fa92 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  left_high_low->joinWithAND(LL_high, LM_low);
 80a09e8:	4639      	mov	r1, r7
 80a09ea:	4632      	mov	r2, r6
 80a09ec:	9816      	ldr	r0, [sp, #88]	; 0x58
 80a09ee:	f002 fa95 	bl	80a2f1c <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_low_low = new FuzzyRuleAntecedent();
 80a09f2:	2018      	movs	r0, #24
 80a09f4:	f7ff fb51 	bl	80a009a <_Znwj>
 80a09f8:	4607      	mov	r7, r0
 80a09fa:	b108      	cbz	r0, 80a0a00 <_Z10fuzzy_initv+0x56c>
 80a09fc:	f002 fa86 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  left_low_low->joinWithAND(LL_low, LM_low);
 80a0a00:	4632      	mov	r2, r6
 80a0a02:	4629      	mov	r1, r5
 80a0a04:	4638      	mov	r0, r7
 80a0a06:	f002 fa89 	bl	80a2f1c <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>

  // Building Right FuzzyRuleAntecedents
  FuzzyRuleAntecedent* right_high_low = new FuzzyRuleAntecedent();
 80a0a0a:	2018      	movs	r0, #24
 80a0a0c:	f7ff fb45 	bl	80a009a <_Znwj>
 80a0a10:	4606      	mov	r6, r0
 80a0a12:	b108      	cbz	r0, 80a0a18 <_Z10fuzzy_initv+0x584>
 80a0a14:	f002 fa7a 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  right_high_low->joinWithAND(RM_high, RR_low);
 80a0a18:	4622      	mov	r2, r4
 80a0a1a:	9905      	ldr	r1, [sp, #20]
 80a0a1c:	4630      	mov	r0, r6
 80a0a1e:	f002 fa7d 	bl	80a2f1c <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_high_med = new FuzzyRuleAntecedent();
 80a0a22:	2018      	movs	r0, #24
 80a0a24:	f7ff fb39 	bl	80a009a <_Znwj>
 80a0a28:	900b      	str	r0, [sp, #44]	; 0x2c
 80a0a2a:	2800      	cmp	r0, #0
 80a0a2c:	d042      	beq.n	80a0ab4 <_Z10fuzzy_initv+0x620>
 80a0a2e:	f002 fa6d 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
 80a0a32:	e03f      	b.n	80a0ab4 <_Z10fuzzy_initv+0x620>
 80a0a34:	200003a4 	.word	0x200003a4
 80a0a38:	20000310 	.word	0x20000310
 80a0a3c:	2000030c 	.word	0x2000030c
 80a0a40:	20000308 	.word	0x20000308
 80a0a44:	20000314 	.word	0x20000314
 80a0a48:	20000354 	.word	0x20000354
 80a0a4c:	20000350 	.word	0x20000350
 80a0a50:	2000034c 	.word	0x2000034c
 80a0a54:	20000358 	.word	0x20000358
 80a0a58:	20000330 	.word	0x20000330
 80a0a5c:	20000338 	.word	0x20000338
 80a0a60:	20000424 	.word	0x20000424
 80a0a64:	20000334 	.word	0x20000334
 80a0a68:	41a00000 	.word	0x41a00000
 80a0a6c:	40a00000 	.word	0x40a00000
 80a0a70:	41700000 	.word	0x41700000
 80a0a74:	42200000 	.word	0x42200000
 80a0a78:	41f00000 	.word	0x41f00000
 80a0a7c:	41c80000 	.word	0x41c80000
 80a0a80:	420c0000 	.word	0x420c0000
 80a0a84:	42700000 	.word	0x42700000
 80a0a88:	42480000 	.word	0x42480000
 80a0a8c:	42340000 	.word	0x42340000
 80a0a90:	425c0000 	.word	0x425c0000
 80a0a94:	42a00000 	.word	0x42a00000
 80a0a98:	428c0000 	.word	0x428c0000
 80a0a9c:	42820000 	.word	0x42820000
 80a0aa0:	42960000 	.word	0x42960000
 80a0aa4:	42c80000 	.word	0x42c80000
 80a0aa8:	42b40000 	.word	0x42b40000
 80a0aac:	42aa0000 	.word	0x42aa0000
 80a0ab0:	42be0000 	.word	0x42be0000
  right_high_med->joinWithAND(RM_high, RR_med);
 80a0ab4:	9a06      	ldr	r2, [sp, #24]
 80a0ab6:	9905      	ldr	r1, [sp, #20]
 80a0ab8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a0aba:	f002 fa2f 	bl	80a2f1c <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_med_low = new FuzzyRuleAntecedent();
 80a0abe:	2018      	movs	r0, #24
 80a0ac0:	f7ff faeb 	bl	80a009a <_Znwj>
 80a0ac4:	900c      	str	r0, [sp, #48]	; 0x30
 80a0ac6:	b108      	cbz	r0, 80a0acc <_Z10fuzzy_initv+0x638>
 80a0ac8:	f002 fa20 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  right_med_low->joinWithAND(RM_med, RR_low);
 80a0acc:	4622      	mov	r2, r4
 80a0ace:	9904      	ldr	r1, [sp, #16]
 80a0ad0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80a0ad2:	f002 fa23 	bl	80a2f1c <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_low_med = new FuzzyRuleAntecedent();
 80a0ad6:	2018      	movs	r0, #24
 80a0ad8:	f7ff fadf 	bl	80a009a <_Znwj>
 80a0adc:	9017      	str	r0, [sp, #92]	; 0x5c
 80a0ade:	b108      	cbz	r0, 80a0ae4 <_Z10fuzzy_initv+0x650>
 80a0ae0:	f002 fa14 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  right_low_med->joinWithAND(RM_low, RR_med);
 80a0ae4:	9a06      	ldr	r2, [sp, #24]
 80a0ae6:	9903      	ldr	r1, [sp, #12]
 80a0ae8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80a0aea:	f002 fa17 	bl	80a2f1c <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_low_low = new FuzzyRuleAntecedent();
 80a0aee:	2018      	movs	r0, #24
 80a0af0:	f7ff fad3 	bl	80a009a <_Znwj>
 80a0af4:	4605      	mov	r5, r0
 80a0af6:	b108      	cbz	r0, 80a0afc <_Z10fuzzy_initv+0x668>
 80a0af8:	f002 fa08 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  right_low_low->joinWithAND(RM_low, RR_low);
 80a0afc:	4622      	mov	r2, r4
 80a0afe:	9903      	ldr	r1, [sp, #12]
 80a0b00:	4628      	mov	r0, r5
 80a0b02:	f002 fa0b 	bl	80a2f1c <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_med_med = new FuzzyRuleAntecedent();
 80a0b06:	2018      	movs	r0, #24
 80a0b08:	f7ff fac7 	bl	80a009a <_Znwj>
 80a0b0c:	4683      	mov	fp, r0
 80a0b0e:	b108      	cbz	r0, 80a0b14 <_Z10fuzzy_initv+0x680>
 80a0b10:	f002 f9fc 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  right_med_med->joinWithAND(RM_med, RR_med);
 80a0b14:	9a06      	ldr	r2, [sp, #24]
 80a0b16:	9904      	ldr	r1, [sp, #16]
 80a0b18:	4658      	mov	r0, fp
 80a0b1a:	f002 f9ff 	bl	80a2f1c <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_low_high = new FuzzyRuleAntecedent();
 80a0b1e:	2018      	movs	r0, #24
 80a0b20:	f7ff fabb 	bl	80a009a <_Znwj>
 80a0b24:	9006      	str	r0, [sp, #24]
 80a0b26:	b108      	cbz	r0, 80a0b2c <_Z10fuzzy_initv+0x698>
 80a0b28:	f002 f9f0 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  right_low_high->joinWithAND(RM_low, RR_high);
 80a0b2c:	9a07      	ldr	r2, [sp, #28]
 80a0b2e:	9903      	ldr	r1, [sp, #12]
 80a0b30:	9806      	ldr	r0, [sp, #24]
 80a0b32:	f002 f9f3 	bl	80a2f1c <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_high_high = new FuzzyRuleAntecedent();
 80a0b36:	2018      	movs	r0, #24
 80a0b38:	f7ff faaf 	bl	80a009a <_Znwj>
 80a0b3c:	9003      	str	r0, [sp, #12]
 80a0b3e:	b108      	cbz	r0, 80a0b44 <_Z10fuzzy_initv+0x6b0>
 80a0b40:	f002 f9e4 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  right_high_high->joinWithAND(RM_high, RR_high);
 80a0b44:	9a07      	ldr	r2, [sp, #28]
 80a0b46:	9905      	ldr	r1, [sp, #20]
 80a0b48:	9803      	ldr	r0, [sp, #12]
 80a0b4a:	f002 f9e7 	bl	80a2f1c <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_med_high = new FuzzyRuleAntecedent();
 80a0b4e:	2018      	movs	r0, #24
 80a0b50:	f7ff faa3 	bl	80a009a <_Znwj>
 80a0b54:	9005      	str	r0, [sp, #20]
 80a0b56:	b108      	cbz	r0, 80a0b5c <_Z10fuzzy_initv+0x6c8>
 80a0b58:	f002 f9d8 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  right_med_high->joinWithAND(RM_med, RR_high);
 80a0b5c:	9a07      	ldr	r2, [sp, #28]
 80a0b5e:	9904      	ldr	r1, [sp, #16]
 80a0b60:	9805      	ldr	r0, [sp, #20]
 80a0b62:	f002 f9db 	bl	80a2f1c <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>

  // Building drive FuzzyRuleConsequents (Test 1 *********************************)
  // NOTE: you can add multiple outputs to 1 consequent
  FuzzyRuleConsequent* drive_center = new FuzzyRuleConsequent();
 80a0b66:	2008      	movs	r0, #8
 80a0b68:	f7ff fa97 	bl	80a009a <_Znwj>
 80a0b6c:	4681      	mov	r9, r0
 80a0b6e:	b108      	cbz	r0, 80a0b74 <_Z10fuzzy_initv+0x6e0>
 80a0b70:	f002 f916 	bl	80a2da0 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_center->addOutput(center);
 80a0b74:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a0b76:	4648      	mov	r0, r9
 80a0b78:	f002 f916 	bl	80a2da8 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  FuzzyRuleConsequent* drive_small_left = new FuzzyRuleConsequent();
 80a0b7c:	2008      	movs	r0, #8
 80a0b7e:	f7ff fa8c 	bl	80a009a <_Znwj>
 80a0b82:	4680      	mov	r8, r0
 80a0b84:	b108      	cbz	r0, 80a0b8a <_Z10fuzzy_initv+0x6f6>
 80a0b86:	f002 f90b 	bl	80a2da0 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_small_left->addOutput(small_left);  
 80a0b8a:	9910      	ldr	r1, [sp, #64]	; 0x40
 80a0b8c:	4640      	mov	r0, r8
 80a0b8e:	f002 f90b 	bl	80a2da8 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  FuzzyRuleConsequent* drive_full_left = new FuzzyRuleConsequent();
 80a0b92:	2008      	movs	r0, #8
 80a0b94:	f7ff fa81 	bl	80a009a <_Znwj>
 80a0b98:	9004      	str	r0, [sp, #16]
 80a0b9a:	b108      	cbz	r0, 80a0ba0 <_Z10fuzzy_initv+0x70c>
 80a0b9c:	f002 f900 	bl	80a2da0 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_full_left->addOutput(full_left);
 80a0ba0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a0ba2:	9804      	ldr	r0, [sp, #16]
 80a0ba4:	f002 f900 	bl	80a2da8 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  FuzzyRuleConsequent* drive_full_right = new FuzzyRuleConsequent();
 80a0ba8:	2008      	movs	r0, #8
 80a0baa:	f7ff fa76 	bl	80a009a <_Znwj>
 80a0bae:	9007      	str	r0, [sp, #28]
 80a0bb0:	b108      	cbz	r0, 80a0bb6 <_Z10fuzzy_initv+0x722>
 80a0bb2:	f002 f8f5 	bl	80a2da0 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_full_right->addOutput(full_right);
 80a0bb6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a0bb8:	9807      	ldr	r0, [sp, #28]
 80a0bba:	f002 f8f5 	bl	80a2da8 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  FuzzyRuleConsequent* drive_small_right = new FuzzyRuleConsequent();
 80a0bbe:	2008      	movs	r0, #8
 80a0bc0:	f7ff fa6b 	bl	80a009a <_Znwj>
 80a0bc4:	4604      	mov	r4, r0
 80a0bc6:	b108      	cbz	r0, 80a0bcc <_Z10fuzzy_initv+0x738>
 80a0bc8:	f002 f8ea 	bl	80a2da0 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_small_right->addOutput(small_right);
 80a0bcc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80a0bce:	4620      	mov	r0, r4
 80a0bd0:	f002 f8ea 	bl	80a2da8 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>

  // Building Complete FuzzyRuleAntedecents (Test 1 *********************************)
  // Combining (2) Left and (2) Right antecedents, merging with (1) drive consequent
  // And adding the FuzzyRules
  FuzzyRuleAntecedent* LHHL = new FuzzyRuleAntecedent();
 80a0bd4:	2018      	movs	r0, #24
 80a0bd6:	f7ff fa60 	bl	80a009a <_Znwj>
 80a0bda:	4682      	mov	sl, r0
 80a0bdc:	b108      	cbz	r0, 80a0be2 <_Z10fuzzy_initv+0x74e>
 80a0bde:	f002 f995 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  LHHL->joinWithAND(left_low_high, right_high_low);
 80a0be2:	4632      	mov	r2, r6
 80a0be4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80a0be6:	4650      	mov	r0, sl
 80a0be8:	f002 f9a7 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr1 = new FuzzyRule(1, LHHL, drive_center);
 80a0bec:	2010      	movs	r0, #16
 80a0bee:	f7ff fa54 	bl	80a009a <_Znwj>
 80a0bf2:	900f      	str	r0, [sp, #60]	; 0x3c
 80a0bf4:	b120      	cbz	r0, 80a0c00 <_Z10fuzzy_initv+0x76c>
 80a0bf6:	464b      	mov	r3, r9
 80a0bf8:	4652      	mov	r2, sl
 80a0bfa:	2101      	movs	r1, #1
 80a0bfc:	f001 fb74 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr1);
 80a0c00:	4bb5      	ldr	r3, [pc, #724]	; (80a0ed8 <_Z10fuzzy_initv+0xa44>)
 80a0c02:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a0c04:	6818      	ldr	r0, [r3, #0]
 80a0c06:	f002 f921 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MHHL = new FuzzyRuleAntecedent();
 80a0c0a:	2018      	movs	r0, #24
 80a0c0c:	f7ff fa45 	bl	80a009a <_Znwj>
 80a0c10:	4682      	mov	sl, r0
 80a0c12:	b108      	cbz	r0, 80a0c18 <_Z10fuzzy_initv+0x784>
 80a0c14:	f002 f97a 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  MHHL->joinWithAND(left_med_high, right_high_low);
 80a0c18:	4632      	mov	r2, r6
 80a0c1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0c1c:	4650      	mov	r0, sl
 80a0c1e:	f002 f98c 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr2 = new FuzzyRule(2, MHHL, drive_center);
 80a0c22:	2010      	movs	r0, #16
 80a0c24:	f7ff fa39 	bl	80a009a <_Znwj>
 80a0c28:	4606      	mov	r6, r0
 80a0c2a:	b120      	cbz	r0, 80a0c36 <_Z10fuzzy_initv+0x7a2>
 80a0c2c:	464b      	mov	r3, r9
 80a0c2e:	4652      	mov	r2, sl
 80a0c30:	2102      	movs	r1, #2
 80a0c32:	f001 fb59 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr2); 
 80a0c36:	4ba8      	ldr	r3, [pc, #672]	; (80a0ed8 <_Z10fuzzy_initv+0xa44>)
 80a0c38:	4631      	mov	r1, r6
 80a0c3a:	6818      	ldr	r0, [r3, #0]
 80a0c3c:	f002 f906 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LHHM = new FuzzyRuleAntecedent();
 80a0c40:	2018      	movs	r0, #24
 80a0c42:	f7ff fa2a 	bl	80a009a <_Znwj>
 80a0c46:	4606      	mov	r6, r0
 80a0c48:	b108      	cbz	r0, 80a0c4e <_Z10fuzzy_initv+0x7ba>
 80a0c4a:	f002 f95f 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  LHHM->joinWithAND(left_low_high, right_high_med);
 80a0c4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a0c50:	990e      	ldr	r1, [sp, #56]	; 0x38
 80a0c52:	4630      	mov	r0, r6
 80a0c54:	f002 f971 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr3 = new FuzzyRule(3, LHHM, drive_center);
 80a0c58:	2010      	movs	r0, #16
 80a0c5a:	f7ff fa1e 	bl	80a009a <_Znwj>
 80a0c5e:	4682      	mov	sl, r0
 80a0c60:	b120      	cbz	r0, 80a0c6c <_Z10fuzzy_initv+0x7d8>
 80a0c62:	464b      	mov	r3, r9
 80a0c64:	4632      	mov	r2, r6
 80a0c66:	2103      	movs	r1, #3
 80a0c68:	f001 fb3e 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr3);
 80a0c6c:	4b9a      	ldr	r3, [pc, #616]	; (80a0ed8 <_Z10fuzzy_initv+0xa44>)
 80a0c6e:	4651      	mov	r1, sl
 80a0c70:	6818      	ldr	r0, [r3, #0]
 80a0c72:	f002 f8eb 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMML = new FuzzyRuleAntecedent();
 80a0c76:	2018      	movs	r0, #24
 80a0c78:	f7ff fa0f 	bl	80a009a <_Znwj>
 80a0c7c:	4606      	mov	r6, r0
 80a0c7e:	b108      	cbz	r0, 80a0c84 <_Z10fuzzy_initv+0x7f0>
 80a0c80:	f002 f944 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  LMML->joinWithAND(left_low_med, right_med_low);
 80a0c84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a0c86:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a0c88:	4630      	mov	r0, r6
 80a0c8a:	f002 f956 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr4 = new FuzzyRule(4, LMML, drive_center);
 80a0c8e:	2010      	movs	r0, #16
 80a0c90:	f7ff fa03 	bl	80a009a <_Znwj>
 80a0c94:	4682      	mov	sl, r0
 80a0c96:	b120      	cbz	r0, 80a0ca2 <_Z10fuzzy_initv+0x80e>
 80a0c98:	464b      	mov	r3, r9
 80a0c9a:	4632      	mov	r2, r6
 80a0c9c:	2104      	movs	r1, #4
 80a0c9e:	f001 fb23 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr4);
 80a0ca2:	4b8d      	ldr	r3, [pc, #564]	; (80a0ed8 <_Z10fuzzy_initv+0xa44>)
 80a0ca4:	4651      	mov	r1, sl
 80a0ca6:	6818      	ldr	r0, [r3, #0]
 80a0ca8:	f002 f8d0 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMMM = new FuzzyRuleAntecedent();
 80a0cac:	2018      	movs	r0, #24
 80a0cae:	f7ff f9f4 	bl	80a009a <_Znwj>
 80a0cb2:	4606      	mov	r6, r0
 80a0cb4:	b108      	cbz	r0, 80a0cba <_Z10fuzzy_initv+0x826>
 80a0cb6:	f002 f929 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  MMMM->joinWithAND(left_med_med, right_med_med);
 80a0cba:	465a      	mov	r2, fp
 80a0cbc:	9908      	ldr	r1, [sp, #32]
 80a0cbe:	4630      	mov	r0, r6
 80a0cc0:	f002 f93b 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr5 = new FuzzyRule(5, MMMM, drive_center);
 80a0cc4:	2010      	movs	r0, #16
 80a0cc6:	f7ff f9e8 	bl	80a009a <_Znwj>
 80a0cca:	4682      	mov	sl, r0
 80a0ccc:	b120      	cbz	r0, 80a0cd8 <_Z10fuzzy_initv+0x844>
 80a0cce:	464b      	mov	r3, r9
 80a0cd0:	4632      	mov	r2, r6
 80a0cd2:	2105      	movs	r1, #5
 80a0cd4:	f001 fb08 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr5);
 80a0cd8:	4b7f      	ldr	r3, [pc, #508]	; (80a0ed8 <_Z10fuzzy_initv+0xa44>)
 80a0cda:	4651      	mov	r1, sl
 80a0cdc:	6818      	ldr	r0, [r3, #0]
 80a0cde:	f002 f8b5 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HHLL = new FuzzyRuleAntecedent();
 80a0ce2:	2018      	movs	r0, #24
 80a0ce4:	f7ff f9d9 	bl	80a009a <_Znwj>
 80a0ce8:	4606      	mov	r6, r0
 80a0cea:	b108      	cbz	r0, 80a0cf0 <_Z10fuzzy_initv+0x85c>
 80a0cec:	f002 f90e 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  HHLL->joinWithAND(left_high_high, right_low_low);
 80a0cf0:	462a      	mov	r2, r5
 80a0cf2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a0cf4:	4630      	mov	r0, r6
 80a0cf6:	f002 f920 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr6 = new FuzzyRule(6, HHLL, drive_small_left);
 80a0cfa:	2010      	movs	r0, #16
 80a0cfc:	f7ff f9cd 	bl	80a009a <_Znwj>
 80a0d00:	4682      	mov	sl, r0
 80a0d02:	b120      	cbz	r0, 80a0d0e <_Z10fuzzy_initv+0x87a>
 80a0d04:	4643      	mov	r3, r8
 80a0d06:	4632      	mov	r2, r6
 80a0d08:	2106      	movs	r1, #6
 80a0d0a:	f001 faed 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr6);
 80a0d0e:	4b72      	ldr	r3, [pc, #456]	; (80a0ed8 <_Z10fuzzy_initv+0xa44>)
 80a0d10:	4651      	mov	r1, sl
 80a0d12:	6818      	ldr	r0, [r3, #0]
 80a0d14:	f002 f89a 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HHML = new FuzzyRuleAntecedent();
 80a0d18:	2018      	movs	r0, #24
 80a0d1a:	f7ff f9be 	bl	80a009a <_Znwj>
 80a0d1e:	4606      	mov	r6, r0
 80a0d20:	b108      	cbz	r0, 80a0d26 <_Z10fuzzy_initv+0x892>
 80a0d22:	f002 f8f3 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  HHML->joinWithAND(left_high_high, right_med_low);
 80a0d26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a0d28:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a0d2a:	4630      	mov	r0, r6
 80a0d2c:	f002 f905 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr7 = new FuzzyRule(6, HHML, drive_small_left);
 80a0d30:	2010      	movs	r0, #16
 80a0d32:	f7ff f9b2 	bl	80a009a <_Znwj>
 80a0d36:	4682      	mov	sl, r0
 80a0d38:	b120      	cbz	r0, 80a0d44 <_Z10fuzzy_initv+0x8b0>
 80a0d3a:	4643      	mov	r3, r8
 80a0d3c:	4632      	mov	r2, r6
 80a0d3e:	2106      	movs	r1, #6
 80a0d40:	f001 fad2 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr7);
 80a0d44:	4b64      	ldr	r3, [pc, #400]	; (80a0ed8 <_Z10fuzzy_initv+0xa44>)
 80a0d46:	4651      	mov	r1, sl
 80a0d48:	6818      	ldr	r0, [r3, #0]
 80a0d4a:	f002 f87f 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HHMM = new FuzzyRuleAntecedent();
 80a0d4e:	2018      	movs	r0, #24
 80a0d50:	f7ff f9a3 	bl	80a009a <_Znwj>
 80a0d54:	4606      	mov	r6, r0
 80a0d56:	b108      	cbz	r0, 80a0d5c <_Z10fuzzy_initv+0x8c8>
 80a0d58:	f002 f8d8 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  HHMM->joinWithAND(left_high_high, right_med_med);
 80a0d5c:	465a      	mov	r2, fp
 80a0d5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a0d60:	4630      	mov	r0, r6
 80a0d62:	f002 f8ea 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr8 = new FuzzyRule(8, HHMM, drive_small_left);
 80a0d66:	2010      	movs	r0, #16
 80a0d68:	f7ff f997 	bl	80a009a <_Znwj>
 80a0d6c:	4682      	mov	sl, r0
 80a0d6e:	b120      	cbz	r0, 80a0d7a <_Z10fuzzy_initv+0x8e6>
 80a0d70:	4643      	mov	r3, r8
 80a0d72:	4632      	mov	r2, r6
 80a0d74:	2108      	movs	r1, #8
 80a0d76:	f001 fab7 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr8);
 80a0d7a:	4b57      	ldr	r3, [pc, #348]	; (80a0ed8 <_Z10fuzzy_initv+0xa44>)
 80a0d7c:	4651      	mov	r1, sl
 80a0d7e:	6818      	ldr	r0, [r3, #0]
 80a0d80:	f002 f864 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MHMM = new FuzzyRuleAntecedent();
 80a0d84:	2018      	movs	r0, #24
 80a0d86:	f7ff f988 	bl	80a009a <_Znwj>
 80a0d8a:	4606      	mov	r6, r0
 80a0d8c:	b108      	cbz	r0, 80a0d92 <_Z10fuzzy_initv+0x8fe>
 80a0d8e:	f002 f8bd 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  MHMM->joinWithAND(left_med_high, right_med_med);
 80a0d92:	465a      	mov	r2, fp
 80a0d94:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0d96:	4630      	mov	r0, r6
 80a0d98:	f002 f8cf 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr9 = new FuzzyRule(9, MHMM, drive_small_left);
 80a0d9c:	2010      	movs	r0, #16
 80a0d9e:	f7ff f97c 	bl	80a009a <_Znwj>
 80a0da2:	4682      	mov	sl, r0
 80a0da4:	b120      	cbz	r0, 80a0db0 <_Z10fuzzy_initv+0x91c>
 80a0da6:	4643      	mov	r3, r8
 80a0da8:	4632      	mov	r2, r6
 80a0daa:	2109      	movs	r1, #9
 80a0dac:	f001 fa9c 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr9);
 80a0db0:	4b49      	ldr	r3, [pc, #292]	; (80a0ed8 <_Z10fuzzy_initv+0xa44>)
 80a0db2:	4651      	mov	r1, sl
 80a0db4:	6818      	ldr	r0, [r3, #0]
 80a0db6:	f002 f849 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MHML = new FuzzyRuleAntecedent();
 80a0dba:	2018      	movs	r0, #24
 80a0dbc:	f7ff f96d 	bl	80a009a <_Znwj>
 80a0dc0:	4606      	mov	r6, r0
 80a0dc2:	b108      	cbz	r0, 80a0dc8 <_Z10fuzzy_initv+0x934>
 80a0dc4:	f002 f8a2 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  MHML->joinWithAND(left_med_high, right_med_low);
 80a0dc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a0dca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0dcc:	4630      	mov	r0, r6
 80a0dce:	f002 f8b4 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr10 = new FuzzyRule(10, MHML, drive_small_left);
 80a0dd2:	2010      	movs	r0, #16
 80a0dd4:	f7ff f961 	bl	80a009a <_Znwj>
 80a0dd8:	4682      	mov	sl, r0
 80a0dda:	b120      	cbz	r0, 80a0de6 <_Z10fuzzy_initv+0x952>
 80a0ddc:	4643      	mov	r3, r8
 80a0dde:	4632      	mov	r2, r6
 80a0de0:	210a      	movs	r1, #10
 80a0de2:	f001 fa81 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr10);
 80a0de6:	4b3c      	ldr	r3, [pc, #240]	; (80a0ed8 <_Z10fuzzy_initv+0xa44>)
 80a0de8:	4651      	mov	r1, sl
 80a0dea:	6818      	ldr	r0, [r3, #0]
 80a0dec:	f002 f82e 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MHLL = new FuzzyRuleAntecedent();
 80a0df0:	2018      	movs	r0, #24
 80a0df2:	f7ff f952 	bl	80a009a <_Znwj>
 80a0df6:	4606      	mov	r6, r0
 80a0df8:	b108      	cbz	r0, 80a0dfe <_Z10fuzzy_initv+0x96a>
 80a0dfa:	f002 f887 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  MHLL->joinWithAND(left_med_high, right_low_low);
 80a0dfe:	462a      	mov	r2, r5
 80a0e00:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0e02:	4630      	mov	r0, r6
 80a0e04:	f002 f899 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr11 = new FuzzyRule(11, MHLL, drive_small_left);
 80a0e08:	2010      	movs	r0, #16
 80a0e0a:	f7ff f946 	bl	80a009a <_Znwj>
 80a0e0e:	4682      	mov	sl, r0
 80a0e10:	b120      	cbz	r0, 80a0e1c <_Z10fuzzy_initv+0x988>
 80a0e12:	4643      	mov	r3, r8
 80a0e14:	4632      	mov	r2, r6
 80a0e16:	210b      	movs	r1, #11
 80a0e18:	f001 fa66 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr11);
 80a0e1c:	4b2e      	ldr	r3, [pc, #184]	; (80a0ed8 <_Z10fuzzy_initv+0xa44>)
 80a0e1e:	4651      	mov	r1, sl
 80a0e20:	6818      	ldr	r0, [r3, #0]
 80a0e22:	f002 f813 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMML = new FuzzyRuleAntecedent();
 80a0e26:	2018      	movs	r0, #24
 80a0e28:	f7ff f937 	bl	80a009a <_Znwj>
 80a0e2c:	4606      	mov	r6, r0
 80a0e2e:	b108      	cbz	r0, 80a0e34 <_Z10fuzzy_initv+0x9a0>
 80a0e30:	f002 f86c 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  MMML->joinWithAND(left_med_med, right_med_low);
 80a0e34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a0e36:	9908      	ldr	r1, [sp, #32]
 80a0e38:	4630      	mov	r0, r6
 80a0e3a:	f002 f87e 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr12 = new FuzzyRule(12, MMML, drive_small_left);
 80a0e3e:	2010      	movs	r0, #16
 80a0e40:	f7ff f92b 	bl	80a009a <_Znwj>
 80a0e44:	4682      	mov	sl, r0
 80a0e46:	b120      	cbz	r0, 80a0e52 <_Z10fuzzy_initv+0x9be>
 80a0e48:	4643      	mov	r3, r8
 80a0e4a:	4632      	mov	r2, r6
 80a0e4c:	210c      	movs	r1, #12
 80a0e4e:	f001 fa4b 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr12);
 80a0e52:	4b21      	ldr	r3, [pc, #132]	; (80a0ed8 <_Z10fuzzy_initv+0xa44>)
 80a0e54:	4651      	mov	r1, sl
 80a0e56:	6818      	ldr	r0, [r3, #0]
 80a0e58:	f001 fff8 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMLL = new FuzzyRuleAntecedent();
 80a0e5c:	2018      	movs	r0, #24
 80a0e5e:	f7ff f91c 	bl	80a009a <_Znwj>
 80a0e62:	4606      	mov	r6, r0
 80a0e64:	b108      	cbz	r0, 80a0e6a <_Z10fuzzy_initv+0x9d6>
 80a0e66:	f002 f851 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  MMLL->joinWithAND(left_med_med, right_low_low);
 80a0e6a:	462a      	mov	r2, r5
 80a0e6c:	9908      	ldr	r1, [sp, #32]
 80a0e6e:	4630      	mov	r0, r6
 80a0e70:	f002 f863 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr13 = new FuzzyRule(13, MMLL, drive_small_left);
 80a0e74:	2010      	movs	r0, #16
 80a0e76:	f7ff f910 	bl	80a009a <_Znwj>
 80a0e7a:	4682      	mov	sl, r0
 80a0e7c:	b120      	cbz	r0, 80a0e88 <_Z10fuzzy_initv+0x9f4>
 80a0e7e:	4643      	mov	r3, r8
 80a0e80:	4632      	mov	r2, r6
 80a0e82:	210d      	movs	r1, #13
 80a0e84:	f001 fa30 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr13);
 80a0e88:	4b13      	ldr	r3, [pc, #76]	; (80a0ed8 <_Z10fuzzy_initv+0xa44>)
 80a0e8a:	4651      	mov	r1, sl
 80a0e8c:	6818      	ldr	r0, [r3, #0]
 80a0e8e:	f001 ffdd 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HMLL = new FuzzyRuleAntecedent();
 80a0e92:	2018      	movs	r0, #24
 80a0e94:	f7ff f901 	bl	80a009a <_Znwj>
 80a0e98:	4606      	mov	r6, r0
 80a0e9a:	b108      	cbz	r0, 80a0ea0 <_Z10fuzzy_initv+0xa0c>
 80a0e9c:	f002 f836 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  HMLL->joinWithAND(left_high_med, right_low_low);
 80a0ea0:	462a      	mov	r2, r5
 80a0ea2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80a0ea4:	4630      	mov	r0, r6
 80a0ea6:	f002 f848 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr14 = new FuzzyRule(14, HMLL, drive_small_left);
 80a0eaa:	2010      	movs	r0, #16
 80a0eac:	f7ff f8f5 	bl	80a009a <_Znwj>
 80a0eb0:	4682      	mov	sl, r0
 80a0eb2:	b120      	cbz	r0, 80a0ebe <_Z10fuzzy_initv+0xa2a>
 80a0eb4:	4643      	mov	r3, r8
 80a0eb6:	4632      	mov	r2, r6
 80a0eb8:	210e      	movs	r1, #14
 80a0eba:	f001 fa15 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr14);
 80a0ebe:	4b06      	ldr	r3, [pc, #24]	; (80a0ed8 <_Z10fuzzy_initv+0xa44>)
 80a0ec0:	4651      	mov	r1, sl
 80a0ec2:	6818      	ldr	r0, [r3, #0]
 80a0ec4:	f001 ffc2 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MLLL = new FuzzyRuleAntecedent();
 80a0ec8:	2018      	movs	r0, #24
 80a0eca:	f7ff f8e6 	bl	80a009a <_Znwj>
 80a0ece:	4606      	mov	r6, r0
 80a0ed0:	b120      	cbz	r0, 80a0edc <_Z10fuzzy_initv+0xa48>
 80a0ed2:	f002 f81b 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
 80a0ed6:	e001      	b.n	80a0edc <_Z10fuzzy_initv+0xa48>
 80a0ed8:	200003a4 	.word	0x200003a4
  MLLL->joinWithAND(left_med_low, right_low_low);
 80a0edc:	462a      	mov	r2, r5
 80a0ede:	9915      	ldr	r1, [sp, #84]	; 0x54
 80a0ee0:	4630      	mov	r0, r6
 80a0ee2:	f002 f82a 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr15 = new FuzzyRule(15, MLLL, drive_small_left);
 80a0ee6:	2010      	movs	r0, #16
 80a0ee8:	f7ff f8d7 	bl	80a009a <_Znwj>
 80a0eec:	4682      	mov	sl, r0
 80a0eee:	b120      	cbz	r0, 80a0efa <_Z10fuzzy_initv+0xa66>
 80a0ef0:	4643      	mov	r3, r8
 80a0ef2:	4632      	mov	r2, r6
 80a0ef4:	210f      	movs	r1, #15
 80a0ef6:	f001 f9f7 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr15);
 80a0efa:	4bae      	ldr	r3, [pc, #696]	; (80a11b4 <_Z10fuzzy_initv+0xd20>)
 80a0efc:	4651      	mov	r1, sl
 80a0efe:	6818      	ldr	r0, [r3, #0]
 80a0f00:	f001 ffa4 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HLLL = new FuzzyRuleAntecedent();
 80a0f04:	2018      	movs	r0, #24
 80a0f06:	f7ff f8c8 	bl	80a009a <_Znwj>
 80a0f0a:	4606      	mov	r6, r0
 80a0f0c:	b108      	cbz	r0, 80a0f12 <_Z10fuzzy_initv+0xa7e>
 80a0f0e:	f001 fffd 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  HLLL->joinWithAND(left_high_low, right_low_low);
 80a0f12:	462a      	mov	r2, r5
 80a0f14:	9916      	ldr	r1, [sp, #88]	; 0x58
 80a0f16:	4630      	mov	r0, r6
 80a0f18:	f002 f80f 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr16 = new FuzzyRule(16, HLLL, drive_full_left);
 80a0f1c:	2010      	movs	r0, #16
 80a0f1e:	f7ff f8bc 	bl	80a009a <_Znwj>
 80a0f22:	4680      	mov	r8, r0
 80a0f24:	b120      	cbz	r0, 80a0f30 <_Z10fuzzy_initv+0xa9c>
 80a0f26:	9b04      	ldr	r3, [sp, #16]
 80a0f28:	4632      	mov	r2, r6
 80a0f2a:	2110      	movs	r1, #16
 80a0f2c:	f001 f9dc 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr16);
 80a0f30:	4ea0      	ldr	r6, [pc, #640]	; (80a11b4 <_Z10fuzzy_initv+0xd20>)
 80a0f32:	4641      	mov	r1, r8
 80a0f34:	6830      	ldr	r0, [r6, #0]
 80a0f36:	f001 ff89 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLLH = new FuzzyRuleAntecedent();
 80a0f3a:	2018      	movs	r0, #24
 80a0f3c:	f7ff f8ad 	bl	80a009a <_Znwj>
 80a0f40:	4680      	mov	r8, r0
 80a0f42:	b108      	cbz	r0, 80a0f48 <_Z10fuzzy_initv+0xab4>
 80a0f44:	f001 ffe2 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  LLLH->joinWithAND(left_low_low, right_low_high);
 80a0f48:	9a06      	ldr	r2, [sp, #24]
 80a0f4a:	4639      	mov	r1, r7
 80a0f4c:	4640      	mov	r0, r8
 80a0f4e:	f001 fff4 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr17 = new FuzzyRule(17, LLLH, drive_full_right);
 80a0f52:	2010      	movs	r0, #16
 80a0f54:	f7ff f8a1 	bl	80a009a <_Znwj>
 80a0f58:	4682      	mov	sl, r0
 80a0f5a:	b120      	cbz	r0, 80a0f66 <_Z10fuzzy_initv+0xad2>
 80a0f5c:	9b07      	ldr	r3, [sp, #28]
 80a0f5e:	4642      	mov	r2, r8
 80a0f60:	2111      	movs	r1, #17
 80a0f62:	f001 f9c1 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr17);
 80a0f66:	4651      	mov	r1, sl
 80a0f68:	6830      	ldr	r0, [r6, #0]
 80a0f6a:	f001 ff6f 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLHH = new FuzzyRuleAntecedent();
 80a0f6e:	2018      	movs	r0, #24
 80a0f70:	f7ff f893 	bl	80a009a <_Znwj>
 80a0f74:	4606      	mov	r6, r0
 80a0f76:	b108      	cbz	r0, 80a0f7c <_Z10fuzzy_initv+0xae8>
 80a0f78:	f001 ffc8 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  LLHH->joinWithAND(left_low_low, right_high_high);
 80a0f7c:	9a03      	ldr	r2, [sp, #12]
 80a0f7e:	4639      	mov	r1, r7
 80a0f80:	4630      	mov	r0, r6
 80a0f82:	f001 ffda 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr18 = new FuzzyRule(18, LLHH, drive_small_right);
 80a0f86:	2010      	movs	r0, #16
 80a0f88:	f7ff f887 	bl	80a009a <_Znwj>
 80a0f8c:	4680      	mov	r8, r0
 80a0f8e:	b120      	cbz	r0, 80a0f9a <_Z10fuzzy_initv+0xb06>
 80a0f90:	4623      	mov	r3, r4
 80a0f92:	4632      	mov	r2, r6
 80a0f94:	2112      	movs	r1, #18
 80a0f96:	f001 f9a7 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr18);
 80a0f9a:	4e86      	ldr	r6, [pc, #536]	; (80a11b4 <_Z10fuzzy_initv+0xd20>)
 80a0f9c:	4641      	mov	r1, r8
 80a0f9e:	6830      	ldr	r0, [r6, #0]
 80a0fa0:	f001 ff54 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMHH = new FuzzyRuleAntecedent();
 80a0fa4:	2018      	movs	r0, #24
 80a0fa6:	f7ff f878 	bl	80a009a <_Znwj>
 80a0faa:	4680      	mov	r8, r0
 80a0fac:	b108      	cbz	r0, 80a0fb2 <_Z10fuzzy_initv+0xb1e>
 80a0fae:	f001 ffad 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  LMHH->joinWithAND(left_low_med, right_high_high);
 80a0fb2:	9a03      	ldr	r2, [sp, #12]
 80a0fb4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a0fb6:	4640      	mov	r0, r8
 80a0fb8:	f001 ffbf 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr19 = new FuzzyRule(19, LMHH, drive_small_right);
 80a0fbc:	2010      	movs	r0, #16
 80a0fbe:	f7ff f86c 	bl	80a009a <_Znwj>
 80a0fc2:	4682      	mov	sl, r0
 80a0fc4:	b120      	cbz	r0, 80a0fd0 <_Z10fuzzy_initv+0xb3c>
 80a0fc6:	4623      	mov	r3, r4
 80a0fc8:	4642      	mov	r2, r8
 80a0fca:	2113      	movs	r1, #19
 80a0fcc:	f001 f98c 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr19);
 80a0fd0:	4651      	mov	r1, sl
 80a0fd2:	6830      	ldr	r0, [r6, #0]
 80a0fd4:	f001 ff3a 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMHH = new FuzzyRuleAntecedent();
 80a0fd8:	2018      	movs	r0, #24
 80a0fda:	f7ff f85e 	bl	80a009a <_Znwj>
 80a0fde:	4606      	mov	r6, r0
 80a0fe0:	b108      	cbz	r0, 80a0fe6 <_Z10fuzzy_initv+0xb52>
 80a0fe2:	f001 ff93 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  MMHH->joinWithAND(left_med_med, right_high_high);
 80a0fe6:	9a03      	ldr	r2, [sp, #12]
 80a0fe8:	9908      	ldr	r1, [sp, #32]
 80a0fea:	4630      	mov	r0, r6
 80a0fec:	f001 ffa5 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr20 = new FuzzyRule(20, MMHH, drive_small_right);
 80a0ff0:	2010      	movs	r0, #16
 80a0ff2:	f7ff f852 	bl	80a009a <_Znwj>
 80a0ff6:	4680      	mov	r8, r0
 80a0ff8:	b120      	cbz	r0, 80a1004 <_Z10fuzzy_initv+0xb70>
 80a0ffa:	4623      	mov	r3, r4
 80a0ffc:	4632      	mov	r2, r6
 80a0ffe:	2114      	movs	r1, #20
 80a1000:	f001 f972 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr20);
 80a1004:	4e6b      	ldr	r6, [pc, #428]	; (80a11b4 <_Z10fuzzy_initv+0xd20>)
 80a1006:	4641      	mov	r1, r8
 80a1008:	6830      	ldr	r0, [r6, #0]
 80a100a:	f001 ff1f 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMHM = new FuzzyRuleAntecedent();
 80a100e:	2018      	movs	r0, #24
 80a1010:	f7ff f843 	bl	80a009a <_Znwj>
 80a1014:	4680      	mov	r8, r0
 80a1016:	b108      	cbz	r0, 80a101c <_Z10fuzzy_initv+0xb88>
 80a1018:	f001 ff78 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  MMHM->joinWithAND(left_med_med, right_high_med);
 80a101c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a101e:	9908      	ldr	r1, [sp, #32]
 80a1020:	4640      	mov	r0, r8
 80a1022:	f001 ff8a 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr21 = new FuzzyRule(21, MMHM, drive_small_right);
 80a1026:	2010      	movs	r0, #16
 80a1028:	f7ff f837 	bl	80a009a <_Znwj>
 80a102c:	4682      	mov	sl, r0
 80a102e:	b120      	cbz	r0, 80a103a <_Z10fuzzy_initv+0xba6>
 80a1030:	4623      	mov	r3, r4
 80a1032:	4642      	mov	r2, r8
 80a1034:	2115      	movs	r1, #21
 80a1036:	f001 f957 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr21);
 80a103a:	4651      	mov	r1, sl
 80a103c:	6830      	ldr	r0, [r6, #0]
 80a103e:	f001 ff05 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMHM = new FuzzyRuleAntecedent();
 80a1042:	2018      	movs	r0, #24
 80a1044:	f7ff f829 	bl	80a009a <_Znwj>
 80a1048:	4680      	mov	r8, r0
 80a104a:	b108      	cbz	r0, 80a1050 <_Z10fuzzy_initv+0xbbc>
 80a104c:	f001 ff5e 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  LMHM->joinWithAND(left_low_med, right_high_med);
 80a1050:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a1052:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a1054:	4640      	mov	r0, r8
 80a1056:	f001 ff70 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr22 = new FuzzyRule(22, LMHM, drive_small_right);
 80a105a:	2010      	movs	r0, #16
 80a105c:	f7ff f81d 	bl	80a009a <_Znwj>
 80a1060:	4682      	mov	sl, r0
 80a1062:	b120      	cbz	r0, 80a106e <_Z10fuzzy_initv+0xbda>
 80a1064:	4623      	mov	r3, r4
 80a1066:	4642      	mov	r2, r8
 80a1068:	2116      	movs	r1, #22
 80a106a:	f001 f93d 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr22);
 80a106e:	4651      	mov	r1, sl
 80a1070:	6830      	ldr	r0, [r6, #0]
 80a1072:	f001 feeb 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLHM = new FuzzyRuleAntecedent();
 80a1076:	2018      	movs	r0, #24
 80a1078:	f7ff f80f 	bl	80a009a <_Znwj>
 80a107c:	4680      	mov	r8, r0
 80a107e:	b108      	cbz	r0, 80a1084 <_Z10fuzzy_initv+0xbf0>
 80a1080:	f001 ff44 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  LLHM->joinWithAND(left_low_low, right_high_med);
 80a1084:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a1086:	4639      	mov	r1, r7
 80a1088:	4640      	mov	r0, r8
 80a108a:	f001 ff56 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr23 = new FuzzyRule(23, LLHM, drive_small_right);
 80a108e:	2010      	movs	r0, #16
 80a1090:	f7ff f803 	bl	80a009a <_Znwj>
 80a1094:	4682      	mov	sl, r0
 80a1096:	b120      	cbz	r0, 80a10a2 <_Z10fuzzy_initv+0xc0e>
 80a1098:	4623      	mov	r3, r4
 80a109a:	4642      	mov	r2, r8
 80a109c:	2117      	movs	r1, #23
 80a109e:	f001 f923 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr23);
 80a10a2:	4651      	mov	r1, sl
 80a10a4:	6830      	ldr	r0, [r6, #0]
 80a10a6:	f001 fed1 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMMM = new FuzzyRuleAntecedent();
 80a10aa:	2018      	movs	r0, #24
 80a10ac:	f7fe fff5 	bl	80a009a <_Znwj>
 80a10b0:	4680      	mov	r8, r0
 80a10b2:	b108      	cbz	r0, 80a10b8 <_Z10fuzzy_initv+0xc24>
 80a10b4:	f001 ff2a 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  LMMM->joinWithAND(left_low_med, right_med_med);
 80a10b8:	465a      	mov	r2, fp
 80a10ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a10bc:	4640      	mov	r0, r8
 80a10be:	f001 ff3c 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr24 = new FuzzyRule(24, LMMM, drive_small_right);
 80a10c2:	2010      	movs	r0, #16
 80a10c4:	f7fe ffe9 	bl	80a009a <_Znwj>
 80a10c8:	4682      	mov	sl, r0
 80a10ca:	b120      	cbz	r0, 80a10d6 <_Z10fuzzy_initv+0xc42>
 80a10cc:	4623      	mov	r3, r4
 80a10ce:	4642      	mov	r2, r8
 80a10d0:	2118      	movs	r1, #24
 80a10d2:	f001 f909 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr24);
 80a10d6:	4651      	mov	r1, sl
 80a10d8:	6830      	ldr	r0, [r6, #0]
 80a10da:	f001 feb7 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLMM = new FuzzyRuleAntecedent();
 80a10de:	2018      	movs	r0, #24
 80a10e0:	f7fe ffdb 	bl	80a009a <_Znwj>
 80a10e4:	4680      	mov	r8, r0
 80a10e6:	b108      	cbz	r0, 80a10ec <_Z10fuzzy_initv+0xc58>
 80a10e8:	f001 ff10 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  LLMM->joinWithAND(left_low_low, right_med_med);
 80a10ec:	465a      	mov	r2, fp
 80a10ee:	4639      	mov	r1, r7
 80a10f0:	4640      	mov	r0, r8
 80a10f2:	f001 ff22 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr25 = new FuzzyRule(25, LLMM, drive_small_right);
 80a10f6:	2010      	movs	r0, #16
 80a10f8:	f7fe ffcf 	bl	80a009a <_Znwj>
 80a10fc:	4682      	mov	sl, r0
 80a10fe:	b120      	cbz	r0, 80a110a <_Z10fuzzy_initv+0xc76>
 80a1100:	4623      	mov	r3, r4
 80a1102:	4642      	mov	r2, r8
 80a1104:	2119      	movs	r1, #25
 80a1106:	f001 f8ef 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr25);
 80a110a:	4651      	mov	r1, sl
 80a110c:	6830      	ldr	r0, [r6, #0]
 80a110e:	f001 fe9d 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLMH = new FuzzyRuleAntecedent();
 80a1112:	2018      	movs	r0, #24
 80a1114:	f7fe ffc1 	bl	80a009a <_Znwj>
 80a1118:	4680      	mov	r8, r0
 80a111a:	b108      	cbz	r0, 80a1120 <_Z10fuzzy_initv+0xc8c>
 80a111c:	f001 fef6 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  LLMH->joinWithAND(left_low_low, right_med_high);
 80a1120:	9a05      	ldr	r2, [sp, #20]
 80a1122:	4639      	mov	r1, r7
 80a1124:	4640      	mov	r0, r8
 80a1126:	f001 ff08 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr26 = new FuzzyRule(26, LLMH, drive_small_right);
 80a112a:	2010      	movs	r0, #16
 80a112c:	f7fe ffb5 	bl	80a009a <_Znwj>
 80a1130:	4682      	mov	sl, r0
 80a1132:	b120      	cbz	r0, 80a113e <_Z10fuzzy_initv+0xcaa>
 80a1134:	4623      	mov	r3, r4
 80a1136:	4642      	mov	r2, r8
 80a1138:	211a      	movs	r1, #26
 80a113a:	f001 f8d5 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr26);
 80a113e:	4651      	mov	r1, sl
 80a1140:	6830      	ldr	r0, [r6, #0]
 80a1142:	f001 fe83 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLLM = new FuzzyRuleAntecedent();
 80a1146:	2018      	movs	r0, #24
 80a1148:	f7fe ffa7 	bl	80a009a <_Znwj>
 80a114c:	4680      	mov	r8, r0
 80a114e:	b108      	cbz	r0, 80a1154 <_Z10fuzzy_initv+0xcc0>
 80a1150:	f001 fedc 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  LLLM->joinWithAND(left_low_low, right_low_med);
 80a1154:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a1156:	4639      	mov	r1, r7
 80a1158:	4640      	mov	r0, r8
 80a115a:	f001 feee 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr27 = new FuzzyRule(27, LLLM, drive_small_right);
 80a115e:	2010      	movs	r0, #16
 80a1160:	f7fe ff9b 	bl	80a009a <_Znwj>
 80a1164:	4682      	mov	sl, r0
 80a1166:	b120      	cbz	r0, 80a1172 <_Z10fuzzy_initv+0xcde>
 80a1168:	4623      	mov	r3, r4
 80a116a:	4642      	mov	r2, r8
 80a116c:	211b      	movs	r1, #27
 80a116e:	f001 f8bb 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr27);
 80a1172:	4651      	mov	r1, sl
 80a1174:	6830      	ldr	r0, [r6, #0]
 80a1176:	f001 fe69 	bl	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLLL = new FuzzyRuleAntecedent();
 80a117a:	2018      	movs	r0, #24
 80a117c:	f7fe ff8d 	bl	80a009a <_Znwj>
 80a1180:	4604      	mov	r4, r0
 80a1182:	b108      	cbz	r0, 80a1188 <_Z10fuzzy_initv+0xcf4>
 80a1184:	f001 fec2 	bl	80a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>
  LLLL->joinWithAND(left_low_low, right_low_low);
 80a1188:	462a      	mov	r2, r5
 80a118a:	4639      	mov	r1, r7
 80a118c:	4620      	mov	r0, r4
 80a118e:	f001 fed4 	bl	80a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr28 = new FuzzyRule(28, LLLL, drive_center);	// should it be search?
 80a1192:	2010      	movs	r0, #16
 80a1194:	f7fe ff81 	bl	80a009a <_Znwj>
 80a1198:	4605      	mov	r5, r0
 80a119a:	b120      	cbz	r0, 80a11a6 <_Z10fuzzy_initv+0xd12>
 80a119c:	464b      	mov	r3, r9
 80a119e:	4622      	mov	r2, r4
 80a11a0:	211c      	movs	r1, #28
 80a11a2:	f001 f8a1 	bl	80a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr28);
 80a11a6:	4629      	mov	r1, r5
 80a11a8:	6830      	ldr	r0, [r6, #0]
}
 80a11aa:	b019      	add	sp, #100	; 0x64
 80a11ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fuzzy->addFuzzyRule(fr27);

  FuzzyRuleAntecedent* LLLL = new FuzzyRuleAntecedent();
  LLLL->joinWithAND(left_low_low, right_low_low);
  FuzzyRule* fr28 = new FuzzyRule(28, LLLL, drive_center);	// should it be search?
  fuzzy->addFuzzyRule(fr28);
 80a11b0:	f001 be4c 	b.w	80a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>
 80a11b4:	200003a4 	.word	0x200003a4

080a11b8 <setup>:
}

void setup() {
 80a11b8:	b508      	push	{r3, lr}
	tof_init();			// ToF and I2C
 80a11ba:	f7fe ffcb 	bl	80a0154 <_Z8tof_initv>
	accel_init();		// accelerometer
 80a11be:	f7ff f87d 	bl	80a02bc <_Z10accel_initv>
	others_init();		// line, remote, esc, ***printing***
 80a11c2:	f7ff f895 	bl	80a02f0 <_Z11others_initv>
	interrupt_init();	// interrupts for lines and remote
 80a11c6:	f7ff f8cd 	bl	80a0364 <_Z14interrupt_initv>
	ESC_init();			// Car ESCs
 80a11ca:	f7ff f911 	bl	80a03f0 <_Z8ESC_initv>
	robot_init();
 80a11ce:	f7ff f93f 	bl	80a0450 <_Z10robot_initv>
	// Particle.variable("Left_ESC", L_command);
	// Particle.variable("Right_ESC", R_command);
	// *********************************************

 	fuzzy_init();		// Fuzzy library************
}
 80a11d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	// Particle.variable("distance", distance);
	// Particle.variable("Left_ESC", L_command);
	// Particle.variable("Right_ESC", R_command);
	// *********************************************

 	fuzzy_init();		// Fuzzy library************
 80a11d6:	f7ff b95d 	b.w	80a0494 <_Z10fuzzy_initv>
	...

080a11dc <loop>:
}

void loop(){
 80a11dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	// sensorx.readRangeContinuousMillimeters();
	RR_distance = sensor0.readRangeContinuousMillimeters();
 80a11e0:	4867      	ldr	r0, [pc, #412]	; (80a1380 <loop+0x1a4>)
 80a11e2:	f000 fae7 	bl	80a17b4 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a11e6:	4c67      	ldr	r4, [pc, #412]	; (80a1384 <loop+0x1a8>)
	RM_distance = sensor1.readRangeContinuousMillimeters();
 80a11e8:	4e67      	ldr	r6, [pc, #412]	; (80a1388 <loop+0x1ac>)
 	fuzzy_init();		// Fuzzy library************
}

void loop(){
	// sensorx.readRangeContinuousMillimeters();
	RR_distance = sensor0.readRangeContinuousMillimeters();
 80a11ea:	8020      	strh	r0, [r4, #0]
	RM_distance = sensor1.readRangeContinuousMillimeters();
 80a11ec:	4867      	ldr	r0, [pc, #412]	; (80a138c <loop+0x1b0>)
 80a11ee:	f000 fae1 	bl	80a17b4 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a11f2:	8030      	strh	r0, [r6, #0]
	LM_distance = sensor2.readRangeContinuousMillimeters();
 80a11f4:	4866      	ldr	r0, [pc, #408]	; (80a1390 <loop+0x1b4>)
 80a11f6:	f000 fadd 	bl	80a17b4 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a11fa:	4f66      	ldr	r7, [pc, #408]	; (80a1394 <loop+0x1b8>)
	LL_distance = sensor3.readRangeContinuousMillimeters();
 80a11fc:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 80a13f8 <loop+0x21c>

void loop(){
	// sensorx.readRangeContinuousMillimeters();
	RR_distance = sensor0.readRangeContinuousMillimeters();
	RM_distance = sensor1.readRangeContinuousMillimeters();
	LM_distance = sensor2.readRangeContinuousMillimeters();
 80a1200:	8038      	strh	r0, [r7, #0]
	LL_distance = sensor3.readRangeContinuousMillimeters();
 80a1202:	4865      	ldr	r0, [pc, #404]	; (80a1398 <loop+0x1bc>)
 80a1204:	f000 fad6 	bl	80a17b4 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a1208:	f8a8 0000 	strh.w	r0, [r8]

	if (sensor0.timeoutOccurred() || sensor1.timeoutOccurred() || sensor2.timeoutOccurred() || sensor3.timeoutOccurred()) { Serial.print(" SENSOR TIMEOUT"); }
 80a120c:	485c      	ldr	r0, [pc, #368]	; (80a1380 <loop+0x1a4>)
 80a120e:	f000 faf7 	bl	80a1800 <_ZN7VL53L0X15timeoutOccurredEv>
 80a1212:	4625      	mov	r5, r4
 80a1214:	2800      	cmp	r0, #0
 80a1216:	f040 80ac 	bne.w	80a1372 <loop+0x196>
 80a121a:	485c      	ldr	r0, [pc, #368]	; (80a138c <loop+0x1b0>)
 80a121c:	f000 faf0 	bl	80a1800 <_ZN7VL53L0X15timeoutOccurredEv>
 80a1220:	2800      	cmp	r0, #0
 80a1222:	f040 80a6 	bne.w	80a1372 <loop+0x196>
 80a1226:	485a      	ldr	r0, [pc, #360]	; (80a1390 <loop+0x1b4>)
 80a1228:	f000 faea 	bl	80a1800 <_ZN7VL53L0X15timeoutOccurredEv>
 80a122c:	2800      	cmp	r0, #0
 80a122e:	f040 80a0 	bne.w	80a1372 <loop+0x196>
 80a1232:	4859      	ldr	r0, [pc, #356]	; (80a1398 <loop+0x1bc>)
 80a1234:	f000 fae4 	bl	80a1800 <_ZN7VL53L0X15timeoutOccurredEv>
 80a1238:	2800      	cmp	r0, #0
 80a123a:	f040 809a 	bne.w	80a1372 <loop+0x196>
	// 	RR_distance = low4;
	// }

  	// FUZZY **************************************************

  	fuzzy->setInput(1, LL_distance);
 80a123e:	f8b8 0000 	ldrh.w	r0, [r8]
 80a1242:	f003 ff85 	bl	80a5150 <__aeabi_ui2f>
 80a1246:	4c55      	ldr	r4, [pc, #340]	; (80a139c <loop+0x1c0>)
 80a1248:	4602      	mov	r2, r0
 80a124a:	2101      	movs	r1, #1
 80a124c:	6820      	ldr	r0, [r4, #0]
 80a124e:	f001 fe10 	bl	80a2e72 <_ZN5Fuzzy8setInputEif>
  	fuzzy->setInput(2, LM_distance);
 80a1252:	8838      	ldrh	r0, [r7, #0]
 80a1254:	f003 ff7c 	bl	80a5150 <__aeabi_ui2f>
 80a1258:	2102      	movs	r1, #2
 80a125a:	4602      	mov	r2, r0
 80a125c:	6820      	ldr	r0, [r4, #0]
 80a125e:	f001 fe08 	bl	80a2e72 <_ZN5Fuzzy8setInputEif>
  	fuzzy->setInput(3, RM_distance);
 80a1262:	8830      	ldrh	r0, [r6, #0]
 80a1264:	f003 ff74 	bl	80a5150 <__aeabi_ui2f>
 80a1268:	2103      	movs	r1, #3
 80a126a:	4602      	mov	r2, r0
 80a126c:	6820      	ldr	r0, [r4, #0]
 80a126e:	f001 fe00 	bl	80a2e72 <_ZN5Fuzzy8setInputEif>
  	fuzzy->setInput(4, RR_distance);
 80a1272:	8828      	ldrh	r0, [r5, #0]
 80a1274:	f003 ff6c 	bl	80a5150 <__aeabi_ui2f>
 80a1278:	2104      	movs	r1, #4
 80a127a:	4602      	mov	r2, r0
 80a127c:	6820      	ldr	r0, [r4, #0]
 80a127e:	f001 fdf8 	bl	80a2e72 <_ZN5Fuzzy8setInputEif>

  	fuzzy->fuzzify();
 80a1282:	6820      	ldr	r0, [r4, #0]
 80a1284:	f001 fe09 	bl	80a2e9a <_ZN5Fuzzy7fuzzifyEv>
  	output = fuzzy->defuzzify(1);
 80a1288:	2101      	movs	r1, #1
 80a128a:	6820      	ldr	r0, [r4, #0]
 80a128c:	f001 fe2c 	bl	80a2ee8 <_ZN5Fuzzy9defuzzifyEi>
 80a1290:	4b43      	ldr	r3, [pc, #268]	; (80a13a0 <loop+0x1c4>)


  	if((output >= 0) && (output < 20)) {
 80a1292:	2100      	movs	r1, #0
  	fuzzy->setInput(2, LM_distance);
  	fuzzy->setInput(3, RM_distance);
  	fuzzy->setInput(4, RR_distance);

  	fuzzy->fuzzify();
  	output = fuzzy->defuzzify(1);
 80a1294:	6018      	str	r0, [r3, #0]
 80a1296:	4604      	mov	r4, r0


  	if((output >= 0) && (output < 20)) {
 80a1298:	f004 f964 	bl	80a5564 <__aeabi_fcmpge>
 80a129c:	b130      	cbz	r0, 80a12ac <loop+0xd0>
 80a129e:	4941      	ldr	r1, [pc, #260]	; (80a13a4 <loop+0x1c8>)
 80a12a0:	4620      	mov	r0, r4
 80a12a2:	f004 f94b 	bl	80a553c <__aeabi_fcmplt>
 80a12a6:	b108      	cbz	r0, 80a12ac <loop+0xd0>
  		// Serial.print("Full Left");
  		// Particle.publish("Full Left");
  		decision = "Full Left";
 80a12a8:	493f      	ldr	r1, [pc, #252]	; (80a13a8 <loop+0x1cc>)
 80a12aa:	e02e      	b.n	80a130a <loop+0x12e>
  	} else if((output >= 20) && (output < 40)) {
 80a12ac:	493d      	ldr	r1, [pc, #244]	; (80a13a4 <loop+0x1c8>)
 80a12ae:	4620      	mov	r0, r4
 80a12b0:	f004 f958 	bl	80a5564 <__aeabi_fcmpge>
 80a12b4:	b130      	cbz	r0, 80a12c4 <loop+0xe8>
 80a12b6:	493d      	ldr	r1, [pc, #244]	; (80a13ac <loop+0x1d0>)
 80a12b8:	4620      	mov	r0, r4
 80a12ba:	f004 f93f 	bl	80a553c <__aeabi_fcmplt>
 80a12be:	b108      	cbz	r0, 80a12c4 <loop+0xe8>
  		// Serial.print("Small Left");
  		// Particle.publish("Small Left");
  		decision = "Small Left";
 80a12c0:	493b      	ldr	r1, [pc, #236]	; (80a13b0 <loop+0x1d4>)
 80a12c2:	e022      	b.n	80a130a <loop+0x12e>
	} else if((output >= 40) && (output < 60)) {
 80a12c4:	4939      	ldr	r1, [pc, #228]	; (80a13ac <loop+0x1d0>)
 80a12c6:	4620      	mov	r0, r4
 80a12c8:	f004 f94c 	bl	80a5564 <__aeabi_fcmpge>
 80a12cc:	b130      	cbz	r0, 80a12dc <loop+0x100>
 80a12ce:	4939      	ldr	r1, [pc, #228]	; (80a13b4 <loop+0x1d8>)
 80a12d0:	4620      	mov	r0, r4
 80a12d2:	f004 f933 	bl	80a553c <__aeabi_fcmplt>
 80a12d6:	b108      	cbz	r0, 80a12dc <loop+0x100>
		// Serial.print("Center");
		// Particle.publish("Center");
		decision = "Center";
 80a12d8:	4937      	ldr	r1, [pc, #220]	; (80a13b8 <loop+0x1dc>)
 80a12da:	e016      	b.n	80a130a <loop+0x12e>
	} else if((output >= 60) && (output < 80)) {
 80a12dc:	4935      	ldr	r1, [pc, #212]	; (80a13b4 <loop+0x1d8>)
 80a12de:	4620      	mov	r0, r4
 80a12e0:	f004 f940 	bl	80a5564 <__aeabi_fcmpge>
 80a12e4:	b130      	cbz	r0, 80a12f4 <loop+0x118>
 80a12e6:	4935      	ldr	r1, [pc, #212]	; (80a13bc <loop+0x1e0>)
 80a12e8:	4620      	mov	r0, r4
 80a12ea:	f004 f927 	bl	80a553c <__aeabi_fcmplt>
 80a12ee:	b108      	cbz	r0, 80a12f4 <loop+0x118>
		// Serial.print("Small Right");
		// Particle.publish("Small Right");
		decision = "Small Right";
 80a12f0:	4933      	ldr	r1, [pc, #204]	; (80a13c0 <loop+0x1e4>)
 80a12f2:	e00a      	b.n	80a130a <loop+0x12e>
	} else if((output >= 80) && (output < 100)) {
 80a12f4:	4931      	ldr	r1, [pc, #196]	; (80a13bc <loop+0x1e0>)
 80a12f6:	4620      	mov	r0, r4
 80a12f8:	f004 f934 	bl	80a5564 <__aeabi_fcmpge>
 80a12fc:	b140      	cbz	r0, 80a1310 <loop+0x134>
 80a12fe:	4931      	ldr	r1, [pc, #196]	; (80a13c4 <loop+0x1e8>)
 80a1300:	4620      	mov	r0, r4
 80a1302:	f004 f91b 	bl	80a553c <__aeabi_fcmplt>
 80a1306:	b118      	cbz	r0, 80a1310 <loop+0x134>
		// Serial.print("Full Right");
		// Particle.publish("Full Right");
		decision = "Full Right";
 80a1308:	492f      	ldr	r1, [pc, #188]	; (80a13c8 <loop+0x1ec>)
 80a130a:	4830      	ldr	r0, [pc, #192]	; (80a13cc <loop+0x1f0>)
 80a130c:	f002 f9a9 	bl	80a3662 <_ZN6StringaSEPKc>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a1310:	f001 ff52 	bl	80a31b8 <HAL_Timer_Get_Milli_Seconds>
	}

	// For web console debugging
	// Publish every 1 second (fastest rate)
	if(millis() - currentTime > 1000) {
 80a1314:	4c2e      	ldr	r4, [pc, #184]	; (80a13d0 <loop+0x1f4>)
 80a1316:	6823      	ldr	r3, [r4, #0]
 80a1318:	1ac0      	subs	r0, r0, r3
 80a131a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80a131e:	d90a      	bls.n	80a1336 <loop+0x15a>
      return _function(funcKey, std::bind(func, instance, _1));
    }

    inline bool publish(const char *eventName, PublishFlag eventType=PUBLIC)
    {
        return publish(eventName, NULL, 60, PublishFlag::flag_t(eventType));
 80a1320:	4b2c      	ldr	r3, [pc, #176]	; (80a13d4 <loop+0x1f8>)
 80a1322:	482a      	ldr	r0, [pc, #168]	; (80a13cc <loop+0x1f0>)
 80a1324:	781b      	ldrb	r3, [r3, #0]
 80a1326:	223c      	movs	r2, #60	; 0x3c
 80a1328:	2100      	movs	r1, #0
 80a132a:	6800      	ldr	r0, [r0, #0]
 80a132c:	f002 fcf8 	bl	80a3d20 <_ZN10CloudClass7publishEPKcS1_im>
 80a1330:	f001 ff42 	bl	80a31b8 <HAL_Timer_Get_Milli_Seconds>
		Particle.publish(decision);
		currentTime = millis();
 80a1334:	6020      	str	r0, [r4, #0]
  	// FUZZY ***********************************************


  	// obligatory sampling from accelerometer
  	LIS3DHSample sample;
  	if(!accel.getSample(sample)) {
 80a1336:	4669      	mov	r1, sp
 80a1338:	4827      	ldr	r0, [pc, #156]	; (80a13d8 <loop+0x1fc>)
 80a133a:	f000 ff35 	bl	80a21a8 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
 80a133e:	b920      	cbnz	r0, 80a134a <loop+0x16e>
  		Serial.println("no sample"); // ********************************
 80a1340:	f002 fe1e 	bl	80a3f80 <_Z16_fetch_usbserialv>
 80a1344:	4925      	ldr	r1, [pc, #148]	; (80a13dc <loop+0x200>)
 80a1346:	f002 f9d6 	bl	80a36f6 <_ZN5Print7printlnEPKc>
  		// Particle.publish("no sample");
  	}

  	if(RSflag == HIGH) {
 80a134a:	4b25      	ldr	r3, [pc, #148]	; (80a13e0 <loop+0x204>)
 80a134c:	4c25      	ldr	r4, [pc, #148]	; (80a13e4 <loop+0x208>)
 80a134e:	781a      	ldrb	r2, [r3, #0]
 80a1350:	4b25      	ldr	r3, [pc, #148]	; (80a13e8 <loop+0x20c>)
 80a1352:	b11a      	cbz	r2, 80a135c <loop+0x180>
  		L_command = 1500;
 80a1354:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80a1358:	601a      	str	r2, [r3, #0]
    	R_command = 1500;
 80a135a:	6022      	str	r2, [r4, #0]
  	}

  	LESC.writeMicroseconds(L_command);
 80a135c:	8819      	ldrh	r1, [r3, #0]
 80a135e:	4823      	ldr	r0, [pc, #140]	; (80a13ec <loop+0x210>)
 80a1360:	f002 f8c3 	bl	80a34ea <_ZN5Servo17writeMicrosecondsEt>
  	RESC.writeMicroseconds(R_command);
 80a1364:	8821      	ldrh	r1, [r4, #0]
 80a1366:	4822      	ldr	r0, [pc, #136]	; (80a13f0 <loop+0x214>)
 80a1368:	f002 f8bf 	bl	80a34ea <_ZN5Servo17writeMicrosecondsEt>
 80a136c:	b002      	add	sp, #8
 80a136e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	RR_distance = sensor0.readRangeContinuousMillimeters();
	RM_distance = sensor1.readRangeContinuousMillimeters();
	LM_distance = sensor2.readRangeContinuousMillimeters();
	LL_distance = sensor3.readRangeContinuousMillimeters();

	if (sensor0.timeoutOccurred() || sensor1.timeoutOccurred() || sensor2.timeoutOccurred() || sensor3.timeoutOccurred()) { Serial.print(" SENSOR TIMEOUT"); }
 80a1372:	f002 fe05 	bl	80a3f80 <_Z16_fetch_usbserialv>
 80a1376:	491f      	ldr	r1, [pc, #124]	; (80a13f4 <loop+0x218>)
 80a1378:	f002 f9aa 	bl	80a36d0 <_ZN5Print5printEPKc>
 80a137c:	e75f      	b.n	80a123e <loop+0x62>
 80a137e:	bf00      	nop
 80a1380:	200003a8 	.word	0x200003a8
 80a1384:	2000036c 	.word	0x2000036c
 80a1388:	20000428 	.word	0x20000428
 80a138c:	200003c0 	.word	0x200003c0
 80a1390:	200003d8 	.word	0x200003d8
 80a1394:	2000041e 	.word	0x2000041e
 80a1398:	200003f0 	.word	0x200003f0
 80a139c:	200003a4 	.word	0x200003a4
 80a13a0:	20000368 	.word	0x20000368
 80a13a4:	41a00000 	.word	0x41a00000
 80a13a8:	080a5673 	.word	0x080a5673
 80a13ac:	42200000 	.word	0x42200000
 80a13b0:	080a567d 	.word	0x080a567d
 80a13b4:	42700000 	.word	0x42700000
 80a13b8:	080a5688 	.word	0x080a5688
 80a13bc:	42a00000 	.word	0x42a00000
 80a13c0:	080a568f 	.word	0x080a568f
 80a13c4:	42c80000 	.word	0x42c80000
 80a13c8:	080a569b 	.word	0x080a569b
 80a13cc:	20000394 	.word	0x20000394
 80a13d0:	20000420 	.word	0x20000420
 80a13d4:	20000408 	.word	0x20000408
 80a13d8:	20000380 	.word	0x20000380
 80a13dc:	080a56a6 	.word	0x080a56a6
 80a13e0:	2000041c 	.word	0x2000041c
 80a13e4:	20000304 	.word	0x20000304
 80a13e8:	20000340 	.word	0x20000340
 80a13ec:	20000370 	.word	0x20000370
 80a13f0:	2000040c 	.word	0x2000040c
 80a13f4:	080a56b0 	.word	0x080a56b0
 80a13f8:	2000042a 	.word	0x2000042a

080a13fc <_GLOBAL__sub_I_high1>:

class PublishFlag
{
public:
	typedef uint8_t flag_t;
	PublishFlag(flag_t flag) : flag_(flag) {}
 80a13fc:	4b1f      	ldr	r3, [pc, #124]	; (80a147c <_GLOBAL__sub_I_high1+0x80>)
    	R_command = 1500;
  	}

  	LESC.writeMicroseconds(L_command);
  	RESC.writeMicroseconds(R_command);
 80a13fe:	b510      	push	{r4, lr}
 80a1400:	2200      	movs	r2, #0
 80a1402:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a1404:	f001 fe80 	bl	80a3108 <HAL_Pin_Map>

#if !defined(PARTICLE)
#  include <Wire.h>
#endif

VL53L0X sensor0;	// RR
 80a1408:	481d      	ldr	r0, [pc, #116]	; (80a1480 <_GLOBAL__sub_I_high1+0x84>)
 80a140a:	f000 f85b 	bl	80a14c4 <_ZN7VL53L0XC1Ev>
VL53L0X sensor1;	// RM
 80a140e:	481d      	ldr	r0, [pc, #116]	; (80a1484 <_GLOBAL__sub_I_high1+0x88>)
 80a1410:	f000 f858 	bl	80a14c4 <_ZN7VL53L0XC1Ev>
VL53L0X sensor2;	// LM
 80a1414:	481c      	ldr	r0, [pc, #112]	; (80a1488 <_GLOBAL__sub_I_high1+0x8c>)
 80a1416:	f000 f855 	bl	80a14c4 <_ZN7VL53L0XC1Ev>
VL53L0X sensor3;	// LL
 80a141a:	481c      	ldr	r0, [pc, #112]	; (80a148c <_GLOBAL__sub_I_high1+0x90>)
 80a141c:	f000 f852 	bl	80a14c4 <_ZN7VL53L0XC1Ev>
int BL = D5;
int BR = D6;

int RS = D4;

Servo LESC;
 80a1420:	481b      	ldr	r0, [pc, #108]	; (80a1490 <_GLOBAL__sub_I_high1+0x94>)
 80a1422:	f002 f882 	bl	80a352a <_ZN5ServoC1Ev>
Servo RESC;
 80a1426:	481b      	ldr	r0, [pc, #108]	; (80a1494 <_GLOBAL__sub_I_high1+0x98>)
 80a1428:	f002 f87f 	bl	80a352a <_ZN5ServoC1Ev>
boolean BLflag = true;
boolean BRflag = true;

boolean RSflag = false;

Fuzzy* fuzzy = new Fuzzy();
 80a142c:	2018      	movs	r0, #24
 80a142e:	f7fe fe34 	bl	80a009a <_Znwj>
 80a1432:	4604      	mov	r4, r0
 80a1434:	b108      	cbz	r0, 80a143a <_GLOBAL__sub_I_high1+0x3e>
 80a1436:	f001 fcd6 	bl	80a2de6 <_ZN5FuzzyC1Ev>
 80a143a:	4b17      	ldr	r3, [pc, #92]	; (80a1498 <_GLOBAL__sub_I_high1+0x9c>)
float output;
String decision;
 80a143c:	4917      	ldr	r1, [pc, #92]	; (80a149c <_GLOBAL__sub_I_high1+0xa0>)
 80a143e:	4818      	ldr	r0, [pc, #96]	; (80a14a0 <_GLOBAL__sub_I_high1+0xa4>)
boolean BLflag = true;
boolean BRflag = true;

boolean RSflag = false;

Fuzzy* fuzzy = new Fuzzy();
 80a1440:	601c      	str	r4, [r3, #0]
float output;
String decision;
 80a1442:	f002 f8fb 	bl	80a363c <_ZN6StringC1EPK19__FlashStringHelper>
 80a1446:	4a17      	ldr	r2, [pc, #92]	; (80a14a4 <_GLOBAL__sub_I_high1+0xa8>)
 80a1448:	4917      	ldr	r1, [pc, #92]	; (80a14a8 <_GLOBAL__sub_I_high1+0xac>)
 80a144a:	4815      	ldr	r0, [pc, #84]	; (80a14a0 <_GLOBAL__sub_I_high1+0xa4>)
 80a144c:	f002 ffd8 	bl	80a4400 <__aeabi_atexit>
unsigned long currentTime;

SYSTEM_THREAD(ENABLED);
 80a1450:	2100      	movs	r1, #0
 80a1452:	2001      	movs	r0, #1
 80a1454:	f001 ffc2 	bl	80a33dc <system_thread_set_state>

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1458:	2001      	movs	r0, #1
 80a145a:	f001 ffaf 	bl	80a33bc <set_system_mode>
SYSTEM_MODE(AUTOMATIC);


// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
 80a145e:	f002 ffaf 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a1462:	2200      	movs	r2, #0
 80a1464:	4601      	mov	r1, r0
 80a1466:	2311      	movs	r3, #17
 80a1468:	4810      	ldr	r0, [pc, #64]	; (80a14ac <_GLOBAL__sub_I_high1+0xb0>)
 80a146a:	f000 ff31 	bl	80a22d0 <_ZN9LIS3DHI2CC1ER7TwoWirehi>
    	R_command = 1500;
  	}

  	LESC.writeMicroseconds(L_command);
  	RESC.writeMicroseconds(R_command);
 80a146e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_MODE(AUTOMATIC);


// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
 80a1472:	4a0c      	ldr	r2, [pc, #48]	; (80a14a4 <_GLOBAL__sub_I_high1+0xa8>)
 80a1474:	490e      	ldr	r1, [pc, #56]	; (80a14b0 <_GLOBAL__sub_I_high1+0xb4>)
 80a1476:	480d      	ldr	r0, [pc, #52]	; (80a14ac <_GLOBAL__sub_I_high1+0xb0>)
 80a1478:	f002 bfc2 	b.w	80a4400 <__aeabi_atexit>
 80a147c:	20000408 	.word	0x20000408
 80a1480:	200003a8 	.word	0x200003a8
 80a1484:	200003c0 	.word	0x200003c0
 80a1488:	200003d8 	.word	0x200003d8
 80a148c:	200003f0 	.word	0x200003f0
 80a1490:	20000370 	.word	0x20000370
 80a1494:	2000040c 	.word	0x2000040c
 80a1498:	200003a4 	.word	0x200003a4
 80a149c:	080a5742 	.word	0x080a5742
 80a14a0:	20000394 	.word	0x20000394
 80a14a4:	20000364 	.word	0x20000364
 80a14a8:	080a35af 	.word	0x080a35af
 80a14ac:	20000380 	.word	0x20000380
 80a14b0:	080a2095 	.word	0x080a2095

080a14b4 <_ZN7TwoWire5writeEm>:
  virtual int peek(void);
  virtual void flush(void);
  void onReceive(void (*)(int));
  void onRequest(void (*)(void));

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
 80a14b4:	6803      	ldr	r3, [r0, #0]
 80a14b6:	b2c9      	uxtb	r1, r1
 80a14b8:	689b      	ldr	r3, [r3, #8]
 80a14ba:	4718      	bx	r3

080a14bc <_ZN7TwoWire5writeEi>:
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a14bc:	6803      	ldr	r3, [r0, #0]
 80a14be:	b2c9      	uxtb	r1, r1
 80a14c0:	689b      	ldr	r3, [r3, #8]
 80a14c2:	4718      	bx	r3

080a14c4 <_ZN7VL53L0XC1Ev>:
// Constructors ////////////////////////////////////////////////////////////////

VL53L0X::VL53L0X(void)
  : address(ADDRESS_DEFAULT)
  , io_timeout(0) // no timeout
  , did_timeout(false)
 80a14c4:	2229      	movs	r2, #41	; 0x29
 80a14c6:	7042      	strb	r2, [r0, #1]
 80a14c8:	2200      	movs	r2, #0
 80a14ca:	6042      	str	r2, [r0, #4]
 80a14cc:	7202      	strb	r2, [r0, #8]
{
}
 80a14ce:	4770      	bx	lr

080a14d0 <_ZN7VL53L0X8writeRegEhh>:
  return true;
}

// Write an 8-bit register
void VL53L0X::writeReg(uint8_t reg, uint8_t value)
{
 80a14d0:	b570      	push	{r4, r5, r6, lr}
 80a14d2:	4604      	mov	r4, r0
 80a14d4:	4615      	mov	r5, r2
 80a14d6:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a14d8:	f002 ff72 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a14dc:	7861      	ldrb	r1, [r4, #1]
 80a14de:	f002 feae 	bl	80a423e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a14e2:	f002 ff6d 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a14e6:	6803      	ldr	r3, [r0, #0]
 80a14e8:	4631      	mov	r1, r6
 80a14ea:	689b      	ldr	r3, [r3, #8]
 80a14ec:	4798      	blx	r3
  Wire.write(value);
 80a14ee:	f002 ff67 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a14f2:	6803      	ldr	r3, [r0, #0]
 80a14f4:	4629      	mov	r1, r5
 80a14f6:	689b      	ldr	r3, [r3, #8]
 80a14f8:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a14fa:	f002 ff61 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a14fe:	f002 fea6 	bl	80a424e <_ZN7TwoWire15endTransmissionEv>
 80a1502:	7020      	strb	r0, [r4, #0]
 80a1504:	bd70      	pop	{r4, r5, r6, pc}

080a1506 <_ZN7VL53L0X10setAddressEh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void VL53L0X::setAddress(uint8_t new_addr)
{
 80a1506:	b538      	push	{r3, r4, r5, lr}
 80a1508:	4605      	mov	r5, r0
 80a150a:	460c      	mov	r4, r1
  writeReg(I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 80a150c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80a1510:	218a      	movs	r1, #138	; 0x8a
 80a1512:	f7ff ffdd 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  address = new_addr;
 80a1516:	706c      	strb	r4, [r5, #1]
 80a1518:	bd38      	pop	{r3, r4, r5, pc}

080a151a <_ZN7VL53L0X13writeReg16BitEht>:
  last_status = Wire.endTransmission();
}

// Write a 16-bit register
void VL53L0X::writeReg16Bit(uint8_t reg, uint16_t value)
{
 80a151a:	b570      	push	{r4, r5, r6, lr}
 80a151c:	4604      	mov	r4, r0
 80a151e:	4615      	mov	r5, r2
 80a1520:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a1522:	f002 ff4d 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a1526:	7861      	ldrb	r1, [r4, #1]
 80a1528:	f002 fe89 	bl	80a423e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a152c:	f002 ff48 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a1530:	6803      	ldr	r3, [r0, #0]
 80a1532:	4631      	mov	r1, r6
 80a1534:	689b      	ldr	r3, [r3, #8]
 80a1536:	4798      	blx	r3
  Wire.write((value >> 8) & 0xFF); // value high byte
 80a1538:	f002 ff42 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a153c:	0a29      	lsrs	r1, r5, #8
 80a153e:	f7ff ffbd 	bl	80a14bc <_ZN7TwoWire5writeEi>
  Wire.write( value       & 0xFF); // value low byte
 80a1542:	f002 ff3d 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a1546:	b2e9      	uxtb	r1, r5
 80a1548:	f7ff ffb8 	bl	80a14bc <_ZN7TwoWire5writeEi>
  last_status = Wire.endTransmission();
 80a154c:	f002 ff38 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a1550:	f002 fe7d 	bl	80a424e <_ZN7TwoWire15endTransmissionEv>
 80a1554:	7020      	strb	r0, [r4, #0]
 80a1556:	bd70      	pop	{r4, r5, r6, pc}

080a1558 <_ZN7VL53L0X13writeReg32BitEhm>:
}

// Write a 32-bit register
void VL53L0X::writeReg32Bit(uint8_t reg, uint32_t value)
{
 80a1558:	b570      	push	{r4, r5, r6, lr}
 80a155a:	4605      	mov	r5, r0
 80a155c:	4614      	mov	r4, r2
 80a155e:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a1560:	f002 ff2e 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a1564:	7869      	ldrb	r1, [r5, #1]
 80a1566:	f002 fe6a 	bl	80a423e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a156a:	f002 ff29 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a156e:	6803      	ldr	r3, [r0, #0]
 80a1570:	4631      	mov	r1, r6
 80a1572:	689b      	ldr	r3, [r3, #8]
 80a1574:	4798      	blx	r3
  Wire.write((value >> 24) & 0xFF); // value highest byte
 80a1576:	f002 ff23 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a157a:	0e21      	lsrs	r1, r4, #24
 80a157c:	f7ff ff9a 	bl	80a14b4 <_ZN7TwoWire5writeEm>
  Wire.write((value >> 16) & 0xFF);
 80a1580:	f002 ff1e 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a1584:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80a1588:	f7ff ff94 	bl	80a14b4 <_ZN7TwoWire5writeEm>
  Wire.write((value >>  8) & 0xFF);
 80a158c:	f002 ff18 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a1590:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80a1594:	f7ff ff8e 	bl	80a14b4 <_ZN7TwoWire5writeEm>
  Wire.write( value        & 0xFF); // value lowest byte
 80a1598:	f002 ff12 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a159c:	b2e1      	uxtb	r1, r4
 80a159e:	f7ff ff89 	bl	80a14b4 <_ZN7TwoWire5writeEm>
  last_status = Wire.endTransmission();
 80a15a2:	f002 ff0d 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a15a6:	f002 fe52 	bl	80a424e <_ZN7TwoWire15endTransmissionEv>
 80a15aa:	7028      	strb	r0, [r5, #0]
 80a15ac:	bd70      	pop	{r4, r5, r6, pc}

080a15ae <_ZN7VL53L0X7readRegEh>:
}

// Read an 8-bit register
uint8_t VL53L0X::readReg(uint8_t reg)
{
 80a15ae:	b538      	push	{r3, r4, r5, lr}
 80a15b0:	4604      	mov	r4, r0
 80a15b2:	460d      	mov	r5, r1
  uint8_t value;

  Wire.beginTransmission(address);
 80a15b4:	f002 ff04 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a15b8:	7861      	ldrb	r1, [r4, #1]
 80a15ba:	f002 fe40 	bl	80a423e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a15be:	f002 feff 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a15c2:	6803      	ldr	r3, [r0, #0]
 80a15c4:	4629      	mov	r1, r5
 80a15c6:	689b      	ldr	r3, [r3, #8]
 80a15c8:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a15ca:	f002 fef9 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a15ce:	f002 fe3e 	bl	80a424e <_ZN7TwoWire15endTransmissionEv>
 80a15d2:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)1);
 80a15d4:	f002 fef4 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a15d8:	2201      	movs	r2, #1
 80a15da:	7861      	ldrb	r1, [r4, #1]
 80a15dc:	f002 fe27 	bl	80a422e <_ZN7TwoWire11requestFromEhh>
  value = Wire.read();
 80a15e0:	f002 feee 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a15e4:	6803      	ldr	r3, [r0, #0]
 80a15e6:	695b      	ldr	r3, [r3, #20]
 80a15e8:	4798      	blx	r3

  return value;
}
 80a15ea:	b2c0      	uxtb	r0, r0
 80a15ec:	bd38      	pop	{r3, r4, r5, pc}

080a15ee <_ZN7VL53L0X12readReg16BitEh>:

// Read a 16-bit register
uint16_t VL53L0X::readReg16Bit(uint8_t reg)
{
 80a15ee:	b538      	push	{r3, r4, r5, lr}
 80a15f0:	4604      	mov	r4, r0
 80a15f2:	460d      	mov	r5, r1
  uint16_t value;

  Wire.beginTransmission(address);
 80a15f4:	f002 fee4 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a15f8:	7861      	ldrb	r1, [r4, #1]
 80a15fa:	f002 fe20 	bl	80a423e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a15fe:	f002 fedf 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a1602:	6803      	ldr	r3, [r0, #0]
 80a1604:	4629      	mov	r1, r5
 80a1606:	689b      	ldr	r3, [r3, #8]
 80a1608:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a160a:	f002 fed9 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a160e:	f002 fe1e 	bl	80a424e <_ZN7TwoWire15endTransmissionEv>
 80a1612:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)2);
 80a1614:	f002 fed4 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a1618:	7861      	ldrb	r1, [r4, #1]
 80a161a:	2202      	movs	r2, #2
 80a161c:	f002 fe07 	bl	80a422e <_ZN7TwoWire11requestFromEhh>
  value  = (uint16_t)Wire.read() << 8; // value high byte
 80a1620:	f002 fece 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a1624:	6803      	ldr	r3, [r0, #0]
 80a1626:	695b      	ldr	r3, [r3, #20]
 80a1628:	4798      	blx	r3
 80a162a:	4604      	mov	r4, r0
  value |=           Wire.read();      // value low byte
 80a162c:	f002 fec8 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a1630:	6803      	ldr	r3, [r0, #0]
 80a1632:	695b      	ldr	r3, [r3, #20]
 80a1634:	4798      	blx	r3
 80a1636:	ea40 2004 	orr.w	r0, r0, r4, lsl #8

  return value;
}
 80a163a:	b280      	uxth	r0, r0
 80a163c:	bd38      	pop	{r3, r4, r5, pc}

080a163e <_ZN7VL53L0X10writeMultiEhPKhh>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
 80a163e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1640:	4606      	mov	r6, r0
 80a1642:	4614      	mov	r4, r2
 80a1644:	461d      	mov	r5, r3
 80a1646:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a1648:	f002 feba 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a164c:	7871      	ldrb	r1, [r6, #1]
 80a164e:	f002 fdf6 	bl	80a423e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a1652:	f002 feb5 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a1656:	6803      	ldr	r3, [r0, #0]
 80a1658:	4639      	mov	r1, r7
 80a165a:	689b      	ldr	r3, [r3, #8]
 80a165c:	4798      	blx	r3
 80a165e:	4425      	add	r5, r4

  while (count-- > 0)
 80a1660:	42ac      	cmp	r4, r5
 80a1662:	d007      	beq.n	80a1674 <_ZN7VL53L0X10writeMultiEhPKhh+0x36>
  {
    Wire.write(*(src++));
 80a1664:	f002 feac 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a1668:	6803      	ldr	r3, [r0, #0]
 80a166a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a166e:	689b      	ldr	r3, [r3, #8]
 80a1670:	4798      	blx	r3
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
  Wire.beginTransmission(address);
  Wire.write(reg);

  while (count-- > 0)
 80a1672:	e7f5      	b.n	80a1660 <_ZN7VL53L0X10writeMultiEhPKhh+0x22>
  {
    Wire.write(*(src++));
  }

  last_status = Wire.endTransmission();
 80a1674:	f002 fea4 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a1678:	f002 fde9 	bl	80a424e <_ZN7TwoWire15endTransmissionEv>
 80a167c:	7030      	strb	r0, [r6, #0]
 80a167e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1680 <_ZN7VL53L0X9readMultiEhPhh>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void VL53L0X::readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 80a1680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1682:	4606      	mov	r6, r0
 80a1684:	4614      	mov	r4, r2
 80a1686:	461d      	mov	r5, r3
 80a1688:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a168a:	f002 fe99 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a168e:	7871      	ldrb	r1, [r6, #1]
 80a1690:	f002 fdd5 	bl	80a423e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a1694:	f002 fe94 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a1698:	6803      	ldr	r3, [r0, #0]
 80a169a:	4639      	mov	r1, r7
 80a169c:	689b      	ldr	r3, [r3, #8]
 80a169e:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a16a0:	f002 fe8e 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a16a4:	f002 fdd3 	bl	80a424e <_ZN7TwoWire15endTransmissionEv>
 80a16a8:	7030      	strb	r0, [r6, #0]

  Wire.requestFrom(address, count);
 80a16aa:	f002 fe89 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a16ae:	462a      	mov	r2, r5
 80a16b0:	7871      	ldrb	r1, [r6, #1]
 80a16b2:	f002 fdbc 	bl	80a422e <_ZN7TwoWire11requestFromEhh>
 80a16b6:	4425      	add	r5, r4

  while (count-- > 0)
 80a16b8:	42ac      	cmp	r4, r5
 80a16ba:	d007      	beq.n	80a16cc <_ZN7VL53L0X9readMultiEhPhh+0x4c>
  {
    *(dst++) = Wire.read();
 80a16bc:	f002 fe80 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a16c0:	6803      	ldr	r3, [r0, #0]
 80a16c2:	695b      	ldr	r3, [r3, #20]
 80a16c4:	4798      	blx	r3
 80a16c6:	f804 0b01 	strb.w	r0, [r4], #1
  Wire.write(reg);
  last_status = Wire.endTransmission();

  Wire.requestFrom(address, count);

  while (count-- > 0)
 80a16ca:	e7f5      	b.n	80a16b8 <_ZN7VL53L0X9readMultiEhPhh+0x38>
 80a16cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a16d0 <_ZN7VL53L0X18setSignalRateLimitEf>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
 80a16d0:	b570      	push	{r4, r5, r6, lr}
 80a16d2:	460d      	mov	r5, r1
 80a16d4:	4606      	mov	r6, r0
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a16d6:	2100      	movs	r1, #0
 80a16d8:	4628      	mov	r0, r5
 80a16da:	f003 ff2f 	bl	80a553c <__aeabi_fcmplt>
 80a16de:	b9b0      	cbnz	r0, 80a170e <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>
 80a16e0:	4628      	mov	r0, r5
 80a16e2:	f003 f941 	bl	80a4968 <__aeabi_f2d>
 80a16e6:	a30c      	add	r3, pc, #48	; (adr r3, 80a1718 <_ZN7VL53L0X18setSignalRateLimitEf+0x48>)
 80a16e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a16ec:	f003 fc20 	bl	80a4f30 <__aeabi_dcmpgt>
 80a16f0:	b968      	cbnz	r0, 80a170e <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80a16f2:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80a16f6:	4628      	mov	r0, r5
 80a16f8:	f003 fd82 	bl	80a5200 <__aeabi_fmul>
 80a16fc:	f003 ff46 	bl	80a558c <__aeabi_f2uiz>
 80a1700:	2144      	movs	r1, #68	; 0x44
 80a1702:	b282      	uxth	r2, r0
 80a1704:	4630      	mov	r0, r6
 80a1706:	f7ff ff08 	bl	80a151a <_ZN7VL53L0X13writeReg16BitEht>
 80a170a:	2001      	movs	r0, #1
 80a170c:	bd70      	pop	{r4, r5, r6, pc}
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a170e:	2000      	movs	r0, #0
 80a1710:	bd70      	pop	{r4, r5, r6, pc}
 80a1712:	bf00      	nop
 80a1714:	f3af 8000 	nop.w
 80a1718:	0a3d70a4 	.word	0x0a3d70a4
 80a171c:	407fffd7 	.word	0x407fffd7

080a1720 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>:
}

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t VL53L0X::getVcselPulsePeriod(vcselPeriodType type)
{
 80a1720:	b508      	push	{r3, lr}
  if (type == VcselPeriodPreRange)
 80a1722:	b909      	cbnz	r1, 80a1728 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x8>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80a1724:	2150      	movs	r1, #80	; 0x50
 80a1726:	e002      	b.n	80a172e <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0xe>
  }
  else if (type == VcselPeriodFinalRange)
 80a1728:	2901      	cmp	r1, #1
 80a172a:	d106      	bne.n	80a173a <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x1a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a172c:	2170      	movs	r1, #112	; 0x70
 80a172e:	f7ff ff3e 	bl	80a15ae <_ZN7VL53L0X7readRegEh>
 80a1732:	3001      	adds	r0, #1
 80a1734:	0040      	lsls	r0, r0, #1
 80a1736:	b2c0      	uxtb	r0, r0
 80a1738:	bd08      	pop	{r3, pc}
  }
  else { return 255; }
 80a173a:	20ff      	movs	r0, #255	; 0xff
}
 80a173c:	bd08      	pop	{r3, pc}

080a173e <_ZN7VL53L0X15startContinuousEm>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X::startContinuous(uint32_t period_ms)
{
 80a173e:	b538      	push	{r3, r4, r5, lr}
 80a1740:	4604      	mov	r4, r0
 80a1742:	460d      	mov	r5, r1
  writeReg(0x80, 0x01);
 80a1744:	2201      	movs	r2, #1
 80a1746:	2180      	movs	r1, #128	; 0x80
 80a1748:	f7ff fec2 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a174c:	2201      	movs	r2, #1
 80a174e:	21ff      	movs	r1, #255	; 0xff
 80a1750:	4620      	mov	r0, r4
 80a1752:	f7ff febd 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a1756:	2200      	movs	r2, #0
 80a1758:	4611      	mov	r1, r2
 80a175a:	4620      	mov	r0, r4
 80a175c:	f7ff feb8 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x91, stop_variable);
 80a1760:	7c22      	ldrb	r2, [r4, #16]
 80a1762:	2191      	movs	r1, #145	; 0x91
 80a1764:	4620      	mov	r0, r4
 80a1766:	f7ff feb3 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a176a:	2201      	movs	r2, #1
 80a176c:	2100      	movs	r1, #0
 80a176e:	4620      	mov	r0, r4
 80a1770:	f7ff feae 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1774:	2200      	movs	r2, #0
 80a1776:	21ff      	movs	r1, #255	; 0xff
 80a1778:	4620      	mov	r0, r4
 80a177a:	f7ff fea9 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a177e:	2200      	movs	r2, #0
 80a1780:	2180      	movs	r1, #128	; 0x80
 80a1782:	4620      	mov	r0, r4
 80a1784:	f7ff fea4 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  if (period_ms != 0)
 80a1788:	b16d      	cbz	r5, 80a17a6 <_ZN7VL53L0X15startContinuousEm+0x68>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 80a178a:	21f8      	movs	r1, #248	; 0xf8
 80a178c:	4620      	mov	r0, r4
 80a178e:	f7ff ff2e 	bl	80a15ee <_ZN7VL53L0X12readReg16BitEh>

    if (osc_calibrate_val != 0)
 80a1792:	b100      	cbz	r0, 80a1796 <_ZN7VL53L0X15startContinuousEm+0x58>
    {
      period_ms *= osc_calibrate_val;
 80a1794:	4345      	muls	r5, r0
    }

    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 80a1796:	462a      	mov	r2, r5
 80a1798:	2104      	movs	r1, #4
 80a179a:	4620      	mov	r0, r4
 80a179c:	f7ff fedc 	bl	80a1558 <_ZN7VL53L0X13writeReg32BitEhm>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 80a17a0:	2204      	movs	r2, #4
 80a17a2:	2100      	movs	r1, #0
 80a17a4:	e001      	b.n	80a17aa <_ZN7VL53L0X15startContinuousEm+0x6c>
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a17a6:	4629      	mov	r1, r5
 80a17a8:	2202      	movs	r2, #2
 80a17aa:	4620      	mov	r0, r4
  }
}
 80a17ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a17b0:	f7ff be8e 	b.w	80a14d0 <_ZN7VL53L0X8writeRegEhh>

080a17b4 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t VL53L0X::readRangeContinuousMillimeters(void)
{
 80a17b4:	b538      	push	{r3, r4, r5, lr}
 80a17b6:	4604      	mov	r4, r0
 80a17b8:	f001 fcfe 	bl	80a31b8 <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a17bc:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a17be:	2113      	movs	r1, #19
 80a17c0:	4620      	mov	r0, r4
 80a17c2:	f7ff fef4 	bl	80a15ae <_ZN7VL53L0X7readRegEh>
 80a17c6:	0743      	lsls	r3, r0, #29
 80a17c8:	d10e      	bne.n	80a17e8 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0x34>
  {
    if (checkTimeoutExpired())
 80a17ca:	6863      	ldr	r3, [r4, #4]
 80a17cc:	2b00      	cmp	r3, #0
 80a17ce:	d0f6      	beq.n	80a17be <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
 80a17d0:	f001 fcf2 	bl	80a31b8 <HAL_Timer_Get_Milli_Seconds>
 80a17d4:	68e3      	ldr	r3, [r4, #12]
 80a17d6:	1ac0      	subs	r0, r0, r3
 80a17d8:	6863      	ldr	r3, [r4, #4]
 80a17da:	4298      	cmp	r0, r3
 80a17dc:	d9ef      	bls.n	80a17be <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
    {
      did_timeout = true;
 80a17de:	2301      	movs	r3, #1
 80a17e0:	7223      	strb	r3, [r4, #8]
      return 65535;
 80a17e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  return range;
}
 80a17e6:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);
 80a17e8:	211e      	movs	r1, #30
 80a17ea:	4620      	mov	r0, r4
 80a17ec:	f7ff feff 	bl	80a15ee <_ZN7VL53L0X12readReg16BitEh>
 80a17f0:	4605      	mov	r5, r0

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a17f2:	2201      	movs	r2, #1
 80a17f4:	4620      	mov	r0, r4
 80a17f6:	210b      	movs	r1, #11
 80a17f8:	f7ff fe6a 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
 80a17fc:	4628      	mov	r0, r5
 80a17fe:	bd38      	pop	{r3, r4, r5, pc}

080a1800 <_ZN7VL53L0X15timeoutOccurredEv>:
}

// Did a timeout occur in one of the read functions since the last call to
// timeoutOccurred()?
bool VL53L0X::timeoutOccurred()
{
 80a1800:	4603      	mov	r3, r0
  bool tmp = did_timeout;
  did_timeout = false;
 80a1802:	2200      	movs	r2, #0

// Did a timeout occur in one of the read functions since the last call to
// timeoutOccurred()?
bool VL53L0X::timeoutOccurred()
{
  bool tmp = did_timeout;
 80a1804:	7a00      	ldrb	r0, [r0, #8]
  did_timeout = false;
 80a1806:	721a      	strb	r2, [r3, #8]
  return tmp;
}
 80a1808:	4770      	bx	lr

080a180a <_ZN7VL53L0X11getSpadInfoEPhPb>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X::getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80a180a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a180c:	4604      	mov	r4, r0
 80a180e:	460f      	mov	r7, r1
 80a1810:	4616      	mov	r6, r2
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80a1812:	2180      	movs	r1, #128	; 0x80
 80a1814:	2201      	movs	r2, #1
 80a1816:	f7ff fe5b 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a181a:	2201      	movs	r2, #1
 80a181c:	21ff      	movs	r1, #255	; 0xff
 80a181e:	4620      	mov	r0, r4
 80a1820:	f7ff fe56 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a1824:	2200      	movs	r2, #0
 80a1826:	4611      	mov	r1, r2
 80a1828:	4620      	mov	r0, r4
 80a182a:	f7ff fe51 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x06);
 80a182e:	2206      	movs	r2, #6
 80a1830:	21ff      	movs	r1, #255	; 0xff
 80a1832:	4620      	mov	r0, r4
 80a1834:	f7ff fe4c 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg(0x83) | 0x04);
 80a1838:	2183      	movs	r1, #131	; 0x83
 80a183a:	4620      	mov	r0, r4
 80a183c:	f7ff feb7 	bl	80a15ae <_ZN7VL53L0X7readRegEh>
 80a1840:	f040 0204 	orr.w	r2, r0, #4
 80a1844:	b2d2      	uxtb	r2, r2
 80a1846:	2183      	movs	r1, #131	; 0x83
 80a1848:	4620      	mov	r0, r4
 80a184a:	f7ff fe41 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x07);
 80a184e:	2207      	movs	r2, #7
 80a1850:	21ff      	movs	r1, #255	; 0xff
 80a1852:	4620      	mov	r0, r4
 80a1854:	f7ff fe3c 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x81, 0x01);
 80a1858:	2201      	movs	r2, #1
 80a185a:	2181      	movs	r1, #129	; 0x81
 80a185c:	4620      	mov	r0, r4
 80a185e:	f7ff fe37 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a1862:	2201      	movs	r2, #1
 80a1864:	2180      	movs	r1, #128	; 0x80
 80a1866:	4620      	mov	r0, r4
 80a1868:	f7ff fe32 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x94, 0x6b);
 80a186c:	226b      	movs	r2, #107	; 0x6b
 80a186e:	2194      	movs	r1, #148	; 0x94
 80a1870:	4620      	mov	r0, r4
 80a1872:	f7ff fe2d 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, 0x00);
 80a1876:	2200      	movs	r2, #0
 80a1878:	2183      	movs	r1, #131	; 0x83
 80a187a:	4620      	mov	r0, r4
 80a187c:	f7ff fe28 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
 80a1880:	f001 fc9a 	bl	80a31b8 <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a1884:	60e0      	str	r0, [r4, #12]
  while (readReg(0x83) == 0x00)
 80a1886:	2183      	movs	r1, #131	; 0x83
 80a1888:	4620      	mov	r0, r4
 80a188a:	f7ff fe90 	bl	80a15ae <_ZN7VL53L0X7readRegEh>
 80a188e:	4605      	mov	r5, r0
 80a1890:	b958      	cbnz	r0, 80a18aa <_ZN7VL53L0X11getSpadInfoEPhPb+0xa0>
  {
    if (checkTimeoutExpired()) { return false; }
 80a1892:	6863      	ldr	r3, [r4, #4]
 80a1894:	2b00      	cmp	r3, #0
 80a1896:	d0f6      	beq.n	80a1886 <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a1898:	f001 fc8e 	bl	80a31b8 <HAL_Timer_Get_Milli_Seconds>
 80a189c:	68e3      	ldr	r3, [r4, #12]
 80a189e:	1ac0      	subs	r0, r0, r3
 80a18a0:	6863      	ldr	r3, [r4, #4]
 80a18a2:	4298      	cmp	r0, r3
 80a18a4:	d9ef      	bls.n	80a1886 <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a18a6:	4628      	mov	r0, r5

  writeReg(0xFF, 0x00);
  writeReg(0x80, 0x00);

  return true;
}
 80a18a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  startTimeout();
  while (readReg(0x83) == 0x00)
  {
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
 80a18aa:	2201      	movs	r2, #1
 80a18ac:	4620      	mov	r0, r4
 80a18ae:	2183      	movs	r1, #131	; 0x83
 80a18b0:	f7ff fe0e 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  tmp = readReg(0x92);
 80a18b4:	2192      	movs	r1, #146	; 0x92
 80a18b6:	4620      	mov	r0, r4
 80a18b8:	f7ff fe79 	bl	80a15ae <_ZN7VL53L0X7readRegEh>

  *count = tmp & 0x7f;
 80a18bc:	f000 037f 	and.w	r3, r0, #127	; 0x7f
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a18c0:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
 80a18c4:	703b      	strb	r3, [r7, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;

  writeReg(0x81, 0x00);
 80a18c6:	2200      	movs	r2, #0
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a18c8:	7030      	strb	r0, [r6, #0]

  writeReg(0x81, 0x00);
 80a18ca:	2181      	movs	r1, #129	; 0x81
 80a18cc:	4620      	mov	r0, r4
 80a18ce:	f7ff fdff 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x06);
 80a18d2:	2206      	movs	r2, #6
 80a18d4:	4620      	mov	r0, r4
 80a18d6:	21ff      	movs	r1, #255	; 0xff
 80a18d8:	f7ff fdfa 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg( 0x83  & ~0x04));
 80a18dc:	2183      	movs	r1, #131	; 0x83
 80a18de:	4620      	mov	r0, r4
 80a18e0:	f7ff fe65 	bl	80a15ae <_ZN7VL53L0X7readRegEh>
 80a18e4:	2183      	movs	r1, #131	; 0x83
 80a18e6:	4602      	mov	r2, r0
 80a18e8:	4620      	mov	r0, r4
 80a18ea:	f7ff fdf1 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a18ee:	4620      	mov	r0, r4
 80a18f0:	2201      	movs	r2, #1
 80a18f2:	21ff      	movs	r1, #255	; 0xff
 80a18f4:	f7ff fdec 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a18f8:	4620      	mov	r0, r4
 80a18fa:	2201      	movs	r2, #1
 80a18fc:	2100      	movs	r1, #0
 80a18fe:	f7ff fde7 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1902:	4620      	mov	r0, r4
 80a1904:	2200      	movs	r2, #0
 80a1906:	21ff      	movs	r1, #255	; 0xff
 80a1908:	f7ff fde2 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a190c:	4620      	mov	r0, r4
 80a190e:	2200      	movs	r2, #0
 80a1910:	2180      	movs	r1, #128	; 0x80
 80a1912:	f7ff fddd 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  return true;
 80a1916:	2001      	movs	r0, #1
 80a1918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a191a <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>:
}

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X::getSequenceStepEnables(SequenceStepEnables * enables)
{
 80a191a:	b510      	push	{r4, lr}
 80a191c:	460c      	mov	r4, r1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 80a191e:	2101      	movs	r1, #1
 80a1920:	f7ff fe45 	bl	80a15ae <_ZN7VL53L0X7readRegEh>

  enables->tcc          = (sequence_config >> 4) & 0x1;
 80a1924:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80a1928:	7023      	strb	r3, [r4, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 80a192a:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80a192e:	70a3      	strb	r3, [r4, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 80a1930:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80a1934:	7063      	strb	r3, [r4, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a1936:	f3c0 1380 	ubfx	r3, r0, #6, #1
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a193a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);

  enables->tcc          = (sequence_config >> 4) & 0x1;
  enables->dss          = (sequence_config >> 3) & 0x1;
  enables->msrc         = (sequence_config >> 2) & 0x1;
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a193e:	70e3      	strb	r3, [r4, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a1940:	7120      	strb	r0, [r4, #4]
 80a1942:	bd10      	pop	{r4, pc}

080a1944 <_ZN7VL53L0X13decodeTimeoutEm>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X::decodeTimeout(uint32_t reg_val)
{
 80a1944:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a1948:	4298      	cmp	r0, r3
 80a194a:	bf28      	it	cs
 80a194c:	4618      	movcs	r0, r3
  if (reg_val > 0xFFFF) reg_val = 0xFFFF;
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80a194e:	b2c3      	uxtb	r3, r0
 80a1950:	0a00      	lsrs	r0, r0, #8
 80a1952:	fa03 f000 	lsl.w	r0, r3, r0
 80a1956:	3001      	adds	r0, #1
}
 80a1958:	b280      	uxth	r0, r0
 80a195a:	4770      	bx	lr

080a195c <_ZN7VL53L0X13encodeTimeoutEm>:
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a195c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80a1960:	d201      	bcs.n	80a1966 <_ZN7VL53L0X13encodeTimeoutEm+0xa>

  // format: "(LSByte * 2^MSByte) + 1"
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
 80a1962:	b178      	cbz	r0, 80a1984 <_ZN7VL53L0X13encodeTimeoutEm+0x28>
 80a1964:	e001      	b.n	80a196a <_ZN7VL53L0X13encodeTimeoutEm+0xe>
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a1966:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;
 80a196a:	3801      	subs	r0, #1
 80a196c:	2300      	movs	r3, #0

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a196e:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 80a1972:	b29a      	uxth	r2, r3
 80a1974:	f103 0301 	add.w	r3, r3, #1
 80a1978:	d001      	beq.n	80a197e <_ZN7VL53L0X13encodeTimeoutEm+0x22>
    {
      ls_byte >>= 1;
 80a197a:	0840      	lsrs	r0, r0, #1

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a197c:	e7f7      	b.n	80a196e <_ZN7VL53L0X13encodeTimeoutEm+0x12>
    {
      ls_byte >>= 1;
      ms_byte++;
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 80a197e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80a1982:	b280      	uxth	r0, r0
  }
  else { return 0; }
}
 80a1984:	4770      	bx	lr
	...

080a1988 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1988:	4b08      	ldr	r3, [pc, #32]	; (80a19ac <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh+0x24>)

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a198a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a198e:	4359      	muls	r1, r3
}

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80a1990:	b510      	push	{r4, lr}
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1992:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a1996:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 80a199a:	fbb1 f3f2 	udiv	r3, r1, r2
 80a199e:	fbb1 f1f4 	udiv	r1, r1, r4
 80a19a2:	fb00 1003 	mla	r0, r0, r3, r1
}
 80a19a6:	fbb0 f0f2 	udiv	r0, r0, r2
 80a19aa:	bd10      	pop	{r4, pc}
 80a19ac:	003a2f00 	.word	0x003a2f00

080a19b0 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a19b0:	b570      	push	{r4, r5, r6, lr}
 80a19b2:	460e      	mov	r6, r1
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a19b4:	2100      	movs	r1, #0
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a19b6:	4614      	mov	r4, r2
 80a19b8:	4605      	mov	r5, r0
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a19ba:	f7ff feb1 	bl	80a1720 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a19be:	2146      	movs	r1, #70	; 0x46
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a19c0:	8020      	strh	r0, [r4, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a19c2:	4628      	mov	r0, r5
 80a19c4:	f7ff fdf3 	bl	80a15ae <_ZN7VL53L0X7readRegEh>
 80a19c8:	3001      	adds	r0, #1
 80a19ca:	b280      	uxth	r0, r0
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a19cc:	7821      	ldrb	r1, [r4, #0]
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a19ce:	80a0      	strh	r0, [r4, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a19d0:	f7ff ffda 	bl	80a1988 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a19d4:	2151      	movs	r1, #81	; 0x51
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a19d6:	60e0      	str	r0, [r4, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a19d8:	4628      	mov	r0, r5
 80a19da:	f7ff fe08 	bl	80a15ee <_ZN7VL53L0X12readReg16BitEh>
 80a19de:	f7ff ffb1 	bl	80a1944 <_ZN7VL53L0X13decodeTimeoutEm>
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a19e2:	7821      	ldrb	r1, [r4, #0]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a19e4:	80e0      	strh	r0, [r4, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a19e6:	f7ff ffcf 	bl	80a1988 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a19ea:	2170      	movs	r1, #112	; 0x70

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a19ec:	6120      	str	r0, [r4, #16]
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a19ee:	4628      	mov	r0, r5
 80a19f0:	f7ff fddd 	bl	80a15ae <_ZN7VL53L0X7readRegEh>
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 80a19f4:	3001      	adds	r0, #1
 80a19f6:	0040      	lsls	r0, r0, #1
 80a19f8:	b2c0      	uxtb	r0, r0
 80a19fa:	8060      	strh	r0, [r4, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a19fc:	2171      	movs	r1, #113	; 0x71
 80a19fe:	4628      	mov	r0, r5
 80a1a00:	f7ff fdf5 	bl	80a15ee <_ZN7VL53L0X12readReg16BitEh>
 80a1a04:	f7ff ff9e 	bl	80a1944 <_ZN7VL53L0X13decodeTimeoutEm>
 80a1a08:	8120      	strh	r0, [r4, #8]

  if (enables->pre_range)
 80a1a0a:	78f3      	ldrb	r3, [r6, #3]
 80a1a0c:	b113      	cbz	r3, 80a1a14 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE+0x64>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 80a1a0e:	88e3      	ldrh	r3, [r4, #6]
 80a1a10:	1ac0      	subs	r0, r0, r3
 80a1a12:	8120      	strh	r0, [r4, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 80a1a14:	78a1      	ldrb	r1, [r4, #2]
 80a1a16:	8920      	ldrh	r0, [r4, #8]
 80a1a18:	f7ff ffb6 	bl	80a1988 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->final_range_vcsel_period_pclks);
 80a1a1c:	6160      	str	r0, [r4, #20]
 80a1a1e:	bd70      	pop	{r4, r5, r6, pc}

080a1a20 <_ZN7VL53L0X26getMeasurementTimingBudgetEv>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t VL53L0X::getMeasurementTimingBudget(void)
{
 80a1a20:	b510      	push	{r4, lr}
 80a1a22:	4604      	mov	r4, r0
 80a1a24:	b088      	sub	sp, #32
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a1a26:	4669      	mov	r1, sp
 80a1a28:	f7ff ff77 	bl	80a191a <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a1a2c:	aa02      	add	r2, sp, #8
 80a1a2e:	4669      	mov	r1, sp
 80a1a30:	4620      	mov	r0, r4
 80a1a32:	f7ff ffbd 	bl	80a19b0 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a1a36:	f89d 3000 	ldrb.w	r3, [sp]
 80a1a3a:	b11b      	cbz	r3, 80a1a44 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x24>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a1a3c:	9805      	ldr	r0, [sp, #20]
 80a1a3e:	f600 5084 	addw	r0, r0, #3460	; 0xd84
 80a1a42:	e001      	b.n	80a1a48 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x28>
  uint16_t const DssOverhead        = 690;
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80a1a44:	f640 3036 	movw	r0, #2870	; 0xb36
  if (enables.tcc)
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a1a48:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a1a4c:	b12b      	cbz	r3, 80a1a5a <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x3a>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a1a4e:	9b05      	ldr	r3, [sp, #20]
 80a1a50:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a1a54:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a1a58:	e006      	b.n	80a1a68 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  }
  else if (enables.msrc)
 80a1a5a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a1a5e:	b11b      	cbz	r3, 80a1a68 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a1a60:	9b05      	ldr	r3, [sp, #20]
 80a1a62:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a1a66:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a1a68:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80a1a6c:	b11b      	cbz	r3, 80a1a76 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x56>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a1a6e:	9b06      	ldr	r3, [sp, #24]
 80a1a70:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a1a74:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a1a76:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a1a7a:	b11b      	cbz	r3, 80a1a84 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x64>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80a1a7c:	9b07      	ldr	r3, [sp, #28]
 80a1a7e:	f203 2326 	addw	r3, r3, #550	; 0x226
 80a1a82:	4418      	add	r0, r3
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 80a1a84:	6160      	str	r0, [r4, #20]
  return budget_us;
}
 80a1a86:	b008      	add	sp, #32
 80a1a88:	bd10      	pop	{r4, pc}
	...

080a1a8c <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1a8c:	4b08      	ldr	r3, [pc, #32]	; (80a1ab0 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh+0x24>)

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a1a8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1a92:	4359      	muls	r1, r3

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a1a94:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1a98:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a1a9c:	fbb1 f3f3 	udiv	r3, r1, r3
 80a1aa0:	fbb1 f1f2 	udiv	r1, r1, r2
 80a1aa4:	fb02 3000 	mla	r0, r2, r0, r3
}
 80a1aa8:	fbb0 f0f1 	udiv	r0, r0, r1
 80a1aac:	4770      	bx	lr
 80a1aae:	bf00      	nop
 80a1ab0:	003a2f00 	.word	0x003a2f00

080a1ab4 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>:
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a1ab4:	f644 631f 	movw	r3, #19999	; 0x4e1f
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a1ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a1aba:	4299      	cmp	r1, r3
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a1abc:	b089      	sub	sp, #36	; 0x24
 80a1abe:	4606      	mov	r6, r0
 80a1ac0:	460d      	mov	r5, r1
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a1ac2:	d942      	bls.n	80a1b4a <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>

  uint32_t used_budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a1ac4:	4669      	mov	r1, sp
 80a1ac6:	f7ff ff28 	bl	80a191a <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a1aca:	aa02      	add	r2, sp, #8
 80a1acc:	4669      	mov	r1, sp
 80a1ace:	4630      	mov	r0, r6
 80a1ad0:	f7ff ff6e 	bl	80a19b0 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a1ad4:	f89d 3000 	ldrb.w	r3, [sp]
 80a1ad8:	b11b      	cbz	r3, 80a1ae2 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x2e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a1ada:	9805      	ldr	r0, [sp, #20]
 80a1adc:	f600 3036 	addw	r0, r0, #2870	; 0xb36
 80a1ae0:	e001      	b.n	80a1ae6 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x32>

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80a1ae2:	f640 00e8 	movw	r0, #2280	; 0x8e8
  if (enables.tcc)
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a1ae6:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a1aea:	b12b      	cbz	r3, 80a1af8 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x44>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a1aec:	9b05      	ldr	r3, [sp, #20]
 80a1aee:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a1af2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a1af6:	e006      	b.n	80a1b06 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  }
  else if (enables.msrc)
 80a1af8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a1afc:	b11b      	cbz	r3, 80a1b06 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a1afe:	9b05      	ldr	r3, [sp, #20]
 80a1b00:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a1b04:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a1b06:	f89d 7003 	ldrb.w	r7, [sp, #3]
 80a1b0a:	b11f      	cbz	r7, 80a1b14 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x60>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a1b0c:	9b06      	ldr	r3, [sp, #24]
 80a1b0e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a1b12:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a1b14:	f89d 4004 	ldrb.w	r4, [sp, #4]
 80a1b18:	b1ac      	cbz	r4, 80a1b46 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x92>
  {
    used_budget_us += FinalRangeOverhead;
 80a1b1a:	f200 2026 	addw	r0, r0, #550	; 0x226
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80a1b1e:	4285      	cmp	r5, r0
 80a1b20:	d313      	bcc.n	80a1b4a <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint32_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80a1b22:	f89d 100a 	ldrb.w	r1, [sp, #10]
 80a1b26:	1a28      	subs	r0, r5, r0
 80a1b28:	f7ff ffb0 	bl	80a1a8c <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>

    if (enables.pre_range)
 80a1b2c:	b117      	cbz	r7, 80a1b34 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x80>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80a1b2e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80a1b32:	4418      	add	r0, r3
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80a1b34:	f7ff ff12 	bl	80a195c <_ZN7VL53L0X13encodeTimeoutEm>
      encodeTimeout(final_range_timeout_mclks));
 80a1b38:	2171      	movs	r1, #113	; 0x71
 80a1b3a:	4602      	mov	r2, r0
 80a1b3c:	4630      	mov	r0, r6
 80a1b3e:	f7ff fcec 	bl	80a151a <_ZN7VL53L0X13writeReg16BitEht>

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 80a1b42:	6175      	str	r5, [r6, #20]
 80a1b44:	e002      	b.n	80a1b4c <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  }
  return true;
 80a1b46:	2401      	movs	r4, #1
 80a1b48:	e000      	b.n	80a1b4c <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a1b4a:	2400      	movs	r4, #0
    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
  }
  return true;
}
 80a1b4c:	4620      	mov	r0, r4
 80a1b4e:	b009      	add	sp, #36	; 0x24
 80a1b50:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1b52 <_ZN7VL53L0X27performSingleRefCalibrationEh>:
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a1b52:	b538      	push	{r3, r4, r5, lr}
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a1b54:	f041 0201 	orr.w	r2, r1, #1
 80a1b58:	2100      	movs	r1, #0
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a1b5a:	4604      	mov	r4, r0
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a1b5c:	f7ff fcb8 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
 80a1b60:	f001 fb2a 	bl	80a31b8 <HAL_Timer_Get_Milli_Seconds>

  startTimeout();
 80a1b64:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a1b66:	2113      	movs	r1, #19
 80a1b68:	4620      	mov	r0, r4
 80a1b6a:	f7ff fd20 	bl	80a15ae <_ZN7VL53L0X7readRegEh>
 80a1b6e:	f010 0507 	ands.w	r5, r0, #7
 80a1b72:	d10b      	bne.n	80a1b8c <_ZN7VL53L0X27performSingleRefCalibrationEh+0x3a>
  {
    if (checkTimeoutExpired()) { return false; }
 80a1b74:	6863      	ldr	r3, [r4, #4]
 80a1b76:	2b00      	cmp	r3, #0
 80a1b78:	d0f5      	beq.n	80a1b66 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a1b7a:	f001 fb1d 	bl	80a31b8 <HAL_Timer_Get_Milli_Seconds>
 80a1b7e:	68e3      	ldr	r3, [r4, #12]
 80a1b80:	1ac0      	subs	r0, r0, r3
 80a1b82:	6863      	ldr	r3, [r4, #4]
 80a1b84:	4298      	cmp	r0, r3
 80a1b86:	d9ee      	bls.n	80a1b66 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a1b88:	4628      	mov	r0, r5
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  writeReg(SYSRANGE_START, 0x00);

  return true;
}
 80a1b8a:	bd38      	pop	{r3, r4, r5, pc}
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
  {
    if (checkTimeoutExpired()) { return false; }
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a1b8c:	4620      	mov	r0, r4
 80a1b8e:	2201      	movs	r2, #1
 80a1b90:	210b      	movs	r1, #11
 80a1b92:	f7ff fc9d 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  writeReg(SYSRANGE_START, 0x00);
 80a1b96:	2200      	movs	r2, #0
 80a1b98:	4620      	mov	r0, r4
 80a1b9a:	4611      	mov	r1, r2
 80a1b9c:	f7ff fc98 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
 80a1ba0:	2001      	movs	r0, #1
 80a1ba2:	bd38      	pop	{r3, r4, r5, pc}

080a1ba4 <_ZN7VL53L0X4initEb>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool VL53L0X::init(bool io_2v8)
{
 80a1ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1ba6:	4604      	mov	r4, r0
 80a1ba8:	b085      	sub	sp, #20
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 80a1baa:	b149      	cbz	r1, 80a1bc0 <_ZN7VL53L0X4initEb+0x1c>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 80a1bac:	2189      	movs	r1, #137	; 0x89
 80a1bae:	f7ff fcfe 	bl	80a15ae <_ZN7VL53L0X7readRegEh>
 80a1bb2:	f040 0201 	orr.w	r2, r0, #1
 80a1bb6:	b2d2      	uxtb	r2, r2
 80a1bb8:	2189      	movs	r1, #137	; 0x89
 80a1bba:	4620      	mov	r0, r4
 80a1bbc:	f7ff fc88 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 80a1bc0:	2200      	movs	r2, #0
 80a1bc2:	2188      	movs	r1, #136	; 0x88
 80a1bc4:	4620      	mov	r0, r4
 80a1bc6:	f7ff fc83 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a1bca:	2201      	movs	r2, #1
 80a1bcc:	2180      	movs	r1, #128	; 0x80
 80a1bce:	4620      	mov	r0, r4
 80a1bd0:	f7ff fc7e 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a1bd4:	2201      	movs	r2, #1
 80a1bd6:	21ff      	movs	r1, #255	; 0xff
 80a1bd8:	4620      	mov	r0, r4
 80a1bda:	f7ff fc79 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a1bde:	2200      	movs	r2, #0
 80a1be0:	4611      	mov	r1, r2
 80a1be2:	4620      	mov	r0, r4
 80a1be4:	f7ff fc74 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  stop_variable = readReg(0x91);
 80a1be8:	2191      	movs	r1, #145	; 0x91
 80a1bea:	4620      	mov	r0, r4
 80a1bec:	f7ff fcdf 	bl	80a15ae <_ZN7VL53L0X7readRegEh>
  writeReg(0x00, 0x01);
 80a1bf0:	2201      	movs	r2, #1
  writeReg(0x88, 0x00);

  writeReg(0x80, 0x01);
  writeReg(0xFF, 0x01);
  writeReg(0x00, 0x00);
  stop_variable = readReg(0x91);
 80a1bf2:	7420      	strb	r0, [r4, #16]
  writeReg(0x00, 0x01);
 80a1bf4:	2100      	movs	r1, #0
 80a1bf6:	4620      	mov	r0, r4
 80a1bf8:	f7ff fc6a 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1bfc:	2200      	movs	r2, #0
 80a1bfe:	21ff      	movs	r1, #255	; 0xff
 80a1c00:	4620      	mov	r0, r4
 80a1c02:	f7ff fc65 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a1c06:	2200      	movs	r2, #0
 80a1c08:	2180      	movs	r1, #128	; 0x80
 80a1c0a:	4620      	mov	r0, r4
 80a1c0c:	f7ff fc60 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80a1c10:	2160      	movs	r1, #96	; 0x60
 80a1c12:	4620      	mov	r0, r4
 80a1c14:	f7ff fccb 	bl	80a15ae <_ZN7VL53L0X7readRegEh>
 80a1c18:	f040 0212 	orr.w	r2, r0, #18
 80a1c1c:	b2d2      	uxtb	r2, r2
 80a1c1e:	2160      	movs	r1, #96	; 0x60
 80a1c20:	4620      	mov	r0, r4
 80a1c22:	f7ff fc55 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80a1c26:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a1c2a:	4620      	mov	r0, r4
 80a1c2c:	f7ff fd50 	bl	80a16d0 <_ZN7VL53L0X18setSignalRateLimitEf>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80a1c30:	22ff      	movs	r2, #255	; 0xff
 80a1c32:	2101      	movs	r1, #1
 80a1c34:	4620      	mov	r0, r4
 80a1c36:	f7ff fc4b 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80a1c3a:	f10d 0207 	add.w	r2, sp, #7
 80a1c3e:	f10d 0106 	add.w	r1, sp, #6
 80a1c42:	4620      	mov	r0, r4
 80a1c44:	f7ff fde1 	bl	80a180a <_ZN7VL53L0X11getSpadInfoEPhPb>
 80a1c48:	b908      	cbnz	r0, 80a1c4e <_ZN7VL53L0X4initEb+0xaa>
 80a1c4a:	2500      	movs	r5, #0
 80a1c4c:	e21d      	b.n	80a208a <_ZN7VL53L0X4initEb+0x4e6>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a1c4e:	2306      	movs	r3, #6
 80a1c50:	aa02      	add	r2, sp, #8
 80a1c52:	21b0      	movs	r1, #176	; 0xb0
 80a1c54:	4620      	mov	r0, r4
 80a1c56:	f7ff fd13 	bl	80a1680 <_ZN7VL53L0X9readMultiEhPhh>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 80a1c5a:	2201      	movs	r2, #1
 80a1c5c:	21ff      	movs	r1, #255	; 0xff
 80a1c5e:	4620      	mov	r0, r4
 80a1c60:	f7ff fc36 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80a1c64:	2200      	movs	r2, #0
 80a1c66:	214f      	movs	r1, #79	; 0x4f
 80a1c68:	4620      	mov	r0, r4
 80a1c6a:	f7ff fc31 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80a1c6e:	222c      	movs	r2, #44	; 0x2c
 80a1c70:	214e      	movs	r1, #78	; 0x4e
 80a1c72:	4620      	mov	r0, r4
 80a1c74:	f7ff fc2c 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1c78:	2200      	movs	r2, #0
 80a1c7a:	21ff      	movs	r1, #255	; 0xff
 80a1c7c:	4620      	mov	r0, r4
 80a1c7e:	f7ff fc27 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1c82:	2500      	movs	r5, #0

  writeReg(0xFF, 0x01);
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80a1c84:	4620      	mov	r0, r4
 80a1c86:	21b6      	movs	r1, #182	; 0xb6
 80a1c88:	22b4      	movs	r2, #180	; 0xb4
 80a1c8a:	f7ff fc21 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;
 80a1c8e:	4629      	mov	r1, r5
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a1c90:	f89d 3007 	ldrb.w	r3, [sp, #7]
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1c94:	f89d 6006 	ldrb.w	r6, [sp, #6]
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a1c98:	2b00      	cmp	r3, #0
 80a1c9a:	bf14      	ite	ne
 80a1c9c:	200c      	movne	r0, #12
 80a1c9e:	2000      	moveq	r0, #0
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1ca0:	2701      	movs	r7, #1
 80a1ca2:	b2eb      	uxtb	r3, r5
 80a1ca4:	08da      	lsrs	r2, r3, #3
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1ca6:	4298      	cmp	r0, r3
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1ca8:	f10d 0e10 	add.w	lr, sp, #16
 80a1cac:	f003 0307 	and.w	r3, r3, #7
 80a1cb0:	4472      	add	r2, lr
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1cb2:	d801      	bhi.n	80a1cb8 <_ZN7VL53L0X4initEb+0x114>
 80a1cb4:	428e      	cmp	r6, r1
 80a1cb6:	d108      	bne.n	80a1cca <_ZN7VL53L0X4initEb+0x126>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1cb8:	f812 ec08 	ldrb.w	lr, [r2, #-8]
 80a1cbc:	fa07 f303 	lsl.w	r3, r7, r3
 80a1cc0:	ea2e 0303 	bic.w	r3, lr, r3
 80a1cc4:	f802 3c08 	strb.w	r3, [r2, #-8]
 80a1cc8:	e007      	b.n	80a1cda <_ZN7VL53L0X4initEb+0x136>
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 80a1cca:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80a1cce:	fa42 f303 	asr.w	r3, r2, r3
 80a1cd2:	07db      	lsls	r3, r3, #31
    {
      spads_enabled++;
 80a1cd4:	bf44      	itt	mi
 80a1cd6:	3101      	addmi	r1, #1
 80a1cd8:	b2c9      	uxtbmi	r1, r1
 80a1cda:	3501      	adds	r5, #1
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
 80a1cdc:	2d30      	cmp	r5, #48	; 0x30
 80a1cde:	d1e0      	bne.n	80a1ca2 <_ZN7VL53L0X4initEb+0xfe>
    {
      spads_enabled++;
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a1ce0:	2306      	movs	r3, #6
 80a1ce2:	aa02      	add	r2, sp, #8
 80a1ce4:	21b0      	movs	r1, #176	; 0xb0
 80a1ce6:	4620      	mov	r0, r4
 80a1ce8:	f7ff fca9 	bl	80a163e <_ZN7VL53L0X10writeMultiEhPKhh>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 80a1cec:	2201      	movs	r2, #1
 80a1cee:	21ff      	movs	r1, #255	; 0xff
 80a1cf0:	4620      	mov	r0, r4
 80a1cf2:	f7ff fbed 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a1cf6:	2200      	movs	r2, #0
 80a1cf8:	4611      	mov	r1, r2
 80a1cfa:	4620      	mov	r0, r4
 80a1cfc:	f7ff fbe8 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1d00:	2200      	movs	r2, #0
 80a1d02:	21ff      	movs	r1, #255	; 0xff
 80a1d04:	4620      	mov	r0, r4
 80a1d06:	f7ff fbe3 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x09, 0x00);
 80a1d0a:	2200      	movs	r2, #0
 80a1d0c:	2109      	movs	r1, #9
 80a1d0e:	4620      	mov	r0, r4
 80a1d10:	f7ff fbde 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x10, 0x00);
 80a1d14:	2200      	movs	r2, #0
 80a1d16:	2110      	movs	r1, #16
 80a1d18:	4620      	mov	r0, r4
 80a1d1a:	f7ff fbd9 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x11, 0x00);
 80a1d1e:	2200      	movs	r2, #0
 80a1d20:	2111      	movs	r1, #17
 80a1d22:	4620      	mov	r0, r4
 80a1d24:	f7ff fbd4 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x24, 0x01);
 80a1d28:	2201      	movs	r2, #1
 80a1d2a:	2124      	movs	r1, #36	; 0x24
 80a1d2c:	4620      	mov	r0, r4
 80a1d2e:	f7ff fbcf 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x25, 0xFF);
 80a1d32:	22ff      	movs	r2, #255	; 0xff
 80a1d34:	2125      	movs	r1, #37	; 0x25
 80a1d36:	4620      	mov	r0, r4
 80a1d38:	f7ff fbca 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x75, 0x00);
 80a1d3c:	2200      	movs	r2, #0
 80a1d3e:	2175      	movs	r1, #117	; 0x75
 80a1d40:	4620      	mov	r0, r4
 80a1d42:	f7ff fbc5 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1d46:	2201      	movs	r2, #1
 80a1d48:	21ff      	movs	r1, #255	; 0xff
 80a1d4a:	4620      	mov	r0, r4
 80a1d4c:	f7ff fbc0 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4E, 0x2C);
 80a1d50:	222c      	movs	r2, #44	; 0x2c
 80a1d52:	214e      	movs	r1, #78	; 0x4e
 80a1d54:	4620      	mov	r0, r4
 80a1d56:	f7ff fbbb 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x00);
 80a1d5a:	2200      	movs	r2, #0
 80a1d5c:	2148      	movs	r1, #72	; 0x48
 80a1d5e:	4620      	mov	r0, r4
 80a1d60:	f7ff fbb6 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x20);
 80a1d64:	2220      	movs	r2, #32
 80a1d66:	4629      	mov	r1, r5
 80a1d68:	4620      	mov	r0, r4
 80a1d6a:	f7ff fbb1 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1d6e:	2200      	movs	r2, #0
 80a1d70:	21ff      	movs	r1, #255	; 0xff
 80a1d72:	4620      	mov	r0, r4
 80a1d74:	f7ff fbac 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x09);
 80a1d78:	2209      	movs	r2, #9
 80a1d7a:	4629      	mov	r1, r5
 80a1d7c:	4620      	mov	r0, r4
 80a1d7e:	f7ff fba7 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x54, 0x00);
 80a1d82:	2200      	movs	r2, #0
 80a1d84:	2154      	movs	r1, #84	; 0x54
 80a1d86:	4620      	mov	r0, r4
 80a1d88:	f7ff fba2 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a1d8c:	2204      	movs	r2, #4
 80a1d8e:	2131      	movs	r1, #49	; 0x31
 80a1d90:	4620      	mov	r0, r4
 80a1d92:	f7ff fb9d 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x32, 0x03);
 80a1d96:	2203      	movs	r2, #3
 80a1d98:	2132      	movs	r1, #50	; 0x32
 80a1d9a:	4620      	mov	r0, r4
 80a1d9c:	f7ff fb98 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x83);
 80a1da0:	2283      	movs	r2, #131	; 0x83
 80a1da2:	2140      	movs	r1, #64	; 0x40
 80a1da4:	4620      	mov	r0, r4
 80a1da6:	f7ff fb93 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x25);
 80a1daa:	2225      	movs	r2, #37	; 0x25
 80a1dac:	2146      	movs	r1, #70	; 0x46
 80a1dae:	4620      	mov	r0, r4
 80a1db0:	f7ff fb8e 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x60, 0x00);
 80a1db4:	2200      	movs	r2, #0
 80a1db6:	2160      	movs	r1, #96	; 0x60
 80a1db8:	4620      	mov	r0, r4
 80a1dba:	f7ff fb89 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x27, 0x00);
 80a1dbe:	2200      	movs	r2, #0
 80a1dc0:	2127      	movs	r1, #39	; 0x27
 80a1dc2:	4620      	mov	r0, r4
 80a1dc4:	f7ff fb84 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x50, 0x06);
 80a1dc8:	2206      	movs	r2, #6
 80a1dca:	2150      	movs	r1, #80	; 0x50
 80a1dcc:	4620      	mov	r0, r4
 80a1dce:	f7ff fb7f 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x51, 0x00);
 80a1dd2:	2200      	movs	r2, #0
 80a1dd4:	2151      	movs	r1, #81	; 0x51
 80a1dd6:	4620      	mov	r0, r4
 80a1dd8:	f7ff fb7a 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x52, 0x96);
 80a1ddc:	2296      	movs	r2, #150	; 0x96
 80a1dde:	2152      	movs	r1, #82	; 0x52
 80a1de0:	4620      	mov	r0, r4
 80a1de2:	f7ff fb75 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x56, 0x08);
 80a1de6:	2208      	movs	r2, #8
 80a1de8:	2156      	movs	r1, #86	; 0x56
 80a1dea:	4620      	mov	r0, r4
 80a1dec:	f7ff fb70 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x57, 0x30);
 80a1df0:	462a      	mov	r2, r5
 80a1df2:	2157      	movs	r1, #87	; 0x57
 80a1df4:	4620      	mov	r0, r4
 80a1df6:	f7ff fb6b 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x61, 0x00);
 80a1dfa:	2200      	movs	r2, #0
 80a1dfc:	2161      	movs	r1, #97	; 0x61
 80a1dfe:	4620      	mov	r0, r4
 80a1e00:	f7ff fb66 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x62, 0x00);
 80a1e04:	2200      	movs	r2, #0
 80a1e06:	2162      	movs	r1, #98	; 0x62
 80a1e08:	4620      	mov	r0, r4
 80a1e0a:	f7ff fb61 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x64, 0x00);
 80a1e0e:	2200      	movs	r2, #0
 80a1e10:	2164      	movs	r1, #100	; 0x64
 80a1e12:	4620      	mov	r0, r4
 80a1e14:	f7ff fb5c 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x65, 0x00);
 80a1e18:	2200      	movs	r2, #0
 80a1e1a:	2165      	movs	r1, #101	; 0x65
 80a1e1c:	4620      	mov	r0, r4
 80a1e1e:	f7ff fb57 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x66, 0xA0);
 80a1e22:	22a0      	movs	r2, #160	; 0xa0
 80a1e24:	2166      	movs	r1, #102	; 0x66
 80a1e26:	4620      	mov	r0, r4
 80a1e28:	f7ff fb52 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1e2c:	2201      	movs	r2, #1
 80a1e2e:	21ff      	movs	r1, #255	; 0xff
 80a1e30:	4620      	mov	r0, r4
 80a1e32:	f7ff fb4d 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x22, 0x32);
 80a1e36:	2232      	movs	r2, #50	; 0x32
 80a1e38:	2122      	movs	r1, #34	; 0x22
 80a1e3a:	4620      	mov	r0, r4
 80a1e3c:	f7ff fb48 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x14);
 80a1e40:	2214      	movs	r2, #20
 80a1e42:	2147      	movs	r1, #71	; 0x47
 80a1e44:	4620      	mov	r0, r4
 80a1e46:	f7ff fb43 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x49, 0xFF);
 80a1e4a:	22ff      	movs	r2, #255	; 0xff
 80a1e4c:	2149      	movs	r1, #73	; 0x49
 80a1e4e:	4620      	mov	r0, r4
 80a1e50:	f7ff fb3e 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4A, 0x00);
 80a1e54:	2200      	movs	r2, #0
 80a1e56:	214a      	movs	r1, #74	; 0x4a
 80a1e58:	4620      	mov	r0, r4
 80a1e5a:	f7ff fb39 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1e5e:	2200      	movs	r2, #0
 80a1e60:	21ff      	movs	r1, #255	; 0xff
 80a1e62:	4620      	mov	r0, r4
 80a1e64:	f7ff fb34 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7A, 0x0A);
 80a1e68:	220a      	movs	r2, #10
 80a1e6a:	217a      	movs	r1, #122	; 0x7a
 80a1e6c:	4620      	mov	r0, r4
 80a1e6e:	f7ff fb2f 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7B, 0x00);
 80a1e72:	2200      	movs	r2, #0
 80a1e74:	217b      	movs	r1, #123	; 0x7b
 80a1e76:	4620      	mov	r0, r4
 80a1e78:	f7ff fb2a 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x78, 0x21);
 80a1e7c:	2221      	movs	r2, #33	; 0x21
 80a1e7e:	2178      	movs	r1, #120	; 0x78
 80a1e80:	4620      	mov	r0, r4
 80a1e82:	f7ff fb25 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1e86:	2201      	movs	r2, #1
 80a1e88:	21ff      	movs	r1, #255	; 0xff
 80a1e8a:	4620      	mov	r0, r4
 80a1e8c:	f7ff fb20 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x23, 0x34);
 80a1e90:	2234      	movs	r2, #52	; 0x34
 80a1e92:	2123      	movs	r1, #35	; 0x23
 80a1e94:	4620      	mov	r0, r4
 80a1e96:	f7ff fb1b 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x42, 0x00);
 80a1e9a:	2200      	movs	r2, #0
 80a1e9c:	2142      	movs	r1, #66	; 0x42
 80a1e9e:	4620      	mov	r0, r4
 80a1ea0:	f7ff fb16 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0xFF);
 80a1ea4:	22ff      	movs	r2, #255	; 0xff
 80a1ea6:	2144      	movs	r1, #68	; 0x44
 80a1ea8:	4620      	mov	r0, r4
 80a1eaa:	f7ff fb11 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x26);
 80a1eae:	2226      	movs	r2, #38	; 0x26
 80a1eb0:	2145      	movs	r1, #69	; 0x45
 80a1eb2:	4620      	mov	r0, r4
 80a1eb4:	f7ff fb0c 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x05);
 80a1eb8:	2205      	movs	r2, #5
 80a1eba:	2146      	movs	r1, #70	; 0x46
 80a1ebc:	4620      	mov	r0, r4
 80a1ebe:	f7ff fb07 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x40);
 80a1ec2:	2240      	movs	r2, #64	; 0x40
 80a1ec4:	4611      	mov	r1, r2
 80a1ec6:	4620      	mov	r0, r4
 80a1ec8:	f7ff fb02 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0E, 0x06);
 80a1ecc:	2206      	movs	r2, #6
 80a1ece:	210e      	movs	r1, #14
 80a1ed0:	4620      	mov	r0, r4
 80a1ed2:	f7ff fafd 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x20, 0x1A);
 80a1ed6:	221a      	movs	r2, #26
 80a1ed8:	2120      	movs	r1, #32
 80a1eda:	4620      	mov	r0, r4
 80a1edc:	f7ff faf8 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x43, 0x40);
 80a1ee0:	2240      	movs	r2, #64	; 0x40
 80a1ee2:	2143      	movs	r1, #67	; 0x43
 80a1ee4:	4620      	mov	r0, r4
 80a1ee6:	f7ff faf3 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1eea:	2200      	movs	r2, #0
 80a1eec:	21ff      	movs	r1, #255	; 0xff
 80a1eee:	4620      	mov	r0, r4
 80a1ef0:	f7ff faee 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x34, 0x03);
 80a1ef4:	2203      	movs	r2, #3
 80a1ef6:	2134      	movs	r1, #52	; 0x34
 80a1ef8:	4620      	mov	r0, r4
 80a1efa:	f7ff fae9 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x35, 0x44);
 80a1efe:	2244      	movs	r2, #68	; 0x44
 80a1f00:	2135      	movs	r1, #53	; 0x35
 80a1f02:	4620      	mov	r0, r4
 80a1f04:	f7ff fae4 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1f08:	2201      	movs	r2, #1
 80a1f0a:	21ff      	movs	r1, #255	; 0xff
 80a1f0c:	4620      	mov	r0, r4
 80a1f0e:	f7ff fadf 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a1f12:	2204      	movs	r2, #4
 80a1f14:	2131      	movs	r1, #49	; 0x31
 80a1f16:	4620      	mov	r0, r4
 80a1f18:	f7ff fada 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4B, 0x09);
 80a1f1c:	2209      	movs	r2, #9
 80a1f1e:	214b      	movs	r1, #75	; 0x4b
 80a1f20:	4620      	mov	r0, r4
 80a1f22:	f7ff fad5 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4C, 0x05);
 80a1f26:	2205      	movs	r2, #5
 80a1f28:	214c      	movs	r1, #76	; 0x4c
 80a1f2a:	4620      	mov	r0, r4
 80a1f2c:	f7ff fad0 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4D, 0x04);
 80a1f30:	2204      	movs	r2, #4
 80a1f32:	214d      	movs	r1, #77	; 0x4d
 80a1f34:	4620      	mov	r0, r4
 80a1f36:	f7ff facb 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1f3a:	2200      	movs	r2, #0
 80a1f3c:	21ff      	movs	r1, #255	; 0xff
 80a1f3e:	4620      	mov	r0, r4
 80a1f40:	f7ff fac6 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0x00);
 80a1f44:	2200      	movs	r2, #0
 80a1f46:	2144      	movs	r1, #68	; 0x44
 80a1f48:	4620      	mov	r0, r4
 80a1f4a:	f7ff fac1 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x20);
 80a1f4e:	2220      	movs	r2, #32
 80a1f50:	2145      	movs	r1, #69	; 0x45
 80a1f52:	4620      	mov	r0, r4
 80a1f54:	f7ff fabc 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x08);
 80a1f58:	2208      	movs	r2, #8
 80a1f5a:	2147      	movs	r1, #71	; 0x47
 80a1f5c:	4620      	mov	r0, r4
 80a1f5e:	f7ff fab7 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x28);
 80a1f62:	2228      	movs	r2, #40	; 0x28
 80a1f64:	2148      	movs	r1, #72	; 0x48
 80a1f66:	4620      	mov	r0, r4
 80a1f68:	f7ff fab2 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x67, 0x00);
 80a1f6c:	2200      	movs	r2, #0
 80a1f6e:	2167      	movs	r1, #103	; 0x67
 80a1f70:	4620      	mov	r0, r4
 80a1f72:	f7ff faad 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x70, 0x04);
 80a1f76:	2204      	movs	r2, #4
 80a1f78:	2170      	movs	r1, #112	; 0x70
 80a1f7a:	4620      	mov	r0, r4
 80a1f7c:	f7ff faa8 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x71, 0x01);
 80a1f80:	2201      	movs	r2, #1
 80a1f82:	2171      	movs	r1, #113	; 0x71
 80a1f84:	4620      	mov	r0, r4
 80a1f86:	f7ff faa3 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x72, 0xFE);
 80a1f8a:	22fe      	movs	r2, #254	; 0xfe
 80a1f8c:	2172      	movs	r1, #114	; 0x72
 80a1f8e:	4620      	mov	r0, r4
 80a1f90:	f7ff fa9e 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x76, 0x00);
 80a1f94:	2200      	movs	r2, #0
 80a1f96:	2176      	movs	r1, #118	; 0x76
 80a1f98:	4620      	mov	r0, r4
 80a1f9a:	f7ff fa99 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x77, 0x00);
 80a1f9e:	2200      	movs	r2, #0
 80a1fa0:	2177      	movs	r1, #119	; 0x77
 80a1fa2:	4620      	mov	r0, r4
 80a1fa4:	f7ff fa94 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1fa8:	2201      	movs	r2, #1
 80a1faa:	21ff      	movs	r1, #255	; 0xff
 80a1fac:	4620      	mov	r0, r4
 80a1fae:	f7ff fa8f 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0D, 0x01);
 80a1fb2:	2201      	movs	r2, #1
 80a1fb4:	210d      	movs	r1, #13
 80a1fb6:	4620      	mov	r0, r4
 80a1fb8:	f7ff fa8a 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1fbc:	2200      	movs	r2, #0
 80a1fbe:	21ff      	movs	r1, #255	; 0xff
 80a1fc0:	4620      	mov	r0, r4
 80a1fc2:	f7ff fa85 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x01);
 80a1fc6:	2201      	movs	r2, #1
 80a1fc8:	2180      	movs	r1, #128	; 0x80
 80a1fca:	4620      	mov	r0, r4
 80a1fcc:	f7ff fa80 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x01, 0xF8);
 80a1fd0:	22f8      	movs	r2, #248	; 0xf8
 80a1fd2:	2101      	movs	r1, #1
 80a1fd4:	4620      	mov	r0, r4
 80a1fd6:	f7ff fa7b 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1fda:	2201      	movs	r2, #1
 80a1fdc:	21ff      	movs	r1, #255	; 0xff
 80a1fde:	4620      	mov	r0, r4
 80a1fe0:	f7ff fa76 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x8E, 0x01);
 80a1fe4:	2201      	movs	r2, #1
 80a1fe6:	218e      	movs	r1, #142	; 0x8e
 80a1fe8:	4620      	mov	r0, r4
 80a1fea:	f7ff fa71 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a1fee:	2201      	movs	r2, #1
 80a1ff0:	2100      	movs	r1, #0
 80a1ff2:	4620      	mov	r0, r4
 80a1ff4:	f7ff fa6c 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1ff8:	2200      	movs	r2, #0
 80a1ffa:	21ff      	movs	r1, #255	; 0xff
 80a1ffc:	4620      	mov	r0, r4
 80a1ffe:	f7ff fa67 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a2002:	2200      	movs	r2, #0
 80a2004:	2180      	movs	r1, #128	; 0x80
 80a2006:	4620      	mov	r0, r4
 80a2008:	f7ff fa62 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80a200c:	2204      	movs	r2, #4
 80a200e:	210a      	movs	r1, #10
 80a2010:	4620      	mov	r0, r4
 80a2012:	f7ff fa5d 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80a2016:	2184      	movs	r1, #132	; 0x84
 80a2018:	4620      	mov	r0, r4
 80a201a:	f7ff fac8 	bl	80a15ae <_ZN7VL53L0X7readRegEh>
 80a201e:	2184      	movs	r1, #132	; 0x84
 80a2020:	f000 02ef 	and.w	r2, r0, #239	; 0xef
 80a2024:	4620      	mov	r0, r4
 80a2026:	f7ff fa53 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a202a:	2201      	movs	r2, #1
 80a202c:	210b      	movs	r1, #11
 80a202e:	4620      	mov	r0, r4
 80a2030:	f7ff fa4e 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a2034:	4620      	mov	r0, r4
 80a2036:	f7ff fcf3 	bl	80a1a20 <_ZN7VL53L0X26getMeasurementTimingBudgetEv>
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a203a:	22e8      	movs	r2, #232	; 0xe8
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a203c:	6160      	str	r0, [r4, #20]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a203e:	2101      	movs	r1, #1
 80a2040:	4620      	mov	r0, r4
 80a2042:	f7ff fa45 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(measurement_timing_budget_us);
 80a2046:	6961      	ldr	r1, [r4, #20]
 80a2048:	4620      	mov	r0, r4
 80a204a:	f7ff fd33 	bl	80a1ab4 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80a204e:	2201      	movs	r2, #1
 80a2050:	4611      	mov	r1, r2
 80a2052:	4620      	mov	r0, r4
 80a2054:	f7ff fa3c 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x40)) { return false; }
 80a2058:	2140      	movs	r1, #64	; 0x40
 80a205a:	4620      	mov	r0, r4
 80a205c:	f7ff fd79 	bl	80a1b52 <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a2060:	2800      	cmp	r0, #0
 80a2062:	f43f adf2 	beq.w	80a1c4a <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80a2066:	2202      	movs	r2, #2
 80a2068:	2101      	movs	r1, #1
 80a206a:	4620      	mov	r0, r4
 80a206c:	f7ff fa30 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x00)) { return false; }
 80a2070:	2100      	movs	r1, #0
 80a2072:	4620      	mov	r0, r4
 80a2074:	f7ff fd6d 	bl	80a1b52 <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a2078:	4605      	mov	r5, r0
 80a207a:	2800      	cmp	r0, #0
 80a207c:	f43f ade5 	beq.w	80a1c4a <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a2080:	22e8      	movs	r2, #232	; 0xe8
 80a2082:	2101      	movs	r1, #1
 80a2084:	4620      	mov	r0, r4
 80a2086:	f7ff fa23 	bl	80a14d0 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_PerformRefCalibration() end

  return true;
}
 80a208a:	4628      	mov	r0, r5
 80a208c:	b005      	add	sp, #20
 80a208e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2090 <_GLOBAL__sub_I__ZN7VL53L0XC2Ev>:
 80a2090:	f001 b83a 	b.w	80a3108 <HAL_Pin_Map>

080a2094 <_ZN9LIS3DHI2CD1Ev>:

}

LIS3DHI2C::~LIS3DHI2C() {

}
 80a2094:	4770      	bx	lr

080a2096 <_ZN9LIS3DHI2CD0Ev>:

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {

}

LIS3DHI2C::~LIS3DHI2C() {
 80a2096:	b510      	push	{r4, lr}
 80a2098:	4604      	mov	r4, r0

}
 80a209a:	f7fe f800 	bl	80a009e <_ZdlPv>
 80a209e:	4620      	mov	r0, r4
 80a20a0:	bd10      	pop	{r4, pc}

080a20a2 <_ZN9LIS3DHI2C9writeDataEhPKhj>:
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a20a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a20a4:	4605      	mov	r5, r0
 80a20a6:	461e      	mov	r6, r3
 80a20a8:	460f      	mov	r7, r1

	wire.beginTransmission(getI2CAddr());
 80a20aa:	7c01      	ldrb	r1, [r0, #16]
 80a20ac:	68c0      	ldr	r0, [r0, #12]
 80a20ae:	f041 0118 	orr.w	r1, r1, #24
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a20b2:	4614      	mov	r4, r2

	wire.beginTransmission(getI2CAddr());
 80a20b4:	f002 f8c3 	bl	80a423e <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a20b8:	68e8      	ldr	r0, [r5, #12]

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a20ba:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a20bc:	6803      	ldr	r3, [r0, #0]
bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a20be:	bf88      	it	hi
 80a20c0:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a20c4:	689b      	ldr	r3, [r3, #8]
 80a20c6:	4639      	mov	r1, r7
 80a20c8:	4798      	blx	r3
 80a20ca:	4426      	add	r6, r4
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a20cc:	42a6      	cmp	r6, r4
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a20ce:	68e8      	ldr	r0, [r5, #12]

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a20d0:	d005      	beq.n	80a20de <_ZN9LIS3DHI2C9writeDataEhPKhj+0x3c>
		wire.write(buf[ii]);
 80a20d2:	6803      	ldr	r3, [r0, #0]
 80a20d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a20d8:	689b      	ldr	r3, [r3, #8]
 80a20da:	4798      	blx	r3

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a20dc:	e7f6      	b.n	80a20cc <_ZN9LIS3DHI2C9writeDataEhPKhj+0x2a>
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a20de:	f002 f8b6 	bl	80a424e <_ZN7TwoWire15endTransmissionEv>

	return (res == 0);
}
 80a20e2:	fab0 f080 	clz	r0, r0
 80a20e6:	0940      	lsrs	r0, r0, #5
 80a20e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a20ea <_ZN9LIS3DHI2C8readDataEhPhj>:

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a20ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a20ec:	4604      	mov	r4, r0
 80a20ee:	461e      	mov	r6, r3
 80a20f0:	460f      	mov	r7, r1
	wire.beginTransmission(getI2CAddr());
 80a20f2:	7c01      	ldrb	r1, [r0, #16]
 80a20f4:	68c0      	ldr	r0, [r0, #12]
 80a20f6:	f041 0118 	orr.w	r1, r1, #24

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a20fa:	4615      	mov	r5, r2
	wire.beginTransmission(getI2CAddr());
 80a20fc:	f002 f89f 	bl	80a423e <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a2100:	68e0      	ldr	r0, [r4, #12]
}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a2102:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a2104:	6803      	ldr	r3, [r0, #0]

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a2106:	bf88      	it	hi
 80a2108:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a210c:	689b      	ldr	r3, [r3, #8]
 80a210e:	4639      	mov	r1, r7
 80a2110:	4798      	blx	r3

	uint8_t res = wire.endTransmission();
 80a2112:	68e0      	ldr	r0, [r4, #12]
 80a2114:	f002 f89b 	bl	80a424e <_ZN7TwoWire15endTransmissionEv>
	if (res != 0) {
 80a2118:	b9a8      	cbnz	r0, 80a2146 <_ZN9LIS3DHI2C8readDataEhPhj+0x5c>
		return false;
	}

	wire.requestFrom((int)getI2CAddr(), numBytes);
 80a211a:	7c21      	ldrb	r1, [r4, #16]
 80a211c:	4632      	mov	r2, r6
 80a211e:	f041 0118 	orr.w	r1, r1, #24
 80a2122:	68e0      	ldr	r0, [r4, #12]
 80a2124:	f002 f886 	bl	80a4234 <_ZN7TwoWire11requestFromEii>
 80a2128:	442e      	add	r6, r5
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
 80a212a:	42ae      	cmp	r6, r5
 80a212c:	d00d      	beq.n	80a214a <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
 80a212e:	68e0      	ldr	r0, [r4, #12]
 80a2130:	6803      	ldr	r3, [r0, #0]
 80a2132:	691b      	ldr	r3, [r3, #16]
 80a2134:	4798      	blx	r3
 80a2136:	b140      	cbz	r0, 80a214a <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
		buf[ii] = wire.read();
 80a2138:	68e0      	ldr	r0, [r4, #12]
 80a213a:	6803      	ldr	r3, [r0, #0]
 80a213c:	695b      	ldr	r3, [r3, #20]
 80a213e:	4798      	blx	r3
 80a2140:	f805 0b01 	strb.w	r0, [r5], #1
 80a2144:	e7f1      	b.n	80a212a <_ZN9LIS3DHI2C8readDataEhPhj+0x40>
	}
	wire.write(addr);

	uint8_t res = wire.endTransmission();
	if (res != 0) {
		return false;
 80a2146:	2000      	movs	r0, #0
 80a2148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a214a:	2001      	movs	r0, #1
	wire.requestFrom((int)getI2CAddr(), numBytes);
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
		buf[ii] = wire.read();
	}
	return true;
}
 80a214c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a214e <_ZN12LIS3DHConfigC1Ev>:
#include "LIS3DH.h"

// Official project location:
// https://github.com/rickkas7/LIS3DH

LIS3DHConfig::LIS3DHConfig() {
 80a214e:	2200      	movs	r2, #0
 80a2150:	7002      	strb	r2, [r0, #0]
 80a2152:	7042      	strb	r2, [r0, #1]
 80a2154:	7082      	strb	r2, [r0, #2]
 80a2156:	70c2      	strb	r2, [r0, #3]
 80a2158:	7102      	strb	r2, [r0, #4]
 80a215a:	7142      	strb	r2, [r0, #5]
 80a215c:	7182      	strb	r2, [r0, #6]
 80a215e:	71c2      	strb	r2, [r0, #7]
 80a2160:	7202      	strb	r2, [r0, #8]
 80a2162:	7242      	strb	r2, [r0, #9]
 80a2164:	7282      	strb	r2, [r0, #10]
}
 80a2166:	4770      	bx	lr

080a2168 <_ZN12LIS3DHConfig12setAccelModeEh>:
}

LIS3DHConfig &LIS3DHConfig::setAccelMode(uint8_t rate) {

	// Enable specified rate, with XYZ detection enabled
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
 80a2168:	f041 0107 	orr.w	r1, r1, #7
 80a216c:	7001      	strb	r1, [r0, #0]

	return *this;
}
 80a216e:	4770      	bx	lr

080a2170 <_ZN6LIS3DH13readRegister8Eh>:

	return pos;
}


uint8_t LIS3DH::readRegister8(uint8_t addr) {
 80a2170:	b513      	push	{r0, r1, r4, lr}

	uint8_t resp[1];
	readData(addr, resp, sizeof(resp));
 80a2172:	6803      	ldr	r3, [r0, #0]
 80a2174:	aa01      	add	r2, sp, #4
 80a2176:	689c      	ldr	r4, [r3, #8]
 80a2178:	2301      	movs	r3, #1
 80a217a:	47a0      	blx	r4

	return resp[0];
}
 80a217c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80a2180:	b002      	add	sp, #8
 80a2182:	bd10      	pop	{r4, pc}

080a2184 <_ZN6LIS3DH9hasDeviceEv>:
LIS3DH::~LIS3DH() {

}


bool LIS3DH::hasDevice() {
 80a2184:	b538      	push	{r3, r4, r5, lr}
 80a2186:	4605      	mov	r5, r0
 80a2188:	240a      	movs	r4, #10
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
 80a218a:	210f      	movs	r1, #15
 80a218c:	4628      	mov	r0, r5
 80a218e:	f7ff ffef 	bl	80a2170 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
 80a2192:	2833      	cmp	r0, #51	; 0x33
			found = true;
 80a2194:	f04f 0001 	mov.w	r0, #1

bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
		if (whoami == WHO_AM_I) {
 80a2198:	d005      	beq.n	80a21a6 <_ZN6LIS3DH9hasDeviceEv+0x22>
			found = true;
			break;
		}
		delay(1);
 80a219a:	f001 fb4b 	bl	80a3834 <delay>
}


bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
 80a219e:	3c01      	subs	r4, #1
 80a21a0:	d1f3      	bne.n	80a218a <_ZN6LIS3DH9hasDeviceEv+0x6>

}


bool LIS3DH::hasDevice() {
	bool found = false;
 80a21a2:	4620      	mov	r0, r4
 80a21a4:	bd38      	pop	{r3, r4, r5, pc}
			break;
		}
		delay(1);
	}
	return found;
}
 80a21a6:	bd38      	pop	{r3, r4, r5, pc}

080a21a8 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a21a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a21aa:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a21ac:	2107      	movs	r1, #7

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a21ae:	4606      	mov	r6, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a21b0:	f7ff ffde 	bl	80a2170 <_ZN6LIS3DH13readRegister8Eh>
 80a21b4:	f000 0008 	and.w	r0, r0, #8

	bool hasData = ((statusAuxReg & STATUS_AUX_321DA) != 0);
 80a21b8:	2800      	cmp	r0, #0
 80a21ba:	bf14      	ite	ne
 80a21bc:	2501      	movne	r5, #1
 80a21be:	2500      	moveq	r5, #0

	//Serial.printlnf("fifoSrcReg=0x%02x", fifoSrcReg);

	if (hasData) {
 80a21c0:	d01b      	beq.n	80a21fa <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x52>
		uint8_t resp[6];
		readData(REG_OUT_X_L, resp, sizeof(resp));
 80a21c2:	6833      	ldr	r3, [r6, #0]
 80a21c4:	466a      	mov	r2, sp
 80a21c6:	689f      	ldr	r7, [r3, #8]
 80a21c8:	2128      	movs	r1, #40	; 0x28
 80a21ca:	2306      	movs	r3, #6
 80a21cc:	4630      	mov	r0, r6
 80a21ce:	47b8      	blx	r7

		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
 80a21d0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a21d4:	f89d 3000 	ldrb.w	r3, [sp]
 80a21d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a21dc:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
 80a21de:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a21e2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a21e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a21ea:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
 80a21ec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a21f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a21f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a21f8:	80a3      	strh	r3, [r4, #4]
	}
	return hasData;
}
 80a21fa:	4628      	mov	r0, r5
 80a21fc:	b003      	add	sp, #12
 80a21fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2200 <_ZN6LIS3DH14writeRegister8Ehh>:

	return resp[0] | (((uint16_t)resp[1]) << 8);
}


void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
 80a2200:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a2202:	ac02      	add	r4, sp, #8

	writeData(addr, req, sizeof(req));
 80a2204:	6803      	ldr	r3, [r0, #0]

void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a2206:	f804 2d04 	strb.w	r2, [r4, #-4]!

	writeData(addr, req, sizeof(req));
 80a220a:	68dd      	ldr	r5, [r3, #12]
 80a220c:	4622      	mov	r2, r4
 80a220e:	2301      	movs	r3, #1
 80a2210:	47a8      	blx	r5
}
 80a2212:	b003      	add	sp, #12
 80a2214:	bd30      	pop	{r4, r5, pc}
	...

080a2218 <_ZN6LIS3DH5setupER12LIS3DHConfig>:
		delay(1);
	}
	return found;
}

bool LIS3DH::setup(LIS3DHConfig &config) {
 80a2218:	b570      	push	{r4, r5, r6, lr}
 80a221a:	4604      	mov	r4, r0
 80a221c:	460d      	mov	r5, r1

	if (!hasDevice()) {
 80a221e:	f7ff ffb1 	bl	80a2184 <_ZN6LIS3DH9hasDeviceEv>
 80a2222:	4606      	mov	r6, r0
 80a2224:	b928      	cbnz	r0, 80a2232 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		Serial.println("device not found");
 80a2226:	f001 feab 	bl	80a3f80 <_Z16_fetch_usbserialv>
 80a222a:	4928      	ldr	r1, [pc, #160]	; (80a22cc <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
 80a222c:	f001 fa63 	bl	80a36f6 <_ZN5Print7printlnEPKc>
		return false;
 80a2230:	e049      	b.n	80a22c6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
	}

	writeRegister8(REG_CTRL_REG1, config.reg1);
 80a2232:	782a      	ldrb	r2, [r5, #0]
 80a2234:	2120      	movs	r1, #32
 80a2236:	4620      	mov	r0, r4
 80a2238:	f7ff ffe2 	bl	80a2200 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
 80a223c:	786a      	ldrb	r2, [r5, #1]
 80a223e:	2121      	movs	r1, #33	; 0x21
 80a2240:	4620      	mov	r0, r4
 80a2242:	f7ff ffdd 	bl	80a2200 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
 80a2246:	78aa      	ldrb	r2, [r5, #2]
 80a2248:	2122      	movs	r1, #34	; 0x22
 80a224a:	4620      	mov	r0, r4
 80a224c:	f7ff ffd8 	bl	80a2200 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
 80a2250:	78ea      	ldrb	r2, [r5, #3]
 80a2252:	2123      	movs	r1, #35	; 0x23
 80a2254:	4620      	mov	r0, r4
 80a2256:	f7ff ffd3 	bl	80a2200 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
 80a225a:	792a      	ldrb	r2, [r5, #4]
 80a225c:	2124      	movs	r1, #36	; 0x24
 80a225e:	4620      	mov	r0, r4
 80a2260:	f7ff ffce 	bl	80a2200 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
 80a2264:	796a      	ldrb	r2, [r5, #5]
 80a2266:	2125      	movs	r1, #37	; 0x25
 80a2268:	4620      	mov	r0, r4
 80a226a:	f7ff ffc9 	bl	80a2200 <_ZN6LIS3DH14writeRegister8Ehh>

	if (config.setReference) {
 80a226e:	79ab      	ldrb	r3, [r5, #6]
 80a2270:	b11b      	cbz	r3, 80a227a <_ZN6LIS3DH5setupER12LIS3DHConfig+0x62>
		// In normal mode, reading the reference register sets it for the current normal force
		// (the normal force of gravity acting on the device)
		readRegister8(REG_REFERENCE);
 80a2272:	2126      	movs	r1, #38	; 0x26
 80a2274:	4620      	mov	r0, r4
 80a2276:	f7ff ff7b 	bl	80a2170 <_ZN6LIS3DH13readRegister8Eh>
	}
	// Set FIFO mode
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
 80a227a:	7aaa      	ldrb	r2, [r5, #10]
 80a227c:	212e      	movs	r1, #46	; 0x2e
 80a227e:	4620      	mov	r0, r4
 80a2280:	f7ff ffbe 	bl	80a2200 <_ZN6LIS3DH14writeRegister8Ehh>



	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
 80a2284:	78ab      	ldrb	r3, [r5, #2]
 80a2286:	065b      	lsls	r3, r3, #25
 80a2288:	d51d      	bpl.n	80a22c6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>

		writeRegister8(REG_INT1_THS, config.int1_ths);
 80a228a:	79ea      	ldrb	r2, [r5, #7]
 80a228c:	2132      	movs	r1, #50	; 0x32
 80a228e:	4620      	mov	r0, r4
 80a2290:	f7ff ffb6 	bl	80a2200 <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
 80a2294:	7a2a      	ldrb	r2, [r5, #8]
 80a2296:	2133      	movs	r1, #51	; 0x33
 80a2298:	4620      	mov	r0, r4
 80a229a:	f7ff ffb1 	bl	80a2200 <_ZN6LIS3DH14writeRegister8Ehh>

		if (intPin >= 0) {
 80a229e:	6863      	ldr	r3, [r4, #4]
 80a22a0:	2b00      	cmp	r3, #0
 80a22a2:	db0a      	blt.n	80a22ba <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa2>
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a22a4:	7a6a      	ldrb	r2, [r5, #9]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a22a6:	4620      	mov	r0, r4
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a22a8:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a22aa:	2130      	movs	r1, #48	; 0x30
 80a22ac:	f7ff ffa8 	bl	80a2200 <_ZN6LIS3DH14writeRegister8Ehh>

			// Clear the interrupt just in case
			readRegister8(REG_INT1_SRC);
 80a22b0:	2131      	movs	r1, #49	; 0x31
 80a22b2:	4620      	mov	r0, r4
 80a22b4:	f7ff ff5c 	bl	80a2170 <_ZN6LIS3DH13readRegister8Eh>
 80a22b8:	e005      	b.n	80a22c6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
		}
		else {
			int1_cfg = 0;
 80a22ba:	2200      	movs	r2, #0
 80a22bc:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
 80a22be:	2130      	movs	r1, #48	; 0x30
 80a22c0:	4620      	mov	r0, r4
 80a22c2:	f7ff ff9d 	bl	80a2200 <_ZN6LIS3DH14writeRegister8Ehh>




	return true;
}
 80a22c6:	4630      	mov	r0, r6
 80a22c8:	bd70      	pop	{r4, r5, r6, pc}
 80a22ca:	bf00      	nop
 80a22cc:	080a56d8 	.word	0x080a56d8

080a22d0 <_ZN9LIS3DHI2CC1ER7TwoWirehi>:

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a22d0:	b510      	push	{r4, lr}

	return *this;
}


LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
 80a22d2:	6043      	str	r3, [r0, #4]

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a22d4:	4b02      	ldr	r3, [pc, #8]	; (80a22e0 <_ZN9LIS3DHI2CC1ER7TwoWirehi+0x10>)
 80a22d6:	60c1      	str	r1, [r0, #12]
 80a22d8:	6003      	str	r3, [r0, #0]
 80a22da:	7402      	strb	r2, [r0, #16]

}
 80a22dc:	bd10      	pop	{r4, pc}
 80a22de:	bf00      	nop
 80a22e0:	080a56c8 	.word	0x080a56c8

080a22e4 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:
 80a22e4:	f000 bf10 	b.w	80a3108 <HAL_Pin_Map>

080a22e8 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>:
#include "FuzzyRule.h"

FuzzyRule::FuzzyRule(){
}

FuzzyRule::FuzzyRule(int index, FuzzyRuleAntecedent* fuzzyRuleAntecedent, FuzzyRuleConsequent* fuzzyRuleConsequent){
 80a22e8:	b510      	push	{r4, lr}
    this->index = index;
    this->fuzzyRuleAntecedent = fuzzyRuleAntecedent;
    this->fuzzyRuleConsequent = fuzzyRuleConsequent;
 80a22ea:	60c3      	str	r3, [r0, #12]
    this->fired = false;
 80a22ec:	2300      	movs	r3, #0

FuzzyRule::FuzzyRule(){
}

FuzzyRule::FuzzyRule(int index, FuzzyRuleAntecedent* fuzzyRuleAntecedent, FuzzyRuleConsequent* fuzzyRuleConsequent){
    this->index = index;
 80a22ee:	6001      	str	r1, [r0, #0]
    this->fuzzyRuleAntecedent = fuzzyRuleAntecedent;
 80a22f0:	6082      	str	r2, [r0, #8]
    this->fuzzyRuleConsequent = fuzzyRuleConsequent;
    this->fired = false;
 80a22f2:	7103      	strb	r3, [r0, #4]
}
 80a22f4:	bd10      	pop	{r4, pc}

080a22f6 <_ZN9FuzzyRule18evaluateExpressionEv>:

int FuzzyRule::getIndex(){
    return this->index;
}

bool FuzzyRule::evaluateExpression(){
 80a22f6:	b538      	push	{r3, r4, r5, lr}
 80a22f8:	4604      	mov	r4, r0
    if (this->fuzzyRuleAntecedent != NULL){
 80a22fa:	6880      	ldr	r0, [r0, #8]
 80a22fc:	b170      	cbz	r0, 80a231c <_ZN9FuzzyRule18evaluateExpressionEv+0x26>
        float powerOfAntecedent = this->fuzzyRuleAntecedent->evaluate();
 80a22fe:	f000 fe2b 	bl	80a2f58 <_ZN19FuzzyRuleAntecedent8evaluateEv>

        (powerOfAntecedent > 0.0) ?    (this->fired = true) : (this->fired = false);
 80a2302:	2100      	movs	r1, #0
    return this->index;
}

bool FuzzyRule::evaluateExpression(){
    if (this->fuzzyRuleAntecedent != NULL){
        float powerOfAntecedent = this->fuzzyRuleAntecedent->evaluate();
 80a2304:	4605      	mov	r5, r0

        (powerOfAntecedent > 0.0) ?    (this->fired = true) : (this->fired = false);
 80a2306:	f003 f937 	bl	80a5578 <__aeabi_fcmpgt>
 80a230a:	b110      	cbz	r0, 80a2312 <_ZN9FuzzyRule18evaluateExpressionEv+0x1c>
 80a230c:	2301      	movs	r3, #1
 80a230e:	7123      	strb	r3, [r4, #4]
 80a2310:	e000      	b.n	80a2314 <_ZN9FuzzyRule18evaluateExpressionEv+0x1e>
 80a2312:	7120      	strb	r0, [r4, #4]
        
        this->fuzzyRuleConsequent->evaluate(powerOfAntecedent);
 80a2314:	4629      	mov	r1, r5
 80a2316:	68e0      	ldr	r0, [r4, #12]
 80a2318:	f000 fd59 	bl	80a2dce <_ZN19FuzzyRuleConsequent8evaluateEf>
    }
    return this->fired;
}
 80a231c:	7920      	ldrb	r0, [r4, #4]
 80a231e:	bd38      	pop	{r3, r4, r5, pc}

080a2320 <_ZN16FuzzyCompositionC1Ev>:
#include "FuzzyComposition.h"
#include <math.h>

// CONSTRUTORES
FuzzyComposition::FuzzyComposition(){
    this->pointsCursor     = NULL;
 80a2320:	2200      	movs	r2, #0
 80a2322:	6002      	str	r2, [r0, #0]
    this->points         = NULL;
 80a2324:	6042      	str	r2, [r0, #4]
}
 80a2326:	4770      	bx	lr

080a2328 <_ZN16FuzzyComposition8addPointEff>:
// DESTRUTOR
FuzzyComposition::~FuzzyComposition(){
    this->cleanPoints(this->points);
}

bool FuzzyComposition::addPoint(float point, float pertinence){
 80a2328:	b570      	push	{r4, r5, r6, lr}
 80a232a:	4604      	mov	r4, r0
    pointsArray* aux;
    // Alocando espaço na memória
    if((aux = (pointsArray* ) malloc(sizeof(pointsArray))) == NULL){
 80a232c:	2010      	movs	r0, #16
// DESTRUTOR
FuzzyComposition::~FuzzyComposition(){
    this->cleanPoints(this->points);
}

bool FuzzyComposition::addPoint(float point, float pertinence){
 80a232e:	460e      	mov	r6, r1
 80a2330:	4615      	mov	r5, r2
    pointsArray* aux;
    // Alocando espaço na memória
    if((aux = (pointsArray* ) malloc(sizeof(pointsArray))) == NULL){
 80a2332:	f001 f893 	bl	80a345c <malloc>
 80a2336:	2300      	movs	r3, #0
 80a2338:	b170      	cbz	r0, 80a2358 <_ZN16FuzzyComposition8addPointEff+0x30>
        return false;
    }
    aux->previous = NULL;
 80a233a:	6003      	str	r3, [r0, #0]
    aux->point = point;
 80a233c:	6046      	str	r6, [r0, #4]
    aux->pertinence = pertinence;
 80a233e:	6085      	str	r5, [r0, #8]
    aux->next = NULL;
 80a2340:	60c3      	str	r3, [r0, #12]

    if(this->points == NULL){
 80a2342:	6863      	ldr	r3, [r4, #4]
 80a2344:	b913      	cbnz	r3, 80a234c <_ZN16FuzzyComposition8addPointEff+0x24>
        this->points = aux;
 80a2346:	6060      	str	r0, [r4, #4]
        this->pointsCursor  = aux;
 80a2348:	6020      	str	r0, [r4, #0]
 80a234a:	e004      	b.n	80a2356 <_ZN16FuzzyComposition8addPointEff+0x2e>
    }else{
        aux->previous = this->pointsCursor;
 80a234c:	6823      	ldr	r3, [r4, #0]
 80a234e:	6003      	str	r3, [r0, #0]
        this->pointsCursor = aux;
 80a2350:	6020      	str	r0, [r4, #0]
        aux->previous->next = this->pointsCursor;
 80a2352:	6803      	ldr	r3, [r0, #0]
 80a2354:	60d8      	str	r0, [r3, #12]
    }
    return true;
 80a2356:	2001      	movs	r0, #1
}
 80a2358:	bd70      	pop	{r4, r5, r6, pc}

080a235a <_ZN16FuzzyComposition10checkPointEff>:

bool FuzzyComposition::checkPoint(float point, float pertinence){
 80a235a:	b570      	push	{r4, r5, r6, lr}
 80a235c:	460d      	mov	r5, r1
 80a235e:	4616      	mov	r6, r2
    pointsArray* aux;
    aux = this->pointsCursor;
 80a2360:	6804      	ldr	r4, [r0, #0]
    while(aux != NULL){
 80a2362:	b15c      	cbz	r4, 80a237c <_ZN16FuzzyComposition10checkPointEff+0x22>
        if(aux->point == point && aux->pertinence == pertinence){
 80a2364:	4629      	mov	r1, r5
 80a2366:	6860      	ldr	r0, [r4, #4]
 80a2368:	f003 f8de 	bl	80a5528 <__aeabi_fcmpeq>
 80a236c:	b120      	cbz	r0, 80a2378 <_ZN16FuzzyComposition10checkPointEff+0x1e>
 80a236e:	4631      	mov	r1, r6
 80a2370:	68a0      	ldr	r0, [r4, #8]
 80a2372:	f003 f8d9 	bl	80a5528 <__aeabi_fcmpeq>
 80a2376:	b918      	cbnz	r0, 80a2380 <_ZN16FuzzyComposition10checkPointEff+0x26>
            return true;
        }
        aux = aux->previous;
 80a2378:	6824      	ldr	r4, [r4, #0]
}

bool FuzzyComposition::checkPoint(float point, float pertinence){
    pointsArray* aux;
    aux = this->pointsCursor;
    while(aux != NULL){
 80a237a:	e7f2      	b.n	80a2362 <_ZN16FuzzyComposition10checkPointEff+0x8>
        if(aux->point == point && aux->pertinence == pertinence){
            return true;
        }
        aux = aux->previous;
    }
    return false;
 80a237c:	4620      	mov	r0, r4
 80a237e:	bd70      	pop	{r4, r5, r6, pc}
bool FuzzyComposition::checkPoint(float point, float pertinence){
    pointsArray* aux;
    aux = this->pointsCursor;
    while(aux != NULL){
        if(aux->point == point && aux->pertinence == pertinence){
            return true;
 80a2380:	2001      	movs	r0, #1
        }
        aux = aux->previous;
    }
    return false;
}
 80a2382:	bd70      	pop	{r4, r5, r6, pc}

080a2384 <_ZN16FuzzyComposition8avaliateEv>:
        aux = aux->next;
    }
    return true;
}

float FuzzyComposition::avaliate(){
 80a2384:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pointsArray* aux;
    float numerator     = 0.0;
    float denominator   = 0.0;
 80a2388:	2700      	movs	r7, #0
    return true;
}

float FuzzyComposition::avaliate(){
    pointsArray* aux;
    float numerator     = 0.0;
 80a238a:	46ba      	mov	sl, r7
    float denominator   = 0.0;

    aux = this->points;
 80a238c:	6845      	ldr	r5, [r0, #4]
    while(aux != NULL){
 80a238e:	2d00      	cmp	r5, #0
 80a2390:	f000 80b1 	beq.w	80a24f6 <_ZN16FuzzyComposition8avaliateEv+0x172>
        if(aux->next != NULL){
 80a2394:	68ee      	ldr	r6, [r5, #12]
 80a2396:	b90e      	cbnz	r6, 80a239c <_ZN16FuzzyComposition8avaliateEv+0x18>
        aux = aux->next;
    }
    return true;
}

float FuzzyComposition::avaliate(){
 80a2398:	4635      	mov	r5, r6
 80a239a:	e7f8      	b.n	80a238e <_ZN16FuzzyComposition8avaliateEv+0xa>
    aux = this->points;
    while(aux != NULL){
        if(aux->next != NULL){
            float area = 0.0;
            float middle = 0.0;
            if(aux->point == aux->next->point){
 80a239c:	686c      	ldr	r4, [r5, #4]
 80a239e:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80a23a2:	4620      	mov	r0, r4
 80a23a4:	4641      	mov	r1, r8
 80a23a6:	f003 f8bf 	bl	80a5528 <__aeabi_fcmpeq>
 80a23aa:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80a23ae:	b108      	cbz	r0, 80a23b4 <_ZN16FuzzyComposition8avaliateEv+0x30>
                // Se Singleton
                area     = aux->pertinence;
 80a23b0:	465d      	mov	r5, fp
 80a23b2:	e091      	b.n	80a24d8 <_ZN16FuzzyComposition8avaliateEv+0x154>
                middle   = aux->point;
            }else if(aux->pertinence == 0.0 || aux->next->pertinence == 0.0){
 80a23b4:	2100      	movs	r1, #0
 80a23b6:	4658      	mov	r0, fp
 80a23b8:	f003 f8b6 	bl	80a5528 <__aeabi_fcmpeq>
 80a23bc:	b930      	cbnz	r0, 80a23cc <_ZN16FuzzyComposition8avaliateEv+0x48>
 80a23be:	68b5      	ldr	r5, [r6, #8]
 80a23c0:	2100      	movs	r1, #0
 80a23c2:	4628      	mov	r0, r5
 80a23c4:	f003 f8b0 	bl	80a5528 <__aeabi_fcmpeq>
 80a23c8:	2800      	cmp	r0, #0
 80a23ca:	d036      	beq.n	80a243a <_ZN16FuzzyComposition8avaliateEv+0xb6>
                // Se triangulo
                float pertinence;
                if(aux->pertinence > 0.0){
 80a23cc:	2100      	movs	r1, #0
 80a23ce:	4658      	mov	r0, fp
 80a23d0:	f003 f8d2 	bl	80a5578 <__aeabi_fcmpgt>
 80a23d4:	b908      	cbnz	r0, 80a23da <_ZN16FuzzyComposition8avaliateEv+0x56>
                    pertinence = aux->pertinence;
                }else{
                    pertinence = aux->next->pertinence;
 80a23d6:	68b5      	ldr	r5, [r6, #8]
 80a23d8:	e000      	b.n	80a23dc <_ZN16FuzzyComposition8avaliateEv+0x58>
                middle   = aux->point;
            }else if(aux->pertinence == 0.0 || aux->next->pertinence == 0.0){
                // Se triangulo
                float pertinence;
                if(aux->pertinence > 0.0){
                    pertinence = aux->pertinence;
 80a23da:	465d      	mov	r5, fp
                }else{
                    pertinence = aux->next->pertinence;
                }
                area = ((aux->next->point - aux->point) * pertinence) / 2.0;
 80a23dc:	4621      	mov	r1, r4
 80a23de:	4640      	mov	r0, r8
 80a23e0:	f002 fe04 	bl	80a4fec <__aeabi_fsub>
 80a23e4:	4601      	mov	r1, r0
 80a23e6:	4680      	mov	r8, r0
 80a23e8:	4628      	mov	r0, r5
 80a23ea:	f002 ff09 	bl	80a5200 <__aeabi_fmul>
 80a23ee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a23f2:	f002 ff05 	bl	80a5200 <__aeabi_fmul>
                if(aux->pertinence < aux->next->pertinence){
 80a23f6:	68b1      	ldr	r1, [r6, #8]
                if(aux->pertinence > 0.0){
                    pertinence = aux->pertinence;
                }else{
                    pertinence = aux->next->pertinence;
                }
                area = ((aux->next->point - aux->point) * pertinence) / 2.0;
 80a23f8:	4605      	mov	r5, r0
                if(aux->pertinence < aux->next->pertinence){
 80a23fa:	4658      	mov	r0, fp
 80a23fc:	f003 f89e 	bl	80a553c <__aeabi_fcmplt>
 80a2400:	b128      	cbz	r0, 80a240e <_ZN16FuzzyComposition8avaliateEv+0x8a>
                    middle = ((aux->next->point - aux->point) / 1.5) + aux->point;
 80a2402:	4640      	mov	r0, r8
 80a2404:	f002 fab0 	bl	80a4968 <__aeabi_f2d>
 80a2408:	2200      	movs	r2, #0
 80a240a:	4b42      	ldr	r3, [pc, #264]	; (80a2514 <_ZN16FuzzyComposition8avaliateEv+0x190>)
 80a240c:	e004      	b.n	80a2418 <_ZN16FuzzyComposition8avaliateEv+0x94>
                }else{
                    middle = ((aux->next->point - aux->point) / 3.0) + aux->point;
 80a240e:	4640      	mov	r0, r8
 80a2410:	f002 faaa 	bl	80a4968 <__aeabi_f2d>
 80a2414:	4b40      	ldr	r3, [pc, #256]	; (80a2518 <_ZN16FuzzyComposition8avaliateEv+0x194>)
 80a2416:	2200      	movs	r2, #0
 80a2418:	f002 fc24 	bl	80a4c64 <__aeabi_ddiv>
 80a241c:	4680      	mov	r8, r0
 80a241e:	4620      	mov	r0, r4
 80a2420:	4689      	mov	r9, r1
 80a2422:	f002 faa1 	bl	80a4968 <__aeabi_f2d>
 80a2426:	4602      	mov	r2, r0
 80a2428:	460b      	mov	r3, r1
 80a242a:	4640      	mov	r0, r8
 80a242c:	4649      	mov	r1, r9
 80a242e:	f002 f93d 	bl	80a46ac <__adddf3>
 80a2432:	f002 fd87 	bl	80a4f44 <__aeabi_d2f>
 80a2436:	4604      	mov	r4, r0
 80a2438:	e04e      	b.n	80a24d8 <_ZN16FuzzyComposition8avaliateEv+0x154>
                }
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence == aux->next->pertinence)){
 80a243a:	2100      	movs	r1, #0
 80a243c:	4658      	mov	r0, fp
 80a243e:	f003 f89b 	bl	80a5578 <__aeabi_fcmpgt>
 80a2442:	2100      	movs	r1, #0
 80a2444:	b1c0      	cbz	r0, 80a2478 <_ZN16FuzzyComposition8avaliateEv+0xf4>
 80a2446:	4628      	mov	r0, r5
 80a2448:	f003 f896 	bl	80a5578 <__aeabi_fcmpgt>
 80a244c:	b1c0      	cbz	r0, 80a2480 <_ZN16FuzzyComposition8avaliateEv+0xfc>
 80a244e:	4629      	mov	r1, r5
 80a2450:	4658      	mov	r0, fp
 80a2452:	f003 f869 	bl	80a5528 <__aeabi_fcmpeq>
 80a2456:	b1e8      	cbz	r0, 80a2494 <_ZN16FuzzyComposition8avaliateEv+0x110>
                // Se quadrado
                area = (aux->next->point - aux->point) * aux->pertinence;
 80a2458:	4621      	mov	r1, r4
 80a245a:	4640      	mov	r0, r8
 80a245c:	f002 fdc6 	bl	80a4fec <__aeabi_fsub>
 80a2460:	4601      	mov	r1, r0
 80a2462:	4680      	mov	r8, r0
 80a2464:	4658      	mov	r0, fp
 80a2466:	f002 fecb 	bl	80a5200 <__aeabi_fmul>
 80a246a:	4605      	mov	r5, r0
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
 80a246c:	4640      	mov	r0, r8
 80a246e:	f002 fa7b 	bl	80a4968 <__aeabi_f2d>
 80a2472:	2200      	movs	r2, #0
 80a2474:	4b29      	ldr	r3, [pc, #164]	; (80a251c <_ZN16FuzzyComposition8avaliateEv+0x198>)
 80a2476:	e02a      	b.n	80a24ce <_ZN16FuzzyComposition8avaliateEv+0x14a>
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence != aux->next->pertinence)){
 80a2478:	4658      	mov	r0, fp
 80a247a:	f003 f87d 	bl	80a5578 <__aeabi_fcmpgt>
 80a247e:	b348      	cbz	r0, 80a24d4 <_ZN16FuzzyComposition8avaliateEv+0x150>
 80a2480:	2100      	movs	r1, #0
 80a2482:	4628      	mov	r0, r5
 80a2484:	f003 f878 	bl	80a5578 <__aeabi_fcmpgt>
 80a2488:	b320      	cbz	r0, 80a24d4 <_ZN16FuzzyComposition8avaliateEv+0x150>
 80a248a:	4629      	mov	r1, r5
 80a248c:	4658      	mov	r0, fp
 80a248e:	f003 f84b 	bl	80a5528 <__aeabi_fcmpeq>
 80a2492:	b9f8      	cbnz	r0, 80a24d4 <_ZN16FuzzyComposition8avaliateEv+0x150>
                // Se trapezio
                area = ((aux->pertinence + aux->next->pertinence) / 2.0) * (aux->next->point - aux->point);
 80a2494:	4621      	mov	r1, r4
 80a2496:	4640      	mov	r0, r8
 80a2498:	f002 fda8 	bl	80a4fec <__aeabi_fsub>
 80a249c:	f002 fa64 	bl	80a4968 <__aeabi_f2d>
 80a24a0:	4680      	mov	r8, r0
 80a24a2:	4689      	mov	r9, r1
 80a24a4:	4658      	mov	r0, fp
 80a24a6:	4629      	mov	r1, r5
 80a24a8:	f002 fda2 	bl	80a4ff0 <__addsf3>
 80a24ac:	f002 fa5c 	bl	80a4968 <__aeabi_f2d>
 80a24b0:	2200      	movs	r2, #0
 80a24b2:	4b1a      	ldr	r3, [pc, #104]	; (80a251c <_ZN16FuzzyComposition8avaliateEv+0x198>)
 80a24b4:	f002 faac 	bl	80a4a10 <__aeabi_dmul>
 80a24b8:	4642      	mov	r2, r8
 80a24ba:	464b      	mov	r3, r9
 80a24bc:	f002 faa8 	bl	80a4a10 <__aeabi_dmul>
 80a24c0:	f002 fd40 	bl	80a4f44 <__aeabi_d2f>
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
 80a24c4:	4649      	mov	r1, r9
                // Se quadrado
                area = (aux->next->point - aux->point) * aux->pertinence;
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence != aux->next->pertinence)){
                // Se trapezio
                area = ((aux->pertinence + aux->next->pertinence) / 2.0) * (aux->next->point - aux->point);
 80a24c6:	4605      	mov	r5, r0
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
 80a24c8:	4640      	mov	r0, r8
 80a24ca:	4b14      	ldr	r3, [pc, #80]	; (80a251c <_ZN16FuzzyComposition8avaliateEv+0x198>)
 80a24cc:	2200      	movs	r2, #0
 80a24ce:	f002 fa9f 	bl	80a4a10 <__aeabi_dmul>
 80a24d2:	e7a3      	b.n	80a241c <_ZN16FuzzyComposition8avaliateEv+0x98>

    aux = this->points;
    while(aux != NULL){
        if(aux->next != NULL){
            float area = 0.0;
            float middle = 0.0;
 80a24d4:	2400      	movs	r4, #0
    float denominator   = 0.0;

    aux = this->points;
    while(aux != NULL){
        if(aux->next != NULL){
            float area = 0.0;
 80a24d6:	4625      	mov	r5, r4
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence != aux->next->pertinence)){
                // Se trapezio
                area = ((aux->pertinence + aux->next->pertinence) / 2.0) * (aux->next->point - aux->point);
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
            }
            numerator += middle * area;
 80a24d8:	4621      	mov	r1, r4
 80a24da:	4628      	mov	r0, r5
 80a24dc:	f002 fe90 	bl	80a5200 <__aeabi_fmul>
 80a24e0:	4601      	mov	r1, r0
 80a24e2:	4650      	mov	r0, sl
 80a24e4:	f002 fd84 	bl	80a4ff0 <__addsf3>
            denominator += area;
 80a24e8:	4629      	mov	r1, r5
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence != aux->next->pertinence)){
                // Se trapezio
                area = ((aux->pertinence + aux->next->pertinence) / 2.0) * (aux->next->point - aux->point);
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
            }
            numerator += middle * area;
 80a24ea:	4682      	mov	sl, r0
            denominator += area;
 80a24ec:	4638      	mov	r0, r7
 80a24ee:	f002 fd7f 	bl	80a4ff0 <__addsf3>
 80a24f2:	4607      	mov	r7, r0
 80a24f4:	e750      	b.n	80a2398 <_ZN16FuzzyComposition8avaliateEv+0x14>
        }
        aux = aux->next;
    }

    if(denominator == 0.0){
 80a24f6:	2100      	movs	r1, #0
 80a24f8:	4638      	mov	r0, r7
 80a24fa:	f003 f815 	bl	80a5528 <__aeabi_fcmpeq>
 80a24fe:	b928      	cbnz	r0, 80a250c <_ZN16FuzzyComposition8avaliateEv+0x188>
        return 0.0;
    }else{
        return numerator / denominator;
 80a2500:	4639      	mov	r1, r7
 80a2502:	4650      	mov	r0, sl
 80a2504:	f002 ff30 	bl	80a5368 <__aeabi_fdiv>
 80a2508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }
        aux = aux->next;
    }

    if(denominator == 0.0){
        return 0.0;
 80a250c:	2000      	movs	r0, #0
    }else{
        return numerator / denominator;
    }
}
 80a250e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2512:	bf00      	nop
 80a2514:	3ff80000 	.word	0x3ff80000
 80a2518:	40080000 	.word	0x40080000
 80a251c:	3fe00000 	.word	0x3fe00000

080a2520 <_ZN16FuzzyComposition11cleanPointsEP11pointsArray>:
    this->pointsCursor = NULL;
    return true;
}

// MÉTODOS PRIVADOS
void FuzzyComposition::cleanPoints(pointsArray* aux){
 80a2520:	b510      	push	{r4, lr}
    if(aux != NULL){
 80a2522:	460c      	mov	r4, r1
 80a2524:	b139      	cbz	r1, 80a2536 <_ZN16FuzzyComposition11cleanPointsEP11pointsArray+0x16>
        // Esvaziando a memória alocada
        this->cleanPoints(aux->next);
 80a2526:	68c9      	ldr	r1, [r1, #12]
 80a2528:	f7ff fffa 	bl	80a2520 <_ZN16FuzzyComposition11cleanPointsEP11pointsArray>
        free(aux);
 80a252c:	4620      	mov	r0, r4
    }
}
 80a252e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// MÉTODOS PRIVADOS
void FuzzyComposition::cleanPoints(pointsArray* aux){
    if(aux != NULL){
        // Esvaziando a memória alocada
        this->cleanPoints(aux->next);
        free(aux);
 80a2532:	f000 bf9b 	b.w	80a346c <free>
 80a2536:	bd10      	pop	{r4, pc}

080a2538 <_ZN16FuzzyComposition5emptyEv>:
    }else{
        return numerator / denominator;
    }
}

bool FuzzyComposition::empty(){
 80a2538:	b510      	push	{r4, lr}
 80a253a:	4604      	mov	r4, r0
    // limpando a memória
    this->cleanPoints(this->points);
 80a253c:	6841      	ldr	r1, [r0, #4]
 80a253e:	f7ff ffef 	bl	80a2520 <_ZN16FuzzyComposition11cleanPointsEP11pointsArray>
    // resetando os ponteiros
    this->points = NULL;
 80a2542:	2300      	movs	r3, #0
 80a2544:	6063      	str	r3, [r4, #4]
    this->pointsCursor = NULL;
 80a2546:	6023      	str	r3, [r4, #0]
    return true;
}
 80a2548:	2001      	movs	r0, #1
 80a254a:	bd10      	pop	{r4, pc}

080a254c <_ZN16FuzzyComposition8rmvPointEP11pointsArray>:

        return true;
    }
}

bool FuzzyComposition::rmvPoint(pointsArray* point){
 80a254c:	b508      	push	{r3, lr}
    if(point != NULL){
 80a254e:	b111      	cbz	r1, 80a2556 <_ZN16FuzzyComposition8rmvPointEP11pointsArray+0xa>
        free(point);
 80a2550:	4608      	mov	r0, r1
 80a2552:	f000 ff8b 	bl	80a346c <free>
    }
    return true;
}
 80a2556:	2001      	movs	r0, #1
 80a2558:	bd08      	pop	{r3, pc}
 80a255a:	0000      	movs	r0, r0
 80a255c:	0000      	movs	r0, r0
	...

080a2560 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_>:
        this->cleanPoints(aux->next);
        free(aux);
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
 80a2560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2564:	461e      	mov	r6, r3
    float x1 = aSegmentBegin->point;
 80a2566:	684b      	ldr	r3, [r1, #4]
        this->cleanPoints(aux->next);
        free(aux);
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
 80a2568:	b087      	sub	sp, #28
    float x1 = aSegmentBegin->point;
 80a256a:	9301      	str	r3, [sp, #4]
    float y1 = aSegmentBegin->pertinence;
 80a256c:	688b      	ldr	r3, [r1, #8]
    float x2 = aSegmentEnd->point;
    float y2 = aSegmentEnd->pertinence;
    float x3 = bSegmentBegin->point;
    float y3 = bSegmentBegin->pertinence;
 80a256e:	f8d6 9008 	ldr.w	r9, [r6, #8]
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
    float x1 = aSegmentBegin->point;
    float y1 = aSegmentBegin->pertinence;
 80a2572:	9302      	str	r3, [sp, #8]
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2574:	9b10      	ldr	r3, [sp, #64]	; 0x40
        this->cleanPoints(aux->next);
        free(aux);
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
 80a2576:	9005      	str	r0, [sp, #20]
 80a2578:	460c      	mov	r4, r1
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a257a:	6898      	ldr	r0, [r3, #8]
 80a257c:	4649      	mov	r1, r9
        this->cleanPoints(aux->next);
        free(aux);
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
 80a257e:	4617      	mov	r7, r2
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2580:	f002 fd34 	bl	80a4fec <__aeabi_fsub>
 80a2584:	9901      	ldr	r1, [sp, #4]
 80a2586:	4682      	mov	sl, r0
 80a2588:	6878      	ldr	r0, [r7, #4]
 80a258a:	f002 fd2f 	bl	80a4fec <__aeabi_fsub>
bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
    float x1 = aSegmentBegin->point;
    float y1 = aSegmentBegin->pertinence;
    float x2 = aSegmentEnd->point;
    float y2 = aSegmentEnd->pertinence;
    float x3 = bSegmentBegin->point;
 80a258e:	f8d6 8004 	ldr.w	r8, [r6, #4]
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2592:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a2594:	4641      	mov	r1, r8
 80a2596:	9003      	str	r0, [sp, #12]
 80a2598:	6858      	ldr	r0, [r3, #4]
 80a259a:	f002 fd27 	bl	80a4fec <__aeabi_fsub>
 80a259e:	9902      	ldr	r1, [sp, #8]
 80a25a0:	4683      	mov	fp, r0
 80a25a2:	68b8      	ldr	r0, [r7, #8]
 80a25a4:	f002 fd22 	bl	80a4fec <__aeabi_fsub>
 80a25a8:	9903      	ldr	r1, [sp, #12]
 80a25aa:	9004      	str	r0, [sp, #16]
 80a25ac:	4650      	mov	r0, sl
 80a25ae:	f002 fe27 	bl	80a5200 <__aeabi_fmul>
 80a25b2:	9904      	ldr	r1, [sp, #16]
 80a25b4:	4605      	mov	r5, r0
 80a25b6:	4658      	mov	r0, fp
 80a25b8:	f002 fe22 	bl	80a5200 <__aeabi_fmul>
 80a25bc:	4601      	mov	r1, r0
 80a25be:	4628      	mov	r0, r5
 80a25c0:	f002 fd14 	bl	80a4fec <__aeabi_fsub>
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a25c4:	4649      	mov	r1, r9
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a25c6:	4605      	mov	r5, r0
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a25c8:	9802      	ldr	r0, [sp, #8]
 80a25ca:	f002 fd0f 	bl	80a4fec <__aeabi_fsub>
 80a25ce:	4641      	mov	r1, r8
 80a25d0:	4681      	mov	r9, r0
 80a25d2:	9801      	ldr	r0, [sp, #4]
 80a25d4:	f002 fd0a 	bl	80a4fec <__aeabi_fsub>
 80a25d8:	4649      	mov	r1, r9
 80a25da:	4680      	mov	r8, r0
 80a25dc:	4658      	mov	r0, fp
 80a25de:	f002 fe0f 	bl	80a5200 <__aeabi_fmul>
 80a25e2:	4641      	mov	r1, r8
 80a25e4:	4683      	mov	fp, r0
 80a25e6:	4650      	mov	r0, sl
 80a25e8:	f002 fe0a 	bl	80a5200 <__aeabi_fmul>
 80a25ec:	4601      	mov	r1, r0
 80a25ee:	4658      	mov	r0, fp
 80a25f0:	f002 fcfc 	bl	80a4fec <__aeabi_fsub>
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a25f4:	4649      	mov	r1, r9
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a25f6:	4682      	mov	sl, r0
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a25f8:	9803      	ldr	r0, [sp, #12]
 80a25fa:	f002 fe01 	bl	80a5200 <__aeabi_fmul>
 80a25fe:	4641      	mov	r1, r8
 80a2600:	4681      	mov	r9, r0
 80a2602:	9804      	ldr	r0, [sp, #16]
 80a2604:	f002 fdfc 	bl	80a5200 <__aeabi_fmul>
 80a2608:	4601      	mov	r1, r0
 80a260a:	4648      	mov	r0, r9
 80a260c:	f002 fcee 	bl	80a4fec <__aeabi_fsub>

    if(denom < 0.0){
 80a2610:	2100      	movs	r1, #0
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a2612:	4680      	mov	r8, r0

    if(denom < 0.0){
 80a2614:	4628      	mov	r0, r5
 80a2616:	f002 ff91 	bl	80a553c <__aeabi_fcmplt>
 80a261a:	b108      	cbz	r0, 80a2620 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xc0>
        denom *= -1.0;
 80a261c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    }
    if(numera < 0.0){
 80a2620:	2100      	movs	r1, #0
 80a2622:	4650      	mov	r0, sl
 80a2624:	f002 ff8a 	bl	80a553c <__aeabi_fcmplt>
 80a2628:	b108      	cbz	r0, 80a262e <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xce>
        numera *= -1.0;
 80a262a:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
    }
    if(numerb < 0.0){
 80a262e:	2100      	movs	r1, #0
 80a2630:	4640      	mov	r0, r8
 80a2632:	f002 ff83 	bl	80a553c <__aeabi_fcmplt>
 80a2636:	b108      	cbz	r0, 80a263c <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xdc>
        numerb *= -1.0;
 80a2638:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
    }

    // Se os seguimentos forem paralelos, retornar falso
    if(denom < EPS){
 80a263c:	4628      	mov	r0, r5
 80a263e:	f002 f993 	bl	80a4968 <__aeabi_f2d>
 80a2642:	a331      	add	r3, pc, #196	; (adr r3, 80a2708 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x1a8>)
 80a2644:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2648:	f002 fc54 	bl	80a4ef4 <__aeabi_dcmplt>
 80a264c:	b108      	cbz	r0, 80a2652 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xf2>
        return false;
 80a264e:	2000      	movs	r0, #0
 80a2650:	e057      	b.n	80a2702 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x1a2>
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
 80a2652:	4629      	mov	r1, r5
 80a2654:	4650      	mov	r0, sl
 80a2656:	f002 fe87 	bl	80a5368 <__aeabi_fdiv>
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a265a:	2100      	movs	r1, #0
    if(denom < EPS){
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
 80a265c:	4681      	mov	r9, r0
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a265e:	f002 ff6d 	bl	80a553c <__aeabi_fcmplt>
 80a2662:	2800      	cmp	r0, #0
 80a2664:	d1f3      	bne.n	80a264e <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
 80a2666:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a266a:	4648      	mov	r0, r9
 80a266c:	f002 ff84 	bl	80a5578 <__aeabi_fcmpgt>
 80a2670:	2800      	cmp	r0, #0
 80a2672:	d1ec      	bne.n	80a264e <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
    mub = numerb / denom;
 80a2674:	4629      	mov	r1, r5
 80a2676:	4640      	mov	r0, r8
 80a2678:	f002 fe76 	bl	80a5368 <__aeabi_fdiv>
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a267c:	2100      	movs	r1, #0
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
    mub = numerb / denom;
 80a267e:	4605      	mov	r5, r0
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a2680:	f002 ff5c 	bl	80a553c <__aeabi_fcmplt>
 80a2684:	2800      	cmp	r0, #0
 80a2686:	d1e2      	bne.n	80a264e <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
 80a2688:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a268c:	4628      	mov	r0, r5
 80a268e:	f002 ff73 	bl	80a5578 <__aeabi_fcmpgt>
 80a2692:	2800      	cmp	r0, #0
 80a2694:	d1db      	bne.n	80a264e <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
        return false;
    }else{
        // Calculando o ponto e a pertinencia do novo elemento
        point         = x1 + mua * (x2 - x1);
 80a2696:	4649      	mov	r1, r9
 80a2698:	9803      	ldr	r0, [sp, #12]
 80a269a:	f002 fdb1 	bl	80a5200 <__aeabi_fmul>
 80a269e:	9901      	ldr	r1, [sp, #4]
 80a26a0:	f002 fca6 	bl	80a4ff0 <__addsf3>
        pertinence     = y1 + mua * (y2 - y1);
 80a26a4:	4649      	mov	r1, r9
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
        return false;
    }else{
        // Calculando o ponto e a pertinencia do novo elemento
        point         = x1 + mua * (x2 - x1);
 80a26a6:	4605      	mov	r5, r0
        pertinence     = y1 + mua * (y2 - y1);
 80a26a8:	9804      	ldr	r0, [sp, #16]
 80a26aa:	f002 fda9 	bl	80a5200 <__aeabi_fmul>
 80a26ae:	9902      	ldr	r1, [sp, #8]
 80a26b0:	f002 fc9e 	bl	80a4ff0 <__addsf3>
 80a26b4:	4680      	mov	r8, r0

        // Adicionando um novo ponto
        pointsArray* aux;
        // Alocando espaço na memória
        if((aux = (pointsArray *) malloc(sizeof(pointsArray))) == NULL){
 80a26b6:	2010      	movs	r0, #16
 80a26b8:	f000 fed0 	bl	80a345c <malloc>
 80a26bc:	2800      	cmp	r0, #0
 80a26be:	d0c6      	beq.n	80a264e <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
            return false;
        }

        aux->previous = bSegmentEnd;
 80a26c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
        aux->point = point;
 80a26c2:	6045      	str	r5, [r0, #4]
        // Alocando espaço na memória
        if((aux = (pointsArray *) malloc(sizeof(pointsArray))) == NULL){
            return false;
        }

        aux->previous = bSegmentEnd;
 80a26c4:	6003      	str	r3, [r0, #0]
        aux->point = point;
        aux->pertinence = pertinence;
 80a26c6:	f8c0 8008 	str.w	r8, [r0, #8]
        aux->next = aSegmentEnd;
 80a26ca:	60c7      	str	r7, [r0, #12]

        bSegmentEnd->next = aux;
 80a26cc:	60d8      	str	r0, [r3, #12]
        aSegmentEnd->previous = aux;
 80a26ce:	6038      	str	r0, [r7, #0]

        float stopPoint = bSegmentBegin->point;
 80a26d0:	6877      	ldr	r7, [r6, #4]
        float stopPertinence = bSegmentBegin->pertinence;
 80a26d2:	68b6      	ldr	r6, [r6, #8]

        pointsArray* temp = aSegmentBegin;
        pointsArray* excl;

        do{
            float pointToCompare = temp->point;
 80a26d4:	f8d4 9004 	ldr.w	r9, [r4, #4]
            float pertinenceToCompare = temp->pertinence;

            excl = temp->previous;

            this->rmvPoint(temp);
 80a26d8:	4621      	mov	r1, r4
 80a26da:	9805      	ldr	r0, [sp, #20]
        pointsArray* temp = aSegmentBegin;
        pointsArray* excl;

        do{
            float pointToCompare = temp->point;
            float pertinenceToCompare = temp->pertinence;
 80a26dc:	f8d4 8008 	ldr.w	r8, [r4, #8]

            excl = temp->previous;
 80a26e0:	6825      	ldr	r5, [r4, #0]

            this->rmvPoint(temp);
 80a26e2:	f7ff ff33 	bl	80a254c <_ZN16FuzzyComposition8rmvPointEP11pointsArray>

            temp = excl;

            if(stopPoint == pointToCompare && stopPertinence == pertinenceToCompare){
 80a26e6:	4649      	mov	r1, r9
 80a26e8:	4638      	mov	r0, r7
 80a26ea:	f002 ff1d 	bl	80a5528 <__aeabi_fcmpeq>
 80a26ee:	b120      	cbz	r0, 80a26fa <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x19a>
 80a26f0:	4641      	mov	r1, r8
 80a26f2:	4630      	mov	r0, r6
 80a26f4:	f002 ff18 	bl	80a5528 <__aeabi_fcmpeq>
 80a26f8:	b910      	cbnz	r0, 80a2700 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x1a0>
 80a26fa:	462c      	mov	r4, r5
                break;
            }
        }while(temp != NULL);
 80a26fc:	2d00      	cmp	r5, #0
 80a26fe:	d1e9      	bne.n	80a26d4 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x174>

        return true;
 80a2700:	2001      	movs	r0, #1
    }
}
 80a2702:	b007      	add	sp, #28
 80a2704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2708:	d2f1a9fc 	.word	0xd2f1a9fc
 80a270c:	3f50624d 	.word	0x3f50624d

080a2710 <_ZN16FuzzyComposition5buildEv>:
        aux = aux->previous;
    }
    return false;
}

bool FuzzyComposition::build(){
 80a2710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a2712:	4606      	mov	r6, r0
    pointsArray* aux;

    aux = this->points;
 80a2714:	6845      	ldr	r5, [r0, #4]
    while(aux != NULL){
 80a2716:	b1dd      	cbz	r5, 80a2750 <_ZN16FuzzyComposition5buildEv+0x40>
 80a2718:	462c      	mov	r4, r5
        pointsArray* temp = aux;
        while(temp->previous != NULL){
 80a271a:	6827      	ldr	r7, [r4, #0]
 80a271c:	b1b7      	cbz	r7, 80a274c <_ZN16FuzzyComposition5buildEv+0x3c>
            if(temp->point < temp->previous->point){
 80a271e:	6879      	ldr	r1, [r7, #4]
 80a2720:	6860      	ldr	r0, [r4, #4]
 80a2722:	f002 ff0b 	bl	80a553c <__aeabi_fcmplt>
 80a2726:	b908      	cbnz	r0, 80a272c <_ZN16FuzzyComposition5buildEv+0x1c>
 80a2728:	463c      	mov	r4, r7
 80a272a:	e7f6      	b.n	80a271a <_ZN16FuzzyComposition5buildEv+0xa>
 80a272c:	4627      	mov	r7, r4
            temp = temp->previous;
        }
        pointsArray* zPoint;
        if(temp != NULL){
            zPoint = temp;
            while(temp->previous != NULL){
 80a272e:	683b      	ldr	r3, [r7, #0]
 80a2730:	b163      	cbz	r3, 80a274c <_ZN16FuzzyComposition5buildEv+0x3c>
                bool result = false;
                if(temp->previous->previous != NULL){
 80a2732:	681a      	ldr	r2, [r3, #0]
 80a2734:	b142      	cbz	r2, 80a2748 <_ZN16FuzzyComposition5buildEv+0x38>
                    result = rebuild(zPoint, zPoint->next, temp->previous, temp->previous->previous);
 80a2736:	9200      	str	r2, [sp, #0]
 80a2738:	68e2      	ldr	r2, [r4, #12]
 80a273a:	4621      	mov	r1, r4
 80a273c:	4630      	mov	r0, r6
 80a273e:	f7ff ff0f 	bl	80a2560 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_>
                }
                if(result == true){
 80a2742:	b108      	cbz	r0, 80a2748 <_ZN16FuzzyComposition5buildEv+0x38>
                    aux = this->points;
 80a2744:	6875      	ldr	r5, [r6, #4]
                    break;
 80a2746:	e001      	b.n	80a274c <_ZN16FuzzyComposition5buildEv+0x3c>
                }
                temp = temp->previous;
 80a2748:	683f      	ldr	r7, [r7, #0]
            temp = temp->previous;
        }
        pointsArray* zPoint;
        if(temp != NULL){
            zPoint = temp;
            while(temp->previous != NULL){
 80a274a:	e7f0      	b.n	80a272e <_ZN16FuzzyComposition5buildEv+0x1e>
                    break;
                }
                temp = temp->previous;
            }
        }
        aux = aux->next;
 80a274c:	68ed      	ldr	r5, [r5, #12]

bool FuzzyComposition::build(){
    pointsArray* aux;

    aux = this->points;
    while(aux != NULL){
 80a274e:	e7e2      	b.n	80a2716 <_ZN16FuzzyComposition5buildEv+0x6>
            }
        }
        aux = aux->next;
    }
    return true;
}
 80a2750:	2001      	movs	r0, #1
 80a2752:	b003      	add	sp, #12
 80a2754:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2756 <_ZN10FuzzyInputC1Ei>:

// CONSTRUTORES
FuzzyInput::FuzzyInput() : FuzzyIO(){
}

FuzzyInput::FuzzyInput(int index) : FuzzyIO(index){
 80a2756:	b510      	push	{r4, lr}
 80a2758:	4604      	mov	r4, r0
 80a275a:	f000 f80f 	bl	80a277c <_ZN7FuzzyIOC1Ei>
}
 80a275e:	4620      	mov	r0, r4
 80a2760:	bd10      	pop	{r4, pc}

080a2762 <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv>:
// DESTRUTOR
FuzzyInput::~FuzzyInput(){
}

// MÉTODOS PÚBLICOS
bool FuzzyInput::calculateFuzzySetPertinences(){
 80a2762:	b538      	push	{r3, r4, r5, lr}
 80a2764:	4605      	mov	r5, r0
    fuzzySetArray *aux;
    aux = this->fuzzySets;
 80a2766:	6884      	ldr	r4, [r0, #8]

    while(aux != NULL){
 80a2768:	b134      	cbz	r4, 80a2778 <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv+0x16>
        if (aux->fuzzySet != NULL){
 80a276a:	6820      	ldr	r0, [r4, #0]
 80a276c:	b110      	cbz	r0, 80a2774 <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv+0x12>
            aux->fuzzySet->calculatePertinence(this->crispInput);
 80a276e:	6869      	ldr	r1, [r5, #4]
 80a2770:	f000 fa7e 	bl	80a2c70 <_ZN8FuzzySet19calculatePertinenceEf>
        }
        aux = aux->next;
 80a2774:	6864      	ldr	r4, [r4, #4]
// MÉTODOS PÚBLICOS
bool FuzzyInput::calculateFuzzySetPertinences(){
    fuzzySetArray *aux;
    aux = this->fuzzySets;

    while(aux != NULL){
 80a2776:	e7f7      	b.n	80a2768 <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv+0x6>
        }
        aux = aux->next;
    }
    
    return true;
 80a2778:	2001      	movs	r0, #1
 80a277a:	bd38      	pop	{r3, r4, r5, pc}

080a277c <_ZN7FuzzyIOC1Ei>:
}

FuzzyIO::FuzzyIO(int index){
    this->index = index;
    // Iniciando os ponteiros como nulo
    this->fuzzySets          = NULL;
 80a277c:	2200      	movs	r2, #0
// CONSTRUTORES
FuzzyIO::FuzzyIO(){
}

FuzzyIO::FuzzyIO(int index){
    this->index = index;
 80a277e:	6001      	str	r1, [r0, #0]
    // Iniciando os ponteiros como nulo
    this->fuzzySets          = NULL;
 80a2780:	6082      	str	r2, [r0, #8]
    this->fuzzySetsCursor    = NULL;
 80a2782:	60c2      	str	r2, [r0, #12]
}
 80a2784:	4770      	bx	lr

080a2786 <_ZN7FuzzyIO8getIndexEv>:
}

// MÉTODOS PÚBLICOS
int FuzzyIO::getIndex(){
    return this->index;
}
 80a2786:	6800      	ldr	r0, [r0, #0]
 80a2788:	4770      	bx	lr

080a278a <_ZN7FuzzyIO13setCrispInputEf>:

void FuzzyIO::setCrispInput(float crispInput){
    this->crispInput = crispInput;
 80a278a:	6041      	str	r1, [r0, #4]
 80a278c:	4770      	bx	lr

080a278e <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>:

float FuzzyIO::getCrispInput(){
    return this->crispInput;
}

bool FuzzyIO::addFuzzySet(FuzzySet* fuzzySet){
 80a278e:	b538      	push	{r3, r4, r5, lr}
 80a2790:	4604      	mov	r4, r0
    fuzzySetArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetArray *) malloc(sizeof(fuzzySetArray))) == NULL){
 80a2792:	2008      	movs	r0, #8

float FuzzyIO::getCrispInput(){
    return this->crispInput;
}

bool FuzzyIO::addFuzzySet(FuzzySet* fuzzySet){
 80a2794:	460d      	mov	r5, r1
    fuzzySetArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetArray *) malloc(sizeof(fuzzySetArray))) == NULL){
 80a2796:	f000 fe61 	bl	80a345c <malloc>
 80a279a:	b150      	cbz	r0, 80a27b2 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet+0x24>
        return false;
    }
    aux->fuzzySet     = fuzzySet;
    aux->next         = NULL;
 80a279c:	2300      	movs	r3, #0
    fuzzySetArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetArray *) malloc(sizeof(fuzzySetArray))) == NULL){
        return false;
    }
    aux->fuzzySet     = fuzzySet;
 80a279e:	6005      	str	r5, [r0, #0]
    aux->next         = NULL;
 80a27a0:	6043      	str	r3, [r0, #4]

    if(this->fuzzySets == NULL){
 80a27a2:	68a3      	ldr	r3, [r4, #8]
 80a27a4:	b90b      	cbnz	r3, 80a27aa <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet+0x1c>
        this->fuzzySets = aux;
 80a27a6:	60a0      	str	r0, [r4, #8]
 80a27a8:	e001      	b.n	80a27ae <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet+0x20>
        this->fuzzySetsCursor = aux;
    }else{
        this->fuzzySetsCursor->next = aux;
 80a27aa:	68e3      	ldr	r3, [r4, #12]
 80a27ac:	6058      	str	r0, [r3, #4]
        this->fuzzySetsCursor = aux;
 80a27ae:	60e0      	str	r0, [r4, #12]
    }
    return true;
 80a27b0:	2001      	movs	r0, #1
}
 80a27b2:	bd38      	pop	{r3, r4, r5, pc}

080a27b4 <_ZN7FuzzyIO14resetFuzzySetsEv>:

void FuzzyIO::resetFuzzySets(){
 80a27b4:	b510      	push	{r4, lr}
    fuzzySetArray* fuzzySetsAux;
    fuzzySetsAux = this->fuzzySets;
 80a27b6:	6884      	ldr	r4, [r0, #8]
    // Calculando as pertinências de totos os FuzzyInputs
    while(fuzzySetsAux != NULL){
 80a27b8:	b124      	cbz	r4, 80a27c4 <_ZN7FuzzyIO14resetFuzzySetsEv+0x10>
        fuzzySetsAux->fuzzySet->reset();
 80a27ba:	6820      	ldr	r0, [r4, #0]
 80a27bc:	f000 faed 	bl	80a2d9a <_ZN8FuzzySet5resetEv>
        fuzzySetsAux = fuzzySetsAux->next;
 80a27c0:	6864      	ldr	r4, [r4, #4]

void FuzzyIO::resetFuzzySets(){
    fuzzySetArray* fuzzySetsAux;
    fuzzySetsAux = this->fuzzySets;
    // Calculando as pertinências de totos os FuzzyInputs
    while(fuzzySetsAux != NULL){
 80a27c2:	e7f9      	b.n	80a27b8 <_ZN7FuzzyIO14resetFuzzySetsEv+0x4>
 80a27c4:	bd10      	pop	{r4, pc}

080a27c6 <_ZN11FuzzyOutputC1Ei>:

// CONSTRUTORES
FuzzyOutput::FuzzyOutput() : FuzzyIO(){
}

FuzzyOutput::FuzzyOutput(int index) : FuzzyIO(index){
 80a27c6:	b510      	push	{r4, lr}
 80a27c8:	4604      	mov	r4, r0
 80a27ca:	f7ff ffd7 	bl	80a277c <_ZN7FuzzyIOC1Ei>
 80a27ce:	f104 0010 	add.w	r0, r4, #16
 80a27d2:	f7ff fda5 	bl	80a2320 <_ZN16FuzzyCompositionC1Ev>
}
 80a27d6:	4620      	mov	r0, r4
 80a27d8:	bd10      	pop	{r4, pc}

080a27da <_ZN11FuzzyOutput14getCrispOutputEv>:

    return true;
}

float FuzzyOutput::getCrispOutput(){
    return this->fuzzyComposition.avaliate();
 80a27da:	3010      	adds	r0, #16
 80a27dc:	f7ff bdd2 	b.w	80a2384 <_ZN16FuzzyComposition8avaliateEv>

080a27e0 <_ZN11FuzzyOutput5orderEv>:
}

// Um simples Bubble Sort
bool FuzzyOutput::order(){
 80a27e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fuzzySetArray *aux1;
    fuzzySetArray *aux2;

    aux1 = this->fuzzySets;
 80a27e2:	6884      	ldr	r4, [r0, #8]
float FuzzyOutput::getCrispOutput(){
    return this->fuzzyComposition.avaliate();
}

// Um simples Bubble Sort
bool FuzzyOutput::order(){
 80a27e4:	4606      	mov	r6, r0
    fuzzySetArray *aux1;
    fuzzySetArray *aux2;

    aux1 = this->fuzzySets;
 80a27e6:	4625      	mov	r5, r4
    aux2 = this->fuzzySets;

    while(aux1 != NULL){
 80a27e8:	b1cd      	cbz	r5, 80a281e <_ZN11FuzzyOutput5orderEv+0x3e>
        while(aux2 != NULL){
 80a27ea:	b1ac      	cbz	r4, 80a2818 <_ZN11FuzzyOutput5orderEv+0x38>
            if(aux2->next != NULL){
 80a27ec:	6863      	ldr	r3, [r4, #4]
 80a27ee:	b18b      	cbz	r3, 80a2814 <_ZN11FuzzyOutput5orderEv+0x34>
                if(aux2->fuzzySet->getPointA() > aux2->next->fuzzySet->getPointA()){
 80a27f0:	6820      	ldr	r0, [r4, #0]
 80a27f2:	f000 fa35 	bl	80a2c60 <_ZN8FuzzySet9getPointAEv>
 80a27f6:	6863      	ldr	r3, [r4, #4]
 80a27f8:	4607      	mov	r7, r0
 80a27fa:	6818      	ldr	r0, [r3, #0]
 80a27fc:	f000 fa30 	bl	80a2c60 <_ZN8FuzzySet9getPointAEv>
 80a2800:	4601      	mov	r1, r0
 80a2802:	4638      	mov	r0, r7
 80a2804:	f002 feb8 	bl	80a5578 <__aeabi_fcmpgt>
 80a2808:	b120      	cbz	r0, 80a2814 <_ZN11FuzzyOutput5orderEv+0x34>

// MÉTODOS PRIVADOS
bool FuzzyOutput::swap(fuzzySetArray* fuzzySetA, fuzzySetArray* fuzzySetB){
    FuzzySet* aux;
    
    aux = fuzzySetA->fuzzySet;
 80a280a:	e894 000c 	ldmia.w	r4, {r2, r3}
    fuzzySetA->fuzzySet = fuzzySetB->fuzzySet;
 80a280e:	6819      	ldr	r1, [r3, #0]
 80a2810:	6021      	str	r1, [r4, #0]
    fuzzySetB->fuzzySet = aux;
 80a2812:	601a      	str	r2, [r3, #0]
            if(aux2->next != NULL){
                if(aux2->fuzzySet->getPointA() > aux2->next->fuzzySet->getPointA()){
                    this->swap(aux2, aux2->next);
                }
            }
            aux2 = aux2->next;
 80a2814:	6864      	ldr	r4, [r4, #4]

    aux1 = this->fuzzySets;
    aux2 = this->fuzzySets;

    while(aux1 != NULL){
        while(aux2 != NULL){
 80a2816:	e7e8      	b.n	80a27ea <_ZN11FuzzyOutput5orderEv+0xa>
                    this->swap(aux2, aux2->next);
                }
            }
            aux2 = aux2->next;
        }
        aux2 = this->fuzzySets;
 80a2818:	68b4      	ldr	r4, [r6, #8]
        aux1 = aux1->next;
 80a281a:	686d      	ldr	r5, [r5, #4]
    fuzzySetArray *aux2;

    aux1 = this->fuzzySets;
    aux2 = this->fuzzySets;

    while(aux1 != NULL){
 80a281c:	e7e4      	b.n	80a27e8 <_ZN11FuzzyOutput5orderEv+0x8>
        }
        aux2 = this->fuzzySets;
        aux1 = aux1->next;
    }
    return true;
}
 80a281e:	2001      	movs	r0, #1
 80a2820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2822:	0000      	movs	r0, r0
 80a2824:	0000      	movs	r0, r0
	...

080a2828 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_>:
    fuzzySetB->fuzzySet = aux;

    return true;
}

bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
 80a2828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a282c:	9810      	ldr	r0, [sp, #64]	; 0x40
    fuzzySetB->fuzzySet = aux;

    return true;
}

bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
 80a282e:	460f      	mov	r7, r1
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2830:	990e      	ldr	r1, [sp, #56]	; 0x38
    fuzzySetB->fuzzySet = aux;

    return true;
}

bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
 80a2832:	4615      	mov	r5, r2
 80a2834:	461c      	mov	r4, r3
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2836:	f002 fbd9 	bl	80a4fec <__aeabi_fsub>
 80a283a:	4639      	mov	r1, r7
 80a283c:	4682      	mov	sl, r0
 80a283e:	4620      	mov	r0, r4
 80a2840:	f002 fbd4 	bl	80a4fec <__aeabi_fsub>
 80a2844:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a2846:	4680      	mov	r8, r0
 80a2848:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80a284a:	f002 fbcf 	bl	80a4fec <__aeabi_fsub>
 80a284e:	4629      	mov	r1, r5
 80a2850:	4683      	mov	fp, r0
 80a2852:	980c      	ldr	r0, [sp, #48]	; 0x30
 80a2854:	f002 fbca 	bl	80a4fec <__aeabi_fsub>
 80a2858:	4641      	mov	r1, r8
 80a285a:	4606      	mov	r6, r0
 80a285c:	4650      	mov	r0, sl
 80a285e:	f002 fccf 	bl	80a5200 <__aeabi_fmul>
 80a2862:	4631      	mov	r1, r6
 80a2864:	4604      	mov	r4, r0
 80a2866:	4658      	mov	r0, fp
 80a2868:	f002 fcca 	bl	80a5200 <__aeabi_fmul>
 80a286c:	4601      	mov	r1, r0
 80a286e:	4620      	mov	r0, r4
 80a2870:	f002 fbbc 	bl	80a4fec <__aeabi_fsub>
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a2874:	990e      	ldr	r1, [sp, #56]	; 0x38

bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2876:	4604      	mov	r4, r0
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a2878:	4628      	mov	r0, r5
 80a287a:	f002 fbb7 	bl	80a4fec <__aeabi_fsub>
 80a287e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a2880:	4681      	mov	r9, r0
 80a2882:	4638      	mov	r0, r7
 80a2884:	f002 fbb2 	bl	80a4fec <__aeabi_fsub>
 80a2888:	4649      	mov	r1, r9
 80a288a:	9001      	str	r0, [sp, #4]
 80a288c:	4658      	mov	r0, fp
 80a288e:	f002 fcb7 	bl	80a5200 <__aeabi_fmul>
 80a2892:	9901      	ldr	r1, [sp, #4]
 80a2894:	4683      	mov	fp, r0
 80a2896:	4650      	mov	r0, sl
 80a2898:	f002 fcb2 	bl	80a5200 <__aeabi_fmul>
 80a289c:	4601      	mov	r1, r0
 80a289e:	4658      	mov	r0, fp
 80a28a0:	f002 fba4 	bl	80a4fec <__aeabi_fsub>
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a28a4:	4649      	mov	r1, r9
bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a28a6:	4682      	mov	sl, r0
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a28a8:	4640      	mov	r0, r8
 80a28aa:	f002 fca9 	bl	80a5200 <__aeabi_fmul>
 80a28ae:	9901      	ldr	r1, [sp, #4]
 80a28b0:	4681      	mov	r9, r0
 80a28b2:	4630      	mov	r0, r6
 80a28b4:	f002 fca4 	bl	80a5200 <__aeabi_fmul>
 80a28b8:	4601      	mov	r1, r0
 80a28ba:	4648      	mov	r0, r9
 80a28bc:	f002 fb96 	bl	80a4fec <__aeabi_fsub>

    if(denom < 0.0){
 80a28c0:	2100      	movs	r1, #0
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a28c2:	4681      	mov	r9, r0

    if(denom < 0.0){
 80a28c4:	4620      	mov	r0, r4
 80a28c6:	f002 fe39 	bl	80a553c <__aeabi_fcmplt>
 80a28ca:	b108      	cbz	r0, 80a28d0 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0xa8>
        denom *= -1.0;
 80a28cc:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    }
    if(numera < 0.0){
 80a28d0:	2100      	movs	r1, #0
 80a28d2:	4650      	mov	r0, sl
 80a28d4:	f002 fe32 	bl	80a553c <__aeabi_fcmplt>
 80a28d8:	b108      	cbz	r0, 80a28de <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0xb6>
        numera *= -1.0;
 80a28da:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
    }
    if(numerb < 0.0){
 80a28de:	2100      	movs	r1, #0
 80a28e0:	4648      	mov	r0, r9
 80a28e2:	f002 fe2b 	bl	80a553c <__aeabi_fcmplt>
 80a28e6:	b108      	cbz	r0, 80a28ec <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0xc4>
        numerb *= -1.0;
 80a28e8:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
    }

    // Se os seguimentos forem paralelos, retornar falso
    if(denom < EPS){
 80a28ec:	4620      	mov	r0, r4
 80a28ee:	f002 f83b 	bl	80a4968 <__aeabi_f2d>
 80a28f2:	a321      	add	r3, pc, #132	; (adr r3, 80a2978 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x150>)
 80a28f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a28f8:	f002 fafc 	bl	80a4ef4 <__aeabi_dcmplt>
 80a28fc:	9001      	str	r0, [sp, #4]
 80a28fe:	2800      	cmp	r0, #0
 80a2900:	d133      	bne.n	80a296a <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x142>
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
 80a2902:	4621      	mov	r1, r4
 80a2904:	4650      	mov	r0, sl
 80a2906:	f002 fd2f 	bl	80a5368 <__aeabi_fdiv>
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a290a:	2100      	movs	r1, #0
    if(denom < EPS){
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
 80a290c:	4682      	mov	sl, r0
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a290e:	f002 fe15 	bl	80a553c <__aeabi_fcmplt>
 80a2912:	bb50      	cbnz	r0, 80a296a <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x142>
 80a2914:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2918:	4650      	mov	r0, sl
 80a291a:	f002 fe2d 	bl	80a5578 <__aeabi_fcmpgt>
 80a291e:	bb20      	cbnz	r0, 80a296a <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x142>
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
    mub = numerb / denom;
 80a2920:	4621      	mov	r1, r4
 80a2922:	9001      	str	r0, [sp, #4]
 80a2924:	4648      	mov	r0, r9
 80a2926:	f002 fd1f 	bl	80a5368 <__aeabi_fdiv>
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a292a:	2100      	movs	r1, #0
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
    mub = numerb / denom;
 80a292c:	4681      	mov	r9, r0
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a292e:	f002 fe05 	bl	80a553c <__aeabi_fcmplt>
 80a2932:	4604      	mov	r4, r0
 80a2934:	b9c8      	cbnz	r0, 80a296a <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x142>
 80a2936:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a293a:	4648      	mov	r0, r9
 80a293c:	f002 fe1c 	bl	80a5578 <__aeabi_fcmpgt>
 80a2940:	b9a8      	cbnz	r0, 80a296e <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x146>
        return false;
    }else{
        // Calculando o ponto e a pertinencia do novo elemento
        *point      = x1 + mua * (x2 - x1);
 80a2942:	4651      	mov	r1, sl
 80a2944:	4640      	mov	r0, r8
 80a2946:	f002 fc5b 	bl	80a5200 <__aeabi_fmul>
 80a294a:	4639      	mov	r1, r7
 80a294c:	f002 fb50 	bl	80a4ff0 <__addsf3>
 80a2950:	9b11      	ldr	r3, [sp, #68]	; 0x44
        *pertinence = y1 + mua * (y2 - y1);
 80a2952:	4651      	mov	r1, sl
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
        return false;
    }else{
        // Calculando o ponto e a pertinencia do novo elemento
        *point      = x1 + mua * (x2 - x1);
 80a2954:	6018      	str	r0, [r3, #0]
        *pertinence = y1 + mua * (y2 - y1);
 80a2956:	4630      	mov	r0, r6
 80a2958:	f002 fc52 	bl	80a5200 <__aeabi_fmul>
 80a295c:	4629      	mov	r1, r5
 80a295e:	f002 fb47 	bl	80a4ff0 <__addsf3>
 80a2962:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a2964:	6018      	str	r0, [r3, #0]

        return true;
 80a2966:	2001      	movs	r0, #1
 80a2968:	e002      	b.n	80a2970 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x148>
        numerb *= -1.0;
    }

    // Se os seguimentos forem paralelos, retornar falso
    if(denom < EPS){
        return false;
 80a296a:	2000      	movs	r0, #0
 80a296c:	e000      	b.n	80a2970 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x148>
 80a296e:	4620      	mov	r0, r4
        *point      = x1 + mua * (x2 - x1);
        *pertinence = y1 + mua * (y2 - y1);

        return true;
    }
 80a2970:	b003      	add	sp, #12
 80a2972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2976:	bf00      	nop
 80a2978:	d2f1a9fc 	.word	0xd2f1a9fc
 80a297c:	3f50624d 	.word	0x3f50624d

080a2980 <_ZN11FuzzyOutput8truncateEv>:
FuzzyOutput::~FuzzyOutput(){
    this->fuzzyComposition.empty();
}

// MÉTODOS PÚBLICOS
bool FuzzyOutput::truncate(){
 80a2980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2984:	4606      	mov	r6, r0
    // esvaziando a composição
    this->fuzzyComposition.empty();
 80a2986:	f100 0510 	add.w	r5, r0, #16
FuzzyOutput::~FuzzyOutput(){
    this->fuzzyComposition.empty();
}

// MÉTODOS PÚBLICOS
bool FuzzyOutput::truncate(){
 80a298a:	b091      	sub	sp, #68	; 0x44
    // esvaziando a composição
    this->fuzzyComposition.empty();
 80a298c:	4628      	mov	r0, r5
 80a298e:	f7ff fdd3 	bl	80a2538 <_ZN16FuzzyComposition5emptyEv>

    fuzzySetArray *aux;
    aux = this->fuzzySets;
 80a2992:	68b4      	ldr	r4, [r6, #8]
                        this->fuzzyComposition.addPoint(newPointC, newPertinenceC);
                    }
                }
            }else if(aux->fuzzySet->getPointB() != aux->fuzzySet->getPointC()){
                // se trapezio
                if(aux->fuzzySet->getPertinence() == 1.0){
 80a2994:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
                    }
                }else{
                    float newPointB         = aux->fuzzySet->getPointB();
                    float newPertinenceB    = aux->fuzzySet->getPertinence();

                    rebuild(aux->fuzzySet->getPointA(), 0.0, aux->fuzzySet->getPointB(), 1.0, aux->fuzzySet->getPointA(), aux->fuzzySet->getPertinence(), aux->fuzzySet->getPointD(), aux->fuzzySet->getPertinence(), &newPointB, &newPertinenceB);
 80a2998:	af0d      	add	r7, sp, #52	; 0x34
    // esvaziando a composição
    this->fuzzyComposition.empty();

    fuzzySetArray *aux;
    aux = this->fuzzySets;
    while(aux != NULL){
 80a299a:	2c00      	cmp	r4, #0
 80a299c:	f000 8150 	beq.w	80a2c40 <_ZN11FuzzyOutput8truncateEv+0x2c0>
        if(aux->fuzzySet->getPertinence() > 0.0){
 80a29a0:	6820      	ldr	r0, [r4, #0]
 80a29a2:	f000 f9f8 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a29a6:	2100      	movs	r1, #0
 80a29a8:	f002 fde6 	bl	80a5578 <__aeabi_fcmpgt>
 80a29ac:	2800      	cmp	r0, #0
 80a29ae:	f000 80d8 	beq.w	80a2b62 <_ZN11FuzzyOutput8truncateEv+0x1e2>
            // Se não for trapezio iniciado com pertinencia 1 (sem o triangulo esquerdo)
            if(aux->fuzzySet->getPointA() != aux->fuzzySet->getPointB()){
 80a29b2:	6820      	ldr	r0, [r4, #0]
 80a29b4:	f000 f954 	bl	80a2c60 <_ZN8FuzzySet9getPointAEv>
 80a29b8:	4680      	mov	r8, r0
 80a29ba:	6820      	ldr	r0, [r4, #0]
 80a29bc:	f000 f952 	bl	80a2c64 <_ZN8FuzzySet9getPointBEv>
 80a29c0:	4601      	mov	r1, r0
 80a29c2:	4640      	mov	r0, r8
 80a29c4:	f002 fdb0 	bl	80a5528 <__aeabi_fcmpeq>
 80a29c8:	b980      	cbnz	r0, 80a29ec <_ZN11FuzzyOutput8truncateEv+0x6c>
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointA(), 0.0) == false){
 80a29ca:	6820      	ldr	r0, [r4, #0]
 80a29cc:	f000 f948 	bl	80a2c60 <_ZN8FuzzySet9getPointAEv>
 80a29d0:	2200      	movs	r2, #0
 80a29d2:	4601      	mov	r1, r0
 80a29d4:	4628      	mov	r0, r5
 80a29d6:	f7ff fcc0 	bl	80a235a <_ZN16FuzzyComposition10checkPointEff>
 80a29da:	b938      	cbnz	r0, 80a29ec <_ZN11FuzzyOutput8truncateEv+0x6c>
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointA(), 0.0);
 80a29dc:	6820      	ldr	r0, [r4, #0]
 80a29de:	f000 f93f 	bl	80a2c60 <_ZN8FuzzySet9getPointAEv>
 80a29e2:	2200      	movs	r2, #0
 80a29e4:	4601      	mov	r1, r0
 80a29e6:	4628      	mov	r0, r5
 80a29e8:	f7ff fc9e 	bl	80a2328 <_ZN16FuzzyComposition8addPointEff>
                }
            }

            if(aux->fuzzySet->getPointB() == aux->fuzzySet->getPointC() && aux->fuzzySet->getPointA() != aux->fuzzySet->getPointD()){
 80a29ec:	6820      	ldr	r0, [r4, #0]
 80a29ee:	f000 f939 	bl	80a2c64 <_ZN8FuzzySet9getPointBEv>
 80a29f2:	4680      	mov	r8, r0
 80a29f4:	6820      	ldr	r0, [r4, #0]
 80a29f6:	f000 f937 	bl	80a2c68 <_ZN8FuzzySet9getPointCEv>
 80a29fa:	4601      	mov	r1, r0
 80a29fc:	4640      	mov	r0, r8
 80a29fe:	f002 fd93 	bl	80a5528 <__aeabi_fcmpeq>
 80a2a02:	b168      	cbz	r0, 80a2a20 <_ZN11FuzzyOutput8truncateEv+0xa0>
 80a2a04:	6820      	ldr	r0, [r4, #0]
 80a2a06:	f000 f92b 	bl	80a2c60 <_ZN8FuzzySet9getPointAEv>
 80a2a0a:	4680      	mov	r8, r0
 80a2a0c:	6820      	ldr	r0, [r4, #0]
 80a2a0e:	f000 f92d 	bl	80a2c6c <_ZN8FuzzySet9getPointDEv>
 80a2a12:	4601      	mov	r1, r0
 80a2a14:	4640      	mov	r0, r8
 80a2a16:	f002 fd87 	bl	80a5528 <__aeabi_fcmpeq>
 80a2a1a:	2800      	cmp	r0, #0
 80a2a1c:	f000 80a3 	beq.w	80a2b66 <_ZN11FuzzyOutput8truncateEv+0x1e6>

                    if(this->fuzzyComposition.checkPoint(newPointC, newPertinenceC) == false){
                        this->fuzzyComposition.addPoint(newPointC, newPertinenceC);
                    }
                }
            }else if(aux->fuzzySet->getPointB() != aux->fuzzySet->getPointC()){
 80a2a20:	6820      	ldr	r0, [r4, #0]
 80a2a22:	f000 f91f 	bl	80a2c64 <_ZN8FuzzySet9getPointBEv>
 80a2a26:	4680      	mov	r8, r0
 80a2a28:	6820      	ldr	r0, [r4, #0]
 80a2a2a:	f000 f91d 	bl	80a2c68 <_ZN8FuzzySet9getPointCEv>
 80a2a2e:	4601      	mov	r1, r0
 80a2a30:	4640      	mov	r0, r8
 80a2a32:	f002 fd79 	bl	80a5528 <__aeabi_fcmpeq>
 80a2a36:	2800      	cmp	r0, #0
 80a2a38:	f040 809f 	bne.w	80a2b7a <_ZN11FuzzyOutput8truncateEv+0x1fa>
                // se trapezio
                if(aux->fuzzySet->getPertinence() == 1.0){
 80a2a3c:	6820      	ldr	r0, [r4, #0]
 80a2a3e:	f000 f9aa 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a2a42:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2a46:	f002 fd6f 	bl	80a5528 <__aeabi_fcmpeq>
 80a2a4a:	2800      	cmp	r0, #0
 80a2a4c:	f040 80c4 	bne.w	80a2bd8 <_ZN11FuzzyOutput8truncateEv+0x258>

                    if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointC(), aux->fuzzySet->getPertinence()) == false){
                        this->fuzzyComposition.addPoint(aux->fuzzySet->getPointC(), aux->fuzzySet->getPertinence());
                    }
                }else{
                    float newPointB         = aux->fuzzySet->getPointB();
 80a2a50:	6820      	ldr	r0, [r4, #0]
 80a2a52:	f000 f907 	bl	80a2c64 <_ZN8FuzzySet9getPointBEv>
 80a2a56:	900c      	str	r0, [sp, #48]	; 0x30
                    float newPertinenceB    = aux->fuzzySet->getPertinence();
 80a2a58:	6820      	ldr	r0, [r4, #0]
 80a2a5a:	f000 f99c 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a2a5e:	900d      	str	r0, [sp, #52]	; 0x34

                    rebuild(aux->fuzzySet->getPointA(), 0.0, aux->fuzzySet->getPointB(), 1.0, aux->fuzzySet->getPointA(), aux->fuzzySet->getPertinence(), aux->fuzzySet->getPointD(), aux->fuzzySet->getPertinence(), &newPointB, &newPertinenceB);
 80a2a60:	6820      	ldr	r0, [r4, #0]
 80a2a62:	f000 f8fd 	bl	80a2c60 <_ZN8FuzzySet9getPointAEv>
 80a2a66:	4680      	mov	r8, r0
 80a2a68:	6820      	ldr	r0, [r4, #0]
 80a2a6a:	f000 f8fb 	bl	80a2c64 <_ZN8FuzzySet9getPointBEv>
 80a2a6e:	4682      	mov	sl, r0
 80a2a70:	6820      	ldr	r0, [r4, #0]
 80a2a72:	f000 f8f5 	bl	80a2c60 <_ZN8FuzzySet9getPointAEv>
 80a2a76:	4683      	mov	fp, r0
 80a2a78:	6820      	ldr	r0, [r4, #0]
 80a2a7a:	f000 f98c 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a2a7e:	900a      	str	r0, [sp, #40]	; 0x28
 80a2a80:	6820      	ldr	r0, [r4, #0]
 80a2a82:	f000 f8f3 	bl	80a2c6c <_ZN8FuzzySet9getPointDEv>
 80a2a86:	9009      	str	r0, [sp, #36]	; 0x24
 80a2a88:	6820      	ldr	r0, [r4, #0]
 80a2a8a:	f000 f984 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a2a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a2a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a2a92:	a90c      	add	r1, sp, #48	; 0x30
 80a2a94:	9105      	str	r1, [sp, #20]
 80a2a96:	9004      	str	r0, [sp, #16]
 80a2a98:	9203      	str	r2, [sp, #12]
 80a2a9a:	9302      	str	r3, [sp, #8]
 80a2a9c:	2200      	movs	r2, #0
 80a2a9e:	4641      	mov	r1, r8
 80a2aa0:	9706      	str	r7, [sp, #24]
 80a2aa2:	f8cd b004 	str.w	fp, [sp, #4]
 80a2aa6:	f8cd 9000 	str.w	r9, [sp]
 80a2aaa:	4653      	mov	r3, sl
 80a2aac:	4630      	mov	r0, r6
 80a2aae:	f7ff febb 	bl	80a2828 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_>

                    if(this->fuzzyComposition.checkPoint(newPointB, newPertinenceB) == false){
 80a2ab2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a2ab4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a2ab6:	4628      	mov	r0, r5
 80a2ab8:	f7ff fc4f 	bl	80a235a <_ZN16FuzzyComposition10checkPointEff>
 80a2abc:	b920      	cbnz	r0, 80a2ac8 <_ZN11FuzzyOutput8truncateEv+0x148>
                        this->fuzzyComposition.addPoint(newPointB, newPertinenceB);
 80a2abe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a2ac0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a2ac2:	4628      	mov	r0, r5
 80a2ac4:	f7ff fc30 	bl	80a2328 <_ZN16FuzzyComposition8addPointEff>
                    }

                    float newPointC         = aux->fuzzySet->getPointB();
 80a2ac8:	6820      	ldr	r0, [r4, #0]
 80a2aca:	f000 f8cb 	bl	80a2c64 <_ZN8FuzzySet9getPointBEv>
 80a2ace:	900e      	str	r0, [sp, #56]	; 0x38
                    float newPertinenceC    = aux->fuzzySet->getPertinence();
 80a2ad0:	6820      	ldr	r0, [r4, #0]
 80a2ad2:	f000 f960 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a2ad6:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 80a2ada:	f848 0d04 	str.w	r0, [r8, #-4]!

                    rebuild(aux->fuzzySet->getPointC(), 1.0, aux->fuzzySet->getPointD(), 0.0, aux->fuzzySet->getPointA(), aux->fuzzySet->getPertinence(), aux->fuzzySet->getPointD(), aux->fuzzySet->getPertinence(), &newPointC, &newPertinenceC);
 80a2ade:	6820      	ldr	r0, [r4, #0]
 80a2ae0:	f000 f8c2 	bl	80a2c68 <_ZN8FuzzySet9getPointCEv>
 80a2ae4:	4682      	mov	sl, r0
 80a2ae6:	6820      	ldr	r0, [r4, #0]
 80a2ae8:	f000 f8c0 	bl	80a2c6c <_ZN8FuzzySet9getPointDEv>
 80a2aec:	4683      	mov	fp, r0
 80a2aee:	6820      	ldr	r0, [r4, #0]
 80a2af0:	f000 f8b6 	bl	80a2c60 <_ZN8FuzzySet9getPointAEv>
 80a2af4:	9009      	str	r0, [sp, #36]	; 0x24
 80a2af6:	6820      	ldr	r0, [r4, #0]
 80a2af8:	f000 f94d 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a2afc:	900b      	str	r0, [sp, #44]	; 0x2c
 80a2afe:	6820      	ldr	r0, [r4, #0]
 80a2b00:	f000 f8b4 	bl	80a2c6c <_ZN8FuzzySet9getPointDEv>
 80a2b04:	900a      	str	r0, [sp, #40]	; 0x28
 80a2b06:	6820      	ldr	r0, [r4, #0]
 80a2b08:	f000 f945 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a2b0c:	ab0e      	add	r3, sp, #56	; 0x38
 80a2b0e:	9305      	str	r3, [sp, #20]
 80a2b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a2b12:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a2b14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a2b16:	9301      	str	r3, [sp, #4]
 80a2b18:	2300      	movs	r3, #0
 80a2b1a:	9004      	str	r0, [sp, #16]
 80a2b1c:	9103      	str	r1, [sp, #12]
 80a2b1e:	9202      	str	r2, [sp, #8]
 80a2b20:	9300      	str	r3, [sp, #0]
 80a2b22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80a2b26:	4651      	mov	r1, sl
 80a2b28:	f8cd 8018 	str.w	r8, [sp, #24]
 80a2b2c:	465b      	mov	r3, fp
 80a2b2e:	4630      	mov	r0, r6
 80a2b30:	f7ff fe7a 	bl	80a2828 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_>

                    if(this->fuzzyComposition.checkPoint(newPointC, newPertinenceC) == false){
 80a2b34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a2b36:	990e      	ldr	r1, [sp, #56]	; 0x38
 80a2b38:	4628      	mov	r0, r5
 80a2b3a:	f7ff fc0e 	bl	80a235a <_ZN16FuzzyComposition10checkPointEff>
 80a2b3e:	b920      	cbnz	r0, 80a2b4a <_ZN11FuzzyOutput8truncateEv+0x1ca>
                        this->fuzzyComposition.addPoint(newPointC, newPertinenceC);
 80a2b40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a2b42:	990e      	ldr	r1, [sp, #56]	; 0x38
                    }
                }
            }else{
                //senao singleton
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence()) == false){
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence());
 80a2b44:	4628      	mov	r0, r5
 80a2b46:	f7ff fbef 	bl	80a2328 <_ZN16FuzzyComposition8addPointEff>
                }
            }
            
            //Se não for trapezio iniciado com pertinencia 1 (sem o triangulo direito)
            if(aux->fuzzySet->getPointC() != aux->fuzzySet->getPointD()){
 80a2b4a:	6820      	ldr	r0, [r4, #0]
 80a2b4c:	f000 f88c 	bl	80a2c68 <_ZN8FuzzySet9getPointCEv>
 80a2b50:	4680      	mov	r8, r0
 80a2b52:	6820      	ldr	r0, [r4, #0]
 80a2b54:	f000 f88a 	bl	80a2c6c <_ZN8FuzzySet9getPointDEv>
 80a2b58:	4601      	mov	r1, r0
 80a2b5a:	4640      	mov	r0, r8
 80a2b5c:	f002 fce4 	bl	80a5528 <__aeabi_fcmpeq>
 80a2b60:	b318      	cbz	r0, 80a2baa <_ZN11FuzzyOutput8truncateEv+0x22a>
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointD(), 0.0) == false || aux->fuzzySet->getPointD() == aux->fuzzySet->getPointA()){
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointD(), 0.0);
                }
            }
        }
        aux = aux->next;
 80a2b62:	6864      	ldr	r4, [r4, #4]
    // esvaziando a composição
    this->fuzzyComposition.empty();

    fuzzySetArray *aux;
    aux = this->fuzzySets;
    while(aux != NULL){
 80a2b64:	e719      	b.n	80a299a <_ZN11FuzzyOutput8truncateEv+0x1a>
                }
            }

            if(aux->fuzzySet->getPointB() == aux->fuzzySet->getPointC() && aux->fuzzySet->getPointA() != aux->fuzzySet->getPointD()){
                // se trinagulo
                if(aux->fuzzySet->getPertinence() == 1.0){
 80a2b66:	6820      	ldr	r0, [r4, #0]
 80a2b68:	f000 f915 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a2b6c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2b70:	f002 fcda 	bl	80a5528 <__aeabi_fcmpeq>
 80a2b74:	2800      	cmp	r0, #0
 80a2b76:	f43f af6b 	beq.w	80a2a50 <_ZN11FuzzyOutput8truncateEv+0xd0>
                        this->fuzzyComposition.addPoint(newPointC, newPertinenceC);
                    }
                }
            }else{
                //senao singleton
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence()) == false){
 80a2b7a:	6820      	ldr	r0, [r4, #0]
 80a2b7c:	f000 f872 	bl	80a2c64 <_ZN8FuzzySet9getPointBEv>
 80a2b80:	4680      	mov	r8, r0
 80a2b82:	6820      	ldr	r0, [r4, #0]
 80a2b84:	f000 f907 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a2b88:	4641      	mov	r1, r8
 80a2b8a:	4602      	mov	r2, r0
 80a2b8c:	4628      	mov	r0, r5
 80a2b8e:	f7ff fbe4 	bl	80a235a <_ZN16FuzzyComposition10checkPointEff>
 80a2b92:	2800      	cmp	r0, #0
 80a2b94:	d1d9      	bne.n	80a2b4a <_ZN11FuzzyOutput8truncateEv+0x1ca>
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence());
 80a2b96:	6820      	ldr	r0, [r4, #0]
 80a2b98:	f000 f864 	bl	80a2c64 <_ZN8FuzzySet9getPointBEv>
 80a2b9c:	4680      	mov	r8, r0
 80a2b9e:	6820      	ldr	r0, [r4, #0]
 80a2ba0:	f000 f8f9 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a2ba4:	4641      	mov	r1, r8
 80a2ba6:	4602      	mov	r2, r0
 80a2ba8:	e7cc      	b.n	80a2b44 <_ZN11FuzzyOutput8truncateEv+0x1c4>
                }
            }
            
            //Se não for trapezio iniciado com pertinencia 1 (sem o triangulo direito)
            if(aux->fuzzySet->getPointC() != aux->fuzzySet->getPointD()){
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointD(), 0.0) == false || aux->fuzzySet->getPointD() == aux->fuzzySet->getPointA()){
 80a2baa:	6820      	ldr	r0, [r4, #0]
 80a2bac:	f000 f85e 	bl	80a2c6c <_ZN8FuzzySet9getPointDEv>
 80a2bb0:	2200      	movs	r2, #0
 80a2bb2:	4601      	mov	r1, r0
 80a2bb4:	4628      	mov	r0, r5
 80a2bb6:	f7ff fbd0 	bl	80a235a <_ZN16FuzzyComposition10checkPointEff>
 80a2bba:	2800      	cmp	r0, #0
 80a2bbc:	d037      	beq.n	80a2c2e <_ZN11FuzzyOutput8truncateEv+0x2ae>
 80a2bbe:	6820      	ldr	r0, [r4, #0]
 80a2bc0:	f000 f854 	bl	80a2c6c <_ZN8FuzzySet9getPointDEv>
 80a2bc4:	4680      	mov	r8, r0
 80a2bc6:	6820      	ldr	r0, [r4, #0]
 80a2bc8:	f000 f84a 	bl	80a2c60 <_ZN8FuzzySet9getPointAEv>
 80a2bcc:	4601      	mov	r1, r0
 80a2bce:	4640      	mov	r0, r8
 80a2bd0:	f002 fcaa 	bl	80a5528 <__aeabi_fcmpeq>
 80a2bd4:	bb58      	cbnz	r0, 80a2c2e <_ZN11FuzzyOutput8truncateEv+0x2ae>
 80a2bd6:	e7c4      	b.n	80a2b62 <_ZN11FuzzyOutput8truncateEv+0x1e2>
                    }
                }
            }else if(aux->fuzzySet->getPointB() != aux->fuzzySet->getPointC()){
                // se trapezio
                if(aux->fuzzySet->getPertinence() == 1.0){
                    if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence()) == false){
 80a2bd8:	6820      	ldr	r0, [r4, #0]
 80a2bda:	f000 f843 	bl	80a2c64 <_ZN8FuzzySet9getPointBEv>
 80a2bde:	4680      	mov	r8, r0
 80a2be0:	6820      	ldr	r0, [r4, #0]
 80a2be2:	f000 f8d8 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a2be6:	4641      	mov	r1, r8
 80a2be8:	4602      	mov	r2, r0
 80a2bea:	4628      	mov	r0, r5
 80a2bec:	f7ff fbb5 	bl	80a235a <_ZN16FuzzyComposition10checkPointEff>
 80a2bf0:	b958      	cbnz	r0, 80a2c0a <_ZN11FuzzyOutput8truncateEv+0x28a>
                        this->fuzzyComposition.addPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence());
 80a2bf2:	6820      	ldr	r0, [r4, #0]
 80a2bf4:	f000 f836 	bl	80a2c64 <_ZN8FuzzySet9getPointBEv>
 80a2bf8:	4680      	mov	r8, r0
 80a2bfa:	6820      	ldr	r0, [r4, #0]
 80a2bfc:	f000 f8cb 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a2c00:	4641      	mov	r1, r8
 80a2c02:	4602      	mov	r2, r0
 80a2c04:	4628      	mov	r0, r5
 80a2c06:	f7ff fb8f 	bl	80a2328 <_ZN16FuzzyComposition8addPointEff>
                    }

                    if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointC(), aux->fuzzySet->getPertinence()) == false){
 80a2c0a:	6820      	ldr	r0, [r4, #0]
 80a2c0c:	f000 f82c 	bl	80a2c68 <_ZN8FuzzySet9getPointCEv>
 80a2c10:	4680      	mov	r8, r0
 80a2c12:	6820      	ldr	r0, [r4, #0]
 80a2c14:	f000 f8bf 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a2c18:	4641      	mov	r1, r8
 80a2c1a:	4602      	mov	r2, r0
 80a2c1c:	4628      	mov	r0, r5
 80a2c1e:	f7ff fb9c 	bl	80a235a <_ZN16FuzzyComposition10checkPointEff>
 80a2c22:	2800      	cmp	r0, #0
 80a2c24:	d191      	bne.n	80a2b4a <_ZN11FuzzyOutput8truncateEv+0x1ca>
                        this->fuzzyComposition.addPoint(aux->fuzzySet->getPointC(), aux->fuzzySet->getPertinence());
 80a2c26:	6820      	ldr	r0, [r4, #0]
 80a2c28:	f000 f81e 	bl	80a2c68 <_ZN8FuzzySet9getPointCEv>
 80a2c2c:	e7b6      	b.n	80a2b9c <_ZN11FuzzyOutput8truncateEv+0x21c>
            }
            
            //Se não for trapezio iniciado com pertinencia 1 (sem o triangulo direito)
            if(aux->fuzzySet->getPointC() != aux->fuzzySet->getPointD()){
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointD(), 0.0) == false || aux->fuzzySet->getPointD() == aux->fuzzySet->getPointA()){
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointD(), 0.0);
 80a2c2e:	6820      	ldr	r0, [r4, #0]
 80a2c30:	f000 f81c 	bl	80a2c6c <_ZN8FuzzySet9getPointDEv>
 80a2c34:	2200      	movs	r2, #0
 80a2c36:	4601      	mov	r1, r0
 80a2c38:	4628      	mov	r0, r5
 80a2c3a:	f7ff fb75 	bl	80a2328 <_ZN16FuzzyComposition8addPointEff>
 80a2c3e:	e790      	b.n	80a2b62 <_ZN11FuzzyOutput8truncateEv+0x1e2>
            }
        }
        aux = aux->next;
    }

    this->fuzzyComposition.build();
 80a2c40:	4628      	mov	r0, r5
 80a2c42:	f7ff fd65 	bl	80a2710 <_ZN16FuzzyComposition5buildEv>

    return true;
}
 80a2c46:	2001      	movs	r0, #1
 80a2c48:	b011      	add	sp, #68	; 0x44
 80a2c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2c4e <_ZN8FuzzySetC1Effff>:
#include "FuzzySet.h"

FuzzySet::FuzzySet(){
}

FuzzySet::FuzzySet(float a, float b, float c, float d){
 80a2c4e:	b510      	push	{r4, lr}
    this->a = a;
    this->b = b;
    this->c = c;
 80a2c50:	6083      	str	r3, [r0, #8]
    this->d = d;
 80a2c52:	9b02      	ldr	r3, [sp, #8]

FuzzySet::FuzzySet(){
}

FuzzySet::FuzzySet(float a, float b, float c, float d){
    this->a = a;
 80a2c54:	6001      	str	r1, [r0, #0]
    this->b = b;
    this->c = c;
    this->d = d;
 80a2c56:	60c3      	str	r3, [r0, #12]
    this->pertinence = 0.0;
 80a2c58:	2300      	movs	r3, #0
FuzzySet::FuzzySet(){
}

FuzzySet::FuzzySet(float a, float b, float c, float d){
    this->a = a;
    this->b = b;
 80a2c5a:	6042      	str	r2, [r0, #4]
    this->c = c;
    this->d = d;
    this->pertinence = 0.0;
 80a2c5c:	6103      	str	r3, [r0, #16]
}
 80a2c5e:	bd10      	pop	{r4, pc}

080a2c60 <_ZN8FuzzySet9getPointAEv>:

float FuzzySet::getPointA(){
    return this->a;
}
 80a2c60:	6800      	ldr	r0, [r0, #0]
 80a2c62:	4770      	bx	lr

080a2c64 <_ZN8FuzzySet9getPointBEv>:

float FuzzySet::getPointB(){
    return this->b;
}
 80a2c64:	6840      	ldr	r0, [r0, #4]
 80a2c66:	4770      	bx	lr

080a2c68 <_ZN8FuzzySet9getPointCEv>:

float FuzzySet::getPointC(){
    return this->c;
}
 80a2c68:	6880      	ldr	r0, [r0, #8]
 80a2c6a:	4770      	bx	lr

080a2c6c <_ZN8FuzzySet9getPointDEv>:

float FuzzySet::getPointD(){
    return this->d;
}
 80a2c6c:	68c0      	ldr	r0, [r0, #12]
 80a2c6e:	4770      	bx	lr

080a2c70 <_ZN8FuzzySet19calculatePertinenceEf>:

bool FuzzySet::calculatePertinence(float crispValue){
 80a2c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float slope;

    if (crispValue < this->a){
 80a2c74:	6807      	ldr	r7, [r0, #0]

float FuzzySet::getPointD(){
    return this->d;
}

bool FuzzySet::calculatePertinence(float crispValue){
 80a2c76:	4604      	mov	r4, r0
    float slope;

    if (crispValue < this->a){
 80a2c78:	4638      	mov	r0, r7

float FuzzySet::getPointD(){
    return this->d;
}

bool FuzzySet::calculatePertinence(float crispValue){
 80a2c7a:	460d      	mov	r5, r1
    float slope;

    if (crispValue < this->a){
 80a2c7c:	f002 fc7c 	bl	80a5578 <__aeabi_fcmpgt>
 80a2c80:	6866      	ldr	r6, [r4, #4]
 80a2c82:	b198      	cbz	r0, 80a2cac <_ZN8FuzzySet19calculatePertinenceEf+0x3c>
        if (this->a == this->b && this->b != this->c && this->c != this->d){
 80a2c84:	4631      	mov	r1, r6
 80a2c86:	4638      	mov	r0, r7
 80a2c88:	f002 fc4e 	bl	80a5528 <__aeabi_fcmpeq>
 80a2c8c:	2800      	cmp	r0, #0
 80a2c8e:	d02e      	beq.n	80a2cee <_ZN8FuzzySet19calculatePertinenceEf+0x7e>
 80a2c90:	68a5      	ldr	r5, [r4, #8]
 80a2c92:	4630      	mov	r0, r6
 80a2c94:	4629      	mov	r1, r5
 80a2c96:	f002 fc47 	bl	80a5528 <__aeabi_fcmpeq>
 80a2c9a:	bb40      	cbnz	r0, 80a2cee <_ZN8FuzzySet19calculatePertinenceEf+0x7e>
 80a2c9c:	4628      	mov	r0, r5
 80a2c9e:	68e1      	ldr	r1, [r4, #12]
 80a2ca0:	f002 fc42 	bl	80a5528 <__aeabi_fcmpeq>
 80a2ca4:	bb18      	cbnz	r0, 80a2cee <_ZN8FuzzySet19calculatePertinenceEf+0x7e>
            this->pertinence = 1.0;
 80a2ca6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80a2caa:	e021      	b.n	80a2cf0 <_ZN8FuzzySet19calculatePertinenceEf+0x80>
        }else{
            this->pertinence = 0.0;
        }
    }else if (crispValue >= this->a && crispValue < this->b){
 80a2cac:	4629      	mov	r1, r5
 80a2cae:	4638      	mov	r0, r7
 80a2cb0:	f002 fc4e 	bl	80a5550 <__aeabi_fcmple>
 80a2cb4:	b9f0      	cbnz	r0, 80a2cf4 <_ZN8FuzzySet19calculatePertinenceEf+0x84>
        slope = 1.0 / (this->b - this->a);
        this->pertinence = slope * (crispValue - this->b) + 1.0;
    }else if (crispValue >= this->b && crispValue <= this->c){
 80a2cb6:	4631      	mov	r1, r6
 80a2cb8:	4628      	mov	r0, r5
 80a2cba:	f002 fc53 	bl	80a5564 <__aeabi_fcmpge>
 80a2cbe:	2800      	cmp	r0, #0
 80a2cc0:	d12f      	bne.n	80a2d22 <_ZN8FuzzySet19calculatePertinenceEf+0xb2>
        this->pertinence = 1.0;
    }else if (crispValue > this->c && crispValue <= this->d){
 80a2cc2:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80a2cc6:	4628      	mov	r0, r5
 80a2cc8:	4641      	mov	r1, r8
 80a2cca:	f002 fc55 	bl	80a5578 <__aeabi_fcmpgt>
 80a2cce:	f8d4 900c 	ldr.w	r9, [r4, #12]
 80a2cd2:	2800      	cmp	r0, #0
 80a2cd4:	d12c      	bne.n	80a2d30 <_ZN8FuzzySet19calculatePertinenceEf+0xc0>
        slope = 1.0 / (this->c - this->d);
        this->pertinence = slope * (crispValue - this->c) + 1.0;
    }else if (crispValue > this->d){
 80a2cd6:	4649      	mov	r1, r9
 80a2cd8:	4628      	mov	r0, r5
 80a2cda:	f002 fc4d 	bl	80a5578 <__aeabi_fcmpgt>
 80a2cde:	2800      	cmp	r0, #0
 80a2ce0:	d04d      	beq.n	80a2d7e <_ZN8FuzzySet19calculatePertinenceEf+0x10e>
        if (this->c == this->d && this->c != this->b && this->b != this->a){
 80a2ce2:	4649      	mov	r1, r9
 80a2ce4:	4640      	mov	r0, r8
 80a2ce6:	f002 fc1f 	bl	80a5528 <__aeabi_fcmpeq>
 80a2cea:	2800      	cmp	r0, #0
 80a2cec:	d13e      	bne.n	80a2d6c <_ZN8FuzzySet19calculatePertinenceEf+0xfc>

    if (crispValue < this->a){
        if (this->a == this->b && this->b != this->c && this->c != this->d){
            this->pertinence = 1.0;
        }else{
            this->pertinence = 0.0;
 80a2cee:	2300      	movs	r3, #0
 80a2cf0:	6123      	str	r3, [r4, #16]
 80a2cf2:	e044      	b.n	80a2d7e <_ZN8FuzzySet19calculatePertinenceEf+0x10e>
        }
    }else if (crispValue >= this->a && crispValue < this->b){
 80a2cf4:	4631      	mov	r1, r6
 80a2cf6:	4628      	mov	r0, r5
 80a2cf8:	f002 fc20 	bl	80a553c <__aeabi_fcmplt>
 80a2cfc:	2800      	cmp	r0, #0
 80a2cfe:	d0da      	beq.n	80a2cb6 <_ZN8FuzzySet19calculatePertinenceEf+0x46>
        slope = 1.0 / (this->b - this->a);
        this->pertinence = slope * (crispValue - this->b) + 1.0;
 80a2d00:	4639      	mov	r1, r7
 80a2d02:	4630      	mov	r0, r6
 80a2d04:	f002 f972 	bl	80a4fec <__aeabi_fsub>
 80a2d08:	4601      	mov	r1, r0
 80a2d0a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a2d0e:	f002 fb2b 	bl	80a5368 <__aeabi_fdiv>
 80a2d12:	4631      	mov	r1, r6
 80a2d14:	4607      	mov	r7, r0
 80a2d16:	4628      	mov	r0, r5
 80a2d18:	f002 f968 	bl	80a4fec <__aeabi_fsub>
 80a2d1c:	4601      	mov	r1, r0
 80a2d1e:	4638      	mov	r0, r7
 80a2d20:	e01c      	b.n	80a2d5c <_ZN8FuzzySet19calculatePertinenceEf+0xec>
    }else if (crispValue >= this->b && crispValue <= this->c){
 80a2d22:	68a1      	ldr	r1, [r4, #8]
 80a2d24:	4628      	mov	r0, r5
 80a2d26:	f002 fc13 	bl	80a5550 <__aeabi_fcmple>
 80a2d2a:	2800      	cmp	r0, #0
 80a2d2c:	d0c9      	beq.n	80a2cc2 <_ZN8FuzzySet19calculatePertinenceEf+0x52>
 80a2d2e:	e7ba      	b.n	80a2ca6 <_ZN8FuzzySet19calculatePertinenceEf+0x36>
        this->pertinence = 1.0;
    }else if (crispValue > this->c && crispValue <= this->d){
 80a2d30:	4649      	mov	r1, r9
 80a2d32:	4628      	mov	r0, r5
 80a2d34:	f002 fc0c 	bl	80a5550 <__aeabi_fcmple>
 80a2d38:	2800      	cmp	r0, #0
 80a2d3a:	d0cc      	beq.n	80a2cd6 <_ZN8FuzzySet19calculatePertinenceEf+0x66>
        slope = 1.0 / (this->c - this->d);
        this->pertinence = slope * (crispValue - this->c) + 1.0;
 80a2d3c:	4649      	mov	r1, r9
 80a2d3e:	4640      	mov	r0, r8
 80a2d40:	f002 f954 	bl	80a4fec <__aeabi_fsub>
 80a2d44:	4601      	mov	r1, r0
 80a2d46:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a2d4a:	f002 fb0d 	bl	80a5368 <__aeabi_fdiv>
 80a2d4e:	4641      	mov	r1, r8
 80a2d50:	4606      	mov	r6, r0
 80a2d52:	4628      	mov	r0, r5
 80a2d54:	f002 f94a 	bl	80a4fec <__aeabi_fsub>
 80a2d58:	4601      	mov	r1, r0
 80a2d5a:	4630      	mov	r0, r6
 80a2d5c:	f002 fa50 	bl	80a5200 <__aeabi_fmul>
 80a2d60:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2d64:	f002 f944 	bl	80a4ff0 <__addsf3>
 80a2d68:	6120      	str	r0, [r4, #16]
 80a2d6a:	e008      	b.n	80a2d7e <_ZN8FuzzySet19calculatePertinenceEf+0x10e>
    }else if (crispValue > this->d){
        if (this->c == this->d && this->c != this->b && this->b != this->a){
 80a2d6c:	4641      	mov	r1, r8
 80a2d6e:	4630      	mov	r0, r6
 80a2d70:	f002 fbda 	bl	80a5528 <__aeabi_fcmpeq>
 80a2d74:	2800      	cmp	r0, #0
 80a2d76:	d1ba      	bne.n	80a2cee <_ZN8FuzzySet19calculatePertinenceEf+0x7e>
 80a2d78:	4631      	mov	r1, r6
 80a2d7a:	4638      	mov	r0, r7
 80a2d7c:	e790      	b.n	80a2ca0 <_ZN8FuzzySet19calculatePertinenceEf+0x30>
        }else{
            this->pertinence = 0.0;
        }
    }
    return true;
}
 80a2d7e:	2001      	movs	r0, #1
 80a2d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a2d84 <_ZN8FuzzySet13setPertinenceEf>:

void FuzzySet::setPertinence(float pertinence){
 80a2d84:	b538      	push	{r3, r4, r5, lr}
 80a2d86:	4604      	mov	r4, r0
    if(this->pertinence < pertinence){
 80a2d88:	6900      	ldr	r0, [r0, #16]
        }
    }
    return true;
}

void FuzzySet::setPertinence(float pertinence){
 80a2d8a:	460d      	mov	r5, r1
    if(this->pertinence < pertinence){
 80a2d8c:	f002 fbd6 	bl	80a553c <__aeabi_fcmplt>
 80a2d90:	b100      	cbz	r0, 80a2d94 <_ZN8FuzzySet13setPertinenceEf+0x10>
        this->pertinence = pertinence;
 80a2d92:	6125      	str	r5, [r4, #16]
 80a2d94:	bd38      	pop	{r3, r4, r5, pc}

080a2d96 <_ZN8FuzzySet13getPertinenceEv>:
    }
}

float FuzzySet::getPertinence(){
    return this->pertinence;
}
 80a2d96:	6900      	ldr	r0, [r0, #16]
 80a2d98:	4770      	bx	lr

080a2d9a <_ZN8FuzzySet5resetEv>:

void FuzzySet::reset(){
    this->pertinence = 0.0;
 80a2d9a:	2300      	movs	r3, #0
 80a2d9c:	6103      	str	r3, [r0, #16]
 80a2d9e:	4770      	bx	lr

080a2da0 <_ZN19FuzzyRuleConsequentC1Ev>:
 */
#include "FuzzyRuleConsequent.h"

// CONSTRUTORES
FuzzyRuleConsequent::FuzzyRuleConsequent(){
    this->fuzzySetOutputs = NULL;
 80a2da0:	2200      	movs	r2, #0
 80a2da2:	6042      	str	r2, [r0, #4]
    this->fuzzySetOutputsCursor = NULL;
 80a2da4:	6002      	str	r2, [r0, #0]
}
 80a2da6:	4770      	bx	lr

080a2da8 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>:
FuzzyRuleConsequent::~FuzzyRuleConsequent(){
    this->cleanFuzzySets(this->fuzzySetOutputs);
}

// MÉTODOS PÚBLICOS
bool FuzzyRuleConsequent::addOutput(FuzzySet* fuzzySet){
 80a2da8:	b538      	push	{r3, r4, r5, lr}
 80a2daa:	4604      	mov	r4, r0
    fuzzySetOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetOutputArray *) malloc(sizeof(fuzzySetOutputArray))) == NULL){
 80a2dac:	2008      	movs	r0, #8
FuzzyRuleConsequent::~FuzzyRuleConsequent(){
    this->cleanFuzzySets(this->fuzzySetOutputs);
}

// MÉTODOS PÚBLICOS
bool FuzzyRuleConsequent::addOutput(FuzzySet* fuzzySet){
 80a2dae:	460d      	mov	r5, r1
    fuzzySetOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetOutputArray *) malloc(sizeof(fuzzySetOutputArray))) == NULL){
 80a2db0:	f000 fb54 	bl	80a345c <malloc>
 80a2db4:	b150      	cbz	r0, 80a2dcc <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet+0x24>
        return false;
    }
    aux->fuzzySet     = fuzzySet;
    aux->next         = NULL;
 80a2db6:	2300      	movs	r3, #0
    fuzzySetOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetOutputArray *) malloc(sizeof(fuzzySetOutputArray))) == NULL){
        return false;
    }
    aux->fuzzySet     = fuzzySet;
 80a2db8:	6005      	str	r5, [r0, #0]
    aux->next         = NULL;
 80a2dba:	6043      	str	r3, [r0, #4]

    if(this->fuzzySetOutputs == NULL){
 80a2dbc:	6863      	ldr	r3, [r4, #4]
 80a2dbe:	b90b      	cbnz	r3, 80a2dc4 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet+0x1c>
        this->fuzzySetOutputs = aux;
 80a2dc0:	6060      	str	r0, [r4, #4]
 80a2dc2:	e001      	b.n	80a2dc8 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet+0x20>
        this->fuzzySetOutputsCursor    = aux;
    }else{
        this->fuzzySetOutputsCursor->next = aux;
 80a2dc4:	6823      	ldr	r3, [r4, #0]
 80a2dc6:	6058      	str	r0, [r3, #4]
        this->fuzzySetOutputsCursor = aux;
 80a2dc8:	6020      	str	r0, [r4, #0]
    }
    return true;
 80a2dca:	2001      	movs	r0, #1
}
 80a2dcc:	bd38      	pop	{r3, r4, r5, pc}

080a2dce <_ZN19FuzzyRuleConsequent8evaluateEf>:

bool FuzzyRuleConsequent::evaluate(float power){
 80a2dce:	b538      	push	{r3, r4, r5, lr}
 80a2dd0:	460d      	mov	r5, r1
    fuzzySetOutputArray *aux;
    aux = this->fuzzySetOutputs;
 80a2dd2:	6844      	ldr	r4, [r0, #4]
    while(aux != NULL){
 80a2dd4:	b12c      	cbz	r4, 80a2de2 <_ZN19FuzzyRuleConsequent8evaluateEf+0x14>
        aux->fuzzySet->setPertinence(power);
 80a2dd6:	6820      	ldr	r0, [r4, #0]
 80a2dd8:	4629      	mov	r1, r5
 80a2dda:	f7ff ffd3 	bl	80a2d84 <_ZN8FuzzySet13setPertinenceEf>
        aux = aux->next;
 80a2dde:	6864      	ldr	r4, [r4, #4]
}

bool FuzzyRuleConsequent::evaluate(float power){
    fuzzySetOutputArray *aux;
    aux = this->fuzzySetOutputs;
    while(aux != NULL){
 80a2de0:	e7f8      	b.n	80a2dd4 <_ZN19FuzzyRuleConsequent8evaluateEf+0x6>
        aux->fuzzySet->setPertinence(power);
        aux = aux->next;
    }
    return true;
}
 80a2de2:	2001      	movs	r0, #1
 80a2de4:	bd38      	pop	{r3, r4, r5, pc}

080a2de6 <_ZN5FuzzyC1Ev>:

// CONSTRUTORES
Fuzzy::Fuzzy(){
    // Iniciando os ponteiros como nulo
    // FuzzyInput
    this->fuzzyInputs       = NULL;
 80a2de6:	2200      	movs	r2, #0
 80a2de8:	6042      	str	r2, [r0, #4]
    this->fuzzyInputsCursor = NULL;
 80a2dea:	6002      	str	r2, [r0, #0]
    // FuzzyOutput
    this->fuzzyOutputs          = NULL;
 80a2dec:	60c2      	str	r2, [r0, #12]
    this->fuzzyOutputsCursor    = NULL;
 80a2dee:	6082      	str	r2, [r0, #8]
    // FuzzyRule
    this->fuzzyRules        = NULL;
 80a2df0:	6142      	str	r2, [r0, #20]
    this->fuzzyRulesCursor  = NULL;
 80a2df2:	6102      	str	r2, [r0, #16]
}
 80a2df4:	4770      	bx	lr

080a2df6 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>:
    this->cleanFuzzyOutputs(this->fuzzyOutputs);
    this->cleanFuzzyRules(this->fuzzyRules);
}

// MÉTODOS PÚBLICOS
bool Fuzzy::addFuzzyInput(FuzzyInput* fuzzyInput){
 80a2df6:	b538      	push	{r3, r4, r5, lr}
 80a2df8:	4604      	mov	r4, r0
    fuzzyInputArray* aux;
    
    // Alocando espaço na memória
    if((aux = (fuzzyInputArray *) malloc(sizeof(fuzzyInputArray))) == NULL){
 80a2dfa:	2008      	movs	r0, #8
    this->cleanFuzzyOutputs(this->fuzzyOutputs);
    this->cleanFuzzyRules(this->fuzzyRules);
}

// MÉTODOS PÚBLICOS
bool Fuzzy::addFuzzyInput(FuzzyInput* fuzzyInput){
 80a2dfc:	460d      	mov	r5, r1
    fuzzyInputArray* aux;
    
    // Alocando espaço na memória
    if((aux = (fuzzyInputArray *) malloc(sizeof(fuzzyInputArray))) == NULL){
 80a2dfe:	f000 fb2d 	bl	80a345c <malloc>
 80a2e02:	b150      	cbz	r0, 80a2e1a <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput+0x24>
        return false;
    }

    aux->fuzzyInput = fuzzyInput;
    aux->next = NULL;
 80a2e04:	2300      	movs	r3, #0
    // Alocando espaço na memória
    if((aux = (fuzzyInputArray *) malloc(sizeof(fuzzyInputArray))) == NULL){
        return false;
    }

    aux->fuzzyInput = fuzzyInput;
 80a2e06:	6005      	str	r5, [r0, #0]
    aux->next = NULL;
 80a2e08:	6043      	str	r3, [r0, #4]

    if(this->fuzzyInputs == NULL){
 80a2e0a:	6863      	ldr	r3, [r4, #4]
 80a2e0c:	b90b      	cbnz	r3, 80a2e12 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput+0x1c>
        this->fuzzyInputs = aux;
 80a2e0e:	6060      	str	r0, [r4, #4]
 80a2e10:	e001      	b.n	80a2e16 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput+0x20>
        this->fuzzyInputsCursor  = aux;
    }else{
        this->fuzzyInputsCursor->next = aux;
 80a2e12:	6823      	ldr	r3, [r4, #0]
 80a2e14:	6058      	str	r0, [r3, #4]
        this->fuzzyInputsCursor = aux;
 80a2e16:	6020      	str	r0, [r4, #0]
    }

    return true;
 80a2e18:	2001      	movs	r0, #1
}
 80a2e1a:	bd38      	pop	{r3, r4, r5, pc}

080a2e1c <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput>:

bool Fuzzy::addFuzzyOutput(FuzzyOutput* fuzzyOutput){
 80a2e1c:	b570      	push	{r4, r5, r6, lr}
 80a2e1e:	4605      	mov	r5, r0
    fuzzyOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzyOutputArray *) malloc(sizeof(fuzzyOutputArray))) == NULL){
 80a2e20:	2008      	movs	r0, #8
    }

    return true;
}

bool Fuzzy::addFuzzyOutput(FuzzyOutput* fuzzyOutput){
 80a2e22:	460e      	mov	r6, r1
    fuzzyOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzyOutputArray *) malloc(sizeof(fuzzyOutputArray))) == NULL){
 80a2e24:	f000 fb1a 	bl	80a345c <malloc>
 80a2e28:	4604      	mov	r4, r0
 80a2e2a:	b170      	cbz	r0, 80a2e4a <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput+0x2e>
        return false;
    }
    aux->fuzzyOutput = fuzzyOutput;
    aux->next = NULL;
 80a2e2c:	2300      	movs	r3, #0
 80a2e2e:	6043      	str	r3, [r0, #4]
    fuzzyOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzyOutputArray *) malloc(sizeof(fuzzyOutputArray))) == NULL){
        return false;
    }
    aux->fuzzyOutput = fuzzyOutput;
 80a2e30:	6006      	str	r6, [r0, #0]
    aux->next = NULL;

    // Ordenando o fuzzyOutput
    fuzzyOutput->order();
 80a2e32:	4630      	mov	r0, r6
 80a2e34:	f7ff fcd4 	bl	80a27e0 <_ZN11FuzzyOutput5orderEv>

    if(this->fuzzyOutputs == NULL){
 80a2e38:	68eb      	ldr	r3, [r5, #12]
 80a2e3a:	b90b      	cbnz	r3, 80a2e40 <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput+0x24>
        this->fuzzyOutputs = aux;
 80a2e3c:	60ec      	str	r4, [r5, #12]
 80a2e3e:	e001      	b.n	80a2e44 <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput+0x28>
        this->fuzzyOutputsCursor  = aux;
    }else{
        this->fuzzyOutputsCursor->next = aux;
 80a2e40:	68ab      	ldr	r3, [r5, #8]
 80a2e42:	605c      	str	r4, [r3, #4]
        this->fuzzyOutputsCursor = aux;
 80a2e44:	60ac      	str	r4, [r5, #8]
    }
    return true;
 80a2e46:	2001      	movs	r0, #1
 80a2e48:	bd70      	pop	{r4, r5, r6, pc}
}
 80a2e4a:	bd70      	pop	{r4, r5, r6, pc}

080a2e4c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>:

bool Fuzzy::addFuzzyRule(FuzzyRule* fuzzyRule){
 80a2e4c:	b538      	push	{r3, r4, r5, lr}
 80a2e4e:	4604      	mov	r4, r0
    fuzzyRuleArray* aux;
    // Alocando espaço na memória
    if((aux = (fuzzyRuleArray *) malloc(sizeof(fuzzyRuleArray))) == NULL){
 80a2e50:	2008      	movs	r0, #8
        this->fuzzyOutputsCursor = aux;
    }
    return true;
}

bool Fuzzy::addFuzzyRule(FuzzyRule* fuzzyRule){
 80a2e52:	460d      	mov	r5, r1
    fuzzyRuleArray* aux;
    // Alocando espaço na memória
    if((aux = (fuzzyRuleArray *) malloc(sizeof(fuzzyRuleArray))) == NULL){
 80a2e54:	f000 fb02 	bl	80a345c <malloc>
 80a2e58:	b150      	cbz	r0, 80a2e70 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule+0x24>
        return false;
    }
    aux->fuzzyRule = fuzzyRule;
    aux->next = NULL;
 80a2e5a:	2300      	movs	r3, #0
    fuzzyRuleArray* aux;
    // Alocando espaço na memória
    if((aux = (fuzzyRuleArray *) malloc(sizeof(fuzzyRuleArray))) == NULL){
        return false;
    }
    aux->fuzzyRule = fuzzyRule;
 80a2e5c:	6005      	str	r5, [r0, #0]
    aux->next = NULL;
 80a2e5e:	6043      	str	r3, [r0, #4]

    if(this->fuzzyRules == NULL){
 80a2e60:	6963      	ldr	r3, [r4, #20]
 80a2e62:	b90b      	cbnz	r3, 80a2e68 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule+0x1c>
        this->fuzzyRules = aux;
 80a2e64:	6160      	str	r0, [r4, #20]
 80a2e66:	e001      	b.n	80a2e6c <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule+0x20>
        this->fuzzyRulesCursor  = aux;
    }else{
        this->fuzzyRulesCursor->next = aux;
 80a2e68:	6923      	ldr	r3, [r4, #16]
 80a2e6a:	6058      	str	r0, [r3, #4]
        this->fuzzyRulesCursor = aux;
 80a2e6c:	6120      	str	r0, [r4, #16]
    }
    return true;
 80a2e6e:	2001      	movs	r0, #1
}
 80a2e70:	bd38      	pop	{r3, r4, r5, pc}

080a2e72 <_ZN5Fuzzy8setInputEif>:

bool Fuzzy::setInput(int fuzzyInputIndex, float crispValue){
 80a2e72:	b570      	push	{r4, r5, r6, lr}
 80a2e74:	460d      	mov	r5, r1
 80a2e76:	4616      	mov	r6, r2
    fuzzyInputArray *aux;
    aux = this->fuzzyInputs;
 80a2e78:	6844      	ldr	r4, [r0, #4]

    while(aux != NULL){
 80a2e7a:	b164      	cbz	r4, 80a2e96 <_ZN5Fuzzy8setInputEif+0x24>
        if(aux->fuzzyInput->getIndex() == fuzzyInputIndex){
 80a2e7c:	6820      	ldr	r0, [r4, #0]
 80a2e7e:	f7ff fc82 	bl	80a2786 <_ZN7FuzzyIO8getIndexEv>
 80a2e82:	42a8      	cmp	r0, r5
 80a2e84:	d105      	bne.n	80a2e92 <_ZN5Fuzzy8setInputEif+0x20>
            aux->fuzzyInput->setCrispInput(crispValue);
 80a2e86:	6820      	ldr	r0, [r4, #0]
 80a2e88:	4631      	mov	r1, r6
 80a2e8a:	f7ff fc7e 	bl	80a278a <_ZN7FuzzyIO13setCrispInputEf>
            return true;
 80a2e8e:	2001      	movs	r0, #1
 80a2e90:	bd70      	pop	{r4, r5, r6, pc}
        }
        aux = aux->next;
 80a2e92:	6864      	ldr	r4, [r4, #4]

bool Fuzzy::setInput(int fuzzyInputIndex, float crispValue){
    fuzzyInputArray *aux;
    aux = this->fuzzyInputs;

    while(aux != NULL){
 80a2e94:	e7f1      	b.n	80a2e7a <_ZN5Fuzzy8setInputEif+0x8>
            aux->fuzzyInput->setCrispInput(crispValue);
            return true;
        }
        aux = aux->next;
    }
    return false;
 80a2e96:	4620      	mov	r0, r4
}
 80a2e98:	bd70      	pop	{r4, r5, r6, pc}

080a2e9a <_ZN5Fuzzy7fuzzifyEv>:

bool Fuzzy::fuzzify(){
 80a2e9a:	b538      	push	{r3, r4, r5, lr}
 80a2e9c:	4604      	mov	r4, r0
    fuzzyInputArray* fuzzyInputAux;

    fuzzyOutputArray *fuzzyOutputAux;

    fuzzyInputAux = this->fuzzyInputs;
 80a2e9e:	6845      	ldr	r5, [r0, #4]
    while(fuzzyInputAux != NULL){
 80a2ea0:	b125      	cbz	r5, 80a2eac <_ZN5Fuzzy7fuzzifyEv+0x12>
        fuzzyInputAux->fuzzyInput->resetFuzzySets();
 80a2ea2:	6828      	ldr	r0, [r5, #0]
 80a2ea4:	f7ff fc86 	bl	80a27b4 <_ZN7FuzzyIO14resetFuzzySetsEv>
        fuzzyInputAux = fuzzyInputAux->next;
 80a2ea8:	686d      	ldr	r5, [r5, #4]
    fuzzyInputArray* fuzzyInputAux;

    fuzzyOutputArray *fuzzyOutputAux;

    fuzzyInputAux = this->fuzzyInputs;
    while(fuzzyInputAux != NULL){
 80a2eaa:	e7f9      	b.n	80a2ea0 <_ZN5Fuzzy7fuzzifyEv+0x6>
        fuzzyInputAux->fuzzyInput->resetFuzzySets();
        fuzzyInputAux = fuzzyInputAux->next;
    }

    fuzzyOutputAux = this->fuzzyOutputs;
 80a2eac:	68e5      	ldr	r5, [r4, #12]
    while(fuzzyOutputAux != NULL){
 80a2eae:	b125      	cbz	r5, 80a2eba <_ZN5Fuzzy7fuzzifyEv+0x20>
        fuzzyOutputAux->fuzzyOutput->resetFuzzySets();
 80a2eb0:	6828      	ldr	r0, [r5, #0]
 80a2eb2:	f7ff fc7f 	bl	80a27b4 <_ZN7FuzzyIO14resetFuzzySetsEv>
        fuzzyOutputAux = fuzzyOutputAux->next;
 80a2eb6:	686d      	ldr	r5, [r5, #4]
        fuzzyInputAux->fuzzyInput->resetFuzzySets();
        fuzzyInputAux = fuzzyInputAux->next;
    }

    fuzzyOutputAux = this->fuzzyOutputs;
    while(fuzzyOutputAux != NULL){
 80a2eb8:	e7f9      	b.n	80a2eae <_ZN5Fuzzy7fuzzifyEv+0x14>
        fuzzyOutputAux->fuzzyOutput->resetFuzzySets();
        fuzzyOutputAux = fuzzyOutputAux->next;
    }

    // Calculando a pertinência de todos os FuzzyInputs
    fuzzyInputAux = this->fuzzyInputs;
 80a2eba:	6865      	ldr	r5, [r4, #4]
    while(fuzzyInputAux != NULL){
 80a2ebc:	b125      	cbz	r5, 80a2ec8 <_ZN5Fuzzy7fuzzifyEv+0x2e>
        fuzzyInputAux->fuzzyInput->calculateFuzzySetPertinences();
 80a2ebe:	6828      	ldr	r0, [r5, #0]
 80a2ec0:	f7ff fc4f 	bl	80a2762 <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv>
        fuzzyInputAux = fuzzyInputAux->next;
 80a2ec4:	686d      	ldr	r5, [r5, #4]
        fuzzyOutputAux = fuzzyOutputAux->next;
    }

    // Calculando a pertinência de todos os FuzzyInputs
    fuzzyInputAux = this->fuzzyInputs;
    while(fuzzyInputAux != NULL){
 80a2ec6:	e7f9      	b.n	80a2ebc <_ZN5Fuzzy7fuzzifyEv+0x22>
        fuzzyInputAux = fuzzyInputAux->next;
    }

    // Avaliando quais regras foram disparadas
    fuzzyRuleArray* fuzzyRuleAux;
    fuzzyRuleAux = this->fuzzyRules;
 80a2ec8:	6965      	ldr	r5, [r4, #20]
    // Calculando as pertinências de totos os FuzzyInputs
    while(fuzzyRuleAux != NULL){
 80a2eca:	b125      	cbz	r5, 80a2ed6 <_ZN5Fuzzy7fuzzifyEv+0x3c>
        fuzzyRuleAux->fuzzyRule->evaluateExpression();
 80a2ecc:	6828      	ldr	r0, [r5, #0]
 80a2ece:	f7ff fa12 	bl	80a22f6 <_ZN9FuzzyRule18evaluateExpressionEv>
        fuzzyRuleAux = fuzzyRuleAux->next;
 80a2ed2:	686d      	ldr	r5, [r5, #4]

    // Avaliando quais regras foram disparadas
    fuzzyRuleArray* fuzzyRuleAux;
    fuzzyRuleAux = this->fuzzyRules;
    // Calculando as pertinências de totos os FuzzyInputs
    while(fuzzyRuleAux != NULL){
 80a2ed4:	e7f9      	b.n	80a2eca <_ZN5Fuzzy7fuzzifyEv+0x30>
        fuzzyRuleAux->fuzzyRule->evaluateExpression();
        fuzzyRuleAux = fuzzyRuleAux->next;
    }

    // Truncado os conjuntos de saída
    fuzzyOutputAux = this->fuzzyOutputs;
 80a2ed6:	68e4      	ldr	r4, [r4, #12]
    while(fuzzyOutputAux != NULL){
 80a2ed8:	b124      	cbz	r4, 80a2ee4 <_ZN5Fuzzy7fuzzifyEv+0x4a>
        fuzzyOutputAux->fuzzyOutput->truncate();
 80a2eda:	6820      	ldr	r0, [r4, #0]
 80a2edc:	f7ff fd50 	bl	80a2980 <_ZN11FuzzyOutput8truncateEv>
        fuzzyOutputAux = fuzzyOutputAux->next;
 80a2ee0:	6864      	ldr	r4, [r4, #4]
        fuzzyRuleAux = fuzzyRuleAux->next;
    }

    // Truncado os conjuntos de saída
    fuzzyOutputAux = this->fuzzyOutputs;
    while(fuzzyOutputAux != NULL){
 80a2ee2:	e7f9      	b.n	80a2ed8 <_ZN5Fuzzy7fuzzifyEv+0x3e>
        fuzzyOutputAux->fuzzyOutput->truncate();
        fuzzyOutputAux = fuzzyOutputAux->next;
    }

    return true;
}
 80a2ee4:	2001      	movs	r0, #1
 80a2ee6:	bd38      	pop	{r3, r4, r5, pc}

080a2ee8 <_ZN5Fuzzy9defuzzifyEi>:
        aux = aux->next;
    }
    return false;
}

float Fuzzy::defuzzify(int fuzzyOutputIndex){
 80a2ee8:	b538      	push	{r3, r4, r5, lr}
 80a2eea:	460d      	mov	r5, r1
    fuzzyOutputArray *aux;
    aux = this->fuzzyOutputs;
 80a2eec:	68c4      	ldr	r4, [r0, #12]
    while(aux != NULL){
 80a2eee:	b15c      	cbz	r4, 80a2f08 <_ZN5Fuzzy9defuzzifyEi+0x20>
        if(aux->fuzzyOutput->getIndex() == fuzzyOutputIndex){
 80a2ef0:	6820      	ldr	r0, [r4, #0]
 80a2ef2:	f7ff fc48 	bl	80a2786 <_ZN7FuzzyIO8getIndexEv>
 80a2ef6:	42a8      	cmp	r0, r5
 80a2ef8:	d104      	bne.n	80a2f04 <_ZN5Fuzzy9defuzzifyEi+0x1c>
            return aux->fuzzyOutput->getCrispOutput();
 80a2efa:	6820      	ldr	r0, [r4, #0]
        }
        aux = aux->next;
    }
    return 0;
}
 80a2efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
float Fuzzy::defuzzify(int fuzzyOutputIndex){
    fuzzyOutputArray *aux;
    aux = this->fuzzyOutputs;
    while(aux != NULL){
        if(aux->fuzzyOutput->getIndex() == fuzzyOutputIndex){
            return aux->fuzzyOutput->getCrispOutput();
 80a2f00:	f7ff bc6b 	b.w	80a27da <_ZN11FuzzyOutput14getCrispOutputEv>
        }
        aux = aux->next;
 80a2f04:	6864      	ldr	r4, [r4, #4]
}

float Fuzzy::defuzzify(int fuzzyOutputIndex){
    fuzzyOutputArray *aux;
    aux = this->fuzzyOutputs;
    while(aux != NULL){
 80a2f06:	e7f2      	b.n	80a2eee <_ZN5Fuzzy9defuzzifyEi+0x6>
            return aux->fuzzyOutput->getCrispOutput();
        }
        aux = aux->next;
    }
    return 0;
}
 80a2f08:	2000      	movs	r0, #0
 80a2f0a:	bd38      	pop	{r3, r4, r5, pc}

080a2f0c <_ZN19FuzzyRuleAntecedentC1Ev>:
 */
#include "FuzzyRuleAntecedent.h"

// CONSTRUTORES
FuzzyRuleAntecedent::FuzzyRuleAntecedent(){
    this->op = 0;
 80a2f0c:	2200      	movs	r2, #0
 80a2f0e:	6002      	str	r2, [r0, #0]
    this->mode = 0;
 80a2f10:	6042      	str	r2, [r0, #4]
    this->fuzzySet1 = NULL;
 80a2f12:	6082      	str	r2, [r0, #8]
    this->fuzzySet2 = NULL;
 80a2f14:	60c2      	str	r2, [r0, #12]
    this->fuzzyRuleAntecedent1 = NULL;
 80a2f16:	6102      	str	r2, [r0, #16]
    this->fuzzyRuleAntecedent2 = NULL;
 80a2f18:	6142      	str	r2, [r0, #20]
}
 80a2f1a:	4770      	bx	lr

080a2f1c <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>:
        return true;
    }
    return false;
}

bool FuzzyRuleAntecedent::joinWithAND(FuzzySet* fuzzySet1, FuzzySet* fuzzySet2){
 80a2f1c:	b510      	push	{r4, lr}
 80a2f1e:	4603      	mov	r3, r0
    if(fuzzySet1 != NULL && fuzzySet2 != NULL){
 80a2f20:	b139      	cbz	r1, 80a2f32 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_+0x16>
 80a2f22:	b142      	cbz	r2, 80a2f36 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_+0x1a>
        this->op = OP_AND;
        this->mode = MODE_FS_FS;
 80a2f24:	2001      	movs	r0, #1
 80a2f26:	2402      	movs	r4, #2
 80a2f28:	e883 0011 	stmia.w	r3, {r0, r4}
        this->fuzzySet1 = fuzzySet1;
 80a2f2c:	6099      	str	r1, [r3, #8]
        this->fuzzySet2 = fuzzySet2;
 80a2f2e:	60da      	str	r2, [r3, #12]
        return true;
 80a2f30:	bd10      	pop	{r4, pc}
    }
    return false;
 80a2f32:	4608      	mov	r0, r1
 80a2f34:	bd10      	pop	{r4, pc}
 80a2f36:	4610      	mov	r0, r2
}
 80a2f38:	bd10      	pop	{r4, pc}

080a2f3a <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>:
        return true;
    }
    return false;
}

bool FuzzyRuleAntecedent::joinWithAND(FuzzyRuleAntecedent* fuzzyRuleAntecedent1, FuzzyRuleAntecedent* fuzzyRuleAntecedent2){
 80a2f3a:	b510      	push	{r4, lr}
 80a2f3c:	4603      	mov	r3, r0
    if(fuzzyRuleAntecedent1 != NULL && fuzzyRuleAntecedent2 != NULL){
 80a2f3e:	b139      	cbz	r1, 80a2f50 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_+0x16>
 80a2f40:	b142      	cbz	r2, 80a2f54 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_+0x1a>
        this->op = OP_AND;
        this->mode = MODE_FRA_FRA;
 80a2f42:	2001      	movs	r0, #1
 80a2f44:	2404      	movs	r4, #4
 80a2f46:	e883 0011 	stmia.w	r3, {r0, r4}
        this->fuzzyRuleAntecedent1 = fuzzyRuleAntecedent1;
 80a2f4a:	6119      	str	r1, [r3, #16]
        this->fuzzyRuleAntecedent2 = fuzzyRuleAntecedent2;
 80a2f4c:	615a      	str	r2, [r3, #20]
        return true;
 80a2f4e:	bd10      	pop	{r4, pc}
    }
    return false;
 80a2f50:	4608      	mov	r0, r1
 80a2f52:	bd10      	pop	{r4, pc}
 80a2f54:	4610      	mov	r0, r2
}
 80a2f56:	bd10      	pop	{r4, pc}

080a2f58 <_ZN19FuzzyRuleAntecedent8evaluateEv>:
        return true;
    }
    return false;
}

float FuzzyRuleAntecedent::evaluate(){
 80a2f58:	b538      	push	{r3, r4, r5, lr}
 80a2f5a:	4604      	mov	r4, r0
    switch(this->mode){
 80a2f5c:	6863      	ldr	r3, [r4, #4]
 80a2f5e:	3b01      	subs	r3, #1
 80a2f60:	2b03      	cmp	r3, #3
 80a2f62:	f200 80ce 	bhi.w	80a3102 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
 80a2f66:	e8df f003 	tbb	[pc, r3]
 80a2f6a:	0276      	.short	0x0276
 80a2f6c:	7b37      	.short	0x7b37
        case MODE_FS:
            return this->fuzzySet1->getPertinence();
            break;
        case MODE_FS_FS:
            switch(this->op){
 80a2f6e:	6823      	ldr	r3, [r4, #0]
 80a2f70:	2b01      	cmp	r3, #1
 80a2f72:	d002      	beq.n	80a2f7a <_ZN19FuzzyRuleAntecedent8evaluateEv+0x22>
 80a2f74:	2b02      	cmp	r3, #2
 80a2f76:	d01e      	beq.n	80a2fb6 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x5e>
 80a2f78:	e0c3      	b.n	80a3102 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                case OP_AND:
                    if(this->fuzzySet1->getPertinence() > 0.0 && this->fuzzySet2->getPertinence() > 0.0){
 80a2f7a:	68a0      	ldr	r0, [r4, #8]
 80a2f7c:	f7ff ff0b 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a2f80:	2100      	movs	r1, #0
 80a2f82:	f002 faf9 	bl	80a5578 <__aeabi_fcmpgt>
 80a2f86:	2800      	cmp	r0, #0
 80a2f88:	f000 80bb 	beq.w	80a3102 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
 80a2f8c:	68e0      	ldr	r0, [r4, #12]
 80a2f8e:	f7ff ff02 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a2f92:	2100      	movs	r1, #0
 80a2f94:	f002 faf0 	bl	80a5578 <__aeabi_fcmpgt>
 80a2f98:	2800      	cmp	r0, #0
 80a2f9a:	f000 80b2 	beq.w	80a3102 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        if(this->fuzzySet1->getPertinence() < this->fuzzySet2->getPertinence()){
 80a2f9e:	68a0      	ldr	r0, [r4, #8]
 80a2fa0:	f7ff fef9 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a2fa4:	4605      	mov	r5, r0
 80a2fa6:	68e0      	ldr	r0, [r4, #12]
 80a2fa8:	f7ff fef5 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a2fac:	4601      	mov	r1, r0
 80a2fae:	4628      	mov	r0, r5
 80a2fb0:	f002 fac4 	bl	80a553c <__aeabi_fcmplt>
 80a2fb4:	e090      	b.n	80a30d8 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x180>
                    }else{
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(this->fuzzySet1->getPertinence() > 0.0 || this->fuzzySet2->getPertinence() > 0.0){
 80a2fb6:	68a0      	ldr	r0, [r4, #8]
 80a2fb8:	f7ff feed 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a2fbc:	2100      	movs	r1, #0
 80a2fbe:	f002 fadb 	bl	80a5578 <__aeabi_fcmpgt>
 80a2fc2:	2800      	cmp	r0, #0
 80a2fc4:	d17d      	bne.n	80a30c2 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x16a>
 80a2fc6:	68e0      	ldr	r0, [r4, #12]
 80a2fc8:	f7ff fee5 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a2fcc:	2100      	movs	r1, #0
 80a2fce:	f002 fad3 	bl	80a5578 <__aeabi_fcmpgt>
 80a2fd2:	2800      	cmp	r0, #0
 80a2fd4:	d175      	bne.n	80a30c2 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x16a>
 80a2fd6:	e094      	b.n	80a3102 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                default:
                    return 0.0;
            }
            break;
        case MODE_FS_FRA:
            switch(this->op){
 80a2fd8:	6823      	ldr	r3, [r4, #0]
 80a2fda:	2b01      	cmp	r3, #1
 80a2fdc:	d002      	beq.n	80a2fe4 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x8c>
 80a2fde:	2b02      	cmp	r3, #2
 80a2fe0:	d01d      	beq.n	80a301e <_ZN19FuzzyRuleAntecedent8evaluateEv+0xc6>
 80a2fe2:	e08e      	b.n	80a3102 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                case OP_AND:
                    if(this->fuzzySet1->getPertinence() > 0.0 && fuzzyRuleAntecedent1->evaluate() > 0.0){
 80a2fe4:	68a0      	ldr	r0, [r4, #8]
 80a2fe6:	f7ff fed6 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a2fea:	2100      	movs	r1, #0
 80a2fec:	f002 fac4 	bl	80a5578 <__aeabi_fcmpgt>
 80a2ff0:	2800      	cmp	r0, #0
 80a2ff2:	f000 8086 	beq.w	80a3102 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
 80a2ff6:	6920      	ldr	r0, [r4, #16]
 80a2ff8:	f7ff ffae 	bl	80a2f58 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a2ffc:	2100      	movs	r1, #0
 80a2ffe:	f002 fabb 	bl	80a5578 <__aeabi_fcmpgt>
 80a3002:	2800      	cmp	r0, #0
 80a3004:	d07d      	beq.n	80a3102 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        if(this->fuzzySet1->getPertinence() < fuzzyRuleAntecedent1->evaluate()){
 80a3006:	68a0      	ldr	r0, [r4, #8]
 80a3008:	f7ff fec5 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a300c:	4605      	mov	r5, r0
 80a300e:	6920      	ldr	r0, [r4, #16]
 80a3010:	f7ff ffa2 	bl	80a2f58 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3014:	4601      	mov	r1, r0
 80a3016:	4628      	mov	r0, r5
 80a3018:	f002 fa90 	bl	80a553c <__aeabi_fcmplt>
 80a301c:	e019      	b.n	80a3052 <_ZN19FuzzyRuleAntecedent8evaluateEv+0xfa>
                    }else{
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(this->fuzzySet1->getPertinence() > 0.0 || fuzzyRuleAntecedent1->evaluate() > 0.0){
 80a301e:	68a0      	ldr	r0, [r4, #8]
 80a3020:	f7ff feb9 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a3024:	2100      	movs	r1, #0
 80a3026:	f002 faa7 	bl	80a5578 <__aeabi_fcmpgt>
 80a302a:	b938      	cbnz	r0, 80a303c <_ZN19FuzzyRuleAntecedent8evaluateEv+0xe4>
 80a302c:	6920      	ldr	r0, [r4, #16]
 80a302e:	f7ff ff93 	bl	80a2f58 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3032:	2100      	movs	r1, #0
 80a3034:	f002 faa0 	bl	80a5578 <__aeabi_fcmpgt>
 80a3038:	2800      	cmp	r0, #0
 80a303a:	d062      	beq.n	80a3102 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        if(this->fuzzySet1->getPertinence() > fuzzyRuleAntecedent1->evaluate()){
 80a303c:	68a0      	ldr	r0, [r4, #8]
 80a303e:	f7ff feaa 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a3042:	4605      	mov	r5, r0
 80a3044:	6920      	ldr	r0, [r4, #16]
 80a3046:	f7ff ff87 	bl	80a2f58 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a304a:	4601      	mov	r1, r0
 80a304c:	4628      	mov	r0, r5
 80a304e:	f002 fa93 	bl	80a5578 <__aeabi_fcmpgt>
 80a3052:	2800      	cmp	r0, #0
 80a3054:	d044      	beq.n	80a30e0 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x188>
                            return this->fuzzySet1->getPertinence();
 80a3056:	68a0      	ldr	r0, [r4, #8]
            break;
        default:
            return 0.0;
    }
    return 0.0;
 80a3058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                    }
                    break;
                case OP_OR:
                    if(this->fuzzySet1->getPertinence() > 0.0 || fuzzyRuleAntecedent1->evaluate() > 0.0){
                        if(this->fuzzySet1->getPertinence() > fuzzyRuleAntecedent1->evaluate()){
                            return this->fuzzySet1->getPertinence();
 80a305c:	f7ff be9b 	b.w	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
                default:
                    return 0.0;
            }
            break;
        case MODE_FRA_FRA:
            switch(this->op){
 80a3060:	6823      	ldr	r3, [r4, #0]
 80a3062:	2b01      	cmp	r3, #1
 80a3064:	d002      	beq.n	80a306c <_ZN19FuzzyRuleAntecedent8evaluateEv+0x114>
 80a3066:	2b02      	cmp	r3, #2
 80a3068:	d01c      	beq.n	80a30a4 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x14c>
 80a306a:	e04a      	b.n	80a3102 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                case OP_AND:
                    if(fuzzyRuleAntecedent1->evaluate() > 0.0 && fuzzyRuleAntecedent2->evaluate() > 0.0){
 80a306c:	6920      	ldr	r0, [r4, #16]
 80a306e:	f7ff ff73 	bl	80a2f58 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3072:	2100      	movs	r1, #0
 80a3074:	f002 fa80 	bl	80a5578 <__aeabi_fcmpgt>
 80a3078:	2800      	cmp	r0, #0
 80a307a:	d042      	beq.n	80a3102 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
 80a307c:	6960      	ldr	r0, [r4, #20]
 80a307e:	f7ff ff6b 	bl	80a2f58 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3082:	2100      	movs	r1, #0
 80a3084:	f002 fa78 	bl	80a5578 <__aeabi_fcmpgt>
 80a3088:	2800      	cmp	r0, #0
 80a308a:	d03a      	beq.n	80a3102 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        if(fuzzyRuleAntecedent1->evaluate() < fuzzyRuleAntecedent2->evaluate()){
 80a308c:	6920      	ldr	r0, [r4, #16]
 80a308e:	f7ff ff63 	bl	80a2f58 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3092:	4605      	mov	r5, r0
 80a3094:	6960      	ldr	r0, [r4, #20]
 80a3096:	f7ff ff5f 	bl	80a2f58 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a309a:	4601      	mov	r1, r0
 80a309c:	4628      	mov	r0, r5
 80a309e:	f002 fa4d 	bl	80a553c <__aeabi_fcmplt>
 80a30a2:	e02a      	b.n	80a30fa <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1a2>
                    }else{
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(fuzzyRuleAntecedent1->evaluate() > 0.0 || fuzzyRuleAntecedent2->evaluate() > 0.0){
 80a30a4:	6920      	ldr	r0, [r4, #16]
 80a30a6:	f7ff ff57 	bl	80a2f58 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a30aa:	2100      	movs	r1, #0
 80a30ac:	f002 fa64 	bl	80a5578 <__aeabi_fcmpgt>
 80a30b0:	b9c0      	cbnz	r0, 80a30e4 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x18c>
 80a30b2:	6960      	ldr	r0, [r4, #20]
 80a30b4:	f7ff ff50 	bl	80a2f58 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a30b8:	2100      	movs	r1, #0
 80a30ba:	f002 fa5d 	bl	80a5578 <__aeabi_fcmpgt>
 80a30be:	b988      	cbnz	r0, 80a30e4 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x18c>
 80a30c0:	e01f      	b.n	80a3102 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(this->fuzzySet1->getPertinence() > 0.0 || this->fuzzySet2->getPertinence() > 0.0){
                        if(this->fuzzySet1->getPertinence() > this->fuzzySet2->getPertinence()){
 80a30c2:	68a0      	ldr	r0, [r4, #8]
 80a30c4:	f7ff fe67 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a30c8:	4605      	mov	r5, r0
 80a30ca:	68e0      	ldr	r0, [r4, #12]
 80a30cc:	f7ff fe63 	bl	80a2d96 <_ZN8FuzzySet13getPertinenceEv>
 80a30d0:	4601      	mov	r1, r0
 80a30d2:	4628      	mov	r0, r5
 80a30d4:	f002 fa50 	bl	80a5578 <__aeabi_fcmpgt>
 80a30d8:	2800      	cmp	r0, #0
 80a30da:	d1bc      	bne.n	80a3056 <_ZN19FuzzyRuleAntecedent8evaluateEv+0xfe>
                            return this->fuzzySet1->getPertinence();
                        }else{
                            return this->fuzzySet2->getPertinence();
 80a30dc:	68e0      	ldr	r0, [r4, #12]
 80a30de:	e7bb      	b.n	80a3058 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x100>
                    }
                    break;
                case OP_OR:
                    if(fuzzyRuleAntecedent1->evaluate() > 0.0 || fuzzyRuleAntecedent2->evaluate() > 0.0){
                        if(fuzzyRuleAntecedent1->evaluate() > fuzzyRuleAntecedent2->evaluate()){
                            return fuzzyRuleAntecedent1->evaluate();
 80a30e0:	6924      	ldr	r4, [r4, #16]
 80a30e2:	e73b      	b.n	80a2f5c <_ZN19FuzzyRuleAntecedent8evaluateEv+0x4>
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(fuzzyRuleAntecedent1->evaluate() > 0.0 || fuzzyRuleAntecedent2->evaluate() > 0.0){
                        if(fuzzyRuleAntecedent1->evaluate() > fuzzyRuleAntecedent2->evaluate()){
 80a30e4:	6920      	ldr	r0, [r4, #16]
 80a30e6:	f7ff ff37 	bl	80a2f58 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a30ea:	4605      	mov	r5, r0
 80a30ec:	6960      	ldr	r0, [r4, #20]
 80a30ee:	f7ff ff33 	bl	80a2f58 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a30f2:	4601      	mov	r1, r0
 80a30f4:	4628      	mov	r0, r5
 80a30f6:	f002 fa3f 	bl	80a5578 <__aeabi_fcmpgt>
 80a30fa:	2800      	cmp	r0, #0
 80a30fc:	d1f0      	bne.n	80a30e0 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x188>
                            return fuzzyRuleAntecedent1->evaluate();
                        }else{
                            return fuzzyRuleAntecedent2->evaluate();
 80a30fe:	6964      	ldr	r4, [r4, #20]
 80a3100:	e72c      	b.n	80a2f5c <_ZN19FuzzyRuleAntecedent8evaluateEv+0x4>
            break;
        default:
            return 0.0;
    }
    return 0.0;
 80a3102:	2000      	movs	r0, #0
 80a3104:	bd38      	pop	{r3, r4, r5, pc}
	...

080a3108 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a3108:	b508      	push	{r3, lr}
 80a310a:	4b02      	ldr	r3, [pc, #8]	; (80a3114 <HAL_Pin_Map+0xc>)
 80a310c:	681b      	ldr	r3, [r3, #0]
 80a310e:	681b      	ldr	r3, [r3, #0]
 80a3110:	9301      	str	r3, [sp, #4]
 80a3112:	bd08      	pop	{r3, pc}
 80a3114:	080601b0 	.word	0x080601b0

080a3118 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a3118:	b508      	push	{r3, lr}
 80a311a:	4b02      	ldr	r3, [pc, #8]	; (80a3124 <HAL_Validate_Pin_Function+0xc>)
 80a311c:	681b      	ldr	r3, [r3, #0]
 80a311e:	685b      	ldr	r3, [r3, #4]
 80a3120:	9301      	str	r3, [sp, #4]
 80a3122:	bd08      	pop	{r3, pc}
 80a3124:	080601b0 	.word	0x080601b0

080a3128 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a3128:	b508      	push	{r3, lr}
 80a312a:	4b02      	ldr	r3, [pc, #8]	; (80a3134 <HAL_Pin_Mode+0xc>)
 80a312c:	681b      	ldr	r3, [r3, #0]
 80a312e:	689b      	ldr	r3, [r3, #8]
 80a3130:	9301      	str	r3, [sp, #4]
 80a3132:	bd08      	pop	{r3, pc}
 80a3134:	080601b0 	.word	0x080601b0

080a3138 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a3138:	b508      	push	{r3, lr}
 80a313a:	4b02      	ldr	r3, [pc, #8]	; (80a3144 <HAL_Get_Pin_Mode+0xc>)
 80a313c:	681b      	ldr	r3, [r3, #0]
 80a313e:	68db      	ldr	r3, [r3, #12]
 80a3140:	9301      	str	r3, [sp, #4]
 80a3142:	bd08      	pop	{r3, pc}
 80a3144:	080601b0 	.word	0x080601b0

080a3148 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a3148:	b508      	push	{r3, lr}
 80a314a:	4b02      	ldr	r3, [pc, #8]	; (80a3154 <HAL_GPIO_Write+0xc>)
 80a314c:	681b      	ldr	r3, [r3, #0]
 80a314e:	691b      	ldr	r3, [r3, #16]
 80a3150:	9301      	str	r3, [sp, #4]
 80a3152:	bd08      	pop	{r3, pc}
 80a3154:	080601b0 	.word	0x080601b0

080a3158 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a3158:	b508      	push	{r3, lr}
 80a315a:	4b02      	ldr	r3, [pc, #8]	; (80a3164 <HAL_GPIO_Read+0xc>)
 80a315c:	681b      	ldr	r3, [r3, #0]
 80a315e:	695b      	ldr	r3, [r3, #20]
 80a3160:	9301      	str	r3, [sp, #4]
 80a3162:	bd08      	pop	{r3, pc}
 80a3164:	080601b0 	.word	0x080601b0

080a3168 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a3168:	b508      	push	{r3, lr}
 80a316a:	4b02      	ldr	r3, [pc, #8]	; (80a3174 <HAL_Interrupts_Attach+0xc>)
 80a316c:	681b      	ldr	r3, [r3, #0]
 80a316e:	699b      	ldr	r3, [r3, #24]
 80a3170:	9301      	str	r3, [sp, #4]
 80a3172:	bd08      	pop	{r3, pc}
 80a3174:	080601b0 	.word	0x080601b0

080a3178 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a3178:	b508      	push	{r3, lr}
 80a317a:	4b02      	ldr	r3, [pc, #8]	; (80a3184 <HAL_Interrupts_Detach+0xc>)
 80a317c:	681b      	ldr	r3, [r3, #0]
 80a317e:	69db      	ldr	r3, [r3, #28]
 80a3180:	9301      	str	r3, [sp, #4]
 80a3182:	bd08      	pop	{r3, pc}
 80a3184:	080601b0 	.word	0x080601b0

080a3188 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a3188:	b508      	push	{r3, lr}
 80a318a:	4b02      	ldr	r3, [pc, #8]	; (80a3194 <HAL_SPI_Init+0xc>)
 80a318c:	681b      	ldr	r3, [r3, #0]
 80a318e:	69db      	ldr	r3, [r3, #28]
 80a3190:	9301      	str	r3, [sp, #4]
 80a3192:	bd08      	pop	{r3, pc}
 80a3194:	080601b4 	.word	0x080601b4

080a3198 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a3198:	b508      	push	{r3, lr}
 80a319a:	4b02      	ldr	r3, [pc, #8]	; (80a31a4 <HAL_SPI_Is_Enabled+0xc>)
 80a319c:	681b      	ldr	r3, [r3, #0]
 80a319e:	6a1b      	ldr	r3, [r3, #32]
 80a31a0:	9301      	str	r3, [sp, #4]
 80a31a2:	bd08      	pop	{r3, pc}
 80a31a4:	080601b4 	.word	0x080601b4

080a31a8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a31a8:	b508      	push	{r3, lr}
 80a31aa:	4b02      	ldr	r3, [pc, #8]	; (80a31b4 <HAL_RNG_GetRandomNumber+0xc>)
 80a31ac:	681b      	ldr	r3, [r3, #0]
 80a31ae:	685b      	ldr	r3, [r3, #4]
 80a31b0:	9301      	str	r3, [sp, #4]
 80a31b2:	bd08      	pop	{r3, pc}
 80a31b4:	0806019c 	.word	0x0806019c

080a31b8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a31b8:	b508      	push	{r3, lr}
 80a31ba:	4b02      	ldr	r3, [pc, #8]	; (80a31c4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a31bc:	681b      	ldr	r3, [r3, #0]
 80a31be:	695b      	ldr	r3, [r3, #20]
 80a31c0:	9301      	str	r3, [sp, #4]
 80a31c2:	bd08      	pop	{r3, pc}
 80a31c4:	0806019c 	.word	0x0806019c

080a31c8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a31c8:	b508      	push	{r3, lr}
 80a31ca:	4b02      	ldr	r3, [pc, #8]	; (80a31d4 <os_mutex_create+0xc>)
 80a31cc:	681b      	ldr	r3, [r3, #0]
 80a31ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a31d0:	9301      	str	r3, [sp, #4]
 80a31d2:	bd08      	pop	{r3, pc}
 80a31d4:	080601d0 	.word	0x080601d0

080a31d8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a31d8:	b508      	push	{r3, lr}
 80a31da:	4b02      	ldr	r3, [pc, #8]	; (80a31e4 <HAL_USART_Init+0xc>)
 80a31dc:	681b      	ldr	r3, [r3, #0]
 80a31de:	699b      	ldr	r3, [r3, #24]
 80a31e0:	9301      	str	r3, [sp, #4]
 80a31e2:	bd08      	pop	{r3, pc}
 80a31e4:	080601c4 	.word	0x080601c4

080a31e8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a31e8:	b508      	push	{r3, lr}
 80a31ea:	4b02      	ldr	r3, [pc, #8]	; (80a31f4 <HAL_USART_Write_Data+0xc>)
 80a31ec:	681b      	ldr	r3, [r3, #0]
 80a31ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a31f0:	9301      	str	r3, [sp, #4]
 80a31f2:	bd08      	pop	{r3, pc}
 80a31f4:	080601c4 	.word	0x080601c4

080a31f8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a31f8:	b508      	push	{r3, lr}
 80a31fa:	4b02      	ldr	r3, [pc, #8]	; (80a3204 <HAL_USART_Available_Data+0xc>)
 80a31fc:	681b      	ldr	r3, [r3, #0]
 80a31fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3200:	9301      	str	r3, [sp, #4]
 80a3202:	bd08      	pop	{r3, pc}
 80a3204:	080601c4 	.word	0x080601c4

080a3208 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a3208:	b508      	push	{r3, lr}
 80a320a:	4b02      	ldr	r3, [pc, #8]	; (80a3214 <HAL_USART_Read_Data+0xc>)
 80a320c:	681b      	ldr	r3, [r3, #0]
 80a320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3210:	9301      	str	r3, [sp, #4]
 80a3212:	bd08      	pop	{r3, pc}
 80a3214:	080601c4 	.word	0x080601c4

080a3218 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a3218:	b508      	push	{r3, lr}
 80a321a:	4b02      	ldr	r3, [pc, #8]	; (80a3224 <HAL_USART_Peek_Data+0xc>)
 80a321c:	681b      	ldr	r3, [r3, #0]
 80a321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3220:	9301      	str	r3, [sp, #4]
 80a3222:	bd08      	pop	{r3, pc}
 80a3224:	080601c4 	.word	0x080601c4

080a3228 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a3228:	b508      	push	{r3, lr}
 80a322a:	4b02      	ldr	r3, [pc, #8]	; (80a3234 <HAL_USART_Flush_Data+0xc>)
 80a322c:	681b      	ldr	r3, [r3, #0]
 80a322e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3230:	9301      	str	r3, [sp, #4]
 80a3232:	bd08      	pop	{r3, pc}
 80a3234:	080601c4 	.word	0x080601c4

080a3238 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a3238:	b508      	push	{r3, lr}
 80a323a:	4b02      	ldr	r3, [pc, #8]	; (80a3244 <HAL_USART_Is_Enabled+0xc>)
 80a323c:	681b      	ldr	r3, [r3, #0]
 80a323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a3240:	9301      	str	r3, [sp, #4]
 80a3242:	bd08      	pop	{r3, pc}
 80a3244:	080601c4 	.word	0x080601c4

080a3248 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a3248:	b508      	push	{r3, lr}
 80a324a:	4b02      	ldr	r3, [pc, #8]	; (80a3254 <HAL_USART_Available_Data_For_Write+0xc>)
 80a324c:	681b      	ldr	r3, [r3, #0]
 80a324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3250:	9301      	str	r3, [sp, #4]
 80a3252:	bd08      	pop	{r3, pc}
 80a3254:	080601c4 	.word	0x080601c4

080a3258 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a3258:	b508      	push	{r3, lr}
 80a325a:	4b02      	ldr	r3, [pc, #8]	; (80a3264 <HAL_I2C_Set_Speed+0xc>)
 80a325c:	681b      	ldr	r3, [r3, #0]
 80a325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3260:	9301      	str	r3, [sp, #4]
 80a3262:	bd08      	pop	{r3, pc}
 80a3264:	080601ac 	.word	0x080601ac

080a3268 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a3268:	b508      	push	{r3, lr}
 80a326a:	4b02      	ldr	r3, [pc, #8]	; (80a3274 <HAL_I2C_Begin+0xc>)
 80a326c:	681b      	ldr	r3, [r3, #0]
 80a326e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a3270:	9301      	str	r3, [sp, #4]
 80a3272:	bd08      	pop	{r3, pc}
 80a3274:	080601ac 	.word	0x080601ac

080a3278 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a3278:	b508      	push	{r3, lr}
 80a327a:	4b02      	ldr	r3, [pc, #8]	; (80a3284 <HAL_I2C_Request_Data+0xc>)
 80a327c:	681b      	ldr	r3, [r3, #0]
 80a327e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a3280:	9301      	str	r3, [sp, #4]
 80a3282:	bd08      	pop	{r3, pc}
 80a3284:	080601ac 	.word	0x080601ac

080a3288 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a3288:	b508      	push	{r3, lr}
 80a328a:	4b02      	ldr	r3, [pc, #8]	; (80a3294 <HAL_I2C_Begin_Transmission+0xc>)
 80a328c:	681b      	ldr	r3, [r3, #0]
 80a328e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a3290:	9301      	str	r3, [sp, #4]
 80a3292:	bd08      	pop	{r3, pc}
 80a3294:	080601ac 	.word	0x080601ac

080a3298 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a3298:	b508      	push	{r3, lr}
 80a329a:	4b02      	ldr	r3, [pc, #8]	; (80a32a4 <HAL_I2C_End_Transmission+0xc>)
 80a329c:	681b      	ldr	r3, [r3, #0]
 80a329e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a32a0:	9301      	str	r3, [sp, #4]
 80a32a2:	bd08      	pop	{r3, pc}
 80a32a4:	080601ac 	.word	0x080601ac

080a32a8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a32a8:	b508      	push	{r3, lr}
 80a32aa:	4b02      	ldr	r3, [pc, #8]	; (80a32b4 <HAL_I2C_Write_Data+0xc>)
 80a32ac:	681b      	ldr	r3, [r3, #0]
 80a32ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a32b0:	9301      	str	r3, [sp, #4]
 80a32b2:	bd08      	pop	{r3, pc}
 80a32b4:	080601ac 	.word	0x080601ac

080a32b8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a32b8:	b508      	push	{r3, lr}
 80a32ba:	4b02      	ldr	r3, [pc, #8]	; (80a32c4 <HAL_I2C_Available_Data+0xc>)
 80a32bc:	681b      	ldr	r3, [r3, #0]
 80a32be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a32c0:	9301      	str	r3, [sp, #4]
 80a32c2:	bd08      	pop	{r3, pc}
 80a32c4:	080601ac 	.word	0x080601ac

080a32c8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a32c8:	b508      	push	{r3, lr}
 80a32ca:	4b02      	ldr	r3, [pc, #8]	; (80a32d4 <HAL_I2C_Read_Data+0xc>)
 80a32cc:	681b      	ldr	r3, [r3, #0]
 80a32ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a32d0:	9301      	str	r3, [sp, #4]
 80a32d2:	bd08      	pop	{r3, pc}
 80a32d4:	080601ac 	.word	0x080601ac

080a32d8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a32d8:	b508      	push	{r3, lr}
 80a32da:	4b02      	ldr	r3, [pc, #8]	; (80a32e4 <HAL_I2C_Peek_Data+0xc>)
 80a32dc:	681b      	ldr	r3, [r3, #0]
 80a32de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a32e0:	9301      	str	r3, [sp, #4]
 80a32e2:	bd08      	pop	{r3, pc}
 80a32e4:	080601ac 	.word	0x080601ac

080a32e8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a32e8:	b508      	push	{r3, lr}
 80a32ea:	4b02      	ldr	r3, [pc, #8]	; (80a32f4 <HAL_I2C_Flush_Data+0xc>)
 80a32ec:	681b      	ldr	r3, [r3, #0]
 80a32ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a32f0:	9301      	str	r3, [sp, #4]
 80a32f2:	bd08      	pop	{r3, pc}
 80a32f4:	080601ac 	.word	0x080601ac

080a32f8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a32f8:	b508      	push	{r3, lr}
 80a32fa:	4b02      	ldr	r3, [pc, #8]	; (80a3304 <HAL_I2C_Is_Enabled+0xc>)
 80a32fc:	681b      	ldr	r3, [r3, #0]
 80a32fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a3300:	9301      	str	r3, [sp, #4]
 80a3302:	bd08      	pop	{r3, pc}
 80a3304:	080601ac 	.word	0x080601ac

080a3308 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a3308:	b508      	push	{r3, lr}
 80a330a:	4b03      	ldr	r3, [pc, #12]	; (80a3318 <HAL_I2C_Init+0x10>)
 80a330c:	681b      	ldr	r3, [r3, #0]
 80a330e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a3312:	9301      	str	r3, [sp, #4]
 80a3314:	bd08      	pop	{r3, pc}
 80a3316:	0000      	.short	0x0000
 80a3318:	080601ac 	.word	0x080601ac

080a331c <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
 80a331c:	b508      	push	{r3, lr}
 80a331e:	4b02      	ldr	r3, [pc, #8]	; (80a3328 <HAL_Servo_Attach+0xc>)
 80a3320:	681b      	ldr	r3, [r3, #0]
 80a3322:	691b      	ldr	r3, [r3, #16]
 80a3324:	9301      	str	r3, [sp, #4]
 80a3326:	bd08      	pop	{r3, pc}
 80a3328:	080601a8 	.word	0x080601a8

080a332c <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
 80a332c:	b508      	push	{r3, lr}
 80a332e:	4b02      	ldr	r3, [pc, #8]	; (80a3338 <HAL_Servo_Detach+0xc>)
 80a3330:	681b      	ldr	r3, [r3, #0]
 80a3332:	695b      	ldr	r3, [r3, #20]
 80a3334:	9301      	str	r3, [sp, #4]
 80a3336:	bd08      	pop	{r3, pc}
 80a3338:	080601a8 	.word	0x080601a8

080a333c <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
 80a333c:	b508      	push	{r3, lr}
 80a333e:	4b02      	ldr	r3, [pc, #8]	; (80a3348 <HAL_Servo_Write_Pulse_Width+0xc>)
 80a3340:	681b      	ldr	r3, [r3, #0]
 80a3342:	699b      	ldr	r3, [r3, #24]
 80a3344:	9301      	str	r3, [sp, #4]
 80a3346:	bd08      	pop	{r3, pc}
 80a3348:	080601a8 	.word	0x080601a8

080a334c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a334c:	b508      	push	{r3, lr}
 80a334e:	4b02      	ldr	r3, [pc, #8]	; (80a3358 <HAL_USB_USART_Init+0xc>)
 80a3350:	681b      	ldr	r3, [r3, #0]
 80a3352:	681b      	ldr	r3, [r3, #0]
 80a3354:	9301      	str	r3, [sp, #4]
 80a3356:	bd08      	pop	{r3, pc}
 80a3358:	080601d8 	.word	0x080601d8

080a335c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a335c:	b508      	push	{r3, lr}
 80a335e:	4b02      	ldr	r3, [pc, #8]	; (80a3368 <HAL_USB_USART_Begin+0xc>)
 80a3360:	681b      	ldr	r3, [r3, #0]
 80a3362:	685b      	ldr	r3, [r3, #4]
 80a3364:	9301      	str	r3, [sp, #4]
 80a3366:	bd08      	pop	{r3, pc}
 80a3368:	080601d8 	.word	0x080601d8

080a336c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a336c:	b508      	push	{r3, lr}
 80a336e:	4b02      	ldr	r3, [pc, #8]	; (80a3378 <HAL_USB_USART_Available_Data+0xc>)
 80a3370:	681b      	ldr	r3, [r3, #0]
 80a3372:	691b      	ldr	r3, [r3, #16]
 80a3374:	9301      	str	r3, [sp, #4]
 80a3376:	bd08      	pop	{r3, pc}
 80a3378:	080601d8 	.word	0x080601d8

080a337c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a337c:	b508      	push	{r3, lr}
 80a337e:	4b02      	ldr	r3, [pc, #8]	; (80a3388 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a3380:	681b      	ldr	r3, [r3, #0]
 80a3382:	695b      	ldr	r3, [r3, #20]
 80a3384:	9301      	str	r3, [sp, #4]
 80a3386:	bd08      	pop	{r3, pc}
 80a3388:	080601d8 	.word	0x080601d8

080a338c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a338c:	b508      	push	{r3, lr}
 80a338e:	4b02      	ldr	r3, [pc, #8]	; (80a3398 <HAL_USB_USART_Receive_Data+0xc>)
 80a3390:	681b      	ldr	r3, [r3, #0]
 80a3392:	699b      	ldr	r3, [r3, #24]
 80a3394:	9301      	str	r3, [sp, #4]
 80a3396:	bd08      	pop	{r3, pc}
 80a3398:	080601d8 	.word	0x080601d8

080a339c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a339c:	b508      	push	{r3, lr}
 80a339e:	4b02      	ldr	r3, [pc, #8]	; (80a33a8 <HAL_USB_USART_Send_Data+0xc>)
 80a33a0:	681b      	ldr	r3, [r3, #0]
 80a33a2:	69db      	ldr	r3, [r3, #28]
 80a33a4:	9301      	str	r3, [sp, #4]
 80a33a6:	bd08      	pop	{r3, pc}
 80a33a8:	080601d8 	.word	0x080601d8

080a33ac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a33ac:	b508      	push	{r3, lr}
 80a33ae:	4b02      	ldr	r3, [pc, #8]	; (80a33b8 <HAL_USB_USART_Flush_Data+0xc>)
 80a33b0:	681b      	ldr	r3, [r3, #0]
 80a33b2:	6a1b      	ldr	r3, [r3, #32]
 80a33b4:	9301      	str	r3, [sp, #4]
 80a33b6:	bd08      	pop	{r3, pc}
 80a33b8:	080601d8 	.word	0x080601d8

080a33bc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a33bc:	b508      	push	{r3, lr}
 80a33be:	4b02      	ldr	r3, [pc, #8]	; (80a33c8 <set_system_mode+0xc>)
 80a33c0:	681b      	ldr	r3, [r3, #0]
 80a33c2:	685b      	ldr	r3, [r3, #4]
 80a33c4:	9301      	str	r3, [sp, #4]
 80a33c6:	bd08      	pop	{r3, pc}
 80a33c8:	080601a4 	.word	0x080601a4

080a33cc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a33cc:	b508      	push	{r3, lr}
 80a33ce:	4b02      	ldr	r3, [pc, #8]	; (80a33d8 <system_delay_ms+0xc>)
 80a33d0:	681b      	ldr	r3, [r3, #0]
 80a33d2:	695b      	ldr	r3, [r3, #20]
 80a33d4:	9301      	str	r3, [sp, #4]
 80a33d6:	bd08      	pop	{r3, pc}
 80a33d8:	080601a4 	.word	0x080601a4

080a33dc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a33dc:	b508      	push	{r3, lr}
 80a33de:	4b02      	ldr	r3, [pc, #8]	; (80a33e8 <system_thread_set_state+0xc>)
 80a33e0:	681b      	ldr	r3, [r3, #0]
 80a33e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a33e4:	9301      	str	r3, [sp, #4]
 80a33e6:	bd08      	pop	{r3, pc}
 80a33e8:	080601a4 	.word	0x080601a4

080a33ec <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a33ec:	b508      	push	{r3, lr}
 80a33ee:	4b02      	ldr	r3, [pc, #8]	; (80a33f8 <application_thread_current+0xc>)
 80a33f0:	681b      	ldr	r3, [r3, #0]
 80a33f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a33f4:	9301      	str	r3, [sp, #4]
 80a33f6:	bd08      	pop	{r3, pc}
 80a33f8:	080601a4 	.word	0x080601a4

080a33fc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a33fc:	b508      	push	{r3, lr}
 80a33fe:	4b02      	ldr	r3, [pc, #8]	; (80a3408 <application_thread_invoke+0xc>)
 80a3400:	681b      	ldr	r3, [r3, #0]
 80a3402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a3404:	9301      	str	r3, [sp, #4]
 80a3406:	bd08      	pop	{r3, pc}
 80a3408:	080601a4 	.word	0x080601a4

080a340c <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80a340c:	b508      	push	{r3, lr}
 80a340e:	4b02      	ldr	r3, [pc, #8]	; (80a3418 <system_set_usb_request_app_handler+0xc>)
 80a3410:	681b      	ldr	r3, [r3, #0]
 80a3412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a3414:	9301      	str	r3, [sp, #4]
 80a3416:	bd08      	pop	{r3, pc}
 80a3418:	080601a4 	.word	0x080601a4

080a341c <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80a341c:	b508      	push	{r3, lr}
 80a341e:	4b02      	ldr	r3, [pc, #8]	; (80a3428 <system_set_usb_request_result+0xc>)
 80a3420:	681b      	ldr	r3, [r3, #0]
 80a3422:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a3424:	9301      	str	r3, [sp, #4]
 80a3426:	bd08      	pop	{r3, pc}
 80a3428:	080601a4 	.word	0x080601a4

080a342c <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a342c:	b508      	push	{r3, lr}
 80a342e:	4b02      	ldr	r3, [pc, #8]	; (80a3438 <network_ready+0xc>)
 80a3430:	681b      	ldr	r3, [r3, #0]
 80a3432:	691b      	ldr	r3, [r3, #16]
 80a3434:	9301      	str	r3, [sp, #4]
 80a3436:	bd08      	pop	{r3, pc}
 80a3438:	080601c8 	.word	0x080601c8

080a343c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a343c:	b508      	push	{r3, lr}
 80a343e:	4b02      	ldr	r3, [pc, #8]	; (80a3448 <spark_process+0xc>)
 80a3440:	681b      	ldr	r3, [r3, #0]
 80a3442:	689b      	ldr	r3, [r3, #8]
 80a3444:	9301      	str	r3, [sp, #4]
 80a3446:	bd08      	pop	{r3, pc}
 80a3448:	080601cc 	.word	0x080601cc

080a344c <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a344c:	b508      	push	{r3, lr}
 80a344e:	4b02      	ldr	r3, [pc, #8]	; (80a3458 <spark_send_event+0xc>)
 80a3450:	681b      	ldr	r3, [r3, #0]
 80a3452:	6a1b      	ldr	r3, [r3, #32]
 80a3454:	9301      	str	r3, [sp, #4]
 80a3456:	bd08      	pop	{r3, pc}
 80a3458:	080601cc 	.word	0x080601cc

080a345c <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a345c:	b508      	push	{r3, lr}
 80a345e:	4b02      	ldr	r3, [pc, #8]	; (80a3468 <malloc+0xc>)
 80a3460:	681b      	ldr	r3, [r3, #0]
 80a3462:	681b      	ldr	r3, [r3, #0]
 80a3464:	9301      	str	r3, [sp, #4]
 80a3466:	bd08      	pop	{r3, pc}
 80a3468:	080601a0 	.word	0x080601a0

080a346c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a346c:	b508      	push	{r3, lr}
 80a346e:	4b02      	ldr	r3, [pc, #8]	; (80a3478 <free+0xc>)
 80a3470:	681b      	ldr	r3, [r3, #0]
 80a3472:	685b      	ldr	r3, [r3, #4]
 80a3474:	9301      	str	r3, [sp, #4]
 80a3476:	bd08      	pop	{r3, pc}
 80a3478:	080601a0 	.word	0x080601a0

080a347c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a347c:	b508      	push	{r3, lr}
 80a347e:	4b02      	ldr	r3, [pc, #8]	; (80a3488 <realloc+0xc>)
 80a3480:	681b      	ldr	r3, [r3, #0]
 80a3482:	689b      	ldr	r3, [r3, #8]
 80a3484:	9301      	str	r3, [sp, #4]
 80a3486:	bd08      	pop	{r3, pc}
 80a3488:	080601a0 	.word	0x080601a0

080a348c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a348c:	b508      	push	{r3, lr}
 80a348e:	4b02      	ldr	r3, [pc, #8]	; (80a3498 <vsnprintf+0xc>)
 80a3490:	681b      	ldr	r3, [r3, #0]
 80a3492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3494:	9301      	str	r3, [sp, #4]
 80a3496:	bd08      	pop	{r3, pc}
 80a3498:	080601a0 	.word	0x080601a0

080a349c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a349c:	b508      	push	{r3, lr}
 80a349e:	4b02      	ldr	r3, [pc, #8]	; (80a34a8 <abort+0xc>)
 80a34a0:	681b      	ldr	r3, [r3, #0]
 80a34a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a34a4:	9301      	str	r3, [sp, #4]
 80a34a6:	bd08      	pop	{r3, pc}
 80a34a8:	080601a0 	.word	0x080601a0

080a34ac <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a34ac:	4770      	bx	lr

080a34ae <_ZN8SPIClassD0Ev>:
 80a34ae:	b510      	push	{r4, lr}
 80a34b0:	4604      	mov	r4, r0
 80a34b2:	f7fc fdf4 	bl	80a009e <_ZdlPv>
 80a34b6:	4620      	mov	r0, r4
 80a34b8:	bd10      	pop	{r4, pc}
	...

080a34bc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a34bc:	b570      	push	{r4, r5, r6, lr}
 80a34be:	4604      	mov	r4, r0
 80a34c0:	460e      	mov	r6, r1
 80a34c2:	4b07      	ldr	r3, [pc, #28]	; (80a34e0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
	Mutex(os_mutex_t handle) : handle_(handle) {}

	/**
	 * Creates a new mutex.
	 */
	Mutex() : handle_(nullptr)
 80a34c4:	2500      	movs	r5, #0
 80a34c6:	6003      	str	r3, [r0, #0]
 80a34c8:	f840 5f0c 	str.w	r5, [r0, #12]!
	{
		os_mutex_create(&handle_);
 80a34cc:	f7ff fe7c 	bl	80a31c8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a34d0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a34d2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a34d4:	f7ff fe58 	bl	80a3188 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a34d8:	60a5      	str	r5, [r4, #8]
}
 80a34da:	4620      	mov	r0, r4
 80a34dc:	bd70      	pop	{r4, r5, r6, pc}
 80a34de:	bf00      	nop
 80a34e0:	080a5724 	.word	0x080a5724

080a34e4 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a34e4:	7900      	ldrb	r0, [r0, #4]
 80a34e6:	f7ff be57 	b.w	80a3198 <HAL_SPI_Is_Enabled>

080a34ea <_ZN5Servo17writeMicrosecondsEt>:
  // write(179).
  return a == this->minAngle || a == this->maxAngle ? a : a + 1;
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{
 80a34ea:	f9b0 2000 	ldrsh.w	r2, [r0]

  if (!this->attached())
 80a34ee:	1c53      	adds	r3, r2, #1
 80a34f0:	d00b      	beq.n	80a350a <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
 80a34f2:	8843      	ldrh	r3, [r0, #2]
 80a34f4:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 80a34f6:	428b      	cmp	r3, r1
 80a34f8:	d803      	bhi.n	80a3502 <_ZN5Servo17writeMicrosecondsEt+0x18>
 80a34fa:	4288      	cmp	r0, r1
 80a34fc:	4603      	mov	r3, r0
 80a34fe:	bf28      	it	cs
 80a3500:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
 80a3502:	4619      	mov	r1, r3
 80a3504:	b290      	uxth	r0, r2
 80a3506:	f7ff bf19 	b.w	80a333c <HAL_Servo_Write_Pulse_Width>
 80a350a:	4770      	bx	lr

080a350c <_ZN5Servo11resetFieldsEv>:
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a350c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
 80a3510:	22b4      	movs	r2, #180	; 0xb4
 80a3512:	8102      	strh	r2, [r0, #8]
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a3514:	f44f 7208 	mov.w	r2, #544	; 0x220
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a3518:	8003      	strh	r3, [r0, #0]
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a351a:	8042      	strh	r2, [r0, #2]
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a351c:	2300      	movs	r3, #0
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a351e:	f44f 6216 	mov.w	r2, #2400	; 0x960
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a3522:	80c3      	strh	r3, [r0, #6]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a3524:	8082      	strh	r2, [r0, #4]
  this->trim = 0;
 80a3526:	60c3      	str	r3, [r0, #12]
 80a3528:	4770      	bx	lr

080a352a <_ZN5ServoC1Ev>:
#define ANGLE_TO_US(a)    ((uint16_t)(map((a), this->minAngle, this->maxAngle, \
                                        this->minPW, this->maxPW)))
#define US_TO_ANGLE(us)   ((int16_t)(map((us), this->minPW, this->maxPW,  \
                                       this->minAngle, this->maxAngle)))

Servo::Servo()
 80a352a:	b508      	push	{r3, lr}
{
  this->resetFields();
 80a352c:	f7ff ffee 	bl	80a350c <_ZN5Servo11resetFieldsEv>
}
 80a3530:	bd08      	pop	{r3, pc}

080a3532 <_ZN5Servo6detachEv>:

  return true;
}

bool Servo::detach()
{
 80a3532:	b510      	push	{r4, lr}
 80a3534:	4604      	mov	r4, r0
 80a3536:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
 80a353a:	1c43      	adds	r3, r0, #1
 80a353c:	d007      	beq.n	80a354e <_ZN5Servo6detachEv+0x1c>
  {
    return false;
  }

  HAL_Servo_Detach(this->pin);
 80a353e:	b280      	uxth	r0, r0
 80a3540:	f7ff fef4 	bl	80a332c <HAL_Servo_Detach>

  this->resetFields();
 80a3544:	4620      	mov	r0, r4
 80a3546:	f7ff ffe1 	bl	80a350c <_ZN5Servo11resetFieldsEv>

  return true;
 80a354a:	2001      	movs	r0, #1
 80a354c:	bd10      	pop	{r4, pc}

bool Servo::detach()
{
  if (!this->attached())
  {
    return false;
 80a354e:	2000      	movs	r0, #0
  HAL_Servo_Detach(this->pin);

  this->resetFields();

  return true;
}
 80a3550:	bd10      	pop	{r4, pc}

080a3552 <_ZN5Servo6attachEtttss>:
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a3552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3556:	460d      	mov	r5, r1
 80a3558:	4604      	mov	r4, r0

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a355a:	2102      	movs	r1, #2
 80a355c:	4628      	mov	r0, r5
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a355e:	4690      	mov	r8, r2
 80a3560:	461f      	mov	r7, r3

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a3562:	f7ff fdd9 	bl	80a3118 <HAL_Validate_Pin_Function>
 80a3566:	2802      	cmp	r0, #2
 80a3568:	d001      	beq.n	80a356e <_ZN5Servo6attachEtttss+0x1c>
  {
    return false;
 80a356a:	2600      	movs	r6, #0
 80a356c:	e019      	b.n	80a35a2 <_ZN5Servo6attachEtttss+0x50>
  }

  // Safety check
  if (!pinAvailable(pin))
 80a356e:	4628      	mov	r0, r5
 80a3570:	f000 fe8a 	bl	80a4288 <pinAvailable>
 80a3574:	4606      	mov	r6, r0
 80a3576:	2800      	cmp	r0, #0
 80a3578:	d0f7      	beq.n	80a356a <_ZN5Servo6attachEtttss+0x18>
  {
    return false;
  }

  if (this->attached())
 80a357a:	f9b4 3000 	ldrsh.w	r3, [r4]
 80a357e:	3301      	adds	r3, #1
 80a3580:	d002      	beq.n	80a3588 <_ZN5Servo6attachEtttss+0x36>
  {
    this->detach();
 80a3582:	4620      	mov	r0, r4
 80a3584:	f7ff ffd5 	bl	80a3532 <_ZN5Servo6detachEv>
  }

  this->pin = pin;
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a3588:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  if (this->attached())
  {
    this->detach();
  }

  this->pin = pin;
 80a358c:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a358e:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
 80a3590:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  {
    this->detach();
  }

  this->pin = pin;
  this->minPW = minPW;
 80a3594:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
 80a3598:	80a7      	strh	r7, [r4, #4]
  this->minAngle = minAngle;
  this->maxAngle = maxAngle;
 80a359a:	8123      	strh	r3, [r4, #8]

  HAL_Servo_Attach(this->pin);
 80a359c:	4628      	mov	r0, r5
 80a359e:	f7ff febd 	bl	80a331c <HAL_Servo_Attach>

  return true;
}
 80a35a2:	4630      	mov	r0, r6
 80a35a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a35a8 <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a35a8:	2000      	movs	r0, #0
 80a35aa:	f7ff bf07 	b.w	80a33bc <set_system_mode>

080a35ae <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a35ae:	b510      	push	{r4, lr}
 80a35b0:	4604      	mov	r4, r0
{
	free(buffer);
 80a35b2:	6800      	ldr	r0, [r0, #0]
 80a35b4:	f7ff ff5a 	bl	80a346c <free>
}
 80a35b8:	4620      	mov	r0, r4
 80a35ba:	bd10      	pop	{r4, pc}

080a35bc <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a35bc:	b510      	push	{r4, lr}
 80a35be:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a35c0:	6800      	ldr	r0, [r0, #0]
 80a35c2:	b108      	cbz	r0, 80a35c8 <_ZN6String10invalidateEv+0xc>
 80a35c4:	f7ff ff52 	bl	80a346c <free>
	buffer = NULL;
 80a35c8:	2300      	movs	r3, #0
 80a35ca:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a35cc:	60a3      	str	r3, [r4, #8]
 80a35ce:	6063      	str	r3, [r4, #4]
 80a35d0:	bd10      	pop	{r4, pc}

080a35d2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a35d2:	b538      	push	{r3, r4, r5, lr}
 80a35d4:	4604      	mov	r4, r0
 80a35d6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a35d8:	6800      	ldr	r0, [r0, #0]
 80a35da:	3101      	adds	r1, #1
 80a35dc:	f7ff ff4e 	bl	80a347c <realloc>
	if (newbuffer) {
 80a35e0:	b110      	cbz	r0, 80a35e8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a35e2:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a35e6:	2001      	movs	r0, #1
	}
	return 0;
}
 80a35e8:	bd38      	pop	{r3, r4, r5, pc}

080a35ea <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a35ea:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a35ec:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a35ee:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a35f0:	b113      	cbz	r3, 80a35f8 <_ZN6String7reserveEj+0xe>
 80a35f2:	6843      	ldr	r3, [r0, #4]
 80a35f4:	428b      	cmp	r3, r1
 80a35f6:	d207      	bcs.n	80a3608 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a35f8:	4620      	mov	r0, r4
 80a35fa:	f7ff ffea 	bl	80a35d2 <_ZN6String12changeBufferEj>
 80a35fe:	b120      	cbz	r0, 80a360a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a3600:	68a3      	ldr	r3, [r4, #8]
 80a3602:	b90b      	cbnz	r3, 80a3608 <_ZN6String7reserveEj+0x1e>
 80a3604:	6822      	ldr	r2, [r4, #0]
 80a3606:	7013      	strb	r3, [r2, #0]
 80a3608:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a360a:	bd10      	pop	{r4, pc}

080a360c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a360c:	b570      	push	{r4, r5, r6, lr}
 80a360e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a3610:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a3612:	4604      	mov	r4, r0
 80a3614:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a3616:	f7ff ffe8 	bl	80a35ea <_ZN6String7reserveEj>
 80a361a:	b918      	cbnz	r0, 80a3624 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a361c:	4620      	mov	r0, r4
 80a361e:	f7ff ffcd 	bl	80a35bc <_ZN6String10invalidateEv>
		return *this;
 80a3622:	e009      	b.n	80a3638 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a3624:	462a      	mov	r2, r5
 80a3626:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a3628:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a362a:	6820      	ldr	r0, [r4, #0]
 80a362c:	f001 ffdc 	bl	80a55e8 <memcpy>
	buffer[len] = 0;
 80a3630:	6822      	ldr	r2, [r4, #0]
 80a3632:	68a3      	ldr	r3, [r4, #8]
 80a3634:	2100      	movs	r1, #0
 80a3636:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a3638:	4620      	mov	r0, r4
 80a363a:	bd70      	pop	{r4, r5, r6, pc}

080a363c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a363c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a363e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3640:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3642:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a3644:	6043      	str	r3, [r0, #4]
	len = 0;
 80a3646:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a3648:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a364a:	460d      	mov	r5, r1
 80a364c:	b139      	cbz	r1, 80a365e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a364e:	4608      	mov	r0, r1
 80a3650:	f001 ffdd 	bl	80a560e <strlen>
 80a3654:	4629      	mov	r1, r5
 80a3656:	4602      	mov	r2, r0
 80a3658:	4620      	mov	r0, r4
 80a365a:	f7ff ffd7 	bl	80a360c <_ZN6String4copyEPKcj>
}
 80a365e:	4620      	mov	r0, r4
 80a3660:	bd38      	pop	{r3, r4, r5, pc}

080a3662 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a3662:	b538      	push	{r3, r4, r5, lr}
 80a3664:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a3666:	460c      	mov	r4, r1
 80a3668:	b141      	cbz	r1, 80a367c <_ZN6StringaSEPKc+0x1a>
 80a366a:	4608      	mov	r0, r1
 80a366c:	f001 ffcf 	bl	80a560e <strlen>
 80a3670:	4621      	mov	r1, r4
 80a3672:	4602      	mov	r2, r0
 80a3674:	4628      	mov	r0, r5
 80a3676:	f7ff ffc9 	bl	80a360c <_ZN6String4copyEPKcj>
 80a367a:	e001      	b.n	80a3680 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a367c:	f7ff ff9e 	bl	80a35bc <_ZN6String10invalidateEv>

	return *this;
}
 80a3680:	4628      	mov	r0, r5
 80a3682:	bd38      	pop	{r3, r4, r5, pc}

080a3684 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a3684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3686:	4606      	mov	r6, r0
 80a3688:	460d      	mov	r5, r1
 80a368a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a368c:	2400      	movs	r4, #0
  while (size--) {
 80a368e:	42bd      	cmp	r5, r7
 80a3690:	d00c      	beq.n	80a36ac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a3692:	6833      	ldr	r3, [r6, #0]
 80a3694:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a3698:	689b      	ldr	r3, [r3, #8]
 80a369a:	4630      	mov	r0, r6
 80a369c:	4798      	blx	r3
     if (chunk>=0)
 80a369e:	2800      	cmp	r0, #0
 80a36a0:	db01      	blt.n	80a36a6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a36a2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a36a4:	e7f3      	b.n	80a368e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a36a6:	2c00      	cmp	r4, #0
 80a36a8:	bf08      	it	eq
 80a36aa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a36ac:	4620      	mov	r0, r4
 80a36ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a36b0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a36b0:	b570      	push	{r4, r5, r6, lr}
 80a36b2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a36b4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a36b6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a36b8:	b149      	cbz	r1, 80a36ce <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a36ba:	f001 ffa8 	bl	80a560e <strlen>
 80a36be:	682b      	ldr	r3, [r5, #0]
 80a36c0:	4602      	mov	r2, r0
 80a36c2:	4621      	mov	r1, r4
 80a36c4:	4628      	mov	r0, r5
    }
 80a36c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a36ca:	68db      	ldr	r3, [r3, #12]
 80a36cc:	4718      	bx	r3
    }
 80a36ce:	bd70      	pop	{r4, r5, r6, pc}

080a36d0 <_ZN5Print5printEPKc>:
 80a36d0:	b508      	push	{r3, lr}
 80a36d2:	f7ff ffed 	bl	80a36b0 <_ZN5Print5writeEPKc>
 80a36d6:	bd08      	pop	{r3, pc}

080a36d8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a36d8:	6803      	ldr	r3, [r0, #0]
 80a36da:	689b      	ldr	r3, [r3, #8]
 80a36dc:	4718      	bx	r3

080a36de <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a36de:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a36e0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a36e2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a36e4:	f7ff fff8 	bl	80a36d8 <_ZN5Print5printEc>
  n += print('\n');
 80a36e8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a36ea:	4604      	mov	r4, r0
  n += print('\n');
 80a36ec:	4628      	mov	r0, r5
 80a36ee:	f7ff fff3 	bl	80a36d8 <_ZN5Print5printEc>
  return n;
}
 80a36f2:	4420      	add	r0, r4
 80a36f4:	bd38      	pop	{r3, r4, r5, pc}

080a36f6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a36f6:	b538      	push	{r3, r4, r5, lr}
 80a36f8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a36fa:	f7ff ffd9 	bl	80a36b0 <_ZN5Print5writeEPKc>
 80a36fe:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a3700:	4628      	mov	r0, r5
 80a3702:	f7ff ffec 	bl	80a36de <_ZN5Print7printlnEv>
  return n;
}
 80a3706:	4420      	add	r0, r4
 80a3708:	bd38      	pop	{r3, r4, r5, pc}

080a370a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a370a:	2a01      	cmp	r2, #1
 80a370c:	bf98      	it	ls
 80a370e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a3710:	b530      	push	{r4, r5, lr}
 80a3712:	460b      	mov	r3, r1
 80a3714:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a3716:	2100      	movs	r1, #0
 80a3718:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a371c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a3720:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a3724:	fb05 3312 	mls	r3, r5, r2, r3
 80a3728:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a372a:	2b09      	cmp	r3, #9
 80a372c:	bf94      	ite	ls
 80a372e:	3330      	addls	r3, #48	; 0x30
 80a3730:	3337      	addhi	r3, #55	; 0x37
 80a3732:	b2db      	uxtb	r3, r3
 80a3734:	4621      	mov	r1, r4
 80a3736:	f804 3901 	strb.w	r3, [r4], #-1
 80a373a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a373c:	2d00      	cmp	r5, #0
 80a373e:	d1ef      	bne.n	80a3720 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a3740:	f7ff ffb6 	bl	80a36b0 <_ZN5Print5writeEPKc>
}
 80a3744:	b00b      	add	sp, #44	; 0x2c
 80a3746:	bd30      	pop	{r4, r5, pc}

080a3748 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a3748:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a374a:	b922      	cbnz	r2, 80a3756 <_ZN5Print5printEmi+0xe>
 80a374c:	6803      	ldr	r3, [r0, #0]
 80a374e:	b2c9      	uxtb	r1, r1
 80a3750:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a3752:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a3754:	4718      	bx	r3
  else return printNumber(n, base);
 80a3756:	b2d2      	uxtb	r2, r2
}
 80a3758:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a375a:	f7ff bfd6 	b.w	80a370a <_ZN5Print11printNumberEmh>

080a375e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a375e:	f7ff bff3 	b.w	80a3748 <_ZN5Print5printEmi>

080a3762 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a3762:	b40c      	push	{r2, r3}
 80a3764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3768:	b087      	sub	sp, #28
 80a376a:	af00      	add	r7, sp, #0
 80a376c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a3770:	f854 9b04 	ldr.w	r9, [r4], #4
 80a3774:	4605      	mov	r5, r0
 80a3776:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a3778:	4623      	mov	r3, r4
 80a377a:	464a      	mov	r2, r9
 80a377c:	2114      	movs	r1, #20
 80a377e:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a3780:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a3782:	f7ff fe83 	bl	80a348c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a3786:	2813      	cmp	r0, #19
 80a3788:	d805      	bhi.n	80a3796 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a378a:	1d39      	adds	r1, r7, #4
 80a378c:	4628      	mov	r0, r5
 80a378e:	f7ff ff8f 	bl	80a36b0 <_ZN5Print5writeEPKc>
 80a3792:	4604      	mov	r4, r0
 80a3794:	e013      	b.n	80a37be <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a3796:	f100 0308 	add.w	r3, r0, #8
 80a379a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a379e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a37a0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a37a4:	1c41      	adds	r1, r0, #1
 80a37a6:	4623      	mov	r3, r4
 80a37a8:	464a      	mov	r2, r9
 80a37aa:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a37ac:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a37ae:	f7ff fe6d 	bl	80a348c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a37b2:	4669      	mov	r1, sp
 80a37b4:	4628      	mov	r0, r5
 80a37b6:	f7ff ff7b 	bl	80a36b0 <_ZN5Print5writeEPKc>
 80a37ba:	4604      	mov	r4, r0
 80a37bc:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a37be:	b11e      	cbz	r6, 80a37c8 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a37c0:	4628      	mov	r0, r5
 80a37c2:	f7ff ff8c 	bl	80a36de <_ZN5Print7printlnEv>
 80a37c6:	4404      	add	r4, r0
    return n;
}
 80a37c8:	4620      	mov	r0, r4
 80a37ca:	371c      	adds	r7, #28
 80a37cc:	46bd      	mov	sp, r7
 80a37ce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a37d2:	b002      	add	sp, #8
 80a37d4:	4770      	bx	lr

080a37d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a37d6:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a37d8:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a37da:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a37dc:	b17c      	cbz	r4, 80a37fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a37de:	6863      	ldr	r3, [r4, #4]
 80a37e0:	3b01      	subs	r3, #1
 80a37e2:	6063      	str	r3, [r4, #4]
 80a37e4:	b95b      	cbnz	r3, 80a37fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a37e6:	6823      	ldr	r3, [r4, #0]
 80a37e8:	4620      	mov	r0, r4
 80a37ea:	689b      	ldr	r3, [r3, #8]
 80a37ec:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a37ee:	68a3      	ldr	r3, [r4, #8]
 80a37f0:	3b01      	subs	r3, #1
 80a37f2:	60a3      	str	r3, [r4, #8]
 80a37f4:	b91b      	cbnz	r3, 80a37fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a37f6:	6823      	ldr	r3, [r4, #0]
 80a37f8:	4620      	mov	r0, r4
 80a37fa:	68db      	ldr	r3, [r3, #12]
 80a37fc:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a37fe:	4628      	mov	r0, r5
 80a3800:	bd38      	pop	{r3, r4, r5, pc}

080a3802 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a3802:	680b      	ldr	r3, [r1, #0]
 80a3804:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a3806:	b113      	cbz	r3, 80a380e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a3808:	685a      	ldr	r2, [r3, #4]
 80a380a:	3201      	adds	r2, #1
 80a380c:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a380e:	4770      	bx	lr

080a3810 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a3810:	4a01      	ldr	r2, [pc, #4]	; (80a3818 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a3812:	4b02      	ldr	r3, [pc, #8]	; (80a381c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a3814:	601a      	str	r2, [r3, #0]
 80a3816:	4770      	bx	lr
 80a3818:	080a57e4 	.word	0x080a57e4
 80a381c:	2000042c 	.word	0x2000042c

080a3820 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a3820:	4b02      	ldr	r3, [pc, #8]	; (80a382c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a3822:	681a      	ldr	r2, [r3, #0]
 80a3824:	4b02      	ldr	r3, [pc, #8]	; (80a3830 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a3826:	601a      	str	r2, [r3, #0]
 80a3828:	4770      	bx	lr
 80a382a:	bf00      	nop
 80a382c:	20000360 	.word	0x20000360
 80a3830:	20000430 	.word	0x20000430

080a3834 <delay>:
  return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a3834:	2100      	movs	r1, #0
 80a3836:	f7ff bdc9 	b.w	80a33cc <system_delay_ms>
	...

080a383c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a383c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a383e:	4b14      	ldr	r3, [pc, #80]	; (80a3890 <serialEventRun+0x54>)
 80a3840:	b133      	cbz	r3, 80a3850 <serialEventRun+0x14>
 80a3842:	f000 fb9d 	bl	80a3f80 <_Z16_fetch_usbserialv>
 80a3846:	6803      	ldr	r3, [r0, #0]
 80a3848:	691b      	ldr	r3, [r3, #16]
 80a384a:	4798      	blx	r3
 80a384c:	2800      	cmp	r0, #0
 80a384e:	dc16      	bgt.n	80a387e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a3850:	4b10      	ldr	r3, [pc, #64]	; (80a3894 <serialEventRun+0x58>)
 80a3852:	b133      	cbz	r3, 80a3862 <serialEventRun+0x26>
 80a3854:	f000 fc62 	bl	80a411c <_Z22__fetch_global_Serial1v>
 80a3858:	6803      	ldr	r3, [r0, #0]
 80a385a:	691b      	ldr	r3, [r3, #16]
 80a385c:	4798      	blx	r3
 80a385e:	2800      	cmp	r0, #0
 80a3860:	dc10      	bgt.n	80a3884 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a3862:	4b0d      	ldr	r3, [pc, #52]	; (80a3898 <serialEventRun+0x5c>)
 80a3864:	b10b      	cbz	r3, 80a386a <serialEventRun+0x2e>
 80a3866:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a386a:	4b0c      	ldr	r3, [pc, #48]	; (80a389c <serialEventRun+0x60>)
 80a386c:	b17b      	cbz	r3, 80a388e <serialEventRun+0x52>
 80a386e:	f000 fbc3 	bl	80a3ff8 <_Z17_fetch_usbserial1v>
 80a3872:	6803      	ldr	r3, [r0, #0]
 80a3874:	691b      	ldr	r3, [r3, #16]
 80a3876:	4798      	blx	r3
 80a3878:	2800      	cmp	r0, #0
 80a387a:	dc06      	bgt.n	80a388a <serialEventRun+0x4e>
 80a387c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a387e:	f3af 8000 	nop.w
 80a3882:	e7e5      	b.n	80a3850 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a3884:	f3af 8000 	nop.w
 80a3888:	e7eb      	b.n	80a3862 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a388a:	f3af 8000 	nop.w
 80a388e:	bd08      	pop	{r3, pc}
	...

080a38a0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a38a0:	b508      	push	{r3, lr}
	serialEventRun();
 80a38a2:	f7ff ffcb 	bl	80a383c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a38a6:	f7ff fc87 	bl	80a31b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a38aa:	4b01      	ldr	r3, [pc, #4]	; (80a38b0 <_post_loop+0x10>)
 80a38ac:	6018      	str	r0, [r3, #0]
 80a38ae:	bd08      	pop	{r3, pc}
 80a38b0:	200008bc 	.word	0x200008bc

080a38b4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a38b4:	4802      	ldr	r0, [pc, #8]	; (80a38c0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a38b6:	4a03      	ldr	r2, [pc, #12]	; (80a38c4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a38b8:	4903      	ldr	r1, [pc, #12]	; (80a38c8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a38ba:	1a12      	subs	r2, r2, r0
 80a38bc:	f001 be94 	b.w	80a55e8 <memcpy>
 80a38c0:	40024000 	.word	0x40024000
 80a38c4:	40024004 	.word	0x40024004
 80a38c8:	080a5950 	.word	0x080a5950

080a38cc <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80a38cc:	2000      	movs	r0, #0
 80a38ce:	4770      	bx	lr

080a38d0 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a38d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80a38d2:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a38d4:	4604      	mov	r4, r0
    switch (req->type) {
 80a38d6:	2b0a      	cmp	r3, #10
 80a38d8:	d00e      	beq.n	80a38f8 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 80a38da:	2b50      	cmp	r3, #80	; 0x50
 80a38dc:	d11c      	bne.n	80a3918 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80a38de:	4b10      	ldr	r3, [pc, #64]	; (80a3920 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80a38e0:	681d      	ldr	r5, [r3, #0]
 80a38e2:	b1cd      	cbz	r5, 80a3918 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 80a38e4:	7d03      	ldrb	r3, [r0, #20]
 80a38e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a38ea:	9300      	str	r3, [sp, #0]
 80a38ec:	68c2      	ldr	r2, [r0, #12]
 80a38ee:	f100 0310 	add.w	r3, r0, #16
 80a38f2:	6880      	ldr	r0, [r0, #8]
 80a38f4:	47a8      	blx	r5
 80a38f6:	e007      	b.n	80a3908 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80a38f8:	f100 0310 	add.w	r3, r0, #16
 80a38fc:	68c2      	ldr	r2, [r0, #12]
 80a38fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a3902:	6880      	ldr	r0, [r0, #8]
 80a3904:	f7ff ffe2 	bl	80a38cc <_Z26usb_request_custom_handlerPcjjPj>
 80a3908:	b130      	cbz	r0, 80a3918 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80a390a:	2200      	movs	r2, #0
 80a390c:	4620      	mov	r0, r4
 80a390e:	4611      	mov	r1, r2
 80a3910:	f7ff fd84 	bl	80a341c <system_set_usb_request_result>
        return true;
 80a3914:	2001      	movs	r0, #1
 80a3916:	e000      	b.n	80a391a <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80a3918:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80a391a:	b003      	add	sp, #12
 80a391c:	bd30      	pop	{r4, r5, pc}
 80a391e:	bf00      	nop
 80a3920:	20000434 	.word	0x20000434

080a3924 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80a3924:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a3926:	4c0c      	ldr	r4, [pc, #48]	; (80a3958 <module_user_init_hook+0x34>)
 80a3928:	4d0c      	ldr	r5, [pc, #48]	; (80a395c <module_user_init_hook+0x38>)
 80a392a:	6823      	ldr	r3, [r4, #0]
 80a392c:	42ab      	cmp	r3, r5
 80a392e:	4b0c      	ldr	r3, [pc, #48]	; (80a3960 <module_user_init_hook+0x3c>)
 80a3930:	bf0c      	ite	eq
 80a3932:	2201      	moveq	r2, #1
 80a3934:	2200      	movne	r2, #0
 80a3936:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3938:	d002      	beq.n	80a3940 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a393a:	f7ff ffbb 	bl	80a38b4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a393e:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a3940:	4b08      	ldr	r3, [pc, #32]	; (80a3964 <module_user_init_hook+0x40>)
 80a3942:	b11b      	cbz	r3, 80a394c <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3944:	f7ff fc30 	bl	80a31a8 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a3948:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80a394c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80a3950:	2100      	movs	r1, #0
 80a3952:	4805      	ldr	r0, [pc, #20]	; (80a3968 <module_user_init_hook+0x44>)
 80a3954:	f7ff bd5a 	b.w	80a340c <system_set_usb_request_app_handler>
 80a3958:	40024000 	.word	0x40024000
 80a395c:	9a271c1e 	.word	0x9a271c1e
 80a3960:	20000438 	.word	0x20000438
 80a3964:	00000000 	.word	0x00000000
 80a3968:	080a38d1 	.word	0x080a38d1

080a396c <_ZNSt15_Sp_counted_ptrIPN5spark6detail10FutureImplIvNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a396c:	4770      	bx	lr

080a396e <_ZNSt15_Sp_counted_ptrIPN5spark6detail10FutureImplIvNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }
 80a396e:	68c0      	ldr	r0, [r0, #12]
 80a3970:	b110      	cbz	r0, 80a3978 <_ZNSt15_Sp_counted_ptrIPN5spark6detail10FutureImplIvNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xa>
 80a3972:	6803      	ldr	r3, [r0, #0]
 80a3974:	685b      	ldr	r3, [r3, #4]
 80a3976:	4718      	bx	r3
 80a3978:	4770      	bx	lr

080a397a <_ZNSt15_Sp_counted_ptrIPN5spark6detail10FutureImplIvNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a397a:	2000      	movs	r0, #0
 80a397c:	4770      	bx	lr

080a397e <_ZNSt15_Sp_counted_ptrIPN5spark6detail10FutureImplIvNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a397e:	b510      	push	{r4, lr}
 80a3980:	4604      	mov	r4, r0
 80a3982:	f7fc fb8c 	bl	80a009e <_ZdlPv>
 80a3986:	4620      	mov	r0, r4
 80a3988:	bd10      	pop	{r4, pc}

080a398a <_ZNSt15_Sp_counted_ptrIPN5spark6detail10FutureImplIvNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a398a:	b508      	push	{r3, lr}
      { delete this; }
 80a398c:	b108      	cbz	r0, 80a3992 <_ZNSt15_Sp_counted_ptrIPN5spark6detail10FutureImplIvNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a398e:	f7ff fff6 	bl	80a397e <_ZNSt15_Sp_counted_ptrIPN5spark6detail10FutureImplIvNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a3992:	bd08      	pop	{r3, pc}

080a3994 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a3994:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a3996:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a3998:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a399a:	b113      	cbz	r3, 80a39a2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a399c:	2203      	movs	r2, #3
 80a399e:	4601      	mov	r1, r0
 80a39a0:	4798      	blx	r3
    }
 80a39a2:	4620      	mov	r0, r4
 80a39a4:	bd10      	pop	{r4, pc}
	...

080a39a8 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEED1Ev>:
            done_(state != State::RUNNING),
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    virtual ~FutureImplBase() {
 80a39a8:	b538      	push	{r3, r4, r5, lr}
        // Do we need to use restricted memory ordering in destructor, assuming that FutureImplBase instances are
        // always managed by std::shared_ptr?
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }
 80a39aa:	4b0a      	ldr	r3, [pc, #40]	; (80a39d4 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEED1Ev+0x2c>)
            done_(state != State::RUNNING),
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    virtual ~FutureImplBase() {
 80a39ac:	4604      	mov	r4, r0
        // Do we need to use restricted memory ordering in destructor, assuming that FutureImplBase instances are
        // always managed by std::shared_ptr?
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }
 80a39ae:	6003      	str	r3, [r0, #0]
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a39b0:	68c5      	ldr	r5, [r0, #12]
    }

    virtual ~FutureImplBase() {
        // Do we need to use restricted memory ordering in destructor, assuming that FutureImplBase instances are
        // always managed by std::shared_ptr?
        delete onSuccess_.load(std::memory_order_relaxed);
 80a39b2:	b12d      	cbz	r5, 80a39c0 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEED1Ev+0x18>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a39b4:	4628      	mov	r0, r5
 80a39b6:	f7ff ffed 	bl	80a3994 <_ZNSt14_Function_baseD1Ev>
 80a39ba:	4628      	mov	r0, r5
 80a39bc:	f7fc fb6f 	bl	80a009e <_ZdlPv>
 80a39c0:	6925      	ldr	r5, [r4, #16]
        delete onError_.load(std::memory_order_relaxed);
 80a39c2:	b12d      	cbz	r5, 80a39d0 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEED1Ev+0x28>
 80a39c4:	4628      	mov	r0, r5
 80a39c6:	f7ff ffe5 	bl	80a3994 <_ZNSt14_Function_baseD1Ev>
 80a39ca:	4628      	mov	r0, r5
 80a39cc:	f7fc fb67 	bl	80a009e <_ZdlPv>
    }
 80a39d0:	4620      	mov	r0, r4
 80a39d2:	bd38      	pop	{r3, r4, r5, pc}
 80a39d4:	080a5840 	.word	0x080a5840

080a39d8 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEED0Ev>:
            done_(state != State::RUNNING),
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    virtual ~FutureImplBase() {
 80a39d8:	b510      	push	{r4, lr}
 80a39da:	4604      	mov	r4, r0
        // Do we need to use restricted memory ordering in destructor, assuming that FutureImplBase instances are
        // always managed by std::shared_ptr?
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }
 80a39dc:	f7ff ffe4 	bl	80a39a8 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEED1Ev>
 80a39e0:	4620      	mov	r0, r4
 80a39e2:	f7fc fb5c 	bl	80a009e <_ZdlPv>
 80a39e6:	4620      	mov	r0, r4
 80a39e8:	bd10      	pop	{r4, pc}
	...

080a39ec <_ZN5spark6detail10FutureImplIvNS0_13FutureContextEED1Ev>:
    };
};

// Internal future implementation. Specialization for void result type
template<typename ContextT>
class FutureImpl<void, ContextT>: public FutureImplBase<void, ContextT> {
 80a39ec:	b510      	push	{r4, lr}
 80a39ee:	4604      	mov	r4, r0
 80a39f0:	4b02      	ldr	r3, [pc, #8]	; (80a39fc <_ZN5spark6detail10FutureImplIvNS0_13FutureContextEED1Ev+0x10>)
 80a39f2:	6003      	str	r3, [r0, #0]
 80a39f4:	f7ff ffd8 	bl	80a39a8 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEED1Ev>
 80a39f8:	4620      	mov	r0, r4
 80a39fa:	bd10      	pop	{r4, pc}
 80a39fc:	080a5850 	.word	0x080a5850

080a3a00 <_ZN5spark6detail10FutureImplIvNS0_13FutureContextEED0Ev>:
 80a3a00:	b510      	push	{r4, lr}
 80a3a02:	4604      	mov	r4, r0
 80a3a04:	f7ff fff2 	bl	80a39ec <_ZN5spark6detail10FutureImplIvNS0_13FutureContextEED1Ev>
 80a3a08:	4620      	mov	r0, r4
 80a3a0a:	f7fc fb48 	bl	80a009e <_ZdlPv>
 80a3a0e:	4620      	mov	r0, r4
 80a3a10:	bd10      	pop	{r4, pc}

080a3a12 <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a3a12:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3a14:	2300      	movs	r3, #0
 80a3a16:	6083      	str	r3, [r0, #8]
 80a3a18:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a3a1a:	4604      	mov	r4, r0
 80a3a1c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a3a1e:	b12b      	cbz	r3, 80a3a2c <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a3a20:	2202      	movs	r2, #2
 80a3a22:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a3a24:	68eb      	ldr	r3, [r5, #12]
 80a3a26:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a3a28:	68ab      	ldr	r3, [r5, #8]
 80a3a2a:	60a3      	str	r3, [r4, #8]
	}
    }
 80a3a2c:	4620      	mov	r0, r4
 80a3a2e:	bd38      	pop	{r3, r4, r5, pc}

080a3a30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvvEEvEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a3a30:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a3a32:	b570      	push	{r4, r5, r6, lr}
 80a3a34:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a3a36:	d006      	beq.n	80a3a46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvvEEvEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x16>
 80a3a38:	2a03      	cmp	r2, #3
 80a3a3a:	d00f      	beq.n	80a3a5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvvEEvEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x2c>
 80a3a3c:	2a01      	cmp	r2, #1
 80a3a3e:	d115      	bne.n	80a3a6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvvEEvEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x3c>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a3a40:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a3a42:	6003      	str	r3, [r0, #0]
	      break;
 80a3a44:	e012      	b.n	80a3a6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvvEEvEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x3c>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a3a46:	2014      	movs	r0, #20
 80a3a48:	680e      	ldr	r6, [r1, #0]
 80a3a4a:	f7fc fb26 	bl	80a009a <_Znwj>
 80a3a4e:	4605      	mov	r5, r0
 80a3a50:	b110      	cbz	r0, 80a3a58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvvEEvEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x28>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a3a52:	4631      	mov	r1, r6
 80a3a54:	f7ff ffdd 	bl	80a3a12 <_ZNSt8functionIFvvEEC1ERKS1_>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a3a58:	6025      	str	r5, [r4, #0]
 80a3a5a:	e007      	b.n	80a3a6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvvEEvEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x3c>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a3a5c:	6804      	ldr	r4, [r0, #0]
 80a3a5e:	b12c      	cbz	r4, 80a3a6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvvEEvEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x3c>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a3a60:	4620      	mov	r0, r4
 80a3a62:	f7ff ff97 	bl	80a3994 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a3a66:	4620      	mov	r0, r4
 80a3a68:	f7fc fb19 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a3a6c:	2000      	movs	r0, #0
 80a3a6e:	bd70      	pop	{r4, r5, r6, pc}

080a3a70 <_ZNKSt8functionIFvvEEclEv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3a70:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a3a72:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3a74:	b90a      	cbnz	r2, 80a3a7a <_ZNKSt8functionIFvvEEclEv+0xa>
	__throw_bad_function_call();
 80a3a76:	f000 fcc8 	bl	80a440a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3a7a:	68c3      	ldr	r3, [r0, #12]
    }
 80a3a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3a80:	4718      	bx	r3

080a3a82 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIS0_EvEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a3a82:	b508      	push	{r3, lr}
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a3a84:	6800      	ldr	r0, [r0, #0]
 80a3a86:	f7ff fff3 	bl	80a3a70 <_ZNKSt8functionIFvvEEclEv>
 80a3a8a:	bd08      	pop	{r3, pc}

080a3a8c <_ZN5spark6FutureIvNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIvS2_EEE>:
template<typename ContextT>
class Future<void, ContextT>: public FutureBase<void, ContextT> {
public:
    using typename FutureBase<void, ContextT>::State;

    using FutureBase<void, ContextT>::FutureBase;
 80a3a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a3a8e:	4605      	mov	r5, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a3a90:	6848      	ldr	r0, [r1, #4]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a3a92:	ac02      	add	r4, sp, #8
 80a3a94:	f844 0d04 	str.w	r0, [r4, #-4]!
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a3a98:	4628      	mov	r0, r5
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a3a9a:	680b      	ldr	r3, [r1, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a3a9c:	2200      	movs	r2, #0
 80a3a9e:	604a      	str	r2, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a3aa0:	600a      	str	r2, [r1, #0]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a3aa2:	f840 3b04 	str.w	r3, [r0], #4
 80a3aa6:	4621      	mov	r1, r4
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a3aa8:	9300      	str	r3, [sp, #0]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a3aaa:	f7ff feaa 	bl	80a3802 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a3aae:	4620      	mov	r0, r4
 80a3ab0:	f7ff fe91 	bl	80a37d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3ab4:	4628      	mov	r0, r5
 80a3ab6:	b003      	add	sp, #12
 80a3ab8:	bd30      	pop	{r4, r5, pc}

080a3aba <_ZN5spark11PromiseBaseIvNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a3aba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a3abc:	460c      	mov	r4, r1
 80a3abe:	4606      	mov	r6, r0
 80a3ac0:	460f      	mov	r7, r1
 80a3ac2:	f854 3b04 	ldr.w	r3, [r4], #4
 80a3ac6:	ad02      	add	r5, sp, #8
 80a3ac8:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a3acc:	4621      	mov	r1, r4
 80a3ace:	a801      	add	r0, sp, #4
 80a3ad0:	f7ff fe97 	bl	80a3802 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a3ad4:	4629      	mov	r1, r5
 80a3ad6:	4630      	mov	r0, r6
 80a3ad8:	f7ff ffd8 	bl	80a3a8c <_ZN5spark6FutureIvNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIvS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a3adc:	a801      	add	r0, sp, #4
 80a3ade:	f7ff fe7a 	bl	80a37d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3ae2:	4620      	mov	r0, r4
 80a3ae4:	f7ff fe77 	bl	80a37d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a3ae8:	4638      	mov	r0, r7
 80a3aea:	f7fc fad8 	bl	80a009e <_ZdlPv>
        return p;
    }
 80a3aee:	4630      	mov	r0, r6
 80a3af0:	b003      	add	sp, #12
 80a3af2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3af4 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a3af4:	b513      	push	{r0, r1, r4, lr}
 80a3af6:	460b      	mov	r3, r1
 80a3af8:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3afa:	c803      	ldmia	r0, {r0, r1}
 80a3afc:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a3b00:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a3b04:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a3b08:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a3b0c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a3b10:	b002      	add	sp, #8
 80a3b12:	bd10      	pop	{r4, pc}

080a3b14 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a3b14:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a3b16:	f3bf 8f5f 	dmb	sy
 80a3b1a:	b087      	sub	sp, #28
 80a3b1c:	2300      	movs	r3, #0
 80a3b1e:	e850 6f00 	ldrex	r6, [r0]
 80a3b22:	e840 3200 	strex	r2, r3, [r0]
 80a3b26:	2a00      	cmp	r2, #0
 80a3b28:	d1f9      	bne.n	80a3b1e <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa>
 80a3b2a:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a3b2e:	2e00      	cmp	r6, #0
 80a3b30:	d037      	beq.n	80a3ba2 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x8e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a3b32:	4618      	mov	r0, r3
 80a3b34:	f7ff fc5a 	bl	80a33ec <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a3b38:	4607      	mov	r7, r0
 80a3b3a:	b118      	cbz	r0, 80a3b44 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x30>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a3b3c:	4630      	mov	r0, r6
 80a3b3e:	f7ff ff97 	bl	80a3a70 <_ZNKSt8functionIFvvEEclEv>
 80a3b42:	e028      	b.n	80a3b96 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a3b44:	4631      	mov	r1, r6
 80a3b46:	a801      	add	r0, sp, #4
 80a3b48:	f7ff ff63 	bl	80a3a12 <_ZNSt8functionIFvvEEC1ERKS1_>
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a3b4c:	2010      	movs	r0, #16
 80a3b4e:	f7fc faa4 	bl	80a009a <_Znwj>
 80a3b52:	4605      	mov	r5, r0
 80a3b54:	b1b8      	cbz	r0, 80a3b86 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x72>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3b56:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a3b58:	2014      	movs	r0, #20
 80a3b5a:	f7fc fa9e 	bl	80a009a <_Znwj>
 80a3b5e:	4604      	mov	r4, r0
 80a3b60:	b160      	cbz	r0, 80a3b7c <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x68>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3b62:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a3b64:	4601      	mov	r1, r0
 80a3b66:	a801      	add	r0, sp, #4
 80a3b68:	f7ff ffc4 	bl	80a3af4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3b6c:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a3b6e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3b70:	60a3      	str	r3, [r4, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a3b72:	9203      	str	r2, [sp, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3b74:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a3b76:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3b78:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a3b7a:	9204      	str	r2, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a3b7c:	4b0a      	ldr	r3, [pc, #40]	; (80a3ba8 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x94>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a3b7e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a3b80:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a3b82:	4b0a      	ldr	r3, [pc, #40]	; (80a3bac <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x98>)
 80a3b84:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a3b86:	a801      	add	r0, sp, #4
 80a3b88:	f7ff ff04 	bl	80a3994 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a3b8c:	2200      	movs	r2, #0
 80a3b8e:	4629      	mov	r1, r5
 80a3b90:	4807      	ldr	r0, [pc, #28]	; (80a3bb0 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9c>)
 80a3b92:	f7ff fc33 	bl	80a33fc <application_thread_invoke>
 80a3b96:	4630      	mov	r0, r6
 80a3b98:	f7ff fefc 	bl	80a3994 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a3b9c:	4630      	mov	r0, r6
 80a3b9e:	f7fc fa7e 	bl	80a009e <_ZdlPv>
        }
    }
 80a3ba2:	b007      	add	sp, #28
 80a3ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3ba6:	bf00      	nop
 80a3ba8:	080a3a83 	.word	0x080a3a83
 80a3bac:	080a3a31 	.word	0x080a3a31
 80a3bb0:	080a4169 	.word	0x080a4169

080a3bb4 <_ZNKSt8functionIFvRKN5spark5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3bb4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a3bb6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3bb8:	b90a      	cbnz	r2, 80a3bbe <_ZNKSt8functionIFvRKN5spark5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a3bba:	f000 fc26 	bl	80a440a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3bbe:	68c3      	ldr	r3, [r0, #12]
    }
 80a3bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3bc4:	4718      	bx	r3

080a3bc6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN5spark5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a3bc6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a3bc8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a3bca:	f100 0110 	add.w	r1, r0, #16
 80a3bce:	f7ff fff1 	bl	80a3bb4 <_ZNKSt8functionIFvRKN5spark5ErrorEEEclES3_>
 80a3bd2:	bd08      	pop	{r3, pc}

080a3bd4 <_ZNSt8functionIFvRKN5spark5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a3bd4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3bd6:	2300      	movs	r3, #0
 80a3bd8:	6083      	str	r3, [r0, #8]
 80a3bda:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a3bdc:	4604      	mov	r4, r0
 80a3bde:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a3be0:	b12b      	cbz	r3, 80a3bee <_ZNSt8functionIFvRKN5spark5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a3be2:	2202      	movs	r2, #2
 80a3be4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a3be6:	68eb      	ldr	r3, [r5, #12]
 80a3be8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a3bea:	68ab      	ldr	r3, [r5, #8]
 80a3bec:	60a3      	str	r3, [r4, #8]
	}
    }
 80a3bee:	4620      	mov	r0, r4
 80a3bf0:	bd38      	pop	{r3, r4, r5, pc}

080a3bf2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN5spark5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a3bf2:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a3bf4:	b570      	push	{r4, r5, r6, lr}
 80a3bf6:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a3bf8:	d006      	beq.n	80a3c08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN5spark5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a3bfa:	2a03      	cmp	r2, #3
 80a3bfc:	d011      	beq.n	80a3c22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN5spark5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x30>
 80a3bfe:	2a01      	cmp	r2, #1
 80a3c00:	d117      	bne.n	80a3c32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN5spark5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a3c02:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a3c04:	6003      	str	r3, [r0, #0]
	      break;
 80a3c06:	e014      	b.n	80a3c32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN5spark5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a3c08:	2014      	movs	r0, #20
 80a3c0a:	680e      	ldr	r6, [r1, #0]
 80a3c0c:	f7fc fa45 	bl	80a009a <_Znwj>
 80a3c10:	4605      	mov	r5, r0
 80a3c12:	b120      	cbz	r0, 80a3c1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN5spark5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a3c14:	4631      	mov	r1, r6
 80a3c16:	f7ff ffdd 	bl	80a3bd4 <_ZNSt8functionIFvRKN5spark5ErrorEEEC1ERKS5_>
 80a3c1a:	8a33      	ldrh	r3, [r6, #16]
 80a3c1c:	822b      	strh	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a3c1e:	6025      	str	r5, [r4, #0]
 80a3c20:	e007      	b.n	80a3c32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN5spark5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a3c22:	6804      	ldr	r4, [r0, #0]
 80a3c24:	b12c      	cbz	r4, 80a3c32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN5spark5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a3c26:	4620      	mov	r0, r4
 80a3c28:	f7ff feb4 	bl	80a3994 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a3c2c:	4620      	mov	r0, r4
 80a3c2e:	f7fc fa36 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a3c32:	2000      	movs	r0, #0
 80a3c34:	bd70      	pop	{r4, r5, r6, pc}
	...

080a3c38 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a3c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3c3a:	460c      	mov	r4, r1
 80a3c3c:	f3bf 8f5f 	dmb	sy
 80a3c40:	b087      	sub	sp, #28
 80a3c42:	2300      	movs	r3, #0
 80a3c44:	e850 6f00 	ldrex	r6, [r0]
 80a3c48:	e840 3200 	strex	r2, r3, [r0]
 80a3c4c:	2a00      	cmp	r2, #0
 80a3c4e:	d1f9      	bne.n	80a3c44 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a3c50:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a3c54:	2e00      	cmp	r6, #0
 80a3c56:	d03e      	beq.n	80a3cd6 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a3c58:	4618      	mov	r0, r3
 80a3c5a:	f7ff fbc7 	bl	80a33ec <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a3c5e:	4607      	mov	r7, r0
 80a3c60:	b120      	cbz	r0, 80a3c6c <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a3c62:	4621      	mov	r1, r4
 80a3c64:	4630      	mov	r0, r6
 80a3c66:	f7ff ffa5 	bl	80a3bb4 <_ZNKSt8functionIFvRKN5spark5ErrorEEEclES3_>
 80a3c6a:	e02e      	b.n	80a3cca <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a3c6c:	4631      	mov	r1, r6
 80a3c6e:	a801      	add	r0, sp, #4
 80a3c70:	f7ff ffb0 	bl	80a3bd4 <_ZNSt8functionIFvRKN5spark5ErrorEEEC1ERKS5_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a3c74:	8823      	ldrh	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a3c76:	2010      	movs	r0, #16
 80a3c78:	f8ad 3014 	strh.w	r3, [sp, #20]
 80a3c7c:	f7fc fa0d 	bl	80a009a <_Znwj>
 80a3c80:	4605      	mov	r5, r0
 80a3c82:	b1d0      	cbz	r0, 80a3cba <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3c84:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a3c86:	2014      	movs	r0, #20
 80a3c88:	f7fc fa07 	bl	80a009a <_Znwj>
 80a3c8c:	4604      	mov	r4, r0
 80a3c8e:	b178      	cbz	r0, 80a3cb0 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3c90:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a3c92:	4601      	mov	r1, r0
 80a3c94:	a801      	add	r0, sp, #4
 80a3c96:	f7ff ff2d 	bl	80a3af4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3c9a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a3c9c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3c9e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3ca0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a3ca2:	9203      	str	r2, [sp, #12]
 80a3ca4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3ca6:	60e3      	str	r3, [r4, #12]
 80a3ca8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a3cac:	9204      	str	r2, [sp, #16]
 80a3cae:	8223      	strh	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a3cb0:	4b0a      	ldr	r3, [pc, #40]	; (80a3cdc <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a3cb2:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a3cb4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a3cb6:	4b0a      	ldr	r3, [pc, #40]	; (80a3ce0 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a3cb8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a3cba:	a801      	add	r0, sp, #4
 80a3cbc:	f7ff fe6a 	bl	80a3994 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a3cc0:	2200      	movs	r2, #0
 80a3cc2:	4629      	mov	r1, r5
 80a3cc4:	4807      	ldr	r0, [pc, #28]	; (80a3ce4 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a3cc6:	f7ff fb99 	bl	80a33fc <application_thread_invoke>
 80a3cca:	4630      	mov	r0, r6
 80a3ccc:	f7ff fe62 	bl	80a3994 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a3cd0:	4630      	mov	r0, r6
 80a3cd2:	f7fc f9e4 	bl	80a009e <_ZdlPv>
        }
    }
 80a3cd6:	b007      	add	sp, #28
 80a3cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3cda:	bf00      	nop
 80a3cdc:	080a3bc7 	.word	0x080a3bc7
 80a3ce0:	080a3bf3 	.word	0x080a3bf3
 80a3ce4:	080a4169 	.word	0x080a4169

080a3ce8 <_ZN5spark6detail10FutureImplIvNS0_13FutureContextEE8setErrorENS_5ErrorE>:
            this->releaseDone();
            this->invokeCallback(this->onSuccess_);
        }
    }

    void setError(Error error) {
 80a3ce8:	b513      	push	{r0, r1, r4, lr}
    std::atomic<bool> done_; // Flag signaling that future is in a final state
    std::atomic<typename FutureCallbackTypes<ResultT>::OnSuccess*> onSuccess_; // User callback for succeeded operation
    std::atomic<typename FutureCallbackTypes<ResultT>::OnError*> onError_; // User callback for failed operation

    bool exchangeState(State state) {
        State s = State::RUNNING; // Expected state
 80a3cea:	2300      	movs	r3, #0
 80a3cec:	9301      	str	r3, [sp, #4]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a3cee:	2202      	movs	r2, #2
 80a3cf0:	1d03      	adds	r3, r0, #4
 80a3cf2:	e853 4f00 	ldrex	r4, [r3]
 80a3cf6:	2c00      	cmp	r4, #0
 80a3cf8:	d104      	bne.n	80a3d04 <_ZN5spark6detail10FutureImplIvNS0_13FutureContextEE8setErrorENS_5ErrorE+0x1c>
 80a3cfa:	e843 2e00 	strex	lr, r2, [r3]
 80a3cfe:	f1be 0f00 	cmp.w	lr, #0
 80a3d02:	d1f6      	bne.n	80a3cf2 <_ZN5spark6detail10FutureImplIvNS0_13FutureContextEE8setErrorENS_5ErrorE+0xa>
 80a3d04:	d109      	bne.n	80a3d1a <_ZN5spark6detail10FutureImplIvNS0_13FutureContextEE8setErrorENS_5ErrorE+0x32>
        }
    }

    void setError(Error error) {
        if (this->exchangeState(State::FAILED)) {
            error_ = std::move(error);
 80a3d06:	8281      	strh	r1, [r0, #20]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a3d08:	2301      	movs	r3, #1
 80a3d0a:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onError_, error_);
 80a3d0e:	f100 0114 	add.w	r1, r0, #20
 80a3d12:	7203      	strb	r3, [r0, #8]
 80a3d14:	3010      	adds	r0, #16
 80a3d16:	f7ff ff8f 	bl	80a3c38 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
        }
    }
 80a3d1a:	b002      	add	sp, #8
 80a3d1c:	bd10      	pop	{r4, pc}
	...

080a3d20 <_ZN10CloudClass7publishEPKcS1_im>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

bool CloudClass::publish(const char *eventName, const char *eventData, int ttl, uint32_t flags) {
 80a3d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3d24:	b08c      	sub	sp, #48	; 0x30
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a3d26:	ae09      	add	r6, sp, #36	; 0x24
 80a3d28:	2500      	movs	r5, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

bool CloudClass::publish(const char *eventName, const char *eventData, int ttl, uint32_t flags) {
 80a3d2a:	4607      	mov	r7, r0
 80a3d2c:	469a      	mov	sl, r3
public:
    // Future state
    typedef typename detail::FutureImpl<ResultT, ContextT>::State State;

    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a3d2e:	2018      	movs	r0, #24
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a3d30:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

bool CloudClass::publish(const char *eventName, const char *eventData, int ttl, uint32_t flags) {
 80a3d32:	4688      	mov	r8, r1
 80a3d34:	4691      	mov	r9, r2
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a3d36:	6075      	str	r5, [r6, #4]
 80a3d38:	60b5      	str	r5, [r6, #8]
 80a3d3a:	9309      	str	r3, [sp, #36]	; 0x24
 80a3d3c:	f7fc f9ad 	bl	80a009a <_Znwj>
 80a3d40:	4604      	mov	r4, r0
 80a3d42:	b130      	cbz	r0, 80a3d52 <_ZN10CloudClass7publishEPKcS1_im+0x32>
    using typename FutureImplBase<void, ContextT>::State;
    using typename FutureImplBase<void, ContextT>::OnSuccessCallback;
    using typename FutureImplBase<void, ContextT>::OnErrorCallback;

    explicit FutureImpl(State state) :
            FutureImplBase<void, ContextT>(state) {
 80a3d44:	4b2f      	ldr	r3, [pc, #188]	; (80a3e04 <_ZN10CloudClass7publishEPKcS1_im+0xe4>)
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a3d46:	6045      	str	r5, [r0, #4]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a3d48:	7205      	strb	r5, [r0, #8]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a3d4a:	60c5      	str	r5, [r0, #12]
 80a3d4c:	6105      	str	r5, [r0, #16]
 80a3d4e:	6003      	str	r3, [r0, #0]

} // namespace spark

// spark::Error
inline spark::Error::Error() :
        type_(NONE) {
 80a3d50:	8285      	strh	r5, [r0, #20]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a3d52:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a3d54:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a3d56:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a3d58:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a3d5a:	f7fc f99e 	bl	80a009a <_Znwj>
 80a3d5e:	b128      	cbz	r0, 80a3d6c <_ZN10CloudClass7publishEPKcS1_im+0x4c>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a3d60:	2301      	movs	r3, #1
 80a3d62:	6043      	str	r3, [r0, #4]
 80a3d64:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a3d66:	4b28      	ldr	r3, [pc, #160]	; (80a3e08 <_ZN10CloudClass7publishEPKcS1_im+0xe8>)
 80a3d68:	60c4      	str	r4, [r0, #12]
 80a3d6a:	6003      	str	r3, [r0, #0]

    // Completion handler
    spark::Promise<void> p;
    d.handler_callback = p.systemCallback;
 80a3d6c:	4b27      	ldr	r3, [pc, #156]	; (80a3e0c <_ZN10CloudClass7publishEPKcS1_im+0xec>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a3d6e:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a3d70:	2008      	movs	r0, #8
 80a3d72:	930a      	str	r3, [sp, #40]	; 0x28
 80a3d74:	f7fc f991 	bl	80a009a <_Znwj>
 80a3d78:	4604      	mov	r4, r0
 80a3d7a:	b128      	cbz	r0, 80a3d88 <_ZN10CloudClass7publishEPKcS1_im+0x68>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a3d7c:	9b03      	ldr	r3, [sp, #12]
 80a3d7e:	a904      	add	r1, sp, #16
 80a3d80:	f840 3b04 	str.w	r3, [r0], #4
 80a3d84:	f7ff fd3d 	bl	80a3802 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags, &d) && !p.isDone()) {
 80a3d88:	9600      	str	r6, [sp, #0]
 80a3d8a:	4653      	mov	r3, sl
 80a3d8c:	464a      	mov	r2, r9
 80a3d8e:	4641      	mov	r1, r8
 80a3d90:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    spark::Promise<void> p;
    d.handler_callback = p.systemCallback;
    d.handler_data = p.dataPtr();
 80a3d92:	940b      	str	r4, [sp, #44]	; 0x2c

    if (!spark_send_event(eventName, eventData, ttl, flags, &d) && !p.isDone()) {
 80a3d94:	f7ff fb5a 	bl	80a344c <spark_send_event>
 80a3d98:	b910      	cbnz	r0, 80a3da0 <_ZN10CloudClass7publishEPKcS1_im+0x80>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a3d9a:	9803      	ldr	r0, [sp, #12]
 80a3d9c:	7a03      	ldrb	r3, [r0, #8]
 80a3d9e:	b1b3      	cbz	r3, 80a3dce <_ZN10CloudClass7publishEPKcS1_im+0xae>
 80a3da0:	9b03      	ldr	r3, [sp, #12]
 80a3da2:	a904      	add	r1, sp, #16
 80a3da4:	a808      	add	r0, sp, #32
 80a3da6:	9307      	str	r3, [sp, #28]
 80a3da8:	f7ff fd2b 	bl	80a3802 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a3dac:	a907      	add	r1, sp, #28
 80a3dae:	a805      	add	r0, sp, #20
 80a3db0:	f7ff fe6c 	bl	80a3a8c <_ZN5spark6FutureIvNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIvS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a3db4:	a808      	add	r0, sp, #32
 80a3db6:	f7ff fd0e 	bl	80a37d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a3dba:	2000      	movs	r0, #0
 80a3dbc:	9c05      	ldr	r4, [sp, #20]
 80a3dbe:	f7ff fb15 	bl	80a33ec <application_thread_current>
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) {
        // TODO: Waiting for a future in non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
 80a3dc2:	b180      	cbz	r0, 80a3de6 <_ZN10CloudClass7publishEPKcS1_im+0xc6>
 80a3dc4:	7a23      	ldrb	r3, [r4, #8]
            const system_tick_t t = (timeout > 0) ? millis() : 0;
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not checked
 80a3dc6:	b973      	cbnz	r3, 80a3de6 <_ZN10CloudClass7publishEPKcS1_im+0xc6>

// Event loop and threading abstraction. Used for unit testing
struct FutureContext {
    // Runs the application's event loop
    static void processApplicationEvents() {
        spark_process();
 80a3dc8:	f7ff fb38 	bl	80a343c <spark_process>
 80a3dcc:	e7fa      	b.n	80a3dc4 <_ZN10CloudClass7publishEPKcS1_im+0xa4>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(ptr) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a3dce:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a3dd2:	f7ff ff89 	bl	80a3ce8 <_ZN5spark6detail10FutureImplIvNS0_13FutureContextEE8setErrorENS_5ErrorE>
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(spark::Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a3dd6:	a807      	add	r0, sp, #28
 80a3dd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80a3dda:	f7ff fe6e 	bl	80a3aba <_ZN5spark11PromiseBaseIvNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a3dde:	a808      	add	r0, sp, #32
 80a3de0:	f7ff fcf9 	bl	80a37d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3de4:	e7dc      	b.n	80a3da0 <_ZN10CloudClass7publishEPKcS1_im+0x80>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a3de6:	9b05      	ldr	r3, [sp, #20]
 80a3de8:	a806      	add	r0, sp, #24
 80a3dea:	685c      	ldr	r4, [r3, #4]
 80a3dec:	f7ff fcf3 	bl	80a37d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3df0:	a804      	add	r0, sp, #16
 80a3df2:	f7ff fcf0 	bl	80a37d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }

    // TODO: Return future object instead of synchronous waiting
    spark::Future<void> f = p.future();
    return f.wait().isSucceeded();
 80a3df6:	1e63      	subs	r3, r4, #1
 80a3df8:	4258      	negs	r0, r3
 80a3dfa:	4158      	adcs	r0, r3
#else
    return false; // spark::Future<void>::makeFailed(spark::Error::NOT_SUPPORTED);
#endif
}
 80a3dfc:	b00c      	add	sp, #48	; 0x30
 80a3dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3e02:	bf00      	nop
 80a3e04:	080a5850 	.word	0x080a5850
 80a3e08:	080a5860 	.word	0x080a5860
 80a3e0c:	080a3e11 	.word	0x080a3e11

080a3e10 <_ZN5spark7PromiseIvNS_6detail13FutureContextEE14systemCallbackEiPvS4_S4_>:

    void setResult() {
        this->p_->setResult();
    }

    static void systemCallback(int error, void* result, void* data, void* reserved) {
 80a3e10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a3e12:	4604      	mov	r4, r0
        auto p = Promise<void, ContextT>::fromDataPtr(data);
 80a3e14:	4611      	mov	r1, r2
 80a3e16:	a802      	add	r0, sp, #8
 80a3e18:	f7ff fe4f 	bl	80a3aba <_ZN5spark11PromiseBaseIvNS_6detail13FutureContextEE11fromDataPtrEPv>
        if (error != spark::Error::NONE) {
 80a3e1c:	b124      	cbz	r4, 80a3e28 <_ZN5spark7PromiseIvNS_6detail13FutureContextEE14systemCallbackEiPvS4_S4_+0x18>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(ptr) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a3e1e:	4621      	mov	r1, r4
 80a3e20:	9802      	ldr	r0, [sp, #8]
 80a3e22:	f7ff ff61 	bl	80a3ce8 <_ZN5spark6detail10FutureImplIvNS0_13FutureContextEE8setErrorENS_5ErrorE>
 80a3e26:	e015      	b.n	80a3e54 <_ZN5spark7PromiseIvNS_6detail13FutureContextEE14systemCallbackEiPvS4_S4_+0x44>
 80a3e28:	9802      	ldr	r0, [sp, #8]
    std::atomic<bool> done_; // Flag signaling that future is in a final state
    std::atomic<typename FutureCallbackTypes<ResultT>::OnSuccess*> onSuccess_; // User callback for succeeded operation
    std::atomic<typename FutureCallbackTypes<ResultT>::OnError*> onError_; // User callback for failed operation

    bool exchangeState(State state) {
        State s = State::RUNNING; // Expected state
 80a3e2a:	9401      	str	r4, [sp, #4]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a3e2c:	1d02      	adds	r2, r0, #4
 80a3e2e:	2301      	movs	r3, #1
 80a3e30:	e852 1f00 	ldrex	r1, [r2]
 80a3e34:	2900      	cmp	r1, #0
 80a3e36:	d103      	bne.n	80a3e40 <_ZN5spark7PromiseIvNS_6detail13FutureContextEE14systemCallbackEiPvS4_S4_+0x30>
 80a3e38:	e842 3400 	strex	r4, r3, [r2]
 80a3e3c:	2c00      	cmp	r4, #0
 80a3e3e:	d1f7      	bne.n	80a3e30 <_ZN5spark7PromiseIvNS_6detail13FutureContextEE14systemCallbackEiPvS4_S4_+0x20>
 80a3e40:	d001      	beq.n	80a3e46 <_ZN5spark7PromiseIvNS_6detail13FutureContextEE14systemCallbackEiPvS4_S4_+0x36>
 80a3e42:	9101      	str	r1, [sp, #4]
 80a3e44:	e006      	b.n	80a3e54 <_ZN5spark7PromiseIvNS_6detail13FutureContextEE14systemCallbackEiPvS4_S4_+0x44>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a3e46:	f3bf 8f5f 	dmb	sy
    }

    void setResult() {
        if (this->exchangeState(State::SUCCEEDED)) {
            this->releaseDone();
            this->invokeCallback(this->onSuccess_);
 80a3e4a:	300c      	adds	r0, #12
 80a3e4c:	f800 3c04 	strb.w	r3, [r0, #-4]
 80a3e50:	f7ff fe60 	bl	80a3b14 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a3e54:	a803      	add	r0, sp, #12
 80a3e56:	f7ff fcbe 	bl	80a37d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (error != spark::Error::NONE) {
            p.setError((spark::Error::Type)error);
        } else {
            p.setResult();
        }
    }
 80a3e5a:	b004      	add	sp, #16
 80a3e5c:	bd10      	pop	{r4, pc}

080a3e5e <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a3e5e:	4770      	bx	lr

080a3e60 <_ZN9IPAddressD0Ev>:
 80a3e60:	b510      	push	{r4, lr}
 80a3e62:	4604      	mov	r4, r0
 80a3e64:	f7fc f91b 	bl	80a009e <_ZdlPv>
 80a3e68:	4620      	mov	r0, r4
 80a3e6a:	bd10      	pop	{r4, pc}

080a3e6c <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a3e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3e6e:	460f      	mov	r7, r1
 80a3e70:	f100 0608 	add.w	r6, r0, #8
 80a3e74:	1d05      	adds	r5, r0, #4
 80a3e76:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3e78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a3e7c:	220a      	movs	r2, #10
 80a3e7e:	4638      	mov	r0, r7
 80a3e80:	f7ff fc6d 	bl	80a375e <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3e84:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3e86:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3e88:	d007      	beq.n	80a3e9a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a3e8a:	2c00      	cmp	r4, #0
 80a3e8c:	d0f4      	beq.n	80a3e78 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a3e8e:	212e      	movs	r1, #46	; 0x2e
 80a3e90:	4638      	mov	r0, r7
 80a3e92:	f7ff fc21 	bl	80a36d8 <_ZN5Print5printEc>
 80a3e96:	4404      	add	r4, r0
 80a3e98:	e7ee      	b.n	80a3e78 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a3e9a:	4620      	mov	r0, r4
 80a3e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3e9e <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a3e9e:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a3ea0:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a3ea4:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a3ea8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a3eac:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a3eb0:	2304      	movs	r3, #4
 80a3eb2:	6041      	str	r1, [r0, #4]
 80a3eb4:	7503      	strb	r3, [r0, #20]
 80a3eb6:	bd10      	pop	{r4, pc}

080a3eb8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a3eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a3eba:	4d04      	ldr	r5, [pc, #16]	; (80a3ecc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a3ebc:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a3ebe:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a3ec2:	9500      	str	r5, [sp, #0]
 80a3ec4:	f7ff ffeb 	bl	80a3e9e <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a3ec8:	b003      	add	sp, #12
 80a3eca:	bd30      	pop	{r4, r5, pc}
 80a3ecc:	080a587c 	.word	0x080a587c

080a3ed0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3ed0:	7441      	strb	r1, [r0, #17]
 80a3ed2:	4770      	bx	lr

080a3ed4 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a3ed4:	4770      	bx	lr

080a3ed6 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a3ed6:	2100      	movs	r1, #0
 80a3ed8:	7c00      	ldrb	r0, [r0, #16]
 80a3eda:	f7ff ba57 	b.w	80a338c <HAL_USB_USART_Receive_Data>

080a3ede <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a3ede:	2101      	movs	r1, #1
 80a3ee0:	7c00      	ldrb	r0, [r0, #16]
 80a3ee2:	f7ff ba53 	b.w	80a338c <HAL_USB_USART_Receive_Data>

080a3ee6 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a3ee6:	7c00      	ldrb	r0, [r0, #16]
 80a3ee8:	f7ff ba48 	b.w	80a337c <HAL_USB_USART_Available_Data_For_Write>

080a3eec <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a3eec:	7c00      	ldrb	r0, [r0, #16]
 80a3eee:	f7ff ba3d 	b.w	80a336c <HAL_USB_USART_Available_Data>

080a3ef2 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a3ef2:	b538      	push	{r3, r4, r5, lr}
 80a3ef4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3ef6:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a3ef8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3efa:	f7ff fa3f 	bl	80a337c <HAL_USB_USART_Available_Data_For_Write>
 80a3efe:	2800      	cmp	r0, #0
 80a3f00:	dc01      	bgt.n	80a3f06 <_ZN9USBSerial5writeEh+0x14>
 80a3f02:	7c60      	ldrb	r0, [r4, #17]
 80a3f04:	b120      	cbz	r0, 80a3f10 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a3f06:	4629      	mov	r1, r5
 80a3f08:	7c20      	ldrb	r0, [r4, #16]
 80a3f0a:	f7ff fa47 	bl	80a339c <HAL_USB_USART_Send_Data>
    return 1;
 80a3f0e:	2001      	movs	r0, #1
  }
  return 0;
}
 80a3f10:	bd38      	pop	{r3, r4, r5, pc}

080a3f12 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a3f12:	7c00      	ldrb	r0, [r0, #16]
 80a3f14:	f7ff ba4a 	b.w	80a33ac <HAL_USB_USART_Flush_Data>

080a3f18 <_ZN9USBSerialD0Ev>:
 80a3f18:	b510      	push	{r4, lr}
 80a3f1a:	4604      	mov	r4, r0
 80a3f1c:	f7fc f8bf 	bl	80a009e <_ZdlPv>
 80a3f20:	4620      	mov	r0, r4
 80a3f22:	bd10      	pop	{r4, pc}

080a3f24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3f24:	b510      	push	{r4, lr}
 80a3f26:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a3f28:	2300      	movs	r3, #0
 80a3f2a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3f30:	60a3      	str	r3, [r4, #8]
 80a3f32:	4b05      	ldr	r3, [pc, #20]	; (80a3f48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a3f34:	4608      	mov	r0, r1
 80a3f36:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a3f38:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a3f3a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a3f3c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a3f3e:	4611      	mov	r1, r2
 80a3f40:	f7ff fa04 	bl	80a334c <HAL_USB_USART_Init>
}
 80a3f44:	4620      	mov	r0, r4
 80a3f46:	bd10      	pop	{r4, pc}
 80a3f48:	080a5890 	.word	0x080a5890

080a3f4c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a3f4c:	2200      	movs	r2, #0
 80a3f4e:	7c00      	ldrb	r0, [r0, #16]
 80a3f50:	f7ff ba04 	b.w	80a335c <HAL_USB_USART_Begin>

080a3f54 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a3f54:	b510      	push	{r4, lr}
 80a3f56:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3f58:	2214      	movs	r2, #20
 80a3f5a:	2100      	movs	r1, #0
 80a3f5c:	f001 fb4f 	bl	80a55fe <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3f60:	4b05      	ldr	r3, [pc, #20]	; (80a3f78 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3f62:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3f64:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a3f66:	4b05      	ldr	r3, [pc, #20]	; (80a3f7c <_Z19acquireSerialBufferv+0x28>)
 80a3f68:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3f6a:	f240 1301 	movw	r3, #257	; 0x101
 80a3f6e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3f70:	2381      	movs	r3, #129	; 0x81
 80a3f72:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3f74:	bd10      	pop	{r4, pc}
 80a3f76:	bf00      	nop
 80a3f78:	200004c1 	.word	0x200004c1
 80a3f7c:	20000440 	.word	0x20000440

080a3f80 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a3f80:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3f82:	4d0e      	ldr	r5, [pc, #56]	; (80a3fbc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a3f84:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a3f86:	a801      	add	r0, sp, #4
 80a3f88:	f7ff ffe4 	bl	80a3f54 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3f8c:	6829      	ldr	r1, [r5, #0]
 80a3f8e:	f011 0401 	ands.w	r4, r1, #1
 80a3f92:	d110      	bne.n	80a3fb6 <_Z16_fetch_usbserialv+0x36>
 80a3f94:	4628      	mov	r0, r5
 80a3f96:	f7fc f884 	bl	80a00a2 <__cxa_guard_acquire>
 80a3f9a:	b160      	cbz	r0, 80a3fb6 <_Z16_fetch_usbserialv+0x36>
 80a3f9c:	aa01      	add	r2, sp, #4
 80a3f9e:	4621      	mov	r1, r4
 80a3fa0:	4807      	ldr	r0, [pc, #28]	; (80a3fc0 <_Z16_fetch_usbserialv+0x40>)
 80a3fa2:	f7ff ffbf 	bl	80a3f24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3fa6:	4628      	mov	r0, r5
 80a3fa8:	f7fc f880 	bl	80a00ac <__cxa_guard_release>
 80a3fac:	4a05      	ldr	r2, [pc, #20]	; (80a3fc4 <_Z16_fetch_usbserialv+0x44>)
 80a3fae:	4906      	ldr	r1, [pc, #24]	; (80a3fc8 <_Z16_fetch_usbserialv+0x48>)
 80a3fb0:	4803      	ldr	r0, [pc, #12]	; (80a3fc0 <_Z16_fetch_usbserialv+0x40>)
 80a3fb2:	f000 fa25 	bl	80a4400 <__aeabi_atexit>
	return _usbserial;
}
 80a3fb6:	4802      	ldr	r0, [pc, #8]	; (80a3fc0 <_Z16_fetch_usbserialv+0x40>)
 80a3fb8:	b007      	add	sp, #28
 80a3fba:	bd30      	pop	{r4, r5, pc}
 80a3fbc:	2000043c 	.word	0x2000043c
 80a3fc0:	200005c4 	.word	0x200005c4
 80a3fc4:	20000364 	.word	0x20000364
 80a3fc8:	080a3ed5 	.word	0x080a3ed5

080a3fcc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a3fcc:	b510      	push	{r4, lr}
 80a3fce:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3fd0:	2214      	movs	r2, #20
 80a3fd2:	2100      	movs	r1, #0
 80a3fd4:	f001 fb13 	bl	80a55fe <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3fd8:	4b05      	ldr	r3, [pc, #20]	; (80a3ff0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3fda:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3fdc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a3fde:	4b05      	ldr	r3, [pc, #20]	; (80a3ff4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a3fe0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3fe2:	f240 1301 	movw	r3, #257	; 0x101
 80a3fe6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3fe8:	2381      	movs	r3, #129	; 0x81
 80a3fea:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3fec:	bd10      	pop	{r4, pc}
 80a3fee:	bf00      	nop
 80a3ff0:	20000674 	.word	0x20000674
 80a3ff4:	200005dc 	.word	0x200005dc

080a3ff8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3ff8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3ffa:	4c0e      	ldr	r4, [pc, #56]	; (80a4034 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a3ffc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a3ffe:	a801      	add	r0, sp, #4
 80a4000:	f7ff ffe4 	bl	80a3fcc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4004:	6823      	ldr	r3, [r4, #0]
 80a4006:	07db      	lsls	r3, r3, #31
 80a4008:	d410      	bmi.n	80a402c <_Z17_fetch_usbserial1v+0x34>
 80a400a:	4620      	mov	r0, r4
 80a400c:	f7fc f849 	bl	80a00a2 <__cxa_guard_acquire>
 80a4010:	b160      	cbz	r0, 80a402c <_Z17_fetch_usbserial1v+0x34>
 80a4012:	aa01      	add	r2, sp, #4
 80a4014:	2101      	movs	r1, #1
 80a4016:	4808      	ldr	r0, [pc, #32]	; (80a4038 <_Z17_fetch_usbserial1v+0x40>)
 80a4018:	f7ff ff84 	bl	80a3f24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a401c:	4620      	mov	r0, r4
 80a401e:	f7fc f845 	bl	80a00ac <__cxa_guard_release>
 80a4022:	4a06      	ldr	r2, [pc, #24]	; (80a403c <_Z17_fetch_usbserial1v+0x44>)
 80a4024:	4906      	ldr	r1, [pc, #24]	; (80a4040 <_Z17_fetch_usbserial1v+0x48>)
 80a4026:	4804      	ldr	r0, [pc, #16]	; (80a4038 <_Z17_fetch_usbserial1v+0x40>)
 80a4028:	f000 f9ea 	bl	80a4400 <__aeabi_atexit>
  return _usbserial1;
}
 80a402c:	4802      	ldr	r0, [pc, #8]	; (80a4038 <_Z17_fetch_usbserial1v+0x40>)
 80a402e:	b006      	add	sp, #24
 80a4030:	bd10      	pop	{r4, pc}
 80a4032:	bf00      	nop
 80a4034:	200005d8 	.word	0x200005d8
 80a4038:	20000660 	.word	0x20000660
 80a403c:	20000364 	.word	0x20000364
 80a4040:	080a3ed5 	.word	0x080a3ed5

080a4044 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a4044:	4700      	bx	r0
	...

080a4048 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a4048:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a404a:	461c      	mov	r4, r3
 80a404c:	b085      	sub	sp, #20
 80a404e:	4605      	mov	r5, r0
 80a4050:	460e      	mov	r6, r1
 80a4052:	4617      	mov	r7, r2
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a4054:	f7ff f890 	bl	80a3178 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80a4058:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80a405a:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a405c:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a4060:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a4062:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a4066:	bfb4      	ite	lt
 80a4068:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a406a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a406e:	4628      	mov	r0, r5
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a4070:	bfa4      	itt	ge
 80a4072:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a4076:	ab03      	addge	r3, sp, #12
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a4078:	9300      	str	r3, [sp, #0]
 80a407a:	4632      	mov	r2, r6
 80a407c:	463b      	mov	r3, r7
 80a407e:	4904      	ldr	r1, [pc, #16]	; (80a4090 <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a4080:	bfa8      	it	ge
 80a4082:	f88d 400d 	strbge.w	r4, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a4086:	f7ff f86f 	bl	80a3168 <HAL_Interrupts_Attach>
    return true;
}
 80a408a:	2001      	movs	r0, #1
 80a408c:	b005      	add	sp, #20
 80a408e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4090:	080a4045 	.word	0x080a4045

080a4094 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a4094:	4770      	bx	lr

080a4096 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4096:	7441      	strb	r1, [r0, #17]
 80a4098:	4770      	bx	lr

080a409a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a409a:	7c00      	ldrb	r0, [r0, #16]
 80a409c:	f7ff b8d4 	b.w	80a3248 <HAL_USART_Available_Data_For_Write>

080a40a0 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a40a0:	7c00      	ldrb	r0, [r0, #16]
 80a40a2:	f7ff b8a9 	b.w	80a31f8 <HAL_USART_Available_Data>

080a40a6 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a40a6:	7c00      	ldrb	r0, [r0, #16]
 80a40a8:	f7ff b8b6 	b.w	80a3218 <HAL_USART_Peek_Data>

080a40ac <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a40ac:	7c00      	ldrb	r0, [r0, #16]
 80a40ae:	f7ff b8ab 	b.w	80a3208 <HAL_USART_Read_Data>

080a40b2 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a40b2:	7c00      	ldrb	r0, [r0, #16]
 80a40b4:	f7ff b8b8 	b.w	80a3228 <HAL_USART_Flush_Data>

080a40b8 <_ZN11USARTSerialD0Ev>:
 80a40b8:	b510      	push	{r4, lr}
 80a40ba:	4604      	mov	r4, r0
 80a40bc:	f7fb ffef 	bl	80a009e <_ZdlPv>
 80a40c0:	4620      	mov	r0, r4
 80a40c2:	bd10      	pop	{r4, pc}

080a40c4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a40c4:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a40c6:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a40c8:	4604      	mov	r4, r0
 80a40ca:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a40cc:	b925      	cbnz	r5, 80a40d8 <_ZN11USARTSerial5writeEh+0x14>
 80a40ce:	7c00      	ldrb	r0, [r0, #16]
 80a40d0:	f7ff f8ba 	bl	80a3248 <HAL_USART_Available_Data_For_Write>
 80a40d4:	2800      	cmp	r0, #0
 80a40d6:	dd05      	ble.n	80a40e4 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a40d8:	4631      	mov	r1, r6
 80a40da:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a40dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a40e0:	f7ff b882 	b.w	80a31e8 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a40e4:	4628      	mov	r0, r5
 80a40e6:	bd70      	pop	{r4, r5, r6, pc}

080a40e8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a40e8:	b510      	push	{r4, lr}
 80a40ea:	4604      	mov	r4, r0
 80a40ec:	4608      	mov	r0, r1
 80a40ee:	4611      	mov	r1, r2
 80a40f0:	2200      	movs	r2, #0
 80a40f2:	6062      	str	r2, [r4, #4]
 80a40f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a40f8:	60a2      	str	r2, [r4, #8]
 80a40fa:	4a05      	ldr	r2, [pc, #20]	; (80a4110 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a40fc:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a40fe:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a4100:	2201      	movs	r2, #1
 80a4102:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a4104:	461a      	mov	r2, r3
 80a4106:	f7ff f867 	bl	80a31d8 <HAL_USART_Init>
}
 80a410a:	4620      	mov	r0, r4
 80a410c:	bd10      	pop	{r4, pc}
 80a410e:	bf00      	nop
 80a4110:	080a58c0 	.word	0x080a58c0

080a4114 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a4114:	7c00      	ldrb	r0, [r0, #16]
 80a4116:	f7ff b88f 	b.w	80a3238 <HAL_USART_Is_Enabled>
	...

080a411c <_Z22__fetch_global_Serial1v>:
// Preinstantiate Objects //////////////////////////////////////////////////////
static Ring_Buffer serial1_rx_buffer;
static Ring_Buffer serial1_tx_buffer;

USARTSerial& __fetch_global_Serial1()
{
 80a411c:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a411e:	4d0c      	ldr	r5, [pc, #48]	; (80a4150 <_Z22__fetch_global_Serial1v+0x34>)
 80a4120:	6829      	ldr	r1, [r5, #0]
 80a4122:	f011 0401 	ands.w	r4, r1, #1
 80a4126:	d111      	bne.n	80a414c <_Z22__fetch_global_Serial1v+0x30>
 80a4128:	4628      	mov	r0, r5
 80a412a:	f7fb ffba 	bl	80a00a2 <__cxa_guard_acquire>
 80a412e:	b168      	cbz	r0, 80a414c <_Z22__fetch_global_Serial1v+0x30>
 80a4130:	4a08      	ldr	r2, [pc, #32]	; (80a4154 <_Z22__fetch_global_Serial1v+0x38>)
 80a4132:	4621      	mov	r1, r4
 80a4134:	4b08      	ldr	r3, [pc, #32]	; (80a4158 <_Z22__fetch_global_Serial1v+0x3c>)
 80a4136:	4809      	ldr	r0, [pc, #36]	; (80a415c <_Z22__fetch_global_Serial1v+0x40>)
 80a4138:	f7ff ffd6 	bl	80a40e8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a413c:	4628      	mov	r0, r5
 80a413e:	f7fb ffb5 	bl	80a00ac <__cxa_guard_release>
 80a4142:	4a07      	ldr	r2, [pc, #28]	; (80a4160 <_Z22__fetch_global_Serial1v+0x44>)
 80a4144:	4907      	ldr	r1, [pc, #28]	; (80a4164 <_Z22__fetch_global_Serial1v+0x48>)
 80a4146:	4805      	ldr	r0, [pc, #20]	; (80a415c <_Z22__fetch_global_Serial1v+0x40>)
 80a4148:	f000 f95a 	bl	80a4400 <__aeabi_atexit>
	return serial1;
}
 80a414c:	4803      	ldr	r0, [pc, #12]	; (80a415c <_Z22__fetch_global_Serial1v+0x40>)
 80a414e:	bd38      	pop	{r3, r4, r5, pc}
 80a4150:	20000810 	.word	0x20000810
 80a4154:	20000814 	.word	0x20000814
 80a4158:	2000078c 	.word	0x2000078c
 80a415c:	20000778 	.word	0x20000778
 80a4160:	20000364 	.word	0x20000364
 80a4164:	080a4095 	.word	0x080a4095

080a4168 <_ZN5spark6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void spark::detail::futureCallbackWrapper(void* data) {
 80a4168:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a416a:	6883      	ldr	r3, [r0, #8]
 80a416c:	4604      	mov	r4, r0
 80a416e:	b90b      	cbnz	r3, 80a4174 <_ZN5spark6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a4170:	f000 f94b 	bl	80a440a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4174:	68c3      	ldr	r3, [r0, #12]
 80a4176:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a4178:	68a3      	ldr	r3, [r4, #8]
 80a417a:	b11b      	cbz	r3, 80a4184 <_ZN5spark6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a417c:	2203      	movs	r2, #3
 80a417e:	4621      	mov	r1, r4
 80a4180:	4620      	mov	r0, r4
 80a4182:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a4184:	4620      	mov	r0, r4
}
 80a4186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void spark::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a418a:	f7fb bf88 	b.w	80a009e <_ZdlPv>

080a418e <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a418e:	4770      	bx	lr

080a4190 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a4190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4192:	4606      	mov	r6, r0
 80a4194:	4615      	mov	r5, r2
 80a4196:	460c      	mov	r4, r1
 80a4198:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a419a:	42bc      	cmp	r4, r7
 80a419c:	d006      	beq.n	80a41ac <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a419e:	6833      	ldr	r3, [r6, #0]
 80a41a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a41a4:	689b      	ldr	r3, [r3, #8]
 80a41a6:	4630      	mov	r0, r6
 80a41a8:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a41aa:	e7f6      	b.n	80a419a <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a41ac:	4628      	mov	r0, r5
 80a41ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a41b0 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a41b0:	2200      	movs	r2, #0
 80a41b2:	7c00      	ldrb	r0, [r0, #16]
 80a41b4:	f7ff b878 	b.w	80a32a8 <HAL_I2C_Write_Data>

080a41b8 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a41b8:	2100      	movs	r1, #0
 80a41ba:	7c00      	ldrb	r0, [r0, #16]
 80a41bc:	f7ff b87c 	b.w	80a32b8 <HAL_I2C_Available_Data>

080a41c0 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a41c0:	2100      	movs	r1, #0
 80a41c2:	7c00      	ldrb	r0, [r0, #16]
 80a41c4:	f7ff b880 	b.w	80a32c8 <HAL_I2C_Read_Data>

080a41c8 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a41c8:	2100      	movs	r1, #0
 80a41ca:	7c00      	ldrb	r0, [r0, #16]
 80a41cc:	f7ff b884 	b.w	80a32d8 <HAL_I2C_Peek_Data>

080a41d0 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a41d0:	2100      	movs	r1, #0
 80a41d2:	7c00      	ldrb	r0, [r0, #16]
 80a41d4:	f7ff b888 	b.w	80a32e8 <HAL_I2C_Flush_Data>

080a41d8 <_ZN7TwoWireD0Ev>:
 80a41d8:	b510      	push	{r4, lr}
 80a41da:	4604      	mov	r4, r0
 80a41dc:	f7fb ff5f 	bl	80a009e <_ZdlPv>
 80a41e0:	4620      	mov	r0, r4
 80a41e2:	bd10      	pop	{r4, pc}

080a41e4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a41e4:	b510      	push	{r4, lr}
 80a41e6:	4604      	mov	r4, r0
 80a41e8:	4608      	mov	r0, r1
 80a41ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a41ee:	60a3      	str	r3, [r4, #8]
 80a41f0:	4b04      	ldr	r3, [pc, #16]	; (80a4204 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a41f2:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a41f4:	7420      	strb	r0, [r4, #16]
 80a41f6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a41f8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a41fa:	f7ff f885 	bl	80a3308 <HAL_I2C_Init>

}
 80a41fe:	4620      	mov	r0, r4
 80a4200:	bd10      	pop	{r4, pc}
 80a4202:	bf00      	nop
 80a4204:	080a58f0 	.word	0x080a58f0

080a4208 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a4208:	2200      	movs	r2, #0
 80a420a:	7c00      	ldrb	r0, [r0, #16]
 80a420c:	f7ff b824 	b.w	80a3258 <HAL_I2C_Set_Speed>

080a4210 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a4210:	2300      	movs	r3, #0
 80a4212:	461a      	mov	r2, r3
 80a4214:	4619      	mov	r1, r3
 80a4216:	7c00      	ldrb	r0, [r0, #16]
 80a4218:	f7ff b826 	b.w	80a3268 <HAL_I2C_Begin>

080a421c <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a421c:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a421e:	2400      	movs	r4, #0
 80a4220:	7c00      	ldrb	r0, [r0, #16]
 80a4222:	9400      	str	r4, [sp, #0]
 80a4224:	f7ff f828 	bl	80a3278 <HAL_I2C_Request_Data>
  return result;
}
 80a4228:	b2c0      	uxtb	r0, r0
 80a422a:	b002      	add	sp, #8
 80a422c:	bd10      	pop	{r4, pc}

080a422e <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a422e:	2301      	movs	r3, #1
 80a4230:	f7ff bff4 	b.w	80a421c <_ZN7TwoWire11requestFromEhhh>

080a4234 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a4234:	2301      	movs	r3, #1
 80a4236:	b2d2      	uxtb	r2, r2
 80a4238:	b2c9      	uxtb	r1, r1
 80a423a:	f7ff bfef 	b.w	80a421c <_ZN7TwoWire11requestFromEhhh>

080a423e <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a423e:	2200      	movs	r2, #0
 80a4240:	7c00      	ldrb	r0, [r0, #16]
 80a4242:	f7ff b821 	b.w	80a3288 <HAL_I2C_Begin_Transmission>

080a4246 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a4246:	2200      	movs	r2, #0
 80a4248:	7c00      	ldrb	r0, [r0, #16]
 80a424a:	f7ff b825 	b.w	80a3298 <HAL_I2C_End_Transmission>

080a424e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a424e:	2101      	movs	r1, #1
 80a4250:	f7ff bff9 	b.w	80a4246 <_ZN7TwoWire15endTransmissionEh>

080a4254 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a4254:	2100      	movs	r1, #0
 80a4256:	7c00      	ldrb	r0, [r0, #16]
 80a4258:	f7ff b84e 	b.w	80a32f8 <HAL_I2C_Is_Enabled>

080a425c <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a425c:	4770      	bx	lr

080a425e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a425e:	2200      	movs	r2, #0
 80a4260:	4611      	mov	r1, r2
 80a4262:	4610      	mov	r0, r2
 80a4264:	f7ff b8e2 	b.w	80a342c <network_ready>

080a4268 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a4268:	4803      	ldr	r0, [pc, #12]	; (80a4278 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a426a:	4b04      	ldr	r3, [pc, #16]	; (80a427c <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a426c:	4a04      	ldr	r2, [pc, #16]	; (80a4280 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a426e:	4905      	ldr	r1, [pc, #20]	; (80a4284 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a4270:	6003      	str	r3, [r0, #0]
 80a4272:	f000 b8c5 	b.w	80a4400 <__aeabi_atexit>
 80a4276:	bf00      	nop
 80a4278:	20000898 	.word	0x20000898
 80a427c:	080a5918 	.word	0x080a5918
 80a4280:	20000364 	.word	0x20000364
 80a4284:	080a425d 	.word	0x080a425d

080a4288 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a4288:	b510      	push	{r4, lr}
 80a428a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a428c:	480f      	ldr	r0, [pc, #60]	; (80a42cc <pinAvailable+0x44>)
 80a428e:	f7ff f929 	bl	80a34e4 <_ZN8SPIClass9isEnabledEv>
 80a4292:	b128      	cbz	r0, 80a42a0 <pinAvailable+0x18>
 80a4294:	f1a4 030d 	sub.w	r3, r4, #13
 80a4298:	2b02      	cmp	r3, #2
 80a429a:	d801      	bhi.n	80a42a0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a429c:	2000      	movs	r0, #0
 80a429e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a42a0:	f000 f88e 	bl	80a43c0 <_Z19__fetch_global_Wirev>
 80a42a4:	f7ff ffd6 	bl	80a4254 <_ZN7TwoWire9isEnabledEv>
 80a42a8:	b108      	cbz	r0, 80a42ae <pinAvailable+0x26>
 80a42aa:	2c01      	cmp	r4, #1
 80a42ac:	d9f6      	bls.n	80a429c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a42ae:	f7ff ff35 	bl	80a411c <_Z22__fetch_global_Serial1v>
 80a42b2:	f7ff ff2f 	bl	80a4114 <_ZN11USARTSerial9isEnabledEv>
 80a42b6:	b118      	cbz	r0, 80a42c0 <pinAvailable+0x38>
 80a42b8:	f1a4 0312 	sub.w	r3, r4, #18
 80a42bc:	2b01      	cmp	r3, #1
 80a42be:	d9ed      	bls.n	80a429c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a42c0:	2c17      	cmp	r4, #23
 80a42c2:	bf8c      	ite	hi
 80a42c4:	2000      	movhi	r0, #0
 80a42c6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a42c8:	bd10      	pop	{r4, pc}
 80a42ca:	bf00      	nop
 80a42cc:	2000089c 	.word	0x2000089c

080a42d0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a42d0:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a42d2:	b538      	push	{r3, r4, r5, lr}
 80a42d4:	4604      	mov	r4, r0
 80a42d6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a42d8:	d80a      	bhi.n	80a42f0 <pinMode+0x20>
 80a42da:	29ff      	cmp	r1, #255	; 0xff
 80a42dc:	d008      	beq.n	80a42f0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a42de:	f7ff ffd3 	bl	80a4288 <pinAvailable>
 80a42e2:	b128      	cbz	r0, 80a42f0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a42e4:	4629      	mov	r1, r5
 80a42e6:	4620      	mov	r0, r4
}
 80a42e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a42ec:	f7fe bf1c 	b.w	80a3128 <HAL_Pin_Mode>
 80a42f0:	bd38      	pop	{r3, r4, r5, pc}

080a42f2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a42f2:	b538      	push	{r3, r4, r5, lr}
 80a42f4:	4604      	mov	r4, r0
 80a42f6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a42f8:	f7fe ff1e 	bl	80a3138 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a42fc:	28ff      	cmp	r0, #255	; 0xff
 80a42fe:	d010      	beq.n	80a4322 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a4300:	2806      	cmp	r0, #6
 80a4302:	d804      	bhi.n	80a430e <digitalWrite+0x1c>
 80a4304:	234d      	movs	r3, #77	; 0x4d
 80a4306:	fa23 f000 	lsr.w	r0, r3, r0
 80a430a:	07c3      	lsls	r3, r0, #31
 80a430c:	d409      	bmi.n	80a4322 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a430e:	4620      	mov	r0, r4
 80a4310:	f7ff ffba 	bl	80a4288 <pinAvailable>
 80a4314:	b128      	cbz	r0, 80a4322 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a4316:	4629      	mov	r1, r5
 80a4318:	4620      	mov	r0, r4
}
 80a431a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a431e:	f7fe bf13 	b.w	80a3148 <HAL_GPIO_Write>
 80a4322:	bd38      	pop	{r3, r4, r5, pc}

080a4324 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a4324:	b510      	push	{r4, lr}
 80a4326:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a4328:	f7fe ff06 	bl	80a3138 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a432c:	3804      	subs	r0, #4
 80a432e:	b2c0      	uxtb	r0, r0
 80a4330:	2801      	cmp	r0, #1
 80a4332:	d908      	bls.n	80a4346 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a4334:	4620      	mov	r0, r4
 80a4336:	f7ff ffa7 	bl	80a4288 <pinAvailable>
 80a433a:	b120      	cbz	r0, 80a4346 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a433c:	4620      	mov	r0, r4
}
 80a433e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a4342:	f7fe bf09 	b.w	80a3158 <HAL_GPIO_Read>
}
 80a4346:	2000      	movs	r0, #0
 80a4348:	bd10      	pop	{r4, pc}
	...

080a434c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a434c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a434e:	4c0c      	ldr	r4, [pc, #48]	; (80a4380 <_GLOBAL__sub_I_SPI+0x34>)
 80a4350:	4e0c      	ldr	r6, [pc, #48]	; (80a4384 <_GLOBAL__sub_I_SPI+0x38>)
 80a4352:	4d0d      	ldr	r5, [pc, #52]	; (80a4388 <_GLOBAL__sub_I_SPI+0x3c>)
 80a4354:	2100      	movs	r1, #0
 80a4356:	4620      	mov	r0, r4
 80a4358:	f7ff f8b0 	bl	80a34bc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a435c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a435e:	4c0b      	ldr	r4, [pc, #44]	; (80a438c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a4360:	4632      	mov	r2, r6
 80a4362:	4629      	mov	r1, r5
 80a4364:	f000 f84c 	bl	80a4400 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a4368:	2101      	movs	r1, #1
 80a436a:	4620      	mov	r0, r4
 80a436c:	f7ff f8a6 	bl	80a34bc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a4370:	4632      	mov	r2, r6
 80a4372:	4629      	mov	r1, r5
 80a4374:	4620      	mov	r0, r4
 80a4376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a437a:	f000 b841 	b.w	80a4400 <__aeabi_atexit>
 80a437e:	bf00      	nop
 80a4380:	2000089c 	.word	0x2000089c
 80a4384:	20000364 	.word	0x20000364
 80a4388:	080a34ad 	.word	0x080a34ad
 80a438c:	200008ac 	.word	0x200008ac

080a4390 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a4390:	b513      	push	{r0, r1, r4, lr}
 80a4392:	4c08      	ldr	r4, [pc, #32]	; (80a43b4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a4394:	2300      	movs	r3, #0
 80a4396:	461a      	mov	r2, r3
 80a4398:	4619      	mov	r1, r3
 80a439a:	9300      	str	r3, [sp, #0]
 80a439c:	4620      	mov	r0, r4
 80a439e:	f7ff fd8b 	bl	80a3eb8 <_ZN9IPAddressC1Ehhhh>
 80a43a2:	4620      	mov	r0, r4
 80a43a4:	4a04      	ldr	r2, [pc, #16]	; (80a43b8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a43a6:	4905      	ldr	r1, [pc, #20]	; (80a43bc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a43a8:	b002      	add	sp, #8
 80a43aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a43ae:	f000 b827 	b.w	80a4400 <__aeabi_atexit>
 80a43b2:	bf00      	nop
 80a43b4:	200008c0 	.word	0x200008c0
 80a43b8:	20000364 	.word	0x20000364
 80a43bc:	080a3e5f 	.word	0x080a3e5f

080a43c0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a43c0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a43c2:	4d0b      	ldr	r5, [pc, #44]	; (80a43f0 <_Z19__fetch_global_Wirev+0x30>)
 80a43c4:	6829      	ldr	r1, [r5, #0]
 80a43c6:	f011 0401 	ands.w	r4, r1, #1
 80a43ca:	d10f      	bne.n	80a43ec <_Z19__fetch_global_Wirev+0x2c>
 80a43cc:	4628      	mov	r0, r5
 80a43ce:	f7fb fe68 	bl	80a00a2 <__cxa_guard_acquire>
 80a43d2:	b158      	cbz	r0, 80a43ec <_Z19__fetch_global_Wirev+0x2c>
 80a43d4:	4621      	mov	r1, r4
 80a43d6:	4807      	ldr	r0, [pc, #28]	; (80a43f4 <_Z19__fetch_global_Wirev+0x34>)
 80a43d8:	f7ff ff04 	bl	80a41e4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a43dc:	4628      	mov	r0, r5
 80a43de:	f7fb fe65 	bl	80a00ac <__cxa_guard_release>
 80a43e2:	4a05      	ldr	r2, [pc, #20]	; (80a43f8 <_Z19__fetch_global_Wirev+0x38>)
 80a43e4:	4905      	ldr	r1, [pc, #20]	; (80a43fc <_Z19__fetch_global_Wirev+0x3c>)
 80a43e6:	4803      	ldr	r0, [pc, #12]	; (80a43f4 <_Z19__fetch_global_Wirev+0x34>)
 80a43e8:	f000 f80a 	bl	80a4400 <__aeabi_atexit>
	return wire;
}
 80a43ec:	4801      	ldr	r0, [pc, #4]	; (80a43f4 <_Z19__fetch_global_Wirev+0x34>)
 80a43ee:	bd38      	pop	{r3, r4, r5, pc}
 80a43f0:	200008d8 	.word	0x200008d8
 80a43f4:	200008dc 	.word	0x200008dc
 80a43f8:	20000364 	.word	0x20000364
 80a43fc:	080a418f 	.word	0x080a418f

080a4400 <__aeabi_atexit>:
 80a4400:	460b      	mov	r3, r1
 80a4402:	4601      	mov	r1, r0
 80a4404:	4618      	mov	r0, r3
 80a4406:	f001 b8e1 	b.w	80a55cc <__cxa_atexit>

080a440a <_ZSt25__throw_bad_function_callv>:
 80a440a:	b508      	push	{r3, lr}
 80a440c:	f7ff f846 	bl	80a349c <abort>

080a4410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a4410:	4b18      	ldr	r3, [pc, #96]	; (80a4474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a4412:	681a      	ldr	r2, [r3, #0]
 80a4414:	07d1      	lsls	r1, r2, #31
 80a4416:	bf5c      	itt	pl
 80a4418:	2201      	movpl	r2, #1
 80a441a:	601a      	strpl	r2, [r3, #0]
 80a441c:	4b16      	ldr	r3, [pc, #88]	; (80a4478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a441e:	681a      	ldr	r2, [r3, #0]
 80a4420:	07d2      	lsls	r2, r2, #31
 80a4422:	bf5c      	itt	pl
 80a4424:	2201      	movpl	r2, #1
 80a4426:	601a      	strpl	r2, [r3, #0]
 80a4428:	4b14      	ldr	r3, [pc, #80]	; (80a447c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a442a:	681a      	ldr	r2, [r3, #0]
 80a442c:	07d0      	lsls	r0, r2, #31
 80a442e:	bf5c      	itt	pl
 80a4430:	2201      	movpl	r2, #1
 80a4432:	601a      	strpl	r2, [r3, #0]
 80a4434:	4b12      	ldr	r3, [pc, #72]	; (80a4480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a4436:	681a      	ldr	r2, [r3, #0]
 80a4438:	07d1      	lsls	r1, r2, #31
 80a443a:	bf5c      	itt	pl
 80a443c:	2201      	movpl	r2, #1
 80a443e:	601a      	strpl	r2, [r3, #0]
 80a4440:	4b10      	ldr	r3, [pc, #64]	; (80a4484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a4442:	681a      	ldr	r2, [r3, #0]
 80a4444:	07d2      	lsls	r2, r2, #31
 80a4446:	bf5c      	itt	pl
 80a4448:	2201      	movpl	r2, #1
 80a444a:	601a      	strpl	r2, [r3, #0]
 80a444c:	4b0e      	ldr	r3, [pc, #56]	; (80a4488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a444e:	681a      	ldr	r2, [r3, #0]
 80a4450:	07d0      	lsls	r0, r2, #31
 80a4452:	bf5c      	itt	pl
 80a4454:	2201      	movpl	r2, #1
 80a4456:	601a      	strpl	r2, [r3, #0]
 80a4458:	4b0c      	ldr	r3, [pc, #48]	; (80a448c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a445a:	681a      	ldr	r2, [r3, #0]
 80a445c:	07d1      	lsls	r1, r2, #31
 80a445e:	bf5c      	itt	pl
 80a4460:	2201      	movpl	r2, #1
 80a4462:	601a      	strpl	r2, [r3, #0]
 80a4464:	4b0a      	ldr	r3, [pc, #40]	; (80a4490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a4466:	681a      	ldr	r2, [r3, #0]
 80a4468:	07d2      	lsls	r2, r2, #31
 80a446a:	bf5c      	itt	pl
 80a446c:	2201      	movpl	r2, #1
 80a446e:	601a      	strpl	r2, [r3, #0]
 80a4470:	4770      	bx	lr
 80a4472:	bf00      	nop
 80a4474:	2000090c 	.word	0x2000090c
 80a4478:	20000908 	.word	0x20000908
 80a447c:	20000904 	.word	0x20000904
 80a4480:	20000900 	.word	0x20000900
 80a4484:	200008fc 	.word	0x200008fc
 80a4488:	200008f8 	.word	0x200008f8
 80a448c:	200008f4 	.word	0x200008f4
 80a4490:	200008f0 	.word	0x200008f0

080a4494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a4494:	4b24      	ldr	r3, [pc, #144]	; (80a4528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a4496:	681a      	ldr	r2, [r3, #0]
 80a4498:	07d0      	lsls	r0, r2, #31
 80a449a:	bf5c      	itt	pl
 80a449c:	2201      	movpl	r2, #1
 80a449e:	601a      	strpl	r2, [r3, #0]
 80a44a0:	4b22      	ldr	r3, [pc, #136]	; (80a452c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a44a2:	681a      	ldr	r2, [r3, #0]
 80a44a4:	07d1      	lsls	r1, r2, #31
 80a44a6:	bf5c      	itt	pl
 80a44a8:	2201      	movpl	r2, #1
 80a44aa:	601a      	strpl	r2, [r3, #0]
 80a44ac:	4b20      	ldr	r3, [pc, #128]	; (80a4530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a44ae:	681a      	ldr	r2, [r3, #0]
 80a44b0:	07d2      	lsls	r2, r2, #31
 80a44b2:	bf5c      	itt	pl
 80a44b4:	2201      	movpl	r2, #1
 80a44b6:	601a      	strpl	r2, [r3, #0]
 80a44b8:	4b1e      	ldr	r3, [pc, #120]	; (80a4534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a44ba:	681a      	ldr	r2, [r3, #0]
 80a44bc:	07d0      	lsls	r0, r2, #31
 80a44be:	bf5c      	itt	pl
 80a44c0:	2201      	movpl	r2, #1
 80a44c2:	601a      	strpl	r2, [r3, #0]
 80a44c4:	4b1c      	ldr	r3, [pc, #112]	; (80a4538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a44c6:	681a      	ldr	r2, [r3, #0]
 80a44c8:	07d1      	lsls	r1, r2, #31
 80a44ca:	bf5c      	itt	pl
 80a44cc:	2201      	movpl	r2, #1
 80a44ce:	601a      	strpl	r2, [r3, #0]
 80a44d0:	4b1a      	ldr	r3, [pc, #104]	; (80a453c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a44d2:	681a      	ldr	r2, [r3, #0]
 80a44d4:	07d2      	lsls	r2, r2, #31
 80a44d6:	bf5c      	itt	pl
 80a44d8:	2201      	movpl	r2, #1
 80a44da:	601a      	strpl	r2, [r3, #0]
 80a44dc:	4b18      	ldr	r3, [pc, #96]	; (80a4540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a44de:	681a      	ldr	r2, [r3, #0]
 80a44e0:	07d0      	lsls	r0, r2, #31
 80a44e2:	bf5c      	itt	pl
 80a44e4:	2201      	movpl	r2, #1
 80a44e6:	601a      	strpl	r2, [r3, #0]
 80a44e8:	4b16      	ldr	r3, [pc, #88]	; (80a4544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a44ea:	681a      	ldr	r2, [r3, #0]
 80a44ec:	07d1      	lsls	r1, r2, #31
 80a44ee:	bf5c      	itt	pl
 80a44f0:	2201      	movpl	r2, #1
 80a44f2:	601a      	strpl	r2, [r3, #0]
 80a44f4:	4b14      	ldr	r3, [pc, #80]	; (80a4548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a44f6:	681a      	ldr	r2, [r3, #0]
 80a44f8:	07d2      	lsls	r2, r2, #31
 80a44fa:	bf5c      	itt	pl
 80a44fc:	2201      	movpl	r2, #1
 80a44fe:	601a      	strpl	r2, [r3, #0]
 80a4500:	4b12      	ldr	r3, [pc, #72]	; (80a454c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a4502:	681a      	ldr	r2, [r3, #0]
 80a4504:	07d0      	lsls	r0, r2, #31
 80a4506:	bf5c      	itt	pl
 80a4508:	2201      	movpl	r2, #1
 80a450a:	601a      	strpl	r2, [r3, #0]
 80a450c:	4b10      	ldr	r3, [pc, #64]	; (80a4550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a450e:	681a      	ldr	r2, [r3, #0]
 80a4510:	07d1      	lsls	r1, r2, #31
 80a4512:	bf5c      	itt	pl
 80a4514:	2201      	movpl	r2, #1
 80a4516:	601a      	strpl	r2, [r3, #0]
 80a4518:	4b0e      	ldr	r3, [pc, #56]	; (80a4554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a451a:	681a      	ldr	r2, [r3, #0]
 80a451c:	07d2      	lsls	r2, r2, #31
 80a451e:	bf5c      	itt	pl
 80a4520:	2201      	movpl	r2, #1
 80a4522:	601a      	strpl	r2, [r3, #0]
 80a4524:	4770      	bx	lr
 80a4526:	bf00      	nop
 80a4528:	2000093c 	.word	0x2000093c
 80a452c:	20000938 	.word	0x20000938
 80a4530:	20000934 	.word	0x20000934
 80a4534:	20000930 	.word	0x20000930
 80a4538:	2000092c 	.word	0x2000092c
 80a453c:	20000928 	.word	0x20000928
 80a4540:	20000924 	.word	0x20000924
 80a4544:	20000920 	.word	0x20000920
 80a4548:	2000091c 	.word	0x2000091c
 80a454c:	20000918 	.word	0x20000918
 80a4550:	20000914 	.word	0x20000914
 80a4554:	20000910 	.word	0x20000910

080a4558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a4558:	4b24      	ldr	r3, [pc, #144]	; (80a45ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a455a:	681a      	ldr	r2, [r3, #0]
 80a455c:	07d0      	lsls	r0, r2, #31
 80a455e:	bf5c      	itt	pl
 80a4560:	2201      	movpl	r2, #1
 80a4562:	601a      	strpl	r2, [r3, #0]
 80a4564:	4b22      	ldr	r3, [pc, #136]	; (80a45f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a4566:	681a      	ldr	r2, [r3, #0]
 80a4568:	07d1      	lsls	r1, r2, #31
 80a456a:	bf5c      	itt	pl
 80a456c:	2201      	movpl	r2, #1
 80a456e:	601a      	strpl	r2, [r3, #0]
 80a4570:	4b20      	ldr	r3, [pc, #128]	; (80a45f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a4572:	681a      	ldr	r2, [r3, #0]
 80a4574:	07d2      	lsls	r2, r2, #31
 80a4576:	bf5c      	itt	pl
 80a4578:	2201      	movpl	r2, #1
 80a457a:	601a      	strpl	r2, [r3, #0]
 80a457c:	4b1e      	ldr	r3, [pc, #120]	; (80a45f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a457e:	681a      	ldr	r2, [r3, #0]
 80a4580:	07d0      	lsls	r0, r2, #31
 80a4582:	bf5c      	itt	pl
 80a4584:	2201      	movpl	r2, #1
 80a4586:	601a      	strpl	r2, [r3, #0]
 80a4588:	4b1c      	ldr	r3, [pc, #112]	; (80a45fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a458a:	681a      	ldr	r2, [r3, #0]
 80a458c:	07d1      	lsls	r1, r2, #31
 80a458e:	bf5c      	itt	pl
 80a4590:	2201      	movpl	r2, #1
 80a4592:	601a      	strpl	r2, [r3, #0]
 80a4594:	4b1a      	ldr	r3, [pc, #104]	; (80a4600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a4596:	681a      	ldr	r2, [r3, #0]
 80a4598:	07d2      	lsls	r2, r2, #31
 80a459a:	bf5c      	itt	pl
 80a459c:	2201      	movpl	r2, #1
 80a459e:	601a      	strpl	r2, [r3, #0]
 80a45a0:	4b18      	ldr	r3, [pc, #96]	; (80a4604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a45a2:	681a      	ldr	r2, [r3, #0]
 80a45a4:	07d0      	lsls	r0, r2, #31
 80a45a6:	bf5c      	itt	pl
 80a45a8:	2201      	movpl	r2, #1
 80a45aa:	601a      	strpl	r2, [r3, #0]
 80a45ac:	4b16      	ldr	r3, [pc, #88]	; (80a4608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a45ae:	681a      	ldr	r2, [r3, #0]
 80a45b0:	07d1      	lsls	r1, r2, #31
 80a45b2:	bf5c      	itt	pl
 80a45b4:	2201      	movpl	r2, #1
 80a45b6:	601a      	strpl	r2, [r3, #0]
 80a45b8:	4b14      	ldr	r3, [pc, #80]	; (80a460c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a45ba:	681a      	ldr	r2, [r3, #0]
 80a45bc:	07d2      	lsls	r2, r2, #31
 80a45be:	bf5c      	itt	pl
 80a45c0:	2201      	movpl	r2, #1
 80a45c2:	601a      	strpl	r2, [r3, #0]
 80a45c4:	4b12      	ldr	r3, [pc, #72]	; (80a4610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a45c6:	681a      	ldr	r2, [r3, #0]
 80a45c8:	07d0      	lsls	r0, r2, #31
 80a45ca:	bf5c      	itt	pl
 80a45cc:	2201      	movpl	r2, #1
 80a45ce:	601a      	strpl	r2, [r3, #0]
 80a45d0:	4b10      	ldr	r3, [pc, #64]	; (80a4614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a45d2:	681a      	ldr	r2, [r3, #0]
 80a45d4:	07d1      	lsls	r1, r2, #31
 80a45d6:	bf5c      	itt	pl
 80a45d8:	2201      	movpl	r2, #1
 80a45da:	601a      	strpl	r2, [r3, #0]
 80a45dc:	4b0e      	ldr	r3, [pc, #56]	; (80a4618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a45de:	681a      	ldr	r2, [r3, #0]
 80a45e0:	07d2      	lsls	r2, r2, #31
 80a45e2:	bf5c      	itt	pl
 80a45e4:	2201      	movpl	r2, #1
 80a45e6:	601a      	strpl	r2, [r3, #0]
 80a45e8:	4770      	bx	lr
 80a45ea:	bf00      	nop
 80a45ec:	2000096c 	.word	0x2000096c
 80a45f0:	20000968 	.word	0x20000968
 80a45f4:	20000964 	.word	0x20000964
 80a45f8:	20000960 	.word	0x20000960
 80a45fc:	2000095c 	.word	0x2000095c
 80a4600:	20000958 	.word	0x20000958
 80a4604:	20000954 	.word	0x20000954
 80a4608:	20000950 	.word	0x20000950
 80a460c:	2000094c 	.word	0x2000094c
 80a4610:	20000948 	.word	0x20000948
 80a4614:	20000944 	.word	0x20000944
 80a4618:	20000940 	.word	0x20000940

080a461c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a461c:	4b18      	ldr	r3, [pc, #96]	; (80a4680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a461e:	681a      	ldr	r2, [r3, #0]
 80a4620:	07d1      	lsls	r1, r2, #31
 80a4622:	bf5c      	itt	pl
 80a4624:	2201      	movpl	r2, #1
 80a4626:	601a      	strpl	r2, [r3, #0]
 80a4628:	4b16      	ldr	r3, [pc, #88]	; (80a4684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a462a:	681a      	ldr	r2, [r3, #0]
 80a462c:	07d2      	lsls	r2, r2, #31
 80a462e:	bf5c      	itt	pl
 80a4630:	2201      	movpl	r2, #1
 80a4632:	601a      	strpl	r2, [r3, #0]
 80a4634:	4b14      	ldr	r3, [pc, #80]	; (80a4688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a4636:	681a      	ldr	r2, [r3, #0]
 80a4638:	07d0      	lsls	r0, r2, #31
 80a463a:	bf5c      	itt	pl
 80a463c:	2201      	movpl	r2, #1
 80a463e:	601a      	strpl	r2, [r3, #0]
 80a4640:	4b12      	ldr	r3, [pc, #72]	; (80a468c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a4642:	681a      	ldr	r2, [r3, #0]
 80a4644:	07d1      	lsls	r1, r2, #31
 80a4646:	bf5c      	itt	pl
 80a4648:	2201      	movpl	r2, #1
 80a464a:	601a      	strpl	r2, [r3, #0]
 80a464c:	4b10      	ldr	r3, [pc, #64]	; (80a4690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a464e:	681a      	ldr	r2, [r3, #0]
 80a4650:	07d2      	lsls	r2, r2, #31
 80a4652:	bf5c      	itt	pl
 80a4654:	2201      	movpl	r2, #1
 80a4656:	601a      	strpl	r2, [r3, #0]
 80a4658:	4b0e      	ldr	r3, [pc, #56]	; (80a4694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a465a:	681a      	ldr	r2, [r3, #0]
 80a465c:	07d0      	lsls	r0, r2, #31
 80a465e:	bf5c      	itt	pl
 80a4660:	2201      	movpl	r2, #1
 80a4662:	601a      	strpl	r2, [r3, #0]
 80a4664:	4b0c      	ldr	r3, [pc, #48]	; (80a4698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a4666:	681a      	ldr	r2, [r3, #0]
 80a4668:	07d1      	lsls	r1, r2, #31
 80a466a:	bf5c      	itt	pl
 80a466c:	2201      	movpl	r2, #1
 80a466e:	601a      	strpl	r2, [r3, #0]
 80a4670:	4b0a      	ldr	r3, [pc, #40]	; (80a469c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a4672:	681a      	ldr	r2, [r3, #0]
 80a4674:	07d2      	lsls	r2, r2, #31
 80a4676:	bf5c      	itt	pl
 80a4678:	2201      	movpl	r2, #1
 80a467a:	601a      	strpl	r2, [r3, #0]
 80a467c:	4770      	bx	lr
 80a467e:	bf00      	nop
 80a4680:	2000098c 	.word	0x2000098c
 80a4684:	20000988 	.word	0x20000988
 80a4688:	20000984 	.word	0x20000984
 80a468c:	20000980 	.word	0x20000980
 80a4690:	2000097c 	.word	0x2000097c
 80a4694:	20000978 	.word	0x20000978
 80a4698:	20000974 	.word	0x20000974
 80a469c:	20000970 	.word	0x20000970

080a46a0 <__aeabi_drsub>:
 80a46a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a46a4:	e002      	b.n	80a46ac <__adddf3>
 80a46a6:	bf00      	nop

080a46a8 <__aeabi_dsub>:
 80a46a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a46ac <__adddf3>:
 80a46ac:	b530      	push	{r4, r5, lr}
 80a46ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a46b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a46b6:	ea94 0f05 	teq	r4, r5
 80a46ba:	bf08      	it	eq
 80a46bc:	ea90 0f02 	teqeq	r0, r2
 80a46c0:	bf1f      	itttt	ne
 80a46c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a46c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a46ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a46ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a46d2:	f000 80e2 	beq.w	80a489a <__adddf3+0x1ee>
 80a46d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a46da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a46de:	bfb8      	it	lt
 80a46e0:	426d      	neglt	r5, r5
 80a46e2:	dd0c      	ble.n	80a46fe <__adddf3+0x52>
 80a46e4:	442c      	add	r4, r5
 80a46e6:	ea80 0202 	eor.w	r2, r0, r2
 80a46ea:	ea81 0303 	eor.w	r3, r1, r3
 80a46ee:	ea82 0000 	eor.w	r0, r2, r0
 80a46f2:	ea83 0101 	eor.w	r1, r3, r1
 80a46f6:	ea80 0202 	eor.w	r2, r0, r2
 80a46fa:	ea81 0303 	eor.w	r3, r1, r3
 80a46fe:	2d36      	cmp	r5, #54	; 0x36
 80a4700:	bf88      	it	hi
 80a4702:	bd30      	pophi	{r4, r5, pc}
 80a4704:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4708:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a470c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a4710:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a4714:	d002      	beq.n	80a471c <__adddf3+0x70>
 80a4716:	4240      	negs	r0, r0
 80a4718:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a471c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a4720:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4724:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a4728:	d002      	beq.n	80a4730 <__adddf3+0x84>
 80a472a:	4252      	negs	r2, r2
 80a472c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4730:	ea94 0f05 	teq	r4, r5
 80a4734:	f000 80a7 	beq.w	80a4886 <__adddf3+0x1da>
 80a4738:	f1a4 0401 	sub.w	r4, r4, #1
 80a473c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a4740:	db0d      	blt.n	80a475e <__adddf3+0xb2>
 80a4742:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a4746:	fa22 f205 	lsr.w	r2, r2, r5
 80a474a:	1880      	adds	r0, r0, r2
 80a474c:	f141 0100 	adc.w	r1, r1, #0
 80a4750:	fa03 f20e 	lsl.w	r2, r3, lr
 80a4754:	1880      	adds	r0, r0, r2
 80a4756:	fa43 f305 	asr.w	r3, r3, r5
 80a475a:	4159      	adcs	r1, r3
 80a475c:	e00e      	b.n	80a477c <__adddf3+0xd0>
 80a475e:	f1a5 0520 	sub.w	r5, r5, #32
 80a4762:	f10e 0e20 	add.w	lr, lr, #32
 80a4766:	2a01      	cmp	r2, #1
 80a4768:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a476c:	bf28      	it	cs
 80a476e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a4772:	fa43 f305 	asr.w	r3, r3, r5
 80a4776:	18c0      	adds	r0, r0, r3
 80a4778:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a477c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4780:	d507      	bpl.n	80a4792 <__adddf3+0xe6>
 80a4782:	f04f 0e00 	mov.w	lr, #0
 80a4786:	f1dc 0c00 	rsbs	ip, ip, #0
 80a478a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a478e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a4792:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a4796:	d31b      	bcc.n	80a47d0 <__adddf3+0x124>
 80a4798:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a479c:	d30c      	bcc.n	80a47b8 <__adddf3+0x10c>
 80a479e:	0849      	lsrs	r1, r1, #1
 80a47a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80a47a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a47a8:	f104 0401 	add.w	r4, r4, #1
 80a47ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a47b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a47b4:	f080 809a 	bcs.w	80a48ec <__adddf3+0x240>
 80a47b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a47bc:	bf08      	it	eq
 80a47be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a47c2:	f150 0000 	adcs.w	r0, r0, #0
 80a47c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a47ca:	ea41 0105 	orr.w	r1, r1, r5
 80a47ce:	bd30      	pop	{r4, r5, pc}
 80a47d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a47d4:	4140      	adcs	r0, r0
 80a47d6:	eb41 0101 	adc.w	r1, r1, r1
 80a47da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a47de:	f1a4 0401 	sub.w	r4, r4, #1
 80a47e2:	d1e9      	bne.n	80a47b8 <__adddf3+0x10c>
 80a47e4:	f091 0f00 	teq	r1, #0
 80a47e8:	bf04      	itt	eq
 80a47ea:	4601      	moveq	r1, r0
 80a47ec:	2000      	moveq	r0, #0
 80a47ee:	fab1 f381 	clz	r3, r1
 80a47f2:	bf08      	it	eq
 80a47f4:	3320      	addeq	r3, #32
 80a47f6:	f1a3 030b 	sub.w	r3, r3, #11
 80a47fa:	f1b3 0220 	subs.w	r2, r3, #32
 80a47fe:	da0c      	bge.n	80a481a <__adddf3+0x16e>
 80a4800:	320c      	adds	r2, #12
 80a4802:	dd08      	ble.n	80a4816 <__adddf3+0x16a>
 80a4804:	f102 0c14 	add.w	ip, r2, #20
 80a4808:	f1c2 020c 	rsb	r2, r2, #12
 80a480c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a4810:	fa21 f102 	lsr.w	r1, r1, r2
 80a4814:	e00c      	b.n	80a4830 <__adddf3+0x184>
 80a4816:	f102 0214 	add.w	r2, r2, #20
 80a481a:	bfd8      	it	le
 80a481c:	f1c2 0c20 	rsble	ip, r2, #32
 80a4820:	fa01 f102 	lsl.w	r1, r1, r2
 80a4824:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a4828:	bfdc      	itt	le
 80a482a:	ea41 010c 	orrle.w	r1, r1, ip
 80a482e:	4090      	lslle	r0, r2
 80a4830:	1ae4      	subs	r4, r4, r3
 80a4832:	bfa2      	ittt	ge
 80a4834:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a4838:	4329      	orrge	r1, r5
 80a483a:	bd30      	popge	{r4, r5, pc}
 80a483c:	ea6f 0404 	mvn.w	r4, r4
 80a4840:	3c1f      	subs	r4, #31
 80a4842:	da1c      	bge.n	80a487e <__adddf3+0x1d2>
 80a4844:	340c      	adds	r4, #12
 80a4846:	dc0e      	bgt.n	80a4866 <__adddf3+0x1ba>
 80a4848:	f104 0414 	add.w	r4, r4, #20
 80a484c:	f1c4 0220 	rsb	r2, r4, #32
 80a4850:	fa20 f004 	lsr.w	r0, r0, r4
 80a4854:	fa01 f302 	lsl.w	r3, r1, r2
 80a4858:	ea40 0003 	orr.w	r0, r0, r3
 80a485c:	fa21 f304 	lsr.w	r3, r1, r4
 80a4860:	ea45 0103 	orr.w	r1, r5, r3
 80a4864:	bd30      	pop	{r4, r5, pc}
 80a4866:	f1c4 040c 	rsb	r4, r4, #12
 80a486a:	f1c4 0220 	rsb	r2, r4, #32
 80a486e:	fa20 f002 	lsr.w	r0, r0, r2
 80a4872:	fa01 f304 	lsl.w	r3, r1, r4
 80a4876:	ea40 0003 	orr.w	r0, r0, r3
 80a487a:	4629      	mov	r1, r5
 80a487c:	bd30      	pop	{r4, r5, pc}
 80a487e:	fa21 f004 	lsr.w	r0, r1, r4
 80a4882:	4629      	mov	r1, r5
 80a4884:	bd30      	pop	{r4, r5, pc}
 80a4886:	f094 0f00 	teq	r4, #0
 80a488a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a488e:	bf06      	itte	eq
 80a4890:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a4894:	3401      	addeq	r4, #1
 80a4896:	3d01      	subne	r5, #1
 80a4898:	e74e      	b.n	80a4738 <__adddf3+0x8c>
 80a489a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a489e:	bf18      	it	ne
 80a48a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a48a4:	d029      	beq.n	80a48fa <__adddf3+0x24e>
 80a48a6:	ea94 0f05 	teq	r4, r5
 80a48aa:	bf08      	it	eq
 80a48ac:	ea90 0f02 	teqeq	r0, r2
 80a48b0:	d005      	beq.n	80a48be <__adddf3+0x212>
 80a48b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80a48b6:	bf04      	itt	eq
 80a48b8:	4619      	moveq	r1, r3
 80a48ba:	4610      	moveq	r0, r2
 80a48bc:	bd30      	pop	{r4, r5, pc}
 80a48be:	ea91 0f03 	teq	r1, r3
 80a48c2:	bf1e      	ittt	ne
 80a48c4:	2100      	movne	r1, #0
 80a48c6:	2000      	movne	r0, #0
 80a48c8:	bd30      	popne	{r4, r5, pc}
 80a48ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a48ce:	d105      	bne.n	80a48dc <__adddf3+0x230>
 80a48d0:	0040      	lsls	r0, r0, #1
 80a48d2:	4149      	adcs	r1, r1
 80a48d4:	bf28      	it	cs
 80a48d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a48da:	bd30      	pop	{r4, r5, pc}
 80a48dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a48e0:	bf3c      	itt	cc
 80a48e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a48e6:	bd30      	popcc	{r4, r5, pc}
 80a48e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a48ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a48f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a48f4:	f04f 0000 	mov.w	r0, #0
 80a48f8:	bd30      	pop	{r4, r5, pc}
 80a48fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a48fe:	bf1a      	itte	ne
 80a4900:	4619      	movne	r1, r3
 80a4902:	4610      	movne	r0, r2
 80a4904:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a4908:	bf1c      	itt	ne
 80a490a:	460b      	movne	r3, r1
 80a490c:	4602      	movne	r2, r0
 80a490e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4912:	bf06      	itte	eq
 80a4914:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a4918:	ea91 0f03 	teqeq	r1, r3
 80a491c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a4920:	bd30      	pop	{r4, r5, pc}
 80a4922:	bf00      	nop

080a4924 <__aeabi_ui2d>:
 80a4924:	f090 0f00 	teq	r0, #0
 80a4928:	bf04      	itt	eq
 80a492a:	2100      	moveq	r1, #0
 80a492c:	4770      	bxeq	lr
 80a492e:	b530      	push	{r4, r5, lr}
 80a4930:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4934:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4938:	f04f 0500 	mov.w	r5, #0
 80a493c:	f04f 0100 	mov.w	r1, #0
 80a4940:	e750      	b.n	80a47e4 <__adddf3+0x138>
 80a4942:	bf00      	nop

080a4944 <__aeabi_i2d>:
 80a4944:	f090 0f00 	teq	r0, #0
 80a4948:	bf04      	itt	eq
 80a494a:	2100      	moveq	r1, #0
 80a494c:	4770      	bxeq	lr
 80a494e:	b530      	push	{r4, r5, lr}
 80a4950:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4954:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4958:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a495c:	bf48      	it	mi
 80a495e:	4240      	negmi	r0, r0
 80a4960:	f04f 0100 	mov.w	r1, #0
 80a4964:	e73e      	b.n	80a47e4 <__adddf3+0x138>
 80a4966:	bf00      	nop

080a4968 <__aeabi_f2d>:
 80a4968:	0042      	lsls	r2, r0, #1
 80a496a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a496e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4972:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a4976:	bf1f      	itttt	ne
 80a4978:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a497c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4980:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a4984:	4770      	bxne	lr
 80a4986:	f092 0f00 	teq	r2, #0
 80a498a:	bf14      	ite	ne
 80a498c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4990:	4770      	bxeq	lr
 80a4992:	b530      	push	{r4, r5, lr}
 80a4994:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a4998:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a499c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a49a0:	e720      	b.n	80a47e4 <__adddf3+0x138>
 80a49a2:	bf00      	nop

080a49a4 <__aeabi_ul2d>:
 80a49a4:	ea50 0201 	orrs.w	r2, r0, r1
 80a49a8:	bf08      	it	eq
 80a49aa:	4770      	bxeq	lr
 80a49ac:	b530      	push	{r4, r5, lr}
 80a49ae:	f04f 0500 	mov.w	r5, #0
 80a49b2:	e00a      	b.n	80a49ca <__aeabi_l2d+0x16>

080a49b4 <__aeabi_l2d>:
 80a49b4:	ea50 0201 	orrs.w	r2, r0, r1
 80a49b8:	bf08      	it	eq
 80a49ba:	4770      	bxeq	lr
 80a49bc:	b530      	push	{r4, r5, lr}
 80a49be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a49c2:	d502      	bpl.n	80a49ca <__aeabi_l2d+0x16>
 80a49c4:	4240      	negs	r0, r0
 80a49c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a49ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a49ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a49d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a49d6:	f43f aedc 	beq.w	80a4792 <__adddf3+0xe6>
 80a49da:	f04f 0203 	mov.w	r2, #3
 80a49de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a49e2:	bf18      	it	ne
 80a49e4:	3203      	addne	r2, #3
 80a49e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a49ea:	bf18      	it	ne
 80a49ec:	3203      	addne	r2, #3
 80a49ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a49f2:	f1c2 0320 	rsb	r3, r2, #32
 80a49f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80a49fa:	fa20 f002 	lsr.w	r0, r0, r2
 80a49fe:	fa01 fe03 	lsl.w	lr, r1, r3
 80a4a02:	ea40 000e 	orr.w	r0, r0, lr
 80a4a06:	fa21 f102 	lsr.w	r1, r1, r2
 80a4a0a:	4414      	add	r4, r2
 80a4a0c:	e6c1      	b.n	80a4792 <__adddf3+0xe6>
 80a4a0e:	bf00      	nop

080a4a10 <__aeabi_dmul>:
 80a4a10:	b570      	push	{r4, r5, r6, lr}
 80a4a12:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4a16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4a1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4a1e:	bf1d      	ittte	ne
 80a4a20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4a24:	ea94 0f0c 	teqne	r4, ip
 80a4a28:	ea95 0f0c 	teqne	r5, ip
 80a4a2c:	f000 f8de 	bleq	80a4bec <__aeabi_dmul+0x1dc>
 80a4a30:	442c      	add	r4, r5
 80a4a32:	ea81 0603 	eor.w	r6, r1, r3
 80a4a36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a4a3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a4a3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a4a42:	bf18      	it	ne
 80a4a44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a4a48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a4a50:	d038      	beq.n	80a4ac4 <__aeabi_dmul+0xb4>
 80a4a52:	fba0 ce02 	umull	ip, lr, r0, r2
 80a4a56:	f04f 0500 	mov.w	r5, #0
 80a4a5a:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a4a5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a4a62:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a4a66:	f04f 0600 	mov.w	r6, #0
 80a4a6a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a4a6e:	f09c 0f00 	teq	ip, #0
 80a4a72:	bf18      	it	ne
 80a4a74:	f04e 0e01 	orrne.w	lr, lr, #1
 80a4a78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a4a7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a4a80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a4a84:	d204      	bcs.n	80a4a90 <__aeabi_dmul+0x80>
 80a4a86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a4a8a:	416d      	adcs	r5, r5
 80a4a8c:	eb46 0606 	adc.w	r6, r6, r6
 80a4a90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a4a94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a4a98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a4a9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a4aa0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a4aa4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4aa8:	bf88      	it	hi
 80a4aaa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4aae:	d81e      	bhi.n	80a4aee <__aeabi_dmul+0xde>
 80a4ab0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a4ab4:	bf08      	it	eq
 80a4ab6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a4aba:	f150 0000 	adcs.w	r0, r0, #0
 80a4abe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4ac2:	bd70      	pop	{r4, r5, r6, pc}
 80a4ac4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a4ac8:	ea46 0101 	orr.w	r1, r6, r1
 80a4acc:	ea40 0002 	orr.w	r0, r0, r2
 80a4ad0:	ea81 0103 	eor.w	r1, r1, r3
 80a4ad4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a4ad8:	bfc2      	ittt	gt
 80a4ada:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4ade:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4ae2:	bd70      	popgt	{r4, r5, r6, pc}
 80a4ae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4ae8:	f04f 0e00 	mov.w	lr, #0
 80a4aec:	3c01      	subs	r4, #1
 80a4aee:	f300 80ab 	bgt.w	80a4c48 <__aeabi_dmul+0x238>
 80a4af2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a4af6:	bfde      	ittt	le
 80a4af8:	2000      	movle	r0, #0
 80a4afa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a4afe:	bd70      	pople	{r4, r5, r6, pc}
 80a4b00:	f1c4 0400 	rsb	r4, r4, #0
 80a4b04:	3c20      	subs	r4, #32
 80a4b06:	da35      	bge.n	80a4b74 <__aeabi_dmul+0x164>
 80a4b08:	340c      	adds	r4, #12
 80a4b0a:	dc1b      	bgt.n	80a4b44 <__aeabi_dmul+0x134>
 80a4b0c:	f104 0414 	add.w	r4, r4, #20
 80a4b10:	f1c4 0520 	rsb	r5, r4, #32
 80a4b14:	fa00 f305 	lsl.w	r3, r0, r5
 80a4b18:	fa20 f004 	lsr.w	r0, r0, r4
 80a4b1c:	fa01 f205 	lsl.w	r2, r1, r5
 80a4b20:	ea40 0002 	orr.w	r0, r0, r2
 80a4b24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a4b28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4b2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4b30:	fa21 f604 	lsr.w	r6, r1, r4
 80a4b34:	eb42 0106 	adc.w	r1, r2, r6
 80a4b38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4b3c:	bf08      	it	eq
 80a4b3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4b42:	bd70      	pop	{r4, r5, r6, pc}
 80a4b44:	f1c4 040c 	rsb	r4, r4, #12
 80a4b48:	f1c4 0520 	rsb	r5, r4, #32
 80a4b4c:	fa00 f304 	lsl.w	r3, r0, r4
 80a4b50:	fa20 f005 	lsr.w	r0, r0, r5
 80a4b54:	fa01 f204 	lsl.w	r2, r1, r4
 80a4b58:	ea40 0002 	orr.w	r0, r0, r2
 80a4b5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4b60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4b64:	f141 0100 	adc.w	r1, r1, #0
 80a4b68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4b6c:	bf08      	it	eq
 80a4b6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4b72:	bd70      	pop	{r4, r5, r6, pc}
 80a4b74:	f1c4 0520 	rsb	r5, r4, #32
 80a4b78:	fa00 f205 	lsl.w	r2, r0, r5
 80a4b7c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a4b80:	fa20 f304 	lsr.w	r3, r0, r4
 80a4b84:	fa01 f205 	lsl.w	r2, r1, r5
 80a4b88:	ea43 0302 	orr.w	r3, r3, r2
 80a4b8c:	fa21 f004 	lsr.w	r0, r1, r4
 80a4b90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4b94:	fa21 f204 	lsr.w	r2, r1, r4
 80a4b98:	ea20 0002 	bic.w	r0, r0, r2
 80a4b9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a4ba0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4ba4:	bf08      	it	eq
 80a4ba6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4baa:	bd70      	pop	{r4, r5, r6, pc}
 80a4bac:	f094 0f00 	teq	r4, #0
 80a4bb0:	d10f      	bne.n	80a4bd2 <__aeabi_dmul+0x1c2>
 80a4bb2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a4bb6:	0040      	lsls	r0, r0, #1
 80a4bb8:	eb41 0101 	adc.w	r1, r1, r1
 80a4bbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4bc0:	bf08      	it	eq
 80a4bc2:	3c01      	subeq	r4, #1
 80a4bc4:	d0f7      	beq.n	80a4bb6 <__aeabi_dmul+0x1a6>
 80a4bc6:	ea41 0106 	orr.w	r1, r1, r6
 80a4bca:	f095 0f00 	teq	r5, #0
 80a4bce:	bf18      	it	ne
 80a4bd0:	4770      	bxne	lr
 80a4bd2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a4bd6:	0052      	lsls	r2, r2, #1
 80a4bd8:	eb43 0303 	adc.w	r3, r3, r3
 80a4bdc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a4be0:	bf08      	it	eq
 80a4be2:	3d01      	subeq	r5, #1
 80a4be4:	d0f7      	beq.n	80a4bd6 <__aeabi_dmul+0x1c6>
 80a4be6:	ea43 0306 	orr.w	r3, r3, r6
 80a4bea:	4770      	bx	lr
 80a4bec:	ea94 0f0c 	teq	r4, ip
 80a4bf0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4bf4:	bf18      	it	ne
 80a4bf6:	ea95 0f0c 	teqne	r5, ip
 80a4bfa:	d00c      	beq.n	80a4c16 <__aeabi_dmul+0x206>
 80a4bfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4c00:	bf18      	it	ne
 80a4c02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4c06:	d1d1      	bne.n	80a4bac <__aeabi_dmul+0x19c>
 80a4c08:	ea81 0103 	eor.w	r1, r1, r3
 80a4c0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4c10:	f04f 0000 	mov.w	r0, #0
 80a4c14:	bd70      	pop	{r4, r5, r6, pc}
 80a4c16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4c1a:	bf06      	itte	eq
 80a4c1c:	4610      	moveq	r0, r2
 80a4c1e:	4619      	moveq	r1, r3
 80a4c20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4c24:	d019      	beq.n	80a4c5a <__aeabi_dmul+0x24a>
 80a4c26:	ea94 0f0c 	teq	r4, ip
 80a4c2a:	d102      	bne.n	80a4c32 <__aeabi_dmul+0x222>
 80a4c2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a4c30:	d113      	bne.n	80a4c5a <__aeabi_dmul+0x24a>
 80a4c32:	ea95 0f0c 	teq	r5, ip
 80a4c36:	d105      	bne.n	80a4c44 <__aeabi_dmul+0x234>
 80a4c38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a4c3c:	bf1c      	itt	ne
 80a4c3e:	4610      	movne	r0, r2
 80a4c40:	4619      	movne	r1, r3
 80a4c42:	d10a      	bne.n	80a4c5a <__aeabi_dmul+0x24a>
 80a4c44:	ea81 0103 	eor.w	r1, r1, r3
 80a4c48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4c4c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4c50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4c54:	f04f 0000 	mov.w	r0, #0
 80a4c58:	bd70      	pop	{r4, r5, r6, pc}
 80a4c5a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4c5e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a4c62:	bd70      	pop	{r4, r5, r6, pc}

080a4c64 <__aeabi_ddiv>:
 80a4c64:	b570      	push	{r4, r5, r6, lr}
 80a4c66:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4c6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4c6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4c72:	bf1d      	ittte	ne
 80a4c74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4c78:	ea94 0f0c 	teqne	r4, ip
 80a4c7c:	ea95 0f0c 	teqne	r5, ip
 80a4c80:	f000 f8a7 	bleq	80a4dd2 <__aeabi_ddiv+0x16e>
 80a4c84:	eba4 0405 	sub.w	r4, r4, r5
 80a4c88:	ea81 0e03 	eor.w	lr, r1, r3
 80a4c8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4c90:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4c94:	f000 8088 	beq.w	80a4da8 <__aeabi_ddiv+0x144>
 80a4c98:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4c9c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4ca0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a4ca4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a4ca8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4cac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a4cb0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a4cb4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a4cb8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a4cbc:	429d      	cmp	r5, r3
 80a4cbe:	bf08      	it	eq
 80a4cc0:	4296      	cmpeq	r6, r2
 80a4cc2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a4cc6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a4cca:	d202      	bcs.n	80a4cd2 <__aeabi_ddiv+0x6e>
 80a4ccc:	085b      	lsrs	r3, r3, #1
 80a4cce:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4cd2:	1ab6      	subs	r6, r6, r2
 80a4cd4:	eb65 0503 	sbc.w	r5, r5, r3
 80a4cd8:	085b      	lsrs	r3, r3, #1
 80a4cda:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4cde:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a4ce2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a4ce6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4cea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4cee:	bf22      	ittt	cs
 80a4cf0:	1ab6      	subcs	r6, r6, r2
 80a4cf2:	4675      	movcs	r5, lr
 80a4cf4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4cf8:	085b      	lsrs	r3, r3, #1
 80a4cfa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4cfe:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4d02:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4d06:	bf22      	ittt	cs
 80a4d08:	1ab6      	subcs	r6, r6, r2
 80a4d0a:	4675      	movcs	r5, lr
 80a4d0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4d10:	085b      	lsrs	r3, r3, #1
 80a4d12:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4d16:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4d1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4d1e:	bf22      	ittt	cs
 80a4d20:	1ab6      	subcs	r6, r6, r2
 80a4d22:	4675      	movcs	r5, lr
 80a4d24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4d28:	085b      	lsrs	r3, r3, #1
 80a4d2a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4d2e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4d32:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4d36:	bf22      	ittt	cs
 80a4d38:	1ab6      	subcs	r6, r6, r2
 80a4d3a:	4675      	movcs	r5, lr
 80a4d3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4d40:	ea55 0e06 	orrs.w	lr, r5, r6
 80a4d44:	d018      	beq.n	80a4d78 <__aeabi_ddiv+0x114>
 80a4d46:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a4d4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a4d4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a4d52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a4d56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a4d5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a4d5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a4d62:	d1c0      	bne.n	80a4ce6 <__aeabi_ddiv+0x82>
 80a4d64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4d68:	d10b      	bne.n	80a4d82 <__aeabi_ddiv+0x11e>
 80a4d6a:	ea41 0100 	orr.w	r1, r1, r0
 80a4d6e:	f04f 0000 	mov.w	r0, #0
 80a4d72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a4d76:	e7b6      	b.n	80a4ce6 <__aeabi_ddiv+0x82>
 80a4d78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4d7c:	bf04      	itt	eq
 80a4d7e:	4301      	orreq	r1, r0
 80a4d80:	2000      	moveq	r0, #0
 80a4d82:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4d86:	bf88      	it	hi
 80a4d88:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4d8c:	f63f aeaf 	bhi.w	80a4aee <__aeabi_dmul+0xde>
 80a4d90:	ebb5 0c03 	subs.w	ip, r5, r3
 80a4d94:	bf04      	itt	eq
 80a4d96:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a4d9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4d9e:	f150 0000 	adcs.w	r0, r0, #0
 80a4da2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4da6:	bd70      	pop	{r4, r5, r6, pc}
 80a4da8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a4dac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a4db0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a4db4:	bfc2      	ittt	gt
 80a4db6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4dba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4dbe:	bd70      	popgt	{r4, r5, r6, pc}
 80a4dc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4dc4:	f04f 0e00 	mov.w	lr, #0
 80a4dc8:	3c01      	subs	r4, #1
 80a4dca:	e690      	b.n	80a4aee <__aeabi_dmul+0xde>
 80a4dcc:	ea45 0e06 	orr.w	lr, r5, r6
 80a4dd0:	e68d      	b.n	80a4aee <__aeabi_dmul+0xde>
 80a4dd2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4dd6:	ea94 0f0c 	teq	r4, ip
 80a4dda:	bf08      	it	eq
 80a4ddc:	ea95 0f0c 	teqeq	r5, ip
 80a4de0:	f43f af3b 	beq.w	80a4c5a <__aeabi_dmul+0x24a>
 80a4de4:	ea94 0f0c 	teq	r4, ip
 80a4de8:	d10a      	bne.n	80a4e00 <__aeabi_ddiv+0x19c>
 80a4dea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4dee:	f47f af34 	bne.w	80a4c5a <__aeabi_dmul+0x24a>
 80a4df2:	ea95 0f0c 	teq	r5, ip
 80a4df6:	f47f af25 	bne.w	80a4c44 <__aeabi_dmul+0x234>
 80a4dfa:	4610      	mov	r0, r2
 80a4dfc:	4619      	mov	r1, r3
 80a4dfe:	e72c      	b.n	80a4c5a <__aeabi_dmul+0x24a>
 80a4e00:	ea95 0f0c 	teq	r5, ip
 80a4e04:	d106      	bne.n	80a4e14 <__aeabi_ddiv+0x1b0>
 80a4e06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4e0a:	f43f aefd 	beq.w	80a4c08 <__aeabi_dmul+0x1f8>
 80a4e0e:	4610      	mov	r0, r2
 80a4e10:	4619      	mov	r1, r3
 80a4e12:	e722      	b.n	80a4c5a <__aeabi_dmul+0x24a>
 80a4e14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4e18:	bf18      	it	ne
 80a4e1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4e1e:	f47f aec5 	bne.w	80a4bac <__aeabi_dmul+0x19c>
 80a4e22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a4e26:	f47f af0d 	bne.w	80a4c44 <__aeabi_dmul+0x234>
 80a4e2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a4e2e:	f47f aeeb 	bne.w	80a4c08 <__aeabi_dmul+0x1f8>
 80a4e32:	e712      	b.n	80a4c5a <__aeabi_dmul+0x24a>

080a4e34 <__gedf2>:
 80a4e34:	f04f 3cff 	mov.w	ip, #4294967295
 80a4e38:	e006      	b.n	80a4e48 <__cmpdf2+0x4>
 80a4e3a:	bf00      	nop

080a4e3c <__ledf2>:
 80a4e3c:	f04f 0c01 	mov.w	ip, #1
 80a4e40:	e002      	b.n	80a4e48 <__cmpdf2+0x4>
 80a4e42:	bf00      	nop

080a4e44 <__cmpdf2>:
 80a4e44:	f04f 0c01 	mov.w	ip, #1
 80a4e48:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4e4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4e50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4e54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4e58:	bf18      	it	ne
 80a4e5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a4e5e:	d01b      	beq.n	80a4e98 <__cmpdf2+0x54>
 80a4e60:	b001      	add	sp, #4
 80a4e62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a4e66:	bf0c      	ite	eq
 80a4e68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a4e6c:	ea91 0f03 	teqne	r1, r3
 80a4e70:	bf02      	ittt	eq
 80a4e72:	ea90 0f02 	teqeq	r0, r2
 80a4e76:	2000      	moveq	r0, #0
 80a4e78:	4770      	bxeq	lr
 80a4e7a:	f110 0f00 	cmn.w	r0, #0
 80a4e7e:	ea91 0f03 	teq	r1, r3
 80a4e82:	bf58      	it	pl
 80a4e84:	4299      	cmppl	r1, r3
 80a4e86:	bf08      	it	eq
 80a4e88:	4290      	cmpeq	r0, r2
 80a4e8a:	bf2c      	ite	cs
 80a4e8c:	17d8      	asrcs	r0, r3, #31
 80a4e8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a4e92:	f040 0001 	orr.w	r0, r0, #1
 80a4e96:	4770      	bx	lr
 80a4e98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4e9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4ea0:	d102      	bne.n	80a4ea8 <__cmpdf2+0x64>
 80a4ea2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4ea6:	d107      	bne.n	80a4eb8 <__cmpdf2+0x74>
 80a4ea8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4eac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4eb0:	d1d6      	bne.n	80a4e60 <__cmpdf2+0x1c>
 80a4eb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a4eb6:	d0d3      	beq.n	80a4e60 <__cmpdf2+0x1c>
 80a4eb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4ebc:	4770      	bx	lr
 80a4ebe:	bf00      	nop

080a4ec0 <__aeabi_cdrcmple>:
 80a4ec0:	4684      	mov	ip, r0
 80a4ec2:	4610      	mov	r0, r2
 80a4ec4:	4662      	mov	r2, ip
 80a4ec6:	468c      	mov	ip, r1
 80a4ec8:	4619      	mov	r1, r3
 80a4eca:	4663      	mov	r3, ip
 80a4ecc:	e000      	b.n	80a4ed0 <__aeabi_cdcmpeq>
 80a4ece:	bf00      	nop

080a4ed0 <__aeabi_cdcmpeq>:
 80a4ed0:	b501      	push	{r0, lr}
 80a4ed2:	f7ff ffb7 	bl	80a4e44 <__cmpdf2>
 80a4ed6:	2800      	cmp	r0, #0
 80a4ed8:	bf48      	it	mi
 80a4eda:	f110 0f00 	cmnmi.w	r0, #0
 80a4ede:	bd01      	pop	{r0, pc}

080a4ee0 <__aeabi_dcmpeq>:
 80a4ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4ee4:	f7ff fff4 	bl	80a4ed0 <__aeabi_cdcmpeq>
 80a4ee8:	bf0c      	ite	eq
 80a4eea:	2001      	moveq	r0, #1
 80a4eec:	2000      	movne	r0, #0
 80a4eee:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4ef2:	bf00      	nop

080a4ef4 <__aeabi_dcmplt>:
 80a4ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4ef8:	f7ff ffea 	bl	80a4ed0 <__aeabi_cdcmpeq>
 80a4efc:	bf34      	ite	cc
 80a4efe:	2001      	movcc	r0, #1
 80a4f00:	2000      	movcs	r0, #0
 80a4f02:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4f06:	bf00      	nop

080a4f08 <__aeabi_dcmple>:
 80a4f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4f0c:	f7ff ffe0 	bl	80a4ed0 <__aeabi_cdcmpeq>
 80a4f10:	bf94      	ite	ls
 80a4f12:	2001      	movls	r0, #1
 80a4f14:	2000      	movhi	r0, #0
 80a4f16:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4f1a:	bf00      	nop

080a4f1c <__aeabi_dcmpge>:
 80a4f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4f20:	f7ff ffce 	bl	80a4ec0 <__aeabi_cdrcmple>
 80a4f24:	bf94      	ite	ls
 80a4f26:	2001      	movls	r0, #1
 80a4f28:	2000      	movhi	r0, #0
 80a4f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4f2e:	bf00      	nop

080a4f30 <__aeabi_dcmpgt>:
 80a4f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4f34:	f7ff ffc4 	bl	80a4ec0 <__aeabi_cdrcmple>
 80a4f38:	bf34      	ite	cc
 80a4f3a:	2001      	movcc	r0, #1
 80a4f3c:	2000      	movcs	r0, #0
 80a4f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4f42:	bf00      	nop

080a4f44 <__aeabi_d2f>:
 80a4f44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4f48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a4f4c:	bf24      	itt	cs
 80a4f4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a4f52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a4f56:	d90d      	bls.n	80a4f74 <__aeabi_d2f+0x30>
 80a4f58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4f5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a4f60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a4f64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a4f68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a4f6c:	bf08      	it	eq
 80a4f6e:	f020 0001 	biceq.w	r0, r0, #1
 80a4f72:	4770      	bx	lr
 80a4f74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a4f78:	d121      	bne.n	80a4fbe <__aeabi_d2f+0x7a>
 80a4f7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a4f7e:	bfbc      	itt	lt
 80a4f80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a4f84:	4770      	bxlt	lr
 80a4f86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4f8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a4f8e:	f1c2 0218 	rsb	r2, r2, #24
 80a4f92:	f1c2 0c20 	rsb	ip, r2, #32
 80a4f96:	fa10 f30c 	lsls.w	r3, r0, ip
 80a4f9a:	fa20 f002 	lsr.w	r0, r0, r2
 80a4f9e:	bf18      	it	ne
 80a4fa0:	f040 0001 	orrne.w	r0, r0, #1
 80a4fa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4fa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a4fac:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a4fb0:	ea40 000c 	orr.w	r0, r0, ip
 80a4fb4:	fa23 f302 	lsr.w	r3, r3, r2
 80a4fb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a4fbc:	e7cc      	b.n	80a4f58 <__aeabi_d2f+0x14>
 80a4fbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a4fc2:	d107      	bne.n	80a4fd4 <__aeabi_d2f+0x90>
 80a4fc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a4fc8:	bf1e      	ittt	ne
 80a4fca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a4fce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a4fd2:	4770      	bxne	lr
 80a4fd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a4fd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4fdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4fe0:	4770      	bx	lr
 80a4fe2:	bf00      	nop

080a4fe4 <__aeabi_frsub>:
 80a4fe4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a4fe8:	e002      	b.n	80a4ff0 <__addsf3>
 80a4fea:	bf00      	nop

080a4fec <__aeabi_fsub>:
 80a4fec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a4ff0 <__addsf3>:
 80a4ff0:	0042      	lsls	r2, r0, #1
 80a4ff2:	bf1f      	itttt	ne
 80a4ff4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a4ff8:	ea92 0f03 	teqne	r2, r3
 80a4ffc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a5000:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5004:	d06a      	beq.n	80a50dc <__addsf3+0xec>
 80a5006:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a500a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a500e:	bfc1      	itttt	gt
 80a5010:	18d2      	addgt	r2, r2, r3
 80a5012:	4041      	eorgt	r1, r0
 80a5014:	4048      	eorgt	r0, r1
 80a5016:	4041      	eorgt	r1, r0
 80a5018:	bfb8      	it	lt
 80a501a:	425b      	neglt	r3, r3
 80a501c:	2b19      	cmp	r3, #25
 80a501e:	bf88      	it	hi
 80a5020:	4770      	bxhi	lr
 80a5022:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a5026:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a502a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a502e:	bf18      	it	ne
 80a5030:	4240      	negne	r0, r0
 80a5032:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5036:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a503a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a503e:	bf18      	it	ne
 80a5040:	4249      	negne	r1, r1
 80a5042:	ea92 0f03 	teq	r2, r3
 80a5046:	d03f      	beq.n	80a50c8 <__addsf3+0xd8>
 80a5048:	f1a2 0201 	sub.w	r2, r2, #1
 80a504c:	fa41 fc03 	asr.w	ip, r1, r3
 80a5050:	eb10 000c 	adds.w	r0, r0, ip
 80a5054:	f1c3 0320 	rsb	r3, r3, #32
 80a5058:	fa01 f103 	lsl.w	r1, r1, r3
 80a505c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5060:	d502      	bpl.n	80a5068 <__addsf3+0x78>
 80a5062:	4249      	negs	r1, r1
 80a5064:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a5068:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a506c:	d313      	bcc.n	80a5096 <__addsf3+0xa6>
 80a506e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a5072:	d306      	bcc.n	80a5082 <__addsf3+0x92>
 80a5074:	0840      	lsrs	r0, r0, #1
 80a5076:	ea4f 0131 	mov.w	r1, r1, rrx
 80a507a:	f102 0201 	add.w	r2, r2, #1
 80a507e:	2afe      	cmp	r2, #254	; 0xfe
 80a5080:	d251      	bcs.n	80a5126 <__addsf3+0x136>
 80a5082:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a5086:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a508a:	bf08      	it	eq
 80a508c:	f020 0001 	biceq.w	r0, r0, #1
 80a5090:	ea40 0003 	orr.w	r0, r0, r3
 80a5094:	4770      	bx	lr
 80a5096:	0049      	lsls	r1, r1, #1
 80a5098:	eb40 0000 	adc.w	r0, r0, r0
 80a509c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a50a0:	f1a2 0201 	sub.w	r2, r2, #1
 80a50a4:	d1ed      	bne.n	80a5082 <__addsf3+0x92>
 80a50a6:	fab0 fc80 	clz	ip, r0
 80a50aa:	f1ac 0c08 	sub.w	ip, ip, #8
 80a50ae:	ebb2 020c 	subs.w	r2, r2, ip
 80a50b2:	fa00 f00c 	lsl.w	r0, r0, ip
 80a50b6:	bfaa      	itet	ge
 80a50b8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a50bc:	4252      	neglt	r2, r2
 80a50be:	4318      	orrge	r0, r3
 80a50c0:	bfbc      	itt	lt
 80a50c2:	40d0      	lsrlt	r0, r2
 80a50c4:	4318      	orrlt	r0, r3
 80a50c6:	4770      	bx	lr
 80a50c8:	f092 0f00 	teq	r2, #0
 80a50cc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a50d0:	bf06      	itte	eq
 80a50d2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a50d6:	3201      	addeq	r2, #1
 80a50d8:	3b01      	subne	r3, #1
 80a50da:	e7b5      	b.n	80a5048 <__addsf3+0x58>
 80a50dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a50e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a50e4:	bf18      	it	ne
 80a50e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a50ea:	d021      	beq.n	80a5130 <__addsf3+0x140>
 80a50ec:	ea92 0f03 	teq	r2, r3
 80a50f0:	d004      	beq.n	80a50fc <__addsf3+0x10c>
 80a50f2:	f092 0f00 	teq	r2, #0
 80a50f6:	bf08      	it	eq
 80a50f8:	4608      	moveq	r0, r1
 80a50fa:	4770      	bx	lr
 80a50fc:	ea90 0f01 	teq	r0, r1
 80a5100:	bf1c      	itt	ne
 80a5102:	2000      	movne	r0, #0
 80a5104:	4770      	bxne	lr
 80a5106:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a510a:	d104      	bne.n	80a5116 <__addsf3+0x126>
 80a510c:	0040      	lsls	r0, r0, #1
 80a510e:	bf28      	it	cs
 80a5110:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a5114:	4770      	bx	lr
 80a5116:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a511a:	bf3c      	itt	cc
 80a511c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a5120:	4770      	bxcc	lr
 80a5122:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5126:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a512a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a512e:	4770      	bx	lr
 80a5130:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a5134:	bf16      	itet	ne
 80a5136:	4608      	movne	r0, r1
 80a5138:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a513c:	4601      	movne	r1, r0
 80a513e:	0242      	lsls	r2, r0, #9
 80a5140:	bf06      	itte	eq
 80a5142:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a5146:	ea90 0f01 	teqeq	r0, r1
 80a514a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a514e:	4770      	bx	lr

080a5150 <__aeabi_ui2f>:
 80a5150:	f04f 0300 	mov.w	r3, #0
 80a5154:	e004      	b.n	80a5160 <__aeabi_i2f+0x8>
 80a5156:	bf00      	nop

080a5158 <__aeabi_i2f>:
 80a5158:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a515c:	bf48      	it	mi
 80a515e:	4240      	negmi	r0, r0
 80a5160:	ea5f 0c00 	movs.w	ip, r0
 80a5164:	bf08      	it	eq
 80a5166:	4770      	bxeq	lr
 80a5168:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a516c:	4601      	mov	r1, r0
 80a516e:	f04f 0000 	mov.w	r0, #0
 80a5172:	e01c      	b.n	80a51ae <__aeabi_l2f+0x2a>

080a5174 <__aeabi_ul2f>:
 80a5174:	ea50 0201 	orrs.w	r2, r0, r1
 80a5178:	bf08      	it	eq
 80a517a:	4770      	bxeq	lr
 80a517c:	f04f 0300 	mov.w	r3, #0
 80a5180:	e00a      	b.n	80a5198 <__aeabi_l2f+0x14>
 80a5182:	bf00      	nop

080a5184 <__aeabi_l2f>:
 80a5184:	ea50 0201 	orrs.w	r2, r0, r1
 80a5188:	bf08      	it	eq
 80a518a:	4770      	bxeq	lr
 80a518c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a5190:	d502      	bpl.n	80a5198 <__aeabi_l2f+0x14>
 80a5192:	4240      	negs	r0, r0
 80a5194:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5198:	ea5f 0c01 	movs.w	ip, r1
 80a519c:	bf02      	ittt	eq
 80a519e:	4684      	moveq	ip, r0
 80a51a0:	4601      	moveq	r1, r0
 80a51a2:	2000      	moveq	r0, #0
 80a51a4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a51a8:	bf08      	it	eq
 80a51aa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a51ae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a51b2:	fabc f28c 	clz	r2, ip
 80a51b6:	3a08      	subs	r2, #8
 80a51b8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a51bc:	db10      	blt.n	80a51e0 <__aeabi_l2f+0x5c>
 80a51be:	fa01 fc02 	lsl.w	ip, r1, r2
 80a51c2:	4463      	add	r3, ip
 80a51c4:	fa00 fc02 	lsl.w	ip, r0, r2
 80a51c8:	f1c2 0220 	rsb	r2, r2, #32
 80a51cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a51d0:	fa20 f202 	lsr.w	r2, r0, r2
 80a51d4:	eb43 0002 	adc.w	r0, r3, r2
 80a51d8:	bf08      	it	eq
 80a51da:	f020 0001 	biceq.w	r0, r0, #1
 80a51de:	4770      	bx	lr
 80a51e0:	f102 0220 	add.w	r2, r2, #32
 80a51e4:	fa01 fc02 	lsl.w	ip, r1, r2
 80a51e8:	f1c2 0220 	rsb	r2, r2, #32
 80a51ec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a51f0:	fa21 f202 	lsr.w	r2, r1, r2
 80a51f4:	eb43 0002 	adc.w	r0, r3, r2
 80a51f8:	bf08      	it	eq
 80a51fa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a51fe:	4770      	bx	lr

080a5200 <__aeabi_fmul>:
 80a5200:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5204:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5208:	bf1e      	ittt	ne
 80a520a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a520e:	ea92 0f0c 	teqne	r2, ip
 80a5212:	ea93 0f0c 	teqne	r3, ip
 80a5216:	d06f      	beq.n	80a52f8 <__aeabi_fmul+0xf8>
 80a5218:	441a      	add	r2, r3
 80a521a:	ea80 0c01 	eor.w	ip, r0, r1
 80a521e:	0240      	lsls	r0, r0, #9
 80a5220:	bf18      	it	ne
 80a5222:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a5226:	d01e      	beq.n	80a5266 <__aeabi_fmul+0x66>
 80a5228:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a522c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a5230:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a5234:	fba0 3101 	umull	r3, r1, r0, r1
 80a5238:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a523c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a5240:	bf3e      	ittt	cc
 80a5242:	0049      	lslcc	r1, r1, #1
 80a5244:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a5248:	005b      	lslcc	r3, r3, #1
 80a524a:	ea40 0001 	orr.w	r0, r0, r1
 80a524e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a5252:	2afd      	cmp	r2, #253	; 0xfd
 80a5254:	d81d      	bhi.n	80a5292 <__aeabi_fmul+0x92>
 80a5256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a525a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a525e:	bf08      	it	eq
 80a5260:	f020 0001 	biceq.w	r0, r0, #1
 80a5264:	4770      	bx	lr
 80a5266:	f090 0f00 	teq	r0, #0
 80a526a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a526e:	bf08      	it	eq
 80a5270:	0249      	lsleq	r1, r1, #9
 80a5272:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5276:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a527a:	3a7f      	subs	r2, #127	; 0x7f
 80a527c:	bfc2      	ittt	gt
 80a527e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5282:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5286:	4770      	bxgt	lr
 80a5288:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a528c:	f04f 0300 	mov.w	r3, #0
 80a5290:	3a01      	subs	r2, #1
 80a5292:	dc5d      	bgt.n	80a5350 <__aeabi_fmul+0x150>
 80a5294:	f112 0f19 	cmn.w	r2, #25
 80a5298:	bfdc      	itt	le
 80a529a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a529e:	4770      	bxle	lr
 80a52a0:	f1c2 0200 	rsb	r2, r2, #0
 80a52a4:	0041      	lsls	r1, r0, #1
 80a52a6:	fa21 f102 	lsr.w	r1, r1, r2
 80a52aa:	f1c2 0220 	rsb	r2, r2, #32
 80a52ae:	fa00 fc02 	lsl.w	ip, r0, r2
 80a52b2:	ea5f 0031 	movs.w	r0, r1, rrx
 80a52b6:	f140 0000 	adc.w	r0, r0, #0
 80a52ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a52be:	bf08      	it	eq
 80a52c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a52c4:	4770      	bx	lr
 80a52c6:	f092 0f00 	teq	r2, #0
 80a52ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a52ce:	bf02      	ittt	eq
 80a52d0:	0040      	lsleq	r0, r0, #1
 80a52d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a52d6:	3a01      	subeq	r2, #1
 80a52d8:	d0f9      	beq.n	80a52ce <__aeabi_fmul+0xce>
 80a52da:	ea40 000c 	orr.w	r0, r0, ip
 80a52de:	f093 0f00 	teq	r3, #0
 80a52e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a52e6:	bf02      	ittt	eq
 80a52e8:	0049      	lsleq	r1, r1, #1
 80a52ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a52ee:	3b01      	subeq	r3, #1
 80a52f0:	d0f9      	beq.n	80a52e6 <__aeabi_fmul+0xe6>
 80a52f2:	ea41 010c 	orr.w	r1, r1, ip
 80a52f6:	e78f      	b.n	80a5218 <__aeabi_fmul+0x18>
 80a52f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a52fc:	ea92 0f0c 	teq	r2, ip
 80a5300:	bf18      	it	ne
 80a5302:	ea93 0f0c 	teqne	r3, ip
 80a5306:	d00a      	beq.n	80a531e <__aeabi_fmul+0x11e>
 80a5308:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a530c:	bf18      	it	ne
 80a530e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5312:	d1d8      	bne.n	80a52c6 <__aeabi_fmul+0xc6>
 80a5314:	ea80 0001 	eor.w	r0, r0, r1
 80a5318:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a531c:	4770      	bx	lr
 80a531e:	f090 0f00 	teq	r0, #0
 80a5322:	bf17      	itett	ne
 80a5324:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a5328:	4608      	moveq	r0, r1
 80a532a:	f091 0f00 	teqne	r1, #0
 80a532e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a5332:	d014      	beq.n	80a535e <__aeabi_fmul+0x15e>
 80a5334:	ea92 0f0c 	teq	r2, ip
 80a5338:	d101      	bne.n	80a533e <__aeabi_fmul+0x13e>
 80a533a:	0242      	lsls	r2, r0, #9
 80a533c:	d10f      	bne.n	80a535e <__aeabi_fmul+0x15e>
 80a533e:	ea93 0f0c 	teq	r3, ip
 80a5342:	d103      	bne.n	80a534c <__aeabi_fmul+0x14c>
 80a5344:	024b      	lsls	r3, r1, #9
 80a5346:	bf18      	it	ne
 80a5348:	4608      	movne	r0, r1
 80a534a:	d108      	bne.n	80a535e <__aeabi_fmul+0x15e>
 80a534c:	ea80 0001 	eor.w	r0, r0, r1
 80a5350:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5354:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5358:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a535c:	4770      	bx	lr
 80a535e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5362:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a5366:	4770      	bx	lr

080a5368 <__aeabi_fdiv>:
 80a5368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a536c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5370:	bf1e      	ittt	ne
 80a5372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a5376:	ea92 0f0c 	teqne	r2, ip
 80a537a:	ea93 0f0c 	teqne	r3, ip
 80a537e:	d069      	beq.n	80a5454 <__aeabi_fdiv+0xec>
 80a5380:	eba2 0203 	sub.w	r2, r2, r3
 80a5384:	ea80 0c01 	eor.w	ip, r0, r1
 80a5388:	0249      	lsls	r1, r1, #9
 80a538a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a538e:	d037      	beq.n	80a5400 <__aeabi_fdiv+0x98>
 80a5390:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a5394:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a5398:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a539c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a53a0:	428b      	cmp	r3, r1
 80a53a2:	bf38      	it	cc
 80a53a4:	005b      	lslcc	r3, r3, #1
 80a53a6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a53aa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a53ae:	428b      	cmp	r3, r1
 80a53b0:	bf24      	itt	cs
 80a53b2:	1a5b      	subcs	r3, r3, r1
 80a53b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a53b8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a53bc:	bf24      	itt	cs
 80a53be:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a53c2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a53c6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a53ca:	bf24      	itt	cs
 80a53cc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a53d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a53d4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a53d8:	bf24      	itt	cs
 80a53da:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a53de:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a53e2:	011b      	lsls	r3, r3, #4
 80a53e4:	bf18      	it	ne
 80a53e6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a53ea:	d1e0      	bne.n	80a53ae <__aeabi_fdiv+0x46>
 80a53ec:	2afd      	cmp	r2, #253	; 0xfd
 80a53ee:	f63f af50 	bhi.w	80a5292 <__aeabi_fmul+0x92>
 80a53f2:	428b      	cmp	r3, r1
 80a53f4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a53f8:	bf08      	it	eq
 80a53fa:	f020 0001 	biceq.w	r0, r0, #1
 80a53fe:	4770      	bx	lr
 80a5400:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5404:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5408:	327f      	adds	r2, #127	; 0x7f
 80a540a:	bfc2      	ittt	gt
 80a540c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5410:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5414:	4770      	bxgt	lr
 80a5416:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a541a:	f04f 0300 	mov.w	r3, #0
 80a541e:	3a01      	subs	r2, #1
 80a5420:	e737      	b.n	80a5292 <__aeabi_fmul+0x92>
 80a5422:	f092 0f00 	teq	r2, #0
 80a5426:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a542a:	bf02      	ittt	eq
 80a542c:	0040      	lsleq	r0, r0, #1
 80a542e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a5432:	3a01      	subeq	r2, #1
 80a5434:	d0f9      	beq.n	80a542a <__aeabi_fdiv+0xc2>
 80a5436:	ea40 000c 	orr.w	r0, r0, ip
 80a543a:	f093 0f00 	teq	r3, #0
 80a543e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5442:	bf02      	ittt	eq
 80a5444:	0049      	lsleq	r1, r1, #1
 80a5446:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a544a:	3b01      	subeq	r3, #1
 80a544c:	d0f9      	beq.n	80a5442 <__aeabi_fdiv+0xda>
 80a544e:	ea41 010c 	orr.w	r1, r1, ip
 80a5452:	e795      	b.n	80a5380 <__aeabi_fdiv+0x18>
 80a5454:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5458:	ea92 0f0c 	teq	r2, ip
 80a545c:	d108      	bne.n	80a5470 <__aeabi_fdiv+0x108>
 80a545e:	0242      	lsls	r2, r0, #9
 80a5460:	f47f af7d 	bne.w	80a535e <__aeabi_fmul+0x15e>
 80a5464:	ea93 0f0c 	teq	r3, ip
 80a5468:	f47f af70 	bne.w	80a534c <__aeabi_fmul+0x14c>
 80a546c:	4608      	mov	r0, r1
 80a546e:	e776      	b.n	80a535e <__aeabi_fmul+0x15e>
 80a5470:	ea93 0f0c 	teq	r3, ip
 80a5474:	d104      	bne.n	80a5480 <__aeabi_fdiv+0x118>
 80a5476:	024b      	lsls	r3, r1, #9
 80a5478:	f43f af4c 	beq.w	80a5314 <__aeabi_fmul+0x114>
 80a547c:	4608      	mov	r0, r1
 80a547e:	e76e      	b.n	80a535e <__aeabi_fmul+0x15e>
 80a5480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5484:	bf18      	it	ne
 80a5486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a548a:	d1ca      	bne.n	80a5422 <__aeabi_fdiv+0xba>
 80a548c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a5490:	f47f af5c 	bne.w	80a534c <__aeabi_fmul+0x14c>
 80a5494:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a5498:	f47f af3c 	bne.w	80a5314 <__aeabi_fmul+0x114>
 80a549c:	e75f      	b.n	80a535e <__aeabi_fmul+0x15e>
 80a549e:	bf00      	nop

080a54a0 <__gesf2>:
 80a54a0:	f04f 3cff 	mov.w	ip, #4294967295
 80a54a4:	e006      	b.n	80a54b4 <__cmpsf2+0x4>
 80a54a6:	bf00      	nop

080a54a8 <__lesf2>:
 80a54a8:	f04f 0c01 	mov.w	ip, #1
 80a54ac:	e002      	b.n	80a54b4 <__cmpsf2+0x4>
 80a54ae:	bf00      	nop

080a54b0 <__cmpsf2>:
 80a54b0:	f04f 0c01 	mov.w	ip, #1
 80a54b4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a54b8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a54bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a54c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a54c4:	bf18      	it	ne
 80a54c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a54ca:	d011      	beq.n	80a54f0 <__cmpsf2+0x40>
 80a54cc:	b001      	add	sp, #4
 80a54ce:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a54d2:	bf18      	it	ne
 80a54d4:	ea90 0f01 	teqne	r0, r1
 80a54d8:	bf58      	it	pl
 80a54da:	ebb2 0003 	subspl.w	r0, r2, r3
 80a54de:	bf88      	it	hi
 80a54e0:	17c8      	asrhi	r0, r1, #31
 80a54e2:	bf38      	it	cc
 80a54e4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a54e8:	bf18      	it	ne
 80a54ea:	f040 0001 	orrne.w	r0, r0, #1
 80a54ee:	4770      	bx	lr
 80a54f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a54f4:	d102      	bne.n	80a54fc <__cmpsf2+0x4c>
 80a54f6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a54fa:	d105      	bne.n	80a5508 <__cmpsf2+0x58>
 80a54fc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a5500:	d1e4      	bne.n	80a54cc <__cmpsf2+0x1c>
 80a5502:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a5506:	d0e1      	beq.n	80a54cc <__cmpsf2+0x1c>
 80a5508:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a550c:	4770      	bx	lr
 80a550e:	bf00      	nop

080a5510 <__aeabi_cfrcmple>:
 80a5510:	4684      	mov	ip, r0
 80a5512:	4608      	mov	r0, r1
 80a5514:	4661      	mov	r1, ip
 80a5516:	e7ff      	b.n	80a5518 <__aeabi_cfcmpeq>

080a5518 <__aeabi_cfcmpeq>:
 80a5518:	b50f      	push	{r0, r1, r2, r3, lr}
 80a551a:	f7ff ffc9 	bl	80a54b0 <__cmpsf2>
 80a551e:	2800      	cmp	r0, #0
 80a5520:	bf48      	it	mi
 80a5522:	f110 0f00 	cmnmi.w	r0, #0
 80a5526:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a5528 <__aeabi_fcmpeq>:
 80a5528:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a552c:	f7ff fff4 	bl	80a5518 <__aeabi_cfcmpeq>
 80a5530:	bf0c      	ite	eq
 80a5532:	2001      	moveq	r0, #1
 80a5534:	2000      	movne	r0, #0
 80a5536:	f85d fb08 	ldr.w	pc, [sp], #8
 80a553a:	bf00      	nop

080a553c <__aeabi_fcmplt>:
 80a553c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5540:	f7ff ffea 	bl	80a5518 <__aeabi_cfcmpeq>
 80a5544:	bf34      	ite	cc
 80a5546:	2001      	movcc	r0, #1
 80a5548:	2000      	movcs	r0, #0
 80a554a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a554e:	bf00      	nop

080a5550 <__aeabi_fcmple>:
 80a5550:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5554:	f7ff ffe0 	bl	80a5518 <__aeabi_cfcmpeq>
 80a5558:	bf94      	ite	ls
 80a555a:	2001      	movls	r0, #1
 80a555c:	2000      	movhi	r0, #0
 80a555e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5562:	bf00      	nop

080a5564 <__aeabi_fcmpge>:
 80a5564:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5568:	f7ff ffd2 	bl	80a5510 <__aeabi_cfrcmple>
 80a556c:	bf94      	ite	ls
 80a556e:	2001      	movls	r0, #1
 80a5570:	2000      	movhi	r0, #0
 80a5572:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5576:	bf00      	nop

080a5578 <__aeabi_fcmpgt>:
 80a5578:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a557c:	f7ff ffc8 	bl	80a5510 <__aeabi_cfrcmple>
 80a5580:	bf34      	ite	cc
 80a5582:	2001      	movcc	r0, #1
 80a5584:	2000      	movcs	r0, #0
 80a5586:	f85d fb08 	ldr.w	pc, [sp], #8
 80a558a:	bf00      	nop

080a558c <__aeabi_f2uiz>:
 80a558c:	0042      	lsls	r2, r0, #1
 80a558e:	d20e      	bcs.n	80a55ae <__aeabi_f2uiz+0x22>
 80a5590:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a5594:	d30b      	bcc.n	80a55ae <__aeabi_f2uiz+0x22>
 80a5596:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a559a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a559e:	d409      	bmi.n	80a55b4 <__aeabi_f2uiz+0x28>
 80a55a0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a55a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a55a8:	fa23 f002 	lsr.w	r0, r3, r2
 80a55ac:	4770      	bx	lr
 80a55ae:	f04f 0000 	mov.w	r0, #0
 80a55b2:	4770      	bx	lr
 80a55b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a55b8:	d101      	bne.n	80a55be <__aeabi_f2uiz+0x32>
 80a55ba:	0242      	lsls	r2, r0, #9
 80a55bc:	d102      	bne.n	80a55c4 <__aeabi_f2uiz+0x38>
 80a55be:	f04f 30ff 	mov.w	r0, #4294967295
 80a55c2:	4770      	bx	lr
 80a55c4:	f04f 0000 	mov.w	r0, #0
 80a55c8:	4770      	bx	lr
 80a55ca:	bf00      	nop

080a55cc <__cxa_atexit>:
 80a55cc:	b510      	push	{r4, lr}
 80a55ce:	4c05      	ldr	r4, [pc, #20]	; (80a55e4 <__cxa_atexit+0x18>)
 80a55d0:	4613      	mov	r3, r2
 80a55d2:	b12c      	cbz	r4, 80a55e0 <__cxa_atexit+0x14>
 80a55d4:	460a      	mov	r2, r1
 80a55d6:	4601      	mov	r1, r0
 80a55d8:	2002      	movs	r0, #2
 80a55da:	f3af 8000 	nop.w
 80a55de:	bd10      	pop	{r4, pc}
 80a55e0:	4620      	mov	r0, r4
 80a55e2:	bd10      	pop	{r4, pc}
 80a55e4:	00000000 	.word	0x00000000

080a55e8 <memcpy>:
 80a55e8:	b510      	push	{r4, lr}
 80a55ea:	1e43      	subs	r3, r0, #1
 80a55ec:	440a      	add	r2, r1
 80a55ee:	4291      	cmp	r1, r2
 80a55f0:	d004      	beq.n	80a55fc <memcpy+0x14>
 80a55f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a55f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a55fa:	e7f8      	b.n	80a55ee <memcpy+0x6>
 80a55fc:	bd10      	pop	{r4, pc}

080a55fe <memset>:
 80a55fe:	4603      	mov	r3, r0
 80a5600:	4402      	add	r2, r0
 80a5602:	4293      	cmp	r3, r2
 80a5604:	d002      	beq.n	80a560c <memset+0xe>
 80a5606:	f803 1b01 	strb.w	r1, [r3], #1
 80a560a:	e7fa      	b.n	80a5602 <memset+0x4>
 80a560c:	4770      	bx	lr

080a560e <strlen>:
 80a560e:	4603      	mov	r3, r0
 80a5610:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a5614:	2a00      	cmp	r2, #0
 80a5616:	d1fb      	bne.n	80a5610 <strlen+0x2>
 80a5618:	1a18      	subs	r0, r3, r0
 80a561a:	3801      	subs	r0, #1
 80a561c:	4770      	bx	lr

080a561e <link_code_end>:
	...

080a5620 <dynalib_user>:
 80a5620:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a5630:	0000 0000 6573 7574 5370 6375 6563 7373     ....setupSuccess
 80a5640:	253d 0064 6157 7469 6e69 2067 6f66 2072     =%d.Waiting for 
 80a5650:	7453 7261 0074 7453 7261 6974 676e 6920     Start.Starting i
 80a5660:	206e 2035 6573 6f63 646e 2e73 2e2e 4700     n 5 seconds....G
 80a5670:	214f 4600 6c75 206c 654c 7466 5300 616d     O!.Full Left.Sma
 80a5680:	6c6c 4c20 6665 0074 6543 746e 7265 5300     ll Left.Center.S
 80a5690:	616d 6c6c 5220 6769 7468 4600 6c75 206c     mall Right.Full 
 80a56a0:	6952 6867 0074 6f6e 7320 6d61 6c70 0065     Right.no sample.
 80a56b0:	5320 4e45 4f53 2052 4954 454d 554f 0054      SENSOR TIMEOUT.

080a56c0 <_ZTV9LIS3DHI2C>:
	...
 80a56c8:	2095 080a 2097 080a 20eb 080a 20a3 080a     . ... ... ... ..
 80a56d8:	6564 6976 6563 6e20 746f 6620 756f 646e     device not found
 80a56e8:	7200 7365 7465 6974 676e 6c20 7361 4d74     .resetting lastM
 80a56f8:	766f 6d65 6e65 2074 6e69 3174 735f 6372     ovement int1_src
 80a5708:	303d 2578 0078 6572 6163 696c 7262 7461     =0x%x.recalibrat
 80a5718:	6e69 0067                                   ing.

080a571c <_ZTV8SPIClass>:
	...
 80a5724:	34ad 080a 34af 080a 0066 6e6c 6600 006e     .4...4..f.ln.fn.
 80a5734:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
 80a5744:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
 80a5754:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
 80a5764:	7465 6961 736c 3d20 0020 6162 6475 5300     etails = .baud.S
 80a5774:	7265 6169 006c 5355 5342 7265 6169 316c     erial.USBSerial1
 80a5784:	7400 7079 0065 6170 6172 006d 6d63 0064     .type.param.cmd.
 80a5794:	6469 6800 646e 7300 7274 006d 6966 746c     id.hnd.strm.filt
 80a57a4:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
 80a57b4:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
 80a57c4:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
 80a57d4:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
 80a57e4:	7061 0070 6f6e 656e 7400 6172 6563 6900     app.none.trace.i
 80a57f4:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
 80a5804:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
 80a5814:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
 80a5824:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
 80a5834:	0065 0000                                   e...

080a5838 <_ZTVN5spark6detail14FutureImplBaseIvNS0_13FutureContextEEE>:
	...
 80a5840:	39a9 080a 39d9 080a                         .9...9..

080a5848 <_ZTVN5spark6detail10FutureImplIvNS0_13FutureContextEEE>:
	...
 80a5850:	39ed 080a 3a01 080a                         .9...:..

080a5858 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail10FutureImplIvNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a5860:	396d 080a 397f 080a 396f 080a 398b 080a     m9...9..o9...9..
 80a5870:	397b 080a                                   {9..

080a5874 <_ZTV9IPAddress>:
	...
 80a587c:	3e6d 080a 3e5f 080a 3e61 080a               m>.._>..a>..

080a5888 <_ZTV9USBSerial>:
	...
 80a5890:	3ed5 080a 3f19 080a 3ef3 080a 3685 080a     .>...?...>...6..
 80a58a0:	3eed 080a 3ed7 080a 3edf 080a 3f13 080a     .>...>...>...?..
 80a58b0:	3ee7 080a 3ed1 080a                         .>...>..

080a58b8 <_ZTV11USARTSerial>:
	...
 80a58c0:	4095 080a 40b9 080a 40c5 080a 3685 080a     .@...@...@...6..
 80a58d0:	40a1 080a 40ad 080a 40a7 080a 40b3 080a     .@...@...@...@..
 80a58e0:	4097 080a 409b 080a                         .@...@..

080a58e8 <_ZTV7TwoWire>:
	...
 80a58f0:	418f 080a 41d9 080a 41b1 080a 4191 080a     .A...A...A...A..
 80a5900:	41b9 080a 41c1 080a 41c9 080a 41d1 080a     .A...A...A...A..

080a5910 <_ZTVN5spark9WiFiClassE>:
	...
 80a5918:	425f 080a                                   _B..

080a591c <link_const_variable_data_end>:
 80a591c:	080a13fd 	.word	0x080a13fd
 80a5920:	080a2091 	.word	0x080a2091
 80a5924:	080a22e5 	.word	0x080a22e5
 80a5928:	080a35a9 	.word	0x080a35a9
 80a592c:	080a3811 	.word	0x080a3811
 80a5930:	080a3821 	.word	0x080a3821
 80a5934:	080a4269 	.word	0x080a4269
 80a5938:	080a434d 	.word	0x080a434d
 80a593c:	080a4391 	.word	0x080a4391
 80a5940:	080a4411 	.word	0x080a4411
 80a5944:	080a4495 	.word	0x080a4495
 80a5948:	080a4559 	.word	0x080a4559
 80a594c:	080a461d 	.word	0x080a461d
