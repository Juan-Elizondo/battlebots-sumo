
C:/src/battlebots-sumo/v3/fuzzy/target/fuzzy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003818  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a3830  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000038  20000300  080a3834  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000604  20000338  20000338  00030338  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a386c  080a386c  0002386c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a3894  080a3894  00023894  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000a0165  00000000  00000000  00023898  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00010b75  00000000  00000000  000c39fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00012b38  00000000  00000000  000d4572  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001e40  00000000  00000000  000e70aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002d18  00000000  00000000  000e8eea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00024f89  00000000  00000000  000ebc02  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00024721  00000000  00000000  00110b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00090065  00000000  00000000  001352ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b3d8  00000000  00000000  001c5314  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	10 35 0a 08                                         .5..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 fa53 	bl	80a34d8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 fa58 	bl	80a34ee <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a3834 	.word	0x080a3834
 80a004c:	20000338 	.word	0x20000338
 80a0050:	20000338 	.word	0x20000338
 80a0054:	2000093c 	.word	0x2000093c
 80a0058:	2000093c 	.word	0x2000093c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 ff49 	bl	80a1ef4 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a37f8 	.word	0x080a37f8
 80a0084:	080a382c 	.word	0x080a382c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bb3c 	b.w	80a0704 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fae7 	bl	80a0660 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 beeb 	b.w	80a1e70 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 bd39 	b.w	80a1b10 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 bd3f 	b.w	80a1b20 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z5FLISRv>:
// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
unsigned long lastPrintSample = 0;

void FLISR() {
 80a00b4:	b508      	push	{r3, lr}
    FLflag = digitalRead(FL);
 80a00b6:	4b05      	ldr	r3, [pc, #20]	; (80a00cc <_Z5FLISRv+0x18>)
 80a00b8:	8818      	ldrh	r0, [r3, #0]
 80a00ba:	f002 fc1b 	bl	80a28f4 <digitalRead>
 80a00be:	4b04      	ldr	r3, [pc, #16]	; (80a00d0 <_Z5FLISRv+0x1c>)
 80a00c0:	3000      	adds	r0, #0
 80a00c2:	bf18      	it	ne
 80a00c4:	2001      	movne	r0, #1
 80a00c6:	7018      	strb	r0, [r3, #0]
 80a00c8:	bd08      	pop	{r3, pc}
 80a00ca:	bf00      	nop
 80a00cc:	20000314 	.word	0x20000314
 80a00d0:	2000032d 	.word	0x2000032d

080a00d4 <_Z5FRISRv>:
}

void FRISR() {
 80a00d4:	b508      	push	{r3, lr}
    FRflag = digitalRead(FR);
 80a00d6:	4b05      	ldr	r3, [pc, #20]	; (80a00ec <_Z5FRISRv+0x18>)
 80a00d8:	8818      	ldrh	r0, [r3, #0]
 80a00da:	f002 fc0b 	bl	80a28f4 <digitalRead>
 80a00de:	4b04      	ldr	r3, [pc, #16]	; (80a00f0 <_Z5FRISRv+0x1c>)
 80a00e0:	3000      	adds	r0, #0
 80a00e2:	bf18      	it	ne
 80a00e4:	2001      	movne	r0, #1
 80a00e6:	7018      	strb	r0, [r3, #0]
 80a00e8:	bd08      	pop	{r3, pc}
 80a00ea:	bf00      	nop
 80a00ec:	2000031c 	.word	0x2000031c
 80a00f0:	20000318 	.word	0x20000318

080a00f4 <_Z5BLISRv>:
}

void BLISR() {
 80a00f4:	b508      	push	{r3, lr}
    BLflag = digitalRead(BL);
 80a00f6:	4b05      	ldr	r3, [pc, #20]	; (80a010c <_Z5BLISRv+0x18>)
 80a00f8:	8818      	ldrh	r0, [r3, #0]
 80a00fa:	f002 fbfb 	bl	80a28f4 <digitalRead>
 80a00fe:	4b04      	ldr	r3, [pc, #16]	; (80a0110 <_Z5BLISRv+0x1c>)
 80a0100:	3000      	adds	r0, #0
 80a0102:	bf18      	it	ne
 80a0104:	2001      	movne	r0, #1
 80a0106:	7018      	strb	r0, [r3, #0]
 80a0108:	bd08      	pop	{r3, pc}
 80a010a:	bf00      	nop
 80a010c:	20000324 	.word	0x20000324
 80a0110:	2000032c 	.word	0x2000032c

080a0114 <_Z5BRISRv>:
}

void BRISR() {
 80a0114:	b508      	push	{r3, lr}
    BRflag = digitalRead(BR);
 80a0116:	4b05      	ldr	r3, [pc, #20]	; (80a012c <_Z5BRISRv+0x18>)
 80a0118:	8818      	ldrh	r0, [r3, #0]
 80a011a:	f002 fbeb 	bl	80a28f4 <digitalRead>
 80a011e:	4b04      	ldr	r3, [pc, #16]	; (80a0130 <_Z5BRISRv+0x1c>)
 80a0120:	3000      	adds	r0, #0
 80a0122:	bf18      	it	ne
 80a0124:	2001      	movne	r0, #1
 80a0126:	7018      	strb	r0, [r3, #0]
 80a0128:	bd08      	pop	{r3, pc}
 80a012a:	bf00      	nop
 80a012c:	20000304 	.word	0x20000304
 80a0130:	20000319 	.word	0x20000319

080a0134 <_Z5RSISRv>:
}

void RSISR() {
 80a0134:	b508      	push	{r3, lr}
    RSflag = digitalRead(RS);
 80a0136:	4b05      	ldr	r3, [pc, #20]	; (80a014c <_Z5RSISRv+0x18>)
 80a0138:	8818      	ldrh	r0, [r3, #0]
 80a013a:	f002 fbdb 	bl	80a28f4 <digitalRead>
 80a013e:	4b04      	ldr	r3, [pc, #16]	; (80a0150 <_Z5RSISRv+0x1c>)
 80a0140:	3000      	adds	r0, #0
 80a0142:	bf18      	it	ne
 80a0144:	2001      	movne	r0, #1
 80a0146:	7018      	strb	r0, [r3, #0]
 80a0148:	bd08      	pop	{r3, pc}
 80a014a:	bf00      	nop
 80a014c:	20000328 	.word	0x20000328
 80a0150:	2000033d 	.word	0x2000033d

080a0154 <_ZN10CloudClass7publishEPKc11PublishFlag.isra.0>:
      return _function(funcKey, std::bind(func, instance, _1));
    }

    inline bool publish(const char *eventName, PublishFlag eventType=PUBLIC)
    {
        return publish(eventName, NULL, 60, PublishFlag::flag_t(eventType));
 80a0154:	b2cb      	uxtb	r3, r1
 80a0156:	223c      	movs	r2, #60	; 0x3c
 80a0158:	2100      	movs	r1, #0
 80a015a:	f002 b8c9 	b.w	80a22f0 <_ZN10CloudClass7publishEPKcS1_im>
	...

080a0160 <_Z8tof_initv>:
}

void tof_init() {
 80a0160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pinMode(A0, OUTPUT);
 80a0164:	2101      	movs	r1, #1
 80a0166:	200a      	movs	r0, #10
 80a0168:	f002 fb9a 	bl	80a28a0 <pinMode>
    pinMode(A1, OUTPUT);
 80a016c:	2101      	movs	r1, #1
 80a016e:	200b      	movs	r0, #11
 80a0170:	f002 fb96 	bl	80a28a0 <pinMode>
    pinMode(A2, OUTPUT);
 80a0174:	2101      	movs	r1, #1
 80a0176:	200c      	movs	r0, #12
 80a0178:	f002 fb92 	bl	80a28a0 <pinMode>
    pinMode(A3, OUTPUT);
 80a017c:	2101      	movs	r1, #1
 80a017e:	200d      	movs	r0, #13
 80a0180:	f002 fb8e 	bl	80a28a0 <pinMode>
    digitalWrite(A0, LOW);
 80a0184:	2100      	movs	r1, #0
 80a0186:	200a      	movs	r0, #10
 80a0188:	f002 fb9b 	bl	80a28c2 <digitalWrite>
    digitalWrite(A1, LOW);
 80a018c:	2100      	movs	r1, #0
 80a018e:	200b      	movs	r0, #11
 80a0190:	f002 fb97 	bl	80a28c2 <digitalWrite>
    digitalWrite(A2, LOW);
 80a0194:	2100      	movs	r1, #0
 80a0196:	200c      	movs	r0, #12
 80a0198:	f002 fb93 	bl	80a28c2 <digitalWrite>
    digitalWrite(A3, LOW);
 80a019c:	2100      	movs	r1, #0
 80a019e:	200d      	movs	r0, #13
 80a01a0:	f002 fb8f 	bl	80a28c2 <digitalWrite>
    delay(500);
 80a01a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a01a8:	f001 fe2c 	bl	80a1e04 <delay>

    Wire.setSpeed(CLOCK_SPEED_100KHZ);  // need to initialize i2c protocol after driving shdn pins low
 80a01ac:	f002 fbf0 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a01b0:	4940      	ldr	r1, [pc, #256]	; (80a02b4 <_Z8tof_initv+0x154>)
 80a01b2:	f002 fb11 	bl	80a27d8 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();
 80a01b6:	f002 fbeb 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a01ba:	f002 fb11 	bl	80a27e0 <_ZN7TwoWire5beginEv>

    delay(10);
 80a01be:	200a      	movs	r0, #10
 80a01c0:	f001 fe20 	bl	80a1e04 <delay>
    digitalWrite(A0, HIGH);
 80a01c4:	2101      	movs	r1, #1
 80a01c6:	200a      	movs	r0, #10
 80a01c8:	f002 fb7b 	bl	80a28c2 <digitalWrite>
    digitalWrite(A1, HIGH);
 80a01cc:	2101      	movs	r1, #1
 80a01ce:	200b      	movs	r0, #11
 80a01d0:	f002 fb77 	bl	80a28c2 <digitalWrite>
    digitalWrite(A2, HIGH);
 80a01d4:	2101      	movs	r1, #1
 80a01d6:	200c      	movs	r0, #12
 80a01d8:	f002 fb73 	bl	80a28c2 <digitalWrite>
    digitalWrite(A3, HIGH);
 80a01dc:	2101      	movs	r1, #1
 80a01de:	200d      	movs	r0, #13
 80a01e0:	f002 fb6f 	bl	80a28c2 <digitalWrite>
    delay(10);
 80a01e4:	200a      	movs	r0, #10
 80a01e6:	f001 fe0d 	bl	80a1e04 <delay>
    digitalWrite(A1, LOW);
 80a01ea:	2100      	movs	r1, #0
 80a01ec:	200b      	movs	r0, #11
 80a01ee:	f002 fb68 	bl	80a28c2 <digitalWrite>
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
 80a01f2:	4f31      	ldr	r7, [pc, #196]	; (80a02b8 <_Z8tof_initv+0x158>)
    digitalWrite(A1, HIGH);
    digitalWrite(A2, HIGH);
    digitalWrite(A3, HIGH);
    delay(10);
    digitalWrite(A1, LOW);
    digitalWrite(A2, LOW);
 80a01f4:	2100      	movs	r1, #0
 80a01f6:	200c      	movs	r0, #12
 80a01f8:	f002 fb63 	bl	80a28c2 <digitalWrite>
    digitalWrite(A3, LOW);
 80a01fc:	2100      	movs	r1, #0
 80a01fe:	200d      	movs	r0, #13
 80a0200:	f002 fb5f 	bl	80a28c2 <digitalWrite>
    sensor0.init();
 80a0204:	2101      	movs	r1, #1
 80a0206:	4638      	mov	r0, r7
 80a0208:	f000 fe62 	bl	80a0ed0 <_ZN7VL53L0X4initEb>
    void startContinuous(uint32_t period_ms = 0);
    void stopContinuous(void);
    uint16_t readRangeContinuousMillimeters(void);
    uint16_t readRangeSingleMillimeters(void);

    inline void setTimeout(uint16_t timeout) { io_timeout = timeout; }
 80a020c:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    sensor0.setAddress(0x30);
 80a0210:	2130      	movs	r1, #48	; 0x30
 80a0212:	4638      	mov	r0, r7
 80a0214:	f000 fb31 	bl	80a087a <_ZN7VL53L0X10setAddressEh>
    sensor0.setTimeout(1000);
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
 80a0218:	4e28      	ldr	r6, [pc, #160]	; (80a02bc <_Z8tof_initv+0x15c>)
 80a021a:	f8c7 8004 	str.w	r8, [r7, #4]
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
    sensor0.setAddress(0x30);
    sensor0.setTimeout(1000);
    delay(10);
 80a021e:	200a      	movs	r0, #10
 80a0220:	f001 fdf0 	bl	80a1e04 <delay>
    digitalWrite(A1, HIGH);
 80a0224:	2101      	movs	r1, #1
 80a0226:	200b      	movs	r0, #11
 80a0228:	f002 fb4b 	bl	80a28c2 <digitalWrite>
    sensor1.init();
 80a022c:	2101      	movs	r1, #1
 80a022e:	4630      	mov	r0, r6
 80a0230:	f000 fe4e 	bl	80a0ed0 <_ZN7VL53L0X4initEb>
    sensor1.setAddress(0x31);
 80a0234:	2131      	movs	r1, #49	; 0x31
 80a0236:	4630      	mov	r0, r6
 80a0238:	f000 fb1f 	bl	80a087a <_ZN7VL53L0X10setAddressEh>
    sensor1.setTimeout(1000);
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
 80a023c:	4d20      	ldr	r5, [pc, #128]	; (80a02c0 <_Z8tof_initv+0x160>)
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
    sensor1.setAddress(0x31);
    sensor1.setTimeout(1000);
    delay(10);
 80a023e:	200a      	movs	r0, #10
 80a0240:	f8c6 8004 	str.w	r8, [r6, #4]
 80a0244:	f001 fdde 	bl	80a1e04 <delay>
    digitalWrite(A2, HIGH);
 80a0248:	2101      	movs	r1, #1
 80a024a:	200c      	movs	r0, #12
 80a024c:	f002 fb39 	bl	80a28c2 <digitalWrite>
    sensor2.init();
 80a0250:	2101      	movs	r1, #1
 80a0252:	4628      	mov	r0, r5
 80a0254:	f000 fe3c 	bl	80a0ed0 <_ZN7VL53L0X4initEb>
    sensor2.setAddress(0x32);
 80a0258:	2132      	movs	r1, #50	; 0x32
 80a025a:	4628      	mov	r0, r5
 80a025c:	f000 fb0d 	bl	80a087a <_ZN7VL53L0X10setAddressEh>
    sensor2.setTimeout(1000);
    delay(10);
    digitalWrite(A3, HIGH);
    sensor3.init();
 80a0260:	4c18      	ldr	r4, [pc, #96]	; (80a02c4 <_Z8tof_initv+0x164>)
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
    sensor2.setAddress(0x32);
    sensor2.setTimeout(1000);
    delay(10);
 80a0262:	200a      	movs	r0, #10
 80a0264:	f8c5 8004 	str.w	r8, [r5, #4]
 80a0268:	f001 fdcc 	bl	80a1e04 <delay>
    digitalWrite(A3, HIGH);
 80a026c:	2101      	movs	r1, #1
 80a026e:	200d      	movs	r0, #13
 80a0270:	f002 fb27 	bl	80a28c2 <digitalWrite>
    sensor3.init();
 80a0274:	2101      	movs	r1, #1
 80a0276:	4620      	mov	r0, r4
 80a0278:	f000 fe2a 	bl	80a0ed0 <_ZN7VL53L0X4initEb>
    sensor3.setAddress(0x33);
 80a027c:	2133      	movs	r1, #51	; 0x33
 80a027e:	4620      	mov	r0, r4
 80a0280:	f000 fafb 	bl	80a087a <_ZN7VL53L0X10setAddressEh>
    sensor3.setTimeout(1000);
    delay(10);
 80a0284:	200a      	movs	r0, #10
 80a0286:	f8c4 8004 	str.w	r8, [r4, #4]
 80a028a:	f001 fdbb 	bl	80a1e04 <delay>

    // Start continuous back-to-back mode (take readings as
    // fast as possible).  To use continuous timed mode
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
 80a028e:	4638      	mov	r0, r7
 80a0290:	210a      	movs	r1, #10
 80a0292:	f000 fc10 	bl	80a0ab6 <_ZN7VL53L0X15startContinuousEm>
    sensor1.startContinuous(10);
 80a0296:	4630      	mov	r0, r6
 80a0298:	210a      	movs	r1, #10
 80a029a:	f000 fc0c 	bl	80a0ab6 <_ZN7VL53L0X15startContinuousEm>
    sensor2.startContinuous(10);
 80a029e:	4628      	mov	r0, r5
 80a02a0:	210a      	movs	r1, #10
 80a02a2:	f000 fc08 	bl	80a0ab6 <_ZN7VL53L0X15startContinuousEm>
    sensor3.startContinuous(10);			
 80a02a6:	4620      	mov	r0, r4
}
 80a02a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
    sensor1.startContinuous(10);
    sensor2.startContinuous(10);
    sensor3.startContinuous(10);			
 80a02ac:	210a      	movs	r1, #10
 80a02ae:	f000 bc02 	b.w	80a0ab6 <_ZN7VL53L0X15startContinuousEm>
 80a02b2:	bf00      	nop
 80a02b4:	000186a0 	.word	0x000186a0
 80a02b8:	20000358 	.word	0x20000358
 80a02bc:	20000370 	.word	0x20000370
 80a02c0:	20000388 	.word	0x20000388
 80a02c4:	200003a0 	.word	0x200003a0

080a02c8 <_Z10accel_initv>:
}

void accel_init() {
 80a02c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  LIS3DHConfig config;
 80a02ca:	a801      	add	r0, sp, #4
 80a02cc:	f001 f8d5 	bl	80a147a <_ZN12LIS3DHConfigC1Ev>
  config.setAccelMode(LIS3DH::RATE_400_HZ);
 80a02d0:	2170      	movs	r1, #112	; 0x70
 80a02d2:	a801      	add	r0, sp, #4
 80a02d4:	f001 f8de 	bl	80a1494 <_ZN12LIS3DHConfig12setAccelModeEh>

  bool setupSuccess = accel.setup(config);
 80a02d8:	a901      	add	r1, sp, #4
 80a02da:	4806      	ldr	r0, [pc, #24]	; (80a02f4 <_Z10accel_initv+0x2c>)
 80a02dc:	f001 f932 	bl	80a1544 <_ZN6LIS3DH5setupER12LIS3DHConfig>
 80a02e0:	4604      	mov	r4, r0
  Serial.printlnf("setupSuccess=%d", setupSuccess);
 80a02e2:	f002 f935 	bl	80a2550 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a02e6:	4623      	mov	r3, r4
 80a02e8:	4a03      	ldr	r2, [pc, #12]	; (80a02f8 <_Z10accel_initv+0x30>)
 80a02ea:	2101      	movs	r1, #1
 80a02ec:	f001 fd20 	bl	80a1d30 <_ZN5Print11printf_implEbPKcz>
}
 80a02f0:	b004      	add	sp, #16
 80a02f2:	bd10      	pop	{r4, pc}
 80a02f4:	20000344 	.word	0x20000344
 80a02f8:	080a3524 	.word	0x080a3524

080a02fc <_Z11others_initv>:

void others_init() {
 80a02fc:	b508      	push	{r3, lr}
	// Line sensors
  	pinMode(FL, INPUT);
 80a02fe:	4b15      	ldr	r3, [pc, #84]	; (80a0354 <_Z11others_initv+0x58>)
 80a0300:	2100      	movs	r1, #0
 80a0302:	8818      	ldrh	r0, [r3, #0]
 80a0304:	f002 facc 	bl	80a28a0 <pinMode>
  	pinMode(FR, INPUT);
 80a0308:	4b13      	ldr	r3, [pc, #76]	; (80a0358 <_Z11others_initv+0x5c>)
 80a030a:	2100      	movs	r1, #0
 80a030c:	8818      	ldrh	r0, [r3, #0]
 80a030e:	f002 fac7 	bl	80a28a0 <pinMode>
  	pinMode(BL, INPUT);
 80a0312:	4b12      	ldr	r3, [pc, #72]	; (80a035c <_Z11others_initv+0x60>)
 80a0314:	2100      	movs	r1, #0
 80a0316:	8818      	ldrh	r0, [r3, #0]
 80a0318:	f002 fac2 	bl	80a28a0 <pinMode>
  	pinMode(BR, INPUT);
 80a031c:	4b10      	ldr	r3, [pc, #64]	; (80a0360 <_Z11others_initv+0x64>)
 80a031e:	2100      	movs	r1, #0
 80a0320:	8818      	ldrh	r0, [r3, #0]
 80a0322:	f002 fabd 	bl	80a28a0 <pinMode>
  	// Remote switch
  	pinMode(RS, INPUT);
 80a0326:	4b0f      	ldr	r3, [pc, #60]	; (80a0364 <_Z11others_initv+0x68>)
 80a0328:	2100      	movs	r1, #0
 80a032a:	8818      	ldrh	r0, [r3, #0]
 80a032c:	f002 fab8 	bl	80a28a0 <pinMode>
  	// Car ESCs
  	pinMode(Lmotor, OUTPUT);
 80a0330:	4b0d      	ldr	r3, [pc, #52]	; (80a0368 <_Z11others_initv+0x6c>)
 80a0332:	2101      	movs	r1, #1
 80a0334:	8818      	ldrh	r0, [r3, #0]
 80a0336:	f002 fab3 	bl	80a28a0 <pinMode>
  	pinMode(Rmotor, OUTPUT);
 80a033a:	4b0c      	ldr	r3, [pc, #48]	; (80a036c <_Z11others_initv+0x70>)
 80a033c:	2101      	movs	r1, #1
 80a033e:	8818      	ldrh	r0, [r3, #0]
 80a0340:	f002 faae 	bl	80a28a0 <pinMode>

  	// ***Remove for competition***
  	// ***Serial monitor***
  	Serial.begin(9600);	// *** need to modify before comp ***
 80a0344:	f002 f904 	bl	80a2550 <_Z16_fetch_usbserialv>
}
 80a0348:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  	pinMode(Lmotor, OUTPUT);
  	pinMode(Rmotor, OUTPUT);

  	// ***Remove for competition***
  	// ***Serial monitor***
  	Serial.begin(9600);	// *** need to modify before comp ***
 80a034c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0350:	f002 b8e4 	b.w	80a251c <_ZN9USBSerial5beginEl>
 80a0354:	20000314 	.word	0x20000314
 80a0358:	2000031c 	.word	0x2000031c
 80a035c:	20000324 	.word	0x20000324
 80a0360:	20000304 	.word	0x20000304
 80a0364:	20000328 	.word	0x20000328
 80a0368:	2000030c 	.word	0x2000030c
 80a036c:	20000308 	.word	0x20000308

080a0370 <_Z14interrupt_initv>:
}

void interrupt_init() {
 80a0370:	b513      	push	{r0, r1, r4, lr}
	// Line sensors
	attachInterrupt(FL,FLISR,CHANGE);
 80a0372:	4b18      	ldr	r3, [pc, #96]	; (80a03d4 <_Z14interrupt_initv+0x64>)
 80a0374:	2400      	movs	r4, #0
 80a0376:	8818      	ldrh	r0, [r3, #0]
 80a0378:	4622      	mov	r2, r4
 80a037a:	9400      	str	r4, [sp, #0]
 80a037c:	f04f 33ff 	mov.w	r3, #4294967295
 80a0380:	4915      	ldr	r1, [pc, #84]	; (80a03d8 <_Z14interrupt_initv+0x68>)
 80a0382:	f002 f949 	bl	80a2618 <_Z15attachInterrupttPFvvE13InterruptModeah>
  	attachInterrupt(FR,FRISR,CHANGE);
 80a0386:	4b15      	ldr	r3, [pc, #84]	; (80a03dc <_Z14interrupt_initv+0x6c>)
 80a0388:	4622      	mov	r2, r4
 80a038a:	8818      	ldrh	r0, [r3, #0]
 80a038c:	4914      	ldr	r1, [pc, #80]	; (80a03e0 <_Z14interrupt_initv+0x70>)
 80a038e:	9400      	str	r4, [sp, #0]
 80a0390:	f04f 33ff 	mov.w	r3, #4294967295
 80a0394:	f002 f940 	bl	80a2618 <_Z15attachInterrupttPFvvE13InterruptModeah>
  	attachInterrupt(BL,BLISR,CHANGE);
 80a0398:	4b12      	ldr	r3, [pc, #72]	; (80a03e4 <_Z14interrupt_initv+0x74>)
 80a039a:	4622      	mov	r2, r4
 80a039c:	8818      	ldrh	r0, [r3, #0]
 80a039e:	4912      	ldr	r1, [pc, #72]	; (80a03e8 <_Z14interrupt_initv+0x78>)
 80a03a0:	9400      	str	r4, [sp, #0]
 80a03a2:	f04f 33ff 	mov.w	r3, #4294967295
 80a03a6:	f002 f937 	bl	80a2618 <_Z15attachInterrupttPFvvE13InterruptModeah>
  	attachInterrupt(BR,BRISR,CHANGE);
 80a03aa:	4b10      	ldr	r3, [pc, #64]	; (80a03ec <_Z14interrupt_initv+0x7c>)
 80a03ac:	4622      	mov	r2, r4
 80a03ae:	8818      	ldrh	r0, [r3, #0]
 80a03b0:	490f      	ldr	r1, [pc, #60]	; (80a03f0 <_Z14interrupt_initv+0x80>)
 80a03b2:	9400      	str	r4, [sp, #0]
 80a03b4:	f04f 33ff 	mov.w	r3, #4294967295
 80a03b8:	f002 f92e 	bl	80a2618 <_Z15attachInterrupttPFvvE13InterruptModeah>
  	// Remote switch
  	attachInterrupt(RS,RSISR,CHANGE);
 80a03bc:	4b0d      	ldr	r3, [pc, #52]	; (80a03f4 <_Z14interrupt_initv+0x84>)
 80a03be:	4622      	mov	r2, r4
 80a03c0:	8818      	ldrh	r0, [r3, #0]
 80a03c2:	490d      	ldr	r1, [pc, #52]	; (80a03f8 <_Z14interrupt_initv+0x88>)
 80a03c4:	9400      	str	r4, [sp, #0]
 80a03c6:	f04f 33ff 	mov.w	r3, #4294967295
 80a03ca:	f002 f925 	bl	80a2618 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
 80a03ce:	b002      	add	sp, #8
 80a03d0:	bd10      	pop	{r4, pc}
 80a03d2:	bf00      	nop
 80a03d4:	20000314 	.word	0x20000314
 80a03d8:	080a00b5 	.word	0x080a00b5
 80a03dc:	2000031c 	.word	0x2000031c
 80a03e0:	080a00d5 	.word	0x080a00d5
 80a03e4:	20000324 	.word	0x20000324
 80a03e8:	080a00f5 	.word	0x080a00f5
 80a03ec:	20000304 	.word	0x20000304
 80a03f0:	080a0115 	.word	0x080a0115
 80a03f4:	20000328 	.word	0x20000328
 80a03f8:	080a0135 	.word	0x080a0135

080a03fc <_Z8ESC_initv>:

void ESC_init() {
 80a03fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Necessary for Servo objects
  	LESC.attach(Lmotor);
 80a03fe:	4b13      	ldr	r3, [pc, #76]	; (80a044c <_Z8ESC_initv+0x50>)
 80a0400:	4d13      	ldr	r5, [pc, #76]	; (80a0450 <_Z8ESC_initv+0x54>)
 80a0402:	2600      	movs	r6, #0
 80a0404:	27b4      	movs	r7, #180	; 0xb4
 80a0406:	8819      	ldrh	r1, [r3, #0]
 80a0408:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a040c:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80a0410:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a0414:	4628      	mov	r0, r5
 80a0416:	f001 fbee 	bl	80a1bf6 <_ZN5Servo6attachEtttss>
  	RESC.attach(Rmotor);
 80a041a:	4c0e      	ldr	r4, [pc, #56]	; (80a0454 <_Z8ESC_initv+0x58>)
 80a041c:	4b0e      	ldr	r3, [pc, #56]	; (80a0458 <_Z8ESC_initv+0x5c>)
 80a041e:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a0422:	8819      	ldrh	r1, [r3, #0]
 80a0424:	4620      	mov	r0, r4
 80a0426:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a042a:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80a042e:	f001 fbe2 	bl	80a1bf6 <_ZN5Servo6attachEtttss>
  	// Write stop command
  	LESC.writeMicroseconds(1500);
 80a0432:	4628      	mov	r0, r5
 80a0434:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a0438:	f001 fba9 	bl	80a1b8e <_ZN5Servo17writeMicrosecondsEt>
  	RESC.writeMicroseconds(1500);
 80a043c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a0440:	4620      	mov	r0, r4
}
 80a0442:	b003      	add	sp, #12
 80a0444:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	// Necessary for Servo objects
  	LESC.attach(Lmotor);
  	RESC.attach(Rmotor);
  	// Write stop command
  	LESC.writeMicroseconds(1500);
  	RESC.writeMicroseconds(1500);
 80a0448:	f001 bba1 	b.w	80a1b8e <_ZN5Servo17writeMicrosecondsEt>
 80a044c:	2000030c 	.word	0x2000030c
 80a0450:	200003b8 	.word	0x200003b8
 80a0454:	200003c8 	.word	0x200003c8
 80a0458:	20000308 	.word	0x20000308

080a045c <_Z10fuzzy_initv>:
}

void fuzzy_init() {
 80a045c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  low = low + 1;
 80a0460:	4a75      	ldr	r2, [pc, #468]	; (80a0638 <_Z10fuzzy_initv+0x1dc>)
  // Criando o FuzzyInput distancia
  FuzzyInput* distance = new FuzzyInput(1);
 80a0462:	2010      	movs	r0, #16
  	LESC.writeMicroseconds(1500);
  	RESC.writeMicroseconds(1500);
}

void fuzzy_init() {
  low = low + 1;
 80a0464:	6813      	ldr	r3, [r2, #0]
 80a0466:	3301      	adds	r3, #1
 80a0468:	6013      	str	r3, [r2, #0]
  // Criando o FuzzyInput distancia
  FuzzyInput* distance = new FuzzyInput(1);
 80a046a:	f7ff fe16 	bl	80a009a <_Znwj>
 80a046e:	4605      	mov	r5, r0
 80a0470:	b110      	cbz	r0, 80a0478 <_Z10fuzzy_initv+0x1c>
 80a0472:	2101      	movs	r1, #1
 80a0474:	f001 f8d9 	bl	80a162a <_ZN10FuzzyInputC1Ei>
  // Criando os FuzzySet que compoem o FuzzyInput distancia 
  FuzzySet* small = new FuzzySet(0, 20, 20, 40); // Distancia pequena
 80a0478:	2014      	movs	r0, #20
 80a047a:	f7ff fe0e 	bl	80a009a <_Znwj>
 80a047e:	4682      	mov	sl, r0
 80a0480:	b130      	cbz	r0, 80a0490 <_Z10fuzzy_initv+0x34>
 80a0482:	4b6e      	ldr	r3, [pc, #440]	; (80a063c <_Z10fuzzy_initv+0x1e0>)
 80a0484:	2100      	movs	r1, #0
 80a0486:	9300      	str	r3, [sp, #0]
 80a0488:	4b6d      	ldr	r3, [pc, #436]	; (80a0640 <_Z10fuzzy_initv+0x1e4>)
 80a048a:	461a      	mov	r2, r3
 80a048c:	f001 f916 	bl	80a16bc <_ZN8FuzzySetC1Effff>
  distance->addFuzzySet(small); // Adicionando o FuzzySet small em distance
 80a0490:	4651      	mov	r1, sl
 80a0492:	4628      	mov	r0, r5
 80a0494:	f001 f8d4 	bl	80a1640 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  FuzzySet* safe = new FuzzySet(30, 50, 50, 70); // Distancia segura
 80a0498:	2014      	movs	r0, #20
 80a049a:	f7ff fdfe 	bl	80a009a <_Znwj>
 80a049e:	4680      	mov	r8, r0
 80a04a0:	b130      	cbz	r0, 80a04b0 <_Z10fuzzy_initv+0x54>
 80a04a2:	4b68      	ldr	r3, [pc, #416]	; (80a0644 <_Z10fuzzy_initv+0x1e8>)
 80a04a4:	4968      	ldr	r1, [pc, #416]	; (80a0648 <_Z10fuzzy_initv+0x1ec>)
 80a04a6:	9300      	str	r3, [sp, #0]
 80a04a8:	4b68      	ldr	r3, [pc, #416]	; (80a064c <_Z10fuzzy_initv+0x1f0>)
 80a04aa:	461a      	mov	r2, r3
 80a04ac:	f001 f906 	bl	80a16bc <_ZN8FuzzySetC1Effff>
  distance->addFuzzySet(safe); // Adicionando o FuzzySet safe em distance
 80a04b0:	4641      	mov	r1, r8
 80a04b2:	4628      	mov	r0, r5
 80a04b4:	f001 f8c4 	bl	80a1640 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  FuzzySet* big = new FuzzySet(60, 80, 80, 80); // Distancia grande
 80a04b8:	2014      	movs	r0, #20
 80a04ba:	f7ff fdee 	bl	80a009a <_Znwj>
 80a04be:	4606      	mov	r6, r0
 80a04c0:	b128      	cbz	r0, 80a04ce <_Z10fuzzy_initv+0x72>
 80a04c2:	4b63      	ldr	r3, [pc, #396]	; (80a0650 <_Z10fuzzy_initv+0x1f4>)
 80a04c4:	4963      	ldr	r1, [pc, #396]	; (80a0654 <_Z10fuzzy_initv+0x1f8>)
 80a04c6:	9300      	str	r3, [sp, #0]
 80a04c8:	461a      	mov	r2, r3
 80a04ca:	f001 f8f7 	bl	80a16bc <_ZN8FuzzySetC1Effff>
  distance->addFuzzySet(big); // Adicionando o FuzzySet big em distance
  
  fuzzy->addFuzzyInput(distance); // Adicionando o FuzzyInput no objeto Fuzzy
 80a04ce:	4c62      	ldr	r4, [pc, #392]	; (80a0658 <_Z10fuzzy_initv+0x1fc>)
  FuzzySet* small = new FuzzySet(0, 20, 20, 40); // Distancia pequena
  distance->addFuzzySet(small); // Adicionando o FuzzySet small em distance
  FuzzySet* safe = new FuzzySet(30, 50, 50, 70); // Distancia segura
  distance->addFuzzySet(safe); // Adicionando o FuzzySet safe em distance
  FuzzySet* big = new FuzzySet(60, 80, 80, 80); // Distancia grande
  distance->addFuzzySet(big); // Adicionando o FuzzySet big em distance
 80a04d0:	4631      	mov	r1, r6
 80a04d2:	4628      	mov	r0, r5
 80a04d4:	f001 f8b4 	bl	80a1640 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  
  fuzzy->addFuzzyInput(distance); // Adicionando o FuzzyInput no objeto Fuzzy
 80a04d8:	4629      	mov	r1, r5
 80a04da:	6820      	ldr	r0, [r4, #0]
 80a04dc:	f001 f918 	bl	80a1710 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>
  
  // Criando o FuzzyOutput velocidade
  FuzzyOutput* velocity = new FuzzyOutput(1);
 80a04e0:	2018      	movs	r0, #24
 80a04e2:	f7ff fdda 	bl	80a009a <_Znwj>
 80a04e6:	4605      	mov	r5, r0
 80a04e8:	b110      	cbz	r0, 80a04f0 <_Z10fuzzy_initv+0x94>
 80a04ea:	2101      	movs	r1, #1
 80a04ec:	f001 f8bb 	bl	80a1666 <_ZN11FuzzyOutputC1Ei>
  // Criando os FuzzySet que compoem o FuzzyOutput velocidade 
  FuzzySet* slow = new FuzzySet(0, 10, 10, 20); // Velocidade lenta
 80a04f0:	2014      	movs	r0, #20
 80a04f2:	f7ff fdd2 	bl	80a009a <_Znwj>
 80a04f6:	4683      	mov	fp, r0
 80a04f8:	b130      	cbz	r0, 80a0508 <_Z10fuzzy_initv+0xac>
 80a04fa:	4b51      	ldr	r3, [pc, #324]	; (80a0640 <_Z10fuzzy_initv+0x1e4>)
 80a04fc:	2100      	movs	r1, #0
 80a04fe:	9300      	str	r3, [sp, #0]
 80a0500:	4b56      	ldr	r3, [pc, #344]	; (80a065c <_Z10fuzzy_initv+0x200>)
 80a0502:	461a      	mov	r2, r3
 80a0504:	f001 f8da 	bl	80a16bc <_ZN8FuzzySetC1Effff>
  velocity->addFuzzySet(slow); // Adicionando o FuzzySet slow em velocity
 80a0508:	4659      	mov	r1, fp
 80a050a:	4628      	mov	r0, r5
 80a050c:	f001 f898 	bl	80a1640 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  FuzzySet* average = new FuzzySet(10, 20, 30, 40); // Velocidade normal
 80a0510:	2014      	movs	r0, #20
 80a0512:	f7ff fdc2 	bl	80a009a <_Znwj>
 80a0516:	4681      	mov	r9, r0
 80a0518:	b130      	cbz	r0, 80a0528 <_Z10fuzzy_initv+0xcc>
 80a051a:	4b48      	ldr	r3, [pc, #288]	; (80a063c <_Z10fuzzy_initv+0x1e0>)
 80a051c:	4a48      	ldr	r2, [pc, #288]	; (80a0640 <_Z10fuzzy_initv+0x1e4>)
 80a051e:	9300      	str	r3, [sp, #0]
 80a0520:	494e      	ldr	r1, [pc, #312]	; (80a065c <_Z10fuzzy_initv+0x200>)
 80a0522:	4b49      	ldr	r3, [pc, #292]	; (80a0648 <_Z10fuzzy_initv+0x1ec>)
 80a0524:	f001 f8ca 	bl	80a16bc <_ZN8FuzzySetC1Effff>
  velocity->addFuzzySet(average); // Adicionando o FuzzySet average em velocity
 80a0528:	4649      	mov	r1, r9
 80a052a:	4628      	mov	r0, r5
 80a052c:	f001 f888 	bl	80a1640 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  FuzzySet* fast = new FuzzySet(30, 40, 40, 50); // Velocidade alta
 80a0530:	2014      	movs	r0, #20
 80a0532:	f7ff fdb2 	bl	80a009a <_Znwj>
 80a0536:	4607      	mov	r7, r0
 80a0538:	b130      	cbz	r0, 80a0548 <_Z10fuzzy_initv+0xec>
 80a053a:	4b44      	ldr	r3, [pc, #272]	; (80a064c <_Z10fuzzy_initv+0x1f0>)
 80a053c:	4942      	ldr	r1, [pc, #264]	; (80a0648 <_Z10fuzzy_initv+0x1ec>)
 80a053e:	9300      	str	r3, [sp, #0]
 80a0540:	4b3e      	ldr	r3, [pc, #248]	; (80a063c <_Z10fuzzy_initv+0x1e0>)
 80a0542:	461a      	mov	r2, r3
 80a0544:	f001 f8ba 	bl	80a16bc <_ZN8FuzzySetC1Effff>
  velocity->addFuzzySet(fast); // Adicionando o FuzzySet fast em velocity
 80a0548:	4639      	mov	r1, r7
 80a054a:	4628      	mov	r0, r5
 80a054c:	f001 f878 	bl	80a1640 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  
  fuzzy->addFuzzyOutput(velocity); // Adicionando o FuzzyOutput no objeto Fuzzy
 80a0550:	4629      	mov	r1, r5
 80a0552:	6820      	ldr	r0, [r4, #0]
 80a0554:	f001 f8ef 	bl	80a1736 <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput>
  
  //-------------------- Montando as regras Fuzzy
  // FuzzyRule "SE distancia = pequena ENTAO velocidade = lenta"
  FuzzyRuleAntecedent* ifDistanceSmall = new FuzzyRuleAntecedent(); // Instanciando um Antecedente para a expresso
 80a0558:	2018      	movs	r0, #24
 80a055a:	f7ff fd9e 	bl	80a009a <_Znwj>
 80a055e:	4605      	mov	r5, r0
 80a0560:	b108      	cbz	r0, 80a0566 <_Z10fuzzy_initv+0x10a>
 80a0562:	f001 f913 	bl	80a178c <_ZN19FuzzyRuleAntecedentC1Ev>
  ifDistanceSmall->joinSingle(small); // Adicionando o FuzzySet correspondente ao objeto Antecedente
 80a0566:	4651      	mov	r1, sl
 80a0568:	4628      	mov	r0, r5
 80a056a:	f001 f917 	bl	80a179c <_ZN19FuzzyRuleAntecedent10joinSingleEP8FuzzySet>
  FuzzyRuleConsequent* thenVelocitySlow = new FuzzyRuleConsequent(); // Instancinado um Consequente para a expressao
 80a056e:	2008      	movs	r0, #8
 80a0570:	f7ff fd93 	bl	80a009a <_Znwj>
 80a0574:	4682      	mov	sl, r0
 80a0576:	b108      	cbz	r0, 80a057c <_Z10fuzzy_initv+0x120>
 80a0578:	f001 f8ab 	bl	80a16d2 <_ZN19FuzzyRuleConsequentC1Ev>
  thenVelocitySlow->addOutput(slow);// Adicionando o FuzzySet correspondente ao objeto Consequente
 80a057c:	4659      	mov	r1, fp
 80a057e:	4650      	mov	r0, sl
 80a0580:	f001 f8ab 	bl	80a16da <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  // Instanciando um objeto FuzzyRule
  FuzzyRule* fuzzyRule01 = new FuzzyRule(1, ifDistanceSmall, thenVelocitySlow); // Passando o Antecedente e o Consequente da expressao
 80a0584:	2010      	movs	r0, #16
 80a0586:	f7ff fd88 	bl	80a009a <_Znwj>
 80a058a:	4683      	mov	fp, r0
 80a058c:	b120      	cbz	r0, 80a0598 <_Z10fuzzy_initv+0x13c>
 80a058e:	4653      	mov	r3, sl
 80a0590:	462a      	mov	r2, r5
 80a0592:	2101      	movs	r1, #1
 80a0594:	f001 f83e 	bl	80a1614 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fuzzyRule01); // Adicionando o FuzzyRule ao objeto Fuzzy
 80a0598:	4659      	mov	r1, fp
 80a059a:	6820      	ldr	r0, [r4, #0]
 80a059c:	f001 f8e3 	bl	80a1766 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>
  
  // FuzzyRule "SE distancia = segura ENTAO velocidade = normal"
  FuzzyRuleAntecedent* ifDistanceSafe = new FuzzyRuleAntecedent(); // Instanciando um Antecedente para a expresso
 80a05a0:	2018      	movs	r0, #24
 80a05a2:	f7ff fd7a 	bl	80a009a <_Znwj>
 80a05a6:	4605      	mov	r5, r0
 80a05a8:	b108      	cbz	r0, 80a05ae <_Z10fuzzy_initv+0x152>
 80a05aa:	f001 f8ef 	bl	80a178c <_ZN19FuzzyRuleAntecedentC1Ev>
  ifDistanceSafe->joinSingle(safe); // Adicionando o FuzzySet correspondente ao objeto Antecedente
 80a05ae:	4641      	mov	r1, r8
 80a05b0:	4628      	mov	r0, r5
 80a05b2:	f001 f8f3 	bl	80a179c <_ZN19FuzzyRuleAntecedent10joinSingleEP8FuzzySet>
  FuzzyRuleConsequent* thenVelocityAverage = new FuzzyRuleConsequent(); // Instancinado um Consequente para a expressao
 80a05b6:	2008      	movs	r0, #8
 80a05b8:	f7ff fd6f 	bl	80a009a <_Znwj>
 80a05bc:	4680      	mov	r8, r0
 80a05be:	b108      	cbz	r0, 80a05c4 <_Z10fuzzy_initv+0x168>
 80a05c0:	f001 f887 	bl	80a16d2 <_ZN19FuzzyRuleConsequentC1Ev>
  thenVelocityAverage->addOutput(average);// Adicionando o FuzzySet correspondente ao objeto Consequente
 80a05c4:	4649      	mov	r1, r9
 80a05c6:	4640      	mov	r0, r8
 80a05c8:	f001 f887 	bl	80a16da <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  // Instanciando um objeto FuzzyRule
  FuzzyRule* fuzzyRule02 = new FuzzyRule(2, ifDistanceSafe, thenVelocityAverage); // Passando o Antecedente e o Consequente da expressao
 80a05cc:	2010      	movs	r0, #16
 80a05ce:	f7ff fd64 	bl	80a009a <_Znwj>
 80a05d2:	4681      	mov	r9, r0
 80a05d4:	b120      	cbz	r0, 80a05e0 <_Z10fuzzy_initv+0x184>
 80a05d6:	4643      	mov	r3, r8
 80a05d8:	462a      	mov	r2, r5
 80a05da:	2102      	movs	r1, #2
 80a05dc:	f001 f81a 	bl	80a1614 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fuzzyRule02); // Adicionando o FuzzyRule ao objeto Fuzzy
 80a05e0:	4649      	mov	r1, r9
 80a05e2:	6820      	ldr	r0, [r4, #0]
 80a05e4:	f001 f8bf 	bl	80a1766 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>
  
  // FuzzyRule "SE distancia = grande ENTAO velocidade = alta"
  FuzzyRuleAntecedent* ifDistanceBig = new FuzzyRuleAntecedent(); // Instanciando um Antecedente para a expresso
 80a05e8:	2018      	movs	r0, #24
 80a05ea:	f7ff fd56 	bl	80a009a <_Znwj>
 80a05ee:	4605      	mov	r5, r0
 80a05f0:	b108      	cbz	r0, 80a05f6 <_Z10fuzzy_initv+0x19a>
 80a05f2:	f001 f8cb 	bl	80a178c <_ZN19FuzzyRuleAntecedentC1Ev>
  ifDistanceBig->joinSingle(big); // Adicionando o FuzzySet correspondente ao objeto Antecedente
 80a05f6:	4631      	mov	r1, r6
 80a05f8:	4628      	mov	r0, r5
 80a05fa:	f001 f8cf 	bl	80a179c <_ZN19FuzzyRuleAntecedent10joinSingleEP8FuzzySet>
  FuzzyRuleConsequent* thenVelocityFast = new FuzzyRuleConsequent(); // Instancinado um Consequente para a expressao
 80a05fe:	2008      	movs	r0, #8
 80a0600:	f7ff fd4b 	bl	80a009a <_Znwj>
 80a0604:	4606      	mov	r6, r0
 80a0606:	b108      	cbz	r0, 80a060c <_Z10fuzzy_initv+0x1b0>
 80a0608:	f001 f863 	bl	80a16d2 <_ZN19FuzzyRuleConsequentC1Ev>
  thenVelocityFast->addOutput(fast);// Adicionando o FuzzySet correspondente ao objeto Consequente
 80a060c:	4639      	mov	r1, r7
 80a060e:	4630      	mov	r0, r6
 80a0610:	f001 f863 	bl	80a16da <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  // Instanciando um objeto FuzzyRule
  FuzzyRule* fuzzyRule03 = new FuzzyRule(3, ifDistanceBig, thenVelocityFast); // Passando o Antecedente e o Consequente da expressao
 80a0614:	2010      	movs	r0, #16
 80a0616:	f7ff fd40 	bl	80a009a <_Znwj>
 80a061a:	4607      	mov	r7, r0
 80a061c:	b120      	cbz	r0, 80a0628 <_Z10fuzzy_initv+0x1cc>
 80a061e:	4633      	mov	r3, r6
 80a0620:	462a      	mov	r2, r5
 80a0622:	2103      	movs	r1, #3
 80a0624:	f000 fff6 	bl	80a1614 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fuzzyRule03); // Adicionando o FuzzyRule ao objeto Fuzzy
 80a0628:	4639      	mov	r1, r7
 80a062a:	6820      	ldr	r0, [r4, #0]
}
 80a062c:	b003      	add	sp, #12
 80a062e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ifDistanceBig->joinSingle(big); // Adicionando o FuzzySet correspondente ao objeto Antecedente
  FuzzyRuleConsequent* thenVelocityFast = new FuzzyRuleConsequent(); // Instancinado um Consequente para a expressao
  thenVelocityFast->addOutput(fast);// Adicionando o FuzzySet correspondente ao objeto Consequente
  // Instanciando um objeto FuzzyRule
  FuzzyRule* fuzzyRule03 = new FuzzyRule(3, ifDistanceBig, thenVelocityFast); // Passando o Antecedente e o Consequente da expressao
  fuzzy->addFuzzyRule(fuzzyRule03); // Adicionando o FuzzyRule ao objeto Fuzzy
 80a0632:	f001 b898 	b.w	80a1766 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>
 80a0636:	bf00      	nop
 80a0638:	20000330 	.word	0x20000330
 80a063c:	42200000 	.word	0x42200000
 80a0640:	41a00000 	.word	0x41a00000
 80a0644:	428c0000 	.word	0x428c0000
 80a0648:	41f00000 	.word	0x41f00000
 80a064c:	42480000 	.word	0x42480000
 80a0650:	42a00000 	.word	0x42a00000
 80a0654:	42700000 	.word	0x42700000
 80a0658:	20000340 	.word	0x20000340
 80a065c:	41200000 	.word	0x41200000

080a0660 <loop>:
  	delay(5000);
  	// Serial.println("GO!");********************************
  	Particle.publish("GO!");
}

void loop(){
 80a0660:	b513      	push	{r0, r1, r4, lr}
	// 3. modify loop function
	// TEST
	// ******************************************

	// sensorx.readRangeContinuousMillimeters();
	if (sensor0.timeoutOccurred() || sensor1.timeoutOccurred() || sensor2.timeoutOccurred() || sensor3.timeoutOccurred()) { Serial.print(" SENSOR TIMEOUT"); }
 80a0662:	4819      	ldr	r0, [pc, #100]	; (80a06c8 <loop+0x68>)
 80a0664:	f000 fa62 	bl	80a0b2c <_ZN7VL53L0X15timeoutOccurredEv>
 80a0668:	bb40      	cbnz	r0, 80a06bc <loop+0x5c>
 80a066a:	4818      	ldr	r0, [pc, #96]	; (80a06cc <loop+0x6c>)
 80a066c:	f000 fa5e 	bl	80a0b2c <_ZN7VL53L0X15timeoutOccurredEv>
 80a0670:	bb20      	cbnz	r0, 80a06bc <loop+0x5c>
 80a0672:	4817      	ldr	r0, [pc, #92]	; (80a06d0 <loop+0x70>)
 80a0674:	f000 fa5a 	bl	80a0b2c <_ZN7VL53L0X15timeoutOccurredEv>
 80a0678:	bb00      	cbnz	r0, 80a06bc <loop+0x5c>
 80a067a:	4816      	ldr	r0, [pc, #88]	; (80a06d4 <loop+0x74>)
 80a067c:	f000 fa56 	bl	80a0b2c <_ZN7VL53L0X15timeoutOccurredEv>
 80a0680:	b9e0      	cbnz	r0, 80a06bc <loop+0x5c>
  	//***********************************************


  	// obligatory sampling from accelerometer
  	LIS3DHSample sample;
  	if(!accel.getSample(sample)) {
 80a0682:	4669      	mov	r1, sp
 80a0684:	4814      	ldr	r0, [pc, #80]	; (80a06d8 <loop+0x78>)
 80a0686:	f000 ff25 	bl	80a14d4 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
 80a068a:	b920      	cbnz	r0, 80a0696 <loop+0x36>
  		//Serial.println("no sample"); // ********************************
  		Particle.publish("no sample");
 80a068c:	4b13      	ldr	r3, [pc, #76]	; (80a06dc <loop+0x7c>)
 80a068e:	4814      	ldr	r0, [pc, #80]	; (80a06e0 <loop+0x80>)
 80a0690:	7819      	ldrb	r1, [r3, #0]
 80a0692:	f7ff fd5f 	bl	80a0154 <_ZN10CloudClass7publishEPKc11PublishFlag.isra.0>
  	}

  	if(RSflag == HIGH) {
 80a0696:	4b13      	ldr	r3, [pc, #76]	; (80a06e4 <loop+0x84>)
 80a0698:	4c13      	ldr	r4, [pc, #76]	; (80a06e8 <loop+0x88>)
 80a069a:	781a      	ldrb	r2, [r3, #0]
 80a069c:	4b13      	ldr	r3, [pc, #76]	; (80a06ec <loop+0x8c>)
 80a069e:	b11a      	cbz	r2, 80a06a8 <loop+0x48>
  		L_command = 1500;
 80a06a0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80a06a4:	601a      	str	r2, [r3, #0]
    	R_command = 1500;
 80a06a6:	6022      	str	r2, [r4, #0]
  	}

  	LESC.writeMicroseconds(L_command);
 80a06a8:	8819      	ldrh	r1, [r3, #0]
 80a06aa:	4811      	ldr	r0, [pc, #68]	; (80a06f0 <loop+0x90>)
 80a06ac:	f001 fa6f 	bl	80a1b8e <_ZN5Servo17writeMicrosecondsEt>
  	RESC.writeMicroseconds(R_command);
 80a06b0:	8821      	ldrh	r1, [r4, #0]
 80a06b2:	4810      	ldr	r0, [pc, #64]	; (80a06f4 <loop+0x94>)
 80a06b4:	f001 fa6b 	bl	80a1b8e <_ZN5Servo17writeMicrosecondsEt>
 80a06b8:	b002      	add	sp, #8
 80a06ba:	bd10      	pop	{r4, pc}
	// 3. modify loop function
	// TEST
	// ******************************************

	// sensorx.readRangeContinuousMillimeters();
	if (sensor0.timeoutOccurred() || sensor1.timeoutOccurred() || sensor2.timeoutOccurred() || sensor3.timeoutOccurred()) { Serial.print(" SENSOR TIMEOUT"); }
 80a06bc:	f001 ff48 	bl	80a2550 <_Z16_fetch_usbserialv>
 80a06c0:	490d      	ldr	r1, [pc, #52]	; (80a06f8 <loop+0x98>)
 80a06c2:	f001 faec 	bl	80a1c9e <_ZN5Print5printEPKc>
 80a06c6:	e7dc      	b.n	80a0682 <loop+0x22>
 80a06c8:	20000358 	.word	0x20000358
 80a06cc:	20000370 	.word	0x20000370
 80a06d0:	20000388 	.word	0x20000388
 80a06d4:	200003a0 	.word	0x200003a0
 80a06d8:	20000344 	.word	0x20000344
 80a06dc:	2000033c 	.word	0x2000033c
 80a06e0:	080a3534 	.word	0x080a3534
 80a06e4:	2000033d 	.word	0x2000033d
 80a06e8:	20000320 	.word	0x20000320
 80a06ec:	20000300 	.word	0x20000300
 80a06f0:	200003b8 	.word	0x200003b8
 80a06f4:	200003c8 	.word	0x200003c8
 80a06f8:	080a353e 	.word	0x080a353e

080a06fc <_ZN10CloudClass8variableIA10_cIiEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a06fc:	2300      	movs	r3, #0
 80a06fe:	2202      	movs	r2, #2
 80a0700:	f001 b9ee 	b.w	80a1ae0 <spark_variable>

080a0704 <setup>:

int distance = 8192;
int L_command = 1500;
int R_command = 1500;

void setup() {
 80a0704:	b570      	push	{r4, r5, r6, lr}
	others_init();		// line, remote, esc, ***printing***
 80a0706:	f7ff fdf9 	bl	80a02fc <_Z11others_initv>
	tof_init();			// ToF and I2C
 80a070a:	f7ff fd29 	bl	80a0160 <_Z8tof_initv>
	accel_init();		// accelerometer
 80a070e:	f7ff fddb 	bl	80a02c8 <_Z10accel_initv>
	interrupt_init();	// interrupts for lines and remote
 80a0712:	f7ff fe2d 	bl	80a0370 <_Z14interrupt_initv>
	ESC_init();			// Car ESCs
 80a0716:	f7ff fe71 	bl	80a03fc <_Z8ESC_initv>

	fuzzy_init();		// Fuzzy library************
 80a071a:	f7ff fe9f 	bl	80a045c <_Z10fuzzy_initv>

  	// ***Set up web*** ****************************
  	// register cloud variables
	Particle.variable("distance", distance);
 80a071e:	4912      	ldr	r1, [pc, #72]	; (80a0768 <setup+0x64>)
 80a0720:	4812      	ldr	r0, [pc, #72]	; (80a076c <setup+0x68>)
 80a0722:	f7ff ffeb 	bl	80a06fc <_ZN10CloudClass8variableIA10_cIiEEEbRKT_DpRKT0_>
	Particle.variable("Left_ESC", L_command);
 80a0726:	4912      	ldr	r1, [pc, #72]	; (80a0770 <setup+0x6c>)
 80a0728:	4812      	ldr	r0, [pc, #72]	; (80a0774 <setup+0x70>)
 80a072a:	f7ff ffe7 	bl	80a06fc <_ZN10CloudClass8variableIA10_cIiEEEbRKT_DpRKT0_>
	Particle.variable("Right_ESC", R_command);
 80a072e:	4912      	ldr	r1, [pc, #72]	; (80a0778 <setup+0x74>)
 80a0730:	4812      	ldr	r0, [pc, #72]	; (80a077c <setup+0x78>)
 80a0732:	f7ff ffe3 	bl	80a06fc <_ZN10CloudClass8variableIA10_cIiEEEbRKT_DpRKT0_>
	// *********************************************

    while(!RSflag) {  // initial LOW
 80a0736:	4e12      	ldr	r6, [pc, #72]	; (80a0780 <setup+0x7c>)
 80a0738:	4d12      	ldr	r5, [pc, #72]	; (80a0784 <setup+0x80>)
 80a073a:	7833      	ldrb	r3, [r6, #0]
 80a073c:	4c11      	ldr	r4, [pc, #68]	; (80a0784 <setup+0x80>)
 80a073e:	b923      	cbnz	r3, 80a074a <setup+0x46>
    	// Serial.println("Waiting for Start");**************
    	Particle.publish("Waiting for Start");
 80a0740:	7829      	ldrb	r1, [r5, #0]
 80a0742:	4811      	ldr	r0, [pc, #68]	; (80a0788 <setup+0x84>)
 80a0744:	f7ff fd06 	bl	80a0154 <_ZN10CloudClass7publishEPKc11PublishFlag.isra.0>
	Particle.variable("distance", distance);
	Particle.variable("Left_ESC", L_command);
	Particle.variable("Right_ESC", R_command);
	// *********************************************

    while(!RSflag) {  // initial LOW
 80a0748:	e7f7      	b.n	80a073a <setup+0x36>
    	// Serial.println("Waiting for Start");**************
    	Particle.publish("Waiting for Start");
  	}
  	// Serial.println("Starting in 5 seconds...");***********
  	Particle.publish("Starting in 5 seconds...");
 80a074a:	7821      	ldrb	r1, [r4, #0]
 80a074c:	480f      	ldr	r0, [pc, #60]	; (80a078c <setup+0x88>)
 80a074e:	f7ff fd01 	bl	80a0154 <_ZN10CloudClass7publishEPKc11PublishFlag.isra.0>
  	delay(5000);
 80a0752:	f241 3088 	movw	r0, #5000	; 0x1388
 80a0756:	f001 fb55 	bl	80a1e04 <delay>
  	// Serial.println("GO!");********************************
  	Particle.publish("GO!");
 80a075a:	7821      	ldrb	r1, [r4, #0]
 80a075c:	480c      	ldr	r0, [pc, #48]	; (80a0790 <setup+0x8c>)
}
 80a075e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  	}
  	// Serial.println("Starting in 5 seconds...");***********
  	Particle.publish("Starting in 5 seconds...");
  	delay(5000);
  	// Serial.println("GO!");********************************
  	Particle.publish("GO!");
 80a0762:	f7ff bcf7 	b.w	80a0154 <_ZN10CloudClass7publishEPKc11PublishFlag.isra.0>
 80a0766:	bf00      	nop
 80a0768:	20000310 	.word	0x20000310
 80a076c:	080a354e 	.word	0x080a354e
 80a0770:	20000300 	.word	0x20000300
 80a0774:	080a3557 	.word	0x080a3557
 80a0778:	20000320 	.word	0x20000320
 80a077c:	080a3560 	.word	0x080a3560
 80a0780:	2000033d 	.word	0x2000033d
 80a0784:	2000033c 	.word	0x2000033c
 80a0788:	080a356a 	.word	0x080a356a
 80a078c:	080a357c 	.word	0x080a357c
 80a0790:	080a3595 	.word	0x080a3595

080a0794 <_GLOBAL__sub_I_low>:

class PublishFlag
{
public:
	typedef uint8_t flag_t;
	PublishFlag(flag_t flag) : flag_(flag) {}
 80a0794:	4b19      	ldr	r3, [pc, #100]	; (80a07fc <_GLOBAL__sub_I_low+0x68>)
    	R_command = 1500;
  	}

  	LESC.writeMicroseconds(L_command);
  	RESC.writeMicroseconds(R_command);
 80a0796:	b510      	push	{r4, lr}
 80a0798:	2200      	movs	r2, #0
 80a079a:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a079c:	f001 f806 	bl	80a17ac <HAL_Pin_Map>

#if !defined(PARTICLE)
#  include <Wire.h>
#endif

VL53L0X sensor0;
 80a07a0:	4817      	ldr	r0, [pc, #92]	; (80a0800 <_GLOBAL__sub_I_low+0x6c>)
 80a07a2:	f000 f849 	bl	80a0838 <_ZN7VL53L0XC1Ev>
VL53L0X sensor1;
 80a07a6:	4817      	ldr	r0, [pc, #92]	; (80a0804 <_GLOBAL__sub_I_low+0x70>)
 80a07a8:	f000 f846 	bl	80a0838 <_ZN7VL53L0XC1Ev>
VL53L0X sensor2;
 80a07ac:	4816      	ldr	r0, [pc, #88]	; (80a0808 <_GLOBAL__sub_I_low+0x74>)
 80a07ae:	f000 f843 	bl	80a0838 <_ZN7VL53L0XC1Ev>
VL53L0X sensor3;
 80a07b2:	4816      	ldr	r0, [pc, #88]	; (80a080c <_GLOBAL__sub_I_low+0x78>)
 80a07b4:	f000 f840 	bl	80a0838 <_ZN7VL53L0XC1Ev>
int BL = D5;
int BR = D6;

int RS = D4;

Servo LESC;
 80a07b8:	4815      	ldr	r0, [pc, #84]	; (80a0810 <_GLOBAL__sub_I_low+0x7c>)
 80a07ba:	f001 fa08 	bl	80a1bce <_ZN5ServoC1Ev>
Servo RESC;
 80a07be:	4815      	ldr	r0, [pc, #84]	; (80a0814 <_GLOBAL__sub_I_low+0x80>)
 80a07c0:	f001 fa05 	bl	80a1bce <_ZN5ServoC1Ev>
int Lmotor = D2;
int Rmotor = D3;

Fuzzy* fuzzy = new Fuzzy();
 80a07c4:	2018      	movs	r0, #24
 80a07c6:	f7ff fc68 	bl	80a009a <_Znwj>
 80a07ca:	4604      	mov	r4, r0
 80a07cc:	b108      	cbz	r0, 80a07d2 <_GLOBAL__sub_I_low+0x3e>
 80a07ce:	f000 ff97 	bl	80a1700 <_ZN5FuzzyC1Ev>
 80a07d2:	4b11      	ldr	r3, [pc, #68]	; (80a0818 <_GLOBAL__sub_I_low+0x84>)
boolean BLflag = true;
boolean BRflag = true;

boolean RSflag = false;

SYSTEM_THREAD(ENABLED);
 80a07d4:	2100      	movs	r1, #0
 80a07d6:	2001      	movs	r0, #1
Servo LESC;
Servo RESC;
int Lmotor = D2;
int Rmotor = D3;

Fuzzy* fuzzy = new Fuzzy();
 80a07d8:	601c      	str	r4, [r3, #0]
boolean BLflag = true;
boolean BRflag = true;

boolean RSflag = false;

SYSTEM_THREAD(ENABLED);
 80a07da:	f001 f951 	bl	80a1a80 <system_thread_set_state>
// Try to print on web console**************************
//SYSTEM_MODE(MANUAL);

// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
 80a07de:	f002 f8d7 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a07e2:	2200      	movs	r2, #0
 80a07e4:	4601      	mov	r1, r0
 80a07e6:	2311      	movs	r3, #17
 80a07e8:	480c      	ldr	r0, [pc, #48]	; (80a081c <_GLOBAL__sub_I_low+0x88>)
 80a07ea:	f000 ff07 	bl	80a15fc <_ZN9LIS3DHI2CC1ER7TwoWirehi>
    	R_command = 1500;
  	}

  	LESC.writeMicroseconds(L_command);
  	RESC.writeMicroseconds(R_command);
 80a07ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// Try to print on web console**************************
//SYSTEM_MODE(MANUAL);

// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
 80a07f2:	4a0b      	ldr	r2, [pc, #44]	; (80a0820 <_GLOBAL__sub_I_low+0x8c>)
 80a07f4:	490b      	ldr	r1, [pc, #44]	; (80a0824 <_GLOBAL__sub_I_low+0x90>)
 80a07f6:	4809      	ldr	r0, [pc, #36]	; (80a081c <_GLOBAL__sub_I_low+0x88>)
 80a07f8:	f002 b8ea 	b.w	80a29d0 <__aeabi_atexit>
 80a07fc:	2000033c 	.word	0x2000033c
 80a0800:	20000358 	.word	0x20000358
 80a0804:	20000370 	.word	0x20000370
 80a0808:	20000388 	.word	0x20000388
 80a080c:	200003a0 	.word	0x200003a0
 80a0810:	200003b8 	.word	0x200003b8
 80a0814:	200003c8 	.word	0x200003c8
 80a0818:	20000340 	.word	0x20000340
 80a081c:	20000344 	.word	0x20000344
 80a0820:	20000338 	.word	0x20000338
 80a0824:	080a13c1 	.word	0x080a13c1

080a0828 <_ZN7TwoWire5writeEm>:
  virtual int peek(void);
  virtual void flush(void);
  void onReceive(void (*)(int));
  void onRequest(void (*)(void));

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
 80a0828:	6803      	ldr	r3, [r0, #0]
 80a082a:	b2c9      	uxtb	r1, r1
 80a082c:	689b      	ldr	r3, [r3, #8]
 80a082e:	4718      	bx	r3

080a0830 <_ZN7TwoWire5writeEi>:
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0830:	6803      	ldr	r3, [r0, #0]
 80a0832:	b2c9      	uxtb	r1, r1
 80a0834:	689b      	ldr	r3, [r3, #8]
 80a0836:	4718      	bx	r3

080a0838 <_ZN7VL53L0XC1Ev>:
// Constructors ////////////////////////////////////////////////////////////////

VL53L0X::VL53L0X(void)
  : address(ADDRESS_DEFAULT)
  , io_timeout(0) // no timeout
  , did_timeout(false)
 80a0838:	2229      	movs	r2, #41	; 0x29
 80a083a:	7042      	strb	r2, [r0, #1]
 80a083c:	2200      	movs	r2, #0
 80a083e:	6042      	str	r2, [r0, #4]
 80a0840:	7202      	strb	r2, [r0, #8]
{
}
 80a0842:	4770      	bx	lr

080a0844 <_ZN7VL53L0X8writeRegEhh>:
  return true;
}

// Write an 8-bit register
void VL53L0X::writeReg(uint8_t reg, uint8_t value)
{
 80a0844:	b570      	push	{r4, r5, r6, lr}
 80a0846:	4604      	mov	r4, r0
 80a0848:	4615      	mov	r5, r2
 80a084a:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a084c:	f002 f8a0 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a0850:	7861      	ldrb	r1, [r4, #1]
 80a0852:	f001 ffdc 	bl	80a280e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0856:	f002 f89b 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a085a:	6803      	ldr	r3, [r0, #0]
 80a085c:	4631      	mov	r1, r6
 80a085e:	689b      	ldr	r3, [r3, #8]
 80a0860:	4798      	blx	r3
  Wire.write(value);
 80a0862:	f002 f895 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a0866:	6803      	ldr	r3, [r0, #0]
 80a0868:	4629      	mov	r1, r5
 80a086a:	689b      	ldr	r3, [r3, #8]
 80a086c:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a086e:	f002 f88f 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a0872:	f001 ffd4 	bl	80a281e <_ZN7TwoWire15endTransmissionEv>
 80a0876:	7020      	strb	r0, [r4, #0]
 80a0878:	bd70      	pop	{r4, r5, r6, pc}

080a087a <_ZN7VL53L0X10setAddressEh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void VL53L0X::setAddress(uint8_t new_addr)
{
 80a087a:	b538      	push	{r3, r4, r5, lr}
 80a087c:	4605      	mov	r5, r0
 80a087e:	460c      	mov	r4, r1
  writeReg(I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 80a0880:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80a0884:	218a      	movs	r1, #138	; 0x8a
 80a0886:	f7ff ffdd 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  address = new_addr;
 80a088a:	706c      	strb	r4, [r5, #1]
 80a088c:	bd38      	pop	{r3, r4, r5, pc}

080a088e <_ZN7VL53L0X13writeReg16BitEht>:
  last_status = Wire.endTransmission();
}

// Write a 16-bit register
void VL53L0X::writeReg16Bit(uint8_t reg, uint16_t value)
{
 80a088e:	b570      	push	{r4, r5, r6, lr}
 80a0890:	4604      	mov	r4, r0
 80a0892:	4615      	mov	r5, r2
 80a0894:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a0896:	f002 f87b 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a089a:	7861      	ldrb	r1, [r4, #1]
 80a089c:	f001 ffb7 	bl	80a280e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a08a0:	f002 f876 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a08a4:	6803      	ldr	r3, [r0, #0]
 80a08a6:	4631      	mov	r1, r6
 80a08a8:	689b      	ldr	r3, [r3, #8]
 80a08aa:	4798      	blx	r3
  Wire.write((value >> 8) & 0xFF); // value high byte
 80a08ac:	f002 f870 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a08b0:	0a29      	lsrs	r1, r5, #8
 80a08b2:	f7ff ffbd 	bl	80a0830 <_ZN7TwoWire5writeEi>
  Wire.write( value       & 0xFF); // value low byte
 80a08b6:	f002 f86b 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a08ba:	b2e9      	uxtb	r1, r5
 80a08bc:	f7ff ffb8 	bl	80a0830 <_ZN7TwoWire5writeEi>
  last_status = Wire.endTransmission();
 80a08c0:	f002 f866 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a08c4:	f001 ffab 	bl	80a281e <_ZN7TwoWire15endTransmissionEv>
 80a08c8:	7020      	strb	r0, [r4, #0]
 80a08ca:	bd70      	pop	{r4, r5, r6, pc}

080a08cc <_ZN7VL53L0X13writeReg32BitEhm>:
}

// Write a 32-bit register
void VL53L0X::writeReg32Bit(uint8_t reg, uint32_t value)
{
 80a08cc:	b570      	push	{r4, r5, r6, lr}
 80a08ce:	4605      	mov	r5, r0
 80a08d0:	4614      	mov	r4, r2
 80a08d2:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a08d4:	f002 f85c 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a08d8:	7869      	ldrb	r1, [r5, #1]
 80a08da:	f001 ff98 	bl	80a280e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a08de:	f002 f857 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a08e2:	6803      	ldr	r3, [r0, #0]
 80a08e4:	4631      	mov	r1, r6
 80a08e6:	689b      	ldr	r3, [r3, #8]
 80a08e8:	4798      	blx	r3
  Wire.write((value >> 24) & 0xFF); // value highest byte
 80a08ea:	f002 f851 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a08ee:	0e21      	lsrs	r1, r4, #24
 80a08f0:	f7ff ff9a 	bl	80a0828 <_ZN7TwoWire5writeEm>
  Wire.write((value >> 16) & 0xFF);
 80a08f4:	f002 f84c 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a08f8:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80a08fc:	f7ff ff94 	bl	80a0828 <_ZN7TwoWire5writeEm>
  Wire.write((value >>  8) & 0xFF);
 80a0900:	f002 f846 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a0904:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80a0908:	f7ff ff8e 	bl	80a0828 <_ZN7TwoWire5writeEm>
  Wire.write( value        & 0xFF); // value lowest byte
 80a090c:	f002 f840 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a0910:	b2e1      	uxtb	r1, r4
 80a0912:	f7ff ff89 	bl	80a0828 <_ZN7TwoWire5writeEm>
  last_status = Wire.endTransmission();
 80a0916:	f002 f83b 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a091a:	f001 ff80 	bl	80a281e <_ZN7TwoWire15endTransmissionEv>
 80a091e:	7028      	strb	r0, [r5, #0]
 80a0920:	bd70      	pop	{r4, r5, r6, pc}

080a0922 <_ZN7VL53L0X7readRegEh>:
}

// Read an 8-bit register
uint8_t VL53L0X::readReg(uint8_t reg)
{
 80a0922:	b538      	push	{r3, r4, r5, lr}
 80a0924:	4604      	mov	r4, r0
 80a0926:	460d      	mov	r5, r1
  uint8_t value;

  Wire.beginTransmission(address);
 80a0928:	f002 f832 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a092c:	7861      	ldrb	r1, [r4, #1]
 80a092e:	f001 ff6e 	bl	80a280e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0932:	f002 f82d 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a0936:	6803      	ldr	r3, [r0, #0]
 80a0938:	4629      	mov	r1, r5
 80a093a:	689b      	ldr	r3, [r3, #8]
 80a093c:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a093e:	f002 f827 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a0942:	f001 ff6c 	bl	80a281e <_ZN7TwoWire15endTransmissionEv>
 80a0946:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)1);
 80a0948:	f002 f822 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a094c:	2201      	movs	r2, #1
 80a094e:	7861      	ldrb	r1, [r4, #1]
 80a0950:	f001 ff55 	bl	80a27fe <_ZN7TwoWire11requestFromEhh>
  value = Wire.read();
 80a0954:	f002 f81c 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a0958:	6803      	ldr	r3, [r0, #0]
 80a095a:	695b      	ldr	r3, [r3, #20]
 80a095c:	4798      	blx	r3

  return value;
}
 80a095e:	b2c0      	uxtb	r0, r0
 80a0960:	bd38      	pop	{r3, r4, r5, pc}

080a0962 <_ZN7VL53L0X12readReg16BitEh>:

// Read a 16-bit register
uint16_t VL53L0X::readReg16Bit(uint8_t reg)
{
 80a0962:	b538      	push	{r3, r4, r5, lr}
 80a0964:	4604      	mov	r4, r0
 80a0966:	460d      	mov	r5, r1
  uint16_t value;

  Wire.beginTransmission(address);
 80a0968:	f002 f812 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a096c:	7861      	ldrb	r1, [r4, #1]
 80a096e:	f001 ff4e 	bl	80a280e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0972:	f002 f80d 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a0976:	6803      	ldr	r3, [r0, #0]
 80a0978:	4629      	mov	r1, r5
 80a097a:	689b      	ldr	r3, [r3, #8]
 80a097c:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a097e:	f002 f807 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a0982:	f001 ff4c 	bl	80a281e <_ZN7TwoWire15endTransmissionEv>
 80a0986:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)2);
 80a0988:	f002 f802 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a098c:	7861      	ldrb	r1, [r4, #1]
 80a098e:	2202      	movs	r2, #2
 80a0990:	f001 ff35 	bl	80a27fe <_ZN7TwoWire11requestFromEhh>
  value  = (uint16_t)Wire.read() << 8; // value high byte
 80a0994:	f001 fffc 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a0998:	6803      	ldr	r3, [r0, #0]
 80a099a:	695b      	ldr	r3, [r3, #20]
 80a099c:	4798      	blx	r3
 80a099e:	4604      	mov	r4, r0
  value |=           Wire.read();      // value low byte
 80a09a0:	f001 fff6 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a09a4:	6803      	ldr	r3, [r0, #0]
 80a09a6:	695b      	ldr	r3, [r3, #20]
 80a09a8:	4798      	blx	r3
 80a09aa:	ea40 2004 	orr.w	r0, r0, r4, lsl #8

  return value;
}
 80a09ae:	b280      	uxth	r0, r0
 80a09b0:	bd38      	pop	{r3, r4, r5, pc}

080a09b2 <_ZN7VL53L0X10writeMultiEhPKhh>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
 80a09b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a09b4:	4606      	mov	r6, r0
 80a09b6:	4614      	mov	r4, r2
 80a09b8:	461d      	mov	r5, r3
 80a09ba:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a09bc:	f001 ffe8 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a09c0:	7871      	ldrb	r1, [r6, #1]
 80a09c2:	f001 ff24 	bl	80a280e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a09c6:	f001 ffe3 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a09ca:	6803      	ldr	r3, [r0, #0]
 80a09cc:	4639      	mov	r1, r7
 80a09ce:	689b      	ldr	r3, [r3, #8]
 80a09d0:	4798      	blx	r3
 80a09d2:	4425      	add	r5, r4

  while (count-- > 0)
 80a09d4:	42ac      	cmp	r4, r5
 80a09d6:	d007      	beq.n	80a09e8 <_ZN7VL53L0X10writeMultiEhPKhh+0x36>
  {
    Wire.write(*(src++));
 80a09d8:	f001 ffda 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a09dc:	6803      	ldr	r3, [r0, #0]
 80a09de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a09e2:	689b      	ldr	r3, [r3, #8]
 80a09e4:	4798      	blx	r3
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
  Wire.beginTransmission(address);
  Wire.write(reg);

  while (count-- > 0)
 80a09e6:	e7f5      	b.n	80a09d4 <_ZN7VL53L0X10writeMultiEhPKhh+0x22>
  {
    Wire.write(*(src++));
  }

  last_status = Wire.endTransmission();
 80a09e8:	f001 ffd2 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a09ec:	f001 ff17 	bl	80a281e <_ZN7TwoWire15endTransmissionEv>
 80a09f0:	7030      	strb	r0, [r6, #0]
 80a09f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a09f4 <_ZN7VL53L0X9readMultiEhPhh>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void VL53L0X::readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 80a09f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a09f6:	4606      	mov	r6, r0
 80a09f8:	4614      	mov	r4, r2
 80a09fa:	461d      	mov	r5, r3
 80a09fc:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a09fe:	f001 ffc7 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a0a02:	7871      	ldrb	r1, [r6, #1]
 80a0a04:	f001 ff03 	bl	80a280e <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0a08:	f001 ffc2 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a0a0c:	6803      	ldr	r3, [r0, #0]
 80a0a0e:	4639      	mov	r1, r7
 80a0a10:	689b      	ldr	r3, [r3, #8]
 80a0a12:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a0a14:	f001 ffbc 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a0a18:	f001 ff01 	bl	80a281e <_ZN7TwoWire15endTransmissionEv>
 80a0a1c:	7030      	strb	r0, [r6, #0]

  Wire.requestFrom(address, count);
 80a0a1e:	f001 ffb7 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a0a22:	462a      	mov	r2, r5
 80a0a24:	7871      	ldrb	r1, [r6, #1]
 80a0a26:	f001 feea 	bl	80a27fe <_ZN7TwoWire11requestFromEhh>
 80a0a2a:	4425      	add	r5, r4

  while (count-- > 0)
 80a0a2c:	42ac      	cmp	r4, r5
 80a0a2e:	d007      	beq.n	80a0a40 <_ZN7VL53L0X9readMultiEhPhh+0x4c>
  {
    *(dst++) = Wire.read();
 80a0a30:	f001 ffae 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a0a34:	6803      	ldr	r3, [r0, #0]
 80a0a36:	695b      	ldr	r3, [r3, #20]
 80a0a38:	4798      	blx	r3
 80a0a3a:	f804 0b01 	strb.w	r0, [r4], #1
  Wire.write(reg);
  last_status = Wire.endTransmission();

  Wire.requestFrom(address, count);

  while (count-- > 0)
 80a0a3e:	e7f5      	b.n	80a0a2c <_ZN7VL53L0X9readMultiEhPhh+0x38>
 80a0a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0a42:	0000      	movs	r0, r0
 80a0a44:	0000      	movs	r0, r0
	...

080a0a48 <_ZN7VL53L0X18setSignalRateLimitEf>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
 80a0a48:	b570      	push	{r4, r5, r6, lr}
 80a0a4a:	460d      	mov	r5, r1
 80a0a4c:	4606      	mov	r6, r0
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a0a4e:	2100      	movs	r1, #0
 80a0a50:	4628      	mov	r0, r5
 80a0a52:	f002 fceb 	bl	80a342c <__aeabi_fcmplt>
 80a0a56:	b9b0      	cbnz	r0, 80a0a86 <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>
 80a0a58:	4628      	mov	r0, r5
 80a0a5a:	f002 fa6d 	bl	80a2f38 <__aeabi_f2d>
 80a0a5e:	a30c      	add	r3, pc, #48	; (adr r3, 80a0a90 <_ZN7VL53L0X18setSignalRateLimitEf+0x48>)
 80a0a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0a64:	f002 fb3a 	bl	80a30dc <__aeabi_dcmpgt>
 80a0a68:	b968      	cbnz	r0, 80a0a86 <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80a0a6a:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80a0a6e:	4628      	mov	r0, r5
 80a0a70:	f002 fb3e 	bl	80a30f0 <__aeabi_fmul>
 80a0a74:	f002 fd02 	bl	80a347c <__aeabi_f2uiz>
 80a0a78:	2144      	movs	r1, #68	; 0x44
 80a0a7a:	b282      	uxth	r2, r0
 80a0a7c:	4630      	mov	r0, r6
 80a0a7e:	f7ff ff06 	bl	80a088e <_ZN7VL53L0X13writeReg16BitEht>
 80a0a82:	2001      	movs	r0, #1
 80a0a84:	bd70      	pop	{r4, r5, r6, pc}
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a0a86:	2000      	movs	r0, #0
 80a0a88:	bd70      	pop	{r4, r5, r6, pc}
 80a0a8a:	bf00      	nop
 80a0a8c:	f3af 8000 	nop.w
 80a0a90:	0a3d70a4 	.word	0x0a3d70a4
 80a0a94:	407fffd7 	.word	0x407fffd7

080a0a98 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>:
}

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t VL53L0X::getVcselPulsePeriod(vcselPeriodType type)
{
 80a0a98:	b508      	push	{r3, lr}
  if (type == VcselPeriodPreRange)
 80a0a9a:	b909      	cbnz	r1, 80a0aa0 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x8>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80a0a9c:	2150      	movs	r1, #80	; 0x50
 80a0a9e:	e002      	b.n	80a0aa6 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0xe>
  }
  else if (type == VcselPeriodFinalRange)
 80a0aa0:	2901      	cmp	r1, #1
 80a0aa2:	d106      	bne.n	80a0ab2 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x1a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a0aa4:	2170      	movs	r1, #112	; 0x70
 80a0aa6:	f7ff ff3c 	bl	80a0922 <_ZN7VL53L0X7readRegEh>
 80a0aaa:	3001      	adds	r0, #1
 80a0aac:	0040      	lsls	r0, r0, #1
 80a0aae:	b2c0      	uxtb	r0, r0
 80a0ab0:	bd08      	pop	{r3, pc}
  }
  else { return 255; }
 80a0ab2:	20ff      	movs	r0, #255	; 0xff
}
 80a0ab4:	bd08      	pop	{r3, pc}

080a0ab6 <_ZN7VL53L0X15startContinuousEm>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X::startContinuous(uint32_t period_ms)
{
 80a0ab6:	b538      	push	{r3, r4, r5, lr}
 80a0ab8:	4604      	mov	r4, r0
 80a0aba:	460d      	mov	r5, r1
  writeReg(0x80, 0x01);
 80a0abc:	2201      	movs	r2, #1
 80a0abe:	2180      	movs	r1, #128	; 0x80
 80a0ac0:	f7ff fec0 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0ac4:	2201      	movs	r2, #1
 80a0ac6:	21ff      	movs	r1, #255	; 0xff
 80a0ac8:	4620      	mov	r0, r4
 80a0aca:	f7ff febb 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a0ace:	2200      	movs	r2, #0
 80a0ad0:	4611      	mov	r1, r2
 80a0ad2:	4620      	mov	r0, r4
 80a0ad4:	f7ff feb6 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x91, stop_variable);
 80a0ad8:	7c22      	ldrb	r2, [r4, #16]
 80a0ada:	2191      	movs	r1, #145	; 0x91
 80a0adc:	4620      	mov	r0, r4
 80a0ade:	f7ff feb1 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a0ae2:	2201      	movs	r2, #1
 80a0ae4:	2100      	movs	r1, #0
 80a0ae6:	4620      	mov	r0, r4
 80a0ae8:	f7ff feac 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a0aec:	2200      	movs	r2, #0
 80a0aee:	21ff      	movs	r1, #255	; 0xff
 80a0af0:	4620      	mov	r0, r4
 80a0af2:	f7ff fea7 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a0af6:	2200      	movs	r2, #0
 80a0af8:	2180      	movs	r1, #128	; 0x80
 80a0afa:	4620      	mov	r0, r4
 80a0afc:	f7ff fea2 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  if (period_ms != 0)
 80a0b00:	b16d      	cbz	r5, 80a0b1e <_ZN7VL53L0X15startContinuousEm+0x68>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 80a0b02:	21f8      	movs	r1, #248	; 0xf8
 80a0b04:	4620      	mov	r0, r4
 80a0b06:	f7ff ff2c 	bl	80a0962 <_ZN7VL53L0X12readReg16BitEh>

    if (osc_calibrate_val != 0)
 80a0b0a:	b100      	cbz	r0, 80a0b0e <_ZN7VL53L0X15startContinuousEm+0x58>
    {
      period_ms *= osc_calibrate_val;
 80a0b0c:	4345      	muls	r5, r0
    }

    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 80a0b0e:	462a      	mov	r2, r5
 80a0b10:	2104      	movs	r1, #4
 80a0b12:	4620      	mov	r0, r4
 80a0b14:	f7ff feda 	bl	80a08cc <_ZN7VL53L0X13writeReg32BitEhm>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 80a0b18:	2204      	movs	r2, #4
 80a0b1a:	2100      	movs	r1, #0
 80a0b1c:	e001      	b.n	80a0b22 <_ZN7VL53L0X15startContinuousEm+0x6c>
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a0b1e:	4629      	mov	r1, r5
 80a0b20:	2202      	movs	r2, #2
 80a0b22:	4620      	mov	r0, r4
  }
}
 80a0b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a0b28:	f7ff be8c 	b.w	80a0844 <_ZN7VL53L0X8writeRegEhh>

080a0b2c <_ZN7VL53L0X15timeoutOccurredEv>:
}

// Did a timeout occur in one of the read functions since the last call to
// timeoutOccurred()?
bool VL53L0X::timeoutOccurred()
{
 80a0b2c:	4603      	mov	r3, r0
  bool tmp = did_timeout;
  did_timeout = false;
 80a0b2e:	2200      	movs	r2, #0

// Did a timeout occur in one of the read functions since the last call to
// timeoutOccurred()?
bool VL53L0X::timeoutOccurred()
{
  bool tmp = did_timeout;
 80a0b30:	7a00      	ldrb	r0, [r0, #8]
  did_timeout = false;
 80a0b32:	721a      	strb	r2, [r3, #8]
  return tmp;
}
 80a0b34:	4770      	bx	lr

080a0b36 <_ZN7VL53L0X11getSpadInfoEPhPb>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X::getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80a0b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b38:	4604      	mov	r4, r0
 80a0b3a:	460f      	mov	r7, r1
 80a0b3c:	4616      	mov	r6, r2
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80a0b3e:	2180      	movs	r1, #128	; 0x80
 80a0b40:	2201      	movs	r2, #1
 80a0b42:	f7ff fe7f 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0b46:	2201      	movs	r2, #1
 80a0b48:	21ff      	movs	r1, #255	; 0xff
 80a0b4a:	4620      	mov	r0, r4
 80a0b4c:	f7ff fe7a 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a0b50:	2200      	movs	r2, #0
 80a0b52:	4611      	mov	r1, r2
 80a0b54:	4620      	mov	r0, r4
 80a0b56:	f7ff fe75 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x06);
 80a0b5a:	2206      	movs	r2, #6
 80a0b5c:	21ff      	movs	r1, #255	; 0xff
 80a0b5e:	4620      	mov	r0, r4
 80a0b60:	f7ff fe70 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg(0x83) | 0x04);
 80a0b64:	2183      	movs	r1, #131	; 0x83
 80a0b66:	4620      	mov	r0, r4
 80a0b68:	f7ff fedb 	bl	80a0922 <_ZN7VL53L0X7readRegEh>
 80a0b6c:	f040 0204 	orr.w	r2, r0, #4
 80a0b70:	b2d2      	uxtb	r2, r2
 80a0b72:	2183      	movs	r1, #131	; 0x83
 80a0b74:	4620      	mov	r0, r4
 80a0b76:	f7ff fe65 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x07);
 80a0b7a:	2207      	movs	r2, #7
 80a0b7c:	21ff      	movs	r1, #255	; 0xff
 80a0b7e:	4620      	mov	r0, r4
 80a0b80:	f7ff fe60 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x81, 0x01);
 80a0b84:	2201      	movs	r2, #1
 80a0b86:	2181      	movs	r1, #129	; 0x81
 80a0b88:	4620      	mov	r0, r4
 80a0b8a:	f7ff fe5b 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a0b8e:	2201      	movs	r2, #1
 80a0b90:	2180      	movs	r1, #128	; 0x80
 80a0b92:	4620      	mov	r0, r4
 80a0b94:	f7ff fe56 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x94, 0x6b);
 80a0b98:	226b      	movs	r2, #107	; 0x6b
 80a0b9a:	2194      	movs	r1, #148	; 0x94
 80a0b9c:	4620      	mov	r0, r4
 80a0b9e:	f7ff fe51 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, 0x00);
 80a0ba2:	2200      	movs	r2, #0
 80a0ba4:	2183      	movs	r1, #131	; 0x83
 80a0ba6:	4620      	mov	r0, r4
 80a0ba8:	f7ff fe4c 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0bac:	f000 fe56 	bl	80a185c <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a0bb0:	60e0      	str	r0, [r4, #12]
  while (readReg(0x83) == 0x00)
 80a0bb2:	2183      	movs	r1, #131	; 0x83
 80a0bb4:	4620      	mov	r0, r4
 80a0bb6:	f7ff feb4 	bl	80a0922 <_ZN7VL53L0X7readRegEh>
 80a0bba:	4605      	mov	r5, r0
 80a0bbc:	b958      	cbnz	r0, 80a0bd6 <_ZN7VL53L0X11getSpadInfoEPhPb+0xa0>
  {
    if (checkTimeoutExpired()) { return false; }
 80a0bbe:	6863      	ldr	r3, [r4, #4]
 80a0bc0:	2b00      	cmp	r3, #0
 80a0bc2:	d0f6      	beq.n	80a0bb2 <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a0bc4:	f000 fe4a 	bl	80a185c <HAL_Timer_Get_Milli_Seconds>
 80a0bc8:	68e3      	ldr	r3, [r4, #12]
 80a0bca:	1ac0      	subs	r0, r0, r3
 80a0bcc:	6863      	ldr	r3, [r4, #4]
 80a0bce:	4298      	cmp	r0, r3
 80a0bd0:	d9ef      	bls.n	80a0bb2 <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a0bd2:	4628      	mov	r0, r5

  writeReg(0xFF, 0x00);
  writeReg(0x80, 0x00);

  return true;
}
 80a0bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  startTimeout();
  while (readReg(0x83) == 0x00)
  {
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
 80a0bd6:	2201      	movs	r2, #1
 80a0bd8:	4620      	mov	r0, r4
 80a0bda:	2183      	movs	r1, #131	; 0x83
 80a0bdc:	f7ff fe32 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  tmp = readReg(0x92);
 80a0be0:	2192      	movs	r1, #146	; 0x92
 80a0be2:	4620      	mov	r0, r4
 80a0be4:	f7ff fe9d 	bl	80a0922 <_ZN7VL53L0X7readRegEh>

  *count = tmp & 0x7f;
 80a0be8:	f000 037f 	and.w	r3, r0, #127	; 0x7f
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a0bec:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
 80a0bf0:	703b      	strb	r3, [r7, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;

  writeReg(0x81, 0x00);
 80a0bf2:	2200      	movs	r2, #0
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a0bf4:	7030      	strb	r0, [r6, #0]

  writeReg(0x81, 0x00);
 80a0bf6:	2181      	movs	r1, #129	; 0x81
 80a0bf8:	4620      	mov	r0, r4
 80a0bfa:	f7ff fe23 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x06);
 80a0bfe:	2206      	movs	r2, #6
 80a0c00:	4620      	mov	r0, r4
 80a0c02:	21ff      	movs	r1, #255	; 0xff
 80a0c04:	f7ff fe1e 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg( 0x83  & ~0x04));
 80a0c08:	2183      	movs	r1, #131	; 0x83
 80a0c0a:	4620      	mov	r0, r4
 80a0c0c:	f7ff fe89 	bl	80a0922 <_ZN7VL53L0X7readRegEh>
 80a0c10:	2183      	movs	r1, #131	; 0x83
 80a0c12:	4602      	mov	r2, r0
 80a0c14:	4620      	mov	r0, r4
 80a0c16:	f7ff fe15 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0c1a:	4620      	mov	r0, r4
 80a0c1c:	2201      	movs	r2, #1
 80a0c1e:	21ff      	movs	r1, #255	; 0xff
 80a0c20:	f7ff fe10 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a0c24:	4620      	mov	r0, r4
 80a0c26:	2201      	movs	r2, #1
 80a0c28:	2100      	movs	r1, #0
 80a0c2a:	f7ff fe0b 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0c2e:	4620      	mov	r0, r4
 80a0c30:	2200      	movs	r2, #0
 80a0c32:	21ff      	movs	r1, #255	; 0xff
 80a0c34:	f7ff fe06 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a0c38:	4620      	mov	r0, r4
 80a0c3a:	2200      	movs	r2, #0
 80a0c3c:	2180      	movs	r1, #128	; 0x80
 80a0c3e:	f7ff fe01 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  return true;
 80a0c42:	2001      	movs	r0, #1
 80a0c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0c46 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>:
}

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X::getSequenceStepEnables(SequenceStepEnables * enables)
{
 80a0c46:	b510      	push	{r4, lr}
 80a0c48:	460c      	mov	r4, r1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 80a0c4a:	2101      	movs	r1, #1
 80a0c4c:	f7ff fe69 	bl	80a0922 <_ZN7VL53L0X7readRegEh>

  enables->tcc          = (sequence_config >> 4) & 0x1;
 80a0c50:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80a0c54:	7023      	strb	r3, [r4, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 80a0c56:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80a0c5a:	70a3      	strb	r3, [r4, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 80a0c5c:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80a0c60:	7063      	strb	r3, [r4, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a0c62:	f3c0 1380 	ubfx	r3, r0, #6, #1
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a0c66:	f3c0 10c0 	ubfx	r0, r0, #7, #1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);

  enables->tcc          = (sequence_config >> 4) & 0x1;
  enables->dss          = (sequence_config >> 3) & 0x1;
  enables->msrc         = (sequence_config >> 2) & 0x1;
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a0c6a:	70e3      	strb	r3, [r4, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a0c6c:	7120      	strb	r0, [r4, #4]
 80a0c6e:	bd10      	pop	{r4, pc}

080a0c70 <_ZN7VL53L0X13decodeTimeoutEm>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X::decodeTimeout(uint32_t reg_val)
{
 80a0c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a0c74:	4298      	cmp	r0, r3
 80a0c76:	bf28      	it	cs
 80a0c78:	4618      	movcs	r0, r3
  if (reg_val > 0xFFFF) reg_val = 0xFFFF;
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80a0c7a:	b2c3      	uxtb	r3, r0
 80a0c7c:	0a00      	lsrs	r0, r0, #8
 80a0c7e:	fa03 f000 	lsl.w	r0, r3, r0
 80a0c82:	3001      	adds	r0, #1
}
 80a0c84:	b280      	uxth	r0, r0
 80a0c86:	4770      	bx	lr

080a0c88 <_ZN7VL53L0X13encodeTimeoutEm>:
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a0c88:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80a0c8c:	d201      	bcs.n	80a0c92 <_ZN7VL53L0X13encodeTimeoutEm+0xa>

  // format: "(LSByte * 2^MSByte) + 1"
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
 80a0c8e:	b178      	cbz	r0, 80a0cb0 <_ZN7VL53L0X13encodeTimeoutEm+0x28>
 80a0c90:	e001      	b.n	80a0c96 <_ZN7VL53L0X13encodeTimeoutEm+0xe>
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a0c92:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;
 80a0c96:	3801      	subs	r0, #1
 80a0c98:	2300      	movs	r3, #0

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a0c9a:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 80a0c9e:	b29a      	uxth	r2, r3
 80a0ca0:	f103 0301 	add.w	r3, r3, #1
 80a0ca4:	d001      	beq.n	80a0caa <_ZN7VL53L0X13encodeTimeoutEm+0x22>
    {
      ls_byte >>= 1;
 80a0ca6:	0840      	lsrs	r0, r0, #1

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a0ca8:	e7f7      	b.n	80a0c9a <_ZN7VL53L0X13encodeTimeoutEm+0x12>
    {
      ls_byte >>= 1;
      ms_byte++;
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 80a0caa:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80a0cae:	b280      	uxth	r0, r0
  }
  else { return 0; }
}
 80a0cb0:	4770      	bx	lr
	...

080a0cb4 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0cb4:	4b08      	ldr	r3, [pc, #32]	; (80a0cd8 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh+0x24>)

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a0cb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0cba:	4359      	muls	r1, r3
}

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80a0cbc:	b510      	push	{r4, lr}
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0cbe:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a0cc2:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 80a0cc6:	fbb1 f3f2 	udiv	r3, r1, r2
 80a0cca:	fbb1 f1f4 	udiv	r1, r1, r4
 80a0cce:	fb00 1003 	mla	r0, r0, r3, r1
}
 80a0cd2:	fbb0 f0f2 	udiv	r0, r0, r2
 80a0cd6:	bd10      	pop	{r4, pc}
 80a0cd8:	003a2f00 	.word	0x003a2f00

080a0cdc <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a0cdc:	b570      	push	{r4, r5, r6, lr}
 80a0cde:	460e      	mov	r6, r1
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0ce0:	2100      	movs	r1, #0
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a0ce2:	4614      	mov	r4, r2
 80a0ce4:	4605      	mov	r5, r0
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0ce6:	f7ff fed7 	bl	80a0a98 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0cea:	2146      	movs	r1, #70	; 0x46
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0cec:	8020      	strh	r0, [r4, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0cee:	4628      	mov	r0, r5
 80a0cf0:	f7ff fe17 	bl	80a0922 <_ZN7VL53L0X7readRegEh>
 80a0cf4:	3001      	adds	r0, #1
 80a0cf6:	b280      	uxth	r0, r0
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a0cf8:	7821      	ldrb	r1, [r4, #0]
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0cfa:	80a0      	strh	r0, [r4, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a0cfc:	f7ff ffda 	bl	80a0cb4 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0d00:	2151      	movs	r1, #81	; 0x51
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a0d02:	60e0      	str	r0, [r4, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0d04:	4628      	mov	r0, r5
 80a0d06:	f7ff fe2c 	bl	80a0962 <_ZN7VL53L0X12readReg16BitEh>
 80a0d0a:	f7ff ffb1 	bl	80a0c70 <_ZN7VL53L0X13decodeTimeoutEm>
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a0d0e:	7821      	ldrb	r1, [r4, #0]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0d10:	80e0      	strh	r0, [r4, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a0d12:	f7ff ffcf 	bl	80a0cb4 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a0d16:	2170      	movs	r1, #112	; 0x70

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a0d18:	6120      	str	r0, [r4, #16]
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a0d1a:	4628      	mov	r0, r5
 80a0d1c:	f7ff fe01 	bl	80a0922 <_ZN7VL53L0X7readRegEh>
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 80a0d20:	3001      	adds	r0, #1
 80a0d22:	0040      	lsls	r0, r0, #1
 80a0d24:	b2c0      	uxtb	r0, r0
 80a0d26:	8060      	strh	r0, [r4, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0d28:	2171      	movs	r1, #113	; 0x71
 80a0d2a:	4628      	mov	r0, r5
 80a0d2c:	f7ff fe19 	bl	80a0962 <_ZN7VL53L0X12readReg16BitEh>
 80a0d30:	f7ff ff9e 	bl	80a0c70 <_ZN7VL53L0X13decodeTimeoutEm>
 80a0d34:	8120      	strh	r0, [r4, #8]

  if (enables->pre_range)
 80a0d36:	78f3      	ldrb	r3, [r6, #3]
 80a0d38:	b113      	cbz	r3, 80a0d40 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE+0x64>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 80a0d3a:	88e3      	ldrh	r3, [r4, #6]
 80a0d3c:	1ac0      	subs	r0, r0, r3
 80a0d3e:	8120      	strh	r0, [r4, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 80a0d40:	78a1      	ldrb	r1, [r4, #2]
 80a0d42:	8920      	ldrh	r0, [r4, #8]
 80a0d44:	f7ff ffb6 	bl	80a0cb4 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->final_range_vcsel_period_pclks);
 80a0d48:	6160      	str	r0, [r4, #20]
 80a0d4a:	bd70      	pop	{r4, r5, r6, pc}

080a0d4c <_ZN7VL53L0X26getMeasurementTimingBudgetEv>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t VL53L0X::getMeasurementTimingBudget(void)
{
 80a0d4c:	b510      	push	{r4, lr}
 80a0d4e:	4604      	mov	r4, r0
 80a0d50:	b088      	sub	sp, #32
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a0d52:	4669      	mov	r1, sp
 80a0d54:	f7ff ff77 	bl	80a0c46 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a0d58:	aa02      	add	r2, sp, #8
 80a0d5a:	4669      	mov	r1, sp
 80a0d5c:	4620      	mov	r0, r4
 80a0d5e:	f7ff ffbd 	bl	80a0cdc <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a0d62:	f89d 3000 	ldrb.w	r3, [sp]
 80a0d66:	b11b      	cbz	r3, 80a0d70 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x24>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a0d68:	9805      	ldr	r0, [sp, #20]
 80a0d6a:	f600 5084 	addw	r0, r0, #3460	; 0xd84
 80a0d6e:	e001      	b.n	80a0d74 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x28>
  uint16_t const DssOverhead        = 690;
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80a0d70:	f640 3036 	movw	r0, #2870	; 0xb36
  if (enables.tcc)
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a0d74:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a0d78:	b12b      	cbz	r3, 80a0d86 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x3a>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a0d7a:	9b05      	ldr	r3, [sp, #20]
 80a0d7c:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a0d80:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a0d84:	e006      	b.n	80a0d94 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  }
  else if (enables.msrc)
 80a0d86:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a0d8a:	b11b      	cbz	r3, 80a0d94 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a0d8c:	9b05      	ldr	r3, [sp, #20]
 80a0d8e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0d92:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a0d94:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80a0d98:	b11b      	cbz	r3, 80a0da2 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x56>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a0d9a:	9b06      	ldr	r3, [sp, #24]
 80a0d9c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0da0:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a0da2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a0da6:	b11b      	cbz	r3, 80a0db0 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x64>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80a0da8:	9b07      	ldr	r3, [sp, #28]
 80a0daa:	f203 2326 	addw	r3, r3, #550	; 0x226
 80a0dae:	4418      	add	r0, r3
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 80a0db0:	6160      	str	r0, [r4, #20]
  return budget_us;
}
 80a0db2:	b008      	add	sp, #32
 80a0db4:	bd10      	pop	{r4, pc}
	...

080a0db8 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0db8:	4b08      	ldr	r3, [pc, #32]	; (80a0ddc <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh+0x24>)

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a0dba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0dbe:	4359      	muls	r1, r3

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a0dc0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0dc4:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a0dc8:	fbb1 f3f3 	udiv	r3, r1, r3
 80a0dcc:	fbb1 f1f2 	udiv	r1, r1, r2
 80a0dd0:	fb02 3000 	mla	r0, r2, r0, r3
}
 80a0dd4:	fbb0 f0f1 	udiv	r0, r0, r1
 80a0dd8:	4770      	bx	lr
 80a0dda:	bf00      	nop
 80a0ddc:	003a2f00 	.word	0x003a2f00

080a0de0 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>:
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0de0:	f644 631f 	movw	r3, #19999	; 0x4e1f
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a0de4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0de6:	4299      	cmp	r1, r3
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a0de8:	b089      	sub	sp, #36	; 0x24
 80a0dea:	4606      	mov	r6, r0
 80a0dec:	460d      	mov	r5, r1
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0dee:	d942      	bls.n	80a0e76 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>

  uint32_t used_budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a0df0:	4669      	mov	r1, sp
 80a0df2:	f7ff ff28 	bl	80a0c46 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a0df6:	aa02      	add	r2, sp, #8
 80a0df8:	4669      	mov	r1, sp
 80a0dfa:	4630      	mov	r0, r6
 80a0dfc:	f7ff ff6e 	bl	80a0cdc <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a0e00:	f89d 3000 	ldrb.w	r3, [sp]
 80a0e04:	b11b      	cbz	r3, 80a0e0e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x2e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a0e06:	9805      	ldr	r0, [sp, #20]
 80a0e08:	f600 3036 	addw	r0, r0, #2870	; 0xb36
 80a0e0c:	e001      	b.n	80a0e12 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x32>

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80a0e0e:	f640 00e8 	movw	r0, #2280	; 0x8e8
  if (enables.tcc)
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a0e12:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a0e16:	b12b      	cbz	r3, 80a0e24 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x44>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a0e18:	9b05      	ldr	r3, [sp, #20]
 80a0e1a:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a0e1e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a0e22:	e006      	b.n	80a0e32 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  }
  else if (enables.msrc)
 80a0e24:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a0e28:	b11b      	cbz	r3, 80a0e32 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a0e2a:	9b05      	ldr	r3, [sp, #20]
 80a0e2c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0e30:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a0e32:	f89d 7003 	ldrb.w	r7, [sp, #3]
 80a0e36:	b11f      	cbz	r7, 80a0e40 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x60>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a0e38:	9b06      	ldr	r3, [sp, #24]
 80a0e3a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0e3e:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a0e40:	f89d 4004 	ldrb.w	r4, [sp, #4]
 80a0e44:	b1ac      	cbz	r4, 80a0e72 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x92>
  {
    used_budget_us += FinalRangeOverhead;
 80a0e46:	f200 2026 	addw	r0, r0, #550	; 0x226
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80a0e4a:	4285      	cmp	r5, r0
 80a0e4c:	d313      	bcc.n	80a0e76 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint32_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80a0e4e:	f89d 100a 	ldrb.w	r1, [sp, #10]
 80a0e52:	1a28      	subs	r0, r5, r0
 80a0e54:	f7ff ffb0 	bl	80a0db8 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>

    if (enables.pre_range)
 80a0e58:	b117      	cbz	r7, 80a0e60 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x80>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80a0e5a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80a0e5e:	4418      	add	r0, r3
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80a0e60:	f7ff ff12 	bl	80a0c88 <_ZN7VL53L0X13encodeTimeoutEm>
      encodeTimeout(final_range_timeout_mclks));
 80a0e64:	2171      	movs	r1, #113	; 0x71
 80a0e66:	4602      	mov	r2, r0
 80a0e68:	4630      	mov	r0, r6
 80a0e6a:	f7ff fd10 	bl	80a088e <_ZN7VL53L0X13writeReg16BitEht>

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 80a0e6e:	6175      	str	r5, [r6, #20]
 80a0e70:	e002      	b.n	80a0e78 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  }
  return true;
 80a0e72:	2401      	movs	r4, #1
 80a0e74:	e000      	b.n	80a0e78 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0e76:	2400      	movs	r4, #0
    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
  }
  return true;
}
 80a0e78:	4620      	mov	r0, r4
 80a0e7a:	b009      	add	sp, #36	; 0x24
 80a0e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0e7e <_ZN7VL53L0X27performSingleRefCalibrationEh>:
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a0e7e:	b538      	push	{r3, r4, r5, lr}
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a0e80:	f041 0201 	orr.w	r2, r1, #1
 80a0e84:	2100      	movs	r1, #0
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a0e86:	4604      	mov	r4, r0
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a0e88:	f7ff fcdc 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
 80a0e8c:	f000 fce6 	bl	80a185c <HAL_Timer_Get_Milli_Seconds>

  startTimeout();
 80a0e90:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a0e92:	2113      	movs	r1, #19
 80a0e94:	4620      	mov	r0, r4
 80a0e96:	f7ff fd44 	bl	80a0922 <_ZN7VL53L0X7readRegEh>
 80a0e9a:	f010 0507 	ands.w	r5, r0, #7
 80a0e9e:	d10b      	bne.n	80a0eb8 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x3a>
  {
    if (checkTimeoutExpired()) { return false; }
 80a0ea0:	6863      	ldr	r3, [r4, #4]
 80a0ea2:	2b00      	cmp	r3, #0
 80a0ea4:	d0f5      	beq.n	80a0e92 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a0ea6:	f000 fcd9 	bl	80a185c <HAL_Timer_Get_Milli_Seconds>
 80a0eaa:	68e3      	ldr	r3, [r4, #12]
 80a0eac:	1ac0      	subs	r0, r0, r3
 80a0eae:	6863      	ldr	r3, [r4, #4]
 80a0eb0:	4298      	cmp	r0, r3
 80a0eb2:	d9ee      	bls.n	80a0e92 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a0eb4:	4628      	mov	r0, r5
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  writeReg(SYSRANGE_START, 0x00);

  return true;
}
 80a0eb6:	bd38      	pop	{r3, r4, r5, pc}
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
  {
    if (checkTimeoutExpired()) { return false; }
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a0eb8:	4620      	mov	r0, r4
 80a0eba:	2201      	movs	r2, #1
 80a0ebc:	210b      	movs	r1, #11
 80a0ebe:	f7ff fcc1 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  writeReg(SYSRANGE_START, 0x00);
 80a0ec2:	2200      	movs	r2, #0
 80a0ec4:	4620      	mov	r0, r4
 80a0ec6:	4611      	mov	r1, r2
 80a0ec8:	f7ff fcbc 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
 80a0ecc:	2001      	movs	r0, #1
 80a0ece:	bd38      	pop	{r3, r4, r5, pc}

080a0ed0 <_ZN7VL53L0X4initEb>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool VL53L0X::init(bool io_2v8)
{
 80a0ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0ed2:	4604      	mov	r4, r0
 80a0ed4:	b085      	sub	sp, #20
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 80a0ed6:	b149      	cbz	r1, 80a0eec <_ZN7VL53L0X4initEb+0x1c>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 80a0ed8:	2189      	movs	r1, #137	; 0x89
 80a0eda:	f7ff fd22 	bl	80a0922 <_ZN7VL53L0X7readRegEh>
 80a0ede:	f040 0201 	orr.w	r2, r0, #1
 80a0ee2:	b2d2      	uxtb	r2, r2
 80a0ee4:	2189      	movs	r1, #137	; 0x89
 80a0ee6:	4620      	mov	r0, r4
 80a0ee8:	f7ff fcac 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 80a0eec:	2200      	movs	r2, #0
 80a0eee:	2188      	movs	r1, #136	; 0x88
 80a0ef0:	4620      	mov	r0, r4
 80a0ef2:	f7ff fca7 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a0ef6:	2201      	movs	r2, #1
 80a0ef8:	2180      	movs	r1, #128	; 0x80
 80a0efa:	4620      	mov	r0, r4
 80a0efc:	f7ff fca2 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0f00:	2201      	movs	r2, #1
 80a0f02:	21ff      	movs	r1, #255	; 0xff
 80a0f04:	4620      	mov	r0, r4
 80a0f06:	f7ff fc9d 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a0f0a:	2200      	movs	r2, #0
 80a0f0c:	4611      	mov	r1, r2
 80a0f0e:	4620      	mov	r0, r4
 80a0f10:	f7ff fc98 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  stop_variable = readReg(0x91);
 80a0f14:	2191      	movs	r1, #145	; 0x91
 80a0f16:	4620      	mov	r0, r4
 80a0f18:	f7ff fd03 	bl	80a0922 <_ZN7VL53L0X7readRegEh>
  writeReg(0x00, 0x01);
 80a0f1c:	2201      	movs	r2, #1
  writeReg(0x88, 0x00);

  writeReg(0x80, 0x01);
  writeReg(0xFF, 0x01);
  writeReg(0x00, 0x00);
  stop_variable = readReg(0x91);
 80a0f1e:	7420      	strb	r0, [r4, #16]
  writeReg(0x00, 0x01);
 80a0f20:	2100      	movs	r1, #0
 80a0f22:	4620      	mov	r0, r4
 80a0f24:	f7ff fc8e 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a0f28:	2200      	movs	r2, #0
 80a0f2a:	21ff      	movs	r1, #255	; 0xff
 80a0f2c:	4620      	mov	r0, r4
 80a0f2e:	f7ff fc89 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a0f32:	2200      	movs	r2, #0
 80a0f34:	2180      	movs	r1, #128	; 0x80
 80a0f36:	4620      	mov	r0, r4
 80a0f38:	f7ff fc84 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80a0f3c:	2160      	movs	r1, #96	; 0x60
 80a0f3e:	4620      	mov	r0, r4
 80a0f40:	f7ff fcef 	bl	80a0922 <_ZN7VL53L0X7readRegEh>
 80a0f44:	f040 0212 	orr.w	r2, r0, #18
 80a0f48:	b2d2      	uxtb	r2, r2
 80a0f4a:	2160      	movs	r1, #96	; 0x60
 80a0f4c:	4620      	mov	r0, r4
 80a0f4e:	f7ff fc79 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80a0f52:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a0f56:	4620      	mov	r0, r4
 80a0f58:	f7ff fd76 	bl	80a0a48 <_ZN7VL53L0X18setSignalRateLimitEf>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80a0f5c:	22ff      	movs	r2, #255	; 0xff
 80a0f5e:	2101      	movs	r1, #1
 80a0f60:	4620      	mov	r0, r4
 80a0f62:	f7ff fc6f 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80a0f66:	f10d 0207 	add.w	r2, sp, #7
 80a0f6a:	f10d 0106 	add.w	r1, sp, #6
 80a0f6e:	4620      	mov	r0, r4
 80a0f70:	f7ff fde1 	bl	80a0b36 <_ZN7VL53L0X11getSpadInfoEPhPb>
 80a0f74:	b908      	cbnz	r0, 80a0f7a <_ZN7VL53L0X4initEb+0xaa>
 80a0f76:	2500      	movs	r5, #0
 80a0f78:	e21d      	b.n	80a13b6 <_ZN7VL53L0X4initEb+0x4e6>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a0f7a:	2306      	movs	r3, #6
 80a0f7c:	aa02      	add	r2, sp, #8
 80a0f7e:	21b0      	movs	r1, #176	; 0xb0
 80a0f80:	4620      	mov	r0, r4
 80a0f82:	f7ff fd37 	bl	80a09f4 <_ZN7VL53L0X9readMultiEhPhh>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 80a0f86:	2201      	movs	r2, #1
 80a0f88:	21ff      	movs	r1, #255	; 0xff
 80a0f8a:	4620      	mov	r0, r4
 80a0f8c:	f7ff fc5a 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80a0f90:	2200      	movs	r2, #0
 80a0f92:	214f      	movs	r1, #79	; 0x4f
 80a0f94:	4620      	mov	r0, r4
 80a0f96:	f7ff fc55 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80a0f9a:	222c      	movs	r2, #44	; 0x2c
 80a0f9c:	214e      	movs	r1, #78	; 0x4e
 80a0f9e:	4620      	mov	r0, r4
 80a0fa0:	f7ff fc50 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a0fa4:	2200      	movs	r2, #0
 80a0fa6:	21ff      	movs	r1, #255	; 0xff
 80a0fa8:	4620      	mov	r0, r4
 80a0faa:	f7ff fc4b 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0fae:	2500      	movs	r5, #0

  writeReg(0xFF, 0x01);
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80a0fb0:	4620      	mov	r0, r4
 80a0fb2:	21b6      	movs	r1, #182	; 0xb6
 80a0fb4:	22b4      	movs	r2, #180	; 0xb4
 80a0fb6:	f7ff fc45 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;
 80a0fba:	4629      	mov	r1, r5
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a0fbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0fc0:	f89d 6006 	ldrb.w	r6, [sp, #6]
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a0fc4:	2b00      	cmp	r3, #0
 80a0fc6:	bf14      	ite	ne
 80a0fc8:	200c      	movne	r0, #12
 80a0fca:	2000      	moveq	r0, #0
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a0fcc:	2701      	movs	r7, #1
 80a0fce:	b2eb      	uxtb	r3, r5
 80a0fd0:	08da      	lsrs	r2, r3, #3
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0fd2:	4298      	cmp	r0, r3
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a0fd4:	f10d 0e10 	add.w	lr, sp, #16
 80a0fd8:	f003 0307 	and.w	r3, r3, #7
 80a0fdc:	4472      	add	r2, lr
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0fde:	d801      	bhi.n	80a0fe4 <_ZN7VL53L0X4initEb+0x114>
 80a0fe0:	428e      	cmp	r6, r1
 80a0fe2:	d108      	bne.n	80a0ff6 <_ZN7VL53L0X4initEb+0x126>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a0fe4:	f812 ec08 	ldrb.w	lr, [r2, #-8]
 80a0fe8:	fa07 f303 	lsl.w	r3, r7, r3
 80a0fec:	ea2e 0303 	bic.w	r3, lr, r3
 80a0ff0:	f802 3c08 	strb.w	r3, [r2, #-8]
 80a0ff4:	e007      	b.n	80a1006 <_ZN7VL53L0X4initEb+0x136>
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 80a0ff6:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80a0ffa:	fa42 f303 	asr.w	r3, r2, r3
 80a0ffe:	07db      	lsls	r3, r3, #31
    {
      spads_enabled++;
 80a1000:	bf44      	itt	mi
 80a1002:	3101      	addmi	r1, #1
 80a1004:	b2c9      	uxtbmi	r1, r1
 80a1006:	3501      	adds	r5, #1
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
 80a1008:	2d30      	cmp	r5, #48	; 0x30
 80a100a:	d1e0      	bne.n	80a0fce <_ZN7VL53L0X4initEb+0xfe>
    {
      spads_enabled++;
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a100c:	2306      	movs	r3, #6
 80a100e:	aa02      	add	r2, sp, #8
 80a1010:	21b0      	movs	r1, #176	; 0xb0
 80a1012:	4620      	mov	r0, r4
 80a1014:	f7ff fccd 	bl	80a09b2 <_ZN7VL53L0X10writeMultiEhPKhh>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 80a1018:	2201      	movs	r2, #1
 80a101a:	21ff      	movs	r1, #255	; 0xff
 80a101c:	4620      	mov	r0, r4
 80a101e:	f7ff fc11 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a1022:	2200      	movs	r2, #0
 80a1024:	4611      	mov	r1, r2
 80a1026:	4620      	mov	r0, r4
 80a1028:	f7ff fc0c 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a102c:	2200      	movs	r2, #0
 80a102e:	21ff      	movs	r1, #255	; 0xff
 80a1030:	4620      	mov	r0, r4
 80a1032:	f7ff fc07 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x09, 0x00);
 80a1036:	2200      	movs	r2, #0
 80a1038:	2109      	movs	r1, #9
 80a103a:	4620      	mov	r0, r4
 80a103c:	f7ff fc02 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x10, 0x00);
 80a1040:	2200      	movs	r2, #0
 80a1042:	2110      	movs	r1, #16
 80a1044:	4620      	mov	r0, r4
 80a1046:	f7ff fbfd 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x11, 0x00);
 80a104a:	2200      	movs	r2, #0
 80a104c:	2111      	movs	r1, #17
 80a104e:	4620      	mov	r0, r4
 80a1050:	f7ff fbf8 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x24, 0x01);
 80a1054:	2201      	movs	r2, #1
 80a1056:	2124      	movs	r1, #36	; 0x24
 80a1058:	4620      	mov	r0, r4
 80a105a:	f7ff fbf3 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x25, 0xFF);
 80a105e:	22ff      	movs	r2, #255	; 0xff
 80a1060:	2125      	movs	r1, #37	; 0x25
 80a1062:	4620      	mov	r0, r4
 80a1064:	f7ff fbee 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x75, 0x00);
 80a1068:	2200      	movs	r2, #0
 80a106a:	2175      	movs	r1, #117	; 0x75
 80a106c:	4620      	mov	r0, r4
 80a106e:	f7ff fbe9 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1072:	2201      	movs	r2, #1
 80a1074:	21ff      	movs	r1, #255	; 0xff
 80a1076:	4620      	mov	r0, r4
 80a1078:	f7ff fbe4 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4E, 0x2C);
 80a107c:	222c      	movs	r2, #44	; 0x2c
 80a107e:	214e      	movs	r1, #78	; 0x4e
 80a1080:	4620      	mov	r0, r4
 80a1082:	f7ff fbdf 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x00);
 80a1086:	2200      	movs	r2, #0
 80a1088:	2148      	movs	r1, #72	; 0x48
 80a108a:	4620      	mov	r0, r4
 80a108c:	f7ff fbda 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x20);
 80a1090:	2220      	movs	r2, #32
 80a1092:	4629      	mov	r1, r5
 80a1094:	4620      	mov	r0, r4
 80a1096:	f7ff fbd5 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a109a:	2200      	movs	r2, #0
 80a109c:	21ff      	movs	r1, #255	; 0xff
 80a109e:	4620      	mov	r0, r4
 80a10a0:	f7ff fbd0 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x09);
 80a10a4:	2209      	movs	r2, #9
 80a10a6:	4629      	mov	r1, r5
 80a10a8:	4620      	mov	r0, r4
 80a10aa:	f7ff fbcb 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x54, 0x00);
 80a10ae:	2200      	movs	r2, #0
 80a10b0:	2154      	movs	r1, #84	; 0x54
 80a10b2:	4620      	mov	r0, r4
 80a10b4:	f7ff fbc6 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a10b8:	2204      	movs	r2, #4
 80a10ba:	2131      	movs	r1, #49	; 0x31
 80a10bc:	4620      	mov	r0, r4
 80a10be:	f7ff fbc1 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x32, 0x03);
 80a10c2:	2203      	movs	r2, #3
 80a10c4:	2132      	movs	r1, #50	; 0x32
 80a10c6:	4620      	mov	r0, r4
 80a10c8:	f7ff fbbc 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x83);
 80a10cc:	2283      	movs	r2, #131	; 0x83
 80a10ce:	2140      	movs	r1, #64	; 0x40
 80a10d0:	4620      	mov	r0, r4
 80a10d2:	f7ff fbb7 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x25);
 80a10d6:	2225      	movs	r2, #37	; 0x25
 80a10d8:	2146      	movs	r1, #70	; 0x46
 80a10da:	4620      	mov	r0, r4
 80a10dc:	f7ff fbb2 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x60, 0x00);
 80a10e0:	2200      	movs	r2, #0
 80a10e2:	2160      	movs	r1, #96	; 0x60
 80a10e4:	4620      	mov	r0, r4
 80a10e6:	f7ff fbad 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x27, 0x00);
 80a10ea:	2200      	movs	r2, #0
 80a10ec:	2127      	movs	r1, #39	; 0x27
 80a10ee:	4620      	mov	r0, r4
 80a10f0:	f7ff fba8 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x50, 0x06);
 80a10f4:	2206      	movs	r2, #6
 80a10f6:	2150      	movs	r1, #80	; 0x50
 80a10f8:	4620      	mov	r0, r4
 80a10fa:	f7ff fba3 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x51, 0x00);
 80a10fe:	2200      	movs	r2, #0
 80a1100:	2151      	movs	r1, #81	; 0x51
 80a1102:	4620      	mov	r0, r4
 80a1104:	f7ff fb9e 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x52, 0x96);
 80a1108:	2296      	movs	r2, #150	; 0x96
 80a110a:	2152      	movs	r1, #82	; 0x52
 80a110c:	4620      	mov	r0, r4
 80a110e:	f7ff fb99 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x56, 0x08);
 80a1112:	2208      	movs	r2, #8
 80a1114:	2156      	movs	r1, #86	; 0x56
 80a1116:	4620      	mov	r0, r4
 80a1118:	f7ff fb94 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x57, 0x30);
 80a111c:	462a      	mov	r2, r5
 80a111e:	2157      	movs	r1, #87	; 0x57
 80a1120:	4620      	mov	r0, r4
 80a1122:	f7ff fb8f 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x61, 0x00);
 80a1126:	2200      	movs	r2, #0
 80a1128:	2161      	movs	r1, #97	; 0x61
 80a112a:	4620      	mov	r0, r4
 80a112c:	f7ff fb8a 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x62, 0x00);
 80a1130:	2200      	movs	r2, #0
 80a1132:	2162      	movs	r1, #98	; 0x62
 80a1134:	4620      	mov	r0, r4
 80a1136:	f7ff fb85 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x64, 0x00);
 80a113a:	2200      	movs	r2, #0
 80a113c:	2164      	movs	r1, #100	; 0x64
 80a113e:	4620      	mov	r0, r4
 80a1140:	f7ff fb80 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x65, 0x00);
 80a1144:	2200      	movs	r2, #0
 80a1146:	2165      	movs	r1, #101	; 0x65
 80a1148:	4620      	mov	r0, r4
 80a114a:	f7ff fb7b 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x66, 0xA0);
 80a114e:	22a0      	movs	r2, #160	; 0xa0
 80a1150:	2166      	movs	r1, #102	; 0x66
 80a1152:	4620      	mov	r0, r4
 80a1154:	f7ff fb76 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1158:	2201      	movs	r2, #1
 80a115a:	21ff      	movs	r1, #255	; 0xff
 80a115c:	4620      	mov	r0, r4
 80a115e:	f7ff fb71 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x22, 0x32);
 80a1162:	2232      	movs	r2, #50	; 0x32
 80a1164:	2122      	movs	r1, #34	; 0x22
 80a1166:	4620      	mov	r0, r4
 80a1168:	f7ff fb6c 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x14);
 80a116c:	2214      	movs	r2, #20
 80a116e:	2147      	movs	r1, #71	; 0x47
 80a1170:	4620      	mov	r0, r4
 80a1172:	f7ff fb67 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x49, 0xFF);
 80a1176:	22ff      	movs	r2, #255	; 0xff
 80a1178:	2149      	movs	r1, #73	; 0x49
 80a117a:	4620      	mov	r0, r4
 80a117c:	f7ff fb62 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4A, 0x00);
 80a1180:	2200      	movs	r2, #0
 80a1182:	214a      	movs	r1, #74	; 0x4a
 80a1184:	4620      	mov	r0, r4
 80a1186:	f7ff fb5d 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a118a:	2200      	movs	r2, #0
 80a118c:	21ff      	movs	r1, #255	; 0xff
 80a118e:	4620      	mov	r0, r4
 80a1190:	f7ff fb58 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7A, 0x0A);
 80a1194:	220a      	movs	r2, #10
 80a1196:	217a      	movs	r1, #122	; 0x7a
 80a1198:	4620      	mov	r0, r4
 80a119a:	f7ff fb53 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7B, 0x00);
 80a119e:	2200      	movs	r2, #0
 80a11a0:	217b      	movs	r1, #123	; 0x7b
 80a11a2:	4620      	mov	r0, r4
 80a11a4:	f7ff fb4e 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x78, 0x21);
 80a11a8:	2221      	movs	r2, #33	; 0x21
 80a11aa:	2178      	movs	r1, #120	; 0x78
 80a11ac:	4620      	mov	r0, r4
 80a11ae:	f7ff fb49 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a11b2:	2201      	movs	r2, #1
 80a11b4:	21ff      	movs	r1, #255	; 0xff
 80a11b6:	4620      	mov	r0, r4
 80a11b8:	f7ff fb44 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x23, 0x34);
 80a11bc:	2234      	movs	r2, #52	; 0x34
 80a11be:	2123      	movs	r1, #35	; 0x23
 80a11c0:	4620      	mov	r0, r4
 80a11c2:	f7ff fb3f 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x42, 0x00);
 80a11c6:	2200      	movs	r2, #0
 80a11c8:	2142      	movs	r1, #66	; 0x42
 80a11ca:	4620      	mov	r0, r4
 80a11cc:	f7ff fb3a 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0xFF);
 80a11d0:	22ff      	movs	r2, #255	; 0xff
 80a11d2:	2144      	movs	r1, #68	; 0x44
 80a11d4:	4620      	mov	r0, r4
 80a11d6:	f7ff fb35 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x26);
 80a11da:	2226      	movs	r2, #38	; 0x26
 80a11dc:	2145      	movs	r1, #69	; 0x45
 80a11de:	4620      	mov	r0, r4
 80a11e0:	f7ff fb30 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x05);
 80a11e4:	2205      	movs	r2, #5
 80a11e6:	2146      	movs	r1, #70	; 0x46
 80a11e8:	4620      	mov	r0, r4
 80a11ea:	f7ff fb2b 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x40);
 80a11ee:	2240      	movs	r2, #64	; 0x40
 80a11f0:	4611      	mov	r1, r2
 80a11f2:	4620      	mov	r0, r4
 80a11f4:	f7ff fb26 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0E, 0x06);
 80a11f8:	2206      	movs	r2, #6
 80a11fa:	210e      	movs	r1, #14
 80a11fc:	4620      	mov	r0, r4
 80a11fe:	f7ff fb21 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x20, 0x1A);
 80a1202:	221a      	movs	r2, #26
 80a1204:	2120      	movs	r1, #32
 80a1206:	4620      	mov	r0, r4
 80a1208:	f7ff fb1c 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x43, 0x40);
 80a120c:	2240      	movs	r2, #64	; 0x40
 80a120e:	2143      	movs	r1, #67	; 0x43
 80a1210:	4620      	mov	r0, r4
 80a1212:	f7ff fb17 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1216:	2200      	movs	r2, #0
 80a1218:	21ff      	movs	r1, #255	; 0xff
 80a121a:	4620      	mov	r0, r4
 80a121c:	f7ff fb12 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x34, 0x03);
 80a1220:	2203      	movs	r2, #3
 80a1222:	2134      	movs	r1, #52	; 0x34
 80a1224:	4620      	mov	r0, r4
 80a1226:	f7ff fb0d 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x35, 0x44);
 80a122a:	2244      	movs	r2, #68	; 0x44
 80a122c:	2135      	movs	r1, #53	; 0x35
 80a122e:	4620      	mov	r0, r4
 80a1230:	f7ff fb08 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1234:	2201      	movs	r2, #1
 80a1236:	21ff      	movs	r1, #255	; 0xff
 80a1238:	4620      	mov	r0, r4
 80a123a:	f7ff fb03 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a123e:	2204      	movs	r2, #4
 80a1240:	2131      	movs	r1, #49	; 0x31
 80a1242:	4620      	mov	r0, r4
 80a1244:	f7ff fafe 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4B, 0x09);
 80a1248:	2209      	movs	r2, #9
 80a124a:	214b      	movs	r1, #75	; 0x4b
 80a124c:	4620      	mov	r0, r4
 80a124e:	f7ff faf9 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4C, 0x05);
 80a1252:	2205      	movs	r2, #5
 80a1254:	214c      	movs	r1, #76	; 0x4c
 80a1256:	4620      	mov	r0, r4
 80a1258:	f7ff faf4 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4D, 0x04);
 80a125c:	2204      	movs	r2, #4
 80a125e:	214d      	movs	r1, #77	; 0x4d
 80a1260:	4620      	mov	r0, r4
 80a1262:	f7ff faef 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1266:	2200      	movs	r2, #0
 80a1268:	21ff      	movs	r1, #255	; 0xff
 80a126a:	4620      	mov	r0, r4
 80a126c:	f7ff faea 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0x00);
 80a1270:	2200      	movs	r2, #0
 80a1272:	2144      	movs	r1, #68	; 0x44
 80a1274:	4620      	mov	r0, r4
 80a1276:	f7ff fae5 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x20);
 80a127a:	2220      	movs	r2, #32
 80a127c:	2145      	movs	r1, #69	; 0x45
 80a127e:	4620      	mov	r0, r4
 80a1280:	f7ff fae0 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x08);
 80a1284:	2208      	movs	r2, #8
 80a1286:	2147      	movs	r1, #71	; 0x47
 80a1288:	4620      	mov	r0, r4
 80a128a:	f7ff fadb 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x28);
 80a128e:	2228      	movs	r2, #40	; 0x28
 80a1290:	2148      	movs	r1, #72	; 0x48
 80a1292:	4620      	mov	r0, r4
 80a1294:	f7ff fad6 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x67, 0x00);
 80a1298:	2200      	movs	r2, #0
 80a129a:	2167      	movs	r1, #103	; 0x67
 80a129c:	4620      	mov	r0, r4
 80a129e:	f7ff fad1 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x70, 0x04);
 80a12a2:	2204      	movs	r2, #4
 80a12a4:	2170      	movs	r1, #112	; 0x70
 80a12a6:	4620      	mov	r0, r4
 80a12a8:	f7ff facc 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x71, 0x01);
 80a12ac:	2201      	movs	r2, #1
 80a12ae:	2171      	movs	r1, #113	; 0x71
 80a12b0:	4620      	mov	r0, r4
 80a12b2:	f7ff fac7 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x72, 0xFE);
 80a12b6:	22fe      	movs	r2, #254	; 0xfe
 80a12b8:	2172      	movs	r1, #114	; 0x72
 80a12ba:	4620      	mov	r0, r4
 80a12bc:	f7ff fac2 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x76, 0x00);
 80a12c0:	2200      	movs	r2, #0
 80a12c2:	2176      	movs	r1, #118	; 0x76
 80a12c4:	4620      	mov	r0, r4
 80a12c6:	f7ff fabd 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x77, 0x00);
 80a12ca:	2200      	movs	r2, #0
 80a12cc:	2177      	movs	r1, #119	; 0x77
 80a12ce:	4620      	mov	r0, r4
 80a12d0:	f7ff fab8 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a12d4:	2201      	movs	r2, #1
 80a12d6:	21ff      	movs	r1, #255	; 0xff
 80a12d8:	4620      	mov	r0, r4
 80a12da:	f7ff fab3 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0D, 0x01);
 80a12de:	2201      	movs	r2, #1
 80a12e0:	210d      	movs	r1, #13
 80a12e2:	4620      	mov	r0, r4
 80a12e4:	f7ff faae 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a12e8:	2200      	movs	r2, #0
 80a12ea:	21ff      	movs	r1, #255	; 0xff
 80a12ec:	4620      	mov	r0, r4
 80a12ee:	f7ff faa9 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x01);
 80a12f2:	2201      	movs	r2, #1
 80a12f4:	2180      	movs	r1, #128	; 0x80
 80a12f6:	4620      	mov	r0, r4
 80a12f8:	f7ff faa4 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x01, 0xF8);
 80a12fc:	22f8      	movs	r2, #248	; 0xf8
 80a12fe:	2101      	movs	r1, #1
 80a1300:	4620      	mov	r0, r4
 80a1302:	f7ff fa9f 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1306:	2201      	movs	r2, #1
 80a1308:	21ff      	movs	r1, #255	; 0xff
 80a130a:	4620      	mov	r0, r4
 80a130c:	f7ff fa9a 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x8E, 0x01);
 80a1310:	2201      	movs	r2, #1
 80a1312:	218e      	movs	r1, #142	; 0x8e
 80a1314:	4620      	mov	r0, r4
 80a1316:	f7ff fa95 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a131a:	2201      	movs	r2, #1
 80a131c:	2100      	movs	r1, #0
 80a131e:	4620      	mov	r0, r4
 80a1320:	f7ff fa90 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1324:	2200      	movs	r2, #0
 80a1326:	21ff      	movs	r1, #255	; 0xff
 80a1328:	4620      	mov	r0, r4
 80a132a:	f7ff fa8b 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a132e:	2200      	movs	r2, #0
 80a1330:	2180      	movs	r1, #128	; 0x80
 80a1332:	4620      	mov	r0, r4
 80a1334:	f7ff fa86 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80a1338:	2204      	movs	r2, #4
 80a133a:	210a      	movs	r1, #10
 80a133c:	4620      	mov	r0, r4
 80a133e:	f7ff fa81 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80a1342:	2184      	movs	r1, #132	; 0x84
 80a1344:	4620      	mov	r0, r4
 80a1346:	f7ff faec 	bl	80a0922 <_ZN7VL53L0X7readRegEh>
 80a134a:	2184      	movs	r1, #132	; 0x84
 80a134c:	f000 02ef 	and.w	r2, r0, #239	; 0xef
 80a1350:	4620      	mov	r0, r4
 80a1352:	f7ff fa77 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a1356:	2201      	movs	r2, #1
 80a1358:	210b      	movs	r1, #11
 80a135a:	4620      	mov	r0, r4
 80a135c:	f7ff fa72 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a1360:	4620      	mov	r0, r4
 80a1362:	f7ff fcf3 	bl	80a0d4c <_ZN7VL53L0X26getMeasurementTimingBudgetEv>
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a1366:	22e8      	movs	r2, #232	; 0xe8
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a1368:	6160      	str	r0, [r4, #20]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a136a:	2101      	movs	r1, #1
 80a136c:	4620      	mov	r0, r4
 80a136e:	f7ff fa69 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(measurement_timing_budget_us);
 80a1372:	6961      	ldr	r1, [r4, #20]
 80a1374:	4620      	mov	r0, r4
 80a1376:	f7ff fd33 	bl	80a0de0 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80a137a:	2201      	movs	r2, #1
 80a137c:	4611      	mov	r1, r2
 80a137e:	4620      	mov	r0, r4
 80a1380:	f7ff fa60 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x40)) { return false; }
 80a1384:	2140      	movs	r1, #64	; 0x40
 80a1386:	4620      	mov	r0, r4
 80a1388:	f7ff fd79 	bl	80a0e7e <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a138c:	2800      	cmp	r0, #0
 80a138e:	f43f adf2 	beq.w	80a0f76 <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80a1392:	2202      	movs	r2, #2
 80a1394:	2101      	movs	r1, #1
 80a1396:	4620      	mov	r0, r4
 80a1398:	f7ff fa54 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x00)) { return false; }
 80a139c:	2100      	movs	r1, #0
 80a139e:	4620      	mov	r0, r4
 80a13a0:	f7ff fd6d 	bl	80a0e7e <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a13a4:	4605      	mov	r5, r0
 80a13a6:	2800      	cmp	r0, #0
 80a13a8:	f43f ade5 	beq.w	80a0f76 <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a13ac:	22e8      	movs	r2, #232	; 0xe8
 80a13ae:	2101      	movs	r1, #1
 80a13b0:	4620      	mov	r0, r4
 80a13b2:	f7ff fa47 	bl	80a0844 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_PerformRefCalibration() end

  return true;
}
 80a13b6:	4628      	mov	r0, r5
 80a13b8:	b005      	add	sp, #20
 80a13ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a13bc <_GLOBAL__sub_I__ZN7VL53L0XC2Ev>:
 80a13bc:	f000 b9f6 	b.w	80a17ac <HAL_Pin_Map>

080a13c0 <_ZN9LIS3DHI2CD1Ev>:

}

LIS3DHI2C::~LIS3DHI2C() {

}
 80a13c0:	4770      	bx	lr

080a13c2 <_ZN9LIS3DHI2CD0Ev>:

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {

}

LIS3DHI2C::~LIS3DHI2C() {
 80a13c2:	b510      	push	{r4, lr}
 80a13c4:	4604      	mov	r4, r0

}
 80a13c6:	f7fe fe6a 	bl	80a009e <_ZdlPv>
 80a13ca:	4620      	mov	r0, r4
 80a13cc:	bd10      	pop	{r4, pc}

080a13ce <_ZN9LIS3DHI2C9writeDataEhPKhj>:
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a13ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a13d0:	4605      	mov	r5, r0
 80a13d2:	461e      	mov	r6, r3
 80a13d4:	460f      	mov	r7, r1

	wire.beginTransmission(getI2CAddr());
 80a13d6:	7c01      	ldrb	r1, [r0, #16]
 80a13d8:	68c0      	ldr	r0, [r0, #12]
 80a13da:	f041 0118 	orr.w	r1, r1, #24
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a13de:	4614      	mov	r4, r2

	wire.beginTransmission(getI2CAddr());
 80a13e0:	f001 fa15 	bl	80a280e <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a13e4:	68e8      	ldr	r0, [r5, #12]

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a13e6:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a13e8:	6803      	ldr	r3, [r0, #0]
bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a13ea:	bf88      	it	hi
 80a13ec:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a13f0:	689b      	ldr	r3, [r3, #8]
 80a13f2:	4639      	mov	r1, r7
 80a13f4:	4798      	blx	r3
 80a13f6:	4426      	add	r6, r4
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a13f8:	42a6      	cmp	r6, r4
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a13fa:	68e8      	ldr	r0, [r5, #12]

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a13fc:	d005      	beq.n	80a140a <_ZN9LIS3DHI2C9writeDataEhPKhj+0x3c>
		wire.write(buf[ii]);
 80a13fe:	6803      	ldr	r3, [r0, #0]
 80a1400:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1404:	689b      	ldr	r3, [r3, #8]
 80a1406:	4798      	blx	r3

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a1408:	e7f6      	b.n	80a13f8 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x2a>
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a140a:	f001 fa08 	bl	80a281e <_ZN7TwoWire15endTransmissionEv>

	return (res == 0);
}
 80a140e:	fab0 f080 	clz	r0, r0
 80a1412:	0940      	lsrs	r0, r0, #5
 80a1414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1416 <_ZN9LIS3DHI2C8readDataEhPhj>:

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a1416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1418:	4604      	mov	r4, r0
 80a141a:	461e      	mov	r6, r3
 80a141c:	460f      	mov	r7, r1
	wire.beginTransmission(getI2CAddr());
 80a141e:	7c01      	ldrb	r1, [r0, #16]
 80a1420:	68c0      	ldr	r0, [r0, #12]
 80a1422:	f041 0118 	orr.w	r1, r1, #24

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a1426:	4615      	mov	r5, r2
	wire.beginTransmission(getI2CAddr());
 80a1428:	f001 f9f1 	bl	80a280e <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a142c:	68e0      	ldr	r0, [r4, #12]
}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a142e:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a1430:	6803      	ldr	r3, [r0, #0]

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a1432:	bf88      	it	hi
 80a1434:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a1438:	689b      	ldr	r3, [r3, #8]
 80a143a:	4639      	mov	r1, r7
 80a143c:	4798      	blx	r3

	uint8_t res = wire.endTransmission();
 80a143e:	68e0      	ldr	r0, [r4, #12]
 80a1440:	f001 f9ed 	bl	80a281e <_ZN7TwoWire15endTransmissionEv>
	if (res != 0) {
 80a1444:	b9a8      	cbnz	r0, 80a1472 <_ZN9LIS3DHI2C8readDataEhPhj+0x5c>
		return false;
	}

	wire.requestFrom((int)getI2CAddr(), numBytes);
 80a1446:	7c21      	ldrb	r1, [r4, #16]
 80a1448:	4632      	mov	r2, r6
 80a144a:	f041 0118 	orr.w	r1, r1, #24
 80a144e:	68e0      	ldr	r0, [r4, #12]
 80a1450:	f001 f9d8 	bl	80a2804 <_ZN7TwoWire11requestFromEii>
 80a1454:	442e      	add	r6, r5
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
 80a1456:	42ae      	cmp	r6, r5
 80a1458:	d00d      	beq.n	80a1476 <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
 80a145a:	68e0      	ldr	r0, [r4, #12]
 80a145c:	6803      	ldr	r3, [r0, #0]
 80a145e:	691b      	ldr	r3, [r3, #16]
 80a1460:	4798      	blx	r3
 80a1462:	b140      	cbz	r0, 80a1476 <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
		buf[ii] = wire.read();
 80a1464:	68e0      	ldr	r0, [r4, #12]
 80a1466:	6803      	ldr	r3, [r0, #0]
 80a1468:	695b      	ldr	r3, [r3, #20]
 80a146a:	4798      	blx	r3
 80a146c:	f805 0b01 	strb.w	r0, [r5], #1
 80a1470:	e7f1      	b.n	80a1456 <_ZN9LIS3DHI2C8readDataEhPhj+0x40>
	}
	wire.write(addr);

	uint8_t res = wire.endTransmission();
	if (res != 0) {
		return false;
 80a1472:	2000      	movs	r0, #0
 80a1474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1476:	2001      	movs	r0, #1
	wire.requestFrom((int)getI2CAddr(), numBytes);
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
		buf[ii] = wire.read();
	}
	return true;
}
 80a1478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a147a <_ZN12LIS3DHConfigC1Ev>:
#include "LIS3DH.h"

// Official project location:
// https://github.com/rickkas7/LIS3DH

LIS3DHConfig::LIS3DHConfig() {
 80a147a:	2200      	movs	r2, #0
 80a147c:	7002      	strb	r2, [r0, #0]
 80a147e:	7042      	strb	r2, [r0, #1]
 80a1480:	7082      	strb	r2, [r0, #2]
 80a1482:	70c2      	strb	r2, [r0, #3]
 80a1484:	7102      	strb	r2, [r0, #4]
 80a1486:	7142      	strb	r2, [r0, #5]
 80a1488:	7182      	strb	r2, [r0, #6]
 80a148a:	71c2      	strb	r2, [r0, #7]
 80a148c:	7202      	strb	r2, [r0, #8]
 80a148e:	7242      	strb	r2, [r0, #9]
 80a1490:	7282      	strb	r2, [r0, #10]
}
 80a1492:	4770      	bx	lr

080a1494 <_ZN12LIS3DHConfig12setAccelModeEh>:
}

LIS3DHConfig &LIS3DHConfig::setAccelMode(uint8_t rate) {

	// Enable specified rate, with XYZ detection enabled
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
 80a1494:	f041 0107 	orr.w	r1, r1, #7
 80a1498:	7001      	strb	r1, [r0, #0]

	return *this;
}
 80a149a:	4770      	bx	lr

080a149c <_ZN6LIS3DH13readRegister8Eh>:

	return pos;
}


uint8_t LIS3DH::readRegister8(uint8_t addr) {
 80a149c:	b513      	push	{r0, r1, r4, lr}

	uint8_t resp[1];
	readData(addr, resp, sizeof(resp));
 80a149e:	6803      	ldr	r3, [r0, #0]
 80a14a0:	aa01      	add	r2, sp, #4
 80a14a2:	689c      	ldr	r4, [r3, #8]
 80a14a4:	2301      	movs	r3, #1
 80a14a6:	47a0      	blx	r4

	return resp[0];
}
 80a14a8:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80a14ac:	b002      	add	sp, #8
 80a14ae:	bd10      	pop	{r4, pc}

080a14b0 <_ZN6LIS3DH9hasDeviceEv>:
LIS3DH::~LIS3DH() {

}


bool LIS3DH::hasDevice() {
 80a14b0:	b538      	push	{r3, r4, r5, lr}
 80a14b2:	4605      	mov	r5, r0
 80a14b4:	240a      	movs	r4, #10
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
 80a14b6:	210f      	movs	r1, #15
 80a14b8:	4628      	mov	r0, r5
 80a14ba:	f7ff ffef 	bl	80a149c <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
 80a14be:	2833      	cmp	r0, #51	; 0x33
			found = true;
 80a14c0:	f04f 0001 	mov.w	r0, #1

bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
		if (whoami == WHO_AM_I) {
 80a14c4:	d005      	beq.n	80a14d2 <_ZN6LIS3DH9hasDeviceEv+0x22>
			found = true;
			break;
		}
		delay(1);
 80a14c6:	f000 fc9d 	bl	80a1e04 <delay>
}


bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
 80a14ca:	3c01      	subs	r4, #1
 80a14cc:	d1f3      	bne.n	80a14b6 <_ZN6LIS3DH9hasDeviceEv+0x6>

}


bool LIS3DH::hasDevice() {
	bool found = false;
 80a14ce:	4620      	mov	r0, r4
 80a14d0:	bd38      	pop	{r3, r4, r5, pc}
			break;
		}
		delay(1);
	}
	return found;
}
 80a14d2:	bd38      	pop	{r3, r4, r5, pc}

080a14d4 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a14d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a14d6:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a14d8:	2107      	movs	r1, #7

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a14da:	4606      	mov	r6, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a14dc:	f7ff ffde 	bl	80a149c <_ZN6LIS3DH13readRegister8Eh>
 80a14e0:	f000 0008 	and.w	r0, r0, #8

	bool hasData = ((statusAuxReg & STATUS_AUX_321DA) != 0);
 80a14e4:	2800      	cmp	r0, #0
 80a14e6:	bf14      	ite	ne
 80a14e8:	2501      	movne	r5, #1
 80a14ea:	2500      	moveq	r5, #0

	//Serial.printlnf("fifoSrcReg=0x%02x", fifoSrcReg);

	if (hasData) {
 80a14ec:	d01b      	beq.n	80a1526 <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x52>
		uint8_t resp[6];
		readData(REG_OUT_X_L, resp, sizeof(resp));
 80a14ee:	6833      	ldr	r3, [r6, #0]
 80a14f0:	466a      	mov	r2, sp
 80a14f2:	689f      	ldr	r7, [r3, #8]
 80a14f4:	2128      	movs	r1, #40	; 0x28
 80a14f6:	2306      	movs	r3, #6
 80a14f8:	4630      	mov	r0, r6
 80a14fa:	47b8      	blx	r7

		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
 80a14fc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a1500:	f89d 3000 	ldrb.w	r3, [sp]
 80a1504:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1508:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
 80a150a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a150e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a1512:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1516:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
 80a1518:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a151c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a1520:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1524:	80a3      	strh	r3, [r4, #4]
	}
	return hasData;
}
 80a1526:	4628      	mov	r0, r5
 80a1528:	b003      	add	sp, #12
 80a152a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a152c <_ZN6LIS3DH14writeRegister8Ehh>:

	return resp[0] | (((uint16_t)resp[1]) << 8);
}


void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
 80a152c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a152e:	ac02      	add	r4, sp, #8

	writeData(addr, req, sizeof(req));
 80a1530:	6803      	ldr	r3, [r0, #0]

void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a1532:	f804 2d04 	strb.w	r2, [r4, #-4]!

	writeData(addr, req, sizeof(req));
 80a1536:	68dd      	ldr	r5, [r3, #12]
 80a1538:	4622      	mov	r2, r4
 80a153a:	2301      	movs	r3, #1
 80a153c:	47a8      	blx	r5
}
 80a153e:	b003      	add	sp, #12
 80a1540:	bd30      	pop	{r4, r5, pc}
	...

080a1544 <_ZN6LIS3DH5setupER12LIS3DHConfig>:
		delay(1);
	}
	return found;
}

bool LIS3DH::setup(LIS3DHConfig &config) {
 80a1544:	b570      	push	{r4, r5, r6, lr}
 80a1546:	4604      	mov	r4, r0
 80a1548:	460d      	mov	r5, r1

	if (!hasDevice()) {
 80a154a:	f7ff ffb1 	bl	80a14b0 <_ZN6LIS3DH9hasDeviceEv>
 80a154e:	4606      	mov	r6, r0
 80a1550:	b928      	cbnz	r0, 80a155e <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		Serial.println("device not found");
 80a1552:	f000 fffd 	bl	80a2550 <_Z16_fetch_usbserialv>
 80a1556:	4928      	ldr	r1, [pc, #160]	; (80a15f8 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
 80a1558:	f000 fbb4 	bl	80a1cc4 <_ZN5Print7printlnEPKc>
		return false;
 80a155c:	e049      	b.n	80a15f2 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
	}

	writeRegister8(REG_CTRL_REG1, config.reg1);
 80a155e:	782a      	ldrb	r2, [r5, #0]
 80a1560:	2120      	movs	r1, #32
 80a1562:	4620      	mov	r0, r4
 80a1564:	f7ff ffe2 	bl	80a152c <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
 80a1568:	786a      	ldrb	r2, [r5, #1]
 80a156a:	2121      	movs	r1, #33	; 0x21
 80a156c:	4620      	mov	r0, r4
 80a156e:	f7ff ffdd 	bl	80a152c <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
 80a1572:	78aa      	ldrb	r2, [r5, #2]
 80a1574:	2122      	movs	r1, #34	; 0x22
 80a1576:	4620      	mov	r0, r4
 80a1578:	f7ff ffd8 	bl	80a152c <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
 80a157c:	78ea      	ldrb	r2, [r5, #3]
 80a157e:	2123      	movs	r1, #35	; 0x23
 80a1580:	4620      	mov	r0, r4
 80a1582:	f7ff ffd3 	bl	80a152c <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
 80a1586:	792a      	ldrb	r2, [r5, #4]
 80a1588:	2124      	movs	r1, #36	; 0x24
 80a158a:	4620      	mov	r0, r4
 80a158c:	f7ff ffce 	bl	80a152c <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
 80a1590:	796a      	ldrb	r2, [r5, #5]
 80a1592:	2125      	movs	r1, #37	; 0x25
 80a1594:	4620      	mov	r0, r4
 80a1596:	f7ff ffc9 	bl	80a152c <_ZN6LIS3DH14writeRegister8Ehh>

	if (config.setReference) {
 80a159a:	79ab      	ldrb	r3, [r5, #6]
 80a159c:	b11b      	cbz	r3, 80a15a6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x62>
		// In normal mode, reading the reference register sets it for the current normal force
		// (the normal force of gravity acting on the device)
		readRegister8(REG_REFERENCE);
 80a159e:	2126      	movs	r1, #38	; 0x26
 80a15a0:	4620      	mov	r0, r4
 80a15a2:	f7ff ff7b 	bl	80a149c <_ZN6LIS3DH13readRegister8Eh>
	}
	// Set FIFO mode
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
 80a15a6:	7aaa      	ldrb	r2, [r5, #10]
 80a15a8:	212e      	movs	r1, #46	; 0x2e
 80a15aa:	4620      	mov	r0, r4
 80a15ac:	f7ff ffbe 	bl	80a152c <_ZN6LIS3DH14writeRegister8Ehh>



	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
 80a15b0:	78ab      	ldrb	r3, [r5, #2]
 80a15b2:	065b      	lsls	r3, r3, #25
 80a15b4:	d51d      	bpl.n	80a15f2 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>

		writeRegister8(REG_INT1_THS, config.int1_ths);
 80a15b6:	79ea      	ldrb	r2, [r5, #7]
 80a15b8:	2132      	movs	r1, #50	; 0x32
 80a15ba:	4620      	mov	r0, r4
 80a15bc:	f7ff ffb6 	bl	80a152c <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
 80a15c0:	7a2a      	ldrb	r2, [r5, #8]
 80a15c2:	2133      	movs	r1, #51	; 0x33
 80a15c4:	4620      	mov	r0, r4
 80a15c6:	f7ff ffb1 	bl	80a152c <_ZN6LIS3DH14writeRegister8Ehh>

		if (intPin >= 0) {
 80a15ca:	6863      	ldr	r3, [r4, #4]
 80a15cc:	2b00      	cmp	r3, #0
 80a15ce:	db0a      	blt.n	80a15e6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa2>
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a15d0:	7a6a      	ldrb	r2, [r5, #9]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a15d2:	4620      	mov	r0, r4
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a15d4:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a15d6:	2130      	movs	r1, #48	; 0x30
 80a15d8:	f7ff ffa8 	bl	80a152c <_ZN6LIS3DH14writeRegister8Ehh>

			// Clear the interrupt just in case
			readRegister8(REG_INT1_SRC);
 80a15dc:	2131      	movs	r1, #49	; 0x31
 80a15de:	4620      	mov	r0, r4
 80a15e0:	f7ff ff5c 	bl	80a149c <_ZN6LIS3DH13readRegister8Eh>
 80a15e4:	e005      	b.n	80a15f2 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
		}
		else {
			int1_cfg = 0;
 80a15e6:	2200      	movs	r2, #0
 80a15e8:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
 80a15ea:	2130      	movs	r1, #48	; 0x30
 80a15ec:	4620      	mov	r0, r4
 80a15ee:	f7ff ff9d 	bl	80a152c <_ZN6LIS3DH14writeRegister8Ehh>




	return true;
}
 80a15f2:	4630      	mov	r0, r6
 80a15f4:	bd70      	pop	{r4, r5, r6, pc}
 80a15f6:	bf00      	nop
 80a15f8:	080a35b4 	.word	0x080a35b4

080a15fc <_ZN9LIS3DHI2CC1ER7TwoWirehi>:

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a15fc:	b510      	push	{r4, lr}

	return *this;
}


LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
 80a15fe:	6043      	str	r3, [r0, #4]

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a1600:	4b02      	ldr	r3, [pc, #8]	; (80a160c <_ZN9LIS3DHI2CC1ER7TwoWirehi+0x10>)
 80a1602:	60c1      	str	r1, [r0, #12]
 80a1604:	6003      	str	r3, [r0, #0]
 80a1606:	7402      	strb	r2, [r0, #16]

}
 80a1608:	bd10      	pop	{r4, pc}
 80a160a:	bf00      	nop
 80a160c:	080a35a4 	.word	0x080a35a4

080a1610 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:
 80a1610:	f000 b8cc 	b.w	80a17ac <HAL_Pin_Map>

080a1614 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>:
#include "FuzzyRule.h"

FuzzyRule::FuzzyRule(){
}

FuzzyRule::FuzzyRule(int index, FuzzyRuleAntecedent* fuzzyRuleAntecedent, FuzzyRuleConsequent* fuzzyRuleConsequent){
 80a1614:	b510      	push	{r4, lr}
    this->index = index;
    this->fuzzyRuleAntecedent = fuzzyRuleAntecedent;
    this->fuzzyRuleConsequent = fuzzyRuleConsequent;
 80a1616:	60c3      	str	r3, [r0, #12]
    this->fired = false;
 80a1618:	2300      	movs	r3, #0

FuzzyRule::FuzzyRule(){
}

FuzzyRule::FuzzyRule(int index, FuzzyRuleAntecedent* fuzzyRuleAntecedent, FuzzyRuleConsequent* fuzzyRuleConsequent){
    this->index = index;
 80a161a:	6001      	str	r1, [r0, #0]
    this->fuzzyRuleAntecedent = fuzzyRuleAntecedent;
 80a161c:	6082      	str	r2, [r0, #8]
    this->fuzzyRuleConsequent = fuzzyRuleConsequent;
    this->fired = false;
 80a161e:	7103      	strb	r3, [r0, #4]
}
 80a1620:	bd10      	pop	{r4, pc}

080a1622 <_ZN16FuzzyCompositionC1Ev>:
#include "FuzzyComposition.h"
#include <math.h>

// CONSTRUTORES
FuzzyComposition::FuzzyComposition(){
    this->pointsCursor     = NULL;
 80a1622:	2200      	movs	r2, #0
 80a1624:	6002      	str	r2, [r0, #0]
    this->points         = NULL;
 80a1626:	6042      	str	r2, [r0, #4]
}
 80a1628:	4770      	bx	lr

080a162a <_ZN10FuzzyInputC1Ei>:

// CONSTRUTORES
FuzzyInput::FuzzyInput() : FuzzyIO(){
}

FuzzyInput::FuzzyInput(int index) : FuzzyIO(index){
 80a162a:	b510      	push	{r4, lr}
 80a162c:	4604      	mov	r4, r0
 80a162e:	f000 f802 	bl	80a1636 <_ZN7FuzzyIOC1Ei>
}
 80a1632:	4620      	mov	r0, r4
 80a1634:	bd10      	pop	{r4, pc}

080a1636 <_ZN7FuzzyIOC1Ei>:
}

FuzzyIO::FuzzyIO(int index){
    this->index = index;
    // Iniciando os ponteiros como nulo
    this->fuzzySets          = NULL;
 80a1636:	2200      	movs	r2, #0
// CONSTRUTORES
FuzzyIO::FuzzyIO(){
}

FuzzyIO::FuzzyIO(int index){
    this->index = index;
 80a1638:	6001      	str	r1, [r0, #0]
    // Iniciando os ponteiros como nulo
    this->fuzzySets          = NULL;
 80a163a:	6082      	str	r2, [r0, #8]
    this->fuzzySetsCursor    = NULL;
 80a163c:	60c2      	str	r2, [r0, #12]
}
 80a163e:	4770      	bx	lr

080a1640 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>:

float FuzzyIO::getCrispInput(){
    return this->crispInput;
}

bool FuzzyIO::addFuzzySet(FuzzySet* fuzzySet){
 80a1640:	b538      	push	{r3, r4, r5, lr}
 80a1642:	4604      	mov	r4, r0
    fuzzySetArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetArray *) malloc(sizeof(fuzzySetArray))) == NULL){
 80a1644:	2008      	movs	r0, #8

float FuzzyIO::getCrispInput(){
    return this->crispInput;
}

bool FuzzyIO::addFuzzySet(FuzzySet* fuzzySet){
 80a1646:	460d      	mov	r5, r1
    fuzzySetArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetArray *) malloc(sizeof(fuzzySetArray))) == NULL){
 80a1648:	f000 fa62 	bl	80a1b10 <malloc>
 80a164c:	b150      	cbz	r0, 80a1664 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet+0x24>
        return false;
    }
    aux->fuzzySet     = fuzzySet;
    aux->next         = NULL;
 80a164e:	2300      	movs	r3, #0
    fuzzySetArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetArray *) malloc(sizeof(fuzzySetArray))) == NULL){
        return false;
    }
    aux->fuzzySet     = fuzzySet;
 80a1650:	6005      	str	r5, [r0, #0]
    aux->next         = NULL;
 80a1652:	6043      	str	r3, [r0, #4]

    if(this->fuzzySets == NULL){
 80a1654:	68a3      	ldr	r3, [r4, #8]
 80a1656:	b90b      	cbnz	r3, 80a165c <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet+0x1c>
        this->fuzzySets = aux;
 80a1658:	60a0      	str	r0, [r4, #8]
 80a165a:	e001      	b.n	80a1660 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet+0x20>
        this->fuzzySetsCursor = aux;
    }else{
        this->fuzzySetsCursor->next = aux;
 80a165c:	68e3      	ldr	r3, [r4, #12]
 80a165e:	6058      	str	r0, [r3, #4]
        this->fuzzySetsCursor = aux;
 80a1660:	60e0      	str	r0, [r4, #12]
    }
    return true;
 80a1662:	2001      	movs	r0, #1
}
 80a1664:	bd38      	pop	{r3, r4, r5, pc}

080a1666 <_ZN11FuzzyOutputC1Ei>:

// CONSTRUTORES
FuzzyOutput::FuzzyOutput() : FuzzyIO(){
}

FuzzyOutput::FuzzyOutput(int index) : FuzzyIO(index){
 80a1666:	b510      	push	{r4, lr}
 80a1668:	4604      	mov	r4, r0
 80a166a:	f7ff ffe4 	bl	80a1636 <_ZN7FuzzyIOC1Ei>
 80a166e:	f104 0010 	add.w	r0, r4, #16
 80a1672:	f7ff ffd6 	bl	80a1622 <_ZN16FuzzyCompositionC1Ev>
}
 80a1676:	4620      	mov	r0, r4
 80a1678:	bd10      	pop	{r4, pc}

080a167a <_ZN11FuzzyOutput5orderEv>:
float FuzzyOutput::getCrispOutput(){
    return this->fuzzyComposition.avaliate();
}

// Um simples Bubble Sort
bool FuzzyOutput::order(){
 80a167a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fuzzySetArray *aux1;
    fuzzySetArray *aux2;

    aux1 = this->fuzzySets;
 80a167c:	6884      	ldr	r4, [r0, #8]
float FuzzyOutput::getCrispOutput(){
    return this->fuzzyComposition.avaliate();
}

// Um simples Bubble Sort
bool FuzzyOutput::order(){
 80a167e:	4606      	mov	r6, r0
    fuzzySetArray *aux1;
    fuzzySetArray *aux2;

    aux1 = this->fuzzySets;
 80a1680:	4625      	mov	r5, r4
    aux2 = this->fuzzySets;

    while(aux1 != NULL){
 80a1682:	b1cd      	cbz	r5, 80a16b8 <_ZN11FuzzyOutput5orderEv+0x3e>
        while(aux2 != NULL){
 80a1684:	b1ac      	cbz	r4, 80a16b2 <_ZN11FuzzyOutput5orderEv+0x38>
            if(aux2->next != NULL){
 80a1686:	6863      	ldr	r3, [r4, #4]
 80a1688:	b18b      	cbz	r3, 80a16ae <_ZN11FuzzyOutput5orderEv+0x34>
                if(aux2->fuzzySet->getPointA() > aux2->next->fuzzySet->getPointA()){
 80a168a:	6820      	ldr	r0, [r4, #0]
 80a168c:	f000 f81f 	bl	80a16ce <_ZN8FuzzySet9getPointAEv>
 80a1690:	6863      	ldr	r3, [r4, #4]
 80a1692:	4607      	mov	r7, r0
 80a1694:	6818      	ldr	r0, [r3, #0]
 80a1696:	f000 f81a 	bl	80a16ce <_ZN8FuzzySet9getPointAEv>
 80a169a:	4601      	mov	r1, r0
 80a169c:	4638      	mov	r0, r7
 80a169e:	f001 fee3 	bl	80a3468 <__aeabi_fcmpgt>
 80a16a2:	b120      	cbz	r0, 80a16ae <_ZN11FuzzyOutput5orderEv+0x34>

// MÉTODOS PRIVADOS
bool FuzzyOutput::swap(fuzzySetArray* fuzzySetA, fuzzySetArray* fuzzySetB){
    FuzzySet* aux;
    
    aux = fuzzySetA->fuzzySet;
 80a16a4:	e894 000c 	ldmia.w	r4, {r2, r3}
    fuzzySetA->fuzzySet = fuzzySetB->fuzzySet;
 80a16a8:	6819      	ldr	r1, [r3, #0]
 80a16aa:	6021      	str	r1, [r4, #0]
    fuzzySetB->fuzzySet = aux;
 80a16ac:	601a      	str	r2, [r3, #0]
            if(aux2->next != NULL){
                if(aux2->fuzzySet->getPointA() > aux2->next->fuzzySet->getPointA()){
                    this->swap(aux2, aux2->next);
                }
            }
            aux2 = aux2->next;
 80a16ae:	6864      	ldr	r4, [r4, #4]

    aux1 = this->fuzzySets;
    aux2 = this->fuzzySets;

    while(aux1 != NULL){
        while(aux2 != NULL){
 80a16b0:	e7e8      	b.n	80a1684 <_ZN11FuzzyOutput5orderEv+0xa>
                    this->swap(aux2, aux2->next);
                }
            }
            aux2 = aux2->next;
        }
        aux2 = this->fuzzySets;
 80a16b2:	68b4      	ldr	r4, [r6, #8]
        aux1 = aux1->next;
 80a16b4:	686d      	ldr	r5, [r5, #4]
    fuzzySetArray *aux2;

    aux1 = this->fuzzySets;
    aux2 = this->fuzzySets;

    while(aux1 != NULL){
 80a16b6:	e7e4      	b.n	80a1682 <_ZN11FuzzyOutput5orderEv+0x8>
        }
        aux2 = this->fuzzySets;
        aux1 = aux1->next;
    }
    return true;
}
 80a16b8:	2001      	movs	r0, #1
 80a16ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a16bc <_ZN8FuzzySetC1Effff>:
#include "FuzzySet.h"

FuzzySet::FuzzySet(){
}

FuzzySet::FuzzySet(float a, float b, float c, float d){
 80a16bc:	b510      	push	{r4, lr}
    this->a = a;
    this->b = b;
    this->c = c;
 80a16be:	6083      	str	r3, [r0, #8]
    this->d = d;
 80a16c0:	9b02      	ldr	r3, [sp, #8]

FuzzySet::FuzzySet(){
}

FuzzySet::FuzzySet(float a, float b, float c, float d){
    this->a = a;
 80a16c2:	6001      	str	r1, [r0, #0]
    this->b = b;
    this->c = c;
    this->d = d;
 80a16c4:	60c3      	str	r3, [r0, #12]
    this->pertinence = 0.0;
 80a16c6:	2300      	movs	r3, #0
FuzzySet::FuzzySet(){
}

FuzzySet::FuzzySet(float a, float b, float c, float d){
    this->a = a;
    this->b = b;
 80a16c8:	6042      	str	r2, [r0, #4]
    this->c = c;
    this->d = d;
    this->pertinence = 0.0;
 80a16ca:	6103      	str	r3, [r0, #16]
}
 80a16cc:	bd10      	pop	{r4, pc}

080a16ce <_ZN8FuzzySet9getPointAEv>:

float FuzzySet::getPointA(){
    return this->a;
}
 80a16ce:	6800      	ldr	r0, [r0, #0]
 80a16d0:	4770      	bx	lr

080a16d2 <_ZN19FuzzyRuleConsequentC1Ev>:
 */
#include "FuzzyRuleConsequent.h"

// CONSTRUTORES
FuzzyRuleConsequent::FuzzyRuleConsequent(){
    this->fuzzySetOutputs = NULL;
 80a16d2:	2200      	movs	r2, #0
 80a16d4:	6042      	str	r2, [r0, #4]
    this->fuzzySetOutputsCursor = NULL;
 80a16d6:	6002      	str	r2, [r0, #0]
}
 80a16d8:	4770      	bx	lr

080a16da <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>:
FuzzyRuleConsequent::~FuzzyRuleConsequent(){
    this->cleanFuzzySets(this->fuzzySetOutputs);
}

// MÉTODOS PÚBLICOS
bool FuzzyRuleConsequent::addOutput(FuzzySet* fuzzySet){
 80a16da:	b538      	push	{r3, r4, r5, lr}
 80a16dc:	4604      	mov	r4, r0
    fuzzySetOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetOutputArray *) malloc(sizeof(fuzzySetOutputArray))) == NULL){
 80a16de:	2008      	movs	r0, #8
FuzzyRuleConsequent::~FuzzyRuleConsequent(){
    this->cleanFuzzySets(this->fuzzySetOutputs);
}

// MÉTODOS PÚBLICOS
bool FuzzyRuleConsequent::addOutput(FuzzySet* fuzzySet){
 80a16e0:	460d      	mov	r5, r1
    fuzzySetOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetOutputArray *) malloc(sizeof(fuzzySetOutputArray))) == NULL){
 80a16e2:	f000 fa15 	bl	80a1b10 <malloc>
 80a16e6:	b150      	cbz	r0, 80a16fe <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet+0x24>
        return false;
    }
    aux->fuzzySet     = fuzzySet;
    aux->next         = NULL;
 80a16e8:	2300      	movs	r3, #0
    fuzzySetOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetOutputArray *) malloc(sizeof(fuzzySetOutputArray))) == NULL){
        return false;
    }
    aux->fuzzySet     = fuzzySet;
 80a16ea:	6005      	str	r5, [r0, #0]
    aux->next         = NULL;
 80a16ec:	6043      	str	r3, [r0, #4]

    if(this->fuzzySetOutputs == NULL){
 80a16ee:	6863      	ldr	r3, [r4, #4]
 80a16f0:	b90b      	cbnz	r3, 80a16f6 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet+0x1c>
        this->fuzzySetOutputs = aux;
 80a16f2:	6060      	str	r0, [r4, #4]
 80a16f4:	e001      	b.n	80a16fa <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet+0x20>
        this->fuzzySetOutputsCursor    = aux;
    }else{
        this->fuzzySetOutputsCursor->next = aux;
 80a16f6:	6823      	ldr	r3, [r4, #0]
 80a16f8:	6058      	str	r0, [r3, #4]
        this->fuzzySetOutputsCursor = aux;
 80a16fa:	6020      	str	r0, [r4, #0]
    }
    return true;
 80a16fc:	2001      	movs	r0, #1
}
 80a16fe:	bd38      	pop	{r3, r4, r5, pc}

080a1700 <_ZN5FuzzyC1Ev>:

// CONSTRUTORES
Fuzzy::Fuzzy(){
    // Iniciando os ponteiros como nulo
    // FuzzyInput
    this->fuzzyInputs       = NULL;
 80a1700:	2200      	movs	r2, #0
 80a1702:	6042      	str	r2, [r0, #4]
    this->fuzzyInputsCursor = NULL;
 80a1704:	6002      	str	r2, [r0, #0]
    // FuzzyOutput
    this->fuzzyOutputs          = NULL;
 80a1706:	60c2      	str	r2, [r0, #12]
    this->fuzzyOutputsCursor    = NULL;
 80a1708:	6082      	str	r2, [r0, #8]
    // FuzzyRule
    this->fuzzyRules        = NULL;
 80a170a:	6142      	str	r2, [r0, #20]
    this->fuzzyRulesCursor  = NULL;
 80a170c:	6102      	str	r2, [r0, #16]
}
 80a170e:	4770      	bx	lr

080a1710 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>:
    this->cleanFuzzyOutputs(this->fuzzyOutputs);
    this->cleanFuzzyRules(this->fuzzyRules);
}

// MÉTODOS PÚBLICOS
bool Fuzzy::addFuzzyInput(FuzzyInput* fuzzyInput){
 80a1710:	b538      	push	{r3, r4, r5, lr}
 80a1712:	4604      	mov	r4, r0
    fuzzyInputArray* aux;
    
    // Alocando espaço na memória
    if((aux = (fuzzyInputArray *) malloc(sizeof(fuzzyInputArray))) == NULL){
 80a1714:	2008      	movs	r0, #8
    this->cleanFuzzyOutputs(this->fuzzyOutputs);
    this->cleanFuzzyRules(this->fuzzyRules);
}

// MÉTODOS PÚBLICOS
bool Fuzzy::addFuzzyInput(FuzzyInput* fuzzyInput){
 80a1716:	460d      	mov	r5, r1
    fuzzyInputArray* aux;
    
    // Alocando espaço na memória
    if((aux = (fuzzyInputArray *) malloc(sizeof(fuzzyInputArray))) == NULL){
 80a1718:	f000 f9fa 	bl	80a1b10 <malloc>
 80a171c:	b150      	cbz	r0, 80a1734 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput+0x24>
        return false;
    }

    aux->fuzzyInput = fuzzyInput;
    aux->next = NULL;
 80a171e:	2300      	movs	r3, #0
    // Alocando espaço na memória
    if((aux = (fuzzyInputArray *) malloc(sizeof(fuzzyInputArray))) == NULL){
        return false;
    }

    aux->fuzzyInput = fuzzyInput;
 80a1720:	6005      	str	r5, [r0, #0]
    aux->next = NULL;
 80a1722:	6043      	str	r3, [r0, #4]

    if(this->fuzzyInputs == NULL){
 80a1724:	6863      	ldr	r3, [r4, #4]
 80a1726:	b90b      	cbnz	r3, 80a172c <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput+0x1c>
        this->fuzzyInputs = aux;
 80a1728:	6060      	str	r0, [r4, #4]
 80a172a:	e001      	b.n	80a1730 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput+0x20>
        this->fuzzyInputsCursor  = aux;
    }else{
        this->fuzzyInputsCursor->next = aux;
 80a172c:	6823      	ldr	r3, [r4, #0]
 80a172e:	6058      	str	r0, [r3, #4]
        this->fuzzyInputsCursor = aux;
 80a1730:	6020      	str	r0, [r4, #0]
    }

    return true;
 80a1732:	2001      	movs	r0, #1
}
 80a1734:	bd38      	pop	{r3, r4, r5, pc}

080a1736 <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput>:

bool Fuzzy::addFuzzyOutput(FuzzyOutput* fuzzyOutput){
 80a1736:	b570      	push	{r4, r5, r6, lr}
 80a1738:	4605      	mov	r5, r0
    fuzzyOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzyOutputArray *) malloc(sizeof(fuzzyOutputArray))) == NULL){
 80a173a:	2008      	movs	r0, #8
    }

    return true;
}

bool Fuzzy::addFuzzyOutput(FuzzyOutput* fuzzyOutput){
 80a173c:	460e      	mov	r6, r1
    fuzzyOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzyOutputArray *) malloc(sizeof(fuzzyOutputArray))) == NULL){
 80a173e:	f000 f9e7 	bl	80a1b10 <malloc>
 80a1742:	4604      	mov	r4, r0
 80a1744:	b170      	cbz	r0, 80a1764 <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput+0x2e>
        return false;
    }
    aux->fuzzyOutput = fuzzyOutput;
    aux->next = NULL;
 80a1746:	2300      	movs	r3, #0
 80a1748:	6043      	str	r3, [r0, #4]
    fuzzyOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzyOutputArray *) malloc(sizeof(fuzzyOutputArray))) == NULL){
        return false;
    }
    aux->fuzzyOutput = fuzzyOutput;
 80a174a:	6006      	str	r6, [r0, #0]
    aux->next = NULL;

    // Ordenando o fuzzyOutput
    fuzzyOutput->order();
 80a174c:	4630      	mov	r0, r6
 80a174e:	f7ff ff94 	bl	80a167a <_ZN11FuzzyOutput5orderEv>

    if(this->fuzzyOutputs == NULL){
 80a1752:	68eb      	ldr	r3, [r5, #12]
 80a1754:	b90b      	cbnz	r3, 80a175a <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput+0x24>
        this->fuzzyOutputs = aux;
 80a1756:	60ec      	str	r4, [r5, #12]
 80a1758:	e001      	b.n	80a175e <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput+0x28>
        this->fuzzyOutputsCursor  = aux;
    }else{
        this->fuzzyOutputsCursor->next = aux;
 80a175a:	68ab      	ldr	r3, [r5, #8]
 80a175c:	605c      	str	r4, [r3, #4]
        this->fuzzyOutputsCursor = aux;
 80a175e:	60ac      	str	r4, [r5, #8]
    }
    return true;
 80a1760:	2001      	movs	r0, #1
 80a1762:	bd70      	pop	{r4, r5, r6, pc}
}
 80a1764:	bd70      	pop	{r4, r5, r6, pc}

080a1766 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>:

bool Fuzzy::addFuzzyRule(FuzzyRule* fuzzyRule){
 80a1766:	b538      	push	{r3, r4, r5, lr}
 80a1768:	4604      	mov	r4, r0
    fuzzyRuleArray* aux;
    // Alocando espaço na memória
    if((aux = (fuzzyRuleArray *) malloc(sizeof(fuzzyRuleArray))) == NULL){
 80a176a:	2008      	movs	r0, #8
        this->fuzzyOutputsCursor = aux;
    }
    return true;
}

bool Fuzzy::addFuzzyRule(FuzzyRule* fuzzyRule){
 80a176c:	460d      	mov	r5, r1
    fuzzyRuleArray* aux;
    // Alocando espaço na memória
    if((aux = (fuzzyRuleArray *) malloc(sizeof(fuzzyRuleArray))) == NULL){
 80a176e:	f000 f9cf 	bl	80a1b10 <malloc>
 80a1772:	b150      	cbz	r0, 80a178a <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule+0x24>
        return false;
    }
    aux->fuzzyRule = fuzzyRule;
    aux->next = NULL;
 80a1774:	2300      	movs	r3, #0
    fuzzyRuleArray* aux;
    // Alocando espaço na memória
    if((aux = (fuzzyRuleArray *) malloc(sizeof(fuzzyRuleArray))) == NULL){
        return false;
    }
    aux->fuzzyRule = fuzzyRule;
 80a1776:	6005      	str	r5, [r0, #0]
    aux->next = NULL;
 80a1778:	6043      	str	r3, [r0, #4]

    if(this->fuzzyRules == NULL){
 80a177a:	6963      	ldr	r3, [r4, #20]
 80a177c:	b90b      	cbnz	r3, 80a1782 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule+0x1c>
        this->fuzzyRules = aux;
 80a177e:	6160      	str	r0, [r4, #20]
 80a1780:	e001      	b.n	80a1786 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule+0x20>
        this->fuzzyRulesCursor  = aux;
    }else{
        this->fuzzyRulesCursor->next = aux;
 80a1782:	6923      	ldr	r3, [r4, #16]
 80a1784:	6058      	str	r0, [r3, #4]
        this->fuzzyRulesCursor = aux;
 80a1786:	6120      	str	r0, [r4, #16]
    }
    return true;
 80a1788:	2001      	movs	r0, #1
}
 80a178a:	bd38      	pop	{r3, r4, r5, pc}

080a178c <_ZN19FuzzyRuleAntecedentC1Ev>:
 */
#include "FuzzyRuleAntecedent.h"

// CONSTRUTORES
FuzzyRuleAntecedent::FuzzyRuleAntecedent(){
    this->op = 0;
 80a178c:	2200      	movs	r2, #0
 80a178e:	6002      	str	r2, [r0, #0]
    this->mode = 0;
 80a1790:	6042      	str	r2, [r0, #4]
    this->fuzzySet1 = NULL;
 80a1792:	6082      	str	r2, [r0, #8]
    this->fuzzySet2 = NULL;
 80a1794:	60c2      	str	r2, [r0, #12]
    this->fuzzyRuleAntecedent1 = NULL;
 80a1796:	6102      	str	r2, [r0, #16]
    this->fuzzyRuleAntecedent2 = NULL;
 80a1798:	6142      	str	r2, [r0, #20]
}
 80a179a:	4770      	bx	lr

080a179c <_ZN19FuzzyRuleAntecedent10joinSingleEP8FuzzySet>:

// MÉTODOS PÚBLICOS
bool FuzzyRuleAntecedent::joinSingle(FuzzySet* fuzzySet){
    if(fuzzySet){
 80a179c:	b121      	cbz	r1, 80a17a8 <_ZN19FuzzyRuleAntecedent10joinSingleEP8FuzzySet+0xc>
        this->mode = MODE_FS;
 80a179e:	2301      	movs	r3, #1
 80a17a0:	6043      	str	r3, [r0, #4]
        this->fuzzySet1 = fuzzySet;
 80a17a2:	6081      	str	r1, [r0, #8]
        return true;
 80a17a4:	4618      	mov	r0, r3
 80a17a6:	4770      	bx	lr
    }
    return false;
 80a17a8:	4608      	mov	r0, r1
}
 80a17aa:	4770      	bx	lr

080a17ac <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a17ac:	b508      	push	{r3, lr}
 80a17ae:	4b02      	ldr	r3, [pc, #8]	; (80a17b8 <HAL_Pin_Map+0xc>)
 80a17b0:	681b      	ldr	r3, [r3, #0]
 80a17b2:	681b      	ldr	r3, [r3, #0]
 80a17b4:	9301      	str	r3, [sp, #4]
 80a17b6:	bd08      	pop	{r3, pc}
 80a17b8:	080601b0 	.word	0x080601b0

080a17bc <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a17bc:	b508      	push	{r3, lr}
 80a17be:	4b02      	ldr	r3, [pc, #8]	; (80a17c8 <HAL_Validate_Pin_Function+0xc>)
 80a17c0:	681b      	ldr	r3, [r3, #0]
 80a17c2:	685b      	ldr	r3, [r3, #4]
 80a17c4:	9301      	str	r3, [sp, #4]
 80a17c6:	bd08      	pop	{r3, pc}
 80a17c8:	080601b0 	.word	0x080601b0

080a17cc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a17cc:	b508      	push	{r3, lr}
 80a17ce:	4b02      	ldr	r3, [pc, #8]	; (80a17d8 <HAL_Pin_Mode+0xc>)
 80a17d0:	681b      	ldr	r3, [r3, #0]
 80a17d2:	689b      	ldr	r3, [r3, #8]
 80a17d4:	9301      	str	r3, [sp, #4]
 80a17d6:	bd08      	pop	{r3, pc}
 80a17d8:	080601b0 	.word	0x080601b0

080a17dc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a17dc:	b508      	push	{r3, lr}
 80a17de:	4b02      	ldr	r3, [pc, #8]	; (80a17e8 <HAL_Get_Pin_Mode+0xc>)
 80a17e0:	681b      	ldr	r3, [r3, #0]
 80a17e2:	68db      	ldr	r3, [r3, #12]
 80a17e4:	9301      	str	r3, [sp, #4]
 80a17e6:	bd08      	pop	{r3, pc}
 80a17e8:	080601b0 	.word	0x080601b0

080a17ec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a17ec:	b508      	push	{r3, lr}
 80a17ee:	4b02      	ldr	r3, [pc, #8]	; (80a17f8 <HAL_GPIO_Write+0xc>)
 80a17f0:	681b      	ldr	r3, [r3, #0]
 80a17f2:	691b      	ldr	r3, [r3, #16]
 80a17f4:	9301      	str	r3, [sp, #4]
 80a17f6:	bd08      	pop	{r3, pc}
 80a17f8:	080601b0 	.word	0x080601b0

080a17fc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a17fc:	b508      	push	{r3, lr}
 80a17fe:	4b02      	ldr	r3, [pc, #8]	; (80a1808 <HAL_GPIO_Read+0xc>)
 80a1800:	681b      	ldr	r3, [r3, #0]
 80a1802:	695b      	ldr	r3, [r3, #20]
 80a1804:	9301      	str	r3, [sp, #4]
 80a1806:	bd08      	pop	{r3, pc}
 80a1808:	080601b0 	.word	0x080601b0

080a180c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a180c:	b508      	push	{r3, lr}
 80a180e:	4b02      	ldr	r3, [pc, #8]	; (80a1818 <HAL_Interrupts_Attach+0xc>)
 80a1810:	681b      	ldr	r3, [r3, #0]
 80a1812:	699b      	ldr	r3, [r3, #24]
 80a1814:	9301      	str	r3, [sp, #4]
 80a1816:	bd08      	pop	{r3, pc}
 80a1818:	080601b0 	.word	0x080601b0

080a181c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a181c:	b508      	push	{r3, lr}
 80a181e:	4b02      	ldr	r3, [pc, #8]	; (80a1828 <HAL_Interrupts_Detach+0xc>)
 80a1820:	681b      	ldr	r3, [r3, #0]
 80a1822:	69db      	ldr	r3, [r3, #28]
 80a1824:	9301      	str	r3, [sp, #4]
 80a1826:	bd08      	pop	{r3, pc}
 80a1828:	080601b0 	.word	0x080601b0

080a182c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a182c:	b508      	push	{r3, lr}
 80a182e:	4b02      	ldr	r3, [pc, #8]	; (80a1838 <HAL_SPI_Init+0xc>)
 80a1830:	681b      	ldr	r3, [r3, #0]
 80a1832:	69db      	ldr	r3, [r3, #28]
 80a1834:	9301      	str	r3, [sp, #4]
 80a1836:	bd08      	pop	{r3, pc}
 80a1838:	080601b4 	.word	0x080601b4

080a183c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a183c:	b508      	push	{r3, lr}
 80a183e:	4b02      	ldr	r3, [pc, #8]	; (80a1848 <HAL_SPI_Is_Enabled+0xc>)
 80a1840:	681b      	ldr	r3, [r3, #0]
 80a1842:	6a1b      	ldr	r3, [r3, #32]
 80a1844:	9301      	str	r3, [sp, #4]
 80a1846:	bd08      	pop	{r3, pc}
 80a1848:	080601b4 	.word	0x080601b4

080a184c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a184c:	b508      	push	{r3, lr}
 80a184e:	4b02      	ldr	r3, [pc, #8]	; (80a1858 <HAL_RNG_GetRandomNumber+0xc>)
 80a1850:	681b      	ldr	r3, [r3, #0]
 80a1852:	685b      	ldr	r3, [r3, #4]
 80a1854:	9301      	str	r3, [sp, #4]
 80a1856:	bd08      	pop	{r3, pc}
 80a1858:	0806019c 	.word	0x0806019c

080a185c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a185c:	b508      	push	{r3, lr}
 80a185e:	4b02      	ldr	r3, [pc, #8]	; (80a1868 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1860:	681b      	ldr	r3, [r3, #0]
 80a1862:	695b      	ldr	r3, [r3, #20]
 80a1864:	9301      	str	r3, [sp, #4]
 80a1866:	bd08      	pop	{r3, pc}
 80a1868:	0806019c 	.word	0x0806019c

080a186c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a186c:	b508      	push	{r3, lr}
 80a186e:	4b02      	ldr	r3, [pc, #8]	; (80a1878 <os_mutex_create+0xc>)
 80a1870:	681b      	ldr	r3, [r3, #0]
 80a1872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1874:	9301      	str	r3, [sp, #4]
 80a1876:	bd08      	pop	{r3, pc}
 80a1878:	080601d0 	.word	0x080601d0

080a187c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a187c:	b508      	push	{r3, lr}
 80a187e:	4b02      	ldr	r3, [pc, #8]	; (80a1888 <HAL_USART_Init+0xc>)
 80a1880:	681b      	ldr	r3, [r3, #0]
 80a1882:	699b      	ldr	r3, [r3, #24]
 80a1884:	9301      	str	r3, [sp, #4]
 80a1886:	bd08      	pop	{r3, pc}
 80a1888:	080601c4 	.word	0x080601c4

080a188c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a188c:	b508      	push	{r3, lr}
 80a188e:	4b02      	ldr	r3, [pc, #8]	; (80a1898 <HAL_USART_Write_Data+0xc>)
 80a1890:	681b      	ldr	r3, [r3, #0]
 80a1892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1894:	9301      	str	r3, [sp, #4]
 80a1896:	bd08      	pop	{r3, pc}
 80a1898:	080601c4 	.word	0x080601c4

080a189c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a189c:	b508      	push	{r3, lr}
 80a189e:	4b02      	ldr	r3, [pc, #8]	; (80a18a8 <HAL_USART_Available_Data+0xc>)
 80a18a0:	681b      	ldr	r3, [r3, #0]
 80a18a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a18a4:	9301      	str	r3, [sp, #4]
 80a18a6:	bd08      	pop	{r3, pc}
 80a18a8:	080601c4 	.word	0x080601c4

080a18ac <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a18ac:	b508      	push	{r3, lr}
 80a18ae:	4b02      	ldr	r3, [pc, #8]	; (80a18b8 <HAL_USART_Read_Data+0xc>)
 80a18b0:	681b      	ldr	r3, [r3, #0]
 80a18b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a18b4:	9301      	str	r3, [sp, #4]
 80a18b6:	bd08      	pop	{r3, pc}
 80a18b8:	080601c4 	.word	0x080601c4

080a18bc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a18bc:	b508      	push	{r3, lr}
 80a18be:	4b02      	ldr	r3, [pc, #8]	; (80a18c8 <HAL_USART_Peek_Data+0xc>)
 80a18c0:	681b      	ldr	r3, [r3, #0]
 80a18c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a18c4:	9301      	str	r3, [sp, #4]
 80a18c6:	bd08      	pop	{r3, pc}
 80a18c8:	080601c4 	.word	0x080601c4

080a18cc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a18cc:	b508      	push	{r3, lr}
 80a18ce:	4b02      	ldr	r3, [pc, #8]	; (80a18d8 <HAL_USART_Flush_Data+0xc>)
 80a18d0:	681b      	ldr	r3, [r3, #0]
 80a18d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a18d4:	9301      	str	r3, [sp, #4]
 80a18d6:	bd08      	pop	{r3, pc}
 80a18d8:	080601c4 	.word	0x080601c4

080a18dc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a18dc:	b508      	push	{r3, lr}
 80a18de:	4b02      	ldr	r3, [pc, #8]	; (80a18e8 <HAL_USART_Is_Enabled+0xc>)
 80a18e0:	681b      	ldr	r3, [r3, #0]
 80a18e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a18e4:	9301      	str	r3, [sp, #4]
 80a18e6:	bd08      	pop	{r3, pc}
 80a18e8:	080601c4 	.word	0x080601c4

080a18ec <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a18ec:	b508      	push	{r3, lr}
 80a18ee:	4b02      	ldr	r3, [pc, #8]	; (80a18f8 <HAL_USART_Available_Data_For_Write+0xc>)
 80a18f0:	681b      	ldr	r3, [r3, #0]
 80a18f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a18f4:	9301      	str	r3, [sp, #4]
 80a18f6:	bd08      	pop	{r3, pc}
 80a18f8:	080601c4 	.word	0x080601c4

080a18fc <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a18fc:	b508      	push	{r3, lr}
 80a18fe:	4b02      	ldr	r3, [pc, #8]	; (80a1908 <HAL_I2C_Set_Speed+0xc>)
 80a1900:	681b      	ldr	r3, [r3, #0]
 80a1902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1904:	9301      	str	r3, [sp, #4]
 80a1906:	bd08      	pop	{r3, pc}
 80a1908:	080601ac 	.word	0x080601ac

080a190c <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a190c:	b508      	push	{r3, lr}
 80a190e:	4b02      	ldr	r3, [pc, #8]	; (80a1918 <HAL_I2C_Begin+0xc>)
 80a1910:	681b      	ldr	r3, [r3, #0]
 80a1912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1914:	9301      	str	r3, [sp, #4]
 80a1916:	bd08      	pop	{r3, pc}
 80a1918:	080601ac 	.word	0x080601ac

080a191c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a191c:	b508      	push	{r3, lr}
 80a191e:	4b02      	ldr	r3, [pc, #8]	; (80a1928 <HAL_I2C_Request_Data+0xc>)
 80a1920:	681b      	ldr	r3, [r3, #0]
 80a1922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1924:	9301      	str	r3, [sp, #4]
 80a1926:	bd08      	pop	{r3, pc}
 80a1928:	080601ac 	.word	0x080601ac

080a192c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a192c:	b508      	push	{r3, lr}
 80a192e:	4b02      	ldr	r3, [pc, #8]	; (80a1938 <HAL_I2C_Begin_Transmission+0xc>)
 80a1930:	681b      	ldr	r3, [r3, #0]
 80a1932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1934:	9301      	str	r3, [sp, #4]
 80a1936:	bd08      	pop	{r3, pc}
 80a1938:	080601ac 	.word	0x080601ac

080a193c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a193c:	b508      	push	{r3, lr}
 80a193e:	4b02      	ldr	r3, [pc, #8]	; (80a1948 <HAL_I2C_End_Transmission+0xc>)
 80a1940:	681b      	ldr	r3, [r3, #0]
 80a1942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1944:	9301      	str	r3, [sp, #4]
 80a1946:	bd08      	pop	{r3, pc}
 80a1948:	080601ac 	.word	0x080601ac

080a194c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a194c:	b508      	push	{r3, lr}
 80a194e:	4b02      	ldr	r3, [pc, #8]	; (80a1958 <HAL_I2C_Write_Data+0xc>)
 80a1950:	681b      	ldr	r3, [r3, #0]
 80a1952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1954:	9301      	str	r3, [sp, #4]
 80a1956:	bd08      	pop	{r3, pc}
 80a1958:	080601ac 	.word	0x080601ac

080a195c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a195c:	b508      	push	{r3, lr}
 80a195e:	4b02      	ldr	r3, [pc, #8]	; (80a1968 <HAL_I2C_Available_Data+0xc>)
 80a1960:	681b      	ldr	r3, [r3, #0]
 80a1962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1964:	9301      	str	r3, [sp, #4]
 80a1966:	bd08      	pop	{r3, pc}
 80a1968:	080601ac 	.word	0x080601ac

080a196c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a196c:	b508      	push	{r3, lr}
 80a196e:	4b02      	ldr	r3, [pc, #8]	; (80a1978 <HAL_I2C_Read_Data+0xc>)
 80a1970:	681b      	ldr	r3, [r3, #0]
 80a1972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1974:	9301      	str	r3, [sp, #4]
 80a1976:	bd08      	pop	{r3, pc}
 80a1978:	080601ac 	.word	0x080601ac

080a197c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a197c:	b508      	push	{r3, lr}
 80a197e:	4b02      	ldr	r3, [pc, #8]	; (80a1988 <HAL_I2C_Peek_Data+0xc>)
 80a1980:	681b      	ldr	r3, [r3, #0]
 80a1982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1984:	9301      	str	r3, [sp, #4]
 80a1986:	bd08      	pop	{r3, pc}
 80a1988:	080601ac 	.word	0x080601ac

080a198c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a198c:	b508      	push	{r3, lr}
 80a198e:	4b02      	ldr	r3, [pc, #8]	; (80a1998 <HAL_I2C_Flush_Data+0xc>)
 80a1990:	681b      	ldr	r3, [r3, #0]
 80a1992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1994:	9301      	str	r3, [sp, #4]
 80a1996:	bd08      	pop	{r3, pc}
 80a1998:	080601ac 	.word	0x080601ac

080a199c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a199c:	b508      	push	{r3, lr}
 80a199e:	4b02      	ldr	r3, [pc, #8]	; (80a19a8 <HAL_I2C_Is_Enabled+0xc>)
 80a19a0:	681b      	ldr	r3, [r3, #0]
 80a19a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a19a4:	9301      	str	r3, [sp, #4]
 80a19a6:	bd08      	pop	{r3, pc}
 80a19a8:	080601ac 	.word	0x080601ac

080a19ac <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a19ac:	b508      	push	{r3, lr}
 80a19ae:	4b03      	ldr	r3, [pc, #12]	; (80a19bc <HAL_I2C_Init+0x10>)
 80a19b0:	681b      	ldr	r3, [r3, #0]
 80a19b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a19b6:	9301      	str	r3, [sp, #4]
 80a19b8:	bd08      	pop	{r3, pc}
 80a19ba:	0000      	.short	0x0000
 80a19bc:	080601ac 	.word	0x080601ac

080a19c0 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
 80a19c0:	b508      	push	{r3, lr}
 80a19c2:	4b02      	ldr	r3, [pc, #8]	; (80a19cc <HAL_Servo_Attach+0xc>)
 80a19c4:	681b      	ldr	r3, [r3, #0]
 80a19c6:	691b      	ldr	r3, [r3, #16]
 80a19c8:	9301      	str	r3, [sp, #4]
 80a19ca:	bd08      	pop	{r3, pc}
 80a19cc:	080601a8 	.word	0x080601a8

080a19d0 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
 80a19d0:	b508      	push	{r3, lr}
 80a19d2:	4b02      	ldr	r3, [pc, #8]	; (80a19dc <HAL_Servo_Detach+0xc>)
 80a19d4:	681b      	ldr	r3, [r3, #0]
 80a19d6:	695b      	ldr	r3, [r3, #20]
 80a19d8:	9301      	str	r3, [sp, #4]
 80a19da:	bd08      	pop	{r3, pc}
 80a19dc:	080601a8 	.word	0x080601a8

080a19e0 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
 80a19e0:	b508      	push	{r3, lr}
 80a19e2:	4b02      	ldr	r3, [pc, #8]	; (80a19ec <HAL_Servo_Write_Pulse_Width+0xc>)
 80a19e4:	681b      	ldr	r3, [r3, #0]
 80a19e6:	699b      	ldr	r3, [r3, #24]
 80a19e8:	9301      	str	r3, [sp, #4]
 80a19ea:	bd08      	pop	{r3, pc}
 80a19ec:	080601a8 	.word	0x080601a8

080a19f0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a19f0:	b508      	push	{r3, lr}
 80a19f2:	4b02      	ldr	r3, [pc, #8]	; (80a19fc <HAL_USB_USART_Init+0xc>)
 80a19f4:	681b      	ldr	r3, [r3, #0]
 80a19f6:	681b      	ldr	r3, [r3, #0]
 80a19f8:	9301      	str	r3, [sp, #4]
 80a19fa:	bd08      	pop	{r3, pc}
 80a19fc:	080601d8 	.word	0x080601d8

080a1a00 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1a00:	b508      	push	{r3, lr}
 80a1a02:	4b02      	ldr	r3, [pc, #8]	; (80a1a0c <HAL_USB_USART_Begin+0xc>)
 80a1a04:	681b      	ldr	r3, [r3, #0]
 80a1a06:	685b      	ldr	r3, [r3, #4]
 80a1a08:	9301      	str	r3, [sp, #4]
 80a1a0a:	bd08      	pop	{r3, pc}
 80a1a0c:	080601d8 	.word	0x080601d8

080a1a10 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1a10:	b508      	push	{r3, lr}
 80a1a12:	4b02      	ldr	r3, [pc, #8]	; (80a1a1c <HAL_USB_USART_Available_Data+0xc>)
 80a1a14:	681b      	ldr	r3, [r3, #0]
 80a1a16:	691b      	ldr	r3, [r3, #16]
 80a1a18:	9301      	str	r3, [sp, #4]
 80a1a1a:	bd08      	pop	{r3, pc}
 80a1a1c:	080601d8 	.word	0x080601d8

080a1a20 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1a20:	b508      	push	{r3, lr}
 80a1a22:	4b02      	ldr	r3, [pc, #8]	; (80a1a2c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1a24:	681b      	ldr	r3, [r3, #0]
 80a1a26:	695b      	ldr	r3, [r3, #20]
 80a1a28:	9301      	str	r3, [sp, #4]
 80a1a2a:	bd08      	pop	{r3, pc}
 80a1a2c:	080601d8 	.word	0x080601d8

080a1a30 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1a30:	b508      	push	{r3, lr}
 80a1a32:	4b02      	ldr	r3, [pc, #8]	; (80a1a3c <HAL_USB_USART_Receive_Data+0xc>)
 80a1a34:	681b      	ldr	r3, [r3, #0]
 80a1a36:	699b      	ldr	r3, [r3, #24]
 80a1a38:	9301      	str	r3, [sp, #4]
 80a1a3a:	bd08      	pop	{r3, pc}
 80a1a3c:	080601d8 	.word	0x080601d8

080a1a40 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1a40:	b508      	push	{r3, lr}
 80a1a42:	4b02      	ldr	r3, [pc, #8]	; (80a1a4c <HAL_USB_USART_Send_Data+0xc>)
 80a1a44:	681b      	ldr	r3, [r3, #0]
 80a1a46:	69db      	ldr	r3, [r3, #28]
 80a1a48:	9301      	str	r3, [sp, #4]
 80a1a4a:	bd08      	pop	{r3, pc}
 80a1a4c:	080601d8 	.word	0x080601d8

080a1a50 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1a50:	b508      	push	{r3, lr}
 80a1a52:	4b02      	ldr	r3, [pc, #8]	; (80a1a5c <HAL_USB_USART_Flush_Data+0xc>)
 80a1a54:	681b      	ldr	r3, [r3, #0]
 80a1a56:	6a1b      	ldr	r3, [r3, #32]
 80a1a58:	9301      	str	r3, [sp, #4]
 80a1a5a:	bd08      	pop	{r3, pc}
 80a1a5c:	080601d8 	.word	0x080601d8

080a1a60 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1a60:	b508      	push	{r3, lr}
 80a1a62:	4b02      	ldr	r3, [pc, #8]	; (80a1a6c <set_system_mode+0xc>)
 80a1a64:	681b      	ldr	r3, [r3, #0]
 80a1a66:	685b      	ldr	r3, [r3, #4]
 80a1a68:	9301      	str	r3, [sp, #4]
 80a1a6a:	bd08      	pop	{r3, pc}
 80a1a6c:	080601a4 	.word	0x080601a4

080a1a70 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1a70:	b508      	push	{r3, lr}
 80a1a72:	4b02      	ldr	r3, [pc, #8]	; (80a1a7c <system_delay_ms+0xc>)
 80a1a74:	681b      	ldr	r3, [r3, #0]
 80a1a76:	695b      	ldr	r3, [r3, #20]
 80a1a78:	9301      	str	r3, [sp, #4]
 80a1a7a:	bd08      	pop	{r3, pc}
 80a1a7c:	080601a4 	.word	0x080601a4

080a1a80 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1a80:	b508      	push	{r3, lr}
 80a1a82:	4b02      	ldr	r3, [pc, #8]	; (80a1a8c <system_thread_set_state+0xc>)
 80a1a84:	681b      	ldr	r3, [r3, #0]
 80a1a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1a88:	9301      	str	r3, [sp, #4]
 80a1a8a:	bd08      	pop	{r3, pc}
 80a1a8c:	080601a4 	.word	0x080601a4

080a1a90 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1a90:	b508      	push	{r3, lr}
 80a1a92:	4b02      	ldr	r3, [pc, #8]	; (80a1a9c <application_thread_current+0xc>)
 80a1a94:	681b      	ldr	r3, [r3, #0]
 80a1a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1a98:	9301      	str	r3, [sp, #4]
 80a1a9a:	bd08      	pop	{r3, pc}
 80a1a9c:	080601a4 	.word	0x080601a4

080a1aa0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1aa0:	b508      	push	{r3, lr}
 80a1aa2:	4b02      	ldr	r3, [pc, #8]	; (80a1aac <application_thread_invoke+0xc>)
 80a1aa4:	681b      	ldr	r3, [r3, #0]
 80a1aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1aa8:	9301      	str	r3, [sp, #4]
 80a1aaa:	bd08      	pop	{r3, pc}
 80a1aac:	080601a4 	.word	0x080601a4

080a1ab0 <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80a1ab0:	b508      	push	{r3, lr}
 80a1ab2:	4b02      	ldr	r3, [pc, #8]	; (80a1abc <system_set_usb_request_app_handler+0xc>)
 80a1ab4:	681b      	ldr	r3, [r3, #0]
 80a1ab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1ab8:	9301      	str	r3, [sp, #4]
 80a1aba:	bd08      	pop	{r3, pc}
 80a1abc:	080601a4 	.word	0x080601a4

080a1ac0 <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80a1ac0:	b508      	push	{r3, lr}
 80a1ac2:	4b02      	ldr	r3, [pc, #8]	; (80a1acc <system_set_usb_request_result+0xc>)
 80a1ac4:	681b      	ldr	r3, [r3, #0]
 80a1ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1ac8:	9301      	str	r3, [sp, #4]
 80a1aca:	bd08      	pop	{r3, pc}
 80a1acc:	080601a4 	.word	0x080601a4

080a1ad0 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1ad0:	b508      	push	{r3, lr}
 80a1ad2:	4b02      	ldr	r3, [pc, #8]	; (80a1adc <network_ready+0xc>)
 80a1ad4:	681b      	ldr	r3, [r3, #0]
 80a1ad6:	691b      	ldr	r3, [r3, #16]
 80a1ad8:	9301      	str	r3, [sp, #4]
 80a1ada:	bd08      	pop	{r3, pc}
 80a1adc:	080601c8 	.word	0x080601c8

080a1ae0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a1ae0:	b508      	push	{r3, lr}
 80a1ae2:	4b02      	ldr	r3, [pc, #8]	; (80a1aec <spark_variable+0xc>)
 80a1ae4:	681b      	ldr	r3, [r3, #0]
 80a1ae6:	681b      	ldr	r3, [r3, #0]
 80a1ae8:	9301      	str	r3, [sp, #4]
 80a1aea:	bd08      	pop	{r3, pc}
 80a1aec:	080601cc 	.word	0x080601cc

080a1af0 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1af0:	b508      	push	{r3, lr}
 80a1af2:	4b02      	ldr	r3, [pc, #8]	; (80a1afc <spark_process+0xc>)
 80a1af4:	681b      	ldr	r3, [r3, #0]
 80a1af6:	689b      	ldr	r3, [r3, #8]
 80a1af8:	9301      	str	r3, [sp, #4]
 80a1afa:	bd08      	pop	{r3, pc}
 80a1afc:	080601cc 	.word	0x080601cc

080a1b00 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1b00:	b508      	push	{r3, lr}
 80a1b02:	4b02      	ldr	r3, [pc, #8]	; (80a1b0c <spark_send_event+0xc>)
 80a1b04:	681b      	ldr	r3, [r3, #0]
 80a1b06:	6a1b      	ldr	r3, [r3, #32]
 80a1b08:	9301      	str	r3, [sp, #4]
 80a1b0a:	bd08      	pop	{r3, pc}
 80a1b0c:	080601cc 	.word	0x080601cc

080a1b10 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1b10:	b508      	push	{r3, lr}
 80a1b12:	4b02      	ldr	r3, [pc, #8]	; (80a1b1c <malloc+0xc>)
 80a1b14:	681b      	ldr	r3, [r3, #0]
 80a1b16:	681b      	ldr	r3, [r3, #0]
 80a1b18:	9301      	str	r3, [sp, #4]
 80a1b1a:	bd08      	pop	{r3, pc}
 80a1b1c:	080601a0 	.word	0x080601a0

080a1b20 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1b20:	b508      	push	{r3, lr}
 80a1b22:	4b02      	ldr	r3, [pc, #8]	; (80a1b2c <free+0xc>)
 80a1b24:	681b      	ldr	r3, [r3, #0]
 80a1b26:	685b      	ldr	r3, [r3, #4]
 80a1b28:	9301      	str	r3, [sp, #4]
 80a1b2a:	bd08      	pop	{r3, pc}
 80a1b2c:	080601a0 	.word	0x080601a0

080a1b30 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a1b30:	b508      	push	{r3, lr}
 80a1b32:	4b02      	ldr	r3, [pc, #8]	; (80a1b3c <vsnprintf+0xc>)
 80a1b34:	681b      	ldr	r3, [r3, #0]
 80a1b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1b38:	9301      	str	r3, [sp, #4]
 80a1b3a:	bd08      	pop	{r3, pc}
 80a1b3c:	080601a0 	.word	0x080601a0

080a1b40 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1b40:	b508      	push	{r3, lr}
 80a1b42:	4b02      	ldr	r3, [pc, #8]	; (80a1b4c <abort+0xc>)
 80a1b44:	681b      	ldr	r3, [r3, #0]
 80a1b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1b48:	9301      	str	r3, [sp, #4]
 80a1b4a:	bd08      	pop	{r3, pc}
 80a1b4c:	080601a0 	.word	0x080601a0

080a1b50 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1b50:	4770      	bx	lr

080a1b52 <_ZN8SPIClassD0Ev>:
 80a1b52:	b510      	push	{r4, lr}
 80a1b54:	4604      	mov	r4, r0
 80a1b56:	f7fe faa2 	bl	80a009e <_ZdlPv>
 80a1b5a:	4620      	mov	r0, r4
 80a1b5c:	bd10      	pop	{r4, pc}
	...

080a1b60 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1b60:	b570      	push	{r4, r5, r6, lr}
 80a1b62:	4604      	mov	r4, r0
 80a1b64:	460e      	mov	r6, r1
 80a1b66:	4b07      	ldr	r3, [pc, #28]	; (80a1b84 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
	Mutex(os_mutex_t handle) : handle_(handle) {}

	/**
	 * Creates a new mutex.
	 */
	Mutex() : handle_(nullptr)
 80a1b68:	2500      	movs	r5, #0
 80a1b6a:	6003      	str	r3, [r0, #0]
 80a1b6c:	f840 5f0c 	str.w	r5, [r0, #12]!
	{
		os_mutex_create(&handle_);
 80a1b70:	f7ff fe7c 	bl	80a186c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1b74:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1b76:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1b78:	f7ff fe58 	bl	80a182c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1b7c:	60a5      	str	r5, [r4, #8]
}
 80a1b7e:	4620      	mov	r0, r4
 80a1b80:	bd70      	pop	{r4, r5, r6, pc}
 80a1b82:	bf00      	nop
 80a1b84:	080a3600 	.word	0x080a3600

080a1b88 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1b88:	7900      	ldrb	r0, [r0, #4]
 80a1b8a:	f7ff be57 	b.w	80a183c <HAL_SPI_Is_Enabled>

080a1b8e <_ZN5Servo17writeMicrosecondsEt>:
  // write(179).
  return a == this->minAngle || a == this->maxAngle ? a : a + 1;
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{
 80a1b8e:	f9b0 2000 	ldrsh.w	r2, [r0]

  if (!this->attached())
 80a1b92:	1c53      	adds	r3, r2, #1
 80a1b94:	d00b      	beq.n	80a1bae <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
 80a1b96:	8843      	ldrh	r3, [r0, #2]
 80a1b98:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 80a1b9a:	428b      	cmp	r3, r1
 80a1b9c:	d803      	bhi.n	80a1ba6 <_ZN5Servo17writeMicrosecondsEt+0x18>
 80a1b9e:	4288      	cmp	r0, r1
 80a1ba0:	4603      	mov	r3, r0
 80a1ba2:	bf28      	it	cs
 80a1ba4:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
 80a1ba6:	4619      	mov	r1, r3
 80a1ba8:	b290      	uxth	r0, r2
 80a1baa:	f7ff bf19 	b.w	80a19e0 <HAL_Servo_Write_Pulse_Width>
 80a1bae:	4770      	bx	lr

080a1bb0 <_ZN5Servo11resetFieldsEv>:
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a1bb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
 80a1bb4:	22b4      	movs	r2, #180	; 0xb4
 80a1bb6:	8102      	strh	r2, [r0, #8]
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a1bb8:	f44f 7208 	mov.w	r2, #544	; 0x220
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a1bbc:	8003      	strh	r3, [r0, #0]
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a1bbe:	8042      	strh	r2, [r0, #2]
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a1bc0:	2300      	movs	r3, #0
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a1bc2:	f44f 6216 	mov.w	r2, #2400	; 0x960
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a1bc6:	80c3      	strh	r3, [r0, #6]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a1bc8:	8082      	strh	r2, [r0, #4]
  this->trim = 0;
 80a1bca:	60c3      	str	r3, [r0, #12]
 80a1bcc:	4770      	bx	lr

080a1bce <_ZN5ServoC1Ev>:
#define ANGLE_TO_US(a)    ((uint16_t)(map((a), this->minAngle, this->maxAngle, \
                                        this->minPW, this->maxPW)))
#define US_TO_ANGLE(us)   ((int16_t)(map((us), this->minPW, this->maxPW,  \
                                       this->minAngle, this->maxAngle)))

Servo::Servo()
 80a1bce:	b508      	push	{r3, lr}
{
  this->resetFields();
 80a1bd0:	f7ff ffee 	bl	80a1bb0 <_ZN5Servo11resetFieldsEv>
}
 80a1bd4:	bd08      	pop	{r3, pc}

080a1bd6 <_ZN5Servo6detachEv>:

  return true;
}

bool Servo::detach()
{
 80a1bd6:	b510      	push	{r4, lr}
 80a1bd8:	4604      	mov	r4, r0
 80a1bda:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
 80a1bde:	1c43      	adds	r3, r0, #1
 80a1be0:	d007      	beq.n	80a1bf2 <_ZN5Servo6detachEv+0x1c>
  {
    return false;
  }

  HAL_Servo_Detach(this->pin);
 80a1be2:	b280      	uxth	r0, r0
 80a1be4:	f7ff fef4 	bl	80a19d0 <HAL_Servo_Detach>

  this->resetFields();
 80a1be8:	4620      	mov	r0, r4
 80a1bea:	f7ff ffe1 	bl	80a1bb0 <_ZN5Servo11resetFieldsEv>

  return true;
 80a1bee:	2001      	movs	r0, #1
 80a1bf0:	bd10      	pop	{r4, pc}

bool Servo::detach()
{
  if (!this->attached())
  {
    return false;
 80a1bf2:	2000      	movs	r0, #0
  HAL_Servo_Detach(this->pin);

  this->resetFields();

  return true;
}
 80a1bf4:	bd10      	pop	{r4, pc}

080a1bf6 <_ZN5Servo6attachEtttss>:
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a1bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1bfa:	460d      	mov	r5, r1
 80a1bfc:	4604      	mov	r4, r0

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a1bfe:	2102      	movs	r1, #2
 80a1c00:	4628      	mov	r0, r5
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a1c02:	4690      	mov	r8, r2
 80a1c04:	461f      	mov	r7, r3

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a1c06:	f7ff fdd9 	bl	80a17bc <HAL_Validate_Pin_Function>
 80a1c0a:	2802      	cmp	r0, #2
 80a1c0c:	d001      	beq.n	80a1c12 <_ZN5Servo6attachEtttss+0x1c>
  {
    return false;
 80a1c0e:	2600      	movs	r6, #0
 80a1c10:	e019      	b.n	80a1c46 <_ZN5Servo6attachEtttss+0x50>
  }

  // Safety check
  if (!pinAvailable(pin))
 80a1c12:	4628      	mov	r0, r5
 80a1c14:	f000 fe20 	bl	80a2858 <pinAvailable>
 80a1c18:	4606      	mov	r6, r0
 80a1c1a:	2800      	cmp	r0, #0
 80a1c1c:	d0f7      	beq.n	80a1c0e <_ZN5Servo6attachEtttss+0x18>
  {
    return false;
  }

  if (this->attached())
 80a1c1e:	f9b4 3000 	ldrsh.w	r3, [r4]
 80a1c22:	3301      	adds	r3, #1
 80a1c24:	d002      	beq.n	80a1c2c <_ZN5Servo6attachEtttss+0x36>
  {
    this->detach();
 80a1c26:	4620      	mov	r0, r4
 80a1c28:	f7ff ffd5 	bl	80a1bd6 <_ZN5Servo6detachEv>
  }

  this->pin = pin;
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a1c2c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  if (this->attached())
  {
    this->detach();
  }

  this->pin = pin;
 80a1c30:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a1c32:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
 80a1c34:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  {
    this->detach();
  }

  this->pin = pin;
  this->minPW = minPW;
 80a1c38:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
 80a1c3c:	80a7      	strh	r7, [r4, #4]
  this->minAngle = minAngle;
  this->maxAngle = maxAngle;
 80a1c3e:	8123      	strh	r3, [r4, #8]

  HAL_Servo_Attach(this->pin);
 80a1c40:	4628      	mov	r0, r5
 80a1c42:	f7ff febd 	bl	80a19c0 <HAL_Servo_Attach>

  return true;
}
 80a1c46:	4630      	mov	r0, r6
 80a1c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1c4c <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1c4c:	2000      	movs	r0, #0
 80a1c4e:	f7ff bf07 	b.w	80a1a60 <set_system_mode>

080a1c52 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c54:	4606      	mov	r6, r0
 80a1c56:	460d      	mov	r5, r1
 80a1c58:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1c5a:	2400      	movs	r4, #0
  while (size--) {
 80a1c5c:	42bd      	cmp	r5, r7
 80a1c5e:	d00c      	beq.n	80a1c7a <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1c60:	6833      	ldr	r3, [r6, #0]
 80a1c62:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1c66:	689b      	ldr	r3, [r3, #8]
 80a1c68:	4630      	mov	r0, r6
 80a1c6a:	4798      	blx	r3
     if (chunk>=0)
 80a1c6c:	2800      	cmp	r0, #0
 80a1c6e:	db01      	blt.n	80a1c74 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1c70:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1c72:	e7f3      	b.n	80a1c5c <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1c74:	2c00      	cmp	r4, #0
 80a1c76:	bf08      	it	eq
 80a1c78:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1c7a:	4620      	mov	r0, r4
 80a1c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1c7e <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1c7e:	b570      	push	{r4, r5, r6, lr}
 80a1c80:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1c82:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1c84:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1c86:	b149      	cbz	r1, 80a1c9c <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1c88:	f001 fc39 	bl	80a34fe <strlen>
 80a1c8c:	682b      	ldr	r3, [r5, #0]
 80a1c8e:	4602      	mov	r2, r0
 80a1c90:	4621      	mov	r1, r4
 80a1c92:	4628      	mov	r0, r5
    }
 80a1c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1c98:	68db      	ldr	r3, [r3, #12]
 80a1c9a:	4718      	bx	r3
    }
 80a1c9c:	bd70      	pop	{r4, r5, r6, pc}

080a1c9e <_ZN5Print5printEPKc>:
 80a1c9e:	b508      	push	{r3, lr}
 80a1ca0:	f7ff ffed 	bl	80a1c7e <_ZN5Print5writeEPKc>
 80a1ca4:	bd08      	pop	{r3, pc}

080a1ca6 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1ca6:	6803      	ldr	r3, [r0, #0]
 80a1ca8:	689b      	ldr	r3, [r3, #8]
 80a1caa:	4718      	bx	r3

080a1cac <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1cac:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1cae:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1cb0:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1cb2:	f7ff fff8 	bl	80a1ca6 <_ZN5Print5printEc>
  n += print('\n');
 80a1cb6:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1cb8:	4604      	mov	r4, r0
  n += print('\n');
 80a1cba:	4628      	mov	r0, r5
 80a1cbc:	f7ff fff3 	bl	80a1ca6 <_ZN5Print5printEc>
  return n;
}
 80a1cc0:	4420      	add	r0, r4
 80a1cc2:	bd38      	pop	{r3, r4, r5, pc}

080a1cc4 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1cc4:	b538      	push	{r3, r4, r5, lr}
 80a1cc6:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1cc8:	f7ff ffd9 	bl	80a1c7e <_ZN5Print5writeEPKc>
 80a1ccc:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1cce:	4628      	mov	r0, r5
 80a1cd0:	f7ff ffec 	bl	80a1cac <_ZN5Print7printlnEv>
  return n;
}
 80a1cd4:	4420      	add	r0, r4
 80a1cd6:	bd38      	pop	{r3, r4, r5, pc}

080a1cd8 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1cd8:	2a01      	cmp	r2, #1
 80a1cda:	bf98      	it	ls
 80a1cdc:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1cde:	b530      	push	{r4, r5, lr}
 80a1ce0:	460b      	mov	r3, r1
 80a1ce2:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1ce4:	2100      	movs	r1, #0
 80a1ce6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1cea:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1cee:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1cf2:	fb05 3312 	mls	r3, r5, r2, r3
 80a1cf6:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1cf8:	2b09      	cmp	r3, #9
 80a1cfa:	bf94      	ite	ls
 80a1cfc:	3330      	addls	r3, #48	; 0x30
 80a1cfe:	3337      	addhi	r3, #55	; 0x37
 80a1d00:	b2db      	uxtb	r3, r3
 80a1d02:	4621      	mov	r1, r4
 80a1d04:	f804 3901 	strb.w	r3, [r4], #-1
 80a1d08:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1d0a:	2d00      	cmp	r5, #0
 80a1d0c:	d1ef      	bne.n	80a1cee <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1d0e:	f7ff ffb6 	bl	80a1c7e <_ZN5Print5writeEPKc>
}
 80a1d12:	b00b      	add	sp, #44	; 0x2c
 80a1d14:	bd30      	pop	{r4, r5, pc}

080a1d16 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1d16:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1d18:	b922      	cbnz	r2, 80a1d24 <_ZN5Print5printEmi+0xe>
 80a1d1a:	6803      	ldr	r3, [r0, #0]
 80a1d1c:	b2c9      	uxtb	r1, r1
 80a1d1e:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1d20:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1d22:	4718      	bx	r3
  else return printNumber(n, base);
 80a1d24:	b2d2      	uxtb	r2, r2
}
 80a1d26:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1d28:	f7ff bfd6 	b.w	80a1cd8 <_ZN5Print11printNumberEmh>

080a1d2c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1d2c:	f7ff bff3 	b.w	80a1d16 <_ZN5Print5printEmi>

080a1d30 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a1d30:	b40c      	push	{r2, r3}
 80a1d32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1d36:	b087      	sub	sp, #28
 80a1d38:	af00      	add	r7, sp, #0
 80a1d3a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a1d3e:	f854 9b04 	ldr.w	r9, [r4], #4
 80a1d42:	4605      	mov	r5, r0
 80a1d44:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1d46:	4623      	mov	r3, r4
 80a1d48:	464a      	mov	r2, r9
 80a1d4a:	2114      	movs	r1, #20
 80a1d4c:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a1d4e:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1d50:	f7ff feee 	bl	80a1b30 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a1d54:	2813      	cmp	r0, #19
 80a1d56:	d805      	bhi.n	80a1d64 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1d58:	1d39      	adds	r1, r7, #4
 80a1d5a:	4628      	mov	r0, r5
 80a1d5c:	f7ff ff8f 	bl	80a1c7e <_ZN5Print5writeEPKc>
 80a1d60:	4604      	mov	r4, r0
 80a1d62:	e013      	b.n	80a1d8c <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1d64:	f100 0308 	add.w	r3, r0, #8
 80a1d68:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a1d6c:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1d6e:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a1d72:	1c41      	adds	r1, r0, #1
 80a1d74:	4623      	mov	r3, r4
 80a1d76:	464a      	mov	r2, r9
 80a1d78:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a1d7a:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a1d7c:	f7ff fed8 	bl	80a1b30 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1d80:	4669      	mov	r1, sp
 80a1d82:	4628      	mov	r0, r5
 80a1d84:	f7ff ff7b 	bl	80a1c7e <_ZN5Print5writeEPKc>
 80a1d88:	4604      	mov	r4, r0
 80a1d8a:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a1d8c:	b11e      	cbz	r6, 80a1d96 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a1d8e:	4628      	mov	r0, r5
 80a1d90:	f7ff ff8c 	bl	80a1cac <_ZN5Print7printlnEv>
 80a1d94:	4404      	add	r4, r0
    return n;
}
 80a1d96:	4620      	mov	r0, r4
 80a1d98:	371c      	adds	r7, #28
 80a1d9a:	46bd      	mov	sp, r7
 80a1d9c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1da0:	b002      	add	sp, #8
 80a1da2:	4770      	bx	lr

080a1da4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a1da4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a1da6:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a1da8:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a1daa:	b17c      	cbz	r4, 80a1dcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a1dac:	6863      	ldr	r3, [r4, #4]
 80a1dae:	3b01      	subs	r3, #1
 80a1db0:	6063      	str	r3, [r4, #4]
 80a1db2:	b95b      	cbnz	r3, 80a1dcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a1db4:	6823      	ldr	r3, [r4, #0]
 80a1db6:	4620      	mov	r0, r4
 80a1db8:	689b      	ldr	r3, [r3, #8]
 80a1dba:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1dbc:	68a3      	ldr	r3, [r4, #8]
 80a1dbe:	3b01      	subs	r3, #1
 80a1dc0:	60a3      	str	r3, [r4, #8]
 80a1dc2:	b91b      	cbnz	r3, 80a1dcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a1dc4:	6823      	ldr	r3, [r4, #0]
 80a1dc6:	4620      	mov	r0, r4
 80a1dc8:	68db      	ldr	r3, [r3, #12]
 80a1dca:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a1dcc:	4628      	mov	r0, r5
 80a1dce:	bd38      	pop	{r3, r4, r5, pc}

080a1dd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a1dd0:	680b      	ldr	r3, [r1, #0]
 80a1dd2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a1dd4:	b113      	cbz	r3, 80a1ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a1dd6:	685a      	ldr	r2, [r3, #4]
 80a1dd8:	3201      	adds	r2, #1
 80a1dda:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a1ddc:	4770      	bx	lr
	...

080a1de0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1de0:	4a01      	ldr	r2, [pc, #4]	; (80a1de8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1de2:	4b02      	ldr	r3, [pc, #8]	; (80a1dec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1de4:	601a      	str	r2, [r3, #0]
 80a1de6:	4770      	bx	lr
 80a1de8:	080a36c0 	.word	0x080a36c0
 80a1dec:	200003d8 	.word	0x200003d8

080a1df0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1df0:	4b02      	ldr	r3, [pc, #8]	; (80a1dfc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1df2:	681a      	ldr	r2, [r3, #0]
 80a1df4:	4b02      	ldr	r3, [pc, #8]	; (80a1e00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1df6:	601a      	str	r2, [r3, #0]
 80a1df8:	4770      	bx	lr
 80a1dfa:	bf00      	nop
 80a1dfc:	20000334 	.word	0x20000334
 80a1e00:	200003dc 	.word	0x200003dc

080a1e04 <delay>:
  return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1e04:	2100      	movs	r1, #0
 80a1e06:	f7ff be33 	b.w	80a1a70 <system_delay_ms>
	...

080a1e0c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1e0c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1e0e:	4b14      	ldr	r3, [pc, #80]	; (80a1e60 <serialEventRun+0x54>)
 80a1e10:	b133      	cbz	r3, 80a1e20 <serialEventRun+0x14>
 80a1e12:	f000 fb9d 	bl	80a2550 <_Z16_fetch_usbserialv>
 80a1e16:	6803      	ldr	r3, [r0, #0]
 80a1e18:	691b      	ldr	r3, [r3, #16]
 80a1e1a:	4798      	blx	r3
 80a1e1c:	2800      	cmp	r0, #0
 80a1e1e:	dc16      	bgt.n	80a1e4e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1e20:	4b10      	ldr	r3, [pc, #64]	; (80a1e64 <serialEventRun+0x58>)
 80a1e22:	b133      	cbz	r3, 80a1e32 <serialEventRun+0x26>
 80a1e24:	f000 fc62 	bl	80a26ec <_Z22__fetch_global_Serial1v>
 80a1e28:	6803      	ldr	r3, [r0, #0]
 80a1e2a:	691b      	ldr	r3, [r3, #16]
 80a1e2c:	4798      	blx	r3
 80a1e2e:	2800      	cmp	r0, #0
 80a1e30:	dc10      	bgt.n	80a1e54 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1e32:	4b0d      	ldr	r3, [pc, #52]	; (80a1e68 <serialEventRun+0x5c>)
 80a1e34:	b10b      	cbz	r3, 80a1e3a <serialEventRun+0x2e>
 80a1e36:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1e3a:	4b0c      	ldr	r3, [pc, #48]	; (80a1e6c <serialEventRun+0x60>)
 80a1e3c:	b17b      	cbz	r3, 80a1e5e <serialEventRun+0x52>
 80a1e3e:	f000 fbc3 	bl	80a25c8 <_Z17_fetch_usbserial1v>
 80a1e42:	6803      	ldr	r3, [r0, #0]
 80a1e44:	691b      	ldr	r3, [r3, #16]
 80a1e46:	4798      	blx	r3
 80a1e48:	2800      	cmp	r0, #0
 80a1e4a:	dc06      	bgt.n	80a1e5a <serialEventRun+0x4e>
 80a1e4c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1e4e:	f3af 8000 	nop.w
 80a1e52:	e7e5      	b.n	80a1e20 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1e54:	f3af 8000 	nop.w
 80a1e58:	e7eb      	b.n	80a1e32 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1e5a:	f3af 8000 	nop.w
 80a1e5e:	bd08      	pop	{r3, pc}
	...

080a1e70 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1e70:	b508      	push	{r3, lr}
	serialEventRun();
 80a1e72:	f7ff ffcb 	bl	80a1e0c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1e76:	f7ff fcf1 	bl	80a185c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1e7a:	4b01      	ldr	r3, [pc, #4]	; (80a1e80 <_post_loop+0x10>)
 80a1e7c:	6018      	str	r0, [r3, #0]
 80a1e7e:	bd08      	pop	{r3, pc}
 80a1e80:	20000868 	.word	0x20000868

080a1e84 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1e84:	4802      	ldr	r0, [pc, #8]	; (80a1e90 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1e86:	4a03      	ldr	r2, [pc, #12]	; (80a1e94 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1e88:	4903      	ldr	r1, [pc, #12]	; (80a1e98 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1e8a:	1a12      	subs	r2, r2, r0
 80a1e8c:	f001 bb24 	b.w	80a34d8 <memcpy>
 80a1e90:	40024000 	.word	0x40024000
 80a1e94:	40024004 	.word	0x40024004
 80a1e98:	080a3830 	.word	0x080a3830

080a1e9c <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80a1e9c:	2000      	movs	r0, #0
 80a1e9e:	4770      	bx	lr

080a1ea0 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a1ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80a1ea2:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a1ea4:	4604      	mov	r4, r0
    switch (req->type) {
 80a1ea6:	2b0a      	cmp	r3, #10
 80a1ea8:	d00e      	beq.n	80a1ec8 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 80a1eaa:	2b50      	cmp	r3, #80	; 0x50
 80a1eac:	d11c      	bne.n	80a1ee8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80a1eae:	4b10      	ldr	r3, [pc, #64]	; (80a1ef0 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80a1eb0:	681d      	ldr	r5, [r3, #0]
 80a1eb2:	b1cd      	cbz	r5, 80a1ee8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 80a1eb4:	7d03      	ldrb	r3, [r0, #20]
 80a1eb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a1eba:	9300      	str	r3, [sp, #0]
 80a1ebc:	68c2      	ldr	r2, [r0, #12]
 80a1ebe:	f100 0310 	add.w	r3, r0, #16
 80a1ec2:	6880      	ldr	r0, [r0, #8]
 80a1ec4:	47a8      	blx	r5
 80a1ec6:	e007      	b.n	80a1ed8 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80a1ec8:	f100 0310 	add.w	r3, r0, #16
 80a1ecc:	68c2      	ldr	r2, [r0, #12]
 80a1ece:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a1ed2:	6880      	ldr	r0, [r0, #8]
 80a1ed4:	f7ff ffe2 	bl	80a1e9c <_Z26usb_request_custom_handlerPcjjPj>
 80a1ed8:	b130      	cbz	r0, 80a1ee8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80a1eda:	2200      	movs	r2, #0
 80a1edc:	4620      	mov	r0, r4
 80a1ede:	4611      	mov	r1, r2
 80a1ee0:	f7ff fdee 	bl	80a1ac0 <system_set_usb_request_result>
        return true;
 80a1ee4:	2001      	movs	r0, #1
 80a1ee6:	e000      	b.n	80a1eea <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80a1ee8:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80a1eea:	b003      	add	sp, #12
 80a1eec:	bd30      	pop	{r4, r5, pc}
 80a1eee:	bf00      	nop
 80a1ef0:	200003e0 	.word	0x200003e0

080a1ef4 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80a1ef4:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1ef6:	4c0c      	ldr	r4, [pc, #48]	; (80a1f28 <module_user_init_hook+0x34>)
 80a1ef8:	4d0c      	ldr	r5, [pc, #48]	; (80a1f2c <module_user_init_hook+0x38>)
 80a1efa:	6823      	ldr	r3, [r4, #0]
 80a1efc:	42ab      	cmp	r3, r5
 80a1efe:	4b0c      	ldr	r3, [pc, #48]	; (80a1f30 <module_user_init_hook+0x3c>)
 80a1f00:	bf0c      	ite	eq
 80a1f02:	2201      	moveq	r2, #1
 80a1f04:	2200      	movne	r2, #0
 80a1f06:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1f08:	d002      	beq.n	80a1f10 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1f0a:	f7ff ffbb 	bl	80a1e84 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1f0e:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a1f10:	4b08      	ldr	r3, [pc, #32]	; (80a1f34 <module_user_init_hook+0x40>)
 80a1f12:	b11b      	cbz	r3, 80a1f1c <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1f14:	f7ff fc9a 	bl	80a184c <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a1f18:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80a1f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80a1f20:	2100      	movs	r1, #0
 80a1f22:	4805      	ldr	r0, [pc, #20]	; (80a1f38 <module_user_init_hook+0x44>)
 80a1f24:	f7ff bdc4 	b.w	80a1ab0 <system_set_usb_request_app_handler>
 80a1f28:	40024000 	.word	0x40024000
 80a1f2c:	9a271c1e 	.word	0x9a271c1e
 80a1f30:	200003e4 	.word	0x200003e4
 80a1f34:	00000000 	.word	0x00000000
 80a1f38:	080a1ea1 	.word	0x080a1ea1

080a1f3c <_ZNSt15_Sp_counted_ptrIPN5spark6detail10FutureImplIvNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1f3c:	4770      	bx	lr

080a1f3e <_ZNSt15_Sp_counted_ptrIPN5spark6detail10FutureImplIvNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }
 80a1f3e:	68c0      	ldr	r0, [r0, #12]
 80a1f40:	b110      	cbz	r0, 80a1f48 <_ZNSt15_Sp_counted_ptrIPN5spark6detail10FutureImplIvNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xa>
 80a1f42:	6803      	ldr	r3, [r0, #0]
 80a1f44:	685b      	ldr	r3, [r3, #4]
 80a1f46:	4718      	bx	r3
 80a1f48:	4770      	bx	lr

080a1f4a <_ZNSt15_Sp_counted_ptrIPN5spark6detail10FutureImplIvNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a1f4a:	2000      	movs	r0, #0
 80a1f4c:	4770      	bx	lr

080a1f4e <_ZNSt15_Sp_counted_ptrIPN5spark6detail10FutureImplIvNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1f4e:	b510      	push	{r4, lr}
 80a1f50:	4604      	mov	r4, r0
 80a1f52:	f7fe f8a4 	bl	80a009e <_ZdlPv>
 80a1f56:	4620      	mov	r0, r4
 80a1f58:	bd10      	pop	{r4, pc}

080a1f5a <_ZNSt15_Sp_counted_ptrIPN5spark6detail10FutureImplIvNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a1f5a:	b508      	push	{r3, lr}
      { delete this; }
 80a1f5c:	b108      	cbz	r0, 80a1f62 <_ZNSt15_Sp_counted_ptrIPN5spark6detail10FutureImplIvNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a1f5e:	f7ff fff6 	bl	80a1f4e <_ZNSt15_Sp_counted_ptrIPN5spark6detail10FutureImplIvNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a1f62:	bd08      	pop	{r3, pc}

080a1f64 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1f64:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1f66:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1f68:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1f6a:	b113      	cbz	r3, 80a1f72 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1f6c:	2203      	movs	r2, #3
 80a1f6e:	4601      	mov	r1, r0
 80a1f70:	4798      	blx	r3
    }
 80a1f72:	4620      	mov	r0, r4
 80a1f74:	bd10      	pop	{r4, pc}
	...

080a1f78 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEED1Ev>:
            done_(state != State::RUNNING),
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    virtual ~FutureImplBase() {
 80a1f78:	b538      	push	{r3, r4, r5, lr}
        // Do we need to use restricted memory ordering in destructor, assuming that FutureImplBase instances are
        // always managed by std::shared_ptr?
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }
 80a1f7a:	4b0a      	ldr	r3, [pc, #40]	; (80a1fa4 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEED1Ev+0x2c>)
            done_(state != State::RUNNING),
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    virtual ~FutureImplBase() {
 80a1f7c:	4604      	mov	r4, r0
        // Do we need to use restricted memory ordering in destructor, assuming that FutureImplBase instances are
        // always managed by std::shared_ptr?
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }
 80a1f7e:	6003      	str	r3, [r0, #0]
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a1f80:	68c5      	ldr	r5, [r0, #12]
    }

    virtual ~FutureImplBase() {
        // Do we need to use restricted memory ordering in destructor, assuming that FutureImplBase instances are
        // always managed by std::shared_ptr?
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1f82:	b12d      	cbz	r5, 80a1f90 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEED1Ev+0x18>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1f84:	4628      	mov	r0, r5
 80a1f86:	f7ff ffed 	bl	80a1f64 <_ZNSt14_Function_baseD1Ev>
 80a1f8a:	4628      	mov	r0, r5
 80a1f8c:	f7fe f887 	bl	80a009e <_ZdlPv>
 80a1f90:	6925      	ldr	r5, [r4, #16]
        delete onError_.load(std::memory_order_relaxed);
 80a1f92:	b12d      	cbz	r5, 80a1fa0 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEED1Ev+0x28>
 80a1f94:	4628      	mov	r0, r5
 80a1f96:	f7ff ffe5 	bl	80a1f64 <_ZNSt14_Function_baseD1Ev>
 80a1f9a:	4628      	mov	r0, r5
 80a1f9c:	f7fe f87f 	bl	80a009e <_ZdlPv>
    }
 80a1fa0:	4620      	mov	r0, r4
 80a1fa2:	bd38      	pop	{r3, r4, r5, pc}
 80a1fa4:	080a371c 	.word	0x080a371c

080a1fa8 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEED0Ev>:
            done_(state != State::RUNNING),
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    virtual ~FutureImplBase() {
 80a1fa8:	b510      	push	{r4, lr}
 80a1faa:	4604      	mov	r4, r0
        // Do we need to use restricted memory ordering in destructor, assuming that FutureImplBase instances are
        // always managed by std::shared_ptr?
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }
 80a1fac:	f7ff ffe4 	bl	80a1f78 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEED1Ev>
 80a1fb0:	4620      	mov	r0, r4
 80a1fb2:	f7fe f874 	bl	80a009e <_ZdlPv>
 80a1fb6:	4620      	mov	r0, r4
 80a1fb8:	bd10      	pop	{r4, pc}
	...

080a1fbc <_ZN5spark6detail10FutureImplIvNS0_13FutureContextEED1Ev>:
    };
};

// Internal future implementation. Specialization for void result type
template<typename ContextT>
class FutureImpl<void, ContextT>: public FutureImplBase<void, ContextT> {
 80a1fbc:	b510      	push	{r4, lr}
 80a1fbe:	4604      	mov	r4, r0
 80a1fc0:	4b02      	ldr	r3, [pc, #8]	; (80a1fcc <_ZN5spark6detail10FutureImplIvNS0_13FutureContextEED1Ev+0x10>)
 80a1fc2:	6003      	str	r3, [r0, #0]
 80a1fc4:	f7ff ffd8 	bl	80a1f78 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEED1Ev>
 80a1fc8:	4620      	mov	r0, r4
 80a1fca:	bd10      	pop	{r4, pc}
 80a1fcc:	080a372c 	.word	0x080a372c

080a1fd0 <_ZN5spark6detail10FutureImplIvNS0_13FutureContextEED0Ev>:
 80a1fd0:	b510      	push	{r4, lr}
 80a1fd2:	4604      	mov	r4, r0
 80a1fd4:	f7ff fff2 	bl	80a1fbc <_ZN5spark6detail10FutureImplIvNS0_13FutureContextEED1Ev>
 80a1fd8:	4620      	mov	r0, r4
 80a1fda:	f7fe f860 	bl	80a009e <_ZdlPv>
 80a1fde:	4620      	mov	r0, r4
 80a1fe0:	bd10      	pop	{r4, pc}

080a1fe2 <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1fe2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1fe4:	2300      	movs	r3, #0
 80a1fe6:	6083      	str	r3, [r0, #8]
 80a1fe8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1fea:	4604      	mov	r4, r0
 80a1fec:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1fee:	b12b      	cbz	r3, 80a1ffc <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1ff0:	2202      	movs	r2, #2
 80a1ff2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1ff4:	68eb      	ldr	r3, [r5, #12]
 80a1ff6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1ff8:	68ab      	ldr	r3, [r5, #8]
 80a1ffa:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1ffc:	4620      	mov	r0, r4
 80a1ffe:	bd38      	pop	{r3, r4, r5, pc}

080a2000 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvvEEvEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2000:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2002:	b570      	push	{r4, r5, r6, lr}
 80a2004:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2006:	d006      	beq.n	80a2016 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvvEEvEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x16>
 80a2008:	2a03      	cmp	r2, #3
 80a200a:	d00f      	beq.n	80a202c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvvEEvEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x2c>
 80a200c:	2a01      	cmp	r2, #1
 80a200e:	d115      	bne.n	80a203c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvvEEvEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x3c>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2010:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a2012:	6003      	str	r3, [r0, #0]
	      break;
 80a2014:	e012      	b.n	80a203c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvvEEvEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x3c>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2016:	2014      	movs	r0, #20
 80a2018:	680e      	ldr	r6, [r1, #0]
 80a201a:	f7fe f83e 	bl	80a009a <_Znwj>
 80a201e:	4605      	mov	r5, r0
 80a2020:	b110      	cbz	r0, 80a2028 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvvEEvEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x28>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a2022:	4631      	mov	r1, r6
 80a2024:	f7ff ffdd 	bl	80a1fe2 <_ZNSt8functionIFvvEEC1ERKS1_>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2028:	6025      	str	r5, [r4, #0]
 80a202a:	e007      	b.n	80a203c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvvEEvEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x3c>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a202c:	6804      	ldr	r4, [r0, #0]
 80a202e:	b12c      	cbz	r4, 80a203c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvvEEvEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x3c>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2030:	4620      	mov	r0, r4
 80a2032:	f7ff ff97 	bl	80a1f64 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2036:	4620      	mov	r0, r4
 80a2038:	f7fe f831 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a203c:	2000      	movs	r0, #0
 80a203e:	bd70      	pop	{r4, r5, r6, pc}

080a2040 <_ZNKSt8functionIFvvEEclEv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2040:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a2042:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2044:	b90a      	cbnz	r2, 80a204a <_ZNKSt8functionIFvvEEclEv+0xa>
	__throw_bad_function_call();
 80a2046:	f000 fcc8 	bl	80a29da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a204a:	68c3      	ldr	r3, [r0, #12]
    }
 80a204c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2050:	4718      	bx	r3

080a2052 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIS0_EvEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a2052:	b508      	push	{r3, lr}
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a2054:	6800      	ldr	r0, [r0, #0]
 80a2056:	f7ff fff3 	bl	80a2040 <_ZNKSt8functionIFvvEEclEv>
 80a205a:	bd08      	pop	{r3, pc}

080a205c <_ZN5spark6FutureIvNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIvS2_EEE>:
template<typename ContextT>
class Future<void, ContextT>: public FutureBase<void, ContextT> {
public:
    using typename FutureBase<void, ContextT>::State;

    using FutureBase<void, ContextT>::FutureBase;
 80a205c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a205e:	4605      	mov	r5, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a2060:	6848      	ldr	r0, [r1, #4]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a2062:	ac02      	add	r4, sp, #8
 80a2064:	f844 0d04 	str.w	r0, [r4, #-4]!
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2068:	4628      	mov	r0, r5
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a206a:	680b      	ldr	r3, [r1, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a206c:	2200      	movs	r2, #0
 80a206e:	604a      	str	r2, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2070:	600a      	str	r2, [r1, #0]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2072:	f840 3b04 	str.w	r3, [r0], #4
 80a2076:	4621      	mov	r1, r4
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2078:	9300      	str	r3, [sp, #0]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a207a:	f7ff fea9 	bl	80a1dd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a207e:	4620      	mov	r0, r4
 80a2080:	f7ff fe90 	bl	80a1da4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2084:	4628      	mov	r0, r5
 80a2086:	b003      	add	sp, #12
 80a2088:	bd30      	pop	{r4, r5, pc}

080a208a <_ZN5spark11PromiseBaseIvNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a208a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a208c:	460c      	mov	r4, r1
 80a208e:	4606      	mov	r6, r0
 80a2090:	460f      	mov	r7, r1
 80a2092:	f854 3b04 	ldr.w	r3, [r4], #4
 80a2096:	ad02      	add	r5, sp, #8
 80a2098:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a209c:	4621      	mov	r1, r4
 80a209e:	a801      	add	r0, sp, #4
 80a20a0:	f7ff fe96 	bl	80a1dd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a20a4:	4629      	mov	r1, r5
 80a20a6:	4630      	mov	r0, r6
 80a20a8:	f7ff ffd8 	bl	80a205c <_ZN5spark6FutureIvNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIvS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a20ac:	a801      	add	r0, sp, #4
 80a20ae:	f7ff fe79 	bl	80a1da4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a20b2:	4620      	mov	r0, r4
 80a20b4:	f7ff fe76 	bl	80a1da4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a20b8:	4638      	mov	r0, r7
 80a20ba:	f7fd fff0 	bl	80a009e <_ZdlPv>
        return p;
    }
 80a20be:	4630      	mov	r0, r6
 80a20c0:	b003      	add	sp, #12
 80a20c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a20c4 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a20c4:	b513      	push	{r0, r1, r4, lr}
 80a20c6:	460b      	mov	r3, r1
 80a20c8:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a20ca:	c803      	ldmia	r0, {r0, r1}
 80a20cc:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a20d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a20d4:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a20d8:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a20dc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a20e0:	b002      	add	sp, #8
 80a20e2:	bd10      	pop	{r4, pc}

080a20e4 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a20e4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a20e6:	f3bf 8f5f 	dmb	sy
 80a20ea:	b087      	sub	sp, #28
 80a20ec:	2300      	movs	r3, #0
 80a20ee:	e850 6f00 	ldrex	r6, [r0]
 80a20f2:	e840 3200 	strex	r2, r3, [r0]
 80a20f6:	2a00      	cmp	r2, #0
 80a20f8:	d1f9      	bne.n	80a20ee <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa>
 80a20fa:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a20fe:	2e00      	cmp	r6, #0
 80a2100:	d037      	beq.n	80a2172 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x8e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a2102:	4618      	mov	r0, r3
 80a2104:	f7ff fcc4 	bl	80a1a90 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a2108:	4607      	mov	r7, r0
 80a210a:	b118      	cbz	r0, 80a2114 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x30>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a210c:	4630      	mov	r0, r6
 80a210e:	f7ff ff97 	bl	80a2040 <_ZNKSt8functionIFvvEEclEv>
 80a2112:	e028      	b.n	80a2166 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2114:	4631      	mov	r1, r6
 80a2116:	a801      	add	r0, sp, #4
 80a2118:	f7ff ff63 	bl	80a1fe2 <_ZNSt8functionIFvvEEC1ERKS1_>
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a211c:	2010      	movs	r0, #16
 80a211e:	f7fd ffbc 	bl	80a009a <_Znwj>
 80a2122:	4605      	mov	r5, r0
 80a2124:	b1b8      	cbz	r0, 80a2156 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x72>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2126:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2128:	2014      	movs	r0, #20
 80a212a:	f7fd ffb6 	bl	80a009a <_Znwj>
 80a212e:	4604      	mov	r4, r0
 80a2130:	b160      	cbz	r0, 80a214c <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x68>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2132:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2134:	4601      	mov	r1, r0
 80a2136:	a801      	add	r0, sp, #4
 80a2138:	f7ff ffc4 	bl	80a20c4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a213c:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a213e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2140:	60a3      	str	r3, [r4, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2142:	9203      	str	r2, [sp, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2144:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2146:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2148:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a214a:	9204      	str	r2, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a214c:	4b0a      	ldr	r3, [pc, #40]	; (80a2178 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x94>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a214e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2150:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a2152:	4b0a      	ldr	r3, [pc, #40]	; (80a217c <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x98>)
 80a2154:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2156:	a801      	add	r0, sp, #4
 80a2158:	f7ff ff04 	bl	80a1f64 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a215c:	2200      	movs	r2, #0
 80a215e:	4629      	mov	r1, r5
 80a2160:	4807      	ldr	r0, [pc, #28]	; (80a2180 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9c>)
 80a2162:	f7ff fc9d 	bl	80a1aa0 <application_thread_invoke>
 80a2166:	4630      	mov	r0, r6
 80a2168:	f7ff fefc 	bl	80a1f64 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a216c:	4630      	mov	r0, r6
 80a216e:	f7fd ff96 	bl	80a009e <_ZdlPv>
        }
    }
 80a2172:	b007      	add	sp, #28
 80a2174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2176:	bf00      	nop
 80a2178:	080a2053 	.word	0x080a2053
 80a217c:	080a2001 	.word	0x080a2001
 80a2180:	080a2739 	.word	0x080a2739

080a2184 <_ZNKSt8functionIFvRKN5spark5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2184:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a2186:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2188:	b90a      	cbnz	r2, 80a218e <_ZNKSt8functionIFvRKN5spark5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a218a:	f000 fc26 	bl	80a29da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a218e:	68c3      	ldr	r3, [r0, #12]
    }
 80a2190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2194:	4718      	bx	r3

080a2196 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN5spark5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a2196:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2198:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a219a:	f100 0110 	add.w	r1, r0, #16
 80a219e:	f7ff fff1 	bl	80a2184 <_ZNKSt8functionIFvRKN5spark5ErrorEEEclES3_>
 80a21a2:	bd08      	pop	{r3, pc}

080a21a4 <_ZNSt8functionIFvRKN5spark5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a21a4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a21a6:	2300      	movs	r3, #0
 80a21a8:	6083      	str	r3, [r0, #8]
 80a21aa:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a21ac:	4604      	mov	r4, r0
 80a21ae:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a21b0:	b12b      	cbz	r3, 80a21be <_ZNSt8functionIFvRKN5spark5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a21b2:	2202      	movs	r2, #2
 80a21b4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a21b6:	68eb      	ldr	r3, [r5, #12]
 80a21b8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a21ba:	68ab      	ldr	r3, [r5, #8]
 80a21bc:	60a3      	str	r3, [r4, #8]
	}
    }
 80a21be:	4620      	mov	r0, r4
 80a21c0:	bd38      	pop	{r3, r4, r5, pc}

080a21c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN5spark5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a21c2:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a21c4:	b570      	push	{r4, r5, r6, lr}
 80a21c6:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a21c8:	d006      	beq.n	80a21d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN5spark5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a21ca:	2a03      	cmp	r2, #3
 80a21cc:	d011      	beq.n	80a21f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN5spark5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x30>
 80a21ce:	2a01      	cmp	r2, #1
 80a21d0:	d117      	bne.n	80a2202 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN5spark5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a21d2:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a21d4:	6003      	str	r3, [r0, #0]
	      break;
 80a21d6:	e014      	b.n	80a2202 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN5spark5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a21d8:	2014      	movs	r0, #20
 80a21da:	680e      	ldr	r6, [r1, #0]
 80a21dc:	f7fd ff5d 	bl	80a009a <_Znwj>
 80a21e0:	4605      	mov	r5, r0
 80a21e2:	b120      	cbz	r0, 80a21ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN5spark5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a21e4:	4631      	mov	r1, r6
 80a21e6:	f7ff ffdd 	bl	80a21a4 <_ZNSt8functionIFvRKN5spark5ErrorEEEC1ERKS5_>
 80a21ea:	8a33      	ldrh	r3, [r6, #16]
 80a21ec:	822b      	strh	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a21ee:	6025      	str	r5, [r4, #0]
 80a21f0:	e007      	b.n	80a2202 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN5spark5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a21f2:	6804      	ldr	r4, [r0, #0]
 80a21f4:	b12c      	cbz	r4, 80a2202 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN5spark5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a21f6:	4620      	mov	r0, r4
 80a21f8:	f7ff feb4 	bl	80a1f64 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a21fc:	4620      	mov	r0, r4
 80a21fe:	f7fd ff4e 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a2202:	2000      	movs	r0, #0
 80a2204:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2208 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a2208:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a220a:	460c      	mov	r4, r1
 80a220c:	f3bf 8f5f 	dmb	sy
 80a2210:	b087      	sub	sp, #28
 80a2212:	2300      	movs	r3, #0
 80a2214:	e850 6f00 	ldrex	r6, [r0]
 80a2218:	e840 3200 	strex	r2, r3, [r0]
 80a221c:	2a00      	cmp	r2, #0
 80a221e:	d1f9      	bne.n	80a2214 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a2220:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a2224:	2e00      	cmp	r6, #0
 80a2226:	d03e      	beq.n	80a22a6 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a2228:	4618      	mov	r0, r3
 80a222a:	f7ff fc31 	bl	80a1a90 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a222e:	4607      	mov	r7, r0
 80a2230:	b120      	cbz	r0, 80a223c <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2232:	4621      	mov	r1, r4
 80a2234:	4630      	mov	r0, r6
 80a2236:	f7ff ffa5 	bl	80a2184 <_ZNKSt8functionIFvRKN5spark5ErrorEEEclES3_>
 80a223a:	e02e      	b.n	80a229a <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a223c:	4631      	mov	r1, r6
 80a223e:	a801      	add	r0, sp, #4
 80a2240:	f7ff ffb0 	bl	80a21a4 <_ZNSt8functionIFvRKN5spark5ErrorEEEC1ERKS5_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a2244:	8823      	ldrh	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2246:	2010      	movs	r0, #16
 80a2248:	f8ad 3014 	strh.w	r3, [sp, #20]
 80a224c:	f7fd ff25 	bl	80a009a <_Znwj>
 80a2250:	4605      	mov	r5, r0
 80a2252:	b1d0      	cbz	r0, 80a228a <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2254:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2256:	2014      	movs	r0, #20
 80a2258:	f7fd ff1f 	bl	80a009a <_Znwj>
 80a225c:	4604      	mov	r4, r0
 80a225e:	b178      	cbz	r0, 80a2280 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2260:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2262:	4601      	mov	r1, r0
 80a2264:	a801      	add	r0, sp, #4
 80a2266:	f7ff ff2d 	bl	80a20c4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a226a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a226c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a226e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2270:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2272:	9203      	str	r2, [sp, #12]
 80a2274:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2276:	60e3      	str	r3, [r4, #12]
 80a2278:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a227c:	9204      	str	r2, [sp, #16]
 80a227e:	8223      	strh	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2280:	4b0a      	ldr	r3, [pc, #40]	; (80a22ac <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2282:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2284:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a2286:	4b0a      	ldr	r3, [pc, #40]	; (80a22b0 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a2288:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a228a:	a801      	add	r0, sp, #4
 80a228c:	f7ff fe6a 	bl	80a1f64 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2290:	2200      	movs	r2, #0
 80a2292:	4629      	mov	r1, r5
 80a2294:	4807      	ldr	r0, [pc, #28]	; (80a22b4 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a2296:	f7ff fc03 	bl	80a1aa0 <application_thread_invoke>
 80a229a:	4630      	mov	r0, r6
 80a229c:	f7ff fe62 	bl	80a1f64 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a22a0:	4630      	mov	r0, r6
 80a22a2:	f7fd fefc 	bl	80a009e <_ZdlPv>
        }
    }
 80a22a6:	b007      	add	sp, #28
 80a22a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a22aa:	bf00      	nop
 80a22ac:	080a2197 	.word	0x080a2197
 80a22b0:	080a21c3 	.word	0x080a21c3
 80a22b4:	080a2739 	.word	0x080a2739

080a22b8 <_ZN5spark6detail10FutureImplIvNS0_13FutureContextEE8setErrorENS_5ErrorE>:
            this->releaseDone();
            this->invokeCallback(this->onSuccess_);
        }
    }

    void setError(Error error) {
 80a22b8:	b513      	push	{r0, r1, r4, lr}
    std::atomic<bool> done_; // Flag signaling that future is in a final state
    std::atomic<typename FutureCallbackTypes<ResultT>::OnSuccess*> onSuccess_; // User callback for succeeded operation
    std::atomic<typename FutureCallbackTypes<ResultT>::OnError*> onError_; // User callback for failed operation

    bool exchangeState(State state) {
        State s = State::RUNNING; // Expected state
 80a22ba:	2300      	movs	r3, #0
 80a22bc:	9301      	str	r3, [sp, #4]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a22be:	2202      	movs	r2, #2
 80a22c0:	1d03      	adds	r3, r0, #4
 80a22c2:	e853 4f00 	ldrex	r4, [r3]
 80a22c6:	2c00      	cmp	r4, #0
 80a22c8:	d104      	bne.n	80a22d4 <_ZN5spark6detail10FutureImplIvNS0_13FutureContextEE8setErrorENS_5ErrorE+0x1c>
 80a22ca:	e843 2e00 	strex	lr, r2, [r3]
 80a22ce:	f1be 0f00 	cmp.w	lr, #0
 80a22d2:	d1f6      	bne.n	80a22c2 <_ZN5spark6detail10FutureImplIvNS0_13FutureContextEE8setErrorENS_5ErrorE+0xa>
 80a22d4:	d109      	bne.n	80a22ea <_ZN5spark6detail10FutureImplIvNS0_13FutureContextEE8setErrorENS_5ErrorE+0x32>
        }
    }

    void setError(Error error) {
        if (this->exchangeState(State::FAILED)) {
            error_ = std::move(error);
 80a22d6:	8281      	strh	r1, [r0, #20]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a22d8:	2301      	movs	r3, #1
 80a22da:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onError_, error_);
 80a22de:	f100 0114 	add.w	r1, r0, #20
 80a22e2:	7203      	strb	r3, [r0, #8]
 80a22e4:	3010      	adds	r0, #16
 80a22e6:	f7ff ff8f 	bl	80a2208 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvRKNS_5ErrorEEIRS5_EEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
        }
    }
 80a22ea:	b002      	add	sp, #8
 80a22ec:	bd10      	pop	{r4, pc}
	...

080a22f0 <_ZN10CloudClass7publishEPKcS1_im>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

bool CloudClass::publish(const char *eventName, const char *eventData, int ttl, uint32_t flags) {
 80a22f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a22f4:	b08c      	sub	sp, #48	; 0x30
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a22f6:	ae09      	add	r6, sp, #36	; 0x24
 80a22f8:	2500      	movs	r5, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

bool CloudClass::publish(const char *eventName, const char *eventData, int ttl, uint32_t flags) {
 80a22fa:	4607      	mov	r7, r0
 80a22fc:	469a      	mov	sl, r3
public:
    // Future state
    typedef typename detail::FutureImpl<ResultT, ContextT>::State State;

    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a22fe:	2018      	movs	r0, #24
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a2300:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

bool CloudClass::publish(const char *eventName, const char *eventData, int ttl, uint32_t flags) {
 80a2302:	4688      	mov	r8, r1
 80a2304:	4691      	mov	r9, r2
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a2306:	6075      	str	r5, [r6, #4]
 80a2308:	60b5      	str	r5, [r6, #8]
 80a230a:	9309      	str	r3, [sp, #36]	; 0x24
 80a230c:	f7fd fec5 	bl	80a009a <_Znwj>
 80a2310:	4604      	mov	r4, r0
 80a2312:	b130      	cbz	r0, 80a2322 <_ZN10CloudClass7publishEPKcS1_im+0x32>
    using typename FutureImplBase<void, ContextT>::State;
    using typename FutureImplBase<void, ContextT>::OnSuccessCallback;
    using typename FutureImplBase<void, ContextT>::OnErrorCallback;

    explicit FutureImpl(State state) :
            FutureImplBase<void, ContextT>(state) {
 80a2314:	4b2f      	ldr	r3, [pc, #188]	; (80a23d4 <_ZN10CloudClass7publishEPKcS1_im+0xe4>)
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a2316:	6045      	str	r5, [r0, #4]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2318:	7205      	strb	r5, [r0, #8]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a231a:	60c5      	str	r5, [r0, #12]
 80a231c:	6105      	str	r5, [r0, #16]
 80a231e:	6003      	str	r3, [r0, #0]

} // namespace spark

// spark::Error
inline spark::Error::Error() :
        type_(NONE) {
 80a2320:	8285      	strh	r5, [r0, #20]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a2322:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2324:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a2326:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a2328:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a232a:	f7fd feb6 	bl	80a009a <_Znwj>
 80a232e:	b128      	cbz	r0, 80a233c <_ZN10CloudClass7publishEPKcS1_im+0x4c>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a2330:	2301      	movs	r3, #1
 80a2332:	6043      	str	r3, [r0, #4]
 80a2334:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a2336:	4b28      	ldr	r3, [pc, #160]	; (80a23d8 <_ZN10CloudClass7publishEPKcS1_im+0xe8>)
 80a2338:	60c4      	str	r4, [r0, #12]
 80a233a:	6003      	str	r3, [r0, #0]

    // Completion handler
    spark::Promise<void> p;
    d.handler_callback = p.systemCallback;
 80a233c:	4b27      	ldr	r3, [pc, #156]	; (80a23dc <_ZN10CloudClass7publishEPKcS1_im+0xec>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a233e:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a2340:	2008      	movs	r0, #8
 80a2342:	930a      	str	r3, [sp, #40]	; 0x28
 80a2344:	f7fd fea9 	bl	80a009a <_Znwj>
 80a2348:	4604      	mov	r4, r0
 80a234a:	b128      	cbz	r0, 80a2358 <_ZN10CloudClass7publishEPKcS1_im+0x68>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a234c:	9b03      	ldr	r3, [sp, #12]
 80a234e:	a904      	add	r1, sp, #16
 80a2350:	f840 3b04 	str.w	r3, [r0], #4
 80a2354:	f7ff fd3c 	bl	80a1dd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags, &d) && !p.isDone()) {
 80a2358:	9600      	str	r6, [sp, #0]
 80a235a:	4653      	mov	r3, sl
 80a235c:	464a      	mov	r2, r9
 80a235e:	4641      	mov	r1, r8
 80a2360:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    spark::Promise<void> p;
    d.handler_callback = p.systemCallback;
    d.handler_data = p.dataPtr();
 80a2362:	940b      	str	r4, [sp, #44]	; 0x2c

    if (!spark_send_event(eventName, eventData, ttl, flags, &d) && !p.isDone()) {
 80a2364:	f7ff fbcc 	bl	80a1b00 <spark_send_event>
 80a2368:	b910      	cbnz	r0, 80a2370 <_ZN10CloudClass7publishEPKcS1_im+0x80>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a236a:	9803      	ldr	r0, [sp, #12]
 80a236c:	7a03      	ldrb	r3, [r0, #8]
 80a236e:	b1b3      	cbz	r3, 80a239e <_ZN10CloudClass7publishEPKcS1_im+0xae>
 80a2370:	9b03      	ldr	r3, [sp, #12]
 80a2372:	a904      	add	r1, sp, #16
 80a2374:	a808      	add	r0, sp, #32
 80a2376:	9307      	str	r3, [sp, #28]
 80a2378:	f7ff fd2a 	bl	80a1dd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a237c:	a907      	add	r1, sp, #28
 80a237e:	a805      	add	r0, sp, #20
 80a2380:	f7ff fe6c 	bl	80a205c <_ZN5spark6FutureIvNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIvS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2384:	a808      	add	r0, sp, #32
 80a2386:	f7ff fd0d 	bl	80a1da4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a238a:	2000      	movs	r0, #0
 80a238c:	9c05      	ldr	r4, [sp, #20]
 80a238e:	f7ff fb7f 	bl	80a1a90 <application_thread_current>
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) {
        // TODO: Waiting for a future in non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
 80a2392:	b180      	cbz	r0, 80a23b6 <_ZN10CloudClass7publishEPKcS1_im+0xc6>
 80a2394:	7a23      	ldrb	r3, [r4, #8]
            const system_tick_t t = (timeout > 0) ? millis() : 0;
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not checked
 80a2396:	b973      	cbnz	r3, 80a23b6 <_ZN10CloudClass7publishEPKcS1_im+0xc6>

// Event loop and threading abstraction. Used for unit testing
struct FutureContext {
    // Runs the application's event loop
    static void processApplicationEvents() {
        spark_process();
 80a2398:	f7ff fbaa 	bl	80a1af0 <spark_process>
 80a239c:	e7fa      	b.n	80a2394 <_ZN10CloudClass7publishEPKcS1_im+0xa4>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(ptr) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a239e:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a23a2:	f7ff ff89 	bl	80a22b8 <_ZN5spark6detail10FutureImplIvNS0_13FutureContextEE8setErrorENS_5ErrorE>
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(spark::Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a23a6:	a807      	add	r0, sp, #28
 80a23a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80a23aa:	f7ff fe6e 	bl	80a208a <_ZN5spark11PromiseBaseIvNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a23ae:	a808      	add	r0, sp, #32
 80a23b0:	f7ff fcf8 	bl	80a1da4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a23b4:	e7dc      	b.n	80a2370 <_ZN10CloudClass7publishEPKcS1_im+0x80>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a23b6:	9b05      	ldr	r3, [sp, #20]
 80a23b8:	a806      	add	r0, sp, #24
 80a23ba:	685c      	ldr	r4, [r3, #4]
 80a23bc:	f7ff fcf2 	bl	80a1da4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a23c0:	a804      	add	r0, sp, #16
 80a23c2:	f7ff fcef 	bl	80a1da4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }

    // TODO: Return future object instead of synchronous waiting
    spark::Future<void> f = p.future();
    return f.wait().isSucceeded();
 80a23c6:	1e63      	subs	r3, r4, #1
 80a23c8:	4258      	negs	r0, r3
 80a23ca:	4158      	adcs	r0, r3
#else
    return false; // spark::Future<void>::makeFailed(spark::Error::NOT_SUPPORTED);
#endif
}
 80a23cc:	b00c      	add	sp, #48	; 0x30
 80a23ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a23d2:	bf00      	nop
 80a23d4:	080a372c 	.word	0x080a372c
 80a23d8:	080a373c 	.word	0x080a373c
 80a23dc:	080a23e1 	.word	0x080a23e1

080a23e0 <_ZN5spark7PromiseIvNS_6detail13FutureContextEE14systemCallbackEiPvS4_S4_>:

    void setResult() {
        this->p_->setResult();
    }

    static void systemCallback(int error, void* result, void* data, void* reserved) {
 80a23e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a23e2:	4604      	mov	r4, r0
        auto p = Promise<void, ContextT>::fromDataPtr(data);
 80a23e4:	4611      	mov	r1, r2
 80a23e6:	a802      	add	r0, sp, #8
 80a23e8:	f7ff fe4f 	bl	80a208a <_ZN5spark11PromiseBaseIvNS_6detail13FutureContextEE11fromDataPtrEPv>
        if (error != spark::Error::NONE) {
 80a23ec:	b124      	cbz	r4, 80a23f8 <_ZN5spark7PromiseIvNS_6detail13FutureContextEE14systemCallbackEiPvS4_S4_+0x18>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(ptr) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a23ee:	4621      	mov	r1, r4
 80a23f0:	9802      	ldr	r0, [sp, #8]
 80a23f2:	f7ff ff61 	bl	80a22b8 <_ZN5spark6detail10FutureImplIvNS0_13FutureContextEE8setErrorENS_5ErrorE>
 80a23f6:	e015      	b.n	80a2424 <_ZN5spark7PromiseIvNS_6detail13FutureContextEE14systemCallbackEiPvS4_S4_+0x44>
 80a23f8:	9802      	ldr	r0, [sp, #8]
    std::atomic<bool> done_; // Flag signaling that future is in a final state
    std::atomic<typename FutureCallbackTypes<ResultT>::OnSuccess*> onSuccess_; // User callback for succeeded operation
    std::atomic<typename FutureCallbackTypes<ResultT>::OnError*> onError_; // User callback for failed operation

    bool exchangeState(State state) {
        State s = State::RUNNING; // Expected state
 80a23fa:	9401      	str	r4, [sp, #4]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a23fc:	1d02      	adds	r2, r0, #4
 80a23fe:	2301      	movs	r3, #1
 80a2400:	e852 1f00 	ldrex	r1, [r2]
 80a2404:	2900      	cmp	r1, #0
 80a2406:	d103      	bne.n	80a2410 <_ZN5spark7PromiseIvNS_6detail13FutureContextEE14systemCallbackEiPvS4_S4_+0x30>
 80a2408:	e842 3400 	strex	r4, r3, [r2]
 80a240c:	2c00      	cmp	r4, #0
 80a240e:	d1f7      	bne.n	80a2400 <_ZN5spark7PromiseIvNS_6detail13FutureContextEE14systemCallbackEiPvS4_S4_+0x20>
 80a2410:	d001      	beq.n	80a2416 <_ZN5spark7PromiseIvNS_6detail13FutureContextEE14systemCallbackEiPvS4_S4_+0x36>
 80a2412:	9101      	str	r1, [sp, #4]
 80a2414:	e006      	b.n	80a2424 <_ZN5spark7PromiseIvNS_6detail13FutureContextEE14systemCallbackEiPvS4_S4_+0x44>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a2416:	f3bf 8f5f 	dmb	sy
    }

    void setResult() {
        if (this->exchangeState(State::SUCCEEDED)) {
            this->releaseDone();
            this->invokeCallback(this->onSuccess_);
 80a241a:	300c      	adds	r0, #12
 80a241c:	f800 3c04 	strb.w	r3, [r0, #-4]
 80a2420:	f7ff fe60 	bl	80a20e4 <_ZN5spark6detail14FutureImplBaseIvNS0_13FutureContextEE14invokeCallbackIFvvEIEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a2424:	a803      	add	r0, sp, #12
 80a2426:	f7ff fcbd 	bl	80a1da4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (error != spark::Error::NONE) {
            p.setError((spark::Error::Type)error);
        } else {
            p.setResult();
        }
    }
 80a242a:	b004      	add	sp, #16
 80a242c:	bd10      	pop	{r4, pc}

080a242e <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a242e:	4770      	bx	lr

080a2430 <_ZN9IPAddressD0Ev>:
 80a2430:	b510      	push	{r4, lr}
 80a2432:	4604      	mov	r4, r0
 80a2434:	f7fd fe33 	bl	80a009e <_ZdlPv>
 80a2438:	4620      	mov	r0, r4
 80a243a:	bd10      	pop	{r4, pc}

080a243c <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a243e:	460f      	mov	r7, r1
 80a2440:	f100 0608 	add.w	r6, r0, #8
 80a2444:	1d05      	adds	r5, r0, #4
 80a2446:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2448:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a244c:	220a      	movs	r2, #10
 80a244e:	4638      	mov	r0, r7
 80a2450:	f7ff fc6c 	bl	80a1d2c <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2454:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2456:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2458:	d007      	beq.n	80a246a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a245a:	2c00      	cmp	r4, #0
 80a245c:	d0f4      	beq.n	80a2448 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a245e:	212e      	movs	r1, #46	; 0x2e
 80a2460:	4638      	mov	r0, r7
 80a2462:	f7ff fc20 	bl	80a1ca6 <_ZN5Print5printEc>
 80a2466:	4404      	add	r4, r0
 80a2468:	e7ee      	b.n	80a2448 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a246a:	4620      	mov	r0, r4
 80a246c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a246e <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a246e:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2470:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2474:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a2478:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a247c:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a2480:	2304      	movs	r3, #4
 80a2482:	6041      	str	r1, [r0, #4]
 80a2484:	7503      	strb	r3, [r0, #20]
 80a2486:	bd10      	pop	{r4, pc}

080a2488 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a248a:	4d04      	ldr	r5, [pc, #16]	; (80a249c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a248c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a248e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2492:	9500      	str	r5, [sp, #0]
 80a2494:	f7ff ffeb 	bl	80a246e <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2498:	b003      	add	sp, #12
 80a249a:	bd30      	pop	{r4, r5, pc}
 80a249c:	080a3758 	.word	0x080a3758

080a24a0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a24a0:	7441      	strb	r1, [r0, #17]
 80a24a2:	4770      	bx	lr

080a24a4 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a24a4:	4770      	bx	lr

080a24a6 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a24a6:	2100      	movs	r1, #0
 80a24a8:	7c00      	ldrb	r0, [r0, #16]
 80a24aa:	f7ff bac1 	b.w	80a1a30 <HAL_USB_USART_Receive_Data>

080a24ae <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a24ae:	2101      	movs	r1, #1
 80a24b0:	7c00      	ldrb	r0, [r0, #16]
 80a24b2:	f7ff babd 	b.w	80a1a30 <HAL_USB_USART_Receive_Data>

080a24b6 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a24b6:	7c00      	ldrb	r0, [r0, #16]
 80a24b8:	f7ff bab2 	b.w	80a1a20 <HAL_USB_USART_Available_Data_For_Write>

080a24bc <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a24bc:	7c00      	ldrb	r0, [r0, #16]
 80a24be:	f7ff baa7 	b.w	80a1a10 <HAL_USB_USART_Available_Data>

080a24c2 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a24c2:	b538      	push	{r3, r4, r5, lr}
 80a24c4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a24c6:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a24c8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a24ca:	f7ff faa9 	bl	80a1a20 <HAL_USB_USART_Available_Data_For_Write>
 80a24ce:	2800      	cmp	r0, #0
 80a24d0:	dc01      	bgt.n	80a24d6 <_ZN9USBSerial5writeEh+0x14>
 80a24d2:	7c60      	ldrb	r0, [r4, #17]
 80a24d4:	b120      	cbz	r0, 80a24e0 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a24d6:	4629      	mov	r1, r5
 80a24d8:	7c20      	ldrb	r0, [r4, #16]
 80a24da:	f7ff fab1 	bl	80a1a40 <HAL_USB_USART_Send_Data>
    return 1;
 80a24de:	2001      	movs	r0, #1
  }
  return 0;
}
 80a24e0:	bd38      	pop	{r3, r4, r5, pc}

080a24e2 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a24e2:	7c00      	ldrb	r0, [r0, #16]
 80a24e4:	f7ff bab4 	b.w	80a1a50 <HAL_USB_USART_Flush_Data>

080a24e8 <_ZN9USBSerialD0Ev>:
 80a24e8:	b510      	push	{r4, lr}
 80a24ea:	4604      	mov	r4, r0
 80a24ec:	f7fd fdd7 	bl	80a009e <_ZdlPv>
 80a24f0:	4620      	mov	r0, r4
 80a24f2:	bd10      	pop	{r4, pc}

080a24f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a24f4:	b510      	push	{r4, lr}
 80a24f6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a24f8:	2300      	movs	r3, #0
 80a24fa:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a24fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2500:	60a3      	str	r3, [r4, #8]
 80a2502:	4b05      	ldr	r3, [pc, #20]	; (80a2518 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2504:	4608      	mov	r0, r1
 80a2506:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2508:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a250a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a250c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a250e:	4611      	mov	r1, r2
 80a2510:	f7ff fa6e 	bl	80a19f0 <HAL_USB_USART_Init>
}
 80a2514:	4620      	mov	r0, r4
 80a2516:	bd10      	pop	{r4, pc}
 80a2518:	080a376c 	.word	0x080a376c

080a251c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a251c:	2200      	movs	r2, #0
 80a251e:	7c00      	ldrb	r0, [r0, #16]
 80a2520:	f7ff ba6e 	b.w	80a1a00 <HAL_USB_USART_Begin>

080a2524 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2524:	b510      	push	{r4, lr}
 80a2526:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2528:	2214      	movs	r2, #20
 80a252a:	2100      	movs	r1, #0
 80a252c:	f000 ffdf 	bl	80a34ee <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2530:	4b05      	ldr	r3, [pc, #20]	; (80a2548 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2532:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2534:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2536:	4b05      	ldr	r3, [pc, #20]	; (80a254c <_Z19acquireSerialBufferv+0x28>)
 80a2538:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a253a:	f240 1301 	movw	r3, #257	; 0x101
 80a253e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2540:	2381      	movs	r3, #129	; 0x81
 80a2542:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2544:	bd10      	pop	{r4, pc}
 80a2546:	bf00      	nop
 80a2548:	2000046d 	.word	0x2000046d
 80a254c:	200003ec 	.word	0x200003ec

080a2550 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2550:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2552:	4d0e      	ldr	r5, [pc, #56]	; (80a258c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2554:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2556:	a801      	add	r0, sp, #4
 80a2558:	f7ff ffe4 	bl	80a2524 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a255c:	6829      	ldr	r1, [r5, #0]
 80a255e:	f011 0401 	ands.w	r4, r1, #1
 80a2562:	d110      	bne.n	80a2586 <_Z16_fetch_usbserialv+0x36>
 80a2564:	4628      	mov	r0, r5
 80a2566:	f7fd fd9c 	bl	80a00a2 <__cxa_guard_acquire>
 80a256a:	b160      	cbz	r0, 80a2586 <_Z16_fetch_usbserialv+0x36>
 80a256c:	aa01      	add	r2, sp, #4
 80a256e:	4621      	mov	r1, r4
 80a2570:	4807      	ldr	r0, [pc, #28]	; (80a2590 <_Z16_fetch_usbserialv+0x40>)
 80a2572:	f7ff ffbf 	bl	80a24f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2576:	4628      	mov	r0, r5
 80a2578:	f7fd fd98 	bl	80a00ac <__cxa_guard_release>
 80a257c:	4a05      	ldr	r2, [pc, #20]	; (80a2594 <_Z16_fetch_usbserialv+0x44>)
 80a257e:	4906      	ldr	r1, [pc, #24]	; (80a2598 <_Z16_fetch_usbserialv+0x48>)
 80a2580:	4803      	ldr	r0, [pc, #12]	; (80a2590 <_Z16_fetch_usbserialv+0x40>)
 80a2582:	f000 fa25 	bl	80a29d0 <__aeabi_atexit>
	return _usbserial;
}
 80a2586:	4802      	ldr	r0, [pc, #8]	; (80a2590 <_Z16_fetch_usbserialv+0x40>)
 80a2588:	b007      	add	sp, #28
 80a258a:	bd30      	pop	{r4, r5, pc}
 80a258c:	200003e8 	.word	0x200003e8
 80a2590:	20000570 	.word	0x20000570
 80a2594:	20000338 	.word	0x20000338
 80a2598:	080a24a5 	.word	0x080a24a5

080a259c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a259c:	b510      	push	{r4, lr}
 80a259e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a25a0:	2214      	movs	r2, #20
 80a25a2:	2100      	movs	r1, #0
 80a25a4:	f000 ffa3 	bl	80a34ee <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a25a8:	4b05      	ldr	r3, [pc, #20]	; (80a25c0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a25aa:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a25ac:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a25ae:	4b05      	ldr	r3, [pc, #20]	; (80a25c4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a25b0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a25b2:	f240 1301 	movw	r3, #257	; 0x101
 80a25b6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a25b8:	2381      	movs	r3, #129	; 0x81
 80a25ba:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a25bc:	bd10      	pop	{r4, pc}
 80a25be:	bf00      	nop
 80a25c0:	20000620 	.word	0x20000620
 80a25c4:	20000588 	.word	0x20000588

080a25c8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a25c8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a25ca:	4c0e      	ldr	r4, [pc, #56]	; (80a2604 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a25cc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a25ce:	a801      	add	r0, sp, #4
 80a25d0:	f7ff ffe4 	bl	80a259c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a25d4:	6823      	ldr	r3, [r4, #0]
 80a25d6:	07db      	lsls	r3, r3, #31
 80a25d8:	d410      	bmi.n	80a25fc <_Z17_fetch_usbserial1v+0x34>
 80a25da:	4620      	mov	r0, r4
 80a25dc:	f7fd fd61 	bl	80a00a2 <__cxa_guard_acquire>
 80a25e0:	b160      	cbz	r0, 80a25fc <_Z17_fetch_usbserial1v+0x34>
 80a25e2:	aa01      	add	r2, sp, #4
 80a25e4:	2101      	movs	r1, #1
 80a25e6:	4808      	ldr	r0, [pc, #32]	; (80a2608 <_Z17_fetch_usbserial1v+0x40>)
 80a25e8:	f7ff ff84 	bl	80a24f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a25ec:	4620      	mov	r0, r4
 80a25ee:	f7fd fd5d 	bl	80a00ac <__cxa_guard_release>
 80a25f2:	4a06      	ldr	r2, [pc, #24]	; (80a260c <_Z17_fetch_usbserial1v+0x44>)
 80a25f4:	4906      	ldr	r1, [pc, #24]	; (80a2610 <_Z17_fetch_usbserial1v+0x48>)
 80a25f6:	4804      	ldr	r0, [pc, #16]	; (80a2608 <_Z17_fetch_usbserial1v+0x40>)
 80a25f8:	f000 f9ea 	bl	80a29d0 <__aeabi_atexit>
  return _usbserial1;
}
 80a25fc:	4802      	ldr	r0, [pc, #8]	; (80a2608 <_Z17_fetch_usbserial1v+0x40>)
 80a25fe:	b006      	add	sp, #24
 80a2600:	bd10      	pop	{r4, pc}
 80a2602:	bf00      	nop
 80a2604:	20000584 	.word	0x20000584
 80a2608:	2000060c 	.word	0x2000060c
 80a260c:	20000338 	.word	0x20000338
 80a2610:	080a24a5 	.word	0x080a24a5

080a2614 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a2614:	4700      	bx	r0
	...

080a2618 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a2618:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a261a:	461c      	mov	r4, r3
 80a261c:	b085      	sub	sp, #20
 80a261e:	4605      	mov	r5, r0
 80a2620:	460e      	mov	r6, r1
 80a2622:	4617      	mov	r7, r2
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a2624:	f7ff f8fa 	bl	80a181c <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80a2628:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80a262a:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a262c:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a2630:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a2632:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a2636:	bfb4      	ite	lt
 80a2638:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a263a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a263e:	4628      	mov	r0, r5
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a2640:	bfa4      	itt	ge
 80a2642:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a2646:	ab03      	addge	r3, sp, #12
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a2648:	9300      	str	r3, [sp, #0]
 80a264a:	4632      	mov	r2, r6
 80a264c:	463b      	mov	r3, r7
 80a264e:	4904      	ldr	r1, [pc, #16]	; (80a2660 <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a2650:	bfa8      	it	ge
 80a2652:	f88d 400d 	strbge.w	r4, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a2656:	f7ff f8d9 	bl	80a180c <HAL_Interrupts_Attach>
    return true;
}
 80a265a:	2001      	movs	r0, #1
 80a265c:	b005      	add	sp, #20
 80a265e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2660:	080a2615 	.word	0x080a2615

080a2664 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2664:	4770      	bx	lr

080a2666 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2666:	7441      	strb	r1, [r0, #17]
 80a2668:	4770      	bx	lr

080a266a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a266a:	7c00      	ldrb	r0, [r0, #16]
 80a266c:	f7ff b93e 	b.w	80a18ec <HAL_USART_Available_Data_For_Write>

080a2670 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a2670:	7c00      	ldrb	r0, [r0, #16]
 80a2672:	f7ff b913 	b.w	80a189c <HAL_USART_Available_Data>

080a2676 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a2676:	7c00      	ldrb	r0, [r0, #16]
 80a2678:	f7ff b920 	b.w	80a18bc <HAL_USART_Peek_Data>

080a267c <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a267c:	7c00      	ldrb	r0, [r0, #16]
 80a267e:	f7ff b915 	b.w	80a18ac <HAL_USART_Read_Data>

080a2682 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2682:	7c00      	ldrb	r0, [r0, #16]
 80a2684:	f7ff b922 	b.w	80a18cc <HAL_USART_Flush_Data>

080a2688 <_ZN11USARTSerialD0Ev>:
 80a2688:	b510      	push	{r4, lr}
 80a268a:	4604      	mov	r4, r0
 80a268c:	f7fd fd07 	bl	80a009e <_ZdlPv>
 80a2690:	4620      	mov	r0, r4
 80a2692:	bd10      	pop	{r4, pc}

080a2694 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2694:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2696:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2698:	4604      	mov	r4, r0
 80a269a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a269c:	b925      	cbnz	r5, 80a26a8 <_ZN11USARTSerial5writeEh+0x14>
 80a269e:	7c00      	ldrb	r0, [r0, #16]
 80a26a0:	f7ff f924 	bl	80a18ec <HAL_USART_Available_Data_For_Write>
 80a26a4:	2800      	cmp	r0, #0
 80a26a6:	dd05      	ble.n	80a26b4 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a26a8:	4631      	mov	r1, r6
 80a26aa:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a26ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a26b0:	f7ff b8ec 	b.w	80a188c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a26b4:	4628      	mov	r0, r5
 80a26b6:	bd70      	pop	{r4, r5, r6, pc}

080a26b8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a26b8:	b510      	push	{r4, lr}
 80a26ba:	4604      	mov	r4, r0
 80a26bc:	4608      	mov	r0, r1
 80a26be:	4611      	mov	r1, r2
 80a26c0:	2200      	movs	r2, #0
 80a26c2:	6062      	str	r2, [r4, #4]
 80a26c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a26c8:	60a2      	str	r2, [r4, #8]
 80a26ca:	4a05      	ldr	r2, [pc, #20]	; (80a26e0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a26cc:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a26ce:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a26d0:	2201      	movs	r2, #1
 80a26d2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a26d4:	461a      	mov	r2, r3
 80a26d6:	f7ff f8d1 	bl	80a187c <HAL_USART_Init>
}
 80a26da:	4620      	mov	r0, r4
 80a26dc:	bd10      	pop	{r4, pc}
 80a26de:	bf00      	nop
 80a26e0:	080a379c 	.word	0x080a379c

080a26e4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a26e4:	7c00      	ldrb	r0, [r0, #16]
 80a26e6:	f7ff b8f9 	b.w	80a18dc <HAL_USART_Is_Enabled>
	...

080a26ec <_Z22__fetch_global_Serial1v>:
// Preinstantiate Objects //////////////////////////////////////////////////////
static Ring_Buffer serial1_rx_buffer;
static Ring_Buffer serial1_tx_buffer;

USARTSerial& __fetch_global_Serial1()
{
 80a26ec:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a26ee:	4d0c      	ldr	r5, [pc, #48]	; (80a2720 <_Z22__fetch_global_Serial1v+0x34>)
 80a26f0:	6829      	ldr	r1, [r5, #0]
 80a26f2:	f011 0401 	ands.w	r4, r1, #1
 80a26f6:	d111      	bne.n	80a271c <_Z22__fetch_global_Serial1v+0x30>
 80a26f8:	4628      	mov	r0, r5
 80a26fa:	f7fd fcd2 	bl	80a00a2 <__cxa_guard_acquire>
 80a26fe:	b168      	cbz	r0, 80a271c <_Z22__fetch_global_Serial1v+0x30>
 80a2700:	4a08      	ldr	r2, [pc, #32]	; (80a2724 <_Z22__fetch_global_Serial1v+0x38>)
 80a2702:	4621      	mov	r1, r4
 80a2704:	4b08      	ldr	r3, [pc, #32]	; (80a2728 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2706:	4809      	ldr	r0, [pc, #36]	; (80a272c <_Z22__fetch_global_Serial1v+0x40>)
 80a2708:	f7ff ffd6 	bl	80a26b8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a270c:	4628      	mov	r0, r5
 80a270e:	f7fd fccd 	bl	80a00ac <__cxa_guard_release>
 80a2712:	4a07      	ldr	r2, [pc, #28]	; (80a2730 <_Z22__fetch_global_Serial1v+0x44>)
 80a2714:	4907      	ldr	r1, [pc, #28]	; (80a2734 <_Z22__fetch_global_Serial1v+0x48>)
 80a2716:	4805      	ldr	r0, [pc, #20]	; (80a272c <_Z22__fetch_global_Serial1v+0x40>)
 80a2718:	f000 f95a 	bl	80a29d0 <__aeabi_atexit>
	return serial1;
}
 80a271c:	4803      	ldr	r0, [pc, #12]	; (80a272c <_Z22__fetch_global_Serial1v+0x40>)
 80a271e:	bd38      	pop	{r3, r4, r5, pc}
 80a2720:	200007bc 	.word	0x200007bc
 80a2724:	200007c0 	.word	0x200007c0
 80a2728:	20000738 	.word	0x20000738
 80a272c:	20000724 	.word	0x20000724
 80a2730:	20000338 	.word	0x20000338
 80a2734:	080a2665 	.word	0x080a2665

080a2738 <_ZN5spark6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void spark::detail::futureCallbackWrapper(void* data) {
 80a2738:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a273a:	6883      	ldr	r3, [r0, #8]
 80a273c:	4604      	mov	r4, r0
 80a273e:	b90b      	cbnz	r3, 80a2744 <_ZN5spark6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a2740:	f000 f94b 	bl	80a29da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2744:	68c3      	ldr	r3, [r0, #12]
 80a2746:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a2748:	68a3      	ldr	r3, [r4, #8]
 80a274a:	b11b      	cbz	r3, 80a2754 <_ZN5spark6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a274c:	2203      	movs	r2, #3
 80a274e:	4621      	mov	r1, r4
 80a2750:	4620      	mov	r0, r4
 80a2752:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a2754:	4620      	mov	r0, r4
}
 80a2756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void spark::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a275a:	f7fd bca0 	b.w	80a009e <_ZdlPv>

080a275e <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a275e:	4770      	bx	lr

080a2760 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2762:	4606      	mov	r6, r0
 80a2764:	4615      	mov	r5, r2
 80a2766:	460c      	mov	r4, r1
 80a2768:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a276a:	42bc      	cmp	r4, r7
 80a276c:	d006      	beq.n	80a277c <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a276e:	6833      	ldr	r3, [r6, #0]
 80a2770:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2774:	689b      	ldr	r3, [r3, #8]
 80a2776:	4630      	mov	r0, r6
 80a2778:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a277a:	e7f6      	b.n	80a276a <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a277c:	4628      	mov	r0, r5
 80a277e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2780 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2780:	2200      	movs	r2, #0
 80a2782:	7c00      	ldrb	r0, [r0, #16]
 80a2784:	f7ff b8e2 	b.w	80a194c <HAL_I2C_Write_Data>

080a2788 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a2788:	2100      	movs	r1, #0
 80a278a:	7c00      	ldrb	r0, [r0, #16]
 80a278c:	f7ff b8e6 	b.w	80a195c <HAL_I2C_Available_Data>

080a2790 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a2790:	2100      	movs	r1, #0
 80a2792:	7c00      	ldrb	r0, [r0, #16]
 80a2794:	f7ff b8ea 	b.w	80a196c <HAL_I2C_Read_Data>

080a2798 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a2798:	2100      	movs	r1, #0
 80a279a:	7c00      	ldrb	r0, [r0, #16]
 80a279c:	f7ff b8ee 	b.w	80a197c <HAL_I2C_Peek_Data>

080a27a0 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a27a0:	2100      	movs	r1, #0
 80a27a2:	7c00      	ldrb	r0, [r0, #16]
 80a27a4:	f7ff b8f2 	b.w	80a198c <HAL_I2C_Flush_Data>

080a27a8 <_ZN7TwoWireD0Ev>:
 80a27a8:	b510      	push	{r4, lr}
 80a27aa:	4604      	mov	r4, r0
 80a27ac:	f7fd fc77 	bl	80a009e <_ZdlPv>
 80a27b0:	4620      	mov	r0, r4
 80a27b2:	bd10      	pop	{r4, pc}

080a27b4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a27b4:	b510      	push	{r4, lr}
 80a27b6:	4604      	mov	r4, r0
 80a27b8:	4608      	mov	r0, r1
 80a27ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a27be:	60a3      	str	r3, [r4, #8]
 80a27c0:	4b04      	ldr	r3, [pc, #16]	; (80a27d4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a27c2:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a27c4:	7420      	strb	r0, [r4, #16]
 80a27c6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a27c8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a27ca:	f7ff f8ef 	bl	80a19ac <HAL_I2C_Init>

}
 80a27ce:	4620      	mov	r0, r4
 80a27d0:	bd10      	pop	{r4, pc}
 80a27d2:	bf00      	nop
 80a27d4:	080a37cc 	.word	0x080a37cc

080a27d8 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a27d8:	2200      	movs	r2, #0
 80a27da:	7c00      	ldrb	r0, [r0, #16]
 80a27dc:	f7ff b88e 	b.w	80a18fc <HAL_I2C_Set_Speed>

080a27e0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a27e0:	2300      	movs	r3, #0
 80a27e2:	461a      	mov	r2, r3
 80a27e4:	4619      	mov	r1, r3
 80a27e6:	7c00      	ldrb	r0, [r0, #16]
 80a27e8:	f7ff b890 	b.w	80a190c <HAL_I2C_Begin>

080a27ec <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a27ec:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a27ee:	2400      	movs	r4, #0
 80a27f0:	7c00      	ldrb	r0, [r0, #16]
 80a27f2:	9400      	str	r4, [sp, #0]
 80a27f4:	f7ff f892 	bl	80a191c <HAL_I2C_Request_Data>
  return result;
}
 80a27f8:	b2c0      	uxtb	r0, r0
 80a27fa:	b002      	add	sp, #8
 80a27fc:	bd10      	pop	{r4, pc}

080a27fe <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a27fe:	2301      	movs	r3, #1
 80a2800:	f7ff bff4 	b.w	80a27ec <_ZN7TwoWire11requestFromEhhh>

080a2804 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a2804:	2301      	movs	r3, #1
 80a2806:	b2d2      	uxtb	r2, r2
 80a2808:	b2c9      	uxtb	r1, r1
 80a280a:	f7ff bfef 	b.w	80a27ec <_ZN7TwoWire11requestFromEhhh>

080a280e <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a280e:	2200      	movs	r2, #0
 80a2810:	7c00      	ldrb	r0, [r0, #16]
 80a2812:	f7ff b88b 	b.w	80a192c <HAL_I2C_Begin_Transmission>

080a2816 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a2816:	2200      	movs	r2, #0
 80a2818:	7c00      	ldrb	r0, [r0, #16]
 80a281a:	f7ff b88f 	b.w	80a193c <HAL_I2C_End_Transmission>

080a281e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a281e:	2101      	movs	r1, #1
 80a2820:	f7ff bff9 	b.w	80a2816 <_ZN7TwoWire15endTransmissionEh>

080a2824 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a2824:	2100      	movs	r1, #0
 80a2826:	7c00      	ldrb	r0, [r0, #16]
 80a2828:	f7ff b8b8 	b.w	80a199c <HAL_I2C_Is_Enabled>

080a282c <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a282c:	4770      	bx	lr

080a282e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a282e:	2200      	movs	r2, #0
 80a2830:	4611      	mov	r1, r2
 80a2832:	4610      	mov	r0, r2
 80a2834:	f7ff b94c 	b.w	80a1ad0 <network_ready>

080a2838 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a2838:	4803      	ldr	r0, [pc, #12]	; (80a2848 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a283a:	4b04      	ldr	r3, [pc, #16]	; (80a284c <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a283c:	4a04      	ldr	r2, [pc, #16]	; (80a2850 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a283e:	4905      	ldr	r1, [pc, #20]	; (80a2854 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a2840:	6003      	str	r3, [r0, #0]
 80a2842:	f000 b8c5 	b.w	80a29d0 <__aeabi_atexit>
 80a2846:	bf00      	nop
 80a2848:	20000844 	.word	0x20000844
 80a284c:	080a37f4 	.word	0x080a37f4
 80a2850:	20000338 	.word	0x20000338
 80a2854:	080a282d 	.word	0x080a282d

080a2858 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2858:	b510      	push	{r4, lr}
 80a285a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a285c:	480f      	ldr	r0, [pc, #60]	; (80a289c <pinAvailable+0x44>)
 80a285e:	f7ff f993 	bl	80a1b88 <_ZN8SPIClass9isEnabledEv>
 80a2862:	b128      	cbz	r0, 80a2870 <pinAvailable+0x18>
 80a2864:	f1a4 030d 	sub.w	r3, r4, #13
 80a2868:	2b02      	cmp	r3, #2
 80a286a:	d801      	bhi.n	80a2870 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a286c:	2000      	movs	r0, #0
 80a286e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2870:	f000 f88e 	bl	80a2990 <_Z19__fetch_global_Wirev>
 80a2874:	f7ff ffd6 	bl	80a2824 <_ZN7TwoWire9isEnabledEv>
 80a2878:	b108      	cbz	r0, 80a287e <pinAvailable+0x26>
 80a287a:	2c01      	cmp	r4, #1
 80a287c:	d9f6      	bls.n	80a286c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a287e:	f7ff ff35 	bl	80a26ec <_Z22__fetch_global_Serial1v>
 80a2882:	f7ff ff2f 	bl	80a26e4 <_ZN11USARTSerial9isEnabledEv>
 80a2886:	b118      	cbz	r0, 80a2890 <pinAvailable+0x38>
 80a2888:	f1a4 0312 	sub.w	r3, r4, #18
 80a288c:	2b01      	cmp	r3, #1
 80a288e:	d9ed      	bls.n	80a286c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2890:	2c17      	cmp	r4, #23
 80a2892:	bf8c      	ite	hi
 80a2894:	2000      	movhi	r0, #0
 80a2896:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2898:	bd10      	pop	{r4, pc}
 80a289a:	bf00      	nop
 80a289c:	20000848 	.word	0x20000848

080a28a0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a28a0:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a28a2:	b538      	push	{r3, r4, r5, lr}
 80a28a4:	4604      	mov	r4, r0
 80a28a6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a28a8:	d80a      	bhi.n	80a28c0 <pinMode+0x20>
 80a28aa:	29ff      	cmp	r1, #255	; 0xff
 80a28ac:	d008      	beq.n	80a28c0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a28ae:	f7ff ffd3 	bl	80a2858 <pinAvailable>
 80a28b2:	b128      	cbz	r0, 80a28c0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a28b4:	4629      	mov	r1, r5
 80a28b6:	4620      	mov	r0, r4
}
 80a28b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a28bc:	f7fe bf86 	b.w	80a17cc <HAL_Pin_Mode>
 80a28c0:	bd38      	pop	{r3, r4, r5, pc}

080a28c2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a28c2:	b538      	push	{r3, r4, r5, lr}
 80a28c4:	4604      	mov	r4, r0
 80a28c6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a28c8:	f7fe ff88 	bl	80a17dc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a28cc:	28ff      	cmp	r0, #255	; 0xff
 80a28ce:	d010      	beq.n	80a28f2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a28d0:	2806      	cmp	r0, #6
 80a28d2:	d804      	bhi.n	80a28de <digitalWrite+0x1c>
 80a28d4:	234d      	movs	r3, #77	; 0x4d
 80a28d6:	fa23 f000 	lsr.w	r0, r3, r0
 80a28da:	07c3      	lsls	r3, r0, #31
 80a28dc:	d409      	bmi.n	80a28f2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a28de:	4620      	mov	r0, r4
 80a28e0:	f7ff ffba 	bl	80a2858 <pinAvailable>
 80a28e4:	b128      	cbz	r0, 80a28f2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a28e6:	4629      	mov	r1, r5
 80a28e8:	4620      	mov	r0, r4
}
 80a28ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a28ee:	f7fe bf7d 	b.w	80a17ec <HAL_GPIO_Write>
 80a28f2:	bd38      	pop	{r3, r4, r5, pc}

080a28f4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a28f4:	b510      	push	{r4, lr}
 80a28f6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a28f8:	f7fe ff70 	bl	80a17dc <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a28fc:	3804      	subs	r0, #4
 80a28fe:	b2c0      	uxtb	r0, r0
 80a2900:	2801      	cmp	r0, #1
 80a2902:	d908      	bls.n	80a2916 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2904:	4620      	mov	r0, r4
 80a2906:	f7ff ffa7 	bl	80a2858 <pinAvailable>
 80a290a:	b120      	cbz	r0, 80a2916 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a290c:	4620      	mov	r0, r4
}
 80a290e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2912:	f7fe bf73 	b.w	80a17fc <HAL_GPIO_Read>
}
 80a2916:	2000      	movs	r0, #0
 80a2918:	bd10      	pop	{r4, pc}
	...

080a291c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a291c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a291e:	4c0c      	ldr	r4, [pc, #48]	; (80a2950 <_GLOBAL__sub_I_SPI+0x34>)
 80a2920:	4e0c      	ldr	r6, [pc, #48]	; (80a2954 <_GLOBAL__sub_I_SPI+0x38>)
 80a2922:	4d0d      	ldr	r5, [pc, #52]	; (80a2958 <_GLOBAL__sub_I_SPI+0x3c>)
 80a2924:	2100      	movs	r1, #0
 80a2926:	4620      	mov	r0, r4
 80a2928:	f7ff f91a 	bl	80a1b60 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a292c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a292e:	4c0b      	ldr	r4, [pc, #44]	; (80a295c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2930:	4632      	mov	r2, r6
 80a2932:	4629      	mov	r1, r5
 80a2934:	f000 f84c 	bl	80a29d0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2938:	2101      	movs	r1, #1
 80a293a:	4620      	mov	r0, r4
 80a293c:	f7ff f910 	bl	80a1b60 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2940:	4632      	mov	r2, r6
 80a2942:	4629      	mov	r1, r5
 80a2944:	4620      	mov	r0, r4
 80a2946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a294a:	f000 b841 	b.w	80a29d0 <__aeabi_atexit>
 80a294e:	bf00      	nop
 80a2950:	20000848 	.word	0x20000848
 80a2954:	20000338 	.word	0x20000338
 80a2958:	080a1b51 	.word	0x080a1b51
 80a295c:	20000858 	.word	0x20000858

080a2960 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2960:	b513      	push	{r0, r1, r4, lr}
 80a2962:	4c08      	ldr	r4, [pc, #32]	; (80a2984 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2964:	2300      	movs	r3, #0
 80a2966:	461a      	mov	r2, r3
 80a2968:	4619      	mov	r1, r3
 80a296a:	9300      	str	r3, [sp, #0]
 80a296c:	4620      	mov	r0, r4
 80a296e:	f7ff fd8b 	bl	80a2488 <_ZN9IPAddressC1Ehhhh>
 80a2972:	4620      	mov	r0, r4
 80a2974:	4a04      	ldr	r2, [pc, #16]	; (80a2988 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2976:	4905      	ldr	r1, [pc, #20]	; (80a298c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2978:	b002      	add	sp, #8
 80a297a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a297e:	f000 b827 	b.w	80a29d0 <__aeabi_atexit>
 80a2982:	bf00      	nop
 80a2984:	2000086c 	.word	0x2000086c
 80a2988:	20000338 	.word	0x20000338
 80a298c:	080a242f 	.word	0x080a242f

080a2990 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2990:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2992:	4d0b      	ldr	r5, [pc, #44]	; (80a29c0 <_Z19__fetch_global_Wirev+0x30>)
 80a2994:	6829      	ldr	r1, [r5, #0]
 80a2996:	f011 0401 	ands.w	r4, r1, #1
 80a299a:	d10f      	bne.n	80a29bc <_Z19__fetch_global_Wirev+0x2c>
 80a299c:	4628      	mov	r0, r5
 80a299e:	f7fd fb80 	bl	80a00a2 <__cxa_guard_acquire>
 80a29a2:	b158      	cbz	r0, 80a29bc <_Z19__fetch_global_Wirev+0x2c>
 80a29a4:	4621      	mov	r1, r4
 80a29a6:	4807      	ldr	r0, [pc, #28]	; (80a29c4 <_Z19__fetch_global_Wirev+0x34>)
 80a29a8:	f7ff ff04 	bl	80a27b4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a29ac:	4628      	mov	r0, r5
 80a29ae:	f7fd fb7d 	bl	80a00ac <__cxa_guard_release>
 80a29b2:	4a05      	ldr	r2, [pc, #20]	; (80a29c8 <_Z19__fetch_global_Wirev+0x38>)
 80a29b4:	4905      	ldr	r1, [pc, #20]	; (80a29cc <_Z19__fetch_global_Wirev+0x3c>)
 80a29b6:	4803      	ldr	r0, [pc, #12]	; (80a29c4 <_Z19__fetch_global_Wirev+0x34>)
 80a29b8:	f000 f80a 	bl	80a29d0 <__aeabi_atexit>
	return wire;
}
 80a29bc:	4801      	ldr	r0, [pc, #4]	; (80a29c4 <_Z19__fetch_global_Wirev+0x34>)
 80a29be:	bd38      	pop	{r3, r4, r5, pc}
 80a29c0:	20000884 	.word	0x20000884
 80a29c4:	20000888 	.word	0x20000888
 80a29c8:	20000338 	.word	0x20000338
 80a29cc:	080a275f 	.word	0x080a275f

080a29d0 <__aeabi_atexit>:
 80a29d0:	460b      	mov	r3, r1
 80a29d2:	4601      	mov	r1, r0
 80a29d4:	4618      	mov	r0, r3
 80a29d6:	f000 bd71 	b.w	80a34bc <__cxa_atexit>

080a29da <_ZSt25__throw_bad_function_callv>:
 80a29da:	b508      	push	{r3, lr}
 80a29dc:	f7ff f8b0 	bl	80a1b40 <abort>

080a29e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a29e0:	4b18      	ldr	r3, [pc, #96]	; (80a2a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a29e2:	681a      	ldr	r2, [r3, #0]
 80a29e4:	07d1      	lsls	r1, r2, #31
 80a29e6:	bf5c      	itt	pl
 80a29e8:	2201      	movpl	r2, #1
 80a29ea:	601a      	strpl	r2, [r3, #0]
 80a29ec:	4b16      	ldr	r3, [pc, #88]	; (80a2a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a29ee:	681a      	ldr	r2, [r3, #0]
 80a29f0:	07d2      	lsls	r2, r2, #31
 80a29f2:	bf5c      	itt	pl
 80a29f4:	2201      	movpl	r2, #1
 80a29f6:	601a      	strpl	r2, [r3, #0]
 80a29f8:	4b14      	ldr	r3, [pc, #80]	; (80a2a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a29fa:	681a      	ldr	r2, [r3, #0]
 80a29fc:	07d0      	lsls	r0, r2, #31
 80a29fe:	bf5c      	itt	pl
 80a2a00:	2201      	movpl	r2, #1
 80a2a02:	601a      	strpl	r2, [r3, #0]
 80a2a04:	4b12      	ldr	r3, [pc, #72]	; (80a2a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2a06:	681a      	ldr	r2, [r3, #0]
 80a2a08:	07d1      	lsls	r1, r2, #31
 80a2a0a:	bf5c      	itt	pl
 80a2a0c:	2201      	movpl	r2, #1
 80a2a0e:	601a      	strpl	r2, [r3, #0]
 80a2a10:	4b10      	ldr	r3, [pc, #64]	; (80a2a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2a12:	681a      	ldr	r2, [r3, #0]
 80a2a14:	07d2      	lsls	r2, r2, #31
 80a2a16:	bf5c      	itt	pl
 80a2a18:	2201      	movpl	r2, #1
 80a2a1a:	601a      	strpl	r2, [r3, #0]
 80a2a1c:	4b0e      	ldr	r3, [pc, #56]	; (80a2a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2a1e:	681a      	ldr	r2, [r3, #0]
 80a2a20:	07d0      	lsls	r0, r2, #31
 80a2a22:	bf5c      	itt	pl
 80a2a24:	2201      	movpl	r2, #1
 80a2a26:	601a      	strpl	r2, [r3, #0]
 80a2a28:	4b0c      	ldr	r3, [pc, #48]	; (80a2a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2a2a:	681a      	ldr	r2, [r3, #0]
 80a2a2c:	07d1      	lsls	r1, r2, #31
 80a2a2e:	bf5c      	itt	pl
 80a2a30:	2201      	movpl	r2, #1
 80a2a32:	601a      	strpl	r2, [r3, #0]
 80a2a34:	4b0a      	ldr	r3, [pc, #40]	; (80a2a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2a36:	681a      	ldr	r2, [r3, #0]
 80a2a38:	07d2      	lsls	r2, r2, #31
 80a2a3a:	bf5c      	itt	pl
 80a2a3c:	2201      	movpl	r2, #1
 80a2a3e:	601a      	strpl	r2, [r3, #0]
 80a2a40:	4770      	bx	lr
 80a2a42:	bf00      	nop
 80a2a44:	200008b8 	.word	0x200008b8
 80a2a48:	200008b4 	.word	0x200008b4
 80a2a4c:	200008b0 	.word	0x200008b0
 80a2a50:	200008ac 	.word	0x200008ac
 80a2a54:	200008a8 	.word	0x200008a8
 80a2a58:	200008a4 	.word	0x200008a4
 80a2a5c:	200008a0 	.word	0x200008a0
 80a2a60:	2000089c 	.word	0x2000089c

080a2a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2a64:	4b24      	ldr	r3, [pc, #144]	; (80a2af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2a66:	681a      	ldr	r2, [r3, #0]
 80a2a68:	07d0      	lsls	r0, r2, #31
 80a2a6a:	bf5c      	itt	pl
 80a2a6c:	2201      	movpl	r2, #1
 80a2a6e:	601a      	strpl	r2, [r3, #0]
 80a2a70:	4b22      	ldr	r3, [pc, #136]	; (80a2afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2a72:	681a      	ldr	r2, [r3, #0]
 80a2a74:	07d1      	lsls	r1, r2, #31
 80a2a76:	bf5c      	itt	pl
 80a2a78:	2201      	movpl	r2, #1
 80a2a7a:	601a      	strpl	r2, [r3, #0]
 80a2a7c:	4b20      	ldr	r3, [pc, #128]	; (80a2b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2a7e:	681a      	ldr	r2, [r3, #0]
 80a2a80:	07d2      	lsls	r2, r2, #31
 80a2a82:	bf5c      	itt	pl
 80a2a84:	2201      	movpl	r2, #1
 80a2a86:	601a      	strpl	r2, [r3, #0]
 80a2a88:	4b1e      	ldr	r3, [pc, #120]	; (80a2b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2a8a:	681a      	ldr	r2, [r3, #0]
 80a2a8c:	07d0      	lsls	r0, r2, #31
 80a2a8e:	bf5c      	itt	pl
 80a2a90:	2201      	movpl	r2, #1
 80a2a92:	601a      	strpl	r2, [r3, #0]
 80a2a94:	4b1c      	ldr	r3, [pc, #112]	; (80a2b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2a96:	681a      	ldr	r2, [r3, #0]
 80a2a98:	07d1      	lsls	r1, r2, #31
 80a2a9a:	bf5c      	itt	pl
 80a2a9c:	2201      	movpl	r2, #1
 80a2a9e:	601a      	strpl	r2, [r3, #0]
 80a2aa0:	4b1a      	ldr	r3, [pc, #104]	; (80a2b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2aa2:	681a      	ldr	r2, [r3, #0]
 80a2aa4:	07d2      	lsls	r2, r2, #31
 80a2aa6:	bf5c      	itt	pl
 80a2aa8:	2201      	movpl	r2, #1
 80a2aaa:	601a      	strpl	r2, [r3, #0]
 80a2aac:	4b18      	ldr	r3, [pc, #96]	; (80a2b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2aae:	681a      	ldr	r2, [r3, #0]
 80a2ab0:	07d0      	lsls	r0, r2, #31
 80a2ab2:	bf5c      	itt	pl
 80a2ab4:	2201      	movpl	r2, #1
 80a2ab6:	601a      	strpl	r2, [r3, #0]
 80a2ab8:	4b16      	ldr	r3, [pc, #88]	; (80a2b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2aba:	681a      	ldr	r2, [r3, #0]
 80a2abc:	07d1      	lsls	r1, r2, #31
 80a2abe:	bf5c      	itt	pl
 80a2ac0:	2201      	movpl	r2, #1
 80a2ac2:	601a      	strpl	r2, [r3, #0]
 80a2ac4:	4b14      	ldr	r3, [pc, #80]	; (80a2b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2ac6:	681a      	ldr	r2, [r3, #0]
 80a2ac8:	07d2      	lsls	r2, r2, #31
 80a2aca:	bf5c      	itt	pl
 80a2acc:	2201      	movpl	r2, #1
 80a2ace:	601a      	strpl	r2, [r3, #0]
 80a2ad0:	4b12      	ldr	r3, [pc, #72]	; (80a2b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2ad2:	681a      	ldr	r2, [r3, #0]
 80a2ad4:	07d0      	lsls	r0, r2, #31
 80a2ad6:	bf5c      	itt	pl
 80a2ad8:	2201      	movpl	r2, #1
 80a2ada:	601a      	strpl	r2, [r3, #0]
 80a2adc:	4b10      	ldr	r3, [pc, #64]	; (80a2b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2ade:	681a      	ldr	r2, [r3, #0]
 80a2ae0:	07d1      	lsls	r1, r2, #31
 80a2ae2:	bf5c      	itt	pl
 80a2ae4:	2201      	movpl	r2, #1
 80a2ae6:	601a      	strpl	r2, [r3, #0]
 80a2ae8:	4b0e      	ldr	r3, [pc, #56]	; (80a2b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2aea:	681a      	ldr	r2, [r3, #0]
 80a2aec:	07d2      	lsls	r2, r2, #31
 80a2aee:	bf5c      	itt	pl
 80a2af0:	2201      	movpl	r2, #1
 80a2af2:	601a      	strpl	r2, [r3, #0]
 80a2af4:	4770      	bx	lr
 80a2af6:	bf00      	nop
 80a2af8:	200008e8 	.word	0x200008e8
 80a2afc:	200008e4 	.word	0x200008e4
 80a2b00:	200008e0 	.word	0x200008e0
 80a2b04:	200008dc 	.word	0x200008dc
 80a2b08:	200008d8 	.word	0x200008d8
 80a2b0c:	200008d4 	.word	0x200008d4
 80a2b10:	200008d0 	.word	0x200008d0
 80a2b14:	200008cc 	.word	0x200008cc
 80a2b18:	200008c8 	.word	0x200008c8
 80a2b1c:	200008c4 	.word	0x200008c4
 80a2b20:	200008c0 	.word	0x200008c0
 80a2b24:	200008bc 	.word	0x200008bc

080a2b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2b28:	4b24      	ldr	r3, [pc, #144]	; (80a2bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2b2a:	681a      	ldr	r2, [r3, #0]
 80a2b2c:	07d0      	lsls	r0, r2, #31
 80a2b2e:	bf5c      	itt	pl
 80a2b30:	2201      	movpl	r2, #1
 80a2b32:	601a      	strpl	r2, [r3, #0]
 80a2b34:	4b22      	ldr	r3, [pc, #136]	; (80a2bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2b36:	681a      	ldr	r2, [r3, #0]
 80a2b38:	07d1      	lsls	r1, r2, #31
 80a2b3a:	bf5c      	itt	pl
 80a2b3c:	2201      	movpl	r2, #1
 80a2b3e:	601a      	strpl	r2, [r3, #0]
 80a2b40:	4b20      	ldr	r3, [pc, #128]	; (80a2bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2b42:	681a      	ldr	r2, [r3, #0]
 80a2b44:	07d2      	lsls	r2, r2, #31
 80a2b46:	bf5c      	itt	pl
 80a2b48:	2201      	movpl	r2, #1
 80a2b4a:	601a      	strpl	r2, [r3, #0]
 80a2b4c:	4b1e      	ldr	r3, [pc, #120]	; (80a2bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2b4e:	681a      	ldr	r2, [r3, #0]
 80a2b50:	07d0      	lsls	r0, r2, #31
 80a2b52:	bf5c      	itt	pl
 80a2b54:	2201      	movpl	r2, #1
 80a2b56:	601a      	strpl	r2, [r3, #0]
 80a2b58:	4b1c      	ldr	r3, [pc, #112]	; (80a2bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2b5a:	681a      	ldr	r2, [r3, #0]
 80a2b5c:	07d1      	lsls	r1, r2, #31
 80a2b5e:	bf5c      	itt	pl
 80a2b60:	2201      	movpl	r2, #1
 80a2b62:	601a      	strpl	r2, [r3, #0]
 80a2b64:	4b1a      	ldr	r3, [pc, #104]	; (80a2bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2b66:	681a      	ldr	r2, [r3, #0]
 80a2b68:	07d2      	lsls	r2, r2, #31
 80a2b6a:	bf5c      	itt	pl
 80a2b6c:	2201      	movpl	r2, #1
 80a2b6e:	601a      	strpl	r2, [r3, #0]
 80a2b70:	4b18      	ldr	r3, [pc, #96]	; (80a2bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2b72:	681a      	ldr	r2, [r3, #0]
 80a2b74:	07d0      	lsls	r0, r2, #31
 80a2b76:	bf5c      	itt	pl
 80a2b78:	2201      	movpl	r2, #1
 80a2b7a:	601a      	strpl	r2, [r3, #0]
 80a2b7c:	4b16      	ldr	r3, [pc, #88]	; (80a2bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2b7e:	681a      	ldr	r2, [r3, #0]
 80a2b80:	07d1      	lsls	r1, r2, #31
 80a2b82:	bf5c      	itt	pl
 80a2b84:	2201      	movpl	r2, #1
 80a2b86:	601a      	strpl	r2, [r3, #0]
 80a2b88:	4b14      	ldr	r3, [pc, #80]	; (80a2bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2b8a:	681a      	ldr	r2, [r3, #0]
 80a2b8c:	07d2      	lsls	r2, r2, #31
 80a2b8e:	bf5c      	itt	pl
 80a2b90:	2201      	movpl	r2, #1
 80a2b92:	601a      	strpl	r2, [r3, #0]
 80a2b94:	4b12      	ldr	r3, [pc, #72]	; (80a2be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2b96:	681a      	ldr	r2, [r3, #0]
 80a2b98:	07d0      	lsls	r0, r2, #31
 80a2b9a:	bf5c      	itt	pl
 80a2b9c:	2201      	movpl	r2, #1
 80a2b9e:	601a      	strpl	r2, [r3, #0]
 80a2ba0:	4b10      	ldr	r3, [pc, #64]	; (80a2be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2ba2:	681a      	ldr	r2, [r3, #0]
 80a2ba4:	07d1      	lsls	r1, r2, #31
 80a2ba6:	bf5c      	itt	pl
 80a2ba8:	2201      	movpl	r2, #1
 80a2baa:	601a      	strpl	r2, [r3, #0]
 80a2bac:	4b0e      	ldr	r3, [pc, #56]	; (80a2be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2bae:	681a      	ldr	r2, [r3, #0]
 80a2bb0:	07d2      	lsls	r2, r2, #31
 80a2bb2:	bf5c      	itt	pl
 80a2bb4:	2201      	movpl	r2, #1
 80a2bb6:	601a      	strpl	r2, [r3, #0]
 80a2bb8:	4770      	bx	lr
 80a2bba:	bf00      	nop
 80a2bbc:	20000918 	.word	0x20000918
 80a2bc0:	20000914 	.word	0x20000914
 80a2bc4:	20000910 	.word	0x20000910
 80a2bc8:	2000090c 	.word	0x2000090c
 80a2bcc:	20000908 	.word	0x20000908
 80a2bd0:	20000904 	.word	0x20000904
 80a2bd4:	20000900 	.word	0x20000900
 80a2bd8:	200008fc 	.word	0x200008fc
 80a2bdc:	200008f8 	.word	0x200008f8
 80a2be0:	200008f4 	.word	0x200008f4
 80a2be4:	200008f0 	.word	0x200008f0
 80a2be8:	200008ec 	.word	0x200008ec

080a2bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2bec:	4b18      	ldr	r3, [pc, #96]	; (80a2c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2bee:	681a      	ldr	r2, [r3, #0]
 80a2bf0:	07d1      	lsls	r1, r2, #31
 80a2bf2:	bf5c      	itt	pl
 80a2bf4:	2201      	movpl	r2, #1
 80a2bf6:	601a      	strpl	r2, [r3, #0]
 80a2bf8:	4b16      	ldr	r3, [pc, #88]	; (80a2c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2bfa:	681a      	ldr	r2, [r3, #0]
 80a2bfc:	07d2      	lsls	r2, r2, #31
 80a2bfe:	bf5c      	itt	pl
 80a2c00:	2201      	movpl	r2, #1
 80a2c02:	601a      	strpl	r2, [r3, #0]
 80a2c04:	4b14      	ldr	r3, [pc, #80]	; (80a2c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2c06:	681a      	ldr	r2, [r3, #0]
 80a2c08:	07d0      	lsls	r0, r2, #31
 80a2c0a:	bf5c      	itt	pl
 80a2c0c:	2201      	movpl	r2, #1
 80a2c0e:	601a      	strpl	r2, [r3, #0]
 80a2c10:	4b12      	ldr	r3, [pc, #72]	; (80a2c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2c12:	681a      	ldr	r2, [r3, #0]
 80a2c14:	07d1      	lsls	r1, r2, #31
 80a2c16:	bf5c      	itt	pl
 80a2c18:	2201      	movpl	r2, #1
 80a2c1a:	601a      	strpl	r2, [r3, #0]
 80a2c1c:	4b10      	ldr	r3, [pc, #64]	; (80a2c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2c1e:	681a      	ldr	r2, [r3, #0]
 80a2c20:	07d2      	lsls	r2, r2, #31
 80a2c22:	bf5c      	itt	pl
 80a2c24:	2201      	movpl	r2, #1
 80a2c26:	601a      	strpl	r2, [r3, #0]
 80a2c28:	4b0e      	ldr	r3, [pc, #56]	; (80a2c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2c2a:	681a      	ldr	r2, [r3, #0]
 80a2c2c:	07d0      	lsls	r0, r2, #31
 80a2c2e:	bf5c      	itt	pl
 80a2c30:	2201      	movpl	r2, #1
 80a2c32:	601a      	strpl	r2, [r3, #0]
 80a2c34:	4b0c      	ldr	r3, [pc, #48]	; (80a2c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2c36:	681a      	ldr	r2, [r3, #0]
 80a2c38:	07d1      	lsls	r1, r2, #31
 80a2c3a:	bf5c      	itt	pl
 80a2c3c:	2201      	movpl	r2, #1
 80a2c3e:	601a      	strpl	r2, [r3, #0]
 80a2c40:	4b0a      	ldr	r3, [pc, #40]	; (80a2c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2c42:	681a      	ldr	r2, [r3, #0]
 80a2c44:	07d2      	lsls	r2, r2, #31
 80a2c46:	bf5c      	itt	pl
 80a2c48:	2201      	movpl	r2, #1
 80a2c4a:	601a      	strpl	r2, [r3, #0]
 80a2c4c:	4770      	bx	lr
 80a2c4e:	bf00      	nop
 80a2c50:	20000938 	.word	0x20000938
 80a2c54:	20000934 	.word	0x20000934
 80a2c58:	20000930 	.word	0x20000930
 80a2c5c:	2000092c 	.word	0x2000092c
 80a2c60:	20000928 	.word	0x20000928
 80a2c64:	20000924 	.word	0x20000924
 80a2c68:	20000920 	.word	0x20000920
 80a2c6c:	2000091c 	.word	0x2000091c

080a2c70 <__aeabi_drsub>:
 80a2c70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2c74:	e002      	b.n	80a2c7c <__adddf3>
 80a2c76:	bf00      	nop

080a2c78 <__aeabi_dsub>:
 80a2c78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2c7c <__adddf3>:
 80a2c7c:	b530      	push	{r4, r5, lr}
 80a2c7e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2c82:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2c86:	ea94 0f05 	teq	r4, r5
 80a2c8a:	bf08      	it	eq
 80a2c8c:	ea90 0f02 	teqeq	r0, r2
 80a2c90:	bf1f      	itttt	ne
 80a2c92:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2c96:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2c9a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2c9e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2ca2:	f000 80e2 	beq.w	80a2e6a <__adddf3+0x1ee>
 80a2ca6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2caa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2cae:	bfb8      	it	lt
 80a2cb0:	426d      	neglt	r5, r5
 80a2cb2:	dd0c      	ble.n	80a2cce <__adddf3+0x52>
 80a2cb4:	442c      	add	r4, r5
 80a2cb6:	ea80 0202 	eor.w	r2, r0, r2
 80a2cba:	ea81 0303 	eor.w	r3, r1, r3
 80a2cbe:	ea82 0000 	eor.w	r0, r2, r0
 80a2cc2:	ea83 0101 	eor.w	r1, r3, r1
 80a2cc6:	ea80 0202 	eor.w	r2, r0, r2
 80a2cca:	ea81 0303 	eor.w	r3, r1, r3
 80a2cce:	2d36      	cmp	r5, #54	; 0x36
 80a2cd0:	bf88      	it	hi
 80a2cd2:	bd30      	pophi	{r4, r5, pc}
 80a2cd4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2cd8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2cdc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2ce0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2ce4:	d002      	beq.n	80a2cec <__adddf3+0x70>
 80a2ce6:	4240      	negs	r0, r0
 80a2ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2cec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2cf0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2cf4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2cf8:	d002      	beq.n	80a2d00 <__adddf3+0x84>
 80a2cfa:	4252      	negs	r2, r2
 80a2cfc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2d00:	ea94 0f05 	teq	r4, r5
 80a2d04:	f000 80a7 	beq.w	80a2e56 <__adddf3+0x1da>
 80a2d08:	f1a4 0401 	sub.w	r4, r4, #1
 80a2d0c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2d10:	db0d      	blt.n	80a2d2e <__adddf3+0xb2>
 80a2d12:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2d16:	fa22 f205 	lsr.w	r2, r2, r5
 80a2d1a:	1880      	adds	r0, r0, r2
 80a2d1c:	f141 0100 	adc.w	r1, r1, #0
 80a2d20:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2d24:	1880      	adds	r0, r0, r2
 80a2d26:	fa43 f305 	asr.w	r3, r3, r5
 80a2d2a:	4159      	adcs	r1, r3
 80a2d2c:	e00e      	b.n	80a2d4c <__adddf3+0xd0>
 80a2d2e:	f1a5 0520 	sub.w	r5, r5, #32
 80a2d32:	f10e 0e20 	add.w	lr, lr, #32
 80a2d36:	2a01      	cmp	r2, #1
 80a2d38:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2d3c:	bf28      	it	cs
 80a2d3e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2d42:	fa43 f305 	asr.w	r3, r3, r5
 80a2d46:	18c0      	adds	r0, r0, r3
 80a2d48:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2d4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2d50:	d507      	bpl.n	80a2d62 <__adddf3+0xe6>
 80a2d52:	f04f 0e00 	mov.w	lr, #0
 80a2d56:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2d5a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2d5e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2d62:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2d66:	d31b      	bcc.n	80a2da0 <__adddf3+0x124>
 80a2d68:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2d6c:	d30c      	bcc.n	80a2d88 <__adddf3+0x10c>
 80a2d6e:	0849      	lsrs	r1, r1, #1
 80a2d70:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2d74:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2d78:	f104 0401 	add.w	r4, r4, #1
 80a2d7c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2d80:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2d84:	f080 809a 	bcs.w	80a2ebc <__adddf3+0x240>
 80a2d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2d8c:	bf08      	it	eq
 80a2d8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2d92:	f150 0000 	adcs.w	r0, r0, #0
 80a2d96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2d9a:	ea41 0105 	orr.w	r1, r1, r5
 80a2d9e:	bd30      	pop	{r4, r5, pc}
 80a2da0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2da4:	4140      	adcs	r0, r0
 80a2da6:	eb41 0101 	adc.w	r1, r1, r1
 80a2daa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2dae:	f1a4 0401 	sub.w	r4, r4, #1
 80a2db2:	d1e9      	bne.n	80a2d88 <__adddf3+0x10c>
 80a2db4:	f091 0f00 	teq	r1, #0
 80a2db8:	bf04      	itt	eq
 80a2dba:	4601      	moveq	r1, r0
 80a2dbc:	2000      	moveq	r0, #0
 80a2dbe:	fab1 f381 	clz	r3, r1
 80a2dc2:	bf08      	it	eq
 80a2dc4:	3320      	addeq	r3, #32
 80a2dc6:	f1a3 030b 	sub.w	r3, r3, #11
 80a2dca:	f1b3 0220 	subs.w	r2, r3, #32
 80a2dce:	da0c      	bge.n	80a2dea <__adddf3+0x16e>
 80a2dd0:	320c      	adds	r2, #12
 80a2dd2:	dd08      	ble.n	80a2de6 <__adddf3+0x16a>
 80a2dd4:	f102 0c14 	add.w	ip, r2, #20
 80a2dd8:	f1c2 020c 	rsb	r2, r2, #12
 80a2ddc:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2de0:	fa21 f102 	lsr.w	r1, r1, r2
 80a2de4:	e00c      	b.n	80a2e00 <__adddf3+0x184>
 80a2de6:	f102 0214 	add.w	r2, r2, #20
 80a2dea:	bfd8      	it	le
 80a2dec:	f1c2 0c20 	rsble	ip, r2, #32
 80a2df0:	fa01 f102 	lsl.w	r1, r1, r2
 80a2df4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2df8:	bfdc      	itt	le
 80a2dfa:	ea41 010c 	orrle.w	r1, r1, ip
 80a2dfe:	4090      	lslle	r0, r2
 80a2e00:	1ae4      	subs	r4, r4, r3
 80a2e02:	bfa2      	ittt	ge
 80a2e04:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2e08:	4329      	orrge	r1, r5
 80a2e0a:	bd30      	popge	{r4, r5, pc}
 80a2e0c:	ea6f 0404 	mvn.w	r4, r4
 80a2e10:	3c1f      	subs	r4, #31
 80a2e12:	da1c      	bge.n	80a2e4e <__adddf3+0x1d2>
 80a2e14:	340c      	adds	r4, #12
 80a2e16:	dc0e      	bgt.n	80a2e36 <__adddf3+0x1ba>
 80a2e18:	f104 0414 	add.w	r4, r4, #20
 80a2e1c:	f1c4 0220 	rsb	r2, r4, #32
 80a2e20:	fa20 f004 	lsr.w	r0, r0, r4
 80a2e24:	fa01 f302 	lsl.w	r3, r1, r2
 80a2e28:	ea40 0003 	orr.w	r0, r0, r3
 80a2e2c:	fa21 f304 	lsr.w	r3, r1, r4
 80a2e30:	ea45 0103 	orr.w	r1, r5, r3
 80a2e34:	bd30      	pop	{r4, r5, pc}
 80a2e36:	f1c4 040c 	rsb	r4, r4, #12
 80a2e3a:	f1c4 0220 	rsb	r2, r4, #32
 80a2e3e:	fa20 f002 	lsr.w	r0, r0, r2
 80a2e42:	fa01 f304 	lsl.w	r3, r1, r4
 80a2e46:	ea40 0003 	orr.w	r0, r0, r3
 80a2e4a:	4629      	mov	r1, r5
 80a2e4c:	bd30      	pop	{r4, r5, pc}
 80a2e4e:	fa21 f004 	lsr.w	r0, r1, r4
 80a2e52:	4629      	mov	r1, r5
 80a2e54:	bd30      	pop	{r4, r5, pc}
 80a2e56:	f094 0f00 	teq	r4, #0
 80a2e5a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2e5e:	bf06      	itte	eq
 80a2e60:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2e64:	3401      	addeq	r4, #1
 80a2e66:	3d01      	subne	r5, #1
 80a2e68:	e74e      	b.n	80a2d08 <__adddf3+0x8c>
 80a2e6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2e6e:	bf18      	it	ne
 80a2e70:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2e74:	d029      	beq.n	80a2eca <__adddf3+0x24e>
 80a2e76:	ea94 0f05 	teq	r4, r5
 80a2e7a:	bf08      	it	eq
 80a2e7c:	ea90 0f02 	teqeq	r0, r2
 80a2e80:	d005      	beq.n	80a2e8e <__adddf3+0x212>
 80a2e82:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2e86:	bf04      	itt	eq
 80a2e88:	4619      	moveq	r1, r3
 80a2e8a:	4610      	moveq	r0, r2
 80a2e8c:	bd30      	pop	{r4, r5, pc}
 80a2e8e:	ea91 0f03 	teq	r1, r3
 80a2e92:	bf1e      	ittt	ne
 80a2e94:	2100      	movne	r1, #0
 80a2e96:	2000      	movne	r0, #0
 80a2e98:	bd30      	popne	{r4, r5, pc}
 80a2e9a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2e9e:	d105      	bne.n	80a2eac <__adddf3+0x230>
 80a2ea0:	0040      	lsls	r0, r0, #1
 80a2ea2:	4149      	adcs	r1, r1
 80a2ea4:	bf28      	it	cs
 80a2ea6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2eaa:	bd30      	pop	{r4, r5, pc}
 80a2eac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2eb0:	bf3c      	itt	cc
 80a2eb2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2eb6:	bd30      	popcc	{r4, r5, pc}
 80a2eb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2ebc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2ec0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2ec4:	f04f 0000 	mov.w	r0, #0
 80a2ec8:	bd30      	pop	{r4, r5, pc}
 80a2eca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2ece:	bf1a      	itte	ne
 80a2ed0:	4619      	movne	r1, r3
 80a2ed2:	4610      	movne	r0, r2
 80a2ed4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2ed8:	bf1c      	itt	ne
 80a2eda:	460b      	movne	r3, r1
 80a2edc:	4602      	movne	r2, r0
 80a2ede:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2ee2:	bf06      	itte	eq
 80a2ee4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2ee8:	ea91 0f03 	teqeq	r1, r3
 80a2eec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2ef0:	bd30      	pop	{r4, r5, pc}
 80a2ef2:	bf00      	nop

080a2ef4 <__aeabi_ui2d>:
 80a2ef4:	f090 0f00 	teq	r0, #0
 80a2ef8:	bf04      	itt	eq
 80a2efa:	2100      	moveq	r1, #0
 80a2efc:	4770      	bxeq	lr
 80a2efe:	b530      	push	{r4, r5, lr}
 80a2f00:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2f04:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2f08:	f04f 0500 	mov.w	r5, #0
 80a2f0c:	f04f 0100 	mov.w	r1, #0
 80a2f10:	e750      	b.n	80a2db4 <__adddf3+0x138>
 80a2f12:	bf00      	nop

080a2f14 <__aeabi_i2d>:
 80a2f14:	f090 0f00 	teq	r0, #0
 80a2f18:	bf04      	itt	eq
 80a2f1a:	2100      	moveq	r1, #0
 80a2f1c:	4770      	bxeq	lr
 80a2f1e:	b530      	push	{r4, r5, lr}
 80a2f20:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2f24:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2f28:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2f2c:	bf48      	it	mi
 80a2f2e:	4240      	negmi	r0, r0
 80a2f30:	f04f 0100 	mov.w	r1, #0
 80a2f34:	e73e      	b.n	80a2db4 <__adddf3+0x138>
 80a2f36:	bf00      	nop

080a2f38 <__aeabi_f2d>:
 80a2f38:	0042      	lsls	r2, r0, #1
 80a2f3a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2f3e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2f42:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2f46:	bf1f      	itttt	ne
 80a2f48:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2f4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2f50:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2f54:	4770      	bxne	lr
 80a2f56:	f092 0f00 	teq	r2, #0
 80a2f5a:	bf14      	ite	ne
 80a2f5c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2f60:	4770      	bxeq	lr
 80a2f62:	b530      	push	{r4, r5, lr}
 80a2f64:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2f68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2f6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2f70:	e720      	b.n	80a2db4 <__adddf3+0x138>
 80a2f72:	bf00      	nop

080a2f74 <__aeabi_ul2d>:
 80a2f74:	ea50 0201 	orrs.w	r2, r0, r1
 80a2f78:	bf08      	it	eq
 80a2f7a:	4770      	bxeq	lr
 80a2f7c:	b530      	push	{r4, r5, lr}
 80a2f7e:	f04f 0500 	mov.w	r5, #0
 80a2f82:	e00a      	b.n	80a2f9a <__aeabi_l2d+0x16>

080a2f84 <__aeabi_l2d>:
 80a2f84:	ea50 0201 	orrs.w	r2, r0, r1
 80a2f88:	bf08      	it	eq
 80a2f8a:	4770      	bxeq	lr
 80a2f8c:	b530      	push	{r4, r5, lr}
 80a2f8e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2f92:	d502      	bpl.n	80a2f9a <__aeabi_l2d+0x16>
 80a2f94:	4240      	negs	r0, r0
 80a2f96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2f9a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2f9e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2fa2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2fa6:	f43f aedc 	beq.w	80a2d62 <__adddf3+0xe6>
 80a2faa:	f04f 0203 	mov.w	r2, #3
 80a2fae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2fb2:	bf18      	it	ne
 80a2fb4:	3203      	addne	r2, #3
 80a2fb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2fba:	bf18      	it	ne
 80a2fbc:	3203      	addne	r2, #3
 80a2fbe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2fc2:	f1c2 0320 	rsb	r3, r2, #32
 80a2fc6:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2fca:	fa20 f002 	lsr.w	r0, r0, r2
 80a2fce:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2fd2:	ea40 000e 	orr.w	r0, r0, lr
 80a2fd6:	fa21 f102 	lsr.w	r1, r1, r2
 80a2fda:	4414      	add	r4, r2
 80a2fdc:	e6c1      	b.n	80a2d62 <__adddf3+0xe6>
 80a2fde:	bf00      	nop

080a2fe0 <__gedf2>:
 80a2fe0:	f04f 3cff 	mov.w	ip, #4294967295
 80a2fe4:	e006      	b.n	80a2ff4 <__cmpdf2+0x4>
 80a2fe6:	bf00      	nop

080a2fe8 <__ledf2>:
 80a2fe8:	f04f 0c01 	mov.w	ip, #1
 80a2fec:	e002      	b.n	80a2ff4 <__cmpdf2+0x4>
 80a2fee:	bf00      	nop

080a2ff0 <__cmpdf2>:
 80a2ff0:	f04f 0c01 	mov.w	ip, #1
 80a2ff4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2ff8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2ffc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3000:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3004:	bf18      	it	ne
 80a3006:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a300a:	d01b      	beq.n	80a3044 <__cmpdf2+0x54>
 80a300c:	b001      	add	sp, #4
 80a300e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a3012:	bf0c      	ite	eq
 80a3014:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a3018:	ea91 0f03 	teqne	r1, r3
 80a301c:	bf02      	ittt	eq
 80a301e:	ea90 0f02 	teqeq	r0, r2
 80a3022:	2000      	moveq	r0, #0
 80a3024:	4770      	bxeq	lr
 80a3026:	f110 0f00 	cmn.w	r0, #0
 80a302a:	ea91 0f03 	teq	r1, r3
 80a302e:	bf58      	it	pl
 80a3030:	4299      	cmppl	r1, r3
 80a3032:	bf08      	it	eq
 80a3034:	4290      	cmpeq	r0, r2
 80a3036:	bf2c      	ite	cs
 80a3038:	17d8      	asrcs	r0, r3, #31
 80a303a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a303e:	f040 0001 	orr.w	r0, r0, #1
 80a3042:	4770      	bx	lr
 80a3044:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3048:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a304c:	d102      	bne.n	80a3054 <__cmpdf2+0x64>
 80a304e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3052:	d107      	bne.n	80a3064 <__cmpdf2+0x74>
 80a3054:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3058:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a305c:	d1d6      	bne.n	80a300c <__cmpdf2+0x1c>
 80a305e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3062:	d0d3      	beq.n	80a300c <__cmpdf2+0x1c>
 80a3064:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3068:	4770      	bx	lr
 80a306a:	bf00      	nop

080a306c <__aeabi_cdrcmple>:
 80a306c:	4684      	mov	ip, r0
 80a306e:	4610      	mov	r0, r2
 80a3070:	4662      	mov	r2, ip
 80a3072:	468c      	mov	ip, r1
 80a3074:	4619      	mov	r1, r3
 80a3076:	4663      	mov	r3, ip
 80a3078:	e000      	b.n	80a307c <__aeabi_cdcmpeq>
 80a307a:	bf00      	nop

080a307c <__aeabi_cdcmpeq>:
 80a307c:	b501      	push	{r0, lr}
 80a307e:	f7ff ffb7 	bl	80a2ff0 <__cmpdf2>
 80a3082:	2800      	cmp	r0, #0
 80a3084:	bf48      	it	mi
 80a3086:	f110 0f00 	cmnmi.w	r0, #0
 80a308a:	bd01      	pop	{r0, pc}

080a308c <__aeabi_dcmpeq>:
 80a308c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3090:	f7ff fff4 	bl	80a307c <__aeabi_cdcmpeq>
 80a3094:	bf0c      	ite	eq
 80a3096:	2001      	moveq	r0, #1
 80a3098:	2000      	movne	r0, #0
 80a309a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a309e:	bf00      	nop

080a30a0 <__aeabi_dcmplt>:
 80a30a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a30a4:	f7ff ffea 	bl	80a307c <__aeabi_cdcmpeq>
 80a30a8:	bf34      	ite	cc
 80a30aa:	2001      	movcc	r0, #1
 80a30ac:	2000      	movcs	r0, #0
 80a30ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80a30b2:	bf00      	nop

080a30b4 <__aeabi_dcmple>:
 80a30b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a30b8:	f7ff ffe0 	bl	80a307c <__aeabi_cdcmpeq>
 80a30bc:	bf94      	ite	ls
 80a30be:	2001      	movls	r0, #1
 80a30c0:	2000      	movhi	r0, #0
 80a30c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a30c6:	bf00      	nop

080a30c8 <__aeabi_dcmpge>:
 80a30c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a30cc:	f7ff ffce 	bl	80a306c <__aeabi_cdrcmple>
 80a30d0:	bf94      	ite	ls
 80a30d2:	2001      	movls	r0, #1
 80a30d4:	2000      	movhi	r0, #0
 80a30d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a30da:	bf00      	nop

080a30dc <__aeabi_dcmpgt>:
 80a30dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a30e0:	f7ff ffc4 	bl	80a306c <__aeabi_cdrcmple>
 80a30e4:	bf34      	ite	cc
 80a30e6:	2001      	movcc	r0, #1
 80a30e8:	2000      	movcs	r0, #0
 80a30ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80a30ee:	bf00      	nop

080a30f0 <__aeabi_fmul>:
 80a30f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a30f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a30f8:	bf1e      	ittt	ne
 80a30fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a30fe:	ea92 0f0c 	teqne	r2, ip
 80a3102:	ea93 0f0c 	teqne	r3, ip
 80a3106:	d06f      	beq.n	80a31e8 <__aeabi_fmul+0xf8>
 80a3108:	441a      	add	r2, r3
 80a310a:	ea80 0c01 	eor.w	ip, r0, r1
 80a310e:	0240      	lsls	r0, r0, #9
 80a3110:	bf18      	it	ne
 80a3112:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a3116:	d01e      	beq.n	80a3156 <__aeabi_fmul+0x66>
 80a3118:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a311c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a3120:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a3124:	fba0 3101 	umull	r3, r1, r0, r1
 80a3128:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a312c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a3130:	bf3e      	ittt	cc
 80a3132:	0049      	lslcc	r1, r1, #1
 80a3134:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3138:	005b      	lslcc	r3, r3, #1
 80a313a:	ea40 0001 	orr.w	r0, r0, r1
 80a313e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a3142:	2afd      	cmp	r2, #253	; 0xfd
 80a3144:	d81d      	bhi.n	80a3182 <__aeabi_fmul+0x92>
 80a3146:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a314a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a314e:	bf08      	it	eq
 80a3150:	f020 0001 	biceq.w	r0, r0, #1
 80a3154:	4770      	bx	lr
 80a3156:	f090 0f00 	teq	r0, #0
 80a315a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a315e:	bf08      	it	eq
 80a3160:	0249      	lsleq	r1, r1, #9
 80a3162:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3166:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a316a:	3a7f      	subs	r2, #127	; 0x7f
 80a316c:	bfc2      	ittt	gt
 80a316e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3172:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3176:	4770      	bxgt	lr
 80a3178:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a317c:	f04f 0300 	mov.w	r3, #0
 80a3180:	3a01      	subs	r2, #1
 80a3182:	dc5d      	bgt.n	80a3240 <__aeabi_fmul+0x150>
 80a3184:	f112 0f19 	cmn.w	r2, #25
 80a3188:	bfdc      	itt	le
 80a318a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a318e:	4770      	bxle	lr
 80a3190:	f1c2 0200 	rsb	r2, r2, #0
 80a3194:	0041      	lsls	r1, r0, #1
 80a3196:	fa21 f102 	lsr.w	r1, r1, r2
 80a319a:	f1c2 0220 	rsb	r2, r2, #32
 80a319e:	fa00 fc02 	lsl.w	ip, r0, r2
 80a31a2:	ea5f 0031 	movs.w	r0, r1, rrx
 80a31a6:	f140 0000 	adc.w	r0, r0, #0
 80a31aa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a31ae:	bf08      	it	eq
 80a31b0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a31b4:	4770      	bx	lr
 80a31b6:	f092 0f00 	teq	r2, #0
 80a31ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a31be:	bf02      	ittt	eq
 80a31c0:	0040      	lsleq	r0, r0, #1
 80a31c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a31c6:	3a01      	subeq	r2, #1
 80a31c8:	d0f9      	beq.n	80a31be <__aeabi_fmul+0xce>
 80a31ca:	ea40 000c 	orr.w	r0, r0, ip
 80a31ce:	f093 0f00 	teq	r3, #0
 80a31d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a31d6:	bf02      	ittt	eq
 80a31d8:	0049      	lsleq	r1, r1, #1
 80a31da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a31de:	3b01      	subeq	r3, #1
 80a31e0:	d0f9      	beq.n	80a31d6 <__aeabi_fmul+0xe6>
 80a31e2:	ea41 010c 	orr.w	r1, r1, ip
 80a31e6:	e78f      	b.n	80a3108 <__aeabi_fmul+0x18>
 80a31e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a31ec:	ea92 0f0c 	teq	r2, ip
 80a31f0:	bf18      	it	ne
 80a31f2:	ea93 0f0c 	teqne	r3, ip
 80a31f6:	d00a      	beq.n	80a320e <__aeabi_fmul+0x11e>
 80a31f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a31fc:	bf18      	it	ne
 80a31fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3202:	d1d8      	bne.n	80a31b6 <__aeabi_fmul+0xc6>
 80a3204:	ea80 0001 	eor.w	r0, r0, r1
 80a3208:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a320c:	4770      	bx	lr
 80a320e:	f090 0f00 	teq	r0, #0
 80a3212:	bf17      	itett	ne
 80a3214:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a3218:	4608      	moveq	r0, r1
 80a321a:	f091 0f00 	teqne	r1, #0
 80a321e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a3222:	d014      	beq.n	80a324e <__aeabi_fmul+0x15e>
 80a3224:	ea92 0f0c 	teq	r2, ip
 80a3228:	d101      	bne.n	80a322e <__aeabi_fmul+0x13e>
 80a322a:	0242      	lsls	r2, r0, #9
 80a322c:	d10f      	bne.n	80a324e <__aeabi_fmul+0x15e>
 80a322e:	ea93 0f0c 	teq	r3, ip
 80a3232:	d103      	bne.n	80a323c <__aeabi_fmul+0x14c>
 80a3234:	024b      	lsls	r3, r1, #9
 80a3236:	bf18      	it	ne
 80a3238:	4608      	movne	r0, r1
 80a323a:	d108      	bne.n	80a324e <__aeabi_fmul+0x15e>
 80a323c:	ea80 0001 	eor.w	r0, r0, r1
 80a3240:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3244:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3248:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a324c:	4770      	bx	lr
 80a324e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3252:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a3256:	4770      	bx	lr

080a3258 <__aeabi_fdiv>:
 80a3258:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a325c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3260:	bf1e      	ittt	ne
 80a3262:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3266:	ea92 0f0c 	teqne	r2, ip
 80a326a:	ea93 0f0c 	teqne	r3, ip
 80a326e:	d069      	beq.n	80a3344 <__aeabi_fdiv+0xec>
 80a3270:	eba2 0203 	sub.w	r2, r2, r3
 80a3274:	ea80 0c01 	eor.w	ip, r0, r1
 80a3278:	0249      	lsls	r1, r1, #9
 80a327a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a327e:	d037      	beq.n	80a32f0 <__aeabi_fdiv+0x98>
 80a3280:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a3284:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a3288:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a328c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3290:	428b      	cmp	r3, r1
 80a3292:	bf38      	it	cc
 80a3294:	005b      	lslcc	r3, r3, #1
 80a3296:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a329a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a329e:	428b      	cmp	r3, r1
 80a32a0:	bf24      	itt	cs
 80a32a2:	1a5b      	subcs	r3, r3, r1
 80a32a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a32a8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a32ac:	bf24      	itt	cs
 80a32ae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a32b2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a32b6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a32ba:	bf24      	itt	cs
 80a32bc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a32c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a32c4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a32c8:	bf24      	itt	cs
 80a32ca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a32ce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a32d2:	011b      	lsls	r3, r3, #4
 80a32d4:	bf18      	it	ne
 80a32d6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a32da:	d1e0      	bne.n	80a329e <__aeabi_fdiv+0x46>
 80a32dc:	2afd      	cmp	r2, #253	; 0xfd
 80a32de:	f63f af50 	bhi.w	80a3182 <__aeabi_fmul+0x92>
 80a32e2:	428b      	cmp	r3, r1
 80a32e4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a32e8:	bf08      	it	eq
 80a32ea:	f020 0001 	biceq.w	r0, r0, #1
 80a32ee:	4770      	bx	lr
 80a32f0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a32f4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a32f8:	327f      	adds	r2, #127	; 0x7f
 80a32fa:	bfc2      	ittt	gt
 80a32fc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3300:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3304:	4770      	bxgt	lr
 80a3306:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a330a:	f04f 0300 	mov.w	r3, #0
 80a330e:	3a01      	subs	r2, #1
 80a3310:	e737      	b.n	80a3182 <__aeabi_fmul+0x92>
 80a3312:	f092 0f00 	teq	r2, #0
 80a3316:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a331a:	bf02      	ittt	eq
 80a331c:	0040      	lsleq	r0, r0, #1
 80a331e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3322:	3a01      	subeq	r2, #1
 80a3324:	d0f9      	beq.n	80a331a <__aeabi_fdiv+0xc2>
 80a3326:	ea40 000c 	orr.w	r0, r0, ip
 80a332a:	f093 0f00 	teq	r3, #0
 80a332e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3332:	bf02      	ittt	eq
 80a3334:	0049      	lsleq	r1, r1, #1
 80a3336:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a333a:	3b01      	subeq	r3, #1
 80a333c:	d0f9      	beq.n	80a3332 <__aeabi_fdiv+0xda>
 80a333e:	ea41 010c 	orr.w	r1, r1, ip
 80a3342:	e795      	b.n	80a3270 <__aeabi_fdiv+0x18>
 80a3344:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3348:	ea92 0f0c 	teq	r2, ip
 80a334c:	d108      	bne.n	80a3360 <__aeabi_fdiv+0x108>
 80a334e:	0242      	lsls	r2, r0, #9
 80a3350:	f47f af7d 	bne.w	80a324e <__aeabi_fmul+0x15e>
 80a3354:	ea93 0f0c 	teq	r3, ip
 80a3358:	f47f af70 	bne.w	80a323c <__aeabi_fmul+0x14c>
 80a335c:	4608      	mov	r0, r1
 80a335e:	e776      	b.n	80a324e <__aeabi_fmul+0x15e>
 80a3360:	ea93 0f0c 	teq	r3, ip
 80a3364:	d104      	bne.n	80a3370 <__aeabi_fdiv+0x118>
 80a3366:	024b      	lsls	r3, r1, #9
 80a3368:	f43f af4c 	beq.w	80a3204 <__aeabi_fmul+0x114>
 80a336c:	4608      	mov	r0, r1
 80a336e:	e76e      	b.n	80a324e <__aeabi_fmul+0x15e>
 80a3370:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3374:	bf18      	it	ne
 80a3376:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a337a:	d1ca      	bne.n	80a3312 <__aeabi_fdiv+0xba>
 80a337c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3380:	f47f af5c 	bne.w	80a323c <__aeabi_fmul+0x14c>
 80a3384:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a3388:	f47f af3c 	bne.w	80a3204 <__aeabi_fmul+0x114>
 80a338c:	e75f      	b.n	80a324e <__aeabi_fmul+0x15e>
 80a338e:	bf00      	nop

080a3390 <__gesf2>:
 80a3390:	f04f 3cff 	mov.w	ip, #4294967295
 80a3394:	e006      	b.n	80a33a4 <__cmpsf2+0x4>
 80a3396:	bf00      	nop

080a3398 <__lesf2>:
 80a3398:	f04f 0c01 	mov.w	ip, #1
 80a339c:	e002      	b.n	80a33a4 <__cmpsf2+0x4>
 80a339e:	bf00      	nop

080a33a0 <__cmpsf2>:
 80a33a0:	f04f 0c01 	mov.w	ip, #1
 80a33a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a33a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a33ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a33b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a33b4:	bf18      	it	ne
 80a33b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a33ba:	d011      	beq.n	80a33e0 <__cmpsf2+0x40>
 80a33bc:	b001      	add	sp, #4
 80a33be:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a33c2:	bf18      	it	ne
 80a33c4:	ea90 0f01 	teqne	r0, r1
 80a33c8:	bf58      	it	pl
 80a33ca:	ebb2 0003 	subspl.w	r0, r2, r3
 80a33ce:	bf88      	it	hi
 80a33d0:	17c8      	asrhi	r0, r1, #31
 80a33d2:	bf38      	it	cc
 80a33d4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a33d8:	bf18      	it	ne
 80a33da:	f040 0001 	orrne.w	r0, r0, #1
 80a33de:	4770      	bx	lr
 80a33e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a33e4:	d102      	bne.n	80a33ec <__cmpsf2+0x4c>
 80a33e6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a33ea:	d105      	bne.n	80a33f8 <__cmpsf2+0x58>
 80a33ec:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a33f0:	d1e4      	bne.n	80a33bc <__cmpsf2+0x1c>
 80a33f2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a33f6:	d0e1      	beq.n	80a33bc <__cmpsf2+0x1c>
 80a33f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a33fc:	4770      	bx	lr
 80a33fe:	bf00      	nop

080a3400 <__aeabi_cfrcmple>:
 80a3400:	4684      	mov	ip, r0
 80a3402:	4608      	mov	r0, r1
 80a3404:	4661      	mov	r1, ip
 80a3406:	e7ff      	b.n	80a3408 <__aeabi_cfcmpeq>

080a3408 <__aeabi_cfcmpeq>:
 80a3408:	b50f      	push	{r0, r1, r2, r3, lr}
 80a340a:	f7ff ffc9 	bl	80a33a0 <__cmpsf2>
 80a340e:	2800      	cmp	r0, #0
 80a3410:	bf48      	it	mi
 80a3412:	f110 0f00 	cmnmi.w	r0, #0
 80a3416:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a3418 <__aeabi_fcmpeq>:
 80a3418:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a341c:	f7ff fff4 	bl	80a3408 <__aeabi_cfcmpeq>
 80a3420:	bf0c      	ite	eq
 80a3422:	2001      	moveq	r0, #1
 80a3424:	2000      	movne	r0, #0
 80a3426:	f85d fb08 	ldr.w	pc, [sp], #8
 80a342a:	bf00      	nop

080a342c <__aeabi_fcmplt>:
 80a342c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3430:	f7ff ffea 	bl	80a3408 <__aeabi_cfcmpeq>
 80a3434:	bf34      	ite	cc
 80a3436:	2001      	movcc	r0, #1
 80a3438:	2000      	movcs	r0, #0
 80a343a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a343e:	bf00      	nop

080a3440 <__aeabi_fcmple>:
 80a3440:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3444:	f7ff ffe0 	bl	80a3408 <__aeabi_cfcmpeq>
 80a3448:	bf94      	ite	ls
 80a344a:	2001      	movls	r0, #1
 80a344c:	2000      	movhi	r0, #0
 80a344e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3452:	bf00      	nop

080a3454 <__aeabi_fcmpge>:
 80a3454:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3458:	f7ff ffd2 	bl	80a3400 <__aeabi_cfrcmple>
 80a345c:	bf94      	ite	ls
 80a345e:	2001      	movls	r0, #1
 80a3460:	2000      	movhi	r0, #0
 80a3462:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3466:	bf00      	nop

080a3468 <__aeabi_fcmpgt>:
 80a3468:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a346c:	f7ff ffc8 	bl	80a3400 <__aeabi_cfrcmple>
 80a3470:	bf34      	ite	cc
 80a3472:	2001      	movcc	r0, #1
 80a3474:	2000      	movcs	r0, #0
 80a3476:	f85d fb08 	ldr.w	pc, [sp], #8
 80a347a:	bf00      	nop

080a347c <__aeabi_f2uiz>:
 80a347c:	0042      	lsls	r2, r0, #1
 80a347e:	d20e      	bcs.n	80a349e <__aeabi_f2uiz+0x22>
 80a3480:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a3484:	d30b      	bcc.n	80a349e <__aeabi_f2uiz+0x22>
 80a3486:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a348a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a348e:	d409      	bmi.n	80a34a4 <__aeabi_f2uiz+0x28>
 80a3490:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a3494:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3498:	fa23 f002 	lsr.w	r0, r3, r2
 80a349c:	4770      	bx	lr
 80a349e:	f04f 0000 	mov.w	r0, #0
 80a34a2:	4770      	bx	lr
 80a34a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a34a8:	d101      	bne.n	80a34ae <__aeabi_f2uiz+0x32>
 80a34aa:	0242      	lsls	r2, r0, #9
 80a34ac:	d102      	bne.n	80a34b4 <__aeabi_f2uiz+0x38>
 80a34ae:	f04f 30ff 	mov.w	r0, #4294967295
 80a34b2:	4770      	bx	lr
 80a34b4:	f04f 0000 	mov.w	r0, #0
 80a34b8:	4770      	bx	lr
 80a34ba:	bf00      	nop

080a34bc <__cxa_atexit>:
 80a34bc:	b510      	push	{r4, lr}
 80a34be:	4c05      	ldr	r4, [pc, #20]	; (80a34d4 <__cxa_atexit+0x18>)
 80a34c0:	4613      	mov	r3, r2
 80a34c2:	b12c      	cbz	r4, 80a34d0 <__cxa_atexit+0x14>
 80a34c4:	460a      	mov	r2, r1
 80a34c6:	4601      	mov	r1, r0
 80a34c8:	2002      	movs	r0, #2
 80a34ca:	f3af 8000 	nop.w
 80a34ce:	bd10      	pop	{r4, pc}
 80a34d0:	4620      	mov	r0, r4
 80a34d2:	bd10      	pop	{r4, pc}
 80a34d4:	00000000 	.word	0x00000000

080a34d8 <memcpy>:
 80a34d8:	b510      	push	{r4, lr}
 80a34da:	1e43      	subs	r3, r0, #1
 80a34dc:	440a      	add	r2, r1
 80a34de:	4291      	cmp	r1, r2
 80a34e0:	d004      	beq.n	80a34ec <memcpy+0x14>
 80a34e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a34e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a34ea:	e7f8      	b.n	80a34de <memcpy+0x6>
 80a34ec:	bd10      	pop	{r4, pc}

080a34ee <memset>:
 80a34ee:	4603      	mov	r3, r0
 80a34f0:	4402      	add	r2, r0
 80a34f2:	4293      	cmp	r3, r2
 80a34f4:	d002      	beq.n	80a34fc <memset+0xe>
 80a34f6:	f803 1b01 	strb.w	r1, [r3], #1
 80a34fa:	e7fa      	b.n	80a34f2 <memset+0x4>
 80a34fc:	4770      	bx	lr

080a34fe <strlen>:
 80a34fe:	4603      	mov	r3, r0
 80a3500:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3504:	2a00      	cmp	r2, #0
 80a3506:	d1fb      	bne.n	80a3500 <strlen+0x2>
 80a3508:	1a18      	subs	r0, r3, r0
 80a350a:	3801      	subs	r0, #1
 80a350c:	4770      	bx	lr

080a350e <link_code_end>:
	...

080a3510 <dynalib_user>:
 80a3510:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a3520:	0000 0000 6573 7574 5370 6375 6563 7373     ....setupSuccess
 80a3530:	253d 0064 6f6e 7320 6d61 6c70 0065 5320     =%d.no sample. S
 80a3540:	4e45 4f53 2052 4954 454d 554f 0054 6964     ENSOR TIMEOUT.di
 80a3550:	7473 6e61 6563 4c00 6665 5f74 5345 0043     stance.Left_ESC.
 80a3560:	6952 6867 5f74 5345 0043 6157 7469 6e69     Right_ESC.Waitin
 80a3570:	2067 6f66 2072 7453 7261 0074 7453 7261     g for Start.Star
 80a3580:	6974 676e 6920 206e 2035 6573 6f63 646e     ting in 5 second
 80a3590:	2e73 2e2e 4700 214f 0000 0000               s....GO!....

080a359c <_ZTV9LIS3DHI2C>:
	...
 80a35a4:	13c1 080a 13c3 080a 1417 080a 13cf 080a     ................
 80a35b4:	6564 6976 6563 6e20 746f 6620 756f 646e     device not found
 80a35c4:	7200 7365 7465 6974 676e 6c20 7361 4d74     .resetting lastM
 80a35d4:	766f 6d65 6e65 2074 6e69 3174 735f 6372     ovement int1_src
 80a35e4:	303d 2578 0078 6572 6163 696c 7262 7461     =0x%x.recalibrat
 80a35f4:	6e69 0067                                   ing.

080a35f8 <_ZTV8SPIClass>:
	...
 80a3600:	1b51 080a 1b53 080a 0066 6e6c 6600 006e     Q...S...f.ln.fn.
 80a3610:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
 80a3620:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
 80a3630:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
 80a3640:	7465 6961 736c 3d20 0020 6162 6475 5300     etails = .baud.S
 80a3650:	7265 6169 006c 5355 5342 7265 6169 316c     erial.USBSerial1
 80a3660:	7400 7079 0065 6170 6172 006d 6d63 0064     .type.param.cmd.
 80a3670:	6469 6800 646e 7300 7274 006d 6966 746c     id.hnd.strm.filt
 80a3680:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
 80a3690:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
 80a36a0:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
 80a36b0:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
 80a36c0:	7061 0070 6f6e 656e 7400 6172 6563 6900     app.none.trace.i
 80a36d0:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
 80a36e0:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
 80a36f0:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
 80a3700:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
 80a3710:	0065 0000                                   e...

080a3714 <_ZTVN5spark6detail14FutureImplBaseIvNS0_13FutureContextEEE>:
	...
 80a371c:	1f79 080a 1fa9 080a                         y.......

080a3724 <_ZTVN5spark6detail10FutureImplIvNS0_13FutureContextEEE>:
	...
 80a372c:	1fbd 080a 1fd1 080a                         ........

080a3734 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail10FutureImplIvNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a373c:	1f3d 080a 1f4f 080a 1f3f 080a 1f5b 080a     =...O...?...[...
 80a374c:	1f4b 080a                                   K...

080a3750 <_ZTV9IPAddress>:
	...
 80a3758:	243d 080a 242f 080a 2431 080a               =$../$..1$..

080a3764 <_ZTV9USBSerial>:
	...
 80a376c:	24a5 080a 24e9 080a 24c3 080a 1c53 080a     .$...$...$..S...
 80a377c:	24bd 080a 24a7 080a 24af 080a 24e3 080a     .$...$...$...$..
 80a378c:	24b7 080a 24a1 080a                         .$...$..

080a3794 <_ZTV11USARTSerial>:
	...
 80a379c:	2665 080a 2689 080a 2695 080a 1c53 080a     e&...&...&..S...
 80a37ac:	2671 080a 267d 080a 2677 080a 2683 080a     q&..}&..w&...&..
 80a37bc:	2667 080a 266b 080a                         g&..k&..

080a37c4 <_ZTV7TwoWire>:
	...
 80a37cc:	275f 080a 27a9 080a 2781 080a 2761 080a     _'...'...'..a'..
 80a37dc:	2789 080a 2791 080a 2799 080a 27a1 080a     .'...'...'...'..

080a37ec <_ZTVN5spark9WiFiClassE>:
	...
 80a37f4:	282f 080a                                   /(..

080a37f8 <link_const_variable_data_end>:
 80a37f8:	080a0795 	.word	0x080a0795
 80a37fc:	080a13bd 	.word	0x080a13bd
 80a3800:	080a1611 	.word	0x080a1611
 80a3804:	080a1c4d 	.word	0x080a1c4d
 80a3808:	080a1de1 	.word	0x080a1de1
 80a380c:	080a1df1 	.word	0x080a1df1
 80a3810:	080a2839 	.word	0x080a2839
 80a3814:	080a291d 	.word	0x080a291d
 80a3818:	080a2961 	.word	0x080a2961
 80a381c:	080a29e1 	.word	0x080a29e1
 80a3820:	080a2a65 	.word	0x080a2a65
 80a3824:	080a2b29 	.word	0x080a2b29
 80a3828:	080a2bed 	.word	0x080a2bed

080a382c <link_constructors_end>:
 80a382c:	00000000 	.word	0x00000000
