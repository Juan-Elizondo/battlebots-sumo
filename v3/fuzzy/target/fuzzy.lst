
C:/src/battlebots-sumo/v3/fuzzy/target/fuzzy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e8  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a5400  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000064  20000300  080a5404  00030300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000628  20000364  20000364  00040364  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a5468  080a5468  00035468  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a5490  080a5490  00035490  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00094ea8  00000000  00000000  00035494  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000fe0c  00000000  00000000  000ca33c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000140ba  00000000  00000000  000da148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001f48  00000000  00000000  000ee202  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002d00  00000000  00000000  000f014a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000241b2  00000000  00000000  000f2e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000236ef  00000000  00000000  00116ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008687c  00000000  00000000  0013a6eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b66c  00000000  00000000  001c0f68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	e8 50 0a 08                                         .P..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f005 f83f 	bl	80a50b0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f005 f844 	bl	80a50c6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a5404 	.word	0x080a5404
 80a004c:	20000364 	.word	0x20000364
 80a0050:	20000364 	.word	0x20000364
 80a0054:	2000098c 	.word	0x2000098c
 80a0058:	2000098c 	.word	0x2000098c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f003 fc55 	bl	80a390c <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a53c0 	.word	0x080a53c0
 80a0084:	080a53f4 	.word	0x080a53f4

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f001 b888 	b.w	80a119c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f001 f8a9 	bl	80a11e4 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f003 bbf7 	b.w	80a3888 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f003 ba0b 	b.w	80a34b4 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f003 ba11 	b.w	80a34c4 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z5FLISRv>:
// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
unsigned long lastPrintSample = 0;

void FLISR() {
 80a00b4:	b508      	push	{r3, lr}
    FLflag = digitalRead(FL);
 80a00b6:	4b05      	ldr	r3, [pc, #20]	; (80a00cc <_Z5FLISRv+0x18>)
 80a00b8:	8818      	ldrh	r0, [r3, #0]
 80a00ba:	f003 fe99 	bl	80a3df0 <digitalRead>
 80a00be:	4b04      	ldr	r3, [pc, #16]	; (80a00d0 <_Z5FLISRv+0x1c>)
 80a00c0:	3000      	adds	r0, #0
 80a00c2:	bf18      	it	ne
 80a00c4:	2001      	movne	r0, #1
 80a00c6:	7018      	strb	r0, [r3, #0]
 80a00c8:	bd08      	pop	{r3, pc}
 80a00ca:	bf00      	nop
 80a00cc:	20000328 	.word	0x20000328
 80a00d0:	20000324 	.word	0x20000324

080a00d4 <_Z5FRISRv>:
}

void FRISR() {
 80a00d4:	b508      	push	{r3, lr}
    FRflag = digitalRead(FR);
 80a00d6:	4b05      	ldr	r3, [pc, #20]	; (80a00ec <_Z5FRISRv+0x18>)
 80a00d8:	8818      	ldrh	r0, [r3, #0]
 80a00da:	f003 fe89 	bl	80a3df0 <digitalRead>
 80a00de:	4b04      	ldr	r3, [pc, #16]	; (80a00f0 <_Z5FRISRv+0x1c>)
 80a00e0:	3000      	adds	r0, #0
 80a00e2:	bf18      	it	ne
 80a00e4:	2001      	movne	r0, #1
 80a00e6:	7018      	strb	r0, [r3, #0]
 80a00e8:	bd08      	pop	{r3, pc}
 80a00ea:	bf00      	nop
 80a00ec:	20000318 	.word	0x20000318
 80a00f0:	20000344 	.word	0x20000344

080a00f4 <_Z5BLISRv>:
}

void BLISR() {
 80a00f4:	b508      	push	{r3, lr}
    BLflag = digitalRead(BL);
 80a00f6:	4b05      	ldr	r3, [pc, #20]	; (80a010c <_Z5BLISRv+0x18>)
 80a00f8:	8818      	ldrh	r0, [r3, #0]
 80a00fa:	f003 fe79 	bl	80a3df0 <digitalRead>
 80a00fe:	4b04      	ldr	r3, [pc, #16]	; (80a0110 <_Z5BLISRv+0x1c>)
 80a0100:	3000      	adds	r0, #0
 80a0102:	bf18      	it	ne
 80a0104:	2001      	movne	r0, #1
 80a0106:	7018      	strb	r0, [r3, #0]
 80a0108:	bd08      	pop	{r3, pc}
 80a010a:	bf00      	nop
 80a010c:	2000031c 	.word	0x2000031c
 80a0110:	2000032c 	.word	0x2000032c

080a0114 <_Z5BRISRv>:
}

void BRISR() {
 80a0114:	b508      	push	{r3, lr}
    BRflag = digitalRead(BR);
 80a0116:	4b05      	ldr	r3, [pc, #20]	; (80a012c <_Z5BRISRv+0x18>)
 80a0118:	8818      	ldrh	r0, [r3, #0]
 80a011a:	f003 fe69 	bl	80a3df0 <digitalRead>
 80a011e:	4b04      	ldr	r3, [pc, #16]	; (80a0130 <_Z5BRISRv+0x1c>)
 80a0120:	3000      	adds	r0, #0
 80a0122:	bf18      	it	ne
 80a0124:	2001      	movne	r0, #1
 80a0126:	7018      	strb	r0, [r3, #0]
 80a0128:	bd08      	pop	{r3, pc}
 80a012a:	bf00      	nop
 80a012c:	20000320 	.word	0x20000320
 80a0130:	2000035c 	.word	0x2000035c

080a0134 <_Z5RSISRv>:
}

void RSISR() {
 80a0134:	b508      	push	{r3, lr}
    RSflag = digitalRead(RS);
 80a0136:	4b05      	ldr	r3, [pc, #20]	; (80a014c <_Z5RSISRv+0x18>)
 80a0138:	8818      	ldrh	r0, [r3, #0]
 80a013a:	f003 fe59 	bl	80a3df0 <digitalRead>
 80a013e:	4b04      	ldr	r3, [pc, #16]	; (80a0150 <_Z5RSISRv+0x1c>)
 80a0140:	3000      	adds	r0, #0
 80a0142:	bf18      	it	ne
 80a0144:	2001      	movne	r0, #1
 80a0146:	7018      	strb	r0, [r3, #0]
 80a0148:	bd08      	pop	{r3, pc}
 80a014a:	bf00      	nop
 80a014c:	20000300 	.word	0x20000300
 80a0150:	20000400 	.word	0x20000400

080a0154 <_Z8tof_initv>:
}

void tof_init() {
 80a0154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pinMode(A0, OUTPUT);
 80a0158:	2101      	movs	r1, #1
 80a015a:	200a      	movs	r0, #10
 80a015c:	f003 fe1e 	bl	80a3d9c <pinMode>
    pinMode(A1, OUTPUT);
 80a0160:	2101      	movs	r1, #1
 80a0162:	200b      	movs	r0, #11
 80a0164:	f003 fe1a 	bl	80a3d9c <pinMode>
    pinMode(A2, OUTPUT);
 80a0168:	2101      	movs	r1, #1
 80a016a:	200c      	movs	r0, #12
 80a016c:	f003 fe16 	bl	80a3d9c <pinMode>
    pinMode(A3, OUTPUT);
 80a0170:	2101      	movs	r1, #1
 80a0172:	200d      	movs	r0, #13
 80a0174:	f003 fe12 	bl	80a3d9c <pinMode>
    digitalWrite(A0, LOW);
 80a0178:	2100      	movs	r1, #0
 80a017a:	200a      	movs	r0, #10
 80a017c:	f003 fe1f 	bl	80a3dbe <digitalWrite>
    digitalWrite(A1, LOW);
 80a0180:	2100      	movs	r1, #0
 80a0182:	200b      	movs	r0, #11
 80a0184:	f003 fe1b 	bl	80a3dbe <digitalWrite>
    digitalWrite(A2, LOW);
 80a0188:	2100      	movs	r1, #0
 80a018a:	200c      	movs	r0, #12
 80a018c:	f003 fe17 	bl	80a3dbe <digitalWrite>
    digitalWrite(A3, LOW);
 80a0190:	2100      	movs	r1, #0
 80a0192:	200d      	movs	r0, #13
 80a0194:	f003 fe13 	bl	80a3dbe <digitalWrite>
    delay(500);
 80a0198:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a019c:	f003 fb3e 	bl	80a381c <delay>

    Wire.setSpeed(CLOCK_SPEED_100KHZ);  // need to initialize i2c protocol after driving shdn pins low
 80a01a0:	f003 fe74 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a01a4:	4940      	ldr	r1, [pc, #256]	; (80a02a8 <_Z8tof_initv+0x154>)
 80a01a6:	f003 fd95 	bl	80a3cd4 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();
 80a01aa:	f003 fe6f 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a01ae:	f003 fd95 	bl	80a3cdc <_ZN7TwoWire5beginEv>

    delay(10);
 80a01b2:	200a      	movs	r0, #10
 80a01b4:	f003 fb32 	bl	80a381c <delay>
    digitalWrite(A0, HIGH);
 80a01b8:	2101      	movs	r1, #1
 80a01ba:	200a      	movs	r0, #10
 80a01bc:	f003 fdff 	bl	80a3dbe <digitalWrite>
    digitalWrite(A1, HIGH);
 80a01c0:	2101      	movs	r1, #1
 80a01c2:	200b      	movs	r0, #11
 80a01c4:	f003 fdfb 	bl	80a3dbe <digitalWrite>
    digitalWrite(A2, HIGH);
 80a01c8:	2101      	movs	r1, #1
 80a01ca:	200c      	movs	r0, #12
 80a01cc:	f003 fdf7 	bl	80a3dbe <digitalWrite>
    digitalWrite(A3, HIGH);
 80a01d0:	2101      	movs	r1, #1
 80a01d2:	200d      	movs	r0, #13
 80a01d4:	f003 fdf3 	bl	80a3dbe <digitalWrite>
    delay(10);
 80a01d8:	200a      	movs	r0, #10
 80a01da:	f003 fb1f 	bl	80a381c <delay>
    digitalWrite(A1, LOW);
 80a01de:	2100      	movs	r1, #0
 80a01e0:	200b      	movs	r0, #11
 80a01e2:	f003 fdec 	bl	80a3dbe <digitalWrite>
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
 80a01e6:	4f31      	ldr	r7, [pc, #196]	; (80a02ac <_Z8tof_initv+0x158>)
    digitalWrite(A1, HIGH);
    digitalWrite(A2, HIGH);
    digitalWrite(A3, HIGH);
    delay(10);
    digitalWrite(A1, LOW);
    digitalWrite(A2, LOW);
 80a01e8:	2100      	movs	r1, #0
 80a01ea:	200c      	movs	r0, #12
 80a01ec:	f003 fde7 	bl	80a3dbe <digitalWrite>
    digitalWrite(A3, LOW);
 80a01f0:	2100      	movs	r1, #0
 80a01f2:	200d      	movs	r0, #13
 80a01f4:	f003 fde3 	bl	80a3dbe <digitalWrite>
    sensor0.init();
 80a01f8:	2101      	movs	r1, #1
 80a01fa:	4638      	mov	r0, r7
 80a01fc:	f001 fd28 	bl	80a1c50 <_ZN7VL53L0X4initEb>
    void startContinuous(uint32_t period_ms = 0);
    void stopContinuous(void);
    uint16_t readRangeContinuousMillimeters(void);
    uint16_t readRangeSingleMillimeters(void);

    inline void setTimeout(uint16_t timeout) { io_timeout = timeout; }
 80a0200:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    sensor0.setAddress(0x30);
 80a0204:	2130      	movs	r1, #48	; 0x30
 80a0206:	4638      	mov	r0, r7
 80a0208:	f001 f9d7 	bl	80a15ba <_ZN7VL53L0X10setAddressEh>
    sensor0.setTimeout(1000);
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
 80a020c:	4e28      	ldr	r6, [pc, #160]	; (80a02b0 <_Z8tof_initv+0x15c>)
 80a020e:	f8c7 8004 	str.w	r8, [r7, #4]
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
    sensor0.setAddress(0x30);
    sensor0.setTimeout(1000);
    delay(10);
 80a0212:	200a      	movs	r0, #10
 80a0214:	f003 fb02 	bl	80a381c <delay>
    digitalWrite(A1, HIGH);
 80a0218:	2101      	movs	r1, #1
 80a021a:	200b      	movs	r0, #11
 80a021c:	f003 fdcf 	bl	80a3dbe <digitalWrite>
    sensor1.init();
 80a0220:	2101      	movs	r1, #1
 80a0222:	4630      	mov	r0, r6
 80a0224:	f001 fd14 	bl	80a1c50 <_ZN7VL53L0X4initEb>
    sensor1.setAddress(0x31);
 80a0228:	2131      	movs	r1, #49	; 0x31
 80a022a:	4630      	mov	r0, r6
 80a022c:	f001 f9c5 	bl	80a15ba <_ZN7VL53L0X10setAddressEh>
    sensor1.setTimeout(1000);
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
 80a0230:	4d20      	ldr	r5, [pc, #128]	; (80a02b4 <_Z8tof_initv+0x160>)
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
    sensor1.setAddress(0x31);
    sensor1.setTimeout(1000);
    delay(10);
 80a0232:	200a      	movs	r0, #10
 80a0234:	f8c6 8004 	str.w	r8, [r6, #4]
 80a0238:	f003 faf0 	bl	80a381c <delay>
    digitalWrite(A2, HIGH);
 80a023c:	2101      	movs	r1, #1
 80a023e:	200c      	movs	r0, #12
 80a0240:	f003 fdbd 	bl	80a3dbe <digitalWrite>
    sensor2.init();
 80a0244:	2101      	movs	r1, #1
 80a0246:	4628      	mov	r0, r5
 80a0248:	f001 fd02 	bl	80a1c50 <_ZN7VL53L0X4initEb>
    sensor2.setAddress(0x32);
 80a024c:	2132      	movs	r1, #50	; 0x32
 80a024e:	4628      	mov	r0, r5
 80a0250:	f001 f9b3 	bl	80a15ba <_ZN7VL53L0X10setAddressEh>
    sensor2.setTimeout(1000);
    delay(10);
    digitalWrite(A3, HIGH);
    sensor3.init();
 80a0254:	4c18      	ldr	r4, [pc, #96]	; (80a02b8 <_Z8tof_initv+0x164>)
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
    sensor2.setAddress(0x32);
    sensor2.setTimeout(1000);
    delay(10);
 80a0256:	200a      	movs	r0, #10
 80a0258:	f8c5 8004 	str.w	r8, [r5, #4]
 80a025c:	f003 fade 	bl	80a381c <delay>
    digitalWrite(A3, HIGH);
 80a0260:	2101      	movs	r1, #1
 80a0262:	200d      	movs	r0, #13
 80a0264:	f003 fdab 	bl	80a3dbe <digitalWrite>
    sensor3.init();
 80a0268:	2101      	movs	r1, #1
 80a026a:	4620      	mov	r0, r4
 80a026c:	f001 fcf0 	bl	80a1c50 <_ZN7VL53L0X4initEb>
    sensor3.setAddress(0x33);
 80a0270:	2133      	movs	r1, #51	; 0x33
 80a0272:	4620      	mov	r0, r4
 80a0274:	f001 f9a1 	bl	80a15ba <_ZN7VL53L0X10setAddressEh>
    sensor3.setTimeout(1000);
    delay(10);
 80a0278:	200a      	movs	r0, #10
 80a027a:	f8c4 8004 	str.w	r8, [r4, #4]
 80a027e:	f003 facd 	bl	80a381c <delay>

    // Start continuous back-to-back mode (take readings as
    // fast as possible).  To use continuous timed mode
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
 80a0282:	4638      	mov	r0, r7
 80a0284:	210a      	movs	r1, #10
 80a0286:	f001 fab6 	bl	80a17f6 <_ZN7VL53L0X15startContinuousEm>
    sensor1.startContinuous(10);
 80a028a:	4630      	mov	r0, r6
 80a028c:	210a      	movs	r1, #10
 80a028e:	f001 fab2 	bl	80a17f6 <_ZN7VL53L0X15startContinuousEm>
    sensor2.startContinuous(10);
 80a0292:	4628      	mov	r0, r5
 80a0294:	210a      	movs	r1, #10
 80a0296:	f001 faae 	bl	80a17f6 <_ZN7VL53L0X15startContinuousEm>
    sensor3.startContinuous(10);			
 80a029a:	4620      	mov	r0, r4
}
 80a029c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
    sensor1.startContinuous(10);
    sensor2.startContinuous(10);
    sensor3.startContinuous(10);			
 80a02a0:	210a      	movs	r1, #10
 80a02a2:	f001 baa8 	b.w	80a17f6 <_ZN7VL53L0X15startContinuousEm>
 80a02a6:	bf00      	nop
 80a02a8:	000186a0 	.word	0x000186a0
 80a02ac:	200003a8 	.word	0x200003a8
 80a02b0:	20000408 	.word	0x20000408
 80a02b4:	200003c0 	.word	0x200003c0
 80a02b8:	200003d8 	.word	0x200003d8

080a02bc <_Z10accel_initv>:
}

void accel_init() {
 80a02bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  LIS3DHConfig config;
 80a02be:	a801      	add	r0, sp, #4
 80a02c0:	f001 ff9b 	bl	80a21fa <_ZN12LIS3DHConfigC1Ev>
  config.setAccelMode(LIS3DH::RATE_400_HZ);
 80a02c4:	2170      	movs	r1, #112	; 0x70
 80a02c6:	a801      	add	r0, sp, #4
 80a02c8:	f001 ffa4 	bl	80a2214 <_ZN12LIS3DHConfig12setAccelModeEh>

  bool setupSuccess = accel.setup(config);
 80a02cc:	a901      	add	r1, sp, #4
 80a02ce:	4803      	ldr	r0, [pc, #12]	; (80a02dc <_Z10accel_initv+0x20>)
 80a02d0:	f001 fff8 	bl	80a22c4 <_ZN6LIS3DH5setupER12LIS3DHConfig>
  // Serial.printlnf("setupSuccess=%d", setupSuccess);
}
 80a02d4:	b005      	add	sp, #20
 80a02d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80a02da:	bf00      	nop
 80a02dc:	20000380 	.word	0x20000380

080a02e0 <_Z11others_initv>:

void others_init() {
 80a02e0:	b508      	push	{r3, lr}
	// Line sensors
  	pinMode(FL, INPUT);
 80a02e2:	4b12      	ldr	r3, [pc, #72]	; (80a032c <_Z11others_initv+0x4c>)
 80a02e4:	2100      	movs	r1, #0
 80a02e6:	8818      	ldrh	r0, [r3, #0]
 80a02e8:	f003 fd58 	bl	80a3d9c <pinMode>
  	pinMode(FR, INPUT);
 80a02ec:	4b10      	ldr	r3, [pc, #64]	; (80a0330 <_Z11others_initv+0x50>)
 80a02ee:	2100      	movs	r1, #0
 80a02f0:	8818      	ldrh	r0, [r3, #0]
 80a02f2:	f003 fd53 	bl	80a3d9c <pinMode>
  	pinMode(BL, INPUT);
 80a02f6:	4b0f      	ldr	r3, [pc, #60]	; (80a0334 <_Z11others_initv+0x54>)
 80a02f8:	2100      	movs	r1, #0
 80a02fa:	8818      	ldrh	r0, [r3, #0]
 80a02fc:	f003 fd4e 	bl	80a3d9c <pinMode>
  	pinMode(BR, INPUT);
 80a0300:	4b0d      	ldr	r3, [pc, #52]	; (80a0338 <_Z11others_initv+0x58>)
 80a0302:	2100      	movs	r1, #0
 80a0304:	8818      	ldrh	r0, [r3, #0]
 80a0306:	f003 fd49 	bl	80a3d9c <pinMode>
  	// Remote switch
  	pinMode(RS, INPUT);
 80a030a:	4b0c      	ldr	r3, [pc, #48]	; (80a033c <_Z11others_initv+0x5c>)
 80a030c:	2100      	movs	r1, #0
 80a030e:	8818      	ldrh	r0, [r3, #0]
 80a0310:	f003 fd44 	bl	80a3d9c <pinMode>
  	// Car ESCs
  	pinMode(Lmotor, OUTPUT);
 80a0314:	4b0a      	ldr	r3, [pc, #40]	; (80a0340 <_Z11others_initv+0x60>)
 80a0316:	2101      	movs	r1, #1
 80a0318:	8818      	ldrh	r0, [r3, #0]
 80a031a:	f003 fd3f 	bl	80a3d9c <pinMode>
  	pinMode(Rmotor, OUTPUT);
 80a031e:	4b09      	ldr	r3, [pc, #36]	; (80a0344 <_Z11others_initv+0x64>)
 80a0320:	2101      	movs	r1, #1
 80a0322:	8818      	ldrh	r0, [r3, #0]

  	// ***Remove for competition***
  	// ***Serial monitor***
  	// Serial.begin(9600);	// *** need to modify before comp ***
}
 80a0324:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  	pinMode(BR, INPUT);
  	// Remote switch
  	pinMode(RS, INPUT);
  	// Car ESCs
  	pinMode(Lmotor, OUTPUT);
  	pinMode(Rmotor, OUTPUT);
 80a0328:	f003 bd38 	b.w	80a3d9c <pinMode>
 80a032c:	20000328 	.word	0x20000328
 80a0330:	20000318 	.word	0x20000318
 80a0334:	2000031c 	.word	0x2000031c
 80a0338:	20000320 	.word	0x20000320
 80a033c:	20000300 	.word	0x20000300
 80a0340:	20000348 	.word	0x20000348
 80a0344:	2000033c 	.word	0x2000033c

080a0348 <_Z14interrupt_initv>:
  	// ***Remove for competition***
  	// ***Serial monitor***
  	// Serial.begin(9600);	// *** need to modify before comp ***
}

void interrupt_init() {
 80a0348:	b513      	push	{r0, r1, r4, lr}
	// Line sensors
	attachInterrupt(FL, FLISR, CHANGE);
 80a034a:	4b18      	ldr	r3, [pc, #96]	; (80a03ac <_Z14interrupt_initv+0x64>)
 80a034c:	2400      	movs	r4, #0
 80a034e:	8818      	ldrh	r0, [r3, #0]
 80a0350:	4622      	mov	r2, r4
 80a0352:	9400      	str	r4, [sp, #0]
 80a0354:	f04f 33ff 	mov.w	r3, #4294967295
 80a0358:	4915      	ldr	r1, [pc, #84]	; (80a03b0 <_Z14interrupt_initv+0x68>)
 80a035a:	f003 fbed 	bl	80a3b38 <_Z15attachInterrupttPFvvE13InterruptModeah>
   	attachInterrupt(FR, FRISR, CHANGE);
 80a035e:	4b15      	ldr	r3, [pc, #84]	; (80a03b4 <_Z14interrupt_initv+0x6c>)
 80a0360:	4622      	mov	r2, r4
 80a0362:	8818      	ldrh	r0, [r3, #0]
 80a0364:	4914      	ldr	r1, [pc, #80]	; (80a03b8 <_Z14interrupt_initv+0x70>)
 80a0366:	9400      	str	r4, [sp, #0]
 80a0368:	f04f 33ff 	mov.w	r3, #4294967295
 80a036c:	f003 fbe4 	bl	80a3b38 <_Z15attachInterrupttPFvvE13InterruptModeah>
   	attachInterrupt(BL, BLISR, CHANGE);
 80a0370:	4b12      	ldr	r3, [pc, #72]	; (80a03bc <_Z14interrupt_initv+0x74>)
 80a0372:	4622      	mov	r2, r4
 80a0374:	8818      	ldrh	r0, [r3, #0]
 80a0376:	4912      	ldr	r1, [pc, #72]	; (80a03c0 <_Z14interrupt_initv+0x78>)
 80a0378:	9400      	str	r4, [sp, #0]
 80a037a:	f04f 33ff 	mov.w	r3, #4294967295
 80a037e:	f003 fbdb 	bl	80a3b38 <_Z15attachInterrupttPFvvE13InterruptModeah>
   	attachInterrupt(BR, BRISR, CHANGE);
 80a0382:	4b10      	ldr	r3, [pc, #64]	; (80a03c4 <_Z14interrupt_initv+0x7c>)
 80a0384:	4622      	mov	r2, r4
 80a0386:	8818      	ldrh	r0, [r3, #0]
 80a0388:	490f      	ldr	r1, [pc, #60]	; (80a03c8 <_Z14interrupt_initv+0x80>)
 80a038a:	9400      	str	r4, [sp, #0]
 80a038c:	f04f 33ff 	mov.w	r3, #4294967295
 80a0390:	f003 fbd2 	bl	80a3b38 <_Z15attachInterrupttPFvvE13InterruptModeah>
   	// Remote switch
   	attachInterrupt(RS, RSISR, CHANGE);
 80a0394:	4b0d      	ldr	r3, [pc, #52]	; (80a03cc <_Z14interrupt_initv+0x84>)
 80a0396:	4622      	mov	r2, r4
 80a0398:	8818      	ldrh	r0, [r3, #0]
 80a039a:	490d      	ldr	r1, [pc, #52]	; (80a03d0 <_Z14interrupt_initv+0x88>)
 80a039c:	9400      	str	r4, [sp, #0]
 80a039e:	f04f 33ff 	mov.w	r3, #4294967295
 80a03a2:	f003 fbc9 	bl	80a3b38 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
 80a03a6:	b002      	add	sp, #8
 80a03a8:	bd10      	pop	{r4, pc}
 80a03aa:	bf00      	nop
 80a03ac:	20000328 	.word	0x20000328
 80a03b0:	080a00b5 	.word	0x080a00b5
 80a03b4:	20000318 	.word	0x20000318
 80a03b8:	080a00d5 	.word	0x080a00d5
 80a03bc:	2000031c 	.word	0x2000031c
 80a03c0:	080a00f5 	.word	0x080a00f5
 80a03c4:	20000320 	.word	0x20000320
 80a03c8:	080a0115 	.word	0x080a0115
 80a03cc:	20000300 	.word	0x20000300
 80a03d0:	080a0135 	.word	0x080a0135

080a03d4 <_Z8ESC_initv>:

void ESC_init() {
 80a03d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Necessary for Servo objects
  	LESC.attach(Lmotor);
 80a03d6:	4b13      	ldr	r3, [pc, #76]	; (80a0424 <_Z8ESC_initv+0x50>)
 80a03d8:	4d13      	ldr	r5, [pc, #76]	; (80a0428 <_Z8ESC_initv+0x54>)
 80a03da:	2600      	movs	r6, #0
 80a03dc:	27b4      	movs	r7, #180	; 0xb4
 80a03de:	8819      	ldrh	r1, [r3, #0]
 80a03e0:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a03e4:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80a03e8:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a03ec:	4628      	mov	r0, r5
 80a03ee:	f003 f8cc 	bl	80a358a <_ZN5Servo6attachEtttss>
  	RESC.attach(Rmotor);
 80a03f2:	4c0e      	ldr	r4, [pc, #56]	; (80a042c <_Z8ESC_initv+0x58>)
 80a03f4:	4b0e      	ldr	r3, [pc, #56]	; (80a0430 <_Z8ESC_initv+0x5c>)
 80a03f6:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a03fa:	8819      	ldrh	r1, [r3, #0]
 80a03fc:	4620      	mov	r0, r4
 80a03fe:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a0402:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80a0406:	f003 f8c0 	bl	80a358a <_ZN5Servo6attachEtttss>
  	// Write stop command
  	LESC.writeMicroseconds(1500);
 80a040a:	4628      	mov	r0, r5
 80a040c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a0410:	f003 f887 	bl	80a3522 <_ZN5Servo17writeMicrosecondsEt>
  	RESC.writeMicroseconds(1500);
 80a0414:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a0418:	4620      	mov	r0, r4
}
 80a041a:	b003      	add	sp, #12
 80a041c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	// Necessary for Servo objects
  	LESC.attach(Lmotor);
  	RESC.attach(Rmotor);
  	// Write stop command
  	LESC.writeMicroseconds(1500);
  	RESC.writeMicroseconds(1500);
 80a0420:	f003 b87f 	b.w	80a3522 <_ZN5Servo17writeMicrosecondsEt>
 80a0424:	20000348 	.word	0x20000348
 80a0428:	20000370 	.word	0x20000370
 80a042c:	200003f0 	.word	0x200003f0
 80a0430:	2000033c 	.word	0x2000033c

080a0434 <_Z10robot_initv>:
}

void robot_init() {
 80a0434:	b510      	push	{r4, lr}
  while(RSflag == LOW) {    // initial LOW
 80a0436:	4c0c      	ldr	r4, [pc, #48]	; (80a0468 <_Z10robot_initv+0x34>)
 80a0438:	7823      	ldrb	r3, [r4, #0]
 80a043a:	b92b      	cbnz	r3, 80a0448 <_Z10robot_initv+0x14>
    Serial.println("Waiting for Start");
 80a043c:	f003 fb18 	bl	80a3a70 <_Z16_fetch_usbserialv>
 80a0440:	490a      	ldr	r1, [pc, #40]	; (80a046c <_Z10robot_initv+0x38>)
 80a0442:	f003 f974 	bl	80a372e <_ZN5Print7printlnEPKc>
  	LESC.writeMicroseconds(1500);
  	RESC.writeMicroseconds(1500);
}

void robot_init() {
  while(RSflag == LOW) {    // initial LOW
 80a0446:	e7f7      	b.n	80a0438 <_Z10robot_initv+0x4>
    Serial.println("Waiting for Start");
  }
  Serial.println("Starting in 5 seconds...");
 80a0448:	f003 fb12 	bl	80a3a70 <_Z16_fetch_usbserialv>
 80a044c:	4908      	ldr	r1, [pc, #32]	; (80a0470 <_Z10robot_initv+0x3c>)
 80a044e:	f003 f96e 	bl	80a372e <_ZN5Print7printlnEPKc>
  delay(5000);
 80a0452:	f241 3088 	movw	r0, #5000	; 0x1388
 80a0456:	f003 f9e1 	bl	80a381c <delay>
  Serial.println("GO!");    
 80a045a:	f003 fb09 	bl	80a3a70 <_Z16_fetch_usbserialv>
}
 80a045e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  while(RSflag == LOW) {    // initial LOW
    Serial.println("Waiting for Start");
  }
  Serial.println("Starting in 5 seconds...");
  delay(5000);
  Serial.println("GO!");    
 80a0462:	4904      	ldr	r1, [pc, #16]	; (80a0474 <_Z10robot_initv+0x40>)
 80a0464:	f003 b963 	b.w	80a372e <_ZN5Print7printlnEPKc>
 80a0468:	20000400 	.word	0x20000400
 80a046c:	080a50fc 	.word	0x080a50fc
 80a0470:	080a510e 	.word	0x080a510e
 80a0474:	080a5127 	.word	0x080a5127

080a0478 <_Z10fuzzy_initv>:
}

void fuzzy_init() {
 80a0478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // low = far, high = close

  // INPUT: 1 of 4
  FuzzyInput* LL_input = new FuzzyInput(1);
 80a047c:	2010      	movs	r0, #16
  Serial.println("Starting in 5 seconds...");
  delay(5000);
  Serial.println("GO!");    
}

void fuzzy_init() {
 80a047e:	b099      	sub	sp, #100	; 0x64
  // low = far, high = close

  // INPUT: 1 of 4
  FuzzyInput* LL_input = new FuzzyInput(1);
 80a0480:	f7ff fe0b 	bl	80a009a <_Znwj>
 80a0484:	4604      	mov	r4, r0
 80a0486:	b110      	cbz	r0, 80a048e <_Z10fuzzy_initv+0x16>
 80a0488:	2101      	movs	r1, #1
 80a048a:	f002 f9b8 	bl	80a27fe <_ZN10FuzzyInputC1Ei>
  FuzzySet* LL_low = new FuzzySet(low1, low2, low3, low4);
 80a048e:	2014      	movs	r0, #20
 80a0490:	f7ff fe03 	bl	80a009a <_Znwj>
 80a0494:	4605      	mov	r5, r0
 80a0496:	b1c8      	cbz	r0, 80a04cc <_Z10fuzzy_initv+0x54>
 80a0498:	4ba2      	ldr	r3, [pc, #648]	; (80a0724 <_Z10fuzzy_initv+0x2ac>)
 80a049a:	6818      	ldr	r0, [r3, #0]
 80a049c:	f004 fbc0 	bl	80a4c20 <__aeabi_i2f>
 80a04a0:	4ba1      	ldr	r3, [pc, #644]	; (80a0728 <_Z10fuzzy_initv+0x2b0>)
 80a04a2:	4680      	mov	r8, r0
 80a04a4:	6818      	ldr	r0, [r3, #0]
 80a04a6:	f004 fbbb 	bl	80a4c20 <__aeabi_i2f>
 80a04aa:	4ba0      	ldr	r3, [pc, #640]	; (80a072c <_Z10fuzzy_initv+0x2b4>)
 80a04ac:	4607      	mov	r7, r0
 80a04ae:	6818      	ldr	r0, [r3, #0]
 80a04b0:	f004 fbb6 	bl	80a4c20 <__aeabi_i2f>
 80a04b4:	4b9e      	ldr	r3, [pc, #632]	; (80a0730 <_Z10fuzzy_initv+0x2b8>)
 80a04b6:	4606      	mov	r6, r0
 80a04b8:	6818      	ldr	r0, [r3, #0]
 80a04ba:	f004 fbb1 	bl	80a4c20 <__aeabi_i2f>
 80a04be:	4643      	mov	r3, r8
 80a04c0:	9000      	str	r0, [sp, #0]
 80a04c2:	463a      	mov	r2, r7
 80a04c4:	4631      	mov	r1, r6
 80a04c6:	4628      	mov	r0, r5
 80a04c8:	f002 fc15 	bl	80a2cf6 <_ZN8FuzzySetC1Effff>
  FuzzySet* LL_med = new FuzzySet(med1, med2, med3, med4);
 80a04cc:	2014      	movs	r0, #20
 80a04ce:	f7ff fde4 	bl	80a009a <_Znwj>
 80a04d2:	4680      	mov	r8, r0
 80a04d4:	b1c8      	cbz	r0, 80a050a <_Z10fuzzy_initv+0x92>
 80a04d6:	4b97      	ldr	r3, [pc, #604]	; (80a0734 <_Z10fuzzy_initv+0x2bc>)
 80a04d8:	6818      	ldr	r0, [r3, #0]
 80a04da:	f004 fba1 	bl	80a4c20 <__aeabi_i2f>
 80a04de:	4b96      	ldr	r3, [pc, #600]	; (80a0738 <_Z10fuzzy_initv+0x2c0>)
 80a04e0:	4681      	mov	r9, r0
 80a04e2:	6818      	ldr	r0, [r3, #0]
 80a04e4:	f004 fb9c 	bl	80a4c20 <__aeabi_i2f>
 80a04e8:	4b94      	ldr	r3, [pc, #592]	; (80a073c <_Z10fuzzy_initv+0x2c4>)
 80a04ea:	4607      	mov	r7, r0
 80a04ec:	6818      	ldr	r0, [r3, #0]
 80a04ee:	f004 fb97 	bl	80a4c20 <__aeabi_i2f>
 80a04f2:	4b93      	ldr	r3, [pc, #588]	; (80a0740 <_Z10fuzzy_initv+0x2c8>)
 80a04f4:	4606      	mov	r6, r0
 80a04f6:	6818      	ldr	r0, [r3, #0]
 80a04f8:	f004 fb92 	bl	80a4c20 <__aeabi_i2f>
 80a04fc:	464b      	mov	r3, r9
 80a04fe:	9000      	str	r0, [sp, #0]
 80a0500:	463a      	mov	r2, r7
 80a0502:	4631      	mov	r1, r6
 80a0504:	4640      	mov	r0, r8
 80a0506:	f002 fbf6 	bl	80a2cf6 <_ZN8FuzzySetC1Effff>
  FuzzySet* LL_high = new FuzzySet(high1, high2, high3, high4);
 80a050a:	2014      	movs	r0, #20
 80a050c:	f7ff fdc5 	bl	80a009a <_Znwj>
 80a0510:	4607      	mov	r7, r0
 80a0512:	b1c8      	cbz	r0, 80a0548 <_Z10fuzzy_initv+0xd0>
 80a0514:	4b8b      	ldr	r3, [pc, #556]	; (80a0744 <_Z10fuzzy_initv+0x2cc>)
 80a0516:	6818      	ldr	r0, [r3, #0]
 80a0518:	f004 fb82 	bl	80a4c20 <__aeabi_i2f>
 80a051c:	4b8a      	ldr	r3, [pc, #552]	; (80a0748 <_Z10fuzzy_initv+0x2d0>)
 80a051e:	4682      	mov	sl, r0
 80a0520:	6818      	ldr	r0, [r3, #0]
 80a0522:	f004 fb7d 	bl	80a4c20 <__aeabi_i2f>
 80a0526:	4b89      	ldr	r3, [pc, #548]	; (80a074c <_Z10fuzzy_initv+0x2d4>)
 80a0528:	4681      	mov	r9, r0
 80a052a:	6818      	ldr	r0, [r3, #0]
 80a052c:	f004 fb78 	bl	80a4c20 <__aeabi_i2f>
 80a0530:	4b87      	ldr	r3, [pc, #540]	; (80a0750 <_Z10fuzzy_initv+0x2d8>)
 80a0532:	4606      	mov	r6, r0
 80a0534:	6818      	ldr	r0, [r3, #0]
 80a0536:	f004 fb73 	bl	80a4c20 <__aeabi_i2f>
 80a053a:	4653      	mov	r3, sl
 80a053c:	9000      	str	r0, [sp, #0]
 80a053e:	464a      	mov	r2, r9
 80a0540:	4631      	mov	r1, r6
 80a0542:	4638      	mov	r0, r7
 80a0544:	f002 fbd7 	bl	80a2cf6 <_ZN8FuzzySetC1Effff>
  LL_input->addFuzzySet(LL_low);
 80a0548:	4629      	mov	r1, r5
 80a054a:	4620      	mov	r0, r4
 80a054c:	f002 f973 	bl	80a2836 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  LL_input->addFuzzySet(LL_med);
  LL_input->addFuzzySet(LL_high);
  fuzzy->addFuzzyInput(LL_input);
 80a0550:	4e80      	ldr	r6, [pc, #512]	; (80a0754 <_Z10fuzzy_initv+0x2dc>)
  FuzzyInput* LL_input = new FuzzyInput(1);
  FuzzySet* LL_low = new FuzzySet(low1, low2, low3, low4);
  FuzzySet* LL_med = new FuzzySet(med1, med2, med3, med4);
  FuzzySet* LL_high = new FuzzySet(high1, high2, high3, high4);
  LL_input->addFuzzySet(LL_low);
  LL_input->addFuzzySet(LL_med);
 80a0552:	4641      	mov	r1, r8
 80a0554:	4620      	mov	r0, r4
 80a0556:	f002 f96e 	bl	80a2836 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  LL_input->addFuzzySet(LL_high);
 80a055a:	4639      	mov	r1, r7
 80a055c:	4620      	mov	r0, r4
 80a055e:	f002 f96a 	bl	80a2836 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyInput(LL_input);
 80a0562:	4621      	mov	r1, r4
 80a0564:	6830      	ldr	r0, [r6, #0]
 80a0566:	f002 fc9a 	bl	80a2e9e <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>

  // INPUT: 2 of 4
  FuzzyInput* LM_input = new FuzzyInput(2);
 80a056a:	2010      	movs	r0, #16
 80a056c:	f7ff fd95 	bl	80a009a <_Znwj>
 80a0570:	46b3      	mov	fp, r6
 80a0572:	4604      	mov	r4, r0
 80a0574:	b110      	cbz	r0, 80a057c <_Z10fuzzy_initv+0x104>
 80a0576:	2102      	movs	r1, #2
 80a0578:	f002 f941 	bl	80a27fe <_ZN10FuzzyInputC1Ei>
  FuzzySet* LM_low = new FuzzySet(low1, low2, low3, low4);
 80a057c:	2014      	movs	r0, #20
 80a057e:	f7ff fd8c 	bl	80a009a <_Znwj>
 80a0582:	4606      	mov	r6, r0
 80a0584:	b1c8      	cbz	r0, 80a05ba <_Z10fuzzy_initv+0x142>
 80a0586:	4b67      	ldr	r3, [pc, #412]	; (80a0724 <_Z10fuzzy_initv+0x2ac>)
 80a0588:	6818      	ldr	r0, [r3, #0]
 80a058a:	f004 fb49 	bl	80a4c20 <__aeabi_i2f>
 80a058e:	4a66      	ldr	r2, [pc, #408]	; (80a0728 <_Z10fuzzy_initv+0x2b0>)
 80a0590:	9003      	str	r0, [sp, #12]
 80a0592:	6810      	ldr	r0, [r2, #0]
 80a0594:	f004 fb44 	bl	80a4c20 <__aeabi_i2f>
 80a0598:	4a64      	ldr	r2, [pc, #400]	; (80a072c <_Z10fuzzy_initv+0x2b4>)
 80a059a:	4682      	mov	sl, r0
 80a059c:	6810      	ldr	r0, [r2, #0]
 80a059e:	f004 fb3f 	bl	80a4c20 <__aeabi_i2f>
 80a05a2:	4a63      	ldr	r2, [pc, #396]	; (80a0730 <_Z10fuzzy_initv+0x2b8>)
 80a05a4:	4681      	mov	r9, r0
 80a05a6:	6810      	ldr	r0, [r2, #0]
 80a05a8:	f004 fb3a 	bl	80a4c20 <__aeabi_i2f>
 80a05ac:	9b03      	ldr	r3, [sp, #12]
 80a05ae:	9000      	str	r0, [sp, #0]
 80a05b0:	4652      	mov	r2, sl
 80a05b2:	4649      	mov	r1, r9
 80a05b4:	4630      	mov	r0, r6
 80a05b6:	f002 fb9e 	bl	80a2cf6 <_ZN8FuzzySetC1Effff>
  FuzzySet* LM_med = new FuzzySet(med1, med2, med3, med4);
 80a05ba:	2014      	movs	r0, #20
 80a05bc:	f7ff fd6d 	bl	80a009a <_Znwj>
 80a05c0:	4681      	mov	r9, r0
 80a05c2:	b1c8      	cbz	r0, 80a05f8 <_Z10fuzzy_initv+0x180>
 80a05c4:	4b5b      	ldr	r3, [pc, #364]	; (80a0734 <_Z10fuzzy_initv+0x2bc>)
 80a05c6:	6818      	ldr	r0, [r3, #0]
 80a05c8:	f004 fb2a 	bl	80a4c20 <__aeabi_i2f>
 80a05cc:	4a5a      	ldr	r2, [pc, #360]	; (80a0738 <_Z10fuzzy_initv+0x2c0>)
 80a05ce:	9004      	str	r0, [sp, #16]
 80a05d0:	6810      	ldr	r0, [r2, #0]
 80a05d2:	f004 fb25 	bl	80a4c20 <__aeabi_i2f>
 80a05d6:	4959      	ldr	r1, [pc, #356]	; (80a073c <_Z10fuzzy_initv+0x2c4>)
 80a05d8:	9003      	str	r0, [sp, #12]
 80a05da:	6808      	ldr	r0, [r1, #0]
 80a05dc:	f004 fb20 	bl	80a4c20 <__aeabi_i2f>
 80a05e0:	4957      	ldr	r1, [pc, #348]	; (80a0740 <_Z10fuzzy_initv+0x2c8>)
 80a05e2:	4682      	mov	sl, r0
 80a05e4:	6808      	ldr	r0, [r1, #0]
 80a05e6:	f004 fb1b 	bl	80a4c20 <__aeabi_i2f>
 80a05ea:	9b04      	ldr	r3, [sp, #16]
 80a05ec:	9000      	str	r0, [sp, #0]
 80a05ee:	9a03      	ldr	r2, [sp, #12]
 80a05f0:	4651      	mov	r1, sl
 80a05f2:	4648      	mov	r0, r9
 80a05f4:	f002 fb7f 	bl	80a2cf6 <_ZN8FuzzySetC1Effff>
  FuzzySet* LM_high = new FuzzySet(high1, high2, high3, high4);
 80a05f8:	2014      	movs	r0, #20
 80a05fa:	f7ff fd4e 	bl	80a009a <_Znwj>
 80a05fe:	4682      	mov	sl, r0
 80a0600:	b1c0      	cbz	r0, 80a0634 <_Z10fuzzy_initv+0x1bc>
 80a0602:	4b50      	ldr	r3, [pc, #320]	; (80a0744 <_Z10fuzzy_initv+0x2cc>)
 80a0604:	6818      	ldr	r0, [r3, #0]
 80a0606:	f004 fb0b 	bl	80a4c20 <__aeabi_i2f>
 80a060a:	4a4f      	ldr	r2, [pc, #316]	; (80a0748 <_Z10fuzzy_initv+0x2d0>)
 80a060c:	9005      	str	r0, [sp, #20]
 80a060e:	6810      	ldr	r0, [r2, #0]
 80a0610:	f004 fb06 	bl	80a4c20 <__aeabi_i2f>
 80a0614:	494d      	ldr	r1, [pc, #308]	; (80a074c <_Z10fuzzy_initv+0x2d4>)
 80a0616:	9004      	str	r0, [sp, #16]
 80a0618:	6808      	ldr	r0, [r1, #0]
 80a061a:	f004 fb01 	bl	80a4c20 <__aeabi_i2f>
 80a061e:	9003      	str	r0, [sp, #12]
 80a0620:	484b      	ldr	r0, [pc, #300]	; (80a0750 <_Z10fuzzy_initv+0x2d8>)
 80a0622:	6800      	ldr	r0, [r0, #0]
 80a0624:	f004 fafc 	bl	80a4c20 <__aeabi_i2f>
 80a0628:	a903      	add	r1, sp, #12
 80a062a:	9000      	str	r0, [sp, #0]
 80a062c:	c90e      	ldmia	r1, {r1, r2, r3}
 80a062e:	4650      	mov	r0, sl
 80a0630:	f002 fb61 	bl	80a2cf6 <_ZN8FuzzySetC1Effff>
  LM_input->addFuzzySet(LM_low);
 80a0634:	4631      	mov	r1, r6
 80a0636:	4620      	mov	r0, r4
 80a0638:	f002 f8fd 	bl	80a2836 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  LM_input->addFuzzySet(LM_med);
 80a063c:	4649      	mov	r1, r9
 80a063e:	4620      	mov	r0, r4
 80a0640:	f002 f8f9 	bl	80a2836 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  LM_input->addFuzzySet(LM_high);
 80a0644:	4651      	mov	r1, sl
 80a0646:	4620      	mov	r0, r4
 80a0648:	f002 f8f5 	bl	80a2836 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyInput(LM_input);
 80a064c:	4621      	mov	r1, r4
 80a064e:	f8db 0000 	ldr.w	r0, [fp]
 80a0652:	f002 fc24 	bl	80a2e9e <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>

  // INPUT: 3 of 4
  FuzzyInput* RM_input = new FuzzyInput(3);
 80a0656:	2010      	movs	r0, #16
 80a0658:	f7ff fd1f 	bl	80a009a <_Znwj>
 80a065c:	4604      	mov	r4, r0
 80a065e:	b110      	cbz	r0, 80a0666 <_Z10fuzzy_initv+0x1ee>
 80a0660:	2103      	movs	r1, #3
 80a0662:	f002 f8cc 	bl	80a27fe <_ZN10FuzzyInputC1Ei>
  FuzzySet* RM_low = new FuzzySet(low1, low2, low3, low4);
 80a0666:	2014      	movs	r0, #20
 80a0668:	f7ff fd17 	bl	80a009a <_Znwj>
 80a066c:	9003      	str	r0, [sp, #12]
 80a066e:	b1c8      	cbz	r0, 80a06a4 <_Z10fuzzy_initv+0x22c>
 80a0670:	4b2c      	ldr	r3, [pc, #176]	; (80a0724 <_Z10fuzzy_initv+0x2ac>)
 80a0672:	6818      	ldr	r0, [r3, #0]
 80a0674:	f004 fad4 	bl	80a4c20 <__aeabi_i2f>
 80a0678:	4a2b      	ldr	r2, [pc, #172]	; (80a0728 <_Z10fuzzy_initv+0x2b0>)
 80a067a:	9005      	str	r0, [sp, #20]
 80a067c:	6810      	ldr	r0, [r2, #0]
 80a067e:	f004 facf 	bl	80a4c20 <__aeabi_i2f>
 80a0682:	492a      	ldr	r1, [pc, #168]	; (80a072c <_Z10fuzzy_initv+0x2b4>)
 80a0684:	9004      	str	r0, [sp, #16]
 80a0686:	6808      	ldr	r0, [r1, #0]
 80a0688:	f004 faca 	bl	80a4c20 <__aeabi_i2f>
 80a068c:	4928      	ldr	r1, [pc, #160]	; (80a0730 <_Z10fuzzy_initv+0x2b8>)
 80a068e:	4683      	mov	fp, r0
 80a0690:	6808      	ldr	r0, [r1, #0]
 80a0692:	f004 fac5 	bl	80a4c20 <__aeabi_i2f>
 80a0696:	9b05      	ldr	r3, [sp, #20]
 80a0698:	9000      	str	r0, [sp, #0]
 80a069a:	9a04      	ldr	r2, [sp, #16]
 80a069c:	4659      	mov	r1, fp
 80a069e:	9803      	ldr	r0, [sp, #12]
 80a06a0:	f002 fb29 	bl	80a2cf6 <_ZN8FuzzySetC1Effff>
  FuzzySet* RM_med = new FuzzySet(med1, med2, med3, med4);
 80a06a4:	2014      	movs	r0, #20
 80a06a6:	f7ff fcf8 	bl	80a009a <_Znwj>
 80a06aa:	9004      	str	r0, [sp, #16]
 80a06ac:	b1c8      	cbz	r0, 80a06e2 <_Z10fuzzy_initv+0x26a>
 80a06ae:	4b21      	ldr	r3, [pc, #132]	; (80a0734 <_Z10fuzzy_initv+0x2bc>)
 80a06b0:	6818      	ldr	r0, [r3, #0]
 80a06b2:	f004 fab5 	bl	80a4c20 <__aeabi_i2f>
 80a06b6:	4a20      	ldr	r2, [pc, #128]	; (80a0738 <_Z10fuzzy_initv+0x2c0>)
 80a06b8:	9006      	str	r0, [sp, #24]
 80a06ba:	6810      	ldr	r0, [r2, #0]
 80a06bc:	f004 fab0 	bl	80a4c20 <__aeabi_i2f>
 80a06c0:	491e      	ldr	r1, [pc, #120]	; (80a073c <_Z10fuzzy_initv+0x2c4>)
 80a06c2:	9005      	str	r0, [sp, #20]
 80a06c4:	6808      	ldr	r0, [r1, #0]
 80a06c6:	f004 faab 	bl	80a4c20 <__aeabi_i2f>
 80a06ca:	491d      	ldr	r1, [pc, #116]	; (80a0740 <_Z10fuzzy_initv+0x2c8>)
 80a06cc:	4683      	mov	fp, r0
 80a06ce:	6808      	ldr	r0, [r1, #0]
 80a06d0:	f004 faa6 	bl	80a4c20 <__aeabi_i2f>
 80a06d4:	9b06      	ldr	r3, [sp, #24]
 80a06d6:	9000      	str	r0, [sp, #0]
 80a06d8:	9a05      	ldr	r2, [sp, #20]
 80a06da:	4659      	mov	r1, fp
 80a06dc:	9804      	ldr	r0, [sp, #16]
 80a06de:	f002 fb0a 	bl	80a2cf6 <_ZN8FuzzySetC1Effff>
  FuzzySet* RM_high = new FuzzySet(high1, high2, high3, high4);
 80a06e2:	2014      	movs	r0, #20
 80a06e4:	f7ff fcd9 	bl	80a009a <_Znwj>
 80a06e8:	9005      	str	r0, [sp, #20]
 80a06ea:	2800      	cmp	r0, #0
 80a06ec:	d034      	beq.n	80a0758 <_Z10fuzzy_initv+0x2e0>
 80a06ee:	4b15      	ldr	r3, [pc, #84]	; (80a0744 <_Z10fuzzy_initv+0x2cc>)
 80a06f0:	6818      	ldr	r0, [r3, #0]
 80a06f2:	f004 fa95 	bl	80a4c20 <__aeabi_i2f>
 80a06f6:	4a14      	ldr	r2, [pc, #80]	; (80a0748 <_Z10fuzzy_initv+0x2d0>)
 80a06f8:	9007      	str	r0, [sp, #28]
 80a06fa:	6810      	ldr	r0, [r2, #0]
 80a06fc:	f004 fa90 	bl	80a4c20 <__aeabi_i2f>
 80a0700:	4912      	ldr	r1, [pc, #72]	; (80a074c <_Z10fuzzy_initv+0x2d4>)
 80a0702:	9006      	str	r0, [sp, #24]
 80a0704:	6808      	ldr	r0, [r1, #0]
 80a0706:	f004 fa8b 	bl	80a4c20 <__aeabi_i2f>
 80a070a:	4911      	ldr	r1, [pc, #68]	; (80a0750 <_Z10fuzzy_initv+0x2d8>)
 80a070c:	4683      	mov	fp, r0
 80a070e:	6808      	ldr	r0, [r1, #0]
 80a0710:	f004 fa86 	bl	80a4c20 <__aeabi_i2f>
 80a0714:	9b07      	ldr	r3, [sp, #28]
 80a0716:	9000      	str	r0, [sp, #0]
 80a0718:	9a06      	ldr	r2, [sp, #24]
 80a071a:	4659      	mov	r1, fp
 80a071c:	9805      	ldr	r0, [sp, #20]
 80a071e:	f002 faea 	bl	80a2cf6 <_ZN8FuzzySetC1Effff>
 80a0722:	e019      	b.n	80a0758 <_Z10fuzzy_initv+0x2e0>
 80a0724:	20000310 	.word	0x20000310
 80a0728:	2000030c 	.word	0x2000030c
 80a072c:	20000308 	.word	0x20000308
 80a0730:	20000314 	.word	0x20000314
 80a0734:	20000354 	.word	0x20000354
 80a0738:	20000350 	.word	0x20000350
 80a073c:	2000034c 	.word	0x2000034c
 80a0740:	20000358 	.word	0x20000358
 80a0744:	20000330 	.word	0x20000330
 80a0748:	20000338 	.word	0x20000338
 80a074c:	20000420 	.word	0x20000420
 80a0750:	20000334 	.word	0x20000334
 80a0754:	200003a4 	.word	0x200003a4
  RM_input->addFuzzySet(RM_low);
 80a0758:	9903      	ldr	r1, [sp, #12]
 80a075a:	4620      	mov	r0, r4
 80a075c:	f002 f86b 	bl	80a2836 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  RM_input->addFuzzySet(RM_med);
 80a0760:	9904      	ldr	r1, [sp, #16]
 80a0762:	4620      	mov	r0, r4
 80a0764:	f002 f867 	bl	80a2836 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  RM_input->addFuzzySet(RM_high);
 80a0768:	9905      	ldr	r1, [sp, #20]
 80a076a:	4620      	mov	r0, r4
 80a076c:	f002 f863 	bl	80a2836 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyInput(RM_input);
 80a0770:	4ba9      	ldr	r3, [pc, #676]	; (80a0a18 <_Z10fuzzy_initv+0x5a0>)
 80a0772:	4621      	mov	r1, r4
 80a0774:	6818      	ldr	r0, [r3, #0]
 80a0776:	f002 fb92 	bl	80a2e9e <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>

  // INPUT: 4 of 4
  FuzzyInput* RR_input = new FuzzyInput(4);
 80a077a:	2010      	movs	r0, #16
 80a077c:	f7ff fc8d 	bl	80a009a <_Znwj>
 80a0780:	4683      	mov	fp, r0
 80a0782:	b110      	cbz	r0, 80a078a <_Z10fuzzy_initv+0x312>
 80a0784:	2104      	movs	r1, #4
 80a0786:	f002 f83a 	bl	80a27fe <_ZN10FuzzyInputC1Ei>
  FuzzySet* RR_low = new FuzzySet(low1, low2, low3, low4);
 80a078a:	2014      	movs	r0, #20
 80a078c:	f7ff fc85 	bl	80a009a <_Znwj>
 80a0790:	4604      	mov	r4, r0
 80a0792:	b1c0      	cbz	r0, 80a07c6 <_Z10fuzzy_initv+0x34e>
 80a0794:	4ba1      	ldr	r3, [pc, #644]	; (80a0a1c <_Z10fuzzy_initv+0x5a4>)
 80a0796:	6818      	ldr	r0, [r3, #0]
 80a0798:	f004 fa42 	bl	80a4c20 <__aeabi_i2f>
 80a079c:	4aa0      	ldr	r2, [pc, #640]	; (80a0a20 <_Z10fuzzy_initv+0x5a8>)
 80a079e:	9008      	str	r0, [sp, #32]
 80a07a0:	6810      	ldr	r0, [r2, #0]
 80a07a2:	f004 fa3d 	bl	80a4c20 <__aeabi_i2f>
 80a07a6:	499f      	ldr	r1, [pc, #636]	; (80a0a24 <_Z10fuzzy_initv+0x5ac>)
 80a07a8:	9007      	str	r0, [sp, #28]
 80a07aa:	6808      	ldr	r0, [r1, #0]
 80a07ac:	f004 fa38 	bl	80a4c20 <__aeabi_i2f>
 80a07b0:	9006      	str	r0, [sp, #24]
 80a07b2:	489d      	ldr	r0, [pc, #628]	; (80a0a28 <_Z10fuzzy_initv+0x5b0>)
 80a07b4:	6800      	ldr	r0, [r0, #0]
 80a07b6:	f004 fa33 	bl	80a4c20 <__aeabi_i2f>
 80a07ba:	a906      	add	r1, sp, #24
 80a07bc:	9000      	str	r0, [sp, #0]
 80a07be:	c90e      	ldmia	r1, {r1, r2, r3}
 80a07c0:	4620      	mov	r0, r4
 80a07c2:	f002 fa98 	bl	80a2cf6 <_ZN8FuzzySetC1Effff>
  FuzzySet* RR_med = new FuzzySet(med1, med2, med3, med4);
 80a07c6:	2014      	movs	r0, #20
 80a07c8:	f7ff fc67 	bl	80a009a <_Znwj>
 80a07cc:	9006      	str	r0, [sp, #24]
 80a07ce:	b1b8      	cbz	r0, 80a0800 <_Z10fuzzy_initv+0x388>
 80a07d0:	4b96      	ldr	r3, [pc, #600]	; (80a0a2c <_Z10fuzzy_initv+0x5b4>)
 80a07d2:	6818      	ldr	r0, [r3, #0]
 80a07d4:	f004 fa24 	bl	80a4c20 <__aeabi_i2f>
 80a07d8:	4a95      	ldr	r2, [pc, #596]	; (80a0a30 <_Z10fuzzy_initv+0x5b8>)
 80a07da:	9009      	str	r0, [sp, #36]	; 0x24
 80a07dc:	6810      	ldr	r0, [r2, #0]
 80a07de:	f004 fa1f 	bl	80a4c20 <__aeabi_i2f>
 80a07e2:	4994      	ldr	r1, [pc, #592]	; (80a0a34 <_Z10fuzzy_initv+0x5bc>)
 80a07e4:	9008      	str	r0, [sp, #32]
 80a07e6:	6808      	ldr	r0, [r1, #0]
 80a07e8:	f004 fa1a 	bl	80a4c20 <__aeabi_i2f>
 80a07ec:	9007      	str	r0, [sp, #28]
 80a07ee:	4892      	ldr	r0, [pc, #584]	; (80a0a38 <_Z10fuzzy_initv+0x5c0>)
 80a07f0:	6800      	ldr	r0, [r0, #0]
 80a07f2:	f004 fa15 	bl	80a4c20 <__aeabi_i2f>
 80a07f6:	9000      	str	r0, [sp, #0]
 80a07f8:	a806      	add	r0, sp, #24
 80a07fa:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80a07fc:	f002 fa7b 	bl	80a2cf6 <_ZN8FuzzySetC1Effff>
  FuzzySet* RR_high = new FuzzySet(high1, high2, high3, high4);
 80a0800:	2014      	movs	r0, #20
 80a0802:	f7ff fc4a 	bl	80a009a <_Znwj>
 80a0806:	9007      	str	r0, [sp, #28]
 80a0808:	b1b8      	cbz	r0, 80a083a <_Z10fuzzy_initv+0x3c2>
 80a080a:	4b8c      	ldr	r3, [pc, #560]	; (80a0a3c <_Z10fuzzy_initv+0x5c4>)
 80a080c:	6818      	ldr	r0, [r3, #0]
 80a080e:	f004 fa07 	bl	80a4c20 <__aeabi_i2f>
 80a0812:	4a8b      	ldr	r2, [pc, #556]	; (80a0a40 <_Z10fuzzy_initv+0x5c8>)
 80a0814:	900a      	str	r0, [sp, #40]	; 0x28
 80a0816:	6810      	ldr	r0, [r2, #0]
 80a0818:	f004 fa02 	bl	80a4c20 <__aeabi_i2f>
 80a081c:	4989      	ldr	r1, [pc, #548]	; (80a0a44 <_Z10fuzzy_initv+0x5cc>)
 80a081e:	9009      	str	r0, [sp, #36]	; 0x24
 80a0820:	6808      	ldr	r0, [r1, #0]
 80a0822:	f004 f9fd 	bl	80a4c20 <__aeabi_i2f>
 80a0826:	9008      	str	r0, [sp, #32]
 80a0828:	4887      	ldr	r0, [pc, #540]	; (80a0a48 <_Z10fuzzy_initv+0x5d0>)
 80a082a:	6800      	ldr	r0, [r0, #0]
 80a082c:	f004 f9f8 	bl	80a4c20 <__aeabi_i2f>
 80a0830:	9000      	str	r0, [sp, #0]
 80a0832:	a807      	add	r0, sp, #28
 80a0834:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80a0836:	f002 fa5e 	bl	80a2cf6 <_ZN8FuzzySetC1Effff>
  RR_input->addFuzzySet(RR_low);
 80a083a:	4621      	mov	r1, r4
 80a083c:	4658      	mov	r0, fp
 80a083e:	f001 fffa 	bl	80a2836 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  RR_input->addFuzzySet(RR_med);
 80a0842:	9906      	ldr	r1, [sp, #24]
 80a0844:	4658      	mov	r0, fp
 80a0846:	f001 fff6 	bl	80a2836 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  RR_input->addFuzzySet(RR_high);
 80a084a:	9907      	ldr	r1, [sp, #28]
 80a084c:	4658      	mov	r0, fp
 80a084e:	f001 fff2 	bl	80a2836 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyInput(RR_input);
 80a0852:	4b71      	ldr	r3, [pc, #452]	; (80a0a18 <_Z10fuzzy_initv+0x5a0>)
 80a0854:	4659      	mov	r1, fp
 80a0856:	6818      	ldr	r0, [r3, #0]
 80a0858:	f002 fb21 	bl	80a2e9e <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>

  // OUTPUT: 1 of 1 (Test 1 *********************************)
  FuzzyOutput* drive_state = new FuzzyOutput(1);
 80a085c:	2018      	movs	r0, #24
 80a085e:	f7ff fc1c 	bl	80a009a <_Znwj>
 80a0862:	4683      	mov	fp, r0
 80a0864:	b110      	cbz	r0, 80a086c <_Z10fuzzy_initv+0x3f4>
 80a0866:	2101      	movs	r1, #1
 80a0868:	f002 f801 	bl	80a286e <_ZN11FuzzyOutputC1Ei>
  FuzzySet* full_left = new FuzzySet(0, 5, 15, 20);
 80a086c:	2014      	movs	r0, #20
 80a086e:	f7ff fc14 	bl	80a009a <_Znwj>
 80a0872:	900f      	str	r0, [sp, #60]	; 0x3c
 80a0874:	b130      	cbz	r0, 80a0884 <_Z10fuzzy_initv+0x40c>
 80a0876:	4b75      	ldr	r3, [pc, #468]	; (80a0a4c <_Z10fuzzy_initv+0x5d4>)
 80a0878:	4a75      	ldr	r2, [pc, #468]	; (80a0a50 <_Z10fuzzy_initv+0x5d8>)
 80a087a:	9300      	str	r3, [sp, #0]
 80a087c:	2100      	movs	r1, #0
 80a087e:	4b75      	ldr	r3, [pc, #468]	; (80a0a54 <_Z10fuzzy_initv+0x5dc>)
 80a0880:	f002 fa39 	bl	80a2cf6 <_ZN8FuzzySetC1Effff>
  FuzzySet* small_left = new FuzzySet(25, 30, 35, 40);
 80a0884:	2014      	movs	r0, #20
 80a0886:	f7ff fc08 	bl	80a009a <_Znwj>
 80a088a:	9010      	str	r0, [sp, #64]	; 0x40
 80a088c:	b130      	cbz	r0, 80a089c <_Z10fuzzy_initv+0x424>
 80a088e:	4b72      	ldr	r3, [pc, #456]	; (80a0a58 <_Z10fuzzy_initv+0x5e0>)
 80a0890:	4a72      	ldr	r2, [pc, #456]	; (80a0a5c <_Z10fuzzy_initv+0x5e4>)
 80a0892:	9300      	str	r3, [sp, #0]
 80a0894:	4972      	ldr	r1, [pc, #456]	; (80a0a60 <_Z10fuzzy_initv+0x5e8>)
 80a0896:	4b73      	ldr	r3, [pc, #460]	; (80a0a64 <_Z10fuzzy_initv+0x5ec>)
 80a0898:	f002 fa2d 	bl	80a2cf6 <_ZN8FuzzySetC1Effff>
  FuzzySet* center = new FuzzySet(45, 50, 55, 60);
 80a089c:	2014      	movs	r0, #20
 80a089e:	f7ff fbfc 	bl	80a009a <_Znwj>
 80a08a2:	9011      	str	r0, [sp, #68]	; 0x44
 80a08a4:	b130      	cbz	r0, 80a08b4 <_Z10fuzzy_initv+0x43c>
 80a08a6:	4b70      	ldr	r3, [pc, #448]	; (80a0a68 <_Z10fuzzy_initv+0x5f0>)
 80a08a8:	4a70      	ldr	r2, [pc, #448]	; (80a0a6c <_Z10fuzzy_initv+0x5f4>)
 80a08aa:	9300      	str	r3, [sp, #0]
 80a08ac:	4970      	ldr	r1, [pc, #448]	; (80a0a70 <_Z10fuzzy_initv+0x5f8>)
 80a08ae:	4b71      	ldr	r3, [pc, #452]	; (80a0a74 <_Z10fuzzy_initv+0x5fc>)
 80a08b0:	f002 fa21 	bl	80a2cf6 <_ZN8FuzzySetC1Effff>
  FuzzySet* small_right = new FuzzySet(65, 70, 75, 80);
 80a08b4:	2014      	movs	r0, #20
 80a08b6:	f7ff fbf0 	bl	80a009a <_Znwj>
 80a08ba:	9012      	str	r0, [sp, #72]	; 0x48
 80a08bc:	b130      	cbz	r0, 80a08cc <_Z10fuzzy_initv+0x454>
 80a08be:	4b6e      	ldr	r3, [pc, #440]	; (80a0a78 <_Z10fuzzy_initv+0x600>)
 80a08c0:	4a6e      	ldr	r2, [pc, #440]	; (80a0a7c <_Z10fuzzy_initv+0x604>)
 80a08c2:	9300      	str	r3, [sp, #0]
 80a08c4:	496e      	ldr	r1, [pc, #440]	; (80a0a80 <_Z10fuzzy_initv+0x608>)
 80a08c6:	4b6f      	ldr	r3, [pc, #444]	; (80a0a84 <_Z10fuzzy_initv+0x60c>)
 80a08c8:	f002 fa15 	bl	80a2cf6 <_ZN8FuzzySetC1Effff>
  FuzzySet* full_right = new FuzzySet(85, 90, 95, 100);
 80a08cc:	2014      	movs	r0, #20
 80a08ce:	f7ff fbe4 	bl	80a009a <_Znwj>
 80a08d2:	9013      	str	r0, [sp, #76]	; 0x4c
 80a08d4:	b130      	cbz	r0, 80a08e4 <_Z10fuzzy_initv+0x46c>
 80a08d6:	4b6c      	ldr	r3, [pc, #432]	; (80a0a88 <_Z10fuzzy_initv+0x610>)
 80a08d8:	4a6c      	ldr	r2, [pc, #432]	; (80a0a8c <_Z10fuzzy_initv+0x614>)
 80a08da:	9300      	str	r3, [sp, #0]
 80a08dc:	496c      	ldr	r1, [pc, #432]	; (80a0a90 <_Z10fuzzy_initv+0x618>)
 80a08de:	4b6d      	ldr	r3, [pc, #436]	; (80a0a94 <_Z10fuzzy_initv+0x61c>)
 80a08e0:	f002 fa09 	bl	80a2cf6 <_ZN8FuzzySetC1Effff>
  drive_state->addFuzzySet(full_left);
 80a08e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a08e6:	4658      	mov	r0, fp
 80a08e8:	f001 ffa5 	bl	80a2836 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  drive_state->addFuzzySet(small_left);
 80a08ec:	9910      	ldr	r1, [sp, #64]	; 0x40
 80a08ee:	4658      	mov	r0, fp
 80a08f0:	f001 ffa1 	bl	80a2836 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  drive_state->addFuzzySet(center);
 80a08f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a08f6:	4658      	mov	r0, fp
 80a08f8:	f001 ff9d 	bl	80a2836 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  drive_state->addFuzzySet(small_right);
 80a08fc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80a08fe:	4658      	mov	r0, fp
 80a0900:	f001 ff99 	bl	80a2836 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  drive_state->addFuzzySet(full_right);
 80a0904:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a0906:	4658      	mov	r0, fp
 80a0908:	f001 ff95 	bl	80a2836 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyOutput(drive_state);
 80a090c:	4b42      	ldr	r3, [pc, #264]	; (80a0a18 <_Z10fuzzy_initv+0x5a0>)
 80a090e:	4659      	mov	r1, fp
 80a0910:	6818      	ldr	r0, [r3, #0]
 80a0912:	f002 fad7 	bl	80a2ec4 <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput>

  // Building Left FuzzyRuleAntecedents (ALL COMBINATIONS)
  FuzzyRuleAntecedent* left_low_high = new FuzzyRuleAntecedent();
 80a0916:	2018      	movs	r0, #24
 80a0918:	f7ff fbbf 	bl	80a009a <_Znwj>
 80a091c:	900e      	str	r0, [sp, #56]	; 0x38
 80a091e:	b108      	cbz	r0, 80a0924 <_Z10fuzzy_initv+0x4ac>
 80a0920:	f002 fb48 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_low_high->joinWithAND(LL_low, LM_high);
 80a0924:	4652      	mov	r2, sl
 80a0926:	4629      	mov	r1, r5
 80a0928:	980e      	ldr	r0, [sp, #56]	; 0x38
 80a092a:	f002 fb4b 	bl	80a2fc4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_med_high = new FuzzyRuleAntecedent();
 80a092e:	2018      	movs	r0, #24
 80a0930:	f7ff fbb3 	bl	80a009a <_Znwj>
 80a0934:	9009      	str	r0, [sp, #36]	; 0x24
 80a0936:	b108      	cbz	r0, 80a093c <_Z10fuzzy_initv+0x4c4>
 80a0938:	f002 fb3c 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_med_high->joinWithAND(LL_med, LM_high);
 80a093c:	4652      	mov	r2, sl
 80a093e:	4641      	mov	r1, r8
 80a0940:	9809      	ldr	r0, [sp, #36]	; 0x24
 80a0942:	f002 fb3f 	bl	80a2fc4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_low_med = new FuzzyRuleAntecedent();
 80a0946:	2018      	movs	r0, #24
 80a0948:	f7ff fba7 	bl	80a009a <_Znwj>
 80a094c:	900a      	str	r0, [sp, #40]	; 0x28
 80a094e:	b108      	cbz	r0, 80a0954 <_Z10fuzzy_initv+0x4dc>
 80a0950:	f002 fb30 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_low_med->joinWithAND(LL_low, LM_med);
 80a0954:	464a      	mov	r2, r9
 80a0956:	4629      	mov	r1, r5
 80a0958:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a095a:	f002 fb33 	bl	80a2fc4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_med_med = new FuzzyRuleAntecedent();
 80a095e:	2018      	movs	r0, #24
 80a0960:	f7ff fb9b 	bl	80a009a <_Znwj>
 80a0964:	9008      	str	r0, [sp, #32]
 80a0966:	b108      	cbz	r0, 80a096c <_Z10fuzzy_initv+0x4f4>
 80a0968:	f002 fb24 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_med_med->joinWithAND(LL_med, LM_med);
 80a096c:	464a      	mov	r2, r9
 80a096e:	4641      	mov	r1, r8
 80a0970:	9808      	ldr	r0, [sp, #32]
 80a0972:	f002 fb27 	bl	80a2fc4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_high_high = new FuzzyRuleAntecedent();
 80a0976:	2018      	movs	r0, #24
 80a0978:	f7ff fb8f 	bl	80a009a <_Znwj>
 80a097c:	900d      	str	r0, [sp, #52]	; 0x34
 80a097e:	b108      	cbz	r0, 80a0984 <_Z10fuzzy_initv+0x50c>
 80a0980:	f002 fb18 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_high_high->joinWithAND(LL_high, LM_high);
 80a0984:	4652      	mov	r2, sl
 80a0986:	4639      	mov	r1, r7
 80a0988:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a098a:	f002 fb1b 	bl	80a2fc4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_high_med = new FuzzyRuleAntecedent();
 80a098e:	2018      	movs	r0, #24
 80a0990:	f7ff fb83 	bl	80a009a <_Znwj>
 80a0994:	9014      	str	r0, [sp, #80]	; 0x50
 80a0996:	b108      	cbz	r0, 80a099c <_Z10fuzzy_initv+0x524>
 80a0998:	f002 fb0c 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_high_med->joinWithAND(LL_high, LM_med);
 80a099c:	464a      	mov	r2, r9
 80a099e:	4639      	mov	r1, r7
 80a09a0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80a09a2:	f002 fb0f 	bl	80a2fc4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_med_low = new FuzzyRuleAntecedent();
 80a09a6:	2018      	movs	r0, #24
 80a09a8:	f7ff fb77 	bl	80a009a <_Znwj>
 80a09ac:	9015      	str	r0, [sp, #84]	; 0x54
 80a09ae:	b108      	cbz	r0, 80a09b4 <_Z10fuzzy_initv+0x53c>
 80a09b0:	f002 fb00 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_med_low->joinWithAND(LL_med, LM_low);
 80a09b4:	4632      	mov	r2, r6
 80a09b6:	4641      	mov	r1, r8
 80a09b8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80a09ba:	f002 fb03 	bl	80a2fc4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_high_low = new FuzzyRuleAntecedent();
 80a09be:	2018      	movs	r0, #24
 80a09c0:	f7ff fb6b 	bl	80a009a <_Znwj>
 80a09c4:	9016      	str	r0, [sp, #88]	; 0x58
 80a09c6:	b108      	cbz	r0, 80a09cc <_Z10fuzzy_initv+0x554>
 80a09c8:	f002 faf4 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_high_low->joinWithAND(LL_high, LM_low);
 80a09cc:	4639      	mov	r1, r7
 80a09ce:	4632      	mov	r2, r6
 80a09d0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80a09d2:	f002 faf7 	bl	80a2fc4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_low_low = new FuzzyRuleAntecedent();
 80a09d6:	2018      	movs	r0, #24
 80a09d8:	f7ff fb5f 	bl	80a009a <_Znwj>
 80a09dc:	4607      	mov	r7, r0
 80a09de:	b108      	cbz	r0, 80a09e4 <_Z10fuzzy_initv+0x56c>
 80a09e0:	f002 fae8 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_low_low->joinWithAND(LL_low, LM_low);
 80a09e4:	4632      	mov	r2, r6
 80a09e6:	4629      	mov	r1, r5
 80a09e8:	4638      	mov	r0, r7
 80a09ea:	f002 faeb 	bl	80a2fc4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>

  // Building Right FuzzyRuleAntecedents
  FuzzyRuleAntecedent* right_high_low = new FuzzyRuleAntecedent();
 80a09ee:	2018      	movs	r0, #24
 80a09f0:	f7ff fb53 	bl	80a009a <_Znwj>
 80a09f4:	4606      	mov	r6, r0
 80a09f6:	b108      	cbz	r0, 80a09fc <_Z10fuzzy_initv+0x584>
 80a09f8:	f002 fadc 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_high_low->joinWithAND(RM_high, RR_low);
 80a09fc:	4622      	mov	r2, r4
 80a09fe:	9905      	ldr	r1, [sp, #20]
 80a0a00:	4630      	mov	r0, r6
 80a0a02:	f002 fadf 	bl	80a2fc4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_high_med = new FuzzyRuleAntecedent();
 80a0a06:	2018      	movs	r0, #24
 80a0a08:	f7ff fb47 	bl	80a009a <_Znwj>
 80a0a0c:	900b      	str	r0, [sp, #44]	; 0x2c
 80a0a0e:	2800      	cmp	r0, #0
 80a0a10:	d042      	beq.n	80a0a98 <_Z10fuzzy_initv+0x620>
 80a0a12:	f002 facf 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
 80a0a16:	e03f      	b.n	80a0a98 <_Z10fuzzy_initv+0x620>
 80a0a18:	200003a4 	.word	0x200003a4
 80a0a1c:	20000310 	.word	0x20000310
 80a0a20:	2000030c 	.word	0x2000030c
 80a0a24:	20000308 	.word	0x20000308
 80a0a28:	20000314 	.word	0x20000314
 80a0a2c:	20000354 	.word	0x20000354
 80a0a30:	20000350 	.word	0x20000350
 80a0a34:	2000034c 	.word	0x2000034c
 80a0a38:	20000358 	.word	0x20000358
 80a0a3c:	20000330 	.word	0x20000330
 80a0a40:	20000338 	.word	0x20000338
 80a0a44:	20000420 	.word	0x20000420
 80a0a48:	20000334 	.word	0x20000334
 80a0a4c:	41a00000 	.word	0x41a00000
 80a0a50:	40a00000 	.word	0x40a00000
 80a0a54:	41700000 	.word	0x41700000
 80a0a58:	42200000 	.word	0x42200000
 80a0a5c:	41f00000 	.word	0x41f00000
 80a0a60:	41c80000 	.word	0x41c80000
 80a0a64:	420c0000 	.word	0x420c0000
 80a0a68:	42700000 	.word	0x42700000
 80a0a6c:	42480000 	.word	0x42480000
 80a0a70:	42340000 	.word	0x42340000
 80a0a74:	425c0000 	.word	0x425c0000
 80a0a78:	42a00000 	.word	0x42a00000
 80a0a7c:	428c0000 	.word	0x428c0000
 80a0a80:	42820000 	.word	0x42820000
 80a0a84:	42960000 	.word	0x42960000
 80a0a88:	42c80000 	.word	0x42c80000
 80a0a8c:	42b40000 	.word	0x42b40000
 80a0a90:	42aa0000 	.word	0x42aa0000
 80a0a94:	42be0000 	.word	0x42be0000
  right_high_med->joinWithAND(RM_high, RR_med);
 80a0a98:	9a06      	ldr	r2, [sp, #24]
 80a0a9a:	9905      	ldr	r1, [sp, #20]
 80a0a9c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a0a9e:	f002 fa91 	bl	80a2fc4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_med_low = new FuzzyRuleAntecedent();
 80a0aa2:	2018      	movs	r0, #24
 80a0aa4:	f7ff faf9 	bl	80a009a <_Znwj>
 80a0aa8:	900c      	str	r0, [sp, #48]	; 0x30
 80a0aaa:	b108      	cbz	r0, 80a0ab0 <_Z10fuzzy_initv+0x638>
 80a0aac:	f002 fa82 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_med_low->joinWithAND(RM_med, RR_low);
 80a0ab0:	4622      	mov	r2, r4
 80a0ab2:	9904      	ldr	r1, [sp, #16]
 80a0ab4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80a0ab6:	f002 fa85 	bl	80a2fc4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_low_med = new FuzzyRuleAntecedent();
 80a0aba:	2018      	movs	r0, #24
 80a0abc:	f7ff faed 	bl	80a009a <_Znwj>
 80a0ac0:	9017      	str	r0, [sp, #92]	; 0x5c
 80a0ac2:	b108      	cbz	r0, 80a0ac8 <_Z10fuzzy_initv+0x650>
 80a0ac4:	f002 fa76 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_low_med->joinWithAND(RM_low, RR_med);
 80a0ac8:	9a06      	ldr	r2, [sp, #24]
 80a0aca:	9903      	ldr	r1, [sp, #12]
 80a0acc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80a0ace:	f002 fa79 	bl	80a2fc4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_low_low = new FuzzyRuleAntecedent();
 80a0ad2:	2018      	movs	r0, #24
 80a0ad4:	f7ff fae1 	bl	80a009a <_Znwj>
 80a0ad8:	4605      	mov	r5, r0
 80a0ada:	b108      	cbz	r0, 80a0ae0 <_Z10fuzzy_initv+0x668>
 80a0adc:	f002 fa6a 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_low_low->joinWithAND(RM_low, RR_low);
 80a0ae0:	4622      	mov	r2, r4
 80a0ae2:	9903      	ldr	r1, [sp, #12]
 80a0ae4:	4628      	mov	r0, r5
 80a0ae6:	f002 fa6d 	bl	80a2fc4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_med_med = new FuzzyRuleAntecedent();
 80a0aea:	2018      	movs	r0, #24
 80a0aec:	f7ff fad5 	bl	80a009a <_Znwj>
 80a0af0:	4683      	mov	fp, r0
 80a0af2:	b108      	cbz	r0, 80a0af8 <_Z10fuzzy_initv+0x680>
 80a0af4:	f002 fa5e 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_med_med->joinWithAND(RM_med, RR_med);
 80a0af8:	9a06      	ldr	r2, [sp, #24]
 80a0afa:	9904      	ldr	r1, [sp, #16]
 80a0afc:	4658      	mov	r0, fp
 80a0afe:	f002 fa61 	bl	80a2fc4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_low_high = new FuzzyRuleAntecedent();
 80a0b02:	2018      	movs	r0, #24
 80a0b04:	f7ff fac9 	bl	80a009a <_Znwj>
 80a0b08:	9006      	str	r0, [sp, #24]
 80a0b0a:	b108      	cbz	r0, 80a0b10 <_Z10fuzzy_initv+0x698>
 80a0b0c:	f002 fa52 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_low_high->joinWithAND(RM_low, RR_high);
 80a0b10:	9a07      	ldr	r2, [sp, #28]
 80a0b12:	9903      	ldr	r1, [sp, #12]
 80a0b14:	9806      	ldr	r0, [sp, #24]
 80a0b16:	f002 fa55 	bl	80a2fc4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_high_high = new FuzzyRuleAntecedent();
 80a0b1a:	2018      	movs	r0, #24
 80a0b1c:	f7ff fabd 	bl	80a009a <_Znwj>
 80a0b20:	9003      	str	r0, [sp, #12]
 80a0b22:	b108      	cbz	r0, 80a0b28 <_Z10fuzzy_initv+0x6b0>
 80a0b24:	f002 fa46 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_high_high->joinWithAND(RM_high, RR_high);
 80a0b28:	9a07      	ldr	r2, [sp, #28]
 80a0b2a:	9905      	ldr	r1, [sp, #20]
 80a0b2c:	9803      	ldr	r0, [sp, #12]
 80a0b2e:	f002 fa49 	bl	80a2fc4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_med_high = new FuzzyRuleAntecedent();
 80a0b32:	2018      	movs	r0, #24
 80a0b34:	f7ff fab1 	bl	80a009a <_Znwj>
 80a0b38:	9005      	str	r0, [sp, #20]
 80a0b3a:	b108      	cbz	r0, 80a0b40 <_Z10fuzzy_initv+0x6c8>
 80a0b3c:	f002 fa3a 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_med_high->joinWithAND(RM_med, RR_high);
 80a0b40:	9a07      	ldr	r2, [sp, #28]
 80a0b42:	9904      	ldr	r1, [sp, #16]
 80a0b44:	9805      	ldr	r0, [sp, #20]
 80a0b46:	f002 fa3d 	bl	80a2fc4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>

  // Building drive FuzzyRuleConsequents (Test 1 *********************************)
  // NOTE: you can add multiple outputs to 1 consequent
  FuzzyRuleConsequent* drive_center = new FuzzyRuleConsequent();
 80a0b4a:	2008      	movs	r0, #8
 80a0b4c:	f7ff faa5 	bl	80a009a <_Znwj>
 80a0b50:	4681      	mov	r9, r0
 80a0b52:	b108      	cbz	r0, 80a0b58 <_Z10fuzzy_initv+0x6e0>
 80a0b54:	f002 f978 	bl	80a2e48 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_center->addOutput(center);
 80a0b58:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a0b5a:	4648      	mov	r0, r9
 80a0b5c:	f002 f978 	bl	80a2e50 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  FuzzyRuleConsequent* drive_small_left = new FuzzyRuleConsequent();
 80a0b60:	2008      	movs	r0, #8
 80a0b62:	f7ff fa9a 	bl	80a009a <_Znwj>
 80a0b66:	4680      	mov	r8, r0
 80a0b68:	b108      	cbz	r0, 80a0b6e <_Z10fuzzy_initv+0x6f6>
 80a0b6a:	f002 f96d 	bl	80a2e48 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_small_left->addOutput(small_left);  
 80a0b6e:	9910      	ldr	r1, [sp, #64]	; 0x40
 80a0b70:	4640      	mov	r0, r8
 80a0b72:	f002 f96d 	bl	80a2e50 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  FuzzyRuleConsequent* drive_full_left = new FuzzyRuleConsequent();
 80a0b76:	2008      	movs	r0, #8
 80a0b78:	f7ff fa8f 	bl	80a009a <_Znwj>
 80a0b7c:	9004      	str	r0, [sp, #16]
 80a0b7e:	b108      	cbz	r0, 80a0b84 <_Z10fuzzy_initv+0x70c>
 80a0b80:	f002 f962 	bl	80a2e48 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_full_left->addOutput(full_left);
 80a0b84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a0b86:	9804      	ldr	r0, [sp, #16]
 80a0b88:	f002 f962 	bl	80a2e50 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  FuzzyRuleConsequent* drive_full_right = new FuzzyRuleConsequent();
 80a0b8c:	2008      	movs	r0, #8
 80a0b8e:	f7ff fa84 	bl	80a009a <_Znwj>
 80a0b92:	9007      	str	r0, [sp, #28]
 80a0b94:	b108      	cbz	r0, 80a0b9a <_Z10fuzzy_initv+0x722>
 80a0b96:	f002 f957 	bl	80a2e48 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_full_right->addOutput(full_right);
 80a0b9a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a0b9c:	9807      	ldr	r0, [sp, #28]
 80a0b9e:	f002 f957 	bl	80a2e50 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  FuzzyRuleConsequent* drive_small_right = new FuzzyRuleConsequent();
 80a0ba2:	2008      	movs	r0, #8
 80a0ba4:	f7ff fa79 	bl	80a009a <_Znwj>
 80a0ba8:	4604      	mov	r4, r0
 80a0baa:	b108      	cbz	r0, 80a0bb0 <_Z10fuzzy_initv+0x738>
 80a0bac:	f002 f94c 	bl	80a2e48 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_small_right->addOutput(small_right);
 80a0bb0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80a0bb2:	4620      	mov	r0, r4
 80a0bb4:	f002 f94c 	bl	80a2e50 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>

  // Building Complete FuzzyRuleAntedecents (Test 1 *********************************)
  // Combining (2) Left and (2) Right antecedents, merging with (1) drive consequent
  // And adding the FuzzyRules
  FuzzyRuleAntecedent* LHHL = new FuzzyRuleAntecedent();
 80a0bb8:	2018      	movs	r0, #24
 80a0bba:	f7ff fa6e 	bl	80a009a <_Znwj>
 80a0bbe:	4682      	mov	sl, r0
 80a0bc0:	b108      	cbz	r0, 80a0bc6 <_Z10fuzzy_initv+0x74e>
 80a0bc2:	f002 f9f7 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LHHL->joinWithAND(left_low_high, right_high_low);
 80a0bc6:	4632      	mov	r2, r6
 80a0bc8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80a0bca:	4650      	mov	r0, sl
 80a0bcc:	f002 fa09 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr1 = new FuzzyRule(1, LHHL, drive_center);
 80a0bd0:	2010      	movs	r0, #16
 80a0bd2:	f7ff fa62 	bl	80a009a <_Znwj>
 80a0bd6:	900f      	str	r0, [sp, #60]	; 0x3c
 80a0bd8:	b120      	cbz	r0, 80a0be4 <_Z10fuzzy_initv+0x76c>
 80a0bda:	464b      	mov	r3, r9
 80a0bdc:	4652      	mov	r2, sl
 80a0bde:	2101      	movs	r1, #1
 80a0be0:	f001 fbd8 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr1);
 80a0be4:	4bb5      	ldr	r3, [pc, #724]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0be6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a0be8:	6818      	ldr	r0, [r3, #0]
 80a0bea:	f002 f983 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MHHL = new FuzzyRuleAntecedent();
 80a0bee:	2018      	movs	r0, #24
 80a0bf0:	f7ff fa53 	bl	80a009a <_Znwj>
 80a0bf4:	4682      	mov	sl, r0
 80a0bf6:	b108      	cbz	r0, 80a0bfc <_Z10fuzzy_initv+0x784>
 80a0bf8:	f002 f9dc 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  MHHL->joinWithAND(left_med_high, right_high_low);
 80a0bfc:	4632      	mov	r2, r6
 80a0bfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0c00:	4650      	mov	r0, sl
 80a0c02:	f002 f9ee 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr2 = new FuzzyRule(2, MHHL, drive_center);
 80a0c06:	2010      	movs	r0, #16
 80a0c08:	f7ff fa47 	bl	80a009a <_Znwj>
 80a0c0c:	4606      	mov	r6, r0
 80a0c0e:	b120      	cbz	r0, 80a0c1a <_Z10fuzzy_initv+0x7a2>
 80a0c10:	464b      	mov	r3, r9
 80a0c12:	4652      	mov	r2, sl
 80a0c14:	2102      	movs	r1, #2
 80a0c16:	f001 fbbd 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr2); 
 80a0c1a:	4ba8      	ldr	r3, [pc, #672]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0c1c:	4631      	mov	r1, r6
 80a0c1e:	6818      	ldr	r0, [r3, #0]
 80a0c20:	f002 f968 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LHHM = new FuzzyRuleAntecedent();
 80a0c24:	2018      	movs	r0, #24
 80a0c26:	f7ff fa38 	bl	80a009a <_Znwj>
 80a0c2a:	4606      	mov	r6, r0
 80a0c2c:	b108      	cbz	r0, 80a0c32 <_Z10fuzzy_initv+0x7ba>
 80a0c2e:	f002 f9c1 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LHHM->joinWithAND(left_low_high, right_high_med);
 80a0c32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a0c34:	990e      	ldr	r1, [sp, #56]	; 0x38
 80a0c36:	4630      	mov	r0, r6
 80a0c38:	f002 f9d3 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr3 = new FuzzyRule(3, LHHM, drive_center);
 80a0c3c:	2010      	movs	r0, #16
 80a0c3e:	f7ff fa2c 	bl	80a009a <_Znwj>
 80a0c42:	4682      	mov	sl, r0
 80a0c44:	b120      	cbz	r0, 80a0c50 <_Z10fuzzy_initv+0x7d8>
 80a0c46:	464b      	mov	r3, r9
 80a0c48:	4632      	mov	r2, r6
 80a0c4a:	2103      	movs	r1, #3
 80a0c4c:	f001 fba2 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr3);
 80a0c50:	4b9a      	ldr	r3, [pc, #616]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0c52:	4651      	mov	r1, sl
 80a0c54:	6818      	ldr	r0, [r3, #0]
 80a0c56:	f002 f94d 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMML = new FuzzyRuleAntecedent();
 80a0c5a:	2018      	movs	r0, #24
 80a0c5c:	f7ff fa1d 	bl	80a009a <_Znwj>
 80a0c60:	4606      	mov	r6, r0
 80a0c62:	b108      	cbz	r0, 80a0c68 <_Z10fuzzy_initv+0x7f0>
 80a0c64:	f002 f9a6 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LMML->joinWithAND(left_low_med, right_med_low);
 80a0c68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a0c6a:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a0c6c:	4630      	mov	r0, r6
 80a0c6e:	f002 f9b8 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr4 = new FuzzyRule(4, LMML, drive_center);
 80a0c72:	2010      	movs	r0, #16
 80a0c74:	f7ff fa11 	bl	80a009a <_Znwj>
 80a0c78:	4682      	mov	sl, r0
 80a0c7a:	b120      	cbz	r0, 80a0c86 <_Z10fuzzy_initv+0x80e>
 80a0c7c:	464b      	mov	r3, r9
 80a0c7e:	4632      	mov	r2, r6
 80a0c80:	2104      	movs	r1, #4
 80a0c82:	f001 fb87 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr4);
 80a0c86:	4b8d      	ldr	r3, [pc, #564]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0c88:	4651      	mov	r1, sl
 80a0c8a:	6818      	ldr	r0, [r3, #0]
 80a0c8c:	f002 f932 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMMM = new FuzzyRuleAntecedent();
 80a0c90:	2018      	movs	r0, #24
 80a0c92:	f7ff fa02 	bl	80a009a <_Znwj>
 80a0c96:	4606      	mov	r6, r0
 80a0c98:	b108      	cbz	r0, 80a0c9e <_Z10fuzzy_initv+0x826>
 80a0c9a:	f002 f98b 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  MMMM->joinWithAND(left_med_med, right_med_med);
 80a0c9e:	465a      	mov	r2, fp
 80a0ca0:	9908      	ldr	r1, [sp, #32]
 80a0ca2:	4630      	mov	r0, r6
 80a0ca4:	f002 f99d 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr5 = new FuzzyRule(5, MMMM, drive_center);
 80a0ca8:	2010      	movs	r0, #16
 80a0caa:	f7ff f9f6 	bl	80a009a <_Znwj>
 80a0cae:	4682      	mov	sl, r0
 80a0cb0:	b120      	cbz	r0, 80a0cbc <_Z10fuzzy_initv+0x844>
 80a0cb2:	464b      	mov	r3, r9
 80a0cb4:	4632      	mov	r2, r6
 80a0cb6:	2105      	movs	r1, #5
 80a0cb8:	f001 fb6c 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr5);
 80a0cbc:	4b7f      	ldr	r3, [pc, #508]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0cbe:	4651      	mov	r1, sl
 80a0cc0:	6818      	ldr	r0, [r3, #0]
 80a0cc2:	f002 f917 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HHLL = new FuzzyRuleAntecedent();
 80a0cc6:	2018      	movs	r0, #24
 80a0cc8:	f7ff f9e7 	bl	80a009a <_Znwj>
 80a0ccc:	4606      	mov	r6, r0
 80a0cce:	b108      	cbz	r0, 80a0cd4 <_Z10fuzzy_initv+0x85c>
 80a0cd0:	f002 f970 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  HHLL->joinWithAND(left_high_high, right_low_low);
 80a0cd4:	462a      	mov	r2, r5
 80a0cd6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a0cd8:	4630      	mov	r0, r6
 80a0cda:	f002 f982 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr6 = new FuzzyRule(6, HHLL, drive_small_left);
 80a0cde:	2010      	movs	r0, #16
 80a0ce0:	f7ff f9db 	bl	80a009a <_Znwj>
 80a0ce4:	4682      	mov	sl, r0
 80a0ce6:	b120      	cbz	r0, 80a0cf2 <_Z10fuzzy_initv+0x87a>
 80a0ce8:	4643      	mov	r3, r8
 80a0cea:	4632      	mov	r2, r6
 80a0cec:	2106      	movs	r1, #6
 80a0cee:	f001 fb51 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr6);
 80a0cf2:	4b72      	ldr	r3, [pc, #456]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0cf4:	4651      	mov	r1, sl
 80a0cf6:	6818      	ldr	r0, [r3, #0]
 80a0cf8:	f002 f8fc 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HHML = new FuzzyRuleAntecedent();
 80a0cfc:	2018      	movs	r0, #24
 80a0cfe:	f7ff f9cc 	bl	80a009a <_Znwj>
 80a0d02:	4606      	mov	r6, r0
 80a0d04:	b108      	cbz	r0, 80a0d0a <_Z10fuzzy_initv+0x892>
 80a0d06:	f002 f955 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  HHML->joinWithAND(left_high_high, right_med_low);
 80a0d0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a0d0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a0d0e:	4630      	mov	r0, r6
 80a0d10:	f002 f967 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr7 = new FuzzyRule(6, HHML, drive_small_left);
 80a0d14:	2010      	movs	r0, #16
 80a0d16:	f7ff f9c0 	bl	80a009a <_Znwj>
 80a0d1a:	4682      	mov	sl, r0
 80a0d1c:	b120      	cbz	r0, 80a0d28 <_Z10fuzzy_initv+0x8b0>
 80a0d1e:	4643      	mov	r3, r8
 80a0d20:	4632      	mov	r2, r6
 80a0d22:	2106      	movs	r1, #6
 80a0d24:	f001 fb36 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr7);
 80a0d28:	4b64      	ldr	r3, [pc, #400]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0d2a:	4651      	mov	r1, sl
 80a0d2c:	6818      	ldr	r0, [r3, #0]
 80a0d2e:	f002 f8e1 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HHMM = new FuzzyRuleAntecedent();
 80a0d32:	2018      	movs	r0, #24
 80a0d34:	f7ff f9b1 	bl	80a009a <_Znwj>
 80a0d38:	4606      	mov	r6, r0
 80a0d3a:	b108      	cbz	r0, 80a0d40 <_Z10fuzzy_initv+0x8c8>
 80a0d3c:	f002 f93a 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  HHMM->joinWithAND(left_high_high, right_med_med);
 80a0d40:	465a      	mov	r2, fp
 80a0d42:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a0d44:	4630      	mov	r0, r6
 80a0d46:	f002 f94c 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr8 = new FuzzyRule(8, HHMM, drive_small_left);
 80a0d4a:	2010      	movs	r0, #16
 80a0d4c:	f7ff f9a5 	bl	80a009a <_Znwj>
 80a0d50:	4682      	mov	sl, r0
 80a0d52:	b120      	cbz	r0, 80a0d5e <_Z10fuzzy_initv+0x8e6>
 80a0d54:	4643      	mov	r3, r8
 80a0d56:	4632      	mov	r2, r6
 80a0d58:	2108      	movs	r1, #8
 80a0d5a:	f001 fb1b 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr8);
 80a0d5e:	4b57      	ldr	r3, [pc, #348]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0d60:	4651      	mov	r1, sl
 80a0d62:	6818      	ldr	r0, [r3, #0]
 80a0d64:	f002 f8c6 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MHMM = new FuzzyRuleAntecedent();
 80a0d68:	2018      	movs	r0, #24
 80a0d6a:	f7ff f996 	bl	80a009a <_Znwj>
 80a0d6e:	4606      	mov	r6, r0
 80a0d70:	b108      	cbz	r0, 80a0d76 <_Z10fuzzy_initv+0x8fe>
 80a0d72:	f002 f91f 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  MHMM->joinWithAND(left_med_high, right_med_med);
 80a0d76:	465a      	mov	r2, fp
 80a0d78:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0d7a:	4630      	mov	r0, r6
 80a0d7c:	f002 f931 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr9 = new FuzzyRule(9, MHMM, drive_small_left);
 80a0d80:	2010      	movs	r0, #16
 80a0d82:	f7ff f98a 	bl	80a009a <_Znwj>
 80a0d86:	4682      	mov	sl, r0
 80a0d88:	b120      	cbz	r0, 80a0d94 <_Z10fuzzy_initv+0x91c>
 80a0d8a:	4643      	mov	r3, r8
 80a0d8c:	4632      	mov	r2, r6
 80a0d8e:	2109      	movs	r1, #9
 80a0d90:	f001 fb00 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr9);
 80a0d94:	4b49      	ldr	r3, [pc, #292]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0d96:	4651      	mov	r1, sl
 80a0d98:	6818      	ldr	r0, [r3, #0]
 80a0d9a:	f002 f8ab 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MHML = new FuzzyRuleAntecedent();
 80a0d9e:	2018      	movs	r0, #24
 80a0da0:	f7ff f97b 	bl	80a009a <_Znwj>
 80a0da4:	4606      	mov	r6, r0
 80a0da6:	b108      	cbz	r0, 80a0dac <_Z10fuzzy_initv+0x934>
 80a0da8:	f002 f904 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  MHML->joinWithAND(left_med_high, right_med_low);
 80a0dac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a0dae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0db0:	4630      	mov	r0, r6
 80a0db2:	f002 f916 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr10 = new FuzzyRule(10, MHML, drive_small_left);
 80a0db6:	2010      	movs	r0, #16
 80a0db8:	f7ff f96f 	bl	80a009a <_Znwj>
 80a0dbc:	4682      	mov	sl, r0
 80a0dbe:	b120      	cbz	r0, 80a0dca <_Z10fuzzy_initv+0x952>
 80a0dc0:	4643      	mov	r3, r8
 80a0dc2:	4632      	mov	r2, r6
 80a0dc4:	210a      	movs	r1, #10
 80a0dc6:	f001 fae5 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr10);
 80a0dca:	4b3c      	ldr	r3, [pc, #240]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0dcc:	4651      	mov	r1, sl
 80a0dce:	6818      	ldr	r0, [r3, #0]
 80a0dd0:	f002 f890 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MHLL = new FuzzyRuleAntecedent();
 80a0dd4:	2018      	movs	r0, #24
 80a0dd6:	f7ff f960 	bl	80a009a <_Znwj>
 80a0dda:	4606      	mov	r6, r0
 80a0ddc:	b108      	cbz	r0, 80a0de2 <_Z10fuzzy_initv+0x96a>
 80a0dde:	f002 f8e9 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  MHLL->joinWithAND(left_med_high, right_low_low);
 80a0de2:	462a      	mov	r2, r5
 80a0de4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0de6:	4630      	mov	r0, r6
 80a0de8:	f002 f8fb 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr11 = new FuzzyRule(11, MHLL, drive_small_left);
 80a0dec:	2010      	movs	r0, #16
 80a0dee:	f7ff f954 	bl	80a009a <_Znwj>
 80a0df2:	4682      	mov	sl, r0
 80a0df4:	b120      	cbz	r0, 80a0e00 <_Z10fuzzy_initv+0x988>
 80a0df6:	4643      	mov	r3, r8
 80a0df8:	4632      	mov	r2, r6
 80a0dfa:	210b      	movs	r1, #11
 80a0dfc:	f001 faca 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr11);
 80a0e00:	4b2e      	ldr	r3, [pc, #184]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0e02:	4651      	mov	r1, sl
 80a0e04:	6818      	ldr	r0, [r3, #0]
 80a0e06:	f002 f875 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMML = new FuzzyRuleAntecedent();
 80a0e0a:	2018      	movs	r0, #24
 80a0e0c:	f7ff f945 	bl	80a009a <_Znwj>
 80a0e10:	4606      	mov	r6, r0
 80a0e12:	b108      	cbz	r0, 80a0e18 <_Z10fuzzy_initv+0x9a0>
 80a0e14:	f002 f8ce 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  MMML->joinWithAND(left_med_med, right_med_low);
 80a0e18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a0e1a:	9908      	ldr	r1, [sp, #32]
 80a0e1c:	4630      	mov	r0, r6
 80a0e1e:	f002 f8e0 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr12 = new FuzzyRule(12, MMML, drive_small_left);
 80a0e22:	2010      	movs	r0, #16
 80a0e24:	f7ff f939 	bl	80a009a <_Znwj>
 80a0e28:	4682      	mov	sl, r0
 80a0e2a:	b120      	cbz	r0, 80a0e36 <_Z10fuzzy_initv+0x9be>
 80a0e2c:	4643      	mov	r3, r8
 80a0e2e:	4632      	mov	r2, r6
 80a0e30:	210c      	movs	r1, #12
 80a0e32:	f001 faaf 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr12);
 80a0e36:	4b21      	ldr	r3, [pc, #132]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0e38:	4651      	mov	r1, sl
 80a0e3a:	6818      	ldr	r0, [r3, #0]
 80a0e3c:	f002 f85a 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMLL = new FuzzyRuleAntecedent();
 80a0e40:	2018      	movs	r0, #24
 80a0e42:	f7ff f92a 	bl	80a009a <_Znwj>
 80a0e46:	4606      	mov	r6, r0
 80a0e48:	b108      	cbz	r0, 80a0e4e <_Z10fuzzy_initv+0x9d6>
 80a0e4a:	f002 f8b3 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  MMLL->joinWithAND(left_med_med, right_low_low);
 80a0e4e:	462a      	mov	r2, r5
 80a0e50:	9908      	ldr	r1, [sp, #32]
 80a0e52:	4630      	mov	r0, r6
 80a0e54:	f002 f8c5 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr13 = new FuzzyRule(13, MMLL, drive_small_left);
 80a0e58:	2010      	movs	r0, #16
 80a0e5a:	f7ff f91e 	bl	80a009a <_Znwj>
 80a0e5e:	4682      	mov	sl, r0
 80a0e60:	b120      	cbz	r0, 80a0e6c <_Z10fuzzy_initv+0x9f4>
 80a0e62:	4643      	mov	r3, r8
 80a0e64:	4632      	mov	r2, r6
 80a0e66:	210d      	movs	r1, #13
 80a0e68:	f001 fa94 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr13);
 80a0e6c:	4b13      	ldr	r3, [pc, #76]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0e6e:	4651      	mov	r1, sl
 80a0e70:	6818      	ldr	r0, [r3, #0]
 80a0e72:	f002 f83f 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HMLL = new FuzzyRuleAntecedent();
 80a0e76:	2018      	movs	r0, #24
 80a0e78:	f7ff f90f 	bl	80a009a <_Znwj>
 80a0e7c:	4606      	mov	r6, r0
 80a0e7e:	b108      	cbz	r0, 80a0e84 <_Z10fuzzy_initv+0xa0c>
 80a0e80:	f002 f898 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  HMLL->joinWithAND(left_high_med, right_low_low);
 80a0e84:	462a      	mov	r2, r5
 80a0e86:	9914      	ldr	r1, [sp, #80]	; 0x50
 80a0e88:	4630      	mov	r0, r6
 80a0e8a:	f002 f8aa 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr14 = new FuzzyRule(14, HMLL, drive_small_left);
 80a0e8e:	2010      	movs	r0, #16
 80a0e90:	f7ff f903 	bl	80a009a <_Znwj>
 80a0e94:	4682      	mov	sl, r0
 80a0e96:	b120      	cbz	r0, 80a0ea2 <_Z10fuzzy_initv+0xa2a>
 80a0e98:	4643      	mov	r3, r8
 80a0e9a:	4632      	mov	r2, r6
 80a0e9c:	210e      	movs	r1, #14
 80a0e9e:	f001 fa79 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr14);
 80a0ea2:	4b06      	ldr	r3, [pc, #24]	; (80a0ebc <_Z10fuzzy_initv+0xa44>)
 80a0ea4:	4651      	mov	r1, sl
 80a0ea6:	6818      	ldr	r0, [r3, #0]
 80a0ea8:	f002 f824 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MLLL = new FuzzyRuleAntecedent();
 80a0eac:	2018      	movs	r0, #24
 80a0eae:	f7ff f8f4 	bl	80a009a <_Znwj>
 80a0eb2:	4606      	mov	r6, r0
 80a0eb4:	b120      	cbz	r0, 80a0ec0 <_Z10fuzzy_initv+0xa48>
 80a0eb6:	f002 f87d 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
 80a0eba:	e001      	b.n	80a0ec0 <_Z10fuzzy_initv+0xa48>
 80a0ebc:	200003a4 	.word	0x200003a4
  MLLL->joinWithAND(left_med_low, right_low_low);
 80a0ec0:	462a      	mov	r2, r5
 80a0ec2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80a0ec4:	4630      	mov	r0, r6
 80a0ec6:	f002 f88c 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr15 = new FuzzyRule(15, MLLL, drive_small_left);
 80a0eca:	2010      	movs	r0, #16
 80a0ecc:	f7ff f8e5 	bl	80a009a <_Znwj>
 80a0ed0:	4682      	mov	sl, r0
 80a0ed2:	b120      	cbz	r0, 80a0ede <_Z10fuzzy_initv+0xa66>
 80a0ed4:	4643      	mov	r3, r8
 80a0ed6:	4632      	mov	r2, r6
 80a0ed8:	210f      	movs	r1, #15
 80a0eda:	f001 fa5b 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr15);
 80a0ede:	4bae      	ldr	r3, [pc, #696]	; (80a1198 <_Z10fuzzy_initv+0xd20>)
 80a0ee0:	4651      	mov	r1, sl
 80a0ee2:	6818      	ldr	r0, [r3, #0]
 80a0ee4:	f002 f806 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HLLL = new FuzzyRuleAntecedent();
 80a0ee8:	2018      	movs	r0, #24
 80a0eea:	f7ff f8d6 	bl	80a009a <_Znwj>
 80a0eee:	4606      	mov	r6, r0
 80a0ef0:	b108      	cbz	r0, 80a0ef6 <_Z10fuzzy_initv+0xa7e>
 80a0ef2:	f002 f85f 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  HLLL->joinWithAND(left_high_low, right_low_low);
 80a0ef6:	462a      	mov	r2, r5
 80a0ef8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80a0efa:	4630      	mov	r0, r6
 80a0efc:	f002 f871 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr16 = new FuzzyRule(16, HLLL, drive_full_left);
 80a0f00:	2010      	movs	r0, #16
 80a0f02:	f7ff f8ca 	bl	80a009a <_Znwj>
 80a0f06:	4680      	mov	r8, r0
 80a0f08:	b120      	cbz	r0, 80a0f14 <_Z10fuzzy_initv+0xa9c>
 80a0f0a:	9b04      	ldr	r3, [sp, #16]
 80a0f0c:	4632      	mov	r2, r6
 80a0f0e:	2110      	movs	r1, #16
 80a0f10:	f001 fa40 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr16);
 80a0f14:	4ea0      	ldr	r6, [pc, #640]	; (80a1198 <_Z10fuzzy_initv+0xd20>)
 80a0f16:	4641      	mov	r1, r8
 80a0f18:	6830      	ldr	r0, [r6, #0]
 80a0f1a:	f001 ffeb 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLLH = new FuzzyRuleAntecedent();
 80a0f1e:	2018      	movs	r0, #24
 80a0f20:	f7ff f8bb 	bl	80a009a <_Znwj>
 80a0f24:	4680      	mov	r8, r0
 80a0f26:	b108      	cbz	r0, 80a0f2c <_Z10fuzzy_initv+0xab4>
 80a0f28:	f002 f844 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLLH->joinWithAND(left_low_low, right_low_high);
 80a0f2c:	9a06      	ldr	r2, [sp, #24]
 80a0f2e:	4639      	mov	r1, r7
 80a0f30:	4640      	mov	r0, r8
 80a0f32:	f002 f856 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr17 = new FuzzyRule(17, LLLH, drive_full_right);
 80a0f36:	2010      	movs	r0, #16
 80a0f38:	f7ff f8af 	bl	80a009a <_Znwj>
 80a0f3c:	4682      	mov	sl, r0
 80a0f3e:	b120      	cbz	r0, 80a0f4a <_Z10fuzzy_initv+0xad2>
 80a0f40:	9b07      	ldr	r3, [sp, #28]
 80a0f42:	4642      	mov	r2, r8
 80a0f44:	2111      	movs	r1, #17
 80a0f46:	f001 fa25 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr17);
 80a0f4a:	4651      	mov	r1, sl
 80a0f4c:	6830      	ldr	r0, [r6, #0]
 80a0f4e:	f001 ffd1 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLHH = new FuzzyRuleAntecedent();
 80a0f52:	2018      	movs	r0, #24
 80a0f54:	f7ff f8a1 	bl	80a009a <_Znwj>
 80a0f58:	4606      	mov	r6, r0
 80a0f5a:	b108      	cbz	r0, 80a0f60 <_Z10fuzzy_initv+0xae8>
 80a0f5c:	f002 f82a 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLHH->joinWithAND(left_low_low, right_high_high);
 80a0f60:	9a03      	ldr	r2, [sp, #12]
 80a0f62:	4639      	mov	r1, r7
 80a0f64:	4630      	mov	r0, r6
 80a0f66:	f002 f83c 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr18 = new FuzzyRule(18, LLHH, drive_small_right);
 80a0f6a:	2010      	movs	r0, #16
 80a0f6c:	f7ff f895 	bl	80a009a <_Znwj>
 80a0f70:	4680      	mov	r8, r0
 80a0f72:	b120      	cbz	r0, 80a0f7e <_Z10fuzzy_initv+0xb06>
 80a0f74:	4623      	mov	r3, r4
 80a0f76:	4632      	mov	r2, r6
 80a0f78:	2112      	movs	r1, #18
 80a0f7a:	f001 fa0b 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr18);
 80a0f7e:	4e86      	ldr	r6, [pc, #536]	; (80a1198 <_Z10fuzzy_initv+0xd20>)
 80a0f80:	4641      	mov	r1, r8
 80a0f82:	6830      	ldr	r0, [r6, #0]
 80a0f84:	f001 ffb6 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMHH = new FuzzyRuleAntecedent();
 80a0f88:	2018      	movs	r0, #24
 80a0f8a:	f7ff f886 	bl	80a009a <_Znwj>
 80a0f8e:	4680      	mov	r8, r0
 80a0f90:	b108      	cbz	r0, 80a0f96 <_Z10fuzzy_initv+0xb1e>
 80a0f92:	f002 f80f 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LMHH->joinWithAND(left_low_med, right_high_high);
 80a0f96:	9a03      	ldr	r2, [sp, #12]
 80a0f98:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a0f9a:	4640      	mov	r0, r8
 80a0f9c:	f002 f821 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr19 = new FuzzyRule(19, LMHH, drive_small_right);
 80a0fa0:	2010      	movs	r0, #16
 80a0fa2:	f7ff f87a 	bl	80a009a <_Znwj>
 80a0fa6:	4682      	mov	sl, r0
 80a0fa8:	b120      	cbz	r0, 80a0fb4 <_Z10fuzzy_initv+0xb3c>
 80a0faa:	4623      	mov	r3, r4
 80a0fac:	4642      	mov	r2, r8
 80a0fae:	2113      	movs	r1, #19
 80a0fb0:	f001 f9f0 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr19);
 80a0fb4:	4651      	mov	r1, sl
 80a0fb6:	6830      	ldr	r0, [r6, #0]
 80a0fb8:	f001 ff9c 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMHH = new FuzzyRuleAntecedent();
 80a0fbc:	2018      	movs	r0, #24
 80a0fbe:	f7ff f86c 	bl	80a009a <_Znwj>
 80a0fc2:	4606      	mov	r6, r0
 80a0fc4:	b108      	cbz	r0, 80a0fca <_Z10fuzzy_initv+0xb52>
 80a0fc6:	f001 fff5 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  MMHH->joinWithAND(left_med_med, right_high_high);
 80a0fca:	9a03      	ldr	r2, [sp, #12]
 80a0fcc:	9908      	ldr	r1, [sp, #32]
 80a0fce:	4630      	mov	r0, r6
 80a0fd0:	f002 f807 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr20 = new FuzzyRule(20, MMHH, drive_small_right);
 80a0fd4:	2010      	movs	r0, #16
 80a0fd6:	f7ff f860 	bl	80a009a <_Znwj>
 80a0fda:	4680      	mov	r8, r0
 80a0fdc:	b120      	cbz	r0, 80a0fe8 <_Z10fuzzy_initv+0xb70>
 80a0fde:	4623      	mov	r3, r4
 80a0fe0:	4632      	mov	r2, r6
 80a0fe2:	2114      	movs	r1, #20
 80a0fe4:	f001 f9d6 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr20);
 80a0fe8:	4e6b      	ldr	r6, [pc, #428]	; (80a1198 <_Z10fuzzy_initv+0xd20>)
 80a0fea:	4641      	mov	r1, r8
 80a0fec:	6830      	ldr	r0, [r6, #0]
 80a0fee:	f001 ff81 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMHM = new FuzzyRuleAntecedent();
 80a0ff2:	2018      	movs	r0, #24
 80a0ff4:	f7ff f851 	bl	80a009a <_Znwj>
 80a0ff8:	4680      	mov	r8, r0
 80a0ffa:	b108      	cbz	r0, 80a1000 <_Z10fuzzy_initv+0xb88>
 80a0ffc:	f001 ffda 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  MMHM->joinWithAND(left_med_med, right_high_med);
 80a1000:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a1002:	9908      	ldr	r1, [sp, #32]
 80a1004:	4640      	mov	r0, r8
 80a1006:	f001 ffec 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr21 = new FuzzyRule(21, MMHM, drive_small_right);
 80a100a:	2010      	movs	r0, #16
 80a100c:	f7ff f845 	bl	80a009a <_Znwj>
 80a1010:	4682      	mov	sl, r0
 80a1012:	b120      	cbz	r0, 80a101e <_Z10fuzzy_initv+0xba6>
 80a1014:	4623      	mov	r3, r4
 80a1016:	4642      	mov	r2, r8
 80a1018:	2115      	movs	r1, #21
 80a101a:	f001 f9bb 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr21);
 80a101e:	4651      	mov	r1, sl
 80a1020:	6830      	ldr	r0, [r6, #0]
 80a1022:	f001 ff67 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMHM = new FuzzyRuleAntecedent();
 80a1026:	2018      	movs	r0, #24
 80a1028:	f7ff f837 	bl	80a009a <_Znwj>
 80a102c:	4680      	mov	r8, r0
 80a102e:	b108      	cbz	r0, 80a1034 <_Z10fuzzy_initv+0xbbc>
 80a1030:	f001 ffc0 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LMHM->joinWithAND(left_low_med, right_high_med);
 80a1034:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a1036:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a1038:	4640      	mov	r0, r8
 80a103a:	f001 ffd2 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr22 = new FuzzyRule(22, LMHM, drive_small_right);
 80a103e:	2010      	movs	r0, #16
 80a1040:	f7ff f82b 	bl	80a009a <_Znwj>
 80a1044:	4682      	mov	sl, r0
 80a1046:	b120      	cbz	r0, 80a1052 <_Z10fuzzy_initv+0xbda>
 80a1048:	4623      	mov	r3, r4
 80a104a:	4642      	mov	r2, r8
 80a104c:	2116      	movs	r1, #22
 80a104e:	f001 f9a1 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr22);
 80a1052:	4651      	mov	r1, sl
 80a1054:	6830      	ldr	r0, [r6, #0]
 80a1056:	f001 ff4d 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLHM = new FuzzyRuleAntecedent();
 80a105a:	2018      	movs	r0, #24
 80a105c:	f7ff f81d 	bl	80a009a <_Znwj>
 80a1060:	4680      	mov	r8, r0
 80a1062:	b108      	cbz	r0, 80a1068 <_Z10fuzzy_initv+0xbf0>
 80a1064:	f001 ffa6 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLHM->joinWithAND(left_low_low, right_high_med);
 80a1068:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a106a:	4639      	mov	r1, r7
 80a106c:	4640      	mov	r0, r8
 80a106e:	f001 ffb8 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr23 = new FuzzyRule(23, LLHM, drive_small_right);
 80a1072:	2010      	movs	r0, #16
 80a1074:	f7ff f811 	bl	80a009a <_Znwj>
 80a1078:	4682      	mov	sl, r0
 80a107a:	b120      	cbz	r0, 80a1086 <_Z10fuzzy_initv+0xc0e>
 80a107c:	4623      	mov	r3, r4
 80a107e:	4642      	mov	r2, r8
 80a1080:	2117      	movs	r1, #23
 80a1082:	f001 f987 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr23);
 80a1086:	4651      	mov	r1, sl
 80a1088:	6830      	ldr	r0, [r6, #0]
 80a108a:	f001 ff33 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMMM = new FuzzyRuleAntecedent();
 80a108e:	2018      	movs	r0, #24
 80a1090:	f7ff f803 	bl	80a009a <_Znwj>
 80a1094:	4680      	mov	r8, r0
 80a1096:	b108      	cbz	r0, 80a109c <_Z10fuzzy_initv+0xc24>
 80a1098:	f001 ff8c 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LMMM->joinWithAND(left_low_med, right_med_med);
 80a109c:	465a      	mov	r2, fp
 80a109e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a10a0:	4640      	mov	r0, r8
 80a10a2:	f001 ff9e 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr24 = new FuzzyRule(24, LMMM, drive_small_right);
 80a10a6:	2010      	movs	r0, #16
 80a10a8:	f7fe fff7 	bl	80a009a <_Znwj>
 80a10ac:	4682      	mov	sl, r0
 80a10ae:	b120      	cbz	r0, 80a10ba <_Z10fuzzy_initv+0xc42>
 80a10b0:	4623      	mov	r3, r4
 80a10b2:	4642      	mov	r2, r8
 80a10b4:	2118      	movs	r1, #24
 80a10b6:	f001 f96d 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr24);
 80a10ba:	4651      	mov	r1, sl
 80a10bc:	6830      	ldr	r0, [r6, #0]
 80a10be:	f001 ff19 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLMM = new FuzzyRuleAntecedent();
 80a10c2:	2018      	movs	r0, #24
 80a10c4:	f7fe ffe9 	bl	80a009a <_Znwj>
 80a10c8:	4680      	mov	r8, r0
 80a10ca:	b108      	cbz	r0, 80a10d0 <_Z10fuzzy_initv+0xc58>
 80a10cc:	f001 ff72 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLMM->joinWithAND(left_low_low, right_med_med);
 80a10d0:	465a      	mov	r2, fp
 80a10d2:	4639      	mov	r1, r7
 80a10d4:	4640      	mov	r0, r8
 80a10d6:	f001 ff84 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr25 = new FuzzyRule(25, LLMM, drive_small_right);
 80a10da:	2010      	movs	r0, #16
 80a10dc:	f7fe ffdd 	bl	80a009a <_Znwj>
 80a10e0:	4682      	mov	sl, r0
 80a10e2:	b120      	cbz	r0, 80a10ee <_Z10fuzzy_initv+0xc76>
 80a10e4:	4623      	mov	r3, r4
 80a10e6:	4642      	mov	r2, r8
 80a10e8:	2119      	movs	r1, #25
 80a10ea:	f001 f953 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr25);
 80a10ee:	4651      	mov	r1, sl
 80a10f0:	6830      	ldr	r0, [r6, #0]
 80a10f2:	f001 feff 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLMH = new FuzzyRuleAntecedent();
 80a10f6:	2018      	movs	r0, #24
 80a10f8:	f7fe ffcf 	bl	80a009a <_Znwj>
 80a10fc:	4680      	mov	r8, r0
 80a10fe:	b108      	cbz	r0, 80a1104 <_Z10fuzzy_initv+0xc8c>
 80a1100:	f001 ff58 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLMH->joinWithAND(left_low_low, right_med_high);
 80a1104:	9a05      	ldr	r2, [sp, #20]
 80a1106:	4639      	mov	r1, r7
 80a1108:	4640      	mov	r0, r8
 80a110a:	f001 ff6a 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr26 = new FuzzyRule(26, LLMH, drive_small_right);
 80a110e:	2010      	movs	r0, #16
 80a1110:	f7fe ffc3 	bl	80a009a <_Znwj>
 80a1114:	4682      	mov	sl, r0
 80a1116:	b120      	cbz	r0, 80a1122 <_Z10fuzzy_initv+0xcaa>
 80a1118:	4623      	mov	r3, r4
 80a111a:	4642      	mov	r2, r8
 80a111c:	211a      	movs	r1, #26
 80a111e:	f001 f939 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr26);
 80a1122:	4651      	mov	r1, sl
 80a1124:	6830      	ldr	r0, [r6, #0]
 80a1126:	f001 fee5 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLLM = new FuzzyRuleAntecedent();
 80a112a:	2018      	movs	r0, #24
 80a112c:	f7fe ffb5 	bl	80a009a <_Znwj>
 80a1130:	4680      	mov	r8, r0
 80a1132:	b108      	cbz	r0, 80a1138 <_Z10fuzzy_initv+0xcc0>
 80a1134:	f001 ff3e 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLLM->joinWithAND(left_low_low, right_low_med);
 80a1138:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a113a:	4639      	mov	r1, r7
 80a113c:	4640      	mov	r0, r8
 80a113e:	f001 ff50 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr27 = new FuzzyRule(27, LLLM, drive_small_right);
 80a1142:	2010      	movs	r0, #16
 80a1144:	f7fe ffa9 	bl	80a009a <_Znwj>
 80a1148:	4682      	mov	sl, r0
 80a114a:	b120      	cbz	r0, 80a1156 <_Z10fuzzy_initv+0xcde>
 80a114c:	4623      	mov	r3, r4
 80a114e:	4642      	mov	r2, r8
 80a1150:	211b      	movs	r1, #27
 80a1152:	f001 f91f 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr27);
 80a1156:	4651      	mov	r1, sl
 80a1158:	6830      	ldr	r0, [r6, #0]
 80a115a:	f001 fecb 	bl	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLLL = new FuzzyRuleAntecedent();
 80a115e:	2018      	movs	r0, #24
 80a1160:	f7fe ff9b 	bl	80a009a <_Znwj>
 80a1164:	4604      	mov	r4, r0
 80a1166:	b108      	cbz	r0, 80a116c <_Z10fuzzy_initv+0xcf4>
 80a1168:	f001 ff24 	bl	80a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLLL->joinWithAND(left_low_low, right_low_low);
 80a116c:	462a      	mov	r2, r5
 80a116e:	4639      	mov	r1, r7
 80a1170:	4620      	mov	r0, r4
 80a1172:	f001 ff36 	bl	80a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr28 = new FuzzyRule(28, LLLL, drive_center);	// should it be search?
 80a1176:	2010      	movs	r0, #16
 80a1178:	f7fe ff8f 	bl	80a009a <_Znwj>
 80a117c:	4605      	mov	r5, r0
 80a117e:	b120      	cbz	r0, 80a118a <_Z10fuzzy_initv+0xd12>
 80a1180:	464b      	mov	r3, r9
 80a1182:	4622      	mov	r2, r4
 80a1184:	211c      	movs	r1, #28
 80a1186:	f001 f905 	bl	80a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr28);
 80a118a:	4629      	mov	r1, r5
 80a118c:	6830      	ldr	r0, [r6, #0]
}
 80a118e:	b019      	add	sp, #100	; 0x64
 80a1190:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fuzzy->addFuzzyRule(fr27);

  FuzzyRuleAntecedent* LLLL = new FuzzyRuleAntecedent();
  LLLL->joinWithAND(left_low_low, right_low_low);
  FuzzyRule* fr28 = new FuzzyRule(28, LLLL, drive_center);	// should it be search?
  fuzzy->addFuzzyRule(fr28);
 80a1194:	f001 beae 	b.w	80a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>
 80a1198:	200003a4 	.word	0x200003a4

080a119c <setup>:
}

void setup() {
 80a119c:	b508      	push	{r3, lr}
	tof_init();			// ToF and I2C
 80a119e:	f7fe ffd9 	bl	80a0154 <_Z8tof_initv>
	accel_init();		// accelerometer
 80a11a2:	f7ff f88b 	bl	80a02bc <_Z10accel_initv>
	others_init();		// line, remote, esc, ***printing***
 80a11a6:	f7ff f89b 	bl	80a02e0 <_Z11others_initv>
	interrupt_init();	// interrupts for lines and remote
 80a11aa:	f7ff f8cd 	bl	80a0348 <_Z14interrupt_initv>
	ESC_init();			// Car ESCs
 80a11ae:	f7ff f911 	bl	80a03d4 <_Z8ESC_initv>
	fuzzy_init();		// Fuzzy library************
 80a11b2:	f7ff f961 	bl	80a0478 <_Z10fuzzy_initv>
  	// register cloud variables
	// Particle.variable("distance", distance);
	// Particle.variable("Left_ESC", L_command);
	// Particle.variable("Right_ESC", R_command);
	// *********************************************
}
 80a11b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	accel_init();		// accelerometer
	others_init();		// line, remote, esc, ***printing***
	interrupt_init();	// interrupts for lines and remote
	ESC_init();			// Car ESCs
	fuzzy_init();		// Fuzzy library************
	robot_init();
 80a11ba:	f7ff b93b 	b.w	80a0434 <_Z10robot_initv>
	...

080a11c0 <_Z4stopv>:
	// Particle.variable("Left_ESC", L_command);
	// Particle.variable("Right_ESC", R_command);
	// *********************************************
}

void stop() {
 80a11c0:	b508      	push	{r3, lr}
  	LESC.writeMicroseconds(1500);
 80a11c2:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a11c6:	4805      	ldr	r0, [pc, #20]	; (80a11dc <_Z4stopv+0x1c>)
 80a11c8:	f002 f9ab 	bl	80a3522 <_ZN5Servo17writeMicrosecondsEt>
  	RESC.writeMicroseconds(1500);
}
 80a11cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	// *********************************************
}

void stop() {
  	LESC.writeMicroseconds(1500);
  	RESC.writeMicroseconds(1500);
 80a11d0:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a11d4:	4802      	ldr	r0, [pc, #8]	; (80a11e0 <_Z4stopv+0x20>)
 80a11d6:	f002 b9a4 	b.w	80a3522 <_ZN5Servo17writeMicrosecondsEt>
 80a11da:	bf00      	nop
 80a11dc:	20000370 	.word	0x20000370
 80a11e0:	200003f0 	.word	0x200003f0

080a11e4 <loop>:
}

void loop(){
 80a11e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	// sensorx.readRangeContinuousMillimeters();
	RR_distance = sensor0.readRangeContinuousMillimeters();
 80a11e8:	4890      	ldr	r0, [pc, #576]	; (80a142c <loop+0x248>)
 80a11ea:	f000 fb3f 	bl	80a186c <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a11ee:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 80a14b0 <loop+0x2cc>
	RM_distance = sensor1.readRangeContinuousMillimeters();
 80a11f2:	4f8f      	ldr	r7, [pc, #572]	; (80a1430 <loop+0x24c>)
  	RESC.writeMicroseconds(1500);
}

void loop(){
	// sensorx.readRangeContinuousMillimeters();
	RR_distance = sensor0.readRangeContinuousMillimeters();
 80a11f4:	f8a8 0000 	strh.w	r0, [r8]
	RM_distance = sensor1.readRangeContinuousMillimeters();
 80a11f8:	488e      	ldr	r0, [pc, #568]	; (80a1434 <loop+0x250>)
 80a11fa:	f000 fb37 	bl	80a186c <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a11fe:	8038      	strh	r0, [r7, #0]
	LM_distance = sensor2.readRangeContinuousMillimeters();
 80a1200:	488d      	ldr	r0, [pc, #564]	; (80a1438 <loop+0x254>)
 80a1202:	f000 fb33 	bl	80a186c <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a1206:	4e8d      	ldr	r6, [pc, #564]	; (80a143c <loop+0x258>)
	LL_distance = sensor3.readRangeContinuousMillimeters();
 80a1208:	4d8d      	ldr	r5, [pc, #564]	; (80a1440 <loop+0x25c>)

void loop(){
	// sensorx.readRangeContinuousMillimeters();
	RR_distance = sensor0.readRangeContinuousMillimeters();
	RM_distance = sensor1.readRangeContinuousMillimeters();
	LM_distance = sensor2.readRangeContinuousMillimeters();
 80a120a:	8030      	strh	r0, [r6, #0]
	LL_distance = sensor3.readRangeContinuousMillimeters();
 80a120c:	488d      	ldr	r0, [pc, #564]	; (80a1444 <loop+0x260>)
 80a120e:	f000 fb2d 	bl	80a186c <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a1212:	8028      	strh	r0, [r5, #0]
	// 	RR_distance = low4;
	// }

  	// FUZZY **************************************************

  	fuzzy->setInput(1, LL_distance);
 80a1214:	f003 fd00 	bl	80a4c18 <__aeabi_ui2f>
 80a1218:	4c8b      	ldr	r4, [pc, #556]	; (80a1448 <loop+0x264>)
 80a121a:	4602      	mov	r2, r0
 80a121c:	2101      	movs	r1, #1
 80a121e:	6820      	ldr	r0, [r4, #0]
 80a1220:	f001 fe7b 	bl	80a2f1a <_ZN5Fuzzy8setInputEif>
  	fuzzy->setInput(2, LM_distance);
 80a1224:	8830      	ldrh	r0, [r6, #0]
 80a1226:	f003 fcf7 	bl	80a4c18 <__aeabi_ui2f>
 80a122a:	2102      	movs	r1, #2
 80a122c:	4602      	mov	r2, r0
 80a122e:	6820      	ldr	r0, [r4, #0]
 80a1230:	f001 fe73 	bl	80a2f1a <_ZN5Fuzzy8setInputEif>
  	fuzzy->setInput(3, RM_distance);
 80a1234:	8838      	ldrh	r0, [r7, #0]
 80a1236:	f003 fcef 	bl	80a4c18 <__aeabi_ui2f>
 80a123a:	2103      	movs	r1, #3
 80a123c:	4602      	mov	r2, r0
 80a123e:	6820      	ldr	r0, [r4, #0]
 80a1240:	f001 fe6b 	bl	80a2f1a <_ZN5Fuzzy8setInputEif>
  	fuzzy->setInput(4, RR_distance);
 80a1244:	f8b8 0000 	ldrh.w	r0, [r8]
 80a1248:	f003 fce6 	bl	80a4c18 <__aeabi_ui2f>
 80a124c:	2104      	movs	r1, #4
 80a124e:	4602      	mov	r2, r0
 80a1250:	6820      	ldr	r0, [r4, #0]
 80a1252:	f001 fe62 	bl	80a2f1a <_ZN5Fuzzy8setInputEif>

  	fuzzy->fuzzify();
 80a1256:	6820      	ldr	r0, [r4, #0]
 80a1258:	f001 fe73 	bl	80a2f42 <_ZN5Fuzzy7fuzzifyEv>
  	output = fuzzy->defuzzify(1);
 80a125c:	2101      	movs	r1, #1
 80a125e:	6820      	ldr	r0, [r4, #0]
 80a1260:	f001 fe96 	bl	80a2f90 <_ZN5Fuzzy9defuzzifyEi>
 80a1264:	4b79      	ldr	r3, [pc, #484]	; (80a144c <loop+0x268>)


  	if((output >= 0) && (output < 20)) {
 80a1266:	2100      	movs	r1, #0
  	fuzzy->setInput(2, LM_distance);
  	fuzzy->setInput(3, RM_distance);
  	fuzzy->setInput(4, RR_distance);

  	fuzzy->fuzzify();
  	output = fuzzy->defuzzify(1);
 80a1268:	6018      	str	r0, [r3, #0]
 80a126a:	4604      	mov	r4, r0


  	if((output >= 0) && (output < 20)) {
 80a126c:	f003 fede 	bl	80a502c <__aeabi_fcmpge>
 80a1270:	b158      	cbz	r0, 80a128a <loop+0xa6>
 80a1272:	4977      	ldr	r1, [pc, #476]	; (80a1450 <loop+0x26c>)
 80a1274:	4620      	mov	r0, r4
 80a1276:	f003 fec5 	bl	80a5004 <__aeabi_fcmplt>
 80a127a:	b130      	cbz	r0, 80a128a <loop+0xa6>
  		// Serial.print("Full Left");
  		// Particle.publish("Full Left");
  		decision = "Full Left";
 80a127c:	4975      	ldr	r1, [pc, #468]	; (80a1454 <loop+0x270>)
 80a127e:	4876      	ldr	r0, [pc, #472]	; (80a1458 <loop+0x274>)
 80a1280:	f002 fa0b 	bl	80a369a <_ZN6StringaSEPKc>
  		L_command = 1525;
 80a1284:	f240 52f5 	movw	r2, #1525	; 0x5f5
 80a1288:	e00f      	b.n	80a12aa <loop+0xc6>
  		R_command = 1600;
  	} else if((output >= 20) && (output < 40)) {
 80a128a:	4971      	ldr	r1, [pc, #452]	; (80a1450 <loop+0x26c>)
 80a128c:	4620      	mov	r0, r4
 80a128e:	f003 fecd 	bl	80a502c <__aeabi_fcmpge>
 80a1292:	b178      	cbz	r0, 80a12b4 <loop+0xd0>
 80a1294:	4971      	ldr	r1, [pc, #452]	; (80a145c <loop+0x278>)
 80a1296:	4620      	mov	r0, r4
 80a1298:	f003 feb4 	bl	80a5004 <__aeabi_fcmplt>
 80a129c:	b150      	cbz	r0, 80a12b4 <loop+0xd0>
  		// Serial.print("Small Left");
  		// Particle.publish("Small Left");
  		decision = "Small Left";
 80a129e:	4970      	ldr	r1, [pc, #448]	; (80a1460 <loop+0x27c>)
 80a12a0:	486d      	ldr	r0, [pc, #436]	; (80a1458 <loop+0x274>)
 80a12a2:	f002 f9fa 	bl	80a369a <_ZN6StringaSEPKc>
   		L_command = 1575;
 80a12a6:	f240 6227 	movw	r2, #1575	; 0x627
 80a12aa:	4b6e      	ldr	r3, [pc, #440]	; (80a1464 <loop+0x280>)
 80a12ac:	601a      	str	r2, [r3, #0]
  		R_command = 1600;
 80a12ae:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80a12b2:	e03d      	b.n	80a1330 <loop+0x14c>
	} else if((output >= 40) && (output < 60)) {
 80a12b4:	4969      	ldr	r1, [pc, #420]	; (80a145c <loop+0x278>)
 80a12b6:	4620      	mov	r0, r4
 80a12b8:	f003 feb8 	bl	80a502c <__aeabi_fcmpge>
 80a12bc:	b178      	cbz	r0, 80a12de <loop+0xfa>
 80a12be:	496a      	ldr	r1, [pc, #424]	; (80a1468 <loop+0x284>)
 80a12c0:	4620      	mov	r0, r4
 80a12c2:	f003 fe9f 	bl	80a5004 <__aeabi_fcmplt>
 80a12c6:	b150      	cbz	r0, 80a12de <loop+0xfa>
		// Serial.print("Center");
		// Particle.publish("Center");
		decision = "Center";
 80a12c8:	4968      	ldr	r1, [pc, #416]	; (80a146c <loop+0x288>)
 80a12ca:	4863      	ldr	r0, [pc, #396]	; (80a1458 <loop+0x274>)
 80a12cc:	f002 f9e5 	bl	80a369a <_ZN6StringaSEPKc>
  		L_command = 1500;
 80a12d0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80a12d4:	4a63      	ldr	r2, [pc, #396]	; (80a1464 <loop+0x280>)
 80a12d6:	6013      	str	r3, [r2, #0]
  		R_command = 1500;
 80a12d8:	4a65      	ldr	r2, [pc, #404]	; (80a1470 <loop+0x28c>)
 80a12da:	6013      	str	r3, [r2, #0]
 80a12dc:	e02a      	b.n	80a1334 <loop+0x150>
	} else if((output >= 60) && (output < 80)) {
 80a12de:	4962      	ldr	r1, [pc, #392]	; (80a1468 <loop+0x284>)
 80a12e0:	4620      	mov	r0, r4
 80a12e2:	f003 fea3 	bl	80a502c <__aeabi_fcmpge>
 80a12e6:	b178      	cbz	r0, 80a1308 <loop+0x124>
 80a12e8:	4962      	ldr	r1, [pc, #392]	; (80a1474 <loop+0x290>)
 80a12ea:	4620      	mov	r0, r4
 80a12ec:	f003 fe8a 	bl	80a5004 <__aeabi_fcmplt>
 80a12f0:	b150      	cbz	r0, 80a1308 <loop+0x124>
		// Serial.print("Small Right");
		// Particle.publish("Small Right");
		decision = "Small Right";
 80a12f2:	4961      	ldr	r1, [pc, #388]	; (80a1478 <loop+0x294>)
 80a12f4:	4858      	ldr	r0, [pc, #352]	; (80a1458 <loop+0x274>)
 80a12f6:	f002 f9d0 	bl	80a369a <_ZN6StringaSEPKc>
  		L_command = 1600;
 80a12fa:	4b5a      	ldr	r3, [pc, #360]	; (80a1464 <loop+0x280>)
 80a12fc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80a1300:	601a      	str	r2, [r3, #0]
  		R_command = 1575;
 80a1302:	f240 6227 	movw	r2, #1575	; 0x627
 80a1306:	e013      	b.n	80a1330 <loop+0x14c>
	} else if((output >= 80) && (output < 100)) {
 80a1308:	495a      	ldr	r1, [pc, #360]	; (80a1474 <loop+0x290>)
 80a130a:	4620      	mov	r0, r4
 80a130c:	f003 fe8e 	bl	80a502c <__aeabi_fcmpge>
 80a1310:	b180      	cbz	r0, 80a1334 <loop+0x150>
 80a1312:	495a      	ldr	r1, [pc, #360]	; (80a147c <loop+0x298>)
 80a1314:	4620      	mov	r0, r4
 80a1316:	f003 fe75 	bl	80a5004 <__aeabi_fcmplt>
 80a131a:	b158      	cbz	r0, 80a1334 <loop+0x150>
		// Serial.print("Full Right");
		// Particle.publish("Full Right");
		decision = "Full Right";
 80a131c:	4958      	ldr	r1, [pc, #352]	; (80a1480 <loop+0x29c>)
 80a131e:	484e      	ldr	r0, [pc, #312]	; (80a1458 <loop+0x274>)
 80a1320:	f002 f9bb 	bl	80a369a <_ZN6StringaSEPKc>
  		L_command = 1600;
 80a1324:	4b4f      	ldr	r3, [pc, #316]	; (80a1464 <loop+0x280>)
 80a1326:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80a132a:	601a      	str	r2, [r3, #0]
  		R_command = 1525;
 80a132c:	f240 52f5 	movw	r2, #1525	; 0x5f5
 80a1330:	4b4f      	ldr	r3, [pc, #316]	; (80a1470 <loop+0x28c>)
 80a1332:	601a      	str	r2, [r3, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a1334:	f001 ff94 	bl	80a3260 <HAL_Timer_Get_Milli_Seconds>
	}

	// For web console debugging
	// Publish every 1 second (fastest rate)
	if(millis() - currentTime > 1000) {
 80a1338:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80a14b4 <loop+0x2d0>
 80a133c:	4c46      	ldr	r4, [pc, #280]	; (80a1458 <loop+0x274>)
 80a133e:	f8d9 3000 	ldr.w	r3, [r9]
 80a1342:	1ac0      	subs	r0, r0, r3
 80a1344:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80a1348:	d908      	bls.n	80a135c <loop+0x178>
 80a134a:	f001 ff89 	bl	80a3260 <HAL_Timer_Get_Milli_Seconds>
	// 	Particle.publish(decision);
		currentTime = millis();
 80a134e:	f8c9 0000 	str.w	r0, [r9]
		Serial.println(decision);
 80a1352:	f002 fb8d 	bl	80a3a70 <_Z16_fetch_usbserialv>
 80a1356:	6821      	ldr	r1, [r4, #0]
 80a1358:	f002 f9e9 	bl	80a372e <_ZN5Print7printlnEPKc>
	}

	// For serial debugging

  	Serial.print(decision);
 80a135c:	f002 fb88 	bl	80a3a70 <_Z16_fetch_usbserialv>
 80a1360:	6821      	ldr	r1, [r4, #0]
 80a1362:	f002 f9d1 	bl	80a3708 <_ZN5Print5printEPKc>
  	Serial.print(" | ");
 80a1366:	f002 fb83 	bl	80a3a70 <_Z16_fetch_usbserialv>
 80a136a:	4946      	ldr	r1, [pc, #280]	; (80a1484 <loop+0x2a0>)
 80a136c:	f002 f9cc 	bl	80a3708 <_ZN5Print5printEPKc>
  	Serial.print("sensor 0:");
 80a1370:	f002 fb7e 	bl	80a3a70 <_Z16_fetch_usbserialv>
 80a1374:	4944      	ldr	r1, [pc, #272]	; (80a1488 <loop+0x2a4>)
 80a1376:	f002 f9c7 	bl	80a3708 <_ZN5Print5printEPKc>
  	Serial.print(RR_distance);
 80a137a:	f002 fb79 	bl	80a3a70 <_Z16_fetch_usbserialv>
 80a137e:	220a      	movs	r2, #10
 80a1380:	f8b8 1000 	ldrh.w	r1, [r8]
 80a1384:	f002 fa2b 	bl	80a37de <_ZN5Print5printEii>
  	Serial.print(" | ");
 80a1388:	f002 fb72 	bl	80a3a70 <_Z16_fetch_usbserialv>
 80a138c:	493d      	ldr	r1, [pc, #244]	; (80a1484 <loop+0x2a0>)
 80a138e:	f002 f9bb 	bl	80a3708 <_ZN5Print5printEPKc>
  	Serial.print("sensor 1:");
 80a1392:	f002 fb6d 	bl	80a3a70 <_Z16_fetch_usbserialv>
 80a1396:	493d      	ldr	r1, [pc, #244]	; (80a148c <loop+0x2a8>)
 80a1398:	f002 f9b6 	bl	80a3708 <_ZN5Print5printEPKc>
  	Serial.print(RM_distance);
 80a139c:	f002 fb68 	bl	80a3a70 <_Z16_fetch_usbserialv>
 80a13a0:	220a      	movs	r2, #10
 80a13a2:	8839      	ldrh	r1, [r7, #0]
 80a13a4:	f002 fa1b 	bl	80a37de <_ZN5Print5printEii>
  	Serial.print(" | ");
 80a13a8:	f002 fb62 	bl	80a3a70 <_Z16_fetch_usbserialv>
 80a13ac:	4935      	ldr	r1, [pc, #212]	; (80a1484 <loop+0x2a0>)
 80a13ae:	f002 f9ab 	bl	80a3708 <_ZN5Print5printEPKc>
  	Serial.print("sensor 2:");
 80a13b2:	f002 fb5d 	bl	80a3a70 <_Z16_fetch_usbserialv>
 80a13b6:	4936      	ldr	r1, [pc, #216]	; (80a1490 <loop+0x2ac>)
 80a13b8:	f002 f9a6 	bl	80a3708 <_ZN5Print5printEPKc>
  	Serial.print(LM_distance);
 80a13bc:	f002 fb58 	bl	80a3a70 <_Z16_fetch_usbserialv>
 80a13c0:	220a      	movs	r2, #10
 80a13c2:	8831      	ldrh	r1, [r6, #0]
 80a13c4:	f002 fa0b 	bl	80a37de <_ZN5Print5printEii>
  	Serial.print(" | ");
 80a13c8:	f002 fb52 	bl	80a3a70 <_Z16_fetch_usbserialv>
 80a13cc:	492d      	ldr	r1, [pc, #180]	; (80a1484 <loop+0x2a0>)
 80a13ce:	f002 f99b 	bl	80a3708 <_ZN5Print5printEPKc>
  	Serial.print("sensor 3:");
 80a13d2:	f002 fb4d 	bl	80a3a70 <_Z16_fetch_usbserialv>
 80a13d6:	492f      	ldr	r1, [pc, #188]	; (80a1494 <loop+0x2b0>)
 80a13d8:	f002 f996 	bl	80a3708 <_ZN5Print5printEPKc>
  	Serial.println(LL_distance);
 80a13dc:	f002 fb48 	bl	80a3a70 <_Z16_fetch_usbserialv>
 80a13e0:	8829      	ldrh	r1, [r5, #0]
 80a13e2:	220a      	movs	r2, #10
 80a13e4:	f002 f9fd 	bl	80a37e2 <_ZN5Print7printlnEii>
  	// FUZZY ***********************************************


  	// obligatory sampling from accelerometer
  	LIS3DHSample sample;
  	if(!accel.getSample(sample)) {
 80a13e8:	4669      	mov	r1, sp
 80a13ea:	482b      	ldr	r0, [pc, #172]	; (80a1498 <loop+0x2b4>)
 80a13ec:	f000 ff32 	bl	80a2254 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
 80a13f0:	b920      	cbnz	r0, 80a13fc <loop+0x218>
  		Serial.println("no sample"); // ********************************
 80a13f2:	f002 fb3d 	bl	80a3a70 <_Z16_fetch_usbserialv>
 80a13f6:	4929      	ldr	r1, [pc, #164]	; (80a149c <loop+0x2b8>)
 80a13f8:	f002 f999 	bl	80a372e <_ZN5Print7printlnEPKc>
  		// Particle.publish("no sample");
  	}
// 
  	if(RSflag == LOW) {
 80a13fc:	4b28      	ldr	r3, [pc, #160]	; (80a14a0 <loop+0x2bc>)
 80a13fe:	781b      	ldrb	r3, [r3, #0]
 80a1400:	b93b      	cbnz	r3, 80a1412 <loop+0x22e>
  		stop();
 80a1402:	f7ff fedd 	bl	80a11c0 <_Z4stopv>
  		Serial.print("STOPPED");
 80a1406:	f002 fb33 	bl	80a3a70 <_Z16_fetch_usbserialv>
 80a140a:	4926      	ldr	r1, [pc, #152]	; (80a14a4 <loop+0x2c0>)
 80a140c:	f002 f97c 	bl	80a3708 <_ZN5Print5printEPKc>
 80a1410:	e7fe      	b.n	80a1410 <loop+0x22c>
  		while(true);
  		// System.reset();
  	}

  	LESC.writeMicroseconds(L_command);
 80a1412:	4b14      	ldr	r3, [pc, #80]	; (80a1464 <loop+0x280>)
 80a1414:	4824      	ldr	r0, [pc, #144]	; (80a14a8 <loop+0x2c4>)
 80a1416:	8819      	ldrh	r1, [r3, #0]
 80a1418:	f002 f883 	bl	80a3522 <_ZN5Servo17writeMicrosecondsEt>
  	RESC.writeMicroseconds(R_command);
 80a141c:	4b14      	ldr	r3, [pc, #80]	; (80a1470 <loop+0x28c>)
 80a141e:	4823      	ldr	r0, [pc, #140]	; (80a14ac <loop+0x2c8>)
 80a1420:	8819      	ldrh	r1, [r3, #0]
 80a1422:	f002 f87e 	bl	80a3522 <_ZN5Servo17writeMicrosecondsEt>
 80a1426:	b003      	add	sp, #12
 80a1428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a142c:	200003a8 	.word	0x200003a8
 80a1430:	20000424 	.word	0x20000424
 80a1434:	20000408 	.word	0x20000408
 80a1438:	200003c0 	.word	0x200003c0
 80a143c:	20000402 	.word	0x20000402
 80a1440:	20000426 	.word	0x20000426
 80a1444:	200003d8 	.word	0x200003d8
 80a1448:	200003a4 	.word	0x200003a4
 80a144c:	20000368 	.word	0x20000368
 80a1450:	41a00000 	.word	0x41a00000
 80a1454:	080a512b 	.word	0x080a512b
 80a1458:	20000394 	.word	0x20000394
 80a145c:	42200000 	.word	0x42200000
 80a1460:	080a5135 	.word	0x080a5135
 80a1464:	20000340 	.word	0x20000340
 80a1468:	42700000 	.word	0x42700000
 80a146c:	080a5140 	.word	0x080a5140
 80a1470:	20000304 	.word	0x20000304
 80a1474:	42a00000 	.word	0x42a00000
 80a1478:	080a5147 	.word	0x080a5147
 80a147c:	42c80000 	.word	0x42c80000
 80a1480:	080a5153 	.word	0x080a5153
 80a1484:	080a515e 	.word	0x080a515e
 80a1488:	080a5162 	.word	0x080a5162
 80a148c:	080a516c 	.word	0x080a516c
 80a1490:	080a5176 	.word	0x080a5176
 80a1494:	080a5180 	.word	0x080a5180
 80a1498:	20000380 	.word	0x20000380
 80a149c:	080a518a 	.word	0x080a518a
 80a14a0:	20000400 	.word	0x20000400
 80a14a4:	080a5194 	.word	0x080a5194
 80a14a8:	20000370 	.word	0x20000370
 80a14ac:	200003f0 	.word	0x200003f0
 80a14b0:	2000036c 	.word	0x2000036c
 80a14b4:	20000404 	.word	0x20000404

080a14b8 <_GLOBAL__sub_I_high1>:
 80a14b8:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a14ba:	f001 fe79 	bl	80a31b0 <HAL_Pin_Map>

#if !defined(PARTICLE)
#  include <Wire.h>
#endif

VL53L0X sensor0;	// RR
 80a14be:	481d      	ldr	r0, [pc, #116]	; (80a1534 <_GLOBAL__sub_I_high1+0x7c>)
 80a14c0:	f000 f85a 	bl	80a1578 <_ZN7VL53L0XC1Ev>
VL53L0X sensor1;	// RM
 80a14c4:	481c      	ldr	r0, [pc, #112]	; (80a1538 <_GLOBAL__sub_I_high1+0x80>)
 80a14c6:	f000 f857 	bl	80a1578 <_ZN7VL53L0XC1Ev>
VL53L0X sensor2;	// LM
 80a14ca:	481c      	ldr	r0, [pc, #112]	; (80a153c <_GLOBAL__sub_I_high1+0x84>)
 80a14cc:	f000 f854 	bl	80a1578 <_ZN7VL53L0XC1Ev>
VL53L0X sensor3;	// LL
 80a14d0:	481b      	ldr	r0, [pc, #108]	; (80a1540 <_GLOBAL__sub_I_high1+0x88>)
 80a14d2:	f000 f851 	bl	80a1578 <_ZN7VL53L0XC1Ev>
int BL = D5;
int BR = D6;

int RS = D4;

Servo LESC;
 80a14d6:	481b      	ldr	r0, [pc, #108]	; (80a1544 <_GLOBAL__sub_I_high1+0x8c>)
 80a14d8:	f002 f843 	bl	80a3562 <_ZN5ServoC1Ev>
Servo RESC;
 80a14dc:	481a      	ldr	r0, [pc, #104]	; (80a1548 <_GLOBAL__sub_I_high1+0x90>)
 80a14de:	f002 f840 	bl	80a3562 <_ZN5ServoC1Ev>
boolean BLflag = true;
boolean BRflag = true;

boolean RSflag = false;

Fuzzy* fuzzy = new Fuzzy();
 80a14e2:	2018      	movs	r0, #24
 80a14e4:	f7fe fdd9 	bl	80a009a <_Znwj>
 80a14e8:	4604      	mov	r4, r0
 80a14ea:	b108      	cbz	r0, 80a14f0 <_GLOBAL__sub_I_high1+0x38>
 80a14ec:	f001 fccf 	bl	80a2e8e <_ZN5FuzzyC1Ev>
 80a14f0:	4b16      	ldr	r3, [pc, #88]	; (80a154c <_GLOBAL__sub_I_high1+0x94>)
float output;
String decision;
 80a14f2:	4917      	ldr	r1, [pc, #92]	; (80a1550 <_GLOBAL__sub_I_high1+0x98>)
 80a14f4:	4817      	ldr	r0, [pc, #92]	; (80a1554 <_GLOBAL__sub_I_high1+0x9c>)
boolean BLflag = true;
boolean BRflag = true;

boolean RSflag = false;

Fuzzy* fuzzy = new Fuzzy();
 80a14f6:	601c      	str	r4, [r3, #0]
float output;
String decision;
 80a14f8:	f002 f8bc 	bl	80a3674 <_ZN6StringC1EPK19__FlashStringHelper>
 80a14fc:	4a16      	ldr	r2, [pc, #88]	; (80a1558 <_GLOBAL__sub_I_high1+0xa0>)
 80a14fe:	4917      	ldr	r1, [pc, #92]	; (80a155c <_GLOBAL__sub_I_high1+0xa4>)
 80a1500:	4814      	ldr	r0, [pc, #80]	; (80a1554 <_GLOBAL__sub_I_high1+0x9c>)
 80a1502:	f002 fce3 	bl	80a3ecc <__aeabi_atexit>
unsigned long currentTime = 0;

SYSTEM_THREAD(ENABLED);
 80a1506:	2100      	movs	r1, #0
 80a1508:	2001      	movs	r0, #1
 80a150a:	f001 ffb3 	bl	80a3474 <system_thread_set_state>

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a150e:	2003      	movs	r0, #3
 80a1510:	f001 ffa0 	bl	80a3454 <set_system_mode>
// SYSTEM_MODE(AUTOMATIC);


// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
 80a1514:	f002 fcba 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a1518:	2200      	movs	r2, #0
 80a151a:	4601      	mov	r1, r0
 80a151c:	2311      	movs	r3, #17
 80a151e:	4810      	ldr	r0, [pc, #64]	; (80a1560 <_GLOBAL__sub_I_high1+0xa8>)
 80a1520:	f000 ff2c 	bl	80a237c <_ZN9LIS3DHI2CC1ER7TwoWirehi>
  		// System.reset();
  	}

  	LESC.writeMicroseconds(L_command);
  	RESC.writeMicroseconds(R_command);
 80a1524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// SYSTEM_MODE(AUTOMATIC);


// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
 80a1528:	4a0b      	ldr	r2, [pc, #44]	; (80a1558 <_GLOBAL__sub_I_high1+0xa0>)
 80a152a:	490e      	ldr	r1, [pc, #56]	; (80a1564 <_GLOBAL__sub_I_high1+0xac>)
 80a152c:	480c      	ldr	r0, [pc, #48]	; (80a1560 <_GLOBAL__sub_I_high1+0xa8>)
 80a152e:	f002 bccd 	b.w	80a3ecc <__aeabi_atexit>
 80a1532:	bf00      	nop
 80a1534:	200003a8 	.word	0x200003a8
 80a1538:	20000408 	.word	0x20000408
 80a153c:	200003c0 	.word	0x200003c0
 80a1540:	200003d8 	.word	0x200003d8
 80a1544:	20000370 	.word	0x20000370
 80a1548:	200003f0 	.word	0x200003f0
 80a154c:	200003a4 	.word	0x200003a4
 80a1550:	080a521e 	.word	0x080a521e
 80a1554:	20000394 	.word	0x20000394
 80a1558:	20000364 	.word	0x20000364
 80a155c:	080a35e7 	.word	0x080a35e7
 80a1560:	20000380 	.word	0x20000380
 80a1564:	080a2141 	.word	0x080a2141

080a1568 <_ZN7TwoWire5writeEm>:
  virtual int peek(void);
  virtual void flush(void);
  void onReceive(void (*)(int));
  void onRequest(void (*)(void));

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
 80a1568:	6803      	ldr	r3, [r0, #0]
 80a156a:	b2c9      	uxtb	r1, r1
 80a156c:	689b      	ldr	r3, [r3, #8]
 80a156e:	4718      	bx	r3

080a1570 <_ZN7TwoWire5writeEi>:
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a1570:	6803      	ldr	r3, [r0, #0]
 80a1572:	b2c9      	uxtb	r1, r1
 80a1574:	689b      	ldr	r3, [r3, #8]
 80a1576:	4718      	bx	r3

080a1578 <_ZN7VL53L0XC1Ev>:
// Constructors ////////////////////////////////////////////////////////////////

VL53L0X::VL53L0X(void)
  : address(ADDRESS_DEFAULT)
  , io_timeout(0) // no timeout
  , did_timeout(false)
 80a1578:	2229      	movs	r2, #41	; 0x29
 80a157a:	7042      	strb	r2, [r0, #1]
 80a157c:	2200      	movs	r2, #0
 80a157e:	6042      	str	r2, [r0, #4]
 80a1580:	7202      	strb	r2, [r0, #8]
{
}
 80a1582:	4770      	bx	lr

080a1584 <_ZN7VL53L0X8writeRegEhh>:
  return true;
}

// Write an 8-bit register
void VL53L0X::writeReg(uint8_t reg, uint8_t value)
{
 80a1584:	b570      	push	{r4, r5, r6, lr}
 80a1586:	4604      	mov	r4, r0
 80a1588:	4615      	mov	r5, r2
 80a158a:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a158c:	f002 fc7e 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a1590:	7861      	ldrb	r1, [r4, #1]
 80a1592:	f002 fbba 	bl	80a3d0a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a1596:	f002 fc79 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a159a:	6803      	ldr	r3, [r0, #0]
 80a159c:	4631      	mov	r1, r6
 80a159e:	689b      	ldr	r3, [r3, #8]
 80a15a0:	4798      	blx	r3
  Wire.write(value);
 80a15a2:	f002 fc73 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a15a6:	6803      	ldr	r3, [r0, #0]
 80a15a8:	4629      	mov	r1, r5
 80a15aa:	689b      	ldr	r3, [r3, #8]
 80a15ac:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a15ae:	f002 fc6d 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a15b2:	f002 fbb2 	bl	80a3d1a <_ZN7TwoWire15endTransmissionEv>
 80a15b6:	7020      	strb	r0, [r4, #0]
 80a15b8:	bd70      	pop	{r4, r5, r6, pc}

080a15ba <_ZN7VL53L0X10setAddressEh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void VL53L0X::setAddress(uint8_t new_addr)
{
 80a15ba:	b538      	push	{r3, r4, r5, lr}
 80a15bc:	4605      	mov	r5, r0
 80a15be:	460c      	mov	r4, r1
  writeReg(I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 80a15c0:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80a15c4:	218a      	movs	r1, #138	; 0x8a
 80a15c6:	f7ff ffdd 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  address = new_addr;
 80a15ca:	706c      	strb	r4, [r5, #1]
 80a15cc:	bd38      	pop	{r3, r4, r5, pc}

080a15ce <_ZN7VL53L0X13writeReg16BitEht>:
  last_status = Wire.endTransmission();
}

// Write a 16-bit register
void VL53L0X::writeReg16Bit(uint8_t reg, uint16_t value)
{
 80a15ce:	b570      	push	{r4, r5, r6, lr}
 80a15d0:	4604      	mov	r4, r0
 80a15d2:	4615      	mov	r5, r2
 80a15d4:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a15d6:	f002 fc59 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a15da:	7861      	ldrb	r1, [r4, #1]
 80a15dc:	f002 fb95 	bl	80a3d0a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a15e0:	f002 fc54 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a15e4:	6803      	ldr	r3, [r0, #0]
 80a15e6:	4631      	mov	r1, r6
 80a15e8:	689b      	ldr	r3, [r3, #8]
 80a15ea:	4798      	blx	r3
  Wire.write((value >> 8) & 0xFF); // value high byte
 80a15ec:	f002 fc4e 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a15f0:	0a29      	lsrs	r1, r5, #8
 80a15f2:	f7ff ffbd 	bl	80a1570 <_ZN7TwoWire5writeEi>
  Wire.write( value       & 0xFF); // value low byte
 80a15f6:	f002 fc49 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a15fa:	b2e9      	uxtb	r1, r5
 80a15fc:	f7ff ffb8 	bl	80a1570 <_ZN7TwoWire5writeEi>
  last_status = Wire.endTransmission();
 80a1600:	f002 fc44 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a1604:	f002 fb89 	bl	80a3d1a <_ZN7TwoWire15endTransmissionEv>
 80a1608:	7020      	strb	r0, [r4, #0]
 80a160a:	bd70      	pop	{r4, r5, r6, pc}

080a160c <_ZN7VL53L0X13writeReg32BitEhm>:
}

// Write a 32-bit register
void VL53L0X::writeReg32Bit(uint8_t reg, uint32_t value)
{
 80a160c:	b570      	push	{r4, r5, r6, lr}
 80a160e:	4605      	mov	r5, r0
 80a1610:	4614      	mov	r4, r2
 80a1612:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a1614:	f002 fc3a 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a1618:	7869      	ldrb	r1, [r5, #1]
 80a161a:	f002 fb76 	bl	80a3d0a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a161e:	f002 fc35 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a1622:	6803      	ldr	r3, [r0, #0]
 80a1624:	4631      	mov	r1, r6
 80a1626:	689b      	ldr	r3, [r3, #8]
 80a1628:	4798      	blx	r3
  Wire.write((value >> 24) & 0xFF); // value highest byte
 80a162a:	f002 fc2f 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a162e:	0e21      	lsrs	r1, r4, #24
 80a1630:	f7ff ff9a 	bl	80a1568 <_ZN7TwoWire5writeEm>
  Wire.write((value >> 16) & 0xFF);
 80a1634:	f002 fc2a 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a1638:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80a163c:	f7ff ff94 	bl	80a1568 <_ZN7TwoWire5writeEm>
  Wire.write((value >>  8) & 0xFF);
 80a1640:	f002 fc24 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a1644:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80a1648:	f7ff ff8e 	bl	80a1568 <_ZN7TwoWire5writeEm>
  Wire.write( value        & 0xFF); // value lowest byte
 80a164c:	f002 fc1e 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a1650:	b2e1      	uxtb	r1, r4
 80a1652:	f7ff ff89 	bl	80a1568 <_ZN7TwoWire5writeEm>
  last_status = Wire.endTransmission();
 80a1656:	f002 fc19 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a165a:	f002 fb5e 	bl	80a3d1a <_ZN7TwoWire15endTransmissionEv>
 80a165e:	7028      	strb	r0, [r5, #0]
 80a1660:	bd70      	pop	{r4, r5, r6, pc}

080a1662 <_ZN7VL53L0X7readRegEh>:
}

// Read an 8-bit register
uint8_t VL53L0X::readReg(uint8_t reg)
{
 80a1662:	b538      	push	{r3, r4, r5, lr}
 80a1664:	4604      	mov	r4, r0
 80a1666:	460d      	mov	r5, r1
  uint8_t value;

  Wire.beginTransmission(address);
 80a1668:	f002 fc10 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a166c:	7861      	ldrb	r1, [r4, #1]
 80a166e:	f002 fb4c 	bl	80a3d0a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a1672:	f002 fc0b 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a1676:	6803      	ldr	r3, [r0, #0]
 80a1678:	4629      	mov	r1, r5
 80a167a:	689b      	ldr	r3, [r3, #8]
 80a167c:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a167e:	f002 fc05 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a1682:	f002 fb4a 	bl	80a3d1a <_ZN7TwoWire15endTransmissionEv>
 80a1686:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)1);
 80a1688:	f002 fc00 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a168c:	2201      	movs	r2, #1
 80a168e:	7861      	ldrb	r1, [r4, #1]
 80a1690:	f002 fb33 	bl	80a3cfa <_ZN7TwoWire11requestFromEhh>
  value = Wire.read();
 80a1694:	f002 fbfa 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a1698:	6803      	ldr	r3, [r0, #0]
 80a169a:	695b      	ldr	r3, [r3, #20]
 80a169c:	4798      	blx	r3

  return value;
}
 80a169e:	b2c0      	uxtb	r0, r0
 80a16a0:	bd38      	pop	{r3, r4, r5, pc}

080a16a2 <_ZN7VL53L0X12readReg16BitEh>:

// Read a 16-bit register
uint16_t VL53L0X::readReg16Bit(uint8_t reg)
{
 80a16a2:	b538      	push	{r3, r4, r5, lr}
 80a16a4:	4604      	mov	r4, r0
 80a16a6:	460d      	mov	r5, r1
  uint16_t value;

  Wire.beginTransmission(address);
 80a16a8:	f002 fbf0 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a16ac:	7861      	ldrb	r1, [r4, #1]
 80a16ae:	f002 fb2c 	bl	80a3d0a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a16b2:	f002 fbeb 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a16b6:	6803      	ldr	r3, [r0, #0]
 80a16b8:	4629      	mov	r1, r5
 80a16ba:	689b      	ldr	r3, [r3, #8]
 80a16bc:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a16be:	f002 fbe5 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a16c2:	f002 fb2a 	bl	80a3d1a <_ZN7TwoWire15endTransmissionEv>
 80a16c6:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)2);
 80a16c8:	f002 fbe0 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a16cc:	7861      	ldrb	r1, [r4, #1]
 80a16ce:	2202      	movs	r2, #2
 80a16d0:	f002 fb13 	bl	80a3cfa <_ZN7TwoWire11requestFromEhh>
  value  = (uint16_t)Wire.read() << 8; // value high byte
 80a16d4:	f002 fbda 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a16d8:	6803      	ldr	r3, [r0, #0]
 80a16da:	695b      	ldr	r3, [r3, #20]
 80a16dc:	4798      	blx	r3
 80a16de:	4604      	mov	r4, r0
  value |=           Wire.read();      // value low byte
 80a16e0:	f002 fbd4 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a16e4:	6803      	ldr	r3, [r0, #0]
 80a16e6:	695b      	ldr	r3, [r3, #20]
 80a16e8:	4798      	blx	r3
 80a16ea:	ea40 2004 	orr.w	r0, r0, r4, lsl #8

  return value;
}
 80a16ee:	b280      	uxth	r0, r0
 80a16f0:	bd38      	pop	{r3, r4, r5, pc}

080a16f2 <_ZN7VL53L0X10writeMultiEhPKhh>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
 80a16f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a16f4:	4606      	mov	r6, r0
 80a16f6:	4614      	mov	r4, r2
 80a16f8:	461d      	mov	r5, r3
 80a16fa:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a16fc:	f002 fbc6 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a1700:	7871      	ldrb	r1, [r6, #1]
 80a1702:	f002 fb02 	bl	80a3d0a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a1706:	f002 fbc1 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a170a:	6803      	ldr	r3, [r0, #0]
 80a170c:	4639      	mov	r1, r7
 80a170e:	689b      	ldr	r3, [r3, #8]
 80a1710:	4798      	blx	r3
 80a1712:	4425      	add	r5, r4

  while (count-- > 0)
 80a1714:	42ac      	cmp	r4, r5
 80a1716:	d007      	beq.n	80a1728 <_ZN7VL53L0X10writeMultiEhPKhh+0x36>
  {
    Wire.write(*(src++));
 80a1718:	f002 fbb8 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a171c:	6803      	ldr	r3, [r0, #0]
 80a171e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1722:	689b      	ldr	r3, [r3, #8]
 80a1724:	4798      	blx	r3
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
  Wire.beginTransmission(address);
  Wire.write(reg);

  while (count-- > 0)
 80a1726:	e7f5      	b.n	80a1714 <_ZN7VL53L0X10writeMultiEhPKhh+0x22>
  {
    Wire.write(*(src++));
  }

  last_status = Wire.endTransmission();
 80a1728:	f002 fbb0 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a172c:	f002 faf5 	bl	80a3d1a <_ZN7TwoWire15endTransmissionEv>
 80a1730:	7030      	strb	r0, [r6, #0]
 80a1732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1734 <_ZN7VL53L0X9readMultiEhPhh>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void VL53L0X::readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 80a1734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1736:	4606      	mov	r6, r0
 80a1738:	4614      	mov	r4, r2
 80a173a:	461d      	mov	r5, r3
 80a173c:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a173e:	f002 fba5 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a1742:	7871      	ldrb	r1, [r6, #1]
 80a1744:	f002 fae1 	bl	80a3d0a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a1748:	f002 fba0 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a174c:	6803      	ldr	r3, [r0, #0]
 80a174e:	4639      	mov	r1, r7
 80a1750:	689b      	ldr	r3, [r3, #8]
 80a1752:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a1754:	f002 fb9a 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a1758:	f002 fadf 	bl	80a3d1a <_ZN7TwoWire15endTransmissionEv>
 80a175c:	7030      	strb	r0, [r6, #0]

  Wire.requestFrom(address, count);
 80a175e:	f002 fb95 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a1762:	462a      	mov	r2, r5
 80a1764:	7871      	ldrb	r1, [r6, #1]
 80a1766:	f002 fac8 	bl	80a3cfa <_ZN7TwoWire11requestFromEhh>
 80a176a:	4425      	add	r5, r4

  while (count-- > 0)
 80a176c:	42ac      	cmp	r4, r5
 80a176e:	d007      	beq.n	80a1780 <_ZN7VL53L0X9readMultiEhPhh+0x4c>
  {
    *(dst++) = Wire.read();
 80a1770:	f002 fb8c 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a1774:	6803      	ldr	r3, [r0, #0]
 80a1776:	695b      	ldr	r3, [r3, #20]
 80a1778:	4798      	blx	r3
 80a177a:	f804 0b01 	strb.w	r0, [r4], #1
  Wire.write(reg);
  last_status = Wire.endTransmission();

  Wire.requestFrom(address, count);

  while (count-- > 0)
 80a177e:	e7f5      	b.n	80a176c <_ZN7VL53L0X9readMultiEhPhh+0x38>
 80a1780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1782:	0000      	movs	r0, r0
 80a1784:	0000      	movs	r0, r0
	...

080a1788 <_ZN7VL53L0X18setSignalRateLimitEf>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
 80a1788:	b570      	push	{r4, r5, r6, lr}
 80a178a:	460d      	mov	r5, r1
 80a178c:	4606      	mov	r6, r0
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a178e:	2100      	movs	r1, #0
 80a1790:	4628      	mov	r0, r5
 80a1792:	f003 fc37 	bl	80a5004 <__aeabi_fcmplt>
 80a1796:	b9b0      	cbnz	r0, 80a17c6 <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>
 80a1798:	4628      	mov	r0, r5
 80a179a:	f002 fe49 	bl	80a4430 <__aeabi_f2d>
 80a179e:	a30c      	add	r3, pc, #48	; (adr r3, 80a17d0 <_ZN7VL53L0X18setSignalRateLimitEf+0x48>)
 80a17a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a17a4:	f003 f928 	bl	80a49f8 <__aeabi_dcmpgt>
 80a17a8:	b968      	cbnz	r0, 80a17c6 <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80a17aa:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80a17ae:	4628      	mov	r0, r5
 80a17b0:	f003 fa8a 	bl	80a4cc8 <__aeabi_fmul>
 80a17b4:	f003 fc4e 	bl	80a5054 <__aeabi_f2uiz>
 80a17b8:	2144      	movs	r1, #68	; 0x44
 80a17ba:	b282      	uxth	r2, r0
 80a17bc:	4630      	mov	r0, r6
 80a17be:	f7ff ff06 	bl	80a15ce <_ZN7VL53L0X13writeReg16BitEht>
 80a17c2:	2001      	movs	r0, #1
 80a17c4:	bd70      	pop	{r4, r5, r6, pc}
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a17c6:	2000      	movs	r0, #0
 80a17c8:	bd70      	pop	{r4, r5, r6, pc}
 80a17ca:	bf00      	nop
 80a17cc:	f3af 8000 	nop.w
 80a17d0:	0a3d70a4 	.word	0x0a3d70a4
 80a17d4:	407fffd7 	.word	0x407fffd7

080a17d8 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>:
}

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t VL53L0X::getVcselPulsePeriod(vcselPeriodType type)
{
 80a17d8:	b508      	push	{r3, lr}
  if (type == VcselPeriodPreRange)
 80a17da:	b909      	cbnz	r1, 80a17e0 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x8>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80a17dc:	2150      	movs	r1, #80	; 0x50
 80a17de:	e002      	b.n	80a17e6 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0xe>
  }
  else if (type == VcselPeriodFinalRange)
 80a17e0:	2901      	cmp	r1, #1
 80a17e2:	d106      	bne.n	80a17f2 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x1a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a17e4:	2170      	movs	r1, #112	; 0x70
 80a17e6:	f7ff ff3c 	bl	80a1662 <_ZN7VL53L0X7readRegEh>
 80a17ea:	3001      	adds	r0, #1
 80a17ec:	0040      	lsls	r0, r0, #1
 80a17ee:	b2c0      	uxtb	r0, r0
 80a17f0:	bd08      	pop	{r3, pc}
  }
  else { return 255; }
 80a17f2:	20ff      	movs	r0, #255	; 0xff
}
 80a17f4:	bd08      	pop	{r3, pc}

080a17f6 <_ZN7VL53L0X15startContinuousEm>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X::startContinuous(uint32_t period_ms)
{
 80a17f6:	b538      	push	{r3, r4, r5, lr}
 80a17f8:	4604      	mov	r4, r0
 80a17fa:	460d      	mov	r5, r1
  writeReg(0x80, 0x01);
 80a17fc:	2201      	movs	r2, #1
 80a17fe:	2180      	movs	r1, #128	; 0x80
 80a1800:	f7ff fec0 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a1804:	2201      	movs	r2, #1
 80a1806:	21ff      	movs	r1, #255	; 0xff
 80a1808:	4620      	mov	r0, r4
 80a180a:	f7ff febb 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a180e:	2200      	movs	r2, #0
 80a1810:	4611      	mov	r1, r2
 80a1812:	4620      	mov	r0, r4
 80a1814:	f7ff feb6 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x91, stop_variable);
 80a1818:	7c22      	ldrb	r2, [r4, #16]
 80a181a:	2191      	movs	r1, #145	; 0x91
 80a181c:	4620      	mov	r0, r4
 80a181e:	f7ff feb1 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a1822:	2201      	movs	r2, #1
 80a1824:	2100      	movs	r1, #0
 80a1826:	4620      	mov	r0, r4
 80a1828:	f7ff feac 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a182c:	2200      	movs	r2, #0
 80a182e:	21ff      	movs	r1, #255	; 0xff
 80a1830:	4620      	mov	r0, r4
 80a1832:	f7ff fea7 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a1836:	2200      	movs	r2, #0
 80a1838:	2180      	movs	r1, #128	; 0x80
 80a183a:	4620      	mov	r0, r4
 80a183c:	f7ff fea2 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  if (period_ms != 0)
 80a1840:	b16d      	cbz	r5, 80a185e <_ZN7VL53L0X15startContinuousEm+0x68>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 80a1842:	21f8      	movs	r1, #248	; 0xf8
 80a1844:	4620      	mov	r0, r4
 80a1846:	f7ff ff2c 	bl	80a16a2 <_ZN7VL53L0X12readReg16BitEh>

    if (osc_calibrate_val != 0)
 80a184a:	b100      	cbz	r0, 80a184e <_ZN7VL53L0X15startContinuousEm+0x58>
    {
      period_ms *= osc_calibrate_val;
 80a184c:	4345      	muls	r5, r0
    }

    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 80a184e:	462a      	mov	r2, r5
 80a1850:	2104      	movs	r1, #4
 80a1852:	4620      	mov	r0, r4
 80a1854:	f7ff feda 	bl	80a160c <_ZN7VL53L0X13writeReg32BitEhm>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 80a1858:	2204      	movs	r2, #4
 80a185a:	2100      	movs	r1, #0
 80a185c:	e001      	b.n	80a1862 <_ZN7VL53L0X15startContinuousEm+0x6c>
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a185e:	4629      	mov	r1, r5
 80a1860:	2202      	movs	r2, #2
 80a1862:	4620      	mov	r0, r4
  }
}
 80a1864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a1868:	f7ff be8c 	b.w	80a1584 <_ZN7VL53L0X8writeRegEhh>

080a186c <_ZN7VL53L0X30readRangeContinuousMillimetersEv>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t VL53L0X::readRangeContinuousMillimeters(void)
{
 80a186c:	b538      	push	{r3, r4, r5, lr}
 80a186e:	4604      	mov	r4, r0
 80a1870:	f001 fcf6 	bl	80a3260 <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a1874:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a1876:	2113      	movs	r1, #19
 80a1878:	4620      	mov	r0, r4
 80a187a:	f7ff fef2 	bl	80a1662 <_ZN7VL53L0X7readRegEh>
 80a187e:	0743      	lsls	r3, r0, #29
 80a1880:	d10e      	bne.n	80a18a0 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0x34>
  {
    if (checkTimeoutExpired())
 80a1882:	6863      	ldr	r3, [r4, #4]
 80a1884:	2b00      	cmp	r3, #0
 80a1886:	d0f6      	beq.n	80a1876 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
 80a1888:	f001 fcea 	bl	80a3260 <HAL_Timer_Get_Milli_Seconds>
 80a188c:	68e3      	ldr	r3, [r4, #12]
 80a188e:	1ac0      	subs	r0, r0, r3
 80a1890:	6863      	ldr	r3, [r4, #4]
 80a1892:	4298      	cmp	r0, r3
 80a1894:	d9ef      	bls.n	80a1876 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
    {
      did_timeout = true;
 80a1896:	2301      	movs	r3, #1
 80a1898:	7223      	strb	r3, [r4, #8]
      return 65535;
 80a189a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  return range;
}
 80a189e:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);
 80a18a0:	211e      	movs	r1, #30
 80a18a2:	4620      	mov	r0, r4
 80a18a4:	f7ff fefd 	bl	80a16a2 <_ZN7VL53L0X12readReg16BitEh>
 80a18a8:	4605      	mov	r5, r0

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a18aa:	2201      	movs	r2, #1
 80a18ac:	4620      	mov	r0, r4
 80a18ae:	210b      	movs	r1, #11
 80a18b0:	f7ff fe68 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
 80a18b4:	4628      	mov	r0, r5
 80a18b6:	bd38      	pop	{r3, r4, r5, pc}

080a18b8 <_ZN7VL53L0X11getSpadInfoEPhPb>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X::getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80a18b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a18ba:	4604      	mov	r4, r0
 80a18bc:	460f      	mov	r7, r1
 80a18be:	4616      	mov	r6, r2
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80a18c0:	2180      	movs	r1, #128	; 0x80
 80a18c2:	2201      	movs	r2, #1
 80a18c4:	f7ff fe5e 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a18c8:	2201      	movs	r2, #1
 80a18ca:	21ff      	movs	r1, #255	; 0xff
 80a18cc:	4620      	mov	r0, r4
 80a18ce:	f7ff fe59 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a18d2:	2200      	movs	r2, #0
 80a18d4:	4611      	mov	r1, r2
 80a18d6:	4620      	mov	r0, r4
 80a18d8:	f7ff fe54 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x06);
 80a18dc:	2206      	movs	r2, #6
 80a18de:	21ff      	movs	r1, #255	; 0xff
 80a18e0:	4620      	mov	r0, r4
 80a18e2:	f7ff fe4f 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg(0x83) | 0x04);
 80a18e6:	2183      	movs	r1, #131	; 0x83
 80a18e8:	4620      	mov	r0, r4
 80a18ea:	f7ff feba 	bl	80a1662 <_ZN7VL53L0X7readRegEh>
 80a18ee:	f040 0204 	orr.w	r2, r0, #4
 80a18f2:	b2d2      	uxtb	r2, r2
 80a18f4:	2183      	movs	r1, #131	; 0x83
 80a18f6:	4620      	mov	r0, r4
 80a18f8:	f7ff fe44 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x07);
 80a18fc:	2207      	movs	r2, #7
 80a18fe:	21ff      	movs	r1, #255	; 0xff
 80a1900:	4620      	mov	r0, r4
 80a1902:	f7ff fe3f 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x81, 0x01);
 80a1906:	2201      	movs	r2, #1
 80a1908:	2181      	movs	r1, #129	; 0x81
 80a190a:	4620      	mov	r0, r4
 80a190c:	f7ff fe3a 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a1910:	2201      	movs	r2, #1
 80a1912:	2180      	movs	r1, #128	; 0x80
 80a1914:	4620      	mov	r0, r4
 80a1916:	f7ff fe35 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x94, 0x6b);
 80a191a:	226b      	movs	r2, #107	; 0x6b
 80a191c:	2194      	movs	r1, #148	; 0x94
 80a191e:	4620      	mov	r0, r4
 80a1920:	f7ff fe30 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, 0x00);
 80a1924:	2200      	movs	r2, #0
 80a1926:	2183      	movs	r1, #131	; 0x83
 80a1928:	4620      	mov	r0, r4
 80a192a:	f7ff fe2b 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
 80a192e:	f001 fc97 	bl	80a3260 <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a1932:	60e0      	str	r0, [r4, #12]
  while (readReg(0x83) == 0x00)
 80a1934:	2183      	movs	r1, #131	; 0x83
 80a1936:	4620      	mov	r0, r4
 80a1938:	f7ff fe93 	bl	80a1662 <_ZN7VL53L0X7readRegEh>
 80a193c:	4605      	mov	r5, r0
 80a193e:	b958      	cbnz	r0, 80a1958 <_ZN7VL53L0X11getSpadInfoEPhPb+0xa0>
  {
    if (checkTimeoutExpired()) { return false; }
 80a1940:	6863      	ldr	r3, [r4, #4]
 80a1942:	2b00      	cmp	r3, #0
 80a1944:	d0f6      	beq.n	80a1934 <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a1946:	f001 fc8b 	bl	80a3260 <HAL_Timer_Get_Milli_Seconds>
 80a194a:	68e3      	ldr	r3, [r4, #12]
 80a194c:	1ac0      	subs	r0, r0, r3
 80a194e:	6863      	ldr	r3, [r4, #4]
 80a1950:	4298      	cmp	r0, r3
 80a1952:	d9ef      	bls.n	80a1934 <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a1954:	4628      	mov	r0, r5

  writeReg(0xFF, 0x00);
  writeReg(0x80, 0x00);

  return true;
}
 80a1956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  startTimeout();
  while (readReg(0x83) == 0x00)
  {
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
 80a1958:	2201      	movs	r2, #1
 80a195a:	4620      	mov	r0, r4
 80a195c:	2183      	movs	r1, #131	; 0x83
 80a195e:	f7ff fe11 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  tmp = readReg(0x92);
 80a1962:	2192      	movs	r1, #146	; 0x92
 80a1964:	4620      	mov	r0, r4
 80a1966:	f7ff fe7c 	bl	80a1662 <_ZN7VL53L0X7readRegEh>

  *count = tmp & 0x7f;
 80a196a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a196e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
 80a1972:	703b      	strb	r3, [r7, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;

  writeReg(0x81, 0x00);
 80a1974:	2200      	movs	r2, #0
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a1976:	7030      	strb	r0, [r6, #0]

  writeReg(0x81, 0x00);
 80a1978:	2181      	movs	r1, #129	; 0x81
 80a197a:	4620      	mov	r0, r4
 80a197c:	f7ff fe02 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x06);
 80a1980:	2206      	movs	r2, #6
 80a1982:	4620      	mov	r0, r4
 80a1984:	21ff      	movs	r1, #255	; 0xff
 80a1986:	f7ff fdfd 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg( 0x83  & ~0x04));
 80a198a:	2183      	movs	r1, #131	; 0x83
 80a198c:	4620      	mov	r0, r4
 80a198e:	f7ff fe68 	bl	80a1662 <_ZN7VL53L0X7readRegEh>
 80a1992:	2183      	movs	r1, #131	; 0x83
 80a1994:	4602      	mov	r2, r0
 80a1996:	4620      	mov	r0, r4
 80a1998:	f7ff fdf4 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a199c:	4620      	mov	r0, r4
 80a199e:	2201      	movs	r2, #1
 80a19a0:	21ff      	movs	r1, #255	; 0xff
 80a19a2:	f7ff fdef 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a19a6:	4620      	mov	r0, r4
 80a19a8:	2201      	movs	r2, #1
 80a19aa:	2100      	movs	r1, #0
 80a19ac:	f7ff fdea 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a19b0:	4620      	mov	r0, r4
 80a19b2:	2200      	movs	r2, #0
 80a19b4:	21ff      	movs	r1, #255	; 0xff
 80a19b6:	f7ff fde5 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a19ba:	4620      	mov	r0, r4
 80a19bc:	2200      	movs	r2, #0
 80a19be:	2180      	movs	r1, #128	; 0x80
 80a19c0:	f7ff fde0 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  return true;
 80a19c4:	2001      	movs	r0, #1
 80a19c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a19c8 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>:
}

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X::getSequenceStepEnables(SequenceStepEnables * enables)
{
 80a19c8:	b510      	push	{r4, lr}
 80a19ca:	460c      	mov	r4, r1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 80a19cc:	2101      	movs	r1, #1
 80a19ce:	f7ff fe48 	bl	80a1662 <_ZN7VL53L0X7readRegEh>

  enables->tcc          = (sequence_config >> 4) & 0x1;
 80a19d2:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80a19d6:	7023      	strb	r3, [r4, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 80a19d8:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80a19dc:	70a3      	strb	r3, [r4, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 80a19de:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80a19e2:	7063      	strb	r3, [r4, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a19e4:	f3c0 1380 	ubfx	r3, r0, #6, #1
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a19e8:	f3c0 10c0 	ubfx	r0, r0, #7, #1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);

  enables->tcc          = (sequence_config >> 4) & 0x1;
  enables->dss          = (sequence_config >> 3) & 0x1;
  enables->msrc         = (sequence_config >> 2) & 0x1;
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a19ec:	70e3      	strb	r3, [r4, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a19ee:	7120      	strb	r0, [r4, #4]
 80a19f0:	bd10      	pop	{r4, pc}

080a19f2 <_ZN7VL53L0X13decodeTimeoutEm>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X::decodeTimeout(uint32_t reg_val)
{
 80a19f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a19f6:	4298      	cmp	r0, r3
 80a19f8:	bf28      	it	cs
 80a19fa:	4618      	movcs	r0, r3
  if (reg_val > 0xFFFF) reg_val = 0xFFFF;
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80a19fc:	b2c3      	uxtb	r3, r0
 80a19fe:	0a00      	lsrs	r0, r0, #8
 80a1a00:	fa03 f000 	lsl.w	r0, r3, r0
 80a1a04:	3001      	adds	r0, #1
}
 80a1a06:	b280      	uxth	r0, r0
 80a1a08:	4770      	bx	lr

080a1a0a <_ZN7VL53L0X13encodeTimeoutEm>:
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a1a0a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80a1a0e:	d201      	bcs.n	80a1a14 <_ZN7VL53L0X13encodeTimeoutEm+0xa>

  // format: "(LSByte * 2^MSByte) + 1"
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
 80a1a10:	b178      	cbz	r0, 80a1a32 <_ZN7VL53L0X13encodeTimeoutEm+0x28>
 80a1a12:	e001      	b.n	80a1a18 <_ZN7VL53L0X13encodeTimeoutEm+0xe>
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a1a14:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;
 80a1a18:	3801      	subs	r0, #1
 80a1a1a:	2300      	movs	r3, #0

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a1a1c:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 80a1a20:	b29a      	uxth	r2, r3
 80a1a22:	f103 0301 	add.w	r3, r3, #1
 80a1a26:	d001      	beq.n	80a1a2c <_ZN7VL53L0X13encodeTimeoutEm+0x22>
    {
      ls_byte >>= 1;
 80a1a28:	0840      	lsrs	r0, r0, #1

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a1a2a:	e7f7      	b.n	80a1a1c <_ZN7VL53L0X13encodeTimeoutEm+0x12>
    {
      ls_byte >>= 1;
      ms_byte++;
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 80a1a2c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80a1a30:	b280      	uxth	r0, r0
  }
  else { return 0; }
}
 80a1a32:	4770      	bx	lr

080a1a34 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1a34:	4b08      	ldr	r3, [pc, #32]	; (80a1a58 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh+0x24>)

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a1a36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1a3a:	4359      	muls	r1, r3
}

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80a1a3c:	b510      	push	{r4, lr}
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1a3e:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a1a42:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 80a1a46:	fbb1 f3f2 	udiv	r3, r1, r2
 80a1a4a:	fbb1 f1f4 	udiv	r1, r1, r4
 80a1a4e:	fb00 1003 	mla	r0, r0, r3, r1
}
 80a1a52:	fbb0 f0f2 	udiv	r0, r0, r2
 80a1a56:	bd10      	pop	{r4, pc}
 80a1a58:	003a2f00 	.word	0x003a2f00

080a1a5c <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a1a5c:	b570      	push	{r4, r5, r6, lr}
 80a1a5e:	460e      	mov	r6, r1
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a1a60:	2100      	movs	r1, #0
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a1a62:	4614      	mov	r4, r2
 80a1a64:	4605      	mov	r5, r0
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a1a66:	f7ff feb7 	bl	80a17d8 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a1a6a:	2146      	movs	r1, #70	; 0x46
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a1a6c:	8020      	strh	r0, [r4, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a1a6e:	4628      	mov	r0, r5
 80a1a70:	f7ff fdf7 	bl	80a1662 <_ZN7VL53L0X7readRegEh>
 80a1a74:	3001      	adds	r0, #1
 80a1a76:	b280      	uxth	r0, r0
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a1a78:	7821      	ldrb	r1, [r4, #0]
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a1a7a:	80a0      	strh	r0, [r4, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a1a7c:	f7ff ffda 	bl	80a1a34 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a1a80:	2151      	movs	r1, #81	; 0x51
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a1a82:	60e0      	str	r0, [r4, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a1a84:	4628      	mov	r0, r5
 80a1a86:	f7ff fe0c 	bl	80a16a2 <_ZN7VL53L0X12readReg16BitEh>
 80a1a8a:	f7ff ffb2 	bl	80a19f2 <_ZN7VL53L0X13decodeTimeoutEm>
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a1a8e:	7821      	ldrb	r1, [r4, #0]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a1a90:	80e0      	strh	r0, [r4, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a1a92:	f7ff ffcf 	bl	80a1a34 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a1a96:	2170      	movs	r1, #112	; 0x70

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a1a98:	6120      	str	r0, [r4, #16]
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a1a9a:	4628      	mov	r0, r5
 80a1a9c:	f7ff fde1 	bl	80a1662 <_ZN7VL53L0X7readRegEh>
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 80a1aa0:	3001      	adds	r0, #1
 80a1aa2:	0040      	lsls	r0, r0, #1
 80a1aa4:	b2c0      	uxtb	r0, r0
 80a1aa6:	8060      	strh	r0, [r4, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a1aa8:	2171      	movs	r1, #113	; 0x71
 80a1aaa:	4628      	mov	r0, r5
 80a1aac:	f7ff fdf9 	bl	80a16a2 <_ZN7VL53L0X12readReg16BitEh>
 80a1ab0:	f7ff ff9f 	bl	80a19f2 <_ZN7VL53L0X13decodeTimeoutEm>
 80a1ab4:	8120      	strh	r0, [r4, #8]

  if (enables->pre_range)
 80a1ab6:	78f3      	ldrb	r3, [r6, #3]
 80a1ab8:	b113      	cbz	r3, 80a1ac0 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE+0x64>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 80a1aba:	88e3      	ldrh	r3, [r4, #6]
 80a1abc:	1ac0      	subs	r0, r0, r3
 80a1abe:	8120      	strh	r0, [r4, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 80a1ac0:	78a1      	ldrb	r1, [r4, #2]
 80a1ac2:	8920      	ldrh	r0, [r4, #8]
 80a1ac4:	f7ff ffb6 	bl	80a1a34 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->final_range_vcsel_period_pclks);
 80a1ac8:	6160      	str	r0, [r4, #20]
 80a1aca:	bd70      	pop	{r4, r5, r6, pc}

080a1acc <_ZN7VL53L0X26getMeasurementTimingBudgetEv>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t VL53L0X::getMeasurementTimingBudget(void)
{
 80a1acc:	b510      	push	{r4, lr}
 80a1ace:	4604      	mov	r4, r0
 80a1ad0:	b088      	sub	sp, #32
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a1ad2:	4669      	mov	r1, sp
 80a1ad4:	f7ff ff78 	bl	80a19c8 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a1ad8:	aa02      	add	r2, sp, #8
 80a1ada:	4669      	mov	r1, sp
 80a1adc:	4620      	mov	r0, r4
 80a1ade:	f7ff ffbd 	bl	80a1a5c <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a1ae2:	f89d 3000 	ldrb.w	r3, [sp]
 80a1ae6:	b11b      	cbz	r3, 80a1af0 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x24>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a1ae8:	9805      	ldr	r0, [sp, #20]
 80a1aea:	f600 5084 	addw	r0, r0, #3460	; 0xd84
 80a1aee:	e001      	b.n	80a1af4 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x28>
  uint16_t const DssOverhead        = 690;
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80a1af0:	f640 3036 	movw	r0, #2870	; 0xb36
  if (enables.tcc)
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a1af4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a1af8:	b12b      	cbz	r3, 80a1b06 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x3a>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a1afa:	9b05      	ldr	r3, [sp, #20]
 80a1afc:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a1b00:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a1b04:	e006      	b.n	80a1b14 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  }
  else if (enables.msrc)
 80a1b06:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a1b0a:	b11b      	cbz	r3, 80a1b14 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a1b0c:	9b05      	ldr	r3, [sp, #20]
 80a1b0e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a1b12:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a1b14:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80a1b18:	b11b      	cbz	r3, 80a1b22 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x56>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a1b1a:	9b06      	ldr	r3, [sp, #24]
 80a1b1c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a1b20:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a1b22:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a1b26:	b11b      	cbz	r3, 80a1b30 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x64>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80a1b28:	9b07      	ldr	r3, [sp, #28]
 80a1b2a:	f203 2326 	addw	r3, r3, #550	; 0x226
 80a1b2e:	4418      	add	r0, r3
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 80a1b30:	6160      	str	r0, [r4, #20]
  return budget_us;
}
 80a1b32:	b008      	add	sp, #32
 80a1b34:	bd10      	pop	{r4, pc}
	...

080a1b38 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1b38:	4b08      	ldr	r3, [pc, #32]	; (80a1b5c <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh+0x24>)

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a1b3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1b3e:	4359      	muls	r1, r3

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a1b40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1b44:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a1b48:	fbb1 f3f3 	udiv	r3, r1, r3
 80a1b4c:	fbb1 f1f2 	udiv	r1, r1, r2
 80a1b50:	fb02 3000 	mla	r0, r2, r0, r3
}
 80a1b54:	fbb0 f0f1 	udiv	r0, r0, r1
 80a1b58:	4770      	bx	lr
 80a1b5a:	bf00      	nop
 80a1b5c:	003a2f00 	.word	0x003a2f00

080a1b60 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>:
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a1b60:	f644 631f 	movw	r3, #19999	; 0x4e1f
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a1b64:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a1b66:	4299      	cmp	r1, r3
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a1b68:	b089      	sub	sp, #36	; 0x24
 80a1b6a:	4606      	mov	r6, r0
 80a1b6c:	460d      	mov	r5, r1
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a1b6e:	d942      	bls.n	80a1bf6 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>

  uint32_t used_budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a1b70:	4669      	mov	r1, sp
 80a1b72:	f7ff ff29 	bl	80a19c8 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a1b76:	aa02      	add	r2, sp, #8
 80a1b78:	4669      	mov	r1, sp
 80a1b7a:	4630      	mov	r0, r6
 80a1b7c:	f7ff ff6e 	bl	80a1a5c <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a1b80:	f89d 3000 	ldrb.w	r3, [sp]
 80a1b84:	b11b      	cbz	r3, 80a1b8e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x2e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a1b86:	9805      	ldr	r0, [sp, #20]
 80a1b88:	f600 3036 	addw	r0, r0, #2870	; 0xb36
 80a1b8c:	e001      	b.n	80a1b92 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x32>

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80a1b8e:	f640 00e8 	movw	r0, #2280	; 0x8e8
  if (enables.tcc)
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a1b92:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a1b96:	b12b      	cbz	r3, 80a1ba4 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x44>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a1b98:	9b05      	ldr	r3, [sp, #20]
 80a1b9a:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a1b9e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a1ba2:	e006      	b.n	80a1bb2 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  }
  else if (enables.msrc)
 80a1ba4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a1ba8:	b11b      	cbz	r3, 80a1bb2 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a1baa:	9b05      	ldr	r3, [sp, #20]
 80a1bac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a1bb0:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a1bb2:	f89d 7003 	ldrb.w	r7, [sp, #3]
 80a1bb6:	b11f      	cbz	r7, 80a1bc0 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x60>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a1bb8:	9b06      	ldr	r3, [sp, #24]
 80a1bba:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a1bbe:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a1bc0:	f89d 4004 	ldrb.w	r4, [sp, #4]
 80a1bc4:	b1ac      	cbz	r4, 80a1bf2 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x92>
  {
    used_budget_us += FinalRangeOverhead;
 80a1bc6:	f200 2026 	addw	r0, r0, #550	; 0x226
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80a1bca:	4285      	cmp	r5, r0
 80a1bcc:	d313      	bcc.n	80a1bf6 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint32_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80a1bce:	f89d 100a 	ldrb.w	r1, [sp, #10]
 80a1bd2:	1a28      	subs	r0, r5, r0
 80a1bd4:	f7ff ffb0 	bl	80a1b38 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>

    if (enables.pre_range)
 80a1bd8:	b117      	cbz	r7, 80a1be0 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x80>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80a1bda:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80a1bde:	4418      	add	r0, r3
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80a1be0:	f7ff ff13 	bl	80a1a0a <_ZN7VL53L0X13encodeTimeoutEm>
      encodeTimeout(final_range_timeout_mclks));
 80a1be4:	2171      	movs	r1, #113	; 0x71
 80a1be6:	4602      	mov	r2, r0
 80a1be8:	4630      	mov	r0, r6
 80a1bea:	f7ff fcf0 	bl	80a15ce <_ZN7VL53L0X13writeReg16BitEht>

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 80a1bee:	6175      	str	r5, [r6, #20]
 80a1bf0:	e002      	b.n	80a1bf8 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  }
  return true;
 80a1bf2:	2401      	movs	r4, #1
 80a1bf4:	e000      	b.n	80a1bf8 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a1bf6:	2400      	movs	r4, #0
    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
  }
  return true;
}
 80a1bf8:	4620      	mov	r0, r4
 80a1bfa:	b009      	add	sp, #36	; 0x24
 80a1bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1bfe <_ZN7VL53L0X27performSingleRefCalibrationEh>:
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a1bfe:	b538      	push	{r3, r4, r5, lr}
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a1c00:	f041 0201 	orr.w	r2, r1, #1
 80a1c04:	2100      	movs	r1, #0
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a1c06:	4604      	mov	r4, r0
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a1c08:	f7ff fcbc 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
 80a1c0c:	f001 fb28 	bl	80a3260 <HAL_Timer_Get_Milli_Seconds>

  startTimeout();
 80a1c10:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a1c12:	2113      	movs	r1, #19
 80a1c14:	4620      	mov	r0, r4
 80a1c16:	f7ff fd24 	bl	80a1662 <_ZN7VL53L0X7readRegEh>
 80a1c1a:	f010 0507 	ands.w	r5, r0, #7
 80a1c1e:	d10b      	bne.n	80a1c38 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x3a>
  {
    if (checkTimeoutExpired()) { return false; }
 80a1c20:	6863      	ldr	r3, [r4, #4]
 80a1c22:	2b00      	cmp	r3, #0
 80a1c24:	d0f5      	beq.n	80a1c12 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a1c26:	f001 fb1b 	bl	80a3260 <HAL_Timer_Get_Milli_Seconds>
 80a1c2a:	68e3      	ldr	r3, [r4, #12]
 80a1c2c:	1ac0      	subs	r0, r0, r3
 80a1c2e:	6863      	ldr	r3, [r4, #4]
 80a1c30:	4298      	cmp	r0, r3
 80a1c32:	d9ee      	bls.n	80a1c12 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a1c34:	4628      	mov	r0, r5
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  writeReg(SYSRANGE_START, 0x00);

  return true;
}
 80a1c36:	bd38      	pop	{r3, r4, r5, pc}
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
  {
    if (checkTimeoutExpired()) { return false; }
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a1c38:	4620      	mov	r0, r4
 80a1c3a:	2201      	movs	r2, #1
 80a1c3c:	210b      	movs	r1, #11
 80a1c3e:	f7ff fca1 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  writeReg(SYSRANGE_START, 0x00);
 80a1c42:	2200      	movs	r2, #0
 80a1c44:	4620      	mov	r0, r4
 80a1c46:	4611      	mov	r1, r2
 80a1c48:	f7ff fc9c 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
 80a1c4c:	2001      	movs	r0, #1
 80a1c4e:	bd38      	pop	{r3, r4, r5, pc}

080a1c50 <_ZN7VL53L0X4initEb>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool VL53L0X::init(bool io_2v8)
{
 80a1c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1c52:	4604      	mov	r4, r0
 80a1c54:	b085      	sub	sp, #20
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 80a1c56:	b149      	cbz	r1, 80a1c6c <_ZN7VL53L0X4initEb+0x1c>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 80a1c58:	2189      	movs	r1, #137	; 0x89
 80a1c5a:	f7ff fd02 	bl	80a1662 <_ZN7VL53L0X7readRegEh>
 80a1c5e:	f040 0201 	orr.w	r2, r0, #1
 80a1c62:	b2d2      	uxtb	r2, r2
 80a1c64:	2189      	movs	r1, #137	; 0x89
 80a1c66:	4620      	mov	r0, r4
 80a1c68:	f7ff fc8c 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 80a1c6c:	2200      	movs	r2, #0
 80a1c6e:	2188      	movs	r1, #136	; 0x88
 80a1c70:	4620      	mov	r0, r4
 80a1c72:	f7ff fc87 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a1c76:	2201      	movs	r2, #1
 80a1c78:	2180      	movs	r1, #128	; 0x80
 80a1c7a:	4620      	mov	r0, r4
 80a1c7c:	f7ff fc82 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a1c80:	2201      	movs	r2, #1
 80a1c82:	21ff      	movs	r1, #255	; 0xff
 80a1c84:	4620      	mov	r0, r4
 80a1c86:	f7ff fc7d 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a1c8a:	2200      	movs	r2, #0
 80a1c8c:	4611      	mov	r1, r2
 80a1c8e:	4620      	mov	r0, r4
 80a1c90:	f7ff fc78 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  stop_variable = readReg(0x91);
 80a1c94:	2191      	movs	r1, #145	; 0x91
 80a1c96:	4620      	mov	r0, r4
 80a1c98:	f7ff fce3 	bl	80a1662 <_ZN7VL53L0X7readRegEh>
  writeReg(0x00, 0x01);
 80a1c9c:	2201      	movs	r2, #1
  writeReg(0x88, 0x00);

  writeReg(0x80, 0x01);
  writeReg(0xFF, 0x01);
  writeReg(0x00, 0x00);
  stop_variable = readReg(0x91);
 80a1c9e:	7420      	strb	r0, [r4, #16]
  writeReg(0x00, 0x01);
 80a1ca0:	2100      	movs	r1, #0
 80a1ca2:	4620      	mov	r0, r4
 80a1ca4:	f7ff fc6e 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1ca8:	2200      	movs	r2, #0
 80a1caa:	21ff      	movs	r1, #255	; 0xff
 80a1cac:	4620      	mov	r0, r4
 80a1cae:	f7ff fc69 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a1cb2:	2200      	movs	r2, #0
 80a1cb4:	2180      	movs	r1, #128	; 0x80
 80a1cb6:	4620      	mov	r0, r4
 80a1cb8:	f7ff fc64 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80a1cbc:	2160      	movs	r1, #96	; 0x60
 80a1cbe:	4620      	mov	r0, r4
 80a1cc0:	f7ff fccf 	bl	80a1662 <_ZN7VL53L0X7readRegEh>
 80a1cc4:	f040 0212 	orr.w	r2, r0, #18
 80a1cc8:	b2d2      	uxtb	r2, r2
 80a1cca:	2160      	movs	r1, #96	; 0x60
 80a1ccc:	4620      	mov	r0, r4
 80a1cce:	f7ff fc59 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80a1cd2:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a1cd6:	4620      	mov	r0, r4
 80a1cd8:	f7ff fd56 	bl	80a1788 <_ZN7VL53L0X18setSignalRateLimitEf>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80a1cdc:	22ff      	movs	r2, #255	; 0xff
 80a1cde:	2101      	movs	r1, #1
 80a1ce0:	4620      	mov	r0, r4
 80a1ce2:	f7ff fc4f 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80a1ce6:	f10d 0207 	add.w	r2, sp, #7
 80a1cea:	f10d 0106 	add.w	r1, sp, #6
 80a1cee:	4620      	mov	r0, r4
 80a1cf0:	f7ff fde2 	bl	80a18b8 <_ZN7VL53L0X11getSpadInfoEPhPb>
 80a1cf4:	b908      	cbnz	r0, 80a1cfa <_ZN7VL53L0X4initEb+0xaa>
 80a1cf6:	2500      	movs	r5, #0
 80a1cf8:	e21d      	b.n	80a2136 <_ZN7VL53L0X4initEb+0x4e6>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a1cfa:	2306      	movs	r3, #6
 80a1cfc:	aa02      	add	r2, sp, #8
 80a1cfe:	21b0      	movs	r1, #176	; 0xb0
 80a1d00:	4620      	mov	r0, r4
 80a1d02:	f7ff fd17 	bl	80a1734 <_ZN7VL53L0X9readMultiEhPhh>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 80a1d06:	2201      	movs	r2, #1
 80a1d08:	21ff      	movs	r1, #255	; 0xff
 80a1d0a:	4620      	mov	r0, r4
 80a1d0c:	f7ff fc3a 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80a1d10:	2200      	movs	r2, #0
 80a1d12:	214f      	movs	r1, #79	; 0x4f
 80a1d14:	4620      	mov	r0, r4
 80a1d16:	f7ff fc35 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80a1d1a:	222c      	movs	r2, #44	; 0x2c
 80a1d1c:	214e      	movs	r1, #78	; 0x4e
 80a1d1e:	4620      	mov	r0, r4
 80a1d20:	f7ff fc30 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1d24:	2200      	movs	r2, #0
 80a1d26:	21ff      	movs	r1, #255	; 0xff
 80a1d28:	4620      	mov	r0, r4
 80a1d2a:	f7ff fc2b 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1d2e:	2500      	movs	r5, #0

  writeReg(0xFF, 0x01);
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80a1d30:	4620      	mov	r0, r4
 80a1d32:	21b6      	movs	r1, #182	; 0xb6
 80a1d34:	22b4      	movs	r2, #180	; 0xb4
 80a1d36:	f7ff fc25 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;
 80a1d3a:	4629      	mov	r1, r5
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a1d3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1d40:	f89d 6006 	ldrb.w	r6, [sp, #6]
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a1d44:	2b00      	cmp	r3, #0
 80a1d46:	bf14      	ite	ne
 80a1d48:	200c      	movne	r0, #12
 80a1d4a:	2000      	moveq	r0, #0
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1d4c:	2701      	movs	r7, #1
 80a1d4e:	b2eb      	uxtb	r3, r5
 80a1d50:	08da      	lsrs	r2, r3, #3
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1d52:	4298      	cmp	r0, r3
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1d54:	f10d 0e10 	add.w	lr, sp, #16
 80a1d58:	f003 0307 	and.w	r3, r3, #7
 80a1d5c:	4472      	add	r2, lr
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1d5e:	d801      	bhi.n	80a1d64 <_ZN7VL53L0X4initEb+0x114>
 80a1d60:	428e      	cmp	r6, r1
 80a1d62:	d108      	bne.n	80a1d76 <_ZN7VL53L0X4initEb+0x126>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1d64:	f812 ec08 	ldrb.w	lr, [r2, #-8]
 80a1d68:	fa07 f303 	lsl.w	r3, r7, r3
 80a1d6c:	ea2e 0303 	bic.w	r3, lr, r3
 80a1d70:	f802 3c08 	strb.w	r3, [r2, #-8]
 80a1d74:	e007      	b.n	80a1d86 <_ZN7VL53L0X4initEb+0x136>
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 80a1d76:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80a1d7a:	fa42 f303 	asr.w	r3, r2, r3
 80a1d7e:	07db      	lsls	r3, r3, #31
    {
      spads_enabled++;
 80a1d80:	bf44      	itt	mi
 80a1d82:	3101      	addmi	r1, #1
 80a1d84:	b2c9      	uxtbmi	r1, r1
 80a1d86:	3501      	adds	r5, #1
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
 80a1d88:	2d30      	cmp	r5, #48	; 0x30
 80a1d8a:	d1e0      	bne.n	80a1d4e <_ZN7VL53L0X4initEb+0xfe>
    {
      spads_enabled++;
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a1d8c:	2306      	movs	r3, #6
 80a1d8e:	aa02      	add	r2, sp, #8
 80a1d90:	21b0      	movs	r1, #176	; 0xb0
 80a1d92:	4620      	mov	r0, r4
 80a1d94:	f7ff fcad 	bl	80a16f2 <_ZN7VL53L0X10writeMultiEhPKhh>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 80a1d98:	2201      	movs	r2, #1
 80a1d9a:	21ff      	movs	r1, #255	; 0xff
 80a1d9c:	4620      	mov	r0, r4
 80a1d9e:	f7ff fbf1 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a1da2:	2200      	movs	r2, #0
 80a1da4:	4611      	mov	r1, r2
 80a1da6:	4620      	mov	r0, r4
 80a1da8:	f7ff fbec 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1dac:	2200      	movs	r2, #0
 80a1dae:	21ff      	movs	r1, #255	; 0xff
 80a1db0:	4620      	mov	r0, r4
 80a1db2:	f7ff fbe7 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x09, 0x00);
 80a1db6:	2200      	movs	r2, #0
 80a1db8:	2109      	movs	r1, #9
 80a1dba:	4620      	mov	r0, r4
 80a1dbc:	f7ff fbe2 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x10, 0x00);
 80a1dc0:	2200      	movs	r2, #0
 80a1dc2:	2110      	movs	r1, #16
 80a1dc4:	4620      	mov	r0, r4
 80a1dc6:	f7ff fbdd 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x11, 0x00);
 80a1dca:	2200      	movs	r2, #0
 80a1dcc:	2111      	movs	r1, #17
 80a1dce:	4620      	mov	r0, r4
 80a1dd0:	f7ff fbd8 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x24, 0x01);
 80a1dd4:	2201      	movs	r2, #1
 80a1dd6:	2124      	movs	r1, #36	; 0x24
 80a1dd8:	4620      	mov	r0, r4
 80a1dda:	f7ff fbd3 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x25, 0xFF);
 80a1dde:	22ff      	movs	r2, #255	; 0xff
 80a1de0:	2125      	movs	r1, #37	; 0x25
 80a1de2:	4620      	mov	r0, r4
 80a1de4:	f7ff fbce 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x75, 0x00);
 80a1de8:	2200      	movs	r2, #0
 80a1dea:	2175      	movs	r1, #117	; 0x75
 80a1dec:	4620      	mov	r0, r4
 80a1dee:	f7ff fbc9 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1df2:	2201      	movs	r2, #1
 80a1df4:	21ff      	movs	r1, #255	; 0xff
 80a1df6:	4620      	mov	r0, r4
 80a1df8:	f7ff fbc4 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4E, 0x2C);
 80a1dfc:	222c      	movs	r2, #44	; 0x2c
 80a1dfe:	214e      	movs	r1, #78	; 0x4e
 80a1e00:	4620      	mov	r0, r4
 80a1e02:	f7ff fbbf 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x00);
 80a1e06:	2200      	movs	r2, #0
 80a1e08:	2148      	movs	r1, #72	; 0x48
 80a1e0a:	4620      	mov	r0, r4
 80a1e0c:	f7ff fbba 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x20);
 80a1e10:	2220      	movs	r2, #32
 80a1e12:	4629      	mov	r1, r5
 80a1e14:	4620      	mov	r0, r4
 80a1e16:	f7ff fbb5 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1e1a:	2200      	movs	r2, #0
 80a1e1c:	21ff      	movs	r1, #255	; 0xff
 80a1e1e:	4620      	mov	r0, r4
 80a1e20:	f7ff fbb0 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x09);
 80a1e24:	2209      	movs	r2, #9
 80a1e26:	4629      	mov	r1, r5
 80a1e28:	4620      	mov	r0, r4
 80a1e2a:	f7ff fbab 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x54, 0x00);
 80a1e2e:	2200      	movs	r2, #0
 80a1e30:	2154      	movs	r1, #84	; 0x54
 80a1e32:	4620      	mov	r0, r4
 80a1e34:	f7ff fba6 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a1e38:	2204      	movs	r2, #4
 80a1e3a:	2131      	movs	r1, #49	; 0x31
 80a1e3c:	4620      	mov	r0, r4
 80a1e3e:	f7ff fba1 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x32, 0x03);
 80a1e42:	2203      	movs	r2, #3
 80a1e44:	2132      	movs	r1, #50	; 0x32
 80a1e46:	4620      	mov	r0, r4
 80a1e48:	f7ff fb9c 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x83);
 80a1e4c:	2283      	movs	r2, #131	; 0x83
 80a1e4e:	2140      	movs	r1, #64	; 0x40
 80a1e50:	4620      	mov	r0, r4
 80a1e52:	f7ff fb97 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x25);
 80a1e56:	2225      	movs	r2, #37	; 0x25
 80a1e58:	2146      	movs	r1, #70	; 0x46
 80a1e5a:	4620      	mov	r0, r4
 80a1e5c:	f7ff fb92 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x60, 0x00);
 80a1e60:	2200      	movs	r2, #0
 80a1e62:	2160      	movs	r1, #96	; 0x60
 80a1e64:	4620      	mov	r0, r4
 80a1e66:	f7ff fb8d 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x27, 0x00);
 80a1e6a:	2200      	movs	r2, #0
 80a1e6c:	2127      	movs	r1, #39	; 0x27
 80a1e6e:	4620      	mov	r0, r4
 80a1e70:	f7ff fb88 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x50, 0x06);
 80a1e74:	2206      	movs	r2, #6
 80a1e76:	2150      	movs	r1, #80	; 0x50
 80a1e78:	4620      	mov	r0, r4
 80a1e7a:	f7ff fb83 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x51, 0x00);
 80a1e7e:	2200      	movs	r2, #0
 80a1e80:	2151      	movs	r1, #81	; 0x51
 80a1e82:	4620      	mov	r0, r4
 80a1e84:	f7ff fb7e 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x52, 0x96);
 80a1e88:	2296      	movs	r2, #150	; 0x96
 80a1e8a:	2152      	movs	r1, #82	; 0x52
 80a1e8c:	4620      	mov	r0, r4
 80a1e8e:	f7ff fb79 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x56, 0x08);
 80a1e92:	2208      	movs	r2, #8
 80a1e94:	2156      	movs	r1, #86	; 0x56
 80a1e96:	4620      	mov	r0, r4
 80a1e98:	f7ff fb74 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x57, 0x30);
 80a1e9c:	462a      	mov	r2, r5
 80a1e9e:	2157      	movs	r1, #87	; 0x57
 80a1ea0:	4620      	mov	r0, r4
 80a1ea2:	f7ff fb6f 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x61, 0x00);
 80a1ea6:	2200      	movs	r2, #0
 80a1ea8:	2161      	movs	r1, #97	; 0x61
 80a1eaa:	4620      	mov	r0, r4
 80a1eac:	f7ff fb6a 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x62, 0x00);
 80a1eb0:	2200      	movs	r2, #0
 80a1eb2:	2162      	movs	r1, #98	; 0x62
 80a1eb4:	4620      	mov	r0, r4
 80a1eb6:	f7ff fb65 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x64, 0x00);
 80a1eba:	2200      	movs	r2, #0
 80a1ebc:	2164      	movs	r1, #100	; 0x64
 80a1ebe:	4620      	mov	r0, r4
 80a1ec0:	f7ff fb60 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x65, 0x00);
 80a1ec4:	2200      	movs	r2, #0
 80a1ec6:	2165      	movs	r1, #101	; 0x65
 80a1ec8:	4620      	mov	r0, r4
 80a1eca:	f7ff fb5b 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x66, 0xA0);
 80a1ece:	22a0      	movs	r2, #160	; 0xa0
 80a1ed0:	2166      	movs	r1, #102	; 0x66
 80a1ed2:	4620      	mov	r0, r4
 80a1ed4:	f7ff fb56 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1ed8:	2201      	movs	r2, #1
 80a1eda:	21ff      	movs	r1, #255	; 0xff
 80a1edc:	4620      	mov	r0, r4
 80a1ede:	f7ff fb51 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x22, 0x32);
 80a1ee2:	2232      	movs	r2, #50	; 0x32
 80a1ee4:	2122      	movs	r1, #34	; 0x22
 80a1ee6:	4620      	mov	r0, r4
 80a1ee8:	f7ff fb4c 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x14);
 80a1eec:	2214      	movs	r2, #20
 80a1eee:	2147      	movs	r1, #71	; 0x47
 80a1ef0:	4620      	mov	r0, r4
 80a1ef2:	f7ff fb47 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x49, 0xFF);
 80a1ef6:	22ff      	movs	r2, #255	; 0xff
 80a1ef8:	2149      	movs	r1, #73	; 0x49
 80a1efa:	4620      	mov	r0, r4
 80a1efc:	f7ff fb42 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4A, 0x00);
 80a1f00:	2200      	movs	r2, #0
 80a1f02:	214a      	movs	r1, #74	; 0x4a
 80a1f04:	4620      	mov	r0, r4
 80a1f06:	f7ff fb3d 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1f0a:	2200      	movs	r2, #0
 80a1f0c:	21ff      	movs	r1, #255	; 0xff
 80a1f0e:	4620      	mov	r0, r4
 80a1f10:	f7ff fb38 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7A, 0x0A);
 80a1f14:	220a      	movs	r2, #10
 80a1f16:	217a      	movs	r1, #122	; 0x7a
 80a1f18:	4620      	mov	r0, r4
 80a1f1a:	f7ff fb33 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7B, 0x00);
 80a1f1e:	2200      	movs	r2, #0
 80a1f20:	217b      	movs	r1, #123	; 0x7b
 80a1f22:	4620      	mov	r0, r4
 80a1f24:	f7ff fb2e 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x78, 0x21);
 80a1f28:	2221      	movs	r2, #33	; 0x21
 80a1f2a:	2178      	movs	r1, #120	; 0x78
 80a1f2c:	4620      	mov	r0, r4
 80a1f2e:	f7ff fb29 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1f32:	2201      	movs	r2, #1
 80a1f34:	21ff      	movs	r1, #255	; 0xff
 80a1f36:	4620      	mov	r0, r4
 80a1f38:	f7ff fb24 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x23, 0x34);
 80a1f3c:	2234      	movs	r2, #52	; 0x34
 80a1f3e:	2123      	movs	r1, #35	; 0x23
 80a1f40:	4620      	mov	r0, r4
 80a1f42:	f7ff fb1f 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x42, 0x00);
 80a1f46:	2200      	movs	r2, #0
 80a1f48:	2142      	movs	r1, #66	; 0x42
 80a1f4a:	4620      	mov	r0, r4
 80a1f4c:	f7ff fb1a 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0xFF);
 80a1f50:	22ff      	movs	r2, #255	; 0xff
 80a1f52:	2144      	movs	r1, #68	; 0x44
 80a1f54:	4620      	mov	r0, r4
 80a1f56:	f7ff fb15 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x26);
 80a1f5a:	2226      	movs	r2, #38	; 0x26
 80a1f5c:	2145      	movs	r1, #69	; 0x45
 80a1f5e:	4620      	mov	r0, r4
 80a1f60:	f7ff fb10 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x05);
 80a1f64:	2205      	movs	r2, #5
 80a1f66:	2146      	movs	r1, #70	; 0x46
 80a1f68:	4620      	mov	r0, r4
 80a1f6a:	f7ff fb0b 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x40);
 80a1f6e:	2240      	movs	r2, #64	; 0x40
 80a1f70:	4611      	mov	r1, r2
 80a1f72:	4620      	mov	r0, r4
 80a1f74:	f7ff fb06 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0E, 0x06);
 80a1f78:	2206      	movs	r2, #6
 80a1f7a:	210e      	movs	r1, #14
 80a1f7c:	4620      	mov	r0, r4
 80a1f7e:	f7ff fb01 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x20, 0x1A);
 80a1f82:	221a      	movs	r2, #26
 80a1f84:	2120      	movs	r1, #32
 80a1f86:	4620      	mov	r0, r4
 80a1f88:	f7ff fafc 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x43, 0x40);
 80a1f8c:	2240      	movs	r2, #64	; 0x40
 80a1f8e:	2143      	movs	r1, #67	; 0x43
 80a1f90:	4620      	mov	r0, r4
 80a1f92:	f7ff faf7 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1f96:	2200      	movs	r2, #0
 80a1f98:	21ff      	movs	r1, #255	; 0xff
 80a1f9a:	4620      	mov	r0, r4
 80a1f9c:	f7ff faf2 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x34, 0x03);
 80a1fa0:	2203      	movs	r2, #3
 80a1fa2:	2134      	movs	r1, #52	; 0x34
 80a1fa4:	4620      	mov	r0, r4
 80a1fa6:	f7ff faed 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x35, 0x44);
 80a1faa:	2244      	movs	r2, #68	; 0x44
 80a1fac:	2135      	movs	r1, #53	; 0x35
 80a1fae:	4620      	mov	r0, r4
 80a1fb0:	f7ff fae8 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1fb4:	2201      	movs	r2, #1
 80a1fb6:	21ff      	movs	r1, #255	; 0xff
 80a1fb8:	4620      	mov	r0, r4
 80a1fba:	f7ff fae3 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a1fbe:	2204      	movs	r2, #4
 80a1fc0:	2131      	movs	r1, #49	; 0x31
 80a1fc2:	4620      	mov	r0, r4
 80a1fc4:	f7ff fade 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4B, 0x09);
 80a1fc8:	2209      	movs	r2, #9
 80a1fca:	214b      	movs	r1, #75	; 0x4b
 80a1fcc:	4620      	mov	r0, r4
 80a1fce:	f7ff fad9 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4C, 0x05);
 80a1fd2:	2205      	movs	r2, #5
 80a1fd4:	214c      	movs	r1, #76	; 0x4c
 80a1fd6:	4620      	mov	r0, r4
 80a1fd8:	f7ff fad4 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4D, 0x04);
 80a1fdc:	2204      	movs	r2, #4
 80a1fde:	214d      	movs	r1, #77	; 0x4d
 80a1fe0:	4620      	mov	r0, r4
 80a1fe2:	f7ff facf 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1fe6:	2200      	movs	r2, #0
 80a1fe8:	21ff      	movs	r1, #255	; 0xff
 80a1fea:	4620      	mov	r0, r4
 80a1fec:	f7ff faca 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0x00);
 80a1ff0:	2200      	movs	r2, #0
 80a1ff2:	2144      	movs	r1, #68	; 0x44
 80a1ff4:	4620      	mov	r0, r4
 80a1ff6:	f7ff fac5 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x20);
 80a1ffa:	2220      	movs	r2, #32
 80a1ffc:	2145      	movs	r1, #69	; 0x45
 80a1ffe:	4620      	mov	r0, r4
 80a2000:	f7ff fac0 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x08);
 80a2004:	2208      	movs	r2, #8
 80a2006:	2147      	movs	r1, #71	; 0x47
 80a2008:	4620      	mov	r0, r4
 80a200a:	f7ff fabb 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x28);
 80a200e:	2228      	movs	r2, #40	; 0x28
 80a2010:	2148      	movs	r1, #72	; 0x48
 80a2012:	4620      	mov	r0, r4
 80a2014:	f7ff fab6 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x67, 0x00);
 80a2018:	2200      	movs	r2, #0
 80a201a:	2167      	movs	r1, #103	; 0x67
 80a201c:	4620      	mov	r0, r4
 80a201e:	f7ff fab1 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x70, 0x04);
 80a2022:	2204      	movs	r2, #4
 80a2024:	2170      	movs	r1, #112	; 0x70
 80a2026:	4620      	mov	r0, r4
 80a2028:	f7ff faac 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x71, 0x01);
 80a202c:	2201      	movs	r2, #1
 80a202e:	2171      	movs	r1, #113	; 0x71
 80a2030:	4620      	mov	r0, r4
 80a2032:	f7ff faa7 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x72, 0xFE);
 80a2036:	22fe      	movs	r2, #254	; 0xfe
 80a2038:	2172      	movs	r1, #114	; 0x72
 80a203a:	4620      	mov	r0, r4
 80a203c:	f7ff faa2 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x76, 0x00);
 80a2040:	2200      	movs	r2, #0
 80a2042:	2176      	movs	r1, #118	; 0x76
 80a2044:	4620      	mov	r0, r4
 80a2046:	f7ff fa9d 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x77, 0x00);
 80a204a:	2200      	movs	r2, #0
 80a204c:	2177      	movs	r1, #119	; 0x77
 80a204e:	4620      	mov	r0, r4
 80a2050:	f7ff fa98 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a2054:	2201      	movs	r2, #1
 80a2056:	21ff      	movs	r1, #255	; 0xff
 80a2058:	4620      	mov	r0, r4
 80a205a:	f7ff fa93 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0D, 0x01);
 80a205e:	2201      	movs	r2, #1
 80a2060:	210d      	movs	r1, #13
 80a2062:	4620      	mov	r0, r4
 80a2064:	f7ff fa8e 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a2068:	2200      	movs	r2, #0
 80a206a:	21ff      	movs	r1, #255	; 0xff
 80a206c:	4620      	mov	r0, r4
 80a206e:	f7ff fa89 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x01);
 80a2072:	2201      	movs	r2, #1
 80a2074:	2180      	movs	r1, #128	; 0x80
 80a2076:	4620      	mov	r0, r4
 80a2078:	f7ff fa84 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x01, 0xF8);
 80a207c:	22f8      	movs	r2, #248	; 0xf8
 80a207e:	2101      	movs	r1, #1
 80a2080:	4620      	mov	r0, r4
 80a2082:	f7ff fa7f 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a2086:	2201      	movs	r2, #1
 80a2088:	21ff      	movs	r1, #255	; 0xff
 80a208a:	4620      	mov	r0, r4
 80a208c:	f7ff fa7a 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x8E, 0x01);
 80a2090:	2201      	movs	r2, #1
 80a2092:	218e      	movs	r1, #142	; 0x8e
 80a2094:	4620      	mov	r0, r4
 80a2096:	f7ff fa75 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a209a:	2201      	movs	r2, #1
 80a209c:	2100      	movs	r1, #0
 80a209e:	4620      	mov	r0, r4
 80a20a0:	f7ff fa70 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a20a4:	2200      	movs	r2, #0
 80a20a6:	21ff      	movs	r1, #255	; 0xff
 80a20a8:	4620      	mov	r0, r4
 80a20aa:	f7ff fa6b 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a20ae:	2200      	movs	r2, #0
 80a20b0:	2180      	movs	r1, #128	; 0x80
 80a20b2:	4620      	mov	r0, r4
 80a20b4:	f7ff fa66 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80a20b8:	2204      	movs	r2, #4
 80a20ba:	210a      	movs	r1, #10
 80a20bc:	4620      	mov	r0, r4
 80a20be:	f7ff fa61 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80a20c2:	2184      	movs	r1, #132	; 0x84
 80a20c4:	4620      	mov	r0, r4
 80a20c6:	f7ff facc 	bl	80a1662 <_ZN7VL53L0X7readRegEh>
 80a20ca:	2184      	movs	r1, #132	; 0x84
 80a20cc:	f000 02ef 	and.w	r2, r0, #239	; 0xef
 80a20d0:	4620      	mov	r0, r4
 80a20d2:	f7ff fa57 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a20d6:	2201      	movs	r2, #1
 80a20d8:	210b      	movs	r1, #11
 80a20da:	4620      	mov	r0, r4
 80a20dc:	f7ff fa52 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a20e0:	4620      	mov	r0, r4
 80a20e2:	f7ff fcf3 	bl	80a1acc <_ZN7VL53L0X26getMeasurementTimingBudgetEv>
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a20e6:	22e8      	movs	r2, #232	; 0xe8
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a20e8:	6160      	str	r0, [r4, #20]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a20ea:	2101      	movs	r1, #1
 80a20ec:	4620      	mov	r0, r4
 80a20ee:	f7ff fa49 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(measurement_timing_budget_us);
 80a20f2:	6961      	ldr	r1, [r4, #20]
 80a20f4:	4620      	mov	r0, r4
 80a20f6:	f7ff fd33 	bl	80a1b60 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80a20fa:	2201      	movs	r2, #1
 80a20fc:	4611      	mov	r1, r2
 80a20fe:	4620      	mov	r0, r4
 80a2100:	f7ff fa40 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x40)) { return false; }
 80a2104:	2140      	movs	r1, #64	; 0x40
 80a2106:	4620      	mov	r0, r4
 80a2108:	f7ff fd79 	bl	80a1bfe <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a210c:	2800      	cmp	r0, #0
 80a210e:	f43f adf2 	beq.w	80a1cf6 <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80a2112:	2202      	movs	r2, #2
 80a2114:	2101      	movs	r1, #1
 80a2116:	4620      	mov	r0, r4
 80a2118:	f7ff fa34 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x00)) { return false; }
 80a211c:	2100      	movs	r1, #0
 80a211e:	4620      	mov	r0, r4
 80a2120:	f7ff fd6d 	bl	80a1bfe <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a2124:	4605      	mov	r5, r0
 80a2126:	2800      	cmp	r0, #0
 80a2128:	f43f ade5 	beq.w	80a1cf6 <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a212c:	22e8      	movs	r2, #232	; 0xe8
 80a212e:	2101      	movs	r1, #1
 80a2130:	4620      	mov	r0, r4
 80a2132:	f7ff fa27 	bl	80a1584 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_PerformRefCalibration() end

  return true;
}
 80a2136:	4628      	mov	r0, r5
 80a2138:	b005      	add	sp, #20
 80a213a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a213c <_GLOBAL__sub_I__ZN7VL53L0XC2Ev>:
 80a213c:	f001 b838 	b.w	80a31b0 <HAL_Pin_Map>

080a2140 <_ZN9LIS3DHI2CD1Ev>:

}

LIS3DHI2C::~LIS3DHI2C() {

}
 80a2140:	4770      	bx	lr

080a2142 <_ZN9LIS3DHI2CD0Ev>:

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {

}

LIS3DHI2C::~LIS3DHI2C() {
 80a2142:	b510      	push	{r4, lr}
 80a2144:	4604      	mov	r4, r0

}
 80a2146:	f7fd ffaa 	bl	80a009e <_ZdlPv>
 80a214a:	4620      	mov	r0, r4
 80a214c:	bd10      	pop	{r4, pc}

080a214e <_ZN9LIS3DHI2C9writeDataEhPKhj>:
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a214e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2150:	4605      	mov	r5, r0
 80a2152:	461e      	mov	r6, r3
 80a2154:	460f      	mov	r7, r1

	wire.beginTransmission(getI2CAddr());
 80a2156:	7c01      	ldrb	r1, [r0, #16]
 80a2158:	68c0      	ldr	r0, [r0, #12]
 80a215a:	f041 0118 	orr.w	r1, r1, #24
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a215e:	4614      	mov	r4, r2

	wire.beginTransmission(getI2CAddr());
 80a2160:	f001 fdd3 	bl	80a3d0a <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a2164:	68e8      	ldr	r0, [r5, #12]

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a2166:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a2168:	6803      	ldr	r3, [r0, #0]
bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a216a:	bf88      	it	hi
 80a216c:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a2170:	689b      	ldr	r3, [r3, #8]
 80a2172:	4639      	mov	r1, r7
 80a2174:	4798      	blx	r3
 80a2176:	4426      	add	r6, r4
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a2178:	42a6      	cmp	r6, r4
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a217a:	68e8      	ldr	r0, [r5, #12]

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a217c:	d005      	beq.n	80a218a <_ZN9LIS3DHI2C9writeDataEhPKhj+0x3c>
		wire.write(buf[ii]);
 80a217e:	6803      	ldr	r3, [r0, #0]
 80a2180:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2184:	689b      	ldr	r3, [r3, #8]
 80a2186:	4798      	blx	r3

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a2188:	e7f6      	b.n	80a2178 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x2a>
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a218a:	f001 fdc6 	bl	80a3d1a <_ZN7TwoWire15endTransmissionEv>

	return (res == 0);
}
 80a218e:	fab0 f080 	clz	r0, r0
 80a2192:	0940      	lsrs	r0, r0, #5
 80a2194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2196 <_ZN9LIS3DHI2C8readDataEhPhj>:

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a2196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2198:	4604      	mov	r4, r0
 80a219a:	461e      	mov	r6, r3
 80a219c:	460f      	mov	r7, r1
	wire.beginTransmission(getI2CAddr());
 80a219e:	7c01      	ldrb	r1, [r0, #16]
 80a21a0:	68c0      	ldr	r0, [r0, #12]
 80a21a2:	f041 0118 	orr.w	r1, r1, #24

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a21a6:	4615      	mov	r5, r2
	wire.beginTransmission(getI2CAddr());
 80a21a8:	f001 fdaf 	bl	80a3d0a <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a21ac:	68e0      	ldr	r0, [r4, #12]
}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a21ae:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a21b0:	6803      	ldr	r3, [r0, #0]

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a21b2:	bf88      	it	hi
 80a21b4:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a21b8:	689b      	ldr	r3, [r3, #8]
 80a21ba:	4639      	mov	r1, r7
 80a21bc:	4798      	blx	r3

	uint8_t res = wire.endTransmission();
 80a21be:	68e0      	ldr	r0, [r4, #12]
 80a21c0:	f001 fdab 	bl	80a3d1a <_ZN7TwoWire15endTransmissionEv>
	if (res != 0) {
 80a21c4:	b9a8      	cbnz	r0, 80a21f2 <_ZN9LIS3DHI2C8readDataEhPhj+0x5c>
		return false;
	}

	wire.requestFrom((int)getI2CAddr(), numBytes);
 80a21c6:	7c21      	ldrb	r1, [r4, #16]
 80a21c8:	4632      	mov	r2, r6
 80a21ca:	f041 0118 	orr.w	r1, r1, #24
 80a21ce:	68e0      	ldr	r0, [r4, #12]
 80a21d0:	f001 fd96 	bl	80a3d00 <_ZN7TwoWire11requestFromEii>
 80a21d4:	442e      	add	r6, r5
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
 80a21d6:	42ae      	cmp	r6, r5
 80a21d8:	d00d      	beq.n	80a21f6 <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
 80a21da:	68e0      	ldr	r0, [r4, #12]
 80a21dc:	6803      	ldr	r3, [r0, #0]
 80a21de:	691b      	ldr	r3, [r3, #16]
 80a21e0:	4798      	blx	r3
 80a21e2:	b140      	cbz	r0, 80a21f6 <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
		buf[ii] = wire.read();
 80a21e4:	68e0      	ldr	r0, [r4, #12]
 80a21e6:	6803      	ldr	r3, [r0, #0]
 80a21e8:	695b      	ldr	r3, [r3, #20]
 80a21ea:	4798      	blx	r3
 80a21ec:	f805 0b01 	strb.w	r0, [r5], #1
 80a21f0:	e7f1      	b.n	80a21d6 <_ZN9LIS3DHI2C8readDataEhPhj+0x40>
	}
	wire.write(addr);

	uint8_t res = wire.endTransmission();
	if (res != 0) {
		return false;
 80a21f2:	2000      	movs	r0, #0
 80a21f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a21f6:	2001      	movs	r0, #1
	wire.requestFrom((int)getI2CAddr(), numBytes);
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
		buf[ii] = wire.read();
	}
	return true;
}
 80a21f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a21fa <_ZN12LIS3DHConfigC1Ev>:
#include "LIS3DH.h"

// Official project location:
// https://github.com/rickkas7/LIS3DH

LIS3DHConfig::LIS3DHConfig() {
 80a21fa:	2200      	movs	r2, #0
 80a21fc:	7002      	strb	r2, [r0, #0]
 80a21fe:	7042      	strb	r2, [r0, #1]
 80a2200:	7082      	strb	r2, [r0, #2]
 80a2202:	70c2      	strb	r2, [r0, #3]
 80a2204:	7102      	strb	r2, [r0, #4]
 80a2206:	7142      	strb	r2, [r0, #5]
 80a2208:	7182      	strb	r2, [r0, #6]
 80a220a:	71c2      	strb	r2, [r0, #7]
 80a220c:	7202      	strb	r2, [r0, #8]
 80a220e:	7242      	strb	r2, [r0, #9]
 80a2210:	7282      	strb	r2, [r0, #10]
}
 80a2212:	4770      	bx	lr

080a2214 <_ZN12LIS3DHConfig12setAccelModeEh>:
}

LIS3DHConfig &LIS3DHConfig::setAccelMode(uint8_t rate) {

	// Enable specified rate, with XYZ detection enabled
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
 80a2214:	f041 0107 	orr.w	r1, r1, #7
 80a2218:	7001      	strb	r1, [r0, #0]

	return *this;
}
 80a221a:	4770      	bx	lr

080a221c <_ZN6LIS3DH13readRegister8Eh>:

	return pos;
}


uint8_t LIS3DH::readRegister8(uint8_t addr) {
 80a221c:	b513      	push	{r0, r1, r4, lr}

	uint8_t resp[1];
	readData(addr, resp, sizeof(resp));
 80a221e:	6803      	ldr	r3, [r0, #0]
 80a2220:	aa01      	add	r2, sp, #4
 80a2222:	689c      	ldr	r4, [r3, #8]
 80a2224:	2301      	movs	r3, #1
 80a2226:	47a0      	blx	r4

	return resp[0];
}
 80a2228:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80a222c:	b002      	add	sp, #8
 80a222e:	bd10      	pop	{r4, pc}

080a2230 <_ZN6LIS3DH9hasDeviceEv>:
LIS3DH::~LIS3DH() {

}


bool LIS3DH::hasDevice() {
 80a2230:	b538      	push	{r3, r4, r5, lr}
 80a2232:	4605      	mov	r5, r0
 80a2234:	240a      	movs	r4, #10
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
 80a2236:	210f      	movs	r1, #15
 80a2238:	4628      	mov	r0, r5
 80a223a:	f7ff ffef 	bl	80a221c <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
 80a223e:	2833      	cmp	r0, #51	; 0x33
			found = true;
 80a2240:	f04f 0001 	mov.w	r0, #1

bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
		if (whoami == WHO_AM_I) {
 80a2244:	d005      	beq.n	80a2252 <_ZN6LIS3DH9hasDeviceEv+0x22>
			found = true;
			break;
		}
		delay(1);
 80a2246:	f001 fae9 	bl	80a381c <delay>
}


bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
 80a224a:	3c01      	subs	r4, #1
 80a224c:	d1f3      	bne.n	80a2236 <_ZN6LIS3DH9hasDeviceEv+0x6>

}


bool LIS3DH::hasDevice() {
	bool found = false;
 80a224e:	4620      	mov	r0, r4
 80a2250:	bd38      	pop	{r3, r4, r5, pc}
			break;
		}
		delay(1);
	}
	return found;
}
 80a2252:	bd38      	pop	{r3, r4, r5, pc}

080a2254 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a2254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a2256:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a2258:	2107      	movs	r1, #7

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a225a:	4606      	mov	r6, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a225c:	f7ff ffde 	bl	80a221c <_ZN6LIS3DH13readRegister8Eh>
 80a2260:	f000 0008 	and.w	r0, r0, #8

	bool hasData = ((statusAuxReg & STATUS_AUX_321DA) != 0);
 80a2264:	2800      	cmp	r0, #0
 80a2266:	bf14      	ite	ne
 80a2268:	2501      	movne	r5, #1
 80a226a:	2500      	moveq	r5, #0

	//Serial.printlnf("fifoSrcReg=0x%02x", fifoSrcReg);

	if (hasData) {
 80a226c:	d01b      	beq.n	80a22a6 <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x52>
		uint8_t resp[6];
		readData(REG_OUT_X_L, resp, sizeof(resp));
 80a226e:	6833      	ldr	r3, [r6, #0]
 80a2270:	466a      	mov	r2, sp
 80a2272:	689f      	ldr	r7, [r3, #8]
 80a2274:	2128      	movs	r1, #40	; 0x28
 80a2276:	2306      	movs	r3, #6
 80a2278:	4630      	mov	r0, r6
 80a227a:	47b8      	blx	r7

		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
 80a227c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a2280:	f89d 3000 	ldrb.w	r3, [sp]
 80a2284:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a2288:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
 80a228a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a228e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a2292:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a2296:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
 80a2298:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a229c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a22a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a22a4:	80a3      	strh	r3, [r4, #4]
	}
	return hasData;
}
 80a22a6:	4628      	mov	r0, r5
 80a22a8:	b003      	add	sp, #12
 80a22aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a22ac <_ZN6LIS3DH14writeRegister8Ehh>:

	return resp[0] | (((uint16_t)resp[1]) << 8);
}


void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
 80a22ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a22ae:	ac02      	add	r4, sp, #8

	writeData(addr, req, sizeof(req));
 80a22b0:	6803      	ldr	r3, [r0, #0]

void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a22b2:	f804 2d04 	strb.w	r2, [r4, #-4]!

	writeData(addr, req, sizeof(req));
 80a22b6:	68dd      	ldr	r5, [r3, #12]
 80a22b8:	4622      	mov	r2, r4
 80a22ba:	2301      	movs	r3, #1
 80a22bc:	47a8      	blx	r5
}
 80a22be:	b003      	add	sp, #12
 80a22c0:	bd30      	pop	{r4, r5, pc}
	...

080a22c4 <_ZN6LIS3DH5setupER12LIS3DHConfig>:
		delay(1);
	}
	return found;
}

bool LIS3DH::setup(LIS3DHConfig &config) {
 80a22c4:	b570      	push	{r4, r5, r6, lr}
 80a22c6:	4604      	mov	r4, r0
 80a22c8:	460d      	mov	r5, r1

	if (!hasDevice()) {
 80a22ca:	f7ff ffb1 	bl	80a2230 <_ZN6LIS3DH9hasDeviceEv>
 80a22ce:	4606      	mov	r6, r0
 80a22d0:	b928      	cbnz	r0, 80a22de <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		Serial.println("device not found");
 80a22d2:	f001 fbcd 	bl	80a3a70 <_Z16_fetch_usbserialv>
 80a22d6:	4928      	ldr	r1, [pc, #160]	; (80a2378 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
 80a22d8:	f001 fa29 	bl	80a372e <_ZN5Print7printlnEPKc>
		return false;
 80a22dc:	e049      	b.n	80a2372 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
	}

	writeRegister8(REG_CTRL_REG1, config.reg1);
 80a22de:	782a      	ldrb	r2, [r5, #0]
 80a22e0:	2120      	movs	r1, #32
 80a22e2:	4620      	mov	r0, r4
 80a22e4:	f7ff ffe2 	bl	80a22ac <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
 80a22e8:	786a      	ldrb	r2, [r5, #1]
 80a22ea:	2121      	movs	r1, #33	; 0x21
 80a22ec:	4620      	mov	r0, r4
 80a22ee:	f7ff ffdd 	bl	80a22ac <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
 80a22f2:	78aa      	ldrb	r2, [r5, #2]
 80a22f4:	2122      	movs	r1, #34	; 0x22
 80a22f6:	4620      	mov	r0, r4
 80a22f8:	f7ff ffd8 	bl	80a22ac <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
 80a22fc:	78ea      	ldrb	r2, [r5, #3]
 80a22fe:	2123      	movs	r1, #35	; 0x23
 80a2300:	4620      	mov	r0, r4
 80a2302:	f7ff ffd3 	bl	80a22ac <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
 80a2306:	792a      	ldrb	r2, [r5, #4]
 80a2308:	2124      	movs	r1, #36	; 0x24
 80a230a:	4620      	mov	r0, r4
 80a230c:	f7ff ffce 	bl	80a22ac <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
 80a2310:	796a      	ldrb	r2, [r5, #5]
 80a2312:	2125      	movs	r1, #37	; 0x25
 80a2314:	4620      	mov	r0, r4
 80a2316:	f7ff ffc9 	bl	80a22ac <_ZN6LIS3DH14writeRegister8Ehh>

	if (config.setReference) {
 80a231a:	79ab      	ldrb	r3, [r5, #6]
 80a231c:	b11b      	cbz	r3, 80a2326 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x62>
		// In normal mode, reading the reference register sets it for the current normal force
		// (the normal force of gravity acting on the device)
		readRegister8(REG_REFERENCE);
 80a231e:	2126      	movs	r1, #38	; 0x26
 80a2320:	4620      	mov	r0, r4
 80a2322:	f7ff ff7b 	bl	80a221c <_ZN6LIS3DH13readRegister8Eh>
	}
	// Set FIFO mode
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
 80a2326:	7aaa      	ldrb	r2, [r5, #10]
 80a2328:	212e      	movs	r1, #46	; 0x2e
 80a232a:	4620      	mov	r0, r4
 80a232c:	f7ff ffbe 	bl	80a22ac <_ZN6LIS3DH14writeRegister8Ehh>



	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
 80a2330:	78ab      	ldrb	r3, [r5, #2]
 80a2332:	065b      	lsls	r3, r3, #25
 80a2334:	d51d      	bpl.n	80a2372 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>

		writeRegister8(REG_INT1_THS, config.int1_ths);
 80a2336:	79ea      	ldrb	r2, [r5, #7]
 80a2338:	2132      	movs	r1, #50	; 0x32
 80a233a:	4620      	mov	r0, r4
 80a233c:	f7ff ffb6 	bl	80a22ac <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
 80a2340:	7a2a      	ldrb	r2, [r5, #8]
 80a2342:	2133      	movs	r1, #51	; 0x33
 80a2344:	4620      	mov	r0, r4
 80a2346:	f7ff ffb1 	bl	80a22ac <_ZN6LIS3DH14writeRegister8Ehh>

		if (intPin >= 0) {
 80a234a:	6863      	ldr	r3, [r4, #4]
 80a234c:	2b00      	cmp	r3, #0
 80a234e:	db0a      	blt.n	80a2366 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa2>
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a2350:	7a6a      	ldrb	r2, [r5, #9]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a2352:	4620      	mov	r0, r4
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a2354:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a2356:	2130      	movs	r1, #48	; 0x30
 80a2358:	f7ff ffa8 	bl	80a22ac <_ZN6LIS3DH14writeRegister8Ehh>

			// Clear the interrupt just in case
			readRegister8(REG_INT1_SRC);
 80a235c:	2131      	movs	r1, #49	; 0x31
 80a235e:	4620      	mov	r0, r4
 80a2360:	f7ff ff5c 	bl	80a221c <_ZN6LIS3DH13readRegister8Eh>
 80a2364:	e005      	b.n	80a2372 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
		}
		else {
			int1_cfg = 0;
 80a2366:	2200      	movs	r2, #0
 80a2368:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
 80a236a:	2130      	movs	r1, #48	; 0x30
 80a236c:	4620      	mov	r0, r4
 80a236e:	f7ff ff9d 	bl	80a22ac <_ZN6LIS3DH14writeRegister8Ehh>




	return true;
}
 80a2372:	4630      	mov	r0, r6
 80a2374:	bd70      	pop	{r4, r5, r6, pc}
 80a2376:	bf00      	nop
 80a2378:	080a51b4 	.word	0x080a51b4

080a237c <_ZN9LIS3DHI2CC1ER7TwoWirehi>:

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a237c:	b510      	push	{r4, lr}

	return *this;
}


LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
 80a237e:	6043      	str	r3, [r0, #4]

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a2380:	4b02      	ldr	r3, [pc, #8]	; (80a238c <_ZN9LIS3DHI2CC1ER7TwoWirehi+0x10>)
 80a2382:	60c1      	str	r1, [r0, #12]
 80a2384:	6003      	str	r3, [r0, #0]
 80a2386:	7402      	strb	r2, [r0, #16]

}
 80a2388:	bd10      	pop	{r4, pc}
 80a238a:	bf00      	nop
 80a238c:	080a51a4 	.word	0x080a51a4

080a2390 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:
 80a2390:	f000 bf0e 	b.w	80a31b0 <HAL_Pin_Map>

080a2394 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>:
#include "FuzzyRule.h"

FuzzyRule::FuzzyRule(){
}

FuzzyRule::FuzzyRule(int index, FuzzyRuleAntecedent* fuzzyRuleAntecedent, FuzzyRuleConsequent* fuzzyRuleConsequent){
 80a2394:	b510      	push	{r4, lr}
    this->index = index;
    this->fuzzyRuleAntecedent = fuzzyRuleAntecedent;
    this->fuzzyRuleConsequent = fuzzyRuleConsequent;
 80a2396:	60c3      	str	r3, [r0, #12]
    this->fired = false;
 80a2398:	2300      	movs	r3, #0

FuzzyRule::FuzzyRule(){
}

FuzzyRule::FuzzyRule(int index, FuzzyRuleAntecedent* fuzzyRuleAntecedent, FuzzyRuleConsequent* fuzzyRuleConsequent){
    this->index = index;
 80a239a:	6001      	str	r1, [r0, #0]
    this->fuzzyRuleAntecedent = fuzzyRuleAntecedent;
 80a239c:	6082      	str	r2, [r0, #8]
    this->fuzzyRuleConsequent = fuzzyRuleConsequent;
    this->fired = false;
 80a239e:	7103      	strb	r3, [r0, #4]
}
 80a23a0:	bd10      	pop	{r4, pc}

080a23a2 <_ZN9FuzzyRule18evaluateExpressionEv>:

int FuzzyRule::getIndex(){
    return this->index;
}

bool FuzzyRule::evaluateExpression(){
 80a23a2:	b538      	push	{r3, r4, r5, lr}
 80a23a4:	4604      	mov	r4, r0
    if (this->fuzzyRuleAntecedent != NULL){
 80a23a6:	6880      	ldr	r0, [r0, #8]
 80a23a8:	b170      	cbz	r0, 80a23c8 <_ZN9FuzzyRule18evaluateExpressionEv+0x26>
        float powerOfAntecedent = this->fuzzyRuleAntecedent->evaluate();
 80a23aa:	f000 fe29 	bl	80a3000 <_ZN19FuzzyRuleAntecedent8evaluateEv>

        (powerOfAntecedent > 0.0) ?    (this->fired = true) : (this->fired = false);
 80a23ae:	2100      	movs	r1, #0
    return this->index;
}

bool FuzzyRule::evaluateExpression(){
    if (this->fuzzyRuleAntecedent != NULL){
        float powerOfAntecedent = this->fuzzyRuleAntecedent->evaluate();
 80a23b0:	4605      	mov	r5, r0

        (powerOfAntecedent > 0.0) ?    (this->fired = true) : (this->fired = false);
 80a23b2:	f002 fe45 	bl	80a5040 <__aeabi_fcmpgt>
 80a23b6:	b110      	cbz	r0, 80a23be <_ZN9FuzzyRule18evaluateExpressionEv+0x1c>
 80a23b8:	2301      	movs	r3, #1
 80a23ba:	7123      	strb	r3, [r4, #4]
 80a23bc:	e000      	b.n	80a23c0 <_ZN9FuzzyRule18evaluateExpressionEv+0x1e>
 80a23be:	7120      	strb	r0, [r4, #4]
        
        this->fuzzyRuleConsequent->evaluate(powerOfAntecedent);
 80a23c0:	4629      	mov	r1, r5
 80a23c2:	68e0      	ldr	r0, [r4, #12]
 80a23c4:	f000 fd57 	bl	80a2e76 <_ZN19FuzzyRuleConsequent8evaluateEf>
    }
    return this->fired;
}
 80a23c8:	7920      	ldrb	r0, [r4, #4]
 80a23ca:	bd38      	pop	{r3, r4, r5, pc}

080a23cc <_ZN16FuzzyCompositionC1Ev>:
#include "FuzzyComposition.h"
#include <math.h>

// CONSTRUTORES
FuzzyComposition::FuzzyComposition(){
    this->pointsCursor     = NULL;
 80a23cc:	2200      	movs	r2, #0
 80a23ce:	6002      	str	r2, [r0, #0]
    this->points         = NULL;
 80a23d0:	6042      	str	r2, [r0, #4]
}
 80a23d2:	4770      	bx	lr

080a23d4 <_ZN16FuzzyComposition8addPointEff>:
// DESTRUTOR
FuzzyComposition::~FuzzyComposition(){
    this->cleanPoints(this->points);
}

bool FuzzyComposition::addPoint(float point, float pertinence){
 80a23d4:	b570      	push	{r4, r5, r6, lr}
 80a23d6:	4604      	mov	r4, r0
    pointsArray* aux;
    // Alocando espaço na memória
    if((aux = (pointsArray* ) malloc(sizeof(pointsArray))) == NULL){
 80a23d8:	2010      	movs	r0, #16
// DESTRUTOR
FuzzyComposition::~FuzzyComposition(){
    this->cleanPoints(this->points);
}

bool FuzzyComposition::addPoint(float point, float pertinence){
 80a23da:	460e      	mov	r6, r1
 80a23dc:	4615      	mov	r5, r2
    pointsArray* aux;
    // Alocando espaço na memória
    if((aux = (pointsArray* ) malloc(sizeof(pointsArray))) == NULL){
 80a23de:	f001 f869 	bl	80a34b4 <malloc>
 80a23e2:	2300      	movs	r3, #0
 80a23e4:	b170      	cbz	r0, 80a2404 <_ZN16FuzzyComposition8addPointEff+0x30>
        return false;
    }
    aux->previous = NULL;
 80a23e6:	6003      	str	r3, [r0, #0]
    aux->point = point;
 80a23e8:	6046      	str	r6, [r0, #4]
    aux->pertinence = pertinence;
 80a23ea:	6085      	str	r5, [r0, #8]
    aux->next = NULL;
 80a23ec:	60c3      	str	r3, [r0, #12]

    if(this->points == NULL){
 80a23ee:	6863      	ldr	r3, [r4, #4]
 80a23f0:	b913      	cbnz	r3, 80a23f8 <_ZN16FuzzyComposition8addPointEff+0x24>
        this->points = aux;
 80a23f2:	6060      	str	r0, [r4, #4]
        this->pointsCursor  = aux;
 80a23f4:	6020      	str	r0, [r4, #0]
 80a23f6:	e004      	b.n	80a2402 <_ZN16FuzzyComposition8addPointEff+0x2e>
    }else{
        aux->previous = this->pointsCursor;
 80a23f8:	6823      	ldr	r3, [r4, #0]
 80a23fa:	6003      	str	r3, [r0, #0]
        this->pointsCursor = aux;
 80a23fc:	6020      	str	r0, [r4, #0]
        aux->previous->next = this->pointsCursor;
 80a23fe:	6803      	ldr	r3, [r0, #0]
 80a2400:	60d8      	str	r0, [r3, #12]
    }
    return true;
 80a2402:	2001      	movs	r0, #1
}
 80a2404:	bd70      	pop	{r4, r5, r6, pc}

080a2406 <_ZN16FuzzyComposition10checkPointEff>:

bool FuzzyComposition::checkPoint(float point, float pertinence){
 80a2406:	b570      	push	{r4, r5, r6, lr}
 80a2408:	460d      	mov	r5, r1
 80a240a:	4616      	mov	r6, r2
    pointsArray* aux;
    aux = this->pointsCursor;
 80a240c:	6804      	ldr	r4, [r0, #0]
    while(aux != NULL){
 80a240e:	b15c      	cbz	r4, 80a2428 <_ZN16FuzzyComposition10checkPointEff+0x22>
        if(aux->point == point && aux->pertinence == pertinence){
 80a2410:	4629      	mov	r1, r5
 80a2412:	6860      	ldr	r0, [r4, #4]
 80a2414:	f002 fdec 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a2418:	b120      	cbz	r0, 80a2424 <_ZN16FuzzyComposition10checkPointEff+0x1e>
 80a241a:	4631      	mov	r1, r6
 80a241c:	68a0      	ldr	r0, [r4, #8]
 80a241e:	f002 fde7 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a2422:	b918      	cbnz	r0, 80a242c <_ZN16FuzzyComposition10checkPointEff+0x26>
            return true;
        }
        aux = aux->previous;
 80a2424:	6824      	ldr	r4, [r4, #0]
}

bool FuzzyComposition::checkPoint(float point, float pertinence){
    pointsArray* aux;
    aux = this->pointsCursor;
    while(aux != NULL){
 80a2426:	e7f2      	b.n	80a240e <_ZN16FuzzyComposition10checkPointEff+0x8>
        if(aux->point == point && aux->pertinence == pertinence){
            return true;
        }
        aux = aux->previous;
    }
    return false;
 80a2428:	4620      	mov	r0, r4
 80a242a:	bd70      	pop	{r4, r5, r6, pc}
bool FuzzyComposition::checkPoint(float point, float pertinence){
    pointsArray* aux;
    aux = this->pointsCursor;
    while(aux != NULL){
        if(aux->point == point && aux->pertinence == pertinence){
            return true;
 80a242c:	2001      	movs	r0, #1
        }
        aux = aux->previous;
    }
    return false;
}
 80a242e:	bd70      	pop	{r4, r5, r6, pc}

080a2430 <_ZN16FuzzyComposition8avaliateEv>:
        aux = aux->next;
    }
    return true;
}

float FuzzyComposition::avaliate(){
 80a2430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pointsArray* aux;
    float numerator     = 0.0;
    float denominator   = 0.0;
 80a2434:	2700      	movs	r7, #0
    return true;
}

float FuzzyComposition::avaliate(){
    pointsArray* aux;
    float numerator     = 0.0;
 80a2436:	46ba      	mov	sl, r7
    float denominator   = 0.0;

    aux = this->points;
 80a2438:	6845      	ldr	r5, [r0, #4]
    while(aux != NULL){
 80a243a:	2d00      	cmp	r5, #0
 80a243c:	f000 80b1 	beq.w	80a25a2 <_ZN16FuzzyComposition8avaliateEv+0x172>
        if(aux->next != NULL){
 80a2440:	68ee      	ldr	r6, [r5, #12]
 80a2442:	b90e      	cbnz	r6, 80a2448 <_ZN16FuzzyComposition8avaliateEv+0x18>
        aux = aux->next;
    }
    return true;
}

float FuzzyComposition::avaliate(){
 80a2444:	4635      	mov	r5, r6
 80a2446:	e7f8      	b.n	80a243a <_ZN16FuzzyComposition8avaliateEv+0xa>
    aux = this->points;
    while(aux != NULL){
        if(aux->next != NULL){
            float area = 0.0;
            float middle = 0.0;
            if(aux->point == aux->next->point){
 80a2448:	686c      	ldr	r4, [r5, #4]
 80a244a:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80a244e:	4620      	mov	r0, r4
 80a2450:	4641      	mov	r1, r8
 80a2452:	f002 fdcd 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a2456:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80a245a:	b108      	cbz	r0, 80a2460 <_ZN16FuzzyComposition8avaliateEv+0x30>
                // Se Singleton
                area     = aux->pertinence;
 80a245c:	465d      	mov	r5, fp
 80a245e:	e091      	b.n	80a2584 <_ZN16FuzzyComposition8avaliateEv+0x154>
                middle   = aux->point;
            }else if(aux->pertinence == 0.0 || aux->next->pertinence == 0.0){
 80a2460:	2100      	movs	r1, #0
 80a2462:	4658      	mov	r0, fp
 80a2464:	f002 fdc4 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a2468:	b930      	cbnz	r0, 80a2478 <_ZN16FuzzyComposition8avaliateEv+0x48>
 80a246a:	68b5      	ldr	r5, [r6, #8]
 80a246c:	2100      	movs	r1, #0
 80a246e:	4628      	mov	r0, r5
 80a2470:	f002 fdbe 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a2474:	2800      	cmp	r0, #0
 80a2476:	d036      	beq.n	80a24e6 <_ZN16FuzzyComposition8avaliateEv+0xb6>
                // Se triangulo
                float pertinence;
                if(aux->pertinence > 0.0){
 80a2478:	2100      	movs	r1, #0
 80a247a:	4658      	mov	r0, fp
 80a247c:	f002 fde0 	bl	80a5040 <__aeabi_fcmpgt>
 80a2480:	b908      	cbnz	r0, 80a2486 <_ZN16FuzzyComposition8avaliateEv+0x56>
                    pertinence = aux->pertinence;
                }else{
                    pertinence = aux->next->pertinence;
 80a2482:	68b5      	ldr	r5, [r6, #8]
 80a2484:	e000      	b.n	80a2488 <_ZN16FuzzyComposition8avaliateEv+0x58>
                middle   = aux->point;
            }else if(aux->pertinence == 0.0 || aux->next->pertinence == 0.0){
                // Se triangulo
                float pertinence;
                if(aux->pertinence > 0.0){
                    pertinence = aux->pertinence;
 80a2486:	465d      	mov	r5, fp
                }else{
                    pertinence = aux->next->pertinence;
                }
                area = ((aux->next->point - aux->point) * pertinence) / 2.0;
 80a2488:	4621      	mov	r1, r4
 80a248a:	4640      	mov	r0, r8
 80a248c:	f002 fb12 	bl	80a4ab4 <__aeabi_fsub>
 80a2490:	4601      	mov	r1, r0
 80a2492:	4680      	mov	r8, r0
 80a2494:	4628      	mov	r0, r5
 80a2496:	f002 fc17 	bl	80a4cc8 <__aeabi_fmul>
 80a249a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a249e:	f002 fc13 	bl	80a4cc8 <__aeabi_fmul>
                if(aux->pertinence < aux->next->pertinence){
 80a24a2:	68b1      	ldr	r1, [r6, #8]
                if(aux->pertinence > 0.0){
                    pertinence = aux->pertinence;
                }else{
                    pertinence = aux->next->pertinence;
                }
                area = ((aux->next->point - aux->point) * pertinence) / 2.0;
 80a24a4:	4605      	mov	r5, r0
                if(aux->pertinence < aux->next->pertinence){
 80a24a6:	4658      	mov	r0, fp
 80a24a8:	f002 fdac 	bl	80a5004 <__aeabi_fcmplt>
 80a24ac:	b128      	cbz	r0, 80a24ba <_ZN16FuzzyComposition8avaliateEv+0x8a>
                    middle = ((aux->next->point - aux->point) / 1.5) + aux->point;
 80a24ae:	4640      	mov	r0, r8
 80a24b0:	f001 ffbe 	bl	80a4430 <__aeabi_f2d>
 80a24b4:	2200      	movs	r2, #0
 80a24b6:	4b42      	ldr	r3, [pc, #264]	; (80a25c0 <_ZN16FuzzyComposition8avaliateEv+0x190>)
 80a24b8:	e004      	b.n	80a24c4 <_ZN16FuzzyComposition8avaliateEv+0x94>
                }else{
                    middle = ((aux->next->point - aux->point) / 3.0) + aux->point;
 80a24ba:	4640      	mov	r0, r8
 80a24bc:	f001 ffb8 	bl	80a4430 <__aeabi_f2d>
 80a24c0:	4b40      	ldr	r3, [pc, #256]	; (80a25c4 <_ZN16FuzzyComposition8avaliateEv+0x194>)
 80a24c2:	2200      	movs	r2, #0
 80a24c4:	f002 f932 	bl	80a472c <__aeabi_ddiv>
 80a24c8:	4680      	mov	r8, r0
 80a24ca:	4620      	mov	r0, r4
 80a24cc:	4689      	mov	r9, r1
 80a24ce:	f001 ffaf 	bl	80a4430 <__aeabi_f2d>
 80a24d2:	4602      	mov	r2, r0
 80a24d4:	460b      	mov	r3, r1
 80a24d6:	4640      	mov	r0, r8
 80a24d8:	4649      	mov	r1, r9
 80a24da:	f001 fe4b 	bl	80a4174 <__adddf3>
 80a24de:	f002 fa95 	bl	80a4a0c <__aeabi_d2f>
 80a24e2:	4604      	mov	r4, r0
 80a24e4:	e04e      	b.n	80a2584 <_ZN16FuzzyComposition8avaliateEv+0x154>
                }
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence == aux->next->pertinence)){
 80a24e6:	2100      	movs	r1, #0
 80a24e8:	4658      	mov	r0, fp
 80a24ea:	f002 fda9 	bl	80a5040 <__aeabi_fcmpgt>
 80a24ee:	2100      	movs	r1, #0
 80a24f0:	b1c0      	cbz	r0, 80a2524 <_ZN16FuzzyComposition8avaliateEv+0xf4>
 80a24f2:	4628      	mov	r0, r5
 80a24f4:	f002 fda4 	bl	80a5040 <__aeabi_fcmpgt>
 80a24f8:	b1c0      	cbz	r0, 80a252c <_ZN16FuzzyComposition8avaliateEv+0xfc>
 80a24fa:	4629      	mov	r1, r5
 80a24fc:	4658      	mov	r0, fp
 80a24fe:	f002 fd77 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a2502:	b1e8      	cbz	r0, 80a2540 <_ZN16FuzzyComposition8avaliateEv+0x110>
                // Se quadrado
                area = (aux->next->point - aux->point) * aux->pertinence;
 80a2504:	4621      	mov	r1, r4
 80a2506:	4640      	mov	r0, r8
 80a2508:	f002 fad4 	bl	80a4ab4 <__aeabi_fsub>
 80a250c:	4601      	mov	r1, r0
 80a250e:	4680      	mov	r8, r0
 80a2510:	4658      	mov	r0, fp
 80a2512:	f002 fbd9 	bl	80a4cc8 <__aeabi_fmul>
 80a2516:	4605      	mov	r5, r0
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
 80a2518:	4640      	mov	r0, r8
 80a251a:	f001 ff89 	bl	80a4430 <__aeabi_f2d>
 80a251e:	2200      	movs	r2, #0
 80a2520:	4b29      	ldr	r3, [pc, #164]	; (80a25c8 <_ZN16FuzzyComposition8avaliateEv+0x198>)
 80a2522:	e02a      	b.n	80a257a <_ZN16FuzzyComposition8avaliateEv+0x14a>
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence != aux->next->pertinence)){
 80a2524:	4658      	mov	r0, fp
 80a2526:	f002 fd8b 	bl	80a5040 <__aeabi_fcmpgt>
 80a252a:	b348      	cbz	r0, 80a2580 <_ZN16FuzzyComposition8avaliateEv+0x150>
 80a252c:	2100      	movs	r1, #0
 80a252e:	4628      	mov	r0, r5
 80a2530:	f002 fd86 	bl	80a5040 <__aeabi_fcmpgt>
 80a2534:	b320      	cbz	r0, 80a2580 <_ZN16FuzzyComposition8avaliateEv+0x150>
 80a2536:	4629      	mov	r1, r5
 80a2538:	4658      	mov	r0, fp
 80a253a:	f002 fd59 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a253e:	b9f8      	cbnz	r0, 80a2580 <_ZN16FuzzyComposition8avaliateEv+0x150>
                // Se trapezio
                area = ((aux->pertinence + aux->next->pertinence) / 2.0) * (aux->next->point - aux->point);
 80a2540:	4621      	mov	r1, r4
 80a2542:	4640      	mov	r0, r8
 80a2544:	f002 fab6 	bl	80a4ab4 <__aeabi_fsub>
 80a2548:	f001 ff72 	bl	80a4430 <__aeabi_f2d>
 80a254c:	4680      	mov	r8, r0
 80a254e:	4689      	mov	r9, r1
 80a2550:	4658      	mov	r0, fp
 80a2552:	4629      	mov	r1, r5
 80a2554:	f002 fab0 	bl	80a4ab8 <__addsf3>
 80a2558:	f001 ff6a 	bl	80a4430 <__aeabi_f2d>
 80a255c:	2200      	movs	r2, #0
 80a255e:	4b1a      	ldr	r3, [pc, #104]	; (80a25c8 <_ZN16FuzzyComposition8avaliateEv+0x198>)
 80a2560:	f001 ffba 	bl	80a44d8 <__aeabi_dmul>
 80a2564:	4642      	mov	r2, r8
 80a2566:	464b      	mov	r3, r9
 80a2568:	f001 ffb6 	bl	80a44d8 <__aeabi_dmul>
 80a256c:	f002 fa4e 	bl	80a4a0c <__aeabi_d2f>
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
 80a2570:	4649      	mov	r1, r9
                // Se quadrado
                area = (aux->next->point - aux->point) * aux->pertinence;
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence != aux->next->pertinence)){
                // Se trapezio
                area = ((aux->pertinence + aux->next->pertinence) / 2.0) * (aux->next->point - aux->point);
 80a2572:	4605      	mov	r5, r0
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
 80a2574:	4640      	mov	r0, r8
 80a2576:	4b14      	ldr	r3, [pc, #80]	; (80a25c8 <_ZN16FuzzyComposition8avaliateEv+0x198>)
 80a2578:	2200      	movs	r2, #0
 80a257a:	f001 ffad 	bl	80a44d8 <__aeabi_dmul>
 80a257e:	e7a3      	b.n	80a24c8 <_ZN16FuzzyComposition8avaliateEv+0x98>

    aux = this->points;
    while(aux != NULL){
        if(aux->next != NULL){
            float area = 0.0;
            float middle = 0.0;
 80a2580:	2400      	movs	r4, #0
    float denominator   = 0.0;

    aux = this->points;
    while(aux != NULL){
        if(aux->next != NULL){
            float area = 0.0;
 80a2582:	4625      	mov	r5, r4
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence != aux->next->pertinence)){
                // Se trapezio
                area = ((aux->pertinence + aux->next->pertinence) / 2.0) * (aux->next->point - aux->point);
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
            }
            numerator += middle * area;
 80a2584:	4621      	mov	r1, r4
 80a2586:	4628      	mov	r0, r5
 80a2588:	f002 fb9e 	bl	80a4cc8 <__aeabi_fmul>
 80a258c:	4601      	mov	r1, r0
 80a258e:	4650      	mov	r0, sl
 80a2590:	f002 fa92 	bl	80a4ab8 <__addsf3>
            denominator += area;
 80a2594:	4629      	mov	r1, r5
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence != aux->next->pertinence)){
                // Se trapezio
                area = ((aux->pertinence + aux->next->pertinence) / 2.0) * (aux->next->point - aux->point);
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
            }
            numerator += middle * area;
 80a2596:	4682      	mov	sl, r0
            denominator += area;
 80a2598:	4638      	mov	r0, r7
 80a259a:	f002 fa8d 	bl	80a4ab8 <__addsf3>
 80a259e:	4607      	mov	r7, r0
 80a25a0:	e750      	b.n	80a2444 <_ZN16FuzzyComposition8avaliateEv+0x14>
        }
        aux = aux->next;
    }

    if(denominator == 0.0){
 80a25a2:	2100      	movs	r1, #0
 80a25a4:	4638      	mov	r0, r7
 80a25a6:	f002 fd23 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a25aa:	b928      	cbnz	r0, 80a25b8 <_ZN16FuzzyComposition8avaliateEv+0x188>
        return 0.0;
    }else{
        return numerator / denominator;
 80a25ac:	4639      	mov	r1, r7
 80a25ae:	4650      	mov	r0, sl
 80a25b0:	f002 fc3e 	bl	80a4e30 <__aeabi_fdiv>
 80a25b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }
        aux = aux->next;
    }

    if(denominator == 0.0){
        return 0.0;
 80a25b8:	2000      	movs	r0, #0
    }else{
        return numerator / denominator;
    }
}
 80a25ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a25be:	bf00      	nop
 80a25c0:	3ff80000 	.word	0x3ff80000
 80a25c4:	40080000 	.word	0x40080000
 80a25c8:	3fe00000 	.word	0x3fe00000

080a25cc <_ZN16FuzzyComposition11cleanPointsEP11pointsArray>:
    this->pointsCursor = NULL;
    return true;
}

// MÉTODOS PRIVADOS
void FuzzyComposition::cleanPoints(pointsArray* aux){
 80a25cc:	b510      	push	{r4, lr}
    if(aux != NULL){
 80a25ce:	460c      	mov	r4, r1
 80a25d0:	b139      	cbz	r1, 80a25e2 <_ZN16FuzzyComposition11cleanPointsEP11pointsArray+0x16>
        // Esvaziando a memória alocada
        this->cleanPoints(aux->next);
 80a25d2:	68c9      	ldr	r1, [r1, #12]
 80a25d4:	f7ff fffa 	bl	80a25cc <_ZN16FuzzyComposition11cleanPointsEP11pointsArray>
        free(aux);
 80a25d8:	4620      	mov	r0, r4
    }
}
 80a25da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// MÉTODOS PRIVADOS
void FuzzyComposition::cleanPoints(pointsArray* aux){
    if(aux != NULL){
        // Esvaziando a memória alocada
        this->cleanPoints(aux->next);
        free(aux);
 80a25de:	f000 bf71 	b.w	80a34c4 <free>
 80a25e2:	bd10      	pop	{r4, pc}

080a25e4 <_ZN16FuzzyComposition5emptyEv>:
    }else{
        return numerator / denominator;
    }
}

bool FuzzyComposition::empty(){
 80a25e4:	b510      	push	{r4, lr}
 80a25e6:	4604      	mov	r4, r0
    // limpando a memória
    this->cleanPoints(this->points);
 80a25e8:	6841      	ldr	r1, [r0, #4]
 80a25ea:	f7ff ffef 	bl	80a25cc <_ZN16FuzzyComposition11cleanPointsEP11pointsArray>
    // resetando os ponteiros
    this->points = NULL;
 80a25ee:	2300      	movs	r3, #0
 80a25f0:	6063      	str	r3, [r4, #4]
    this->pointsCursor = NULL;
 80a25f2:	6023      	str	r3, [r4, #0]
    return true;
}
 80a25f4:	2001      	movs	r0, #1
 80a25f6:	bd10      	pop	{r4, pc}

080a25f8 <_ZN16FuzzyComposition8rmvPointEP11pointsArray>:

        return true;
    }
}

bool FuzzyComposition::rmvPoint(pointsArray* point){
 80a25f8:	b508      	push	{r3, lr}
    if(point != NULL){
 80a25fa:	b111      	cbz	r1, 80a2602 <_ZN16FuzzyComposition8rmvPointEP11pointsArray+0xa>
        free(point);
 80a25fc:	4608      	mov	r0, r1
 80a25fe:	f000 ff61 	bl	80a34c4 <free>
    }
    return true;
}
 80a2602:	2001      	movs	r0, #1
 80a2604:	bd08      	pop	{r3, pc}
	...

080a2608 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_>:
        this->cleanPoints(aux->next);
        free(aux);
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
 80a2608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a260c:	461e      	mov	r6, r3
    float x1 = aSegmentBegin->point;
 80a260e:	684b      	ldr	r3, [r1, #4]
        this->cleanPoints(aux->next);
        free(aux);
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
 80a2610:	b087      	sub	sp, #28
    float x1 = aSegmentBegin->point;
 80a2612:	9301      	str	r3, [sp, #4]
    float y1 = aSegmentBegin->pertinence;
 80a2614:	688b      	ldr	r3, [r1, #8]
    float x2 = aSegmentEnd->point;
    float y2 = aSegmentEnd->pertinence;
    float x3 = bSegmentBegin->point;
    float y3 = bSegmentBegin->pertinence;
 80a2616:	f8d6 9008 	ldr.w	r9, [r6, #8]
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
    float x1 = aSegmentBegin->point;
    float y1 = aSegmentBegin->pertinence;
 80a261a:	9302      	str	r3, [sp, #8]
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a261c:	9b10      	ldr	r3, [sp, #64]	; 0x40
        this->cleanPoints(aux->next);
        free(aux);
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
 80a261e:	9005      	str	r0, [sp, #20]
 80a2620:	460c      	mov	r4, r1
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2622:	6898      	ldr	r0, [r3, #8]
 80a2624:	4649      	mov	r1, r9
        this->cleanPoints(aux->next);
        free(aux);
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
 80a2626:	4617      	mov	r7, r2
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2628:	f002 fa44 	bl	80a4ab4 <__aeabi_fsub>
 80a262c:	9901      	ldr	r1, [sp, #4]
 80a262e:	4682      	mov	sl, r0
 80a2630:	6878      	ldr	r0, [r7, #4]
 80a2632:	f002 fa3f 	bl	80a4ab4 <__aeabi_fsub>
bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
    float x1 = aSegmentBegin->point;
    float y1 = aSegmentBegin->pertinence;
    float x2 = aSegmentEnd->point;
    float y2 = aSegmentEnd->pertinence;
    float x3 = bSegmentBegin->point;
 80a2636:	f8d6 8004 	ldr.w	r8, [r6, #4]
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a263a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a263c:	4641      	mov	r1, r8
 80a263e:	9003      	str	r0, [sp, #12]
 80a2640:	6858      	ldr	r0, [r3, #4]
 80a2642:	f002 fa37 	bl	80a4ab4 <__aeabi_fsub>
 80a2646:	9902      	ldr	r1, [sp, #8]
 80a2648:	4683      	mov	fp, r0
 80a264a:	68b8      	ldr	r0, [r7, #8]
 80a264c:	f002 fa32 	bl	80a4ab4 <__aeabi_fsub>
 80a2650:	9903      	ldr	r1, [sp, #12]
 80a2652:	9004      	str	r0, [sp, #16]
 80a2654:	4650      	mov	r0, sl
 80a2656:	f002 fb37 	bl	80a4cc8 <__aeabi_fmul>
 80a265a:	9904      	ldr	r1, [sp, #16]
 80a265c:	4605      	mov	r5, r0
 80a265e:	4658      	mov	r0, fp
 80a2660:	f002 fb32 	bl	80a4cc8 <__aeabi_fmul>
 80a2664:	4601      	mov	r1, r0
 80a2666:	4628      	mov	r0, r5
 80a2668:	f002 fa24 	bl	80a4ab4 <__aeabi_fsub>
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a266c:	4649      	mov	r1, r9
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a266e:	4605      	mov	r5, r0
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a2670:	9802      	ldr	r0, [sp, #8]
 80a2672:	f002 fa1f 	bl	80a4ab4 <__aeabi_fsub>
 80a2676:	4641      	mov	r1, r8
 80a2678:	4681      	mov	r9, r0
 80a267a:	9801      	ldr	r0, [sp, #4]
 80a267c:	f002 fa1a 	bl	80a4ab4 <__aeabi_fsub>
 80a2680:	4649      	mov	r1, r9
 80a2682:	4680      	mov	r8, r0
 80a2684:	4658      	mov	r0, fp
 80a2686:	f002 fb1f 	bl	80a4cc8 <__aeabi_fmul>
 80a268a:	4641      	mov	r1, r8
 80a268c:	4683      	mov	fp, r0
 80a268e:	4650      	mov	r0, sl
 80a2690:	f002 fb1a 	bl	80a4cc8 <__aeabi_fmul>
 80a2694:	4601      	mov	r1, r0
 80a2696:	4658      	mov	r0, fp
 80a2698:	f002 fa0c 	bl	80a4ab4 <__aeabi_fsub>
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a269c:	4649      	mov	r1, r9
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a269e:	4682      	mov	sl, r0
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a26a0:	9803      	ldr	r0, [sp, #12]
 80a26a2:	f002 fb11 	bl	80a4cc8 <__aeabi_fmul>
 80a26a6:	4641      	mov	r1, r8
 80a26a8:	4681      	mov	r9, r0
 80a26aa:	9804      	ldr	r0, [sp, #16]
 80a26ac:	f002 fb0c 	bl	80a4cc8 <__aeabi_fmul>
 80a26b0:	4601      	mov	r1, r0
 80a26b2:	4648      	mov	r0, r9
 80a26b4:	f002 f9fe 	bl	80a4ab4 <__aeabi_fsub>

    if(denom < 0.0){
 80a26b8:	2100      	movs	r1, #0
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a26ba:	4680      	mov	r8, r0

    if(denom < 0.0){
 80a26bc:	4628      	mov	r0, r5
 80a26be:	f002 fca1 	bl	80a5004 <__aeabi_fcmplt>
 80a26c2:	b108      	cbz	r0, 80a26c8 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xc0>
        denom *= -1.0;
 80a26c4:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    }
    if(numera < 0.0){
 80a26c8:	2100      	movs	r1, #0
 80a26ca:	4650      	mov	r0, sl
 80a26cc:	f002 fc9a 	bl	80a5004 <__aeabi_fcmplt>
 80a26d0:	b108      	cbz	r0, 80a26d6 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xce>
        numera *= -1.0;
 80a26d2:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
    }
    if(numerb < 0.0){
 80a26d6:	2100      	movs	r1, #0
 80a26d8:	4640      	mov	r0, r8
 80a26da:	f002 fc93 	bl	80a5004 <__aeabi_fcmplt>
 80a26de:	b108      	cbz	r0, 80a26e4 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xdc>
        numerb *= -1.0;
 80a26e0:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
    }

    // Se os seguimentos forem paralelos, retornar falso
    if(denom < EPS){
 80a26e4:	4628      	mov	r0, r5
 80a26e6:	f001 fea3 	bl	80a4430 <__aeabi_f2d>
 80a26ea:	a331      	add	r3, pc, #196	; (adr r3, 80a27b0 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x1a8>)
 80a26ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a26f0:	f002 f964 	bl	80a49bc <__aeabi_dcmplt>
 80a26f4:	b108      	cbz	r0, 80a26fa <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xf2>
        return false;
 80a26f6:	2000      	movs	r0, #0
 80a26f8:	e057      	b.n	80a27aa <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x1a2>
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
 80a26fa:	4629      	mov	r1, r5
 80a26fc:	4650      	mov	r0, sl
 80a26fe:	f002 fb97 	bl	80a4e30 <__aeabi_fdiv>
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a2702:	2100      	movs	r1, #0
    if(denom < EPS){
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
 80a2704:	4681      	mov	r9, r0
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a2706:	f002 fc7d 	bl	80a5004 <__aeabi_fcmplt>
 80a270a:	2800      	cmp	r0, #0
 80a270c:	d1f3      	bne.n	80a26f6 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
 80a270e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2712:	4648      	mov	r0, r9
 80a2714:	f002 fc94 	bl	80a5040 <__aeabi_fcmpgt>
 80a2718:	2800      	cmp	r0, #0
 80a271a:	d1ec      	bne.n	80a26f6 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
    mub = numerb / denom;
 80a271c:	4629      	mov	r1, r5
 80a271e:	4640      	mov	r0, r8
 80a2720:	f002 fb86 	bl	80a4e30 <__aeabi_fdiv>
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a2724:	2100      	movs	r1, #0
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
    mub = numerb / denom;
 80a2726:	4605      	mov	r5, r0
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a2728:	f002 fc6c 	bl	80a5004 <__aeabi_fcmplt>
 80a272c:	2800      	cmp	r0, #0
 80a272e:	d1e2      	bne.n	80a26f6 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
 80a2730:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2734:	4628      	mov	r0, r5
 80a2736:	f002 fc83 	bl	80a5040 <__aeabi_fcmpgt>
 80a273a:	2800      	cmp	r0, #0
 80a273c:	d1db      	bne.n	80a26f6 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
        return false;
    }else{
        // Calculando o ponto e a pertinencia do novo elemento
        point         = x1 + mua * (x2 - x1);
 80a273e:	4649      	mov	r1, r9
 80a2740:	9803      	ldr	r0, [sp, #12]
 80a2742:	f002 fac1 	bl	80a4cc8 <__aeabi_fmul>
 80a2746:	9901      	ldr	r1, [sp, #4]
 80a2748:	f002 f9b6 	bl	80a4ab8 <__addsf3>
        pertinence     = y1 + mua * (y2 - y1);
 80a274c:	4649      	mov	r1, r9
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
        return false;
    }else{
        // Calculando o ponto e a pertinencia do novo elemento
        point         = x1 + mua * (x2 - x1);
 80a274e:	4605      	mov	r5, r0
        pertinence     = y1 + mua * (y2 - y1);
 80a2750:	9804      	ldr	r0, [sp, #16]
 80a2752:	f002 fab9 	bl	80a4cc8 <__aeabi_fmul>
 80a2756:	9902      	ldr	r1, [sp, #8]
 80a2758:	f002 f9ae 	bl	80a4ab8 <__addsf3>
 80a275c:	4680      	mov	r8, r0

        // Adicionando um novo ponto
        pointsArray* aux;
        // Alocando espaço na memória
        if((aux = (pointsArray *) malloc(sizeof(pointsArray))) == NULL){
 80a275e:	2010      	movs	r0, #16
 80a2760:	f000 fea8 	bl	80a34b4 <malloc>
 80a2764:	2800      	cmp	r0, #0
 80a2766:	d0c6      	beq.n	80a26f6 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
            return false;
        }

        aux->previous = bSegmentEnd;
 80a2768:	9b10      	ldr	r3, [sp, #64]	; 0x40
        aux->point = point;
 80a276a:	6045      	str	r5, [r0, #4]
        // Alocando espaço na memória
        if((aux = (pointsArray *) malloc(sizeof(pointsArray))) == NULL){
            return false;
        }

        aux->previous = bSegmentEnd;
 80a276c:	6003      	str	r3, [r0, #0]
        aux->point = point;
        aux->pertinence = pertinence;
 80a276e:	f8c0 8008 	str.w	r8, [r0, #8]
        aux->next = aSegmentEnd;
 80a2772:	60c7      	str	r7, [r0, #12]

        bSegmentEnd->next = aux;
 80a2774:	60d8      	str	r0, [r3, #12]
        aSegmentEnd->previous = aux;
 80a2776:	6038      	str	r0, [r7, #0]

        float stopPoint = bSegmentBegin->point;
 80a2778:	6877      	ldr	r7, [r6, #4]
        float stopPertinence = bSegmentBegin->pertinence;
 80a277a:	68b6      	ldr	r6, [r6, #8]

        pointsArray* temp = aSegmentBegin;
        pointsArray* excl;

        do{
            float pointToCompare = temp->point;
 80a277c:	f8d4 9004 	ldr.w	r9, [r4, #4]
            float pertinenceToCompare = temp->pertinence;

            excl = temp->previous;

            this->rmvPoint(temp);
 80a2780:	4621      	mov	r1, r4
 80a2782:	9805      	ldr	r0, [sp, #20]
        pointsArray* temp = aSegmentBegin;
        pointsArray* excl;

        do{
            float pointToCompare = temp->point;
            float pertinenceToCompare = temp->pertinence;
 80a2784:	f8d4 8008 	ldr.w	r8, [r4, #8]

            excl = temp->previous;
 80a2788:	6825      	ldr	r5, [r4, #0]

            this->rmvPoint(temp);
 80a278a:	f7ff ff35 	bl	80a25f8 <_ZN16FuzzyComposition8rmvPointEP11pointsArray>

            temp = excl;

            if(stopPoint == pointToCompare && stopPertinence == pertinenceToCompare){
 80a278e:	4649      	mov	r1, r9
 80a2790:	4638      	mov	r0, r7
 80a2792:	f002 fc2d 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a2796:	b120      	cbz	r0, 80a27a2 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x19a>
 80a2798:	4641      	mov	r1, r8
 80a279a:	4630      	mov	r0, r6
 80a279c:	f002 fc28 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a27a0:	b910      	cbnz	r0, 80a27a8 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x1a0>
 80a27a2:	462c      	mov	r4, r5
                break;
            }
        }while(temp != NULL);
 80a27a4:	2d00      	cmp	r5, #0
 80a27a6:	d1e9      	bne.n	80a277c <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x174>

        return true;
 80a27a8:	2001      	movs	r0, #1
    }
}
 80a27aa:	b007      	add	sp, #28
 80a27ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a27b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80a27b4:	3f50624d 	.word	0x3f50624d

080a27b8 <_ZN16FuzzyComposition5buildEv>:
        aux = aux->previous;
    }
    return false;
}

bool FuzzyComposition::build(){
 80a27b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a27ba:	4606      	mov	r6, r0
    pointsArray* aux;

    aux = this->points;
 80a27bc:	6845      	ldr	r5, [r0, #4]
    while(aux != NULL){
 80a27be:	b1dd      	cbz	r5, 80a27f8 <_ZN16FuzzyComposition5buildEv+0x40>
 80a27c0:	462c      	mov	r4, r5
        pointsArray* temp = aux;
        while(temp->previous != NULL){
 80a27c2:	6827      	ldr	r7, [r4, #0]
 80a27c4:	b1b7      	cbz	r7, 80a27f4 <_ZN16FuzzyComposition5buildEv+0x3c>
            if(temp->point < temp->previous->point){
 80a27c6:	6879      	ldr	r1, [r7, #4]
 80a27c8:	6860      	ldr	r0, [r4, #4]
 80a27ca:	f002 fc1b 	bl	80a5004 <__aeabi_fcmplt>
 80a27ce:	b908      	cbnz	r0, 80a27d4 <_ZN16FuzzyComposition5buildEv+0x1c>
 80a27d0:	463c      	mov	r4, r7
 80a27d2:	e7f6      	b.n	80a27c2 <_ZN16FuzzyComposition5buildEv+0xa>
 80a27d4:	4627      	mov	r7, r4
            temp = temp->previous;
        }
        pointsArray* zPoint;
        if(temp != NULL){
            zPoint = temp;
            while(temp->previous != NULL){
 80a27d6:	683b      	ldr	r3, [r7, #0]
 80a27d8:	b163      	cbz	r3, 80a27f4 <_ZN16FuzzyComposition5buildEv+0x3c>
                bool result = false;
                if(temp->previous->previous != NULL){
 80a27da:	681a      	ldr	r2, [r3, #0]
 80a27dc:	b142      	cbz	r2, 80a27f0 <_ZN16FuzzyComposition5buildEv+0x38>
                    result = rebuild(zPoint, zPoint->next, temp->previous, temp->previous->previous);
 80a27de:	9200      	str	r2, [sp, #0]
 80a27e0:	68e2      	ldr	r2, [r4, #12]
 80a27e2:	4621      	mov	r1, r4
 80a27e4:	4630      	mov	r0, r6
 80a27e6:	f7ff ff0f 	bl	80a2608 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_>
                }
                if(result == true){
 80a27ea:	b108      	cbz	r0, 80a27f0 <_ZN16FuzzyComposition5buildEv+0x38>
                    aux = this->points;
 80a27ec:	6875      	ldr	r5, [r6, #4]
                    break;
 80a27ee:	e001      	b.n	80a27f4 <_ZN16FuzzyComposition5buildEv+0x3c>
                }
                temp = temp->previous;
 80a27f0:	683f      	ldr	r7, [r7, #0]
            temp = temp->previous;
        }
        pointsArray* zPoint;
        if(temp != NULL){
            zPoint = temp;
            while(temp->previous != NULL){
 80a27f2:	e7f0      	b.n	80a27d6 <_ZN16FuzzyComposition5buildEv+0x1e>
                    break;
                }
                temp = temp->previous;
            }
        }
        aux = aux->next;
 80a27f4:	68ed      	ldr	r5, [r5, #12]

bool FuzzyComposition::build(){
    pointsArray* aux;

    aux = this->points;
    while(aux != NULL){
 80a27f6:	e7e2      	b.n	80a27be <_ZN16FuzzyComposition5buildEv+0x6>
            }
        }
        aux = aux->next;
    }
    return true;
}
 80a27f8:	2001      	movs	r0, #1
 80a27fa:	b003      	add	sp, #12
 80a27fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a27fe <_ZN10FuzzyInputC1Ei>:

// CONSTRUTORES
FuzzyInput::FuzzyInput() : FuzzyIO(){
}

FuzzyInput::FuzzyInput(int index) : FuzzyIO(index){
 80a27fe:	b510      	push	{r4, lr}
 80a2800:	4604      	mov	r4, r0
 80a2802:	f000 f80f 	bl	80a2824 <_ZN7FuzzyIOC1Ei>
}
 80a2806:	4620      	mov	r0, r4
 80a2808:	bd10      	pop	{r4, pc}

080a280a <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv>:
// DESTRUTOR
FuzzyInput::~FuzzyInput(){
}

// MÉTODOS PÚBLICOS
bool FuzzyInput::calculateFuzzySetPertinences(){
 80a280a:	b538      	push	{r3, r4, r5, lr}
 80a280c:	4605      	mov	r5, r0
    fuzzySetArray *aux;
    aux = this->fuzzySets;
 80a280e:	6884      	ldr	r4, [r0, #8]

    while(aux != NULL){
 80a2810:	b134      	cbz	r4, 80a2820 <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv+0x16>
        if (aux->fuzzySet != NULL){
 80a2812:	6820      	ldr	r0, [r4, #0]
 80a2814:	b110      	cbz	r0, 80a281c <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv+0x12>
            aux->fuzzySet->calculatePertinence(this->crispInput);
 80a2816:	6869      	ldr	r1, [r5, #4]
 80a2818:	f000 fa7e 	bl	80a2d18 <_ZN8FuzzySet19calculatePertinenceEf>
        }
        aux = aux->next;
 80a281c:	6864      	ldr	r4, [r4, #4]
// MÉTODOS PÚBLICOS
bool FuzzyInput::calculateFuzzySetPertinences(){
    fuzzySetArray *aux;
    aux = this->fuzzySets;

    while(aux != NULL){
 80a281e:	e7f7      	b.n	80a2810 <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv+0x6>
        }
        aux = aux->next;
    }
    
    return true;
 80a2820:	2001      	movs	r0, #1
 80a2822:	bd38      	pop	{r3, r4, r5, pc}

080a2824 <_ZN7FuzzyIOC1Ei>:
}

FuzzyIO::FuzzyIO(int index){
    this->index = index;
    // Iniciando os ponteiros como nulo
    this->fuzzySets          = NULL;
 80a2824:	2200      	movs	r2, #0
// CONSTRUTORES
FuzzyIO::FuzzyIO(){
}

FuzzyIO::FuzzyIO(int index){
    this->index = index;
 80a2826:	6001      	str	r1, [r0, #0]
    // Iniciando os ponteiros como nulo
    this->fuzzySets          = NULL;
 80a2828:	6082      	str	r2, [r0, #8]
    this->fuzzySetsCursor    = NULL;
 80a282a:	60c2      	str	r2, [r0, #12]
}
 80a282c:	4770      	bx	lr

080a282e <_ZN7FuzzyIO8getIndexEv>:
}

// MÉTODOS PÚBLICOS
int FuzzyIO::getIndex(){
    return this->index;
}
 80a282e:	6800      	ldr	r0, [r0, #0]
 80a2830:	4770      	bx	lr

080a2832 <_ZN7FuzzyIO13setCrispInputEf>:

void FuzzyIO::setCrispInput(float crispInput){
    this->crispInput = crispInput;
 80a2832:	6041      	str	r1, [r0, #4]
 80a2834:	4770      	bx	lr

080a2836 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>:

float FuzzyIO::getCrispInput(){
    return this->crispInput;
}

bool FuzzyIO::addFuzzySet(FuzzySet* fuzzySet){
 80a2836:	b538      	push	{r3, r4, r5, lr}
 80a2838:	4604      	mov	r4, r0
    fuzzySetArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetArray *) malloc(sizeof(fuzzySetArray))) == NULL){
 80a283a:	2008      	movs	r0, #8

float FuzzyIO::getCrispInput(){
    return this->crispInput;
}

bool FuzzyIO::addFuzzySet(FuzzySet* fuzzySet){
 80a283c:	460d      	mov	r5, r1
    fuzzySetArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetArray *) malloc(sizeof(fuzzySetArray))) == NULL){
 80a283e:	f000 fe39 	bl	80a34b4 <malloc>
 80a2842:	b150      	cbz	r0, 80a285a <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet+0x24>
        return false;
    }
    aux->fuzzySet     = fuzzySet;
    aux->next         = NULL;
 80a2844:	2300      	movs	r3, #0
    fuzzySetArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetArray *) malloc(sizeof(fuzzySetArray))) == NULL){
        return false;
    }
    aux->fuzzySet     = fuzzySet;
 80a2846:	6005      	str	r5, [r0, #0]
    aux->next         = NULL;
 80a2848:	6043      	str	r3, [r0, #4]

    if(this->fuzzySets == NULL){
 80a284a:	68a3      	ldr	r3, [r4, #8]
 80a284c:	b90b      	cbnz	r3, 80a2852 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet+0x1c>
        this->fuzzySets = aux;
 80a284e:	60a0      	str	r0, [r4, #8]
 80a2850:	e001      	b.n	80a2856 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet+0x20>
        this->fuzzySetsCursor = aux;
    }else{
        this->fuzzySetsCursor->next = aux;
 80a2852:	68e3      	ldr	r3, [r4, #12]
 80a2854:	6058      	str	r0, [r3, #4]
        this->fuzzySetsCursor = aux;
 80a2856:	60e0      	str	r0, [r4, #12]
    }
    return true;
 80a2858:	2001      	movs	r0, #1
}
 80a285a:	bd38      	pop	{r3, r4, r5, pc}

080a285c <_ZN7FuzzyIO14resetFuzzySetsEv>:

void FuzzyIO::resetFuzzySets(){
 80a285c:	b510      	push	{r4, lr}
    fuzzySetArray* fuzzySetsAux;
    fuzzySetsAux = this->fuzzySets;
 80a285e:	6884      	ldr	r4, [r0, #8]
    // Calculando as pertinências de totos os FuzzyInputs
    while(fuzzySetsAux != NULL){
 80a2860:	b124      	cbz	r4, 80a286c <_ZN7FuzzyIO14resetFuzzySetsEv+0x10>
        fuzzySetsAux->fuzzySet->reset();
 80a2862:	6820      	ldr	r0, [r4, #0]
 80a2864:	f000 faed 	bl	80a2e42 <_ZN8FuzzySet5resetEv>
        fuzzySetsAux = fuzzySetsAux->next;
 80a2868:	6864      	ldr	r4, [r4, #4]

void FuzzyIO::resetFuzzySets(){
    fuzzySetArray* fuzzySetsAux;
    fuzzySetsAux = this->fuzzySets;
    // Calculando as pertinências de totos os FuzzyInputs
    while(fuzzySetsAux != NULL){
 80a286a:	e7f9      	b.n	80a2860 <_ZN7FuzzyIO14resetFuzzySetsEv+0x4>
 80a286c:	bd10      	pop	{r4, pc}

080a286e <_ZN11FuzzyOutputC1Ei>:

// CONSTRUTORES
FuzzyOutput::FuzzyOutput() : FuzzyIO(){
}

FuzzyOutput::FuzzyOutput(int index) : FuzzyIO(index){
 80a286e:	b510      	push	{r4, lr}
 80a2870:	4604      	mov	r4, r0
 80a2872:	f7ff ffd7 	bl	80a2824 <_ZN7FuzzyIOC1Ei>
 80a2876:	f104 0010 	add.w	r0, r4, #16
 80a287a:	f7ff fda7 	bl	80a23cc <_ZN16FuzzyCompositionC1Ev>
}
 80a287e:	4620      	mov	r0, r4
 80a2880:	bd10      	pop	{r4, pc}

080a2882 <_ZN11FuzzyOutput14getCrispOutputEv>:

    return true;
}

float FuzzyOutput::getCrispOutput(){
    return this->fuzzyComposition.avaliate();
 80a2882:	3010      	adds	r0, #16
 80a2884:	f7ff bdd4 	b.w	80a2430 <_ZN16FuzzyComposition8avaliateEv>

080a2888 <_ZN11FuzzyOutput5orderEv>:
}

// Um simples Bubble Sort
bool FuzzyOutput::order(){
 80a2888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fuzzySetArray *aux1;
    fuzzySetArray *aux2;

    aux1 = this->fuzzySets;
 80a288a:	6884      	ldr	r4, [r0, #8]
float FuzzyOutput::getCrispOutput(){
    return this->fuzzyComposition.avaliate();
}

// Um simples Bubble Sort
bool FuzzyOutput::order(){
 80a288c:	4606      	mov	r6, r0
    fuzzySetArray *aux1;
    fuzzySetArray *aux2;

    aux1 = this->fuzzySets;
 80a288e:	4625      	mov	r5, r4
    aux2 = this->fuzzySets;

    while(aux1 != NULL){
 80a2890:	b1cd      	cbz	r5, 80a28c6 <_ZN11FuzzyOutput5orderEv+0x3e>
        while(aux2 != NULL){
 80a2892:	b1ac      	cbz	r4, 80a28c0 <_ZN11FuzzyOutput5orderEv+0x38>
            if(aux2->next != NULL){
 80a2894:	6863      	ldr	r3, [r4, #4]
 80a2896:	b18b      	cbz	r3, 80a28bc <_ZN11FuzzyOutput5orderEv+0x34>
                if(aux2->fuzzySet->getPointA() > aux2->next->fuzzySet->getPointA()){
 80a2898:	6820      	ldr	r0, [r4, #0]
 80a289a:	f000 fa35 	bl	80a2d08 <_ZN8FuzzySet9getPointAEv>
 80a289e:	6863      	ldr	r3, [r4, #4]
 80a28a0:	4607      	mov	r7, r0
 80a28a2:	6818      	ldr	r0, [r3, #0]
 80a28a4:	f000 fa30 	bl	80a2d08 <_ZN8FuzzySet9getPointAEv>
 80a28a8:	4601      	mov	r1, r0
 80a28aa:	4638      	mov	r0, r7
 80a28ac:	f002 fbc8 	bl	80a5040 <__aeabi_fcmpgt>
 80a28b0:	b120      	cbz	r0, 80a28bc <_ZN11FuzzyOutput5orderEv+0x34>

// MÉTODOS PRIVADOS
bool FuzzyOutput::swap(fuzzySetArray* fuzzySetA, fuzzySetArray* fuzzySetB){
    FuzzySet* aux;
    
    aux = fuzzySetA->fuzzySet;
 80a28b2:	e894 000c 	ldmia.w	r4, {r2, r3}
    fuzzySetA->fuzzySet = fuzzySetB->fuzzySet;
 80a28b6:	6819      	ldr	r1, [r3, #0]
 80a28b8:	6021      	str	r1, [r4, #0]
    fuzzySetB->fuzzySet = aux;
 80a28ba:	601a      	str	r2, [r3, #0]
            if(aux2->next != NULL){
                if(aux2->fuzzySet->getPointA() > aux2->next->fuzzySet->getPointA()){
                    this->swap(aux2, aux2->next);
                }
            }
            aux2 = aux2->next;
 80a28bc:	6864      	ldr	r4, [r4, #4]

    aux1 = this->fuzzySets;
    aux2 = this->fuzzySets;

    while(aux1 != NULL){
        while(aux2 != NULL){
 80a28be:	e7e8      	b.n	80a2892 <_ZN11FuzzyOutput5orderEv+0xa>
                    this->swap(aux2, aux2->next);
                }
            }
            aux2 = aux2->next;
        }
        aux2 = this->fuzzySets;
 80a28c0:	68b4      	ldr	r4, [r6, #8]
        aux1 = aux1->next;
 80a28c2:	686d      	ldr	r5, [r5, #4]
    fuzzySetArray *aux2;

    aux1 = this->fuzzySets;
    aux2 = this->fuzzySets;

    while(aux1 != NULL){
 80a28c4:	e7e4      	b.n	80a2890 <_ZN11FuzzyOutput5orderEv+0x8>
        }
        aux2 = this->fuzzySets;
        aux1 = aux1->next;
    }
    return true;
}
 80a28c6:	2001      	movs	r0, #1
 80a28c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a28ca:	0000      	movs	r0, r0
 80a28cc:	0000      	movs	r0, r0
	...

080a28d0 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_>:
    fuzzySetB->fuzzySet = aux;

    return true;
}

bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
 80a28d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a28d4:	9810      	ldr	r0, [sp, #64]	; 0x40
    fuzzySetB->fuzzySet = aux;

    return true;
}

bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
 80a28d6:	460f      	mov	r7, r1
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a28d8:	990e      	ldr	r1, [sp, #56]	; 0x38
    fuzzySetB->fuzzySet = aux;

    return true;
}

bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
 80a28da:	4615      	mov	r5, r2
 80a28dc:	461c      	mov	r4, r3
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a28de:	f002 f8e9 	bl	80a4ab4 <__aeabi_fsub>
 80a28e2:	4639      	mov	r1, r7
 80a28e4:	4682      	mov	sl, r0
 80a28e6:	4620      	mov	r0, r4
 80a28e8:	f002 f8e4 	bl	80a4ab4 <__aeabi_fsub>
 80a28ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a28ee:	4680      	mov	r8, r0
 80a28f0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80a28f2:	f002 f8df 	bl	80a4ab4 <__aeabi_fsub>
 80a28f6:	4629      	mov	r1, r5
 80a28f8:	4683      	mov	fp, r0
 80a28fa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80a28fc:	f002 f8da 	bl	80a4ab4 <__aeabi_fsub>
 80a2900:	4641      	mov	r1, r8
 80a2902:	4606      	mov	r6, r0
 80a2904:	4650      	mov	r0, sl
 80a2906:	f002 f9df 	bl	80a4cc8 <__aeabi_fmul>
 80a290a:	4631      	mov	r1, r6
 80a290c:	4604      	mov	r4, r0
 80a290e:	4658      	mov	r0, fp
 80a2910:	f002 f9da 	bl	80a4cc8 <__aeabi_fmul>
 80a2914:	4601      	mov	r1, r0
 80a2916:	4620      	mov	r0, r4
 80a2918:	f002 f8cc 	bl	80a4ab4 <__aeabi_fsub>
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a291c:	990e      	ldr	r1, [sp, #56]	; 0x38

bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a291e:	4604      	mov	r4, r0
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a2920:	4628      	mov	r0, r5
 80a2922:	f002 f8c7 	bl	80a4ab4 <__aeabi_fsub>
 80a2926:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a2928:	4681      	mov	r9, r0
 80a292a:	4638      	mov	r0, r7
 80a292c:	f002 f8c2 	bl	80a4ab4 <__aeabi_fsub>
 80a2930:	4649      	mov	r1, r9
 80a2932:	9001      	str	r0, [sp, #4]
 80a2934:	4658      	mov	r0, fp
 80a2936:	f002 f9c7 	bl	80a4cc8 <__aeabi_fmul>
 80a293a:	9901      	ldr	r1, [sp, #4]
 80a293c:	4683      	mov	fp, r0
 80a293e:	4650      	mov	r0, sl
 80a2940:	f002 f9c2 	bl	80a4cc8 <__aeabi_fmul>
 80a2944:	4601      	mov	r1, r0
 80a2946:	4658      	mov	r0, fp
 80a2948:	f002 f8b4 	bl	80a4ab4 <__aeabi_fsub>
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a294c:	4649      	mov	r1, r9
bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a294e:	4682      	mov	sl, r0
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a2950:	4640      	mov	r0, r8
 80a2952:	f002 f9b9 	bl	80a4cc8 <__aeabi_fmul>
 80a2956:	9901      	ldr	r1, [sp, #4]
 80a2958:	4681      	mov	r9, r0
 80a295a:	4630      	mov	r0, r6
 80a295c:	f002 f9b4 	bl	80a4cc8 <__aeabi_fmul>
 80a2960:	4601      	mov	r1, r0
 80a2962:	4648      	mov	r0, r9
 80a2964:	f002 f8a6 	bl	80a4ab4 <__aeabi_fsub>

    if(denom < 0.0){
 80a2968:	2100      	movs	r1, #0
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a296a:	4681      	mov	r9, r0

    if(denom < 0.0){
 80a296c:	4620      	mov	r0, r4
 80a296e:	f002 fb49 	bl	80a5004 <__aeabi_fcmplt>
 80a2972:	b108      	cbz	r0, 80a2978 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0xa8>
        denom *= -1.0;
 80a2974:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    }
    if(numera < 0.0){
 80a2978:	2100      	movs	r1, #0
 80a297a:	4650      	mov	r0, sl
 80a297c:	f002 fb42 	bl	80a5004 <__aeabi_fcmplt>
 80a2980:	b108      	cbz	r0, 80a2986 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0xb6>
        numera *= -1.0;
 80a2982:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
    }
    if(numerb < 0.0){
 80a2986:	2100      	movs	r1, #0
 80a2988:	4648      	mov	r0, r9
 80a298a:	f002 fb3b 	bl	80a5004 <__aeabi_fcmplt>
 80a298e:	b108      	cbz	r0, 80a2994 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0xc4>
        numerb *= -1.0;
 80a2990:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
    }

    // Se os seguimentos forem paralelos, retornar falso
    if(denom < EPS){
 80a2994:	4620      	mov	r0, r4
 80a2996:	f001 fd4b 	bl	80a4430 <__aeabi_f2d>
 80a299a:	a321      	add	r3, pc, #132	; (adr r3, 80a2a20 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x150>)
 80a299c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a29a0:	f002 f80c 	bl	80a49bc <__aeabi_dcmplt>
 80a29a4:	9001      	str	r0, [sp, #4]
 80a29a6:	2800      	cmp	r0, #0
 80a29a8:	d133      	bne.n	80a2a12 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x142>
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
 80a29aa:	4621      	mov	r1, r4
 80a29ac:	4650      	mov	r0, sl
 80a29ae:	f002 fa3f 	bl	80a4e30 <__aeabi_fdiv>
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a29b2:	2100      	movs	r1, #0
    if(denom < EPS){
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
 80a29b4:	4682      	mov	sl, r0
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a29b6:	f002 fb25 	bl	80a5004 <__aeabi_fcmplt>
 80a29ba:	bb50      	cbnz	r0, 80a2a12 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x142>
 80a29bc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a29c0:	4650      	mov	r0, sl
 80a29c2:	f002 fb3d 	bl	80a5040 <__aeabi_fcmpgt>
 80a29c6:	bb20      	cbnz	r0, 80a2a12 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x142>
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
    mub = numerb / denom;
 80a29c8:	4621      	mov	r1, r4
 80a29ca:	9001      	str	r0, [sp, #4]
 80a29cc:	4648      	mov	r0, r9
 80a29ce:	f002 fa2f 	bl	80a4e30 <__aeabi_fdiv>
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a29d2:	2100      	movs	r1, #0
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
    mub = numerb / denom;
 80a29d4:	4681      	mov	r9, r0
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a29d6:	f002 fb15 	bl	80a5004 <__aeabi_fcmplt>
 80a29da:	4604      	mov	r4, r0
 80a29dc:	b9c8      	cbnz	r0, 80a2a12 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x142>
 80a29de:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a29e2:	4648      	mov	r0, r9
 80a29e4:	f002 fb2c 	bl	80a5040 <__aeabi_fcmpgt>
 80a29e8:	b9a8      	cbnz	r0, 80a2a16 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x146>
        return false;
    }else{
        // Calculando o ponto e a pertinencia do novo elemento
        *point      = x1 + mua * (x2 - x1);
 80a29ea:	4651      	mov	r1, sl
 80a29ec:	4640      	mov	r0, r8
 80a29ee:	f002 f96b 	bl	80a4cc8 <__aeabi_fmul>
 80a29f2:	4639      	mov	r1, r7
 80a29f4:	f002 f860 	bl	80a4ab8 <__addsf3>
 80a29f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
        *pertinence = y1 + mua * (y2 - y1);
 80a29fa:	4651      	mov	r1, sl
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
        return false;
    }else{
        // Calculando o ponto e a pertinencia do novo elemento
        *point      = x1 + mua * (x2 - x1);
 80a29fc:	6018      	str	r0, [r3, #0]
        *pertinence = y1 + mua * (y2 - y1);
 80a29fe:	4630      	mov	r0, r6
 80a2a00:	f002 f962 	bl	80a4cc8 <__aeabi_fmul>
 80a2a04:	4629      	mov	r1, r5
 80a2a06:	f002 f857 	bl	80a4ab8 <__addsf3>
 80a2a0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a2a0c:	6018      	str	r0, [r3, #0]

        return true;
 80a2a0e:	2001      	movs	r0, #1
 80a2a10:	e002      	b.n	80a2a18 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x148>
        numerb *= -1.0;
    }

    // Se os seguimentos forem paralelos, retornar falso
    if(denom < EPS){
        return false;
 80a2a12:	2000      	movs	r0, #0
 80a2a14:	e000      	b.n	80a2a18 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x148>
 80a2a16:	4620      	mov	r0, r4
        *point      = x1 + mua * (x2 - x1);
        *pertinence = y1 + mua * (y2 - y1);

        return true;
    }
 80a2a18:	b003      	add	sp, #12
 80a2a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2a1e:	bf00      	nop
 80a2a20:	d2f1a9fc 	.word	0xd2f1a9fc
 80a2a24:	3f50624d 	.word	0x3f50624d

080a2a28 <_ZN11FuzzyOutput8truncateEv>:
FuzzyOutput::~FuzzyOutput(){
    this->fuzzyComposition.empty();
}

// MÉTODOS PÚBLICOS
bool FuzzyOutput::truncate(){
 80a2a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2a2c:	4606      	mov	r6, r0
    // esvaziando a composição
    this->fuzzyComposition.empty();
 80a2a2e:	f100 0510 	add.w	r5, r0, #16
FuzzyOutput::~FuzzyOutput(){
    this->fuzzyComposition.empty();
}

// MÉTODOS PÚBLICOS
bool FuzzyOutput::truncate(){
 80a2a32:	b091      	sub	sp, #68	; 0x44
    // esvaziando a composição
    this->fuzzyComposition.empty();
 80a2a34:	4628      	mov	r0, r5
 80a2a36:	f7ff fdd5 	bl	80a25e4 <_ZN16FuzzyComposition5emptyEv>

    fuzzySetArray *aux;
    aux = this->fuzzySets;
 80a2a3a:	68b4      	ldr	r4, [r6, #8]
                        this->fuzzyComposition.addPoint(newPointC, newPertinenceC);
                    }
                }
            }else if(aux->fuzzySet->getPointB() != aux->fuzzySet->getPointC()){
                // se trapezio
                if(aux->fuzzySet->getPertinence() == 1.0){
 80a2a3c:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
                    }
                }else{
                    float newPointB         = aux->fuzzySet->getPointB();
                    float newPertinenceB    = aux->fuzzySet->getPertinence();

                    rebuild(aux->fuzzySet->getPointA(), 0.0, aux->fuzzySet->getPointB(), 1.0, aux->fuzzySet->getPointA(), aux->fuzzySet->getPertinence(), aux->fuzzySet->getPointD(), aux->fuzzySet->getPertinence(), &newPointB, &newPertinenceB);
 80a2a40:	af0d      	add	r7, sp, #52	; 0x34
    // esvaziando a composição
    this->fuzzyComposition.empty();

    fuzzySetArray *aux;
    aux = this->fuzzySets;
    while(aux != NULL){
 80a2a42:	2c00      	cmp	r4, #0
 80a2a44:	f000 8150 	beq.w	80a2ce8 <_ZN11FuzzyOutput8truncateEv+0x2c0>
        if(aux->fuzzySet->getPertinence() > 0.0){
 80a2a48:	6820      	ldr	r0, [r4, #0]
 80a2a4a:	f000 f9f8 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a2a4e:	2100      	movs	r1, #0
 80a2a50:	f002 faf6 	bl	80a5040 <__aeabi_fcmpgt>
 80a2a54:	2800      	cmp	r0, #0
 80a2a56:	f000 80d8 	beq.w	80a2c0a <_ZN11FuzzyOutput8truncateEv+0x1e2>
            // Se não for trapezio iniciado com pertinencia 1 (sem o triangulo esquerdo)
            if(aux->fuzzySet->getPointA() != aux->fuzzySet->getPointB()){
 80a2a5a:	6820      	ldr	r0, [r4, #0]
 80a2a5c:	f000 f954 	bl	80a2d08 <_ZN8FuzzySet9getPointAEv>
 80a2a60:	4680      	mov	r8, r0
 80a2a62:	6820      	ldr	r0, [r4, #0]
 80a2a64:	f000 f952 	bl	80a2d0c <_ZN8FuzzySet9getPointBEv>
 80a2a68:	4601      	mov	r1, r0
 80a2a6a:	4640      	mov	r0, r8
 80a2a6c:	f002 fac0 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a2a70:	b980      	cbnz	r0, 80a2a94 <_ZN11FuzzyOutput8truncateEv+0x6c>
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointA(), 0.0) == false){
 80a2a72:	6820      	ldr	r0, [r4, #0]
 80a2a74:	f000 f948 	bl	80a2d08 <_ZN8FuzzySet9getPointAEv>
 80a2a78:	2200      	movs	r2, #0
 80a2a7a:	4601      	mov	r1, r0
 80a2a7c:	4628      	mov	r0, r5
 80a2a7e:	f7ff fcc2 	bl	80a2406 <_ZN16FuzzyComposition10checkPointEff>
 80a2a82:	b938      	cbnz	r0, 80a2a94 <_ZN11FuzzyOutput8truncateEv+0x6c>
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointA(), 0.0);
 80a2a84:	6820      	ldr	r0, [r4, #0]
 80a2a86:	f000 f93f 	bl	80a2d08 <_ZN8FuzzySet9getPointAEv>
 80a2a8a:	2200      	movs	r2, #0
 80a2a8c:	4601      	mov	r1, r0
 80a2a8e:	4628      	mov	r0, r5
 80a2a90:	f7ff fca0 	bl	80a23d4 <_ZN16FuzzyComposition8addPointEff>
                }
            }

            if(aux->fuzzySet->getPointB() == aux->fuzzySet->getPointC() && aux->fuzzySet->getPointA() != aux->fuzzySet->getPointD()){
 80a2a94:	6820      	ldr	r0, [r4, #0]
 80a2a96:	f000 f939 	bl	80a2d0c <_ZN8FuzzySet9getPointBEv>
 80a2a9a:	4680      	mov	r8, r0
 80a2a9c:	6820      	ldr	r0, [r4, #0]
 80a2a9e:	f000 f937 	bl	80a2d10 <_ZN8FuzzySet9getPointCEv>
 80a2aa2:	4601      	mov	r1, r0
 80a2aa4:	4640      	mov	r0, r8
 80a2aa6:	f002 faa3 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a2aaa:	b168      	cbz	r0, 80a2ac8 <_ZN11FuzzyOutput8truncateEv+0xa0>
 80a2aac:	6820      	ldr	r0, [r4, #0]
 80a2aae:	f000 f92b 	bl	80a2d08 <_ZN8FuzzySet9getPointAEv>
 80a2ab2:	4680      	mov	r8, r0
 80a2ab4:	6820      	ldr	r0, [r4, #0]
 80a2ab6:	f000 f92d 	bl	80a2d14 <_ZN8FuzzySet9getPointDEv>
 80a2aba:	4601      	mov	r1, r0
 80a2abc:	4640      	mov	r0, r8
 80a2abe:	f002 fa97 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a2ac2:	2800      	cmp	r0, #0
 80a2ac4:	f000 80a3 	beq.w	80a2c0e <_ZN11FuzzyOutput8truncateEv+0x1e6>

                    if(this->fuzzyComposition.checkPoint(newPointC, newPertinenceC) == false){
                        this->fuzzyComposition.addPoint(newPointC, newPertinenceC);
                    }
                }
            }else if(aux->fuzzySet->getPointB() != aux->fuzzySet->getPointC()){
 80a2ac8:	6820      	ldr	r0, [r4, #0]
 80a2aca:	f000 f91f 	bl	80a2d0c <_ZN8FuzzySet9getPointBEv>
 80a2ace:	4680      	mov	r8, r0
 80a2ad0:	6820      	ldr	r0, [r4, #0]
 80a2ad2:	f000 f91d 	bl	80a2d10 <_ZN8FuzzySet9getPointCEv>
 80a2ad6:	4601      	mov	r1, r0
 80a2ad8:	4640      	mov	r0, r8
 80a2ada:	f002 fa89 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a2ade:	2800      	cmp	r0, #0
 80a2ae0:	f040 809f 	bne.w	80a2c22 <_ZN11FuzzyOutput8truncateEv+0x1fa>
                // se trapezio
                if(aux->fuzzySet->getPertinence() == 1.0){
 80a2ae4:	6820      	ldr	r0, [r4, #0]
 80a2ae6:	f000 f9aa 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a2aea:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2aee:	f002 fa7f 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a2af2:	2800      	cmp	r0, #0
 80a2af4:	f040 80c4 	bne.w	80a2c80 <_ZN11FuzzyOutput8truncateEv+0x258>

                    if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointC(), aux->fuzzySet->getPertinence()) == false){
                        this->fuzzyComposition.addPoint(aux->fuzzySet->getPointC(), aux->fuzzySet->getPertinence());
                    }
                }else{
                    float newPointB         = aux->fuzzySet->getPointB();
 80a2af8:	6820      	ldr	r0, [r4, #0]
 80a2afa:	f000 f907 	bl	80a2d0c <_ZN8FuzzySet9getPointBEv>
 80a2afe:	900c      	str	r0, [sp, #48]	; 0x30
                    float newPertinenceB    = aux->fuzzySet->getPertinence();
 80a2b00:	6820      	ldr	r0, [r4, #0]
 80a2b02:	f000 f99c 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a2b06:	900d      	str	r0, [sp, #52]	; 0x34

                    rebuild(aux->fuzzySet->getPointA(), 0.0, aux->fuzzySet->getPointB(), 1.0, aux->fuzzySet->getPointA(), aux->fuzzySet->getPertinence(), aux->fuzzySet->getPointD(), aux->fuzzySet->getPertinence(), &newPointB, &newPertinenceB);
 80a2b08:	6820      	ldr	r0, [r4, #0]
 80a2b0a:	f000 f8fd 	bl	80a2d08 <_ZN8FuzzySet9getPointAEv>
 80a2b0e:	4680      	mov	r8, r0
 80a2b10:	6820      	ldr	r0, [r4, #0]
 80a2b12:	f000 f8fb 	bl	80a2d0c <_ZN8FuzzySet9getPointBEv>
 80a2b16:	4682      	mov	sl, r0
 80a2b18:	6820      	ldr	r0, [r4, #0]
 80a2b1a:	f000 f8f5 	bl	80a2d08 <_ZN8FuzzySet9getPointAEv>
 80a2b1e:	4683      	mov	fp, r0
 80a2b20:	6820      	ldr	r0, [r4, #0]
 80a2b22:	f000 f98c 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a2b26:	900a      	str	r0, [sp, #40]	; 0x28
 80a2b28:	6820      	ldr	r0, [r4, #0]
 80a2b2a:	f000 f8f3 	bl	80a2d14 <_ZN8FuzzySet9getPointDEv>
 80a2b2e:	9009      	str	r0, [sp, #36]	; 0x24
 80a2b30:	6820      	ldr	r0, [r4, #0]
 80a2b32:	f000 f984 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a2b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a2b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a2b3a:	a90c      	add	r1, sp, #48	; 0x30
 80a2b3c:	9105      	str	r1, [sp, #20]
 80a2b3e:	9004      	str	r0, [sp, #16]
 80a2b40:	9203      	str	r2, [sp, #12]
 80a2b42:	9302      	str	r3, [sp, #8]
 80a2b44:	2200      	movs	r2, #0
 80a2b46:	4641      	mov	r1, r8
 80a2b48:	9706      	str	r7, [sp, #24]
 80a2b4a:	f8cd b004 	str.w	fp, [sp, #4]
 80a2b4e:	f8cd 9000 	str.w	r9, [sp]
 80a2b52:	4653      	mov	r3, sl
 80a2b54:	4630      	mov	r0, r6
 80a2b56:	f7ff febb 	bl	80a28d0 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_>

                    if(this->fuzzyComposition.checkPoint(newPointB, newPertinenceB) == false){
 80a2b5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a2b5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a2b5e:	4628      	mov	r0, r5
 80a2b60:	f7ff fc51 	bl	80a2406 <_ZN16FuzzyComposition10checkPointEff>
 80a2b64:	b920      	cbnz	r0, 80a2b70 <_ZN11FuzzyOutput8truncateEv+0x148>
                        this->fuzzyComposition.addPoint(newPointB, newPertinenceB);
 80a2b66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a2b68:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a2b6a:	4628      	mov	r0, r5
 80a2b6c:	f7ff fc32 	bl	80a23d4 <_ZN16FuzzyComposition8addPointEff>
                    }

                    float newPointC         = aux->fuzzySet->getPointB();
 80a2b70:	6820      	ldr	r0, [r4, #0]
 80a2b72:	f000 f8cb 	bl	80a2d0c <_ZN8FuzzySet9getPointBEv>
 80a2b76:	900e      	str	r0, [sp, #56]	; 0x38
                    float newPertinenceC    = aux->fuzzySet->getPertinence();
 80a2b78:	6820      	ldr	r0, [r4, #0]
 80a2b7a:	f000 f960 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a2b7e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 80a2b82:	f848 0d04 	str.w	r0, [r8, #-4]!

                    rebuild(aux->fuzzySet->getPointC(), 1.0, aux->fuzzySet->getPointD(), 0.0, aux->fuzzySet->getPointA(), aux->fuzzySet->getPertinence(), aux->fuzzySet->getPointD(), aux->fuzzySet->getPertinence(), &newPointC, &newPertinenceC);
 80a2b86:	6820      	ldr	r0, [r4, #0]
 80a2b88:	f000 f8c2 	bl	80a2d10 <_ZN8FuzzySet9getPointCEv>
 80a2b8c:	4682      	mov	sl, r0
 80a2b8e:	6820      	ldr	r0, [r4, #0]
 80a2b90:	f000 f8c0 	bl	80a2d14 <_ZN8FuzzySet9getPointDEv>
 80a2b94:	4683      	mov	fp, r0
 80a2b96:	6820      	ldr	r0, [r4, #0]
 80a2b98:	f000 f8b6 	bl	80a2d08 <_ZN8FuzzySet9getPointAEv>
 80a2b9c:	9009      	str	r0, [sp, #36]	; 0x24
 80a2b9e:	6820      	ldr	r0, [r4, #0]
 80a2ba0:	f000 f94d 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a2ba4:	900b      	str	r0, [sp, #44]	; 0x2c
 80a2ba6:	6820      	ldr	r0, [r4, #0]
 80a2ba8:	f000 f8b4 	bl	80a2d14 <_ZN8FuzzySet9getPointDEv>
 80a2bac:	900a      	str	r0, [sp, #40]	; 0x28
 80a2bae:	6820      	ldr	r0, [r4, #0]
 80a2bb0:	f000 f945 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a2bb4:	ab0e      	add	r3, sp, #56	; 0x38
 80a2bb6:	9305      	str	r3, [sp, #20]
 80a2bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a2bba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a2bbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a2bbe:	9301      	str	r3, [sp, #4]
 80a2bc0:	2300      	movs	r3, #0
 80a2bc2:	9004      	str	r0, [sp, #16]
 80a2bc4:	9103      	str	r1, [sp, #12]
 80a2bc6:	9202      	str	r2, [sp, #8]
 80a2bc8:	9300      	str	r3, [sp, #0]
 80a2bca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80a2bce:	4651      	mov	r1, sl
 80a2bd0:	f8cd 8018 	str.w	r8, [sp, #24]
 80a2bd4:	465b      	mov	r3, fp
 80a2bd6:	4630      	mov	r0, r6
 80a2bd8:	f7ff fe7a 	bl	80a28d0 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_>

                    if(this->fuzzyComposition.checkPoint(newPointC, newPertinenceC) == false){
 80a2bdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a2bde:	990e      	ldr	r1, [sp, #56]	; 0x38
 80a2be0:	4628      	mov	r0, r5
 80a2be2:	f7ff fc10 	bl	80a2406 <_ZN16FuzzyComposition10checkPointEff>
 80a2be6:	b920      	cbnz	r0, 80a2bf2 <_ZN11FuzzyOutput8truncateEv+0x1ca>
                        this->fuzzyComposition.addPoint(newPointC, newPertinenceC);
 80a2be8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a2bea:	990e      	ldr	r1, [sp, #56]	; 0x38
                    }
                }
            }else{
                //senao singleton
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence()) == false){
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence());
 80a2bec:	4628      	mov	r0, r5
 80a2bee:	f7ff fbf1 	bl	80a23d4 <_ZN16FuzzyComposition8addPointEff>
                }
            }
            
            //Se não for trapezio iniciado com pertinencia 1 (sem o triangulo direito)
            if(aux->fuzzySet->getPointC() != aux->fuzzySet->getPointD()){
 80a2bf2:	6820      	ldr	r0, [r4, #0]
 80a2bf4:	f000 f88c 	bl	80a2d10 <_ZN8FuzzySet9getPointCEv>
 80a2bf8:	4680      	mov	r8, r0
 80a2bfa:	6820      	ldr	r0, [r4, #0]
 80a2bfc:	f000 f88a 	bl	80a2d14 <_ZN8FuzzySet9getPointDEv>
 80a2c00:	4601      	mov	r1, r0
 80a2c02:	4640      	mov	r0, r8
 80a2c04:	f002 f9f4 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a2c08:	b318      	cbz	r0, 80a2c52 <_ZN11FuzzyOutput8truncateEv+0x22a>
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointD(), 0.0) == false || aux->fuzzySet->getPointD() == aux->fuzzySet->getPointA()){
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointD(), 0.0);
                }
            }
        }
        aux = aux->next;
 80a2c0a:	6864      	ldr	r4, [r4, #4]
    // esvaziando a composição
    this->fuzzyComposition.empty();

    fuzzySetArray *aux;
    aux = this->fuzzySets;
    while(aux != NULL){
 80a2c0c:	e719      	b.n	80a2a42 <_ZN11FuzzyOutput8truncateEv+0x1a>
                }
            }

            if(aux->fuzzySet->getPointB() == aux->fuzzySet->getPointC() && aux->fuzzySet->getPointA() != aux->fuzzySet->getPointD()){
                // se trinagulo
                if(aux->fuzzySet->getPertinence() == 1.0){
 80a2c0e:	6820      	ldr	r0, [r4, #0]
 80a2c10:	f000 f915 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a2c14:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2c18:	f002 f9ea 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a2c1c:	2800      	cmp	r0, #0
 80a2c1e:	f43f af6b 	beq.w	80a2af8 <_ZN11FuzzyOutput8truncateEv+0xd0>
                        this->fuzzyComposition.addPoint(newPointC, newPertinenceC);
                    }
                }
            }else{
                //senao singleton
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence()) == false){
 80a2c22:	6820      	ldr	r0, [r4, #0]
 80a2c24:	f000 f872 	bl	80a2d0c <_ZN8FuzzySet9getPointBEv>
 80a2c28:	4680      	mov	r8, r0
 80a2c2a:	6820      	ldr	r0, [r4, #0]
 80a2c2c:	f000 f907 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a2c30:	4641      	mov	r1, r8
 80a2c32:	4602      	mov	r2, r0
 80a2c34:	4628      	mov	r0, r5
 80a2c36:	f7ff fbe6 	bl	80a2406 <_ZN16FuzzyComposition10checkPointEff>
 80a2c3a:	2800      	cmp	r0, #0
 80a2c3c:	d1d9      	bne.n	80a2bf2 <_ZN11FuzzyOutput8truncateEv+0x1ca>
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence());
 80a2c3e:	6820      	ldr	r0, [r4, #0]
 80a2c40:	f000 f864 	bl	80a2d0c <_ZN8FuzzySet9getPointBEv>
 80a2c44:	4680      	mov	r8, r0
 80a2c46:	6820      	ldr	r0, [r4, #0]
 80a2c48:	f000 f8f9 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a2c4c:	4641      	mov	r1, r8
 80a2c4e:	4602      	mov	r2, r0
 80a2c50:	e7cc      	b.n	80a2bec <_ZN11FuzzyOutput8truncateEv+0x1c4>
                }
            }
            
            //Se não for trapezio iniciado com pertinencia 1 (sem o triangulo direito)
            if(aux->fuzzySet->getPointC() != aux->fuzzySet->getPointD()){
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointD(), 0.0) == false || aux->fuzzySet->getPointD() == aux->fuzzySet->getPointA()){
 80a2c52:	6820      	ldr	r0, [r4, #0]
 80a2c54:	f000 f85e 	bl	80a2d14 <_ZN8FuzzySet9getPointDEv>
 80a2c58:	2200      	movs	r2, #0
 80a2c5a:	4601      	mov	r1, r0
 80a2c5c:	4628      	mov	r0, r5
 80a2c5e:	f7ff fbd2 	bl	80a2406 <_ZN16FuzzyComposition10checkPointEff>
 80a2c62:	2800      	cmp	r0, #0
 80a2c64:	d037      	beq.n	80a2cd6 <_ZN11FuzzyOutput8truncateEv+0x2ae>
 80a2c66:	6820      	ldr	r0, [r4, #0]
 80a2c68:	f000 f854 	bl	80a2d14 <_ZN8FuzzySet9getPointDEv>
 80a2c6c:	4680      	mov	r8, r0
 80a2c6e:	6820      	ldr	r0, [r4, #0]
 80a2c70:	f000 f84a 	bl	80a2d08 <_ZN8FuzzySet9getPointAEv>
 80a2c74:	4601      	mov	r1, r0
 80a2c76:	4640      	mov	r0, r8
 80a2c78:	f002 f9ba 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a2c7c:	bb58      	cbnz	r0, 80a2cd6 <_ZN11FuzzyOutput8truncateEv+0x2ae>
 80a2c7e:	e7c4      	b.n	80a2c0a <_ZN11FuzzyOutput8truncateEv+0x1e2>
                    }
                }
            }else if(aux->fuzzySet->getPointB() != aux->fuzzySet->getPointC()){
                // se trapezio
                if(aux->fuzzySet->getPertinence() == 1.0){
                    if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence()) == false){
 80a2c80:	6820      	ldr	r0, [r4, #0]
 80a2c82:	f000 f843 	bl	80a2d0c <_ZN8FuzzySet9getPointBEv>
 80a2c86:	4680      	mov	r8, r0
 80a2c88:	6820      	ldr	r0, [r4, #0]
 80a2c8a:	f000 f8d8 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a2c8e:	4641      	mov	r1, r8
 80a2c90:	4602      	mov	r2, r0
 80a2c92:	4628      	mov	r0, r5
 80a2c94:	f7ff fbb7 	bl	80a2406 <_ZN16FuzzyComposition10checkPointEff>
 80a2c98:	b958      	cbnz	r0, 80a2cb2 <_ZN11FuzzyOutput8truncateEv+0x28a>
                        this->fuzzyComposition.addPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence());
 80a2c9a:	6820      	ldr	r0, [r4, #0]
 80a2c9c:	f000 f836 	bl	80a2d0c <_ZN8FuzzySet9getPointBEv>
 80a2ca0:	4680      	mov	r8, r0
 80a2ca2:	6820      	ldr	r0, [r4, #0]
 80a2ca4:	f000 f8cb 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a2ca8:	4641      	mov	r1, r8
 80a2caa:	4602      	mov	r2, r0
 80a2cac:	4628      	mov	r0, r5
 80a2cae:	f7ff fb91 	bl	80a23d4 <_ZN16FuzzyComposition8addPointEff>
                    }

                    if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointC(), aux->fuzzySet->getPertinence()) == false){
 80a2cb2:	6820      	ldr	r0, [r4, #0]
 80a2cb4:	f000 f82c 	bl	80a2d10 <_ZN8FuzzySet9getPointCEv>
 80a2cb8:	4680      	mov	r8, r0
 80a2cba:	6820      	ldr	r0, [r4, #0]
 80a2cbc:	f000 f8bf 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a2cc0:	4641      	mov	r1, r8
 80a2cc2:	4602      	mov	r2, r0
 80a2cc4:	4628      	mov	r0, r5
 80a2cc6:	f7ff fb9e 	bl	80a2406 <_ZN16FuzzyComposition10checkPointEff>
 80a2cca:	2800      	cmp	r0, #0
 80a2ccc:	d191      	bne.n	80a2bf2 <_ZN11FuzzyOutput8truncateEv+0x1ca>
                        this->fuzzyComposition.addPoint(aux->fuzzySet->getPointC(), aux->fuzzySet->getPertinence());
 80a2cce:	6820      	ldr	r0, [r4, #0]
 80a2cd0:	f000 f81e 	bl	80a2d10 <_ZN8FuzzySet9getPointCEv>
 80a2cd4:	e7b6      	b.n	80a2c44 <_ZN11FuzzyOutput8truncateEv+0x21c>
            }
            
            //Se não for trapezio iniciado com pertinencia 1 (sem o triangulo direito)
            if(aux->fuzzySet->getPointC() != aux->fuzzySet->getPointD()){
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointD(), 0.0) == false || aux->fuzzySet->getPointD() == aux->fuzzySet->getPointA()){
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointD(), 0.0);
 80a2cd6:	6820      	ldr	r0, [r4, #0]
 80a2cd8:	f000 f81c 	bl	80a2d14 <_ZN8FuzzySet9getPointDEv>
 80a2cdc:	2200      	movs	r2, #0
 80a2cde:	4601      	mov	r1, r0
 80a2ce0:	4628      	mov	r0, r5
 80a2ce2:	f7ff fb77 	bl	80a23d4 <_ZN16FuzzyComposition8addPointEff>
 80a2ce6:	e790      	b.n	80a2c0a <_ZN11FuzzyOutput8truncateEv+0x1e2>
            }
        }
        aux = aux->next;
    }

    this->fuzzyComposition.build();
 80a2ce8:	4628      	mov	r0, r5
 80a2cea:	f7ff fd65 	bl	80a27b8 <_ZN16FuzzyComposition5buildEv>

    return true;
}
 80a2cee:	2001      	movs	r0, #1
 80a2cf0:	b011      	add	sp, #68	; 0x44
 80a2cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2cf6 <_ZN8FuzzySetC1Effff>:
#include "FuzzySet.h"

FuzzySet::FuzzySet(){
}

FuzzySet::FuzzySet(float a, float b, float c, float d){
 80a2cf6:	b510      	push	{r4, lr}
    this->a = a;
    this->b = b;
    this->c = c;
 80a2cf8:	6083      	str	r3, [r0, #8]
    this->d = d;
 80a2cfa:	9b02      	ldr	r3, [sp, #8]

FuzzySet::FuzzySet(){
}

FuzzySet::FuzzySet(float a, float b, float c, float d){
    this->a = a;
 80a2cfc:	6001      	str	r1, [r0, #0]
    this->b = b;
    this->c = c;
    this->d = d;
 80a2cfe:	60c3      	str	r3, [r0, #12]
    this->pertinence = 0.0;
 80a2d00:	2300      	movs	r3, #0
FuzzySet::FuzzySet(){
}

FuzzySet::FuzzySet(float a, float b, float c, float d){
    this->a = a;
    this->b = b;
 80a2d02:	6042      	str	r2, [r0, #4]
    this->c = c;
    this->d = d;
    this->pertinence = 0.0;
 80a2d04:	6103      	str	r3, [r0, #16]
}
 80a2d06:	bd10      	pop	{r4, pc}

080a2d08 <_ZN8FuzzySet9getPointAEv>:

float FuzzySet::getPointA(){
    return this->a;
}
 80a2d08:	6800      	ldr	r0, [r0, #0]
 80a2d0a:	4770      	bx	lr

080a2d0c <_ZN8FuzzySet9getPointBEv>:

float FuzzySet::getPointB(){
    return this->b;
}
 80a2d0c:	6840      	ldr	r0, [r0, #4]
 80a2d0e:	4770      	bx	lr

080a2d10 <_ZN8FuzzySet9getPointCEv>:

float FuzzySet::getPointC(){
    return this->c;
}
 80a2d10:	6880      	ldr	r0, [r0, #8]
 80a2d12:	4770      	bx	lr

080a2d14 <_ZN8FuzzySet9getPointDEv>:

float FuzzySet::getPointD(){
    return this->d;
}
 80a2d14:	68c0      	ldr	r0, [r0, #12]
 80a2d16:	4770      	bx	lr

080a2d18 <_ZN8FuzzySet19calculatePertinenceEf>:

bool FuzzySet::calculatePertinence(float crispValue){
 80a2d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float slope;

    if (crispValue < this->a){
 80a2d1c:	6807      	ldr	r7, [r0, #0]

float FuzzySet::getPointD(){
    return this->d;
}

bool FuzzySet::calculatePertinence(float crispValue){
 80a2d1e:	4604      	mov	r4, r0
    float slope;

    if (crispValue < this->a){
 80a2d20:	4638      	mov	r0, r7

float FuzzySet::getPointD(){
    return this->d;
}

bool FuzzySet::calculatePertinence(float crispValue){
 80a2d22:	460d      	mov	r5, r1
    float slope;

    if (crispValue < this->a){
 80a2d24:	f002 f98c 	bl	80a5040 <__aeabi_fcmpgt>
 80a2d28:	6866      	ldr	r6, [r4, #4]
 80a2d2a:	b198      	cbz	r0, 80a2d54 <_ZN8FuzzySet19calculatePertinenceEf+0x3c>
        if (this->a == this->b && this->b != this->c && this->c != this->d){
 80a2d2c:	4631      	mov	r1, r6
 80a2d2e:	4638      	mov	r0, r7
 80a2d30:	f002 f95e 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a2d34:	2800      	cmp	r0, #0
 80a2d36:	d02e      	beq.n	80a2d96 <_ZN8FuzzySet19calculatePertinenceEf+0x7e>
 80a2d38:	68a5      	ldr	r5, [r4, #8]
 80a2d3a:	4630      	mov	r0, r6
 80a2d3c:	4629      	mov	r1, r5
 80a2d3e:	f002 f957 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a2d42:	bb40      	cbnz	r0, 80a2d96 <_ZN8FuzzySet19calculatePertinenceEf+0x7e>
 80a2d44:	4628      	mov	r0, r5
 80a2d46:	68e1      	ldr	r1, [r4, #12]
 80a2d48:	f002 f952 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a2d4c:	bb18      	cbnz	r0, 80a2d96 <_ZN8FuzzySet19calculatePertinenceEf+0x7e>
            this->pertinence = 1.0;
 80a2d4e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80a2d52:	e021      	b.n	80a2d98 <_ZN8FuzzySet19calculatePertinenceEf+0x80>
        }else{
            this->pertinence = 0.0;
        }
    }else if (crispValue >= this->a && crispValue < this->b){
 80a2d54:	4629      	mov	r1, r5
 80a2d56:	4638      	mov	r0, r7
 80a2d58:	f002 f95e 	bl	80a5018 <__aeabi_fcmple>
 80a2d5c:	b9f0      	cbnz	r0, 80a2d9c <_ZN8FuzzySet19calculatePertinenceEf+0x84>
        slope = 1.0 / (this->b - this->a);
        this->pertinence = slope * (crispValue - this->b) + 1.0;
    }else if (crispValue >= this->b && crispValue <= this->c){
 80a2d5e:	4631      	mov	r1, r6
 80a2d60:	4628      	mov	r0, r5
 80a2d62:	f002 f963 	bl	80a502c <__aeabi_fcmpge>
 80a2d66:	2800      	cmp	r0, #0
 80a2d68:	d12f      	bne.n	80a2dca <_ZN8FuzzySet19calculatePertinenceEf+0xb2>
        this->pertinence = 1.0;
    }else if (crispValue > this->c && crispValue <= this->d){
 80a2d6a:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80a2d6e:	4628      	mov	r0, r5
 80a2d70:	4641      	mov	r1, r8
 80a2d72:	f002 f965 	bl	80a5040 <__aeabi_fcmpgt>
 80a2d76:	f8d4 900c 	ldr.w	r9, [r4, #12]
 80a2d7a:	2800      	cmp	r0, #0
 80a2d7c:	d12c      	bne.n	80a2dd8 <_ZN8FuzzySet19calculatePertinenceEf+0xc0>
        slope = 1.0 / (this->c - this->d);
        this->pertinence = slope * (crispValue - this->c) + 1.0;
    }else if (crispValue > this->d){
 80a2d7e:	4649      	mov	r1, r9
 80a2d80:	4628      	mov	r0, r5
 80a2d82:	f002 f95d 	bl	80a5040 <__aeabi_fcmpgt>
 80a2d86:	2800      	cmp	r0, #0
 80a2d88:	d04d      	beq.n	80a2e26 <_ZN8FuzzySet19calculatePertinenceEf+0x10e>
        if (this->c == this->d && this->c != this->b && this->b != this->a){
 80a2d8a:	4649      	mov	r1, r9
 80a2d8c:	4640      	mov	r0, r8
 80a2d8e:	f002 f92f 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a2d92:	2800      	cmp	r0, #0
 80a2d94:	d13e      	bne.n	80a2e14 <_ZN8FuzzySet19calculatePertinenceEf+0xfc>

    if (crispValue < this->a){
        if (this->a == this->b && this->b != this->c && this->c != this->d){
            this->pertinence = 1.0;
        }else{
            this->pertinence = 0.0;
 80a2d96:	2300      	movs	r3, #0
 80a2d98:	6123      	str	r3, [r4, #16]
 80a2d9a:	e044      	b.n	80a2e26 <_ZN8FuzzySet19calculatePertinenceEf+0x10e>
        }
    }else if (crispValue >= this->a && crispValue < this->b){
 80a2d9c:	4631      	mov	r1, r6
 80a2d9e:	4628      	mov	r0, r5
 80a2da0:	f002 f930 	bl	80a5004 <__aeabi_fcmplt>
 80a2da4:	2800      	cmp	r0, #0
 80a2da6:	d0da      	beq.n	80a2d5e <_ZN8FuzzySet19calculatePertinenceEf+0x46>
        slope = 1.0 / (this->b - this->a);
        this->pertinence = slope * (crispValue - this->b) + 1.0;
 80a2da8:	4639      	mov	r1, r7
 80a2daa:	4630      	mov	r0, r6
 80a2dac:	f001 fe82 	bl	80a4ab4 <__aeabi_fsub>
 80a2db0:	4601      	mov	r1, r0
 80a2db2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a2db6:	f002 f83b 	bl	80a4e30 <__aeabi_fdiv>
 80a2dba:	4631      	mov	r1, r6
 80a2dbc:	4607      	mov	r7, r0
 80a2dbe:	4628      	mov	r0, r5
 80a2dc0:	f001 fe78 	bl	80a4ab4 <__aeabi_fsub>
 80a2dc4:	4601      	mov	r1, r0
 80a2dc6:	4638      	mov	r0, r7
 80a2dc8:	e01c      	b.n	80a2e04 <_ZN8FuzzySet19calculatePertinenceEf+0xec>
    }else if (crispValue >= this->b && crispValue <= this->c){
 80a2dca:	68a1      	ldr	r1, [r4, #8]
 80a2dcc:	4628      	mov	r0, r5
 80a2dce:	f002 f923 	bl	80a5018 <__aeabi_fcmple>
 80a2dd2:	2800      	cmp	r0, #0
 80a2dd4:	d0c9      	beq.n	80a2d6a <_ZN8FuzzySet19calculatePertinenceEf+0x52>
 80a2dd6:	e7ba      	b.n	80a2d4e <_ZN8FuzzySet19calculatePertinenceEf+0x36>
        this->pertinence = 1.0;
    }else if (crispValue > this->c && crispValue <= this->d){
 80a2dd8:	4649      	mov	r1, r9
 80a2dda:	4628      	mov	r0, r5
 80a2ddc:	f002 f91c 	bl	80a5018 <__aeabi_fcmple>
 80a2de0:	2800      	cmp	r0, #0
 80a2de2:	d0cc      	beq.n	80a2d7e <_ZN8FuzzySet19calculatePertinenceEf+0x66>
        slope = 1.0 / (this->c - this->d);
        this->pertinence = slope * (crispValue - this->c) + 1.0;
 80a2de4:	4649      	mov	r1, r9
 80a2de6:	4640      	mov	r0, r8
 80a2de8:	f001 fe64 	bl	80a4ab4 <__aeabi_fsub>
 80a2dec:	4601      	mov	r1, r0
 80a2dee:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a2df2:	f002 f81d 	bl	80a4e30 <__aeabi_fdiv>
 80a2df6:	4641      	mov	r1, r8
 80a2df8:	4606      	mov	r6, r0
 80a2dfa:	4628      	mov	r0, r5
 80a2dfc:	f001 fe5a 	bl	80a4ab4 <__aeabi_fsub>
 80a2e00:	4601      	mov	r1, r0
 80a2e02:	4630      	mov	r0, r6
 80a2e04:	f001 ff60 	bl	80a4cc8 <__aeabi_fmul>
 80a2e08:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2e0c:	f001 fe54 	bl	80a4ab8 <__addsf3>
 80a2e10:	6120      	str	r0, [r4, #16]
 80a2e12:	e008      	b.n	80a2e26 <_ZN8FuzzySet19calculatePertinenceEf+0x10e>
    }else if (crispValue > this->d){
        if (this->c == this->d && this->c != this->b && this->b != this->a){
 80a2e14:	4641      	mov	r1, r8
 80a2e16:	4630      	mov	r0, r6
 80a2e18:	f002 f8ea 	bl	80a4ff0 <__aeabi_fcmpeq>
 80a2e1c:	2800      	cmp	r0, #0
 80a2e1e:	d1ba      	bne.n	80a2d96 <_ZN8FuzzySet19calculatePertinenceEf+0x7e>
 80a2e20:	4631      	mov	r1, r6
 80a2e22:	4638      	mov	r0, r7
 80a2e24:	e790      	b.n	80a2d48 <_ZN8FuzzySet19calculatePertinenceEf+0x30>
        }else{
            this->pertinence = 0.0;
        }
    }
    return true;
}
 80a2e26:	2001      	movs	r0, #1
 80a2e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a2e2c <_ZN8FuzzySet13setPertinenceEf>:

void FuzzySet::setPertinence(float pertinence){
 80a2e2c:	b538      	push	{r3, r4, r5, lr}
 80a2e2e:	4604      	mov	r4, r0
    if(this->pertinence < pertinence){
 80a2e30:	6900      	ldr	r0, [r0, #16]
        }
    }
    return true;
}

void FuzzySet::setPertinence(float pertinence){
 80a2e32:	460d      	mov	r5, r1
    if(this->pertinence < pertinence){
 80a2e34:	f002 f8e6 	bl	80a5004 <__aeabi_fcmplt>
 80a2e38:	b100      	cbz	r0, 80a2e3c <_ZN8FuzzySet13setPertinenceEf+0x10>
        this->pertinence = pertinence;
 80a2e3a:	6125      	str	r5, [r4, #16]
 80a2e3c:	bd38      	pop	{r3, r4, r5, pc}

080a2e3e <_ZN8FuzzySet13getPertinenceEv>:
    }
}

float FuzzySet::getPertinence(){
    return this->pertinence;
}
 80a2e3e:	6900      	ldr	r0, [r0, #16]
 80a2e40:	4770      	bx	lr

080a2e42 <_ZN8FuzzySet5resetEv>:

void FuzzySet::reset(){
    this->pertinence = 0.0;
 80a2e42:	2300      	movs	r3, #0
 80a2e44:	6103      	str	r3, [r0, #16]
 80a2e46:	4770      	bx	lr

080a2e48 <_ZN19FuzzyRuleConsequentC1Ev>:
 */
#include "FuzzyRuleConsequent.h"

// CONSTRUTORES
FuzzyRuleConsequent::FuzzyRuleConsequent(){
    this->fuzzySetOutputs = NULL;
 80a2e48:	2200      	movs	r2, #0
 80a2e4a:	6042      	str	r2, [r0, #4]
    this->fuzzySetOutputsCursor = NULL;
 80a2e4c:	6002      	str	r2, [r0, #0]
}
 80a2e4e:	4770      	bx	lr

080a2e50 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>:
FuzzyRuleConsequent::~FuzzyRuleConsequent(){
    this->cleanFuzzySets(this->fuzzySetOutputs);
}

// MÉTODOS PÚBLICOS
bool FuzzyRuleConsequent::addOutput(FuzzySet* fuzzySet){
 80a2e50:	b538      	push	{r3, r4, r5, lr}
 80a2e52:	4604      	mov	r4, r0
    fuzzySetOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetOutputArray *) malloc(sizeof(fuzzySetOutputArray))) == NULL){
 80a2e54:	2008      	movs	r0, #8
FuzzyRuleConsequent::~FuzzyRuleConsequent(){
    this->cleanFuzzySets(this->fuzzySetOutputs);
}

// MÉTODOS PÚBLICOS
bool FuzzyRuleConsequent::addOutput(FuzzySet* fuzzySet){
 80a2e56:	460d      	mov	r5, r1
    fuzzySetOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetOutputArray *) malloc(sizeof(fuzzySetOutputArray))) == NULL){
 80a2e58:	f000 fb2c 	bl	80a34b4 <malloc>
 80a2e5c:	b150      	cbz	r0, 80a2e74 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet+0x24>
        return false;
    }
    aux->fuzzySet     = fuzzySet;
    aux->next         = NULL;
 80a2e5e:	2300      	movs	r3, #0
    fuzzySetOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetOutputArray *) malloc(sizeof(fuzzySetOutputArray))) == NULL){
        return false;
    }
    aux->fuzzySet     = fuzzySet;
 80a2e60:	6005      	str	r5, [r0, #0]
    aux->next         = NULL;
 80a2e62:	6043      	str	r3, [r0, #4]

    if(this->fuzzySetOutputs == NULL){
 80a2e64:	6863      	ldr	r3, [r4, #4]
 80a2e66:	b90b      	cbnz	r3, 80a2e6c <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet+0x1c>
        this->fuzzySetOutputs = aux;
 80a2e68:	6060      	str	r0, [r4, #4]
 80a2e6a:	e001      	b.n	80a2e70 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet+0x20>
        this->fuzzySetOutputsCursor    = aux;
    }else{
        this->fuzzySetOutputsCursor->next = aux;
 80a2e6c:	6823      	ldr	r3, [r4, #0]
 80a2e6e:	6058      	str	r0, [r3, #4]
        this->fuzzySetOutputsCursor = aux;
 80a2e70:	6020      	str	r0, [r4, #0]
    }
    return true;
 80a2e72:	2001      	movs	r0, #1
}
 80a2e74:	bd38      	pop	{r3, r4, r5, pc}

080a2e76 <_ZN19FuzzyRuleConsequent8evaluateEf>:

bool FuzzyRuleConsequent::evaluate(float power){
 80a2e76:	b538      	push	{r3, r4, r5, lr}
 80a2e78:	460d      	mov	r5, r1
    fuzzySetOutputArray *aux;
    aux = this->fuzzySetOutputs;
 80a2e7a:	6844      	ldr	r4, [r0, #4]
    while(aux != NULL){
 80a2e7c:	b12c      	cbz	r4, 80a2e8a <_ZN19FuzzyRuleConsequent8evaluateEf+0x14>
        aux->fuzzySet->setPertinence(power);
 80a2e7e:	6820      	ldr	r0, [r4, #0]
 80a2e80:	4629      	mov	r1, r5
 80a2e82:	f7ff ffd3 	bl	80a2e2c <_ZN8FuzzySet13setPertinenceEf>
        aux = aux->next;
 80a2e86:	6864      	ldr	r4, [r4, #4]
}

bool FuzzyRuleConsequent::evaluate(float power){
    fuzzySetOutputArray *aux;
    aux = this->fuzzySetOutputs;
    while(aux != NULL){
 80a2e88:	e7f8      	b.n	80a2e7c <_ZN19FuzzyRuleConsequent8evaluateEf+0x6>
        aux->fuzzySet->setPertinence(power);
        aux = aux->next;
    }
    return true;
}
 80a2e8a:	2001      	movs	r0, #1
 80a2e8c:	bd38      	pop	{r3, r4, r5, pc}

080a2e8e <_ZN5FuzzyC1Ev>:

// CONSTRUTORES
Fuzzy::Fuzzy(){
    // Iniciando os ponteiros como nulo
    // FuzzyInput
    this->fuzzyInputs       = NULL;
 80a2e8e:	2200      	movs	r2, #0
 80a2e90:	6042      	str	r2, [r0, #4]
    this->fuzzyInputsCursor = NULL;
 80a2e92:	6002      	str	r2, [r0, #0]
    // FuzzyOutput
    this->fuzzyOutputs          = NULL;
 80a2e94:	60c2      	str	r2, [r0, #12]
    this->fuzzyOutputsCursor    = NULL;
 80a2e96:	6082      	str	r2, [r0, #8]
    // FuzzyRule
    this->fuzzyRules        = NULL;
 80a2e98:	6142      	str	r2, [r0, #20]
    this->fuzzyRulesCursor  = NULL;
 80a2e9a:	6102      	str	r2, [r0, #16]
}
 80a2e9c:	4770      	bx	lr

080a2e9e <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>:
    this->cleanFuzzyOutputs(this->fuzzyOutputs);
    this->cleanFuzzyRules(this->fuzzyRules);
}

// MÉTODOS PÚBLICOS
bool Fuzzy::addFuzzyInput(FuzzyInput* fuzzyInput){
 80a2e9e:	b538      	push	{r3, r4, r5, lr}
 80a2ea0:	4604      	mov	r4, r0
    fuzzyInputArray* aux;
    
    // Alocando espaço na memória
    if((aux = (fuzzyInputArray *) malloc(sizeof(fuzzyInputArray))) == NULL){
 80a2ea2:	2008      	movs	r0, #8
    this->cleanFuzzyOutputs(this->fuzzyOutputs);
    this->cleanFuzzyRules(this->fuzzyRules);
}

// MÉTODOS PÚBLICOS
bool Fuzzy::addFuzzyInput(FuzzyInput* fuzzyInput){
 80a2ea4:	460d      	mov	r5, r1
    fuzzyInputArray* aux;
    
    // Alocando espaço na memória
    if((aux = (fuzzyInputArray *) malloc(sizeof(fuzzyInputArray))) == NULL){
 80a2ea6:	f000 fb05 	bl	80a34b4 <malloc>
 80a2eaa:	b150      	cbz	r0, 80a2ec2 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput+0x24>
        return false;
    }

    aux->fuzzyInput = fuzzyInput;
    aux->next = NULL;
 80a2eac:	2300      	movs	r3, #0
    // Alocando espaço na memória
    if((aux = (fuzzyInputArray *) malloc(sizeof(fuzzyInputArray))) == NULL){
        return false;
    }

    aux->fuzzyInput = fuzzyInput;
 80a2eae:	6005      	str	r5, [r0, #0]
    aux->next = NULL;
 80a2eb0:	6043      	str	r3, [r0, #4]

    if(this->fuzzyInputs == NULL){
 80a2eb2:	6863      	ldr	r3, [r4, #4]
 80a2eb4:	b90b      	cbnz	r3, 80a2eba <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput+0x1c>
        this->fuzzyInputs = aux;
 80a2eb6:	6060      	str	r0, [r4, #4]
 80a2eb8:	e001      	b.n	80a2ebe <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput+0x20>
        this->fuzzyInputsCursor  = aux;
    }else{
        this->fuzzyInputsCursor->next = aux;
 80a2eba:	6823      	ldr	r3, [r4, #0]
 80a2ebc:	6058      	str	r0, [r3, #4]
        this->fuzzyInputsCursor = aux;
 80a2ebe:	6020      	str	r0, [r4, #0]
    }

    return true;
 80a2ec0:	2001      	movs	r0, #1
}
 80a2ec2:	bd38      	pop	{r3, r4, r5, pc}

080a2ec4 <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput>:

bool Fuzzy::addFuzzyOutput(FuzzyOutput* fuzzyOutput){
 80a2ec4:	b570      	push	{r4, r5, r6, lr}
 80a2ec6:	4605      	mov	r5, r0
    fuzzyOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzyOutputArray *) malloc(sizeof(fuzzyOutputArray))) == NULL){
 80a2ec8:	2008      	movs	r0, #8
    }

    return true;
}

bool Fuzzy::addFuzzyOutput(FuzzyOutput* fuzzyOutput){
 80a2eca:	460e      	mov	r6, r1
    fuzzyOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzyOutputArray *) malloc(sizeof(fuzzyOutputArray))) == NULL){
 80a2ecc:	f000 faf2 	bl	80a34b4 <malloc>
 80a2ed0:	4604      	mov	r4, r0
 80a2ed2:	b170      	cbz	r0, 80a2ef2 <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput+0x2e>
        return false;
    }
    aux->fuzzyOutput = fuzzyOutput;
    aux->next = NULL;
 80a2ed4:	2300      	movs	r3, #0
 80a2ed6:	6043      	str	r3, [r0, #4]
    fuzzyOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzyOutputArray *) malloc(sizeof(fuzzyOutputArray))) == NULL){
        return false;
    }
    aux->fuzzyOutput = fuzzyOutput;
 80a2ed8:	6006      	str	r6, [r0, #0]
    aux->next = NULL;

    // Ordenando o fuzzyOutput
    fuzzyOutput->order();
 80a2eda:	4630      	mov	r0, r6
 80a2edc:	f7ff fcd4 	bl	80a2888 <_ZN11FuzzyOutput5orderEv>

    if(this->fuzzyOutputs == NULL){
 80a2ee0:	68eb      	ldr	r3, [r5, #12]
 80a2ee2:	b90b      	cbnz	r3, 80a2ee8 <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput+0x24>
        this->fuzzyOutputs = aux;
 80a2ee4:	60ec      	str	r4, [r5, #12]
 80a2ee6:	e001      	b.n	80a2eec <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput+0x28>
        this->fuzzyOutputsCursor  = aux;
    }else{
        this->fuzzyOutputsCursor->next = aux;
 80a2ee8:	68ab      	ldr	r3, [r5, #8]
 80a2eea:	605c      	str	r4, [r3, #4]
        this->fuzzyOutputsCursor = aux;
 80a2eec:	60ac      	str	r4, [r5, #8]
    }
    return true;
 80a2eee:	2001      	movs	r0, #1
 80a2ef0:	bd70      	pop	{r4, r5, r6, pc}
}
 80a2ef2:	bd70      	pop	{r4, r5, r6, pc}

080a2ef4 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>:

bool Fuzzy::addFuzzyRule(FuzzyRule* fuzzyRule){
 80a2ef4:	b538      	push	{r3, r4, r5, lr}
 80a2ef6:	4604      	mov	r4, r0
    fuzzyRuleArray* aux;
    // Alocando espaço na memória
    if((aux = (fuzzyRuleArray *) malloc(sizeof(fuzzyRuleArray))) == NULL){
 80a2ef8:	2008      	movs	r0, #8
        this->fuzzyOutputsCursor = aux;
    }
    return true;
}

bool Fuzzy::addFuzzyRule(FuzzyRule* fuzzyRule){
 80a2efa:	460d      	mov	r5, r1
    fuzzyRuleArray* aux;
    // Alocando espaço na memória
    if((aux = (fuzzyRuleArray *) malloc(sizeof(fuzzyRuleArray))) == NULL){
 80a2efc:	f000 fada 	bl	80a34b4 <malloc>
 80a2f00:	b150      	cbz	r0, 80a2f18 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule+0x24>
        return false;
    }
    aux->fuzzyRule = fuzzyRule;
    aux->next = NULL;
 80a2f02:	2300      	movs	r3, #0
    fuzzyRuleArray* aux;
    // Alocando espaço na memória
    if((aux = (fuzzyRuleArray *) malloc(sizeof(fuzzyRuleArray))) == NULL){
        return false;
    }
    aux->fuzzyRule = fuzzyRule;
 80a2f04:	6005      	str	r5, [r0, #0]
    aux->next = NULL;
 80a2f06:	6043      	str	r3, [r0, #4]

    if(this->fuzzyRules == NULL){
 80a2f08:	6963      	ldr	r3, [r4, #20]
 80a2f0a:	b90b      	cbnz	r3, 80a2f10 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule+0x1c>
        this->fuzzyRules = aux;
 80a2f0c:	6160      	str	r0, [r4, #20]
 80a2f0e:	e001      	b.n	80a2f14 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule+0x20>
        this->fuzzyRulesCursor  = aux;
    }else{
        this->fuzzyRulesCursor->next = aux;
 80a2f10:	6923      	ldr	r3, [r4, #16]
 80a2f12:	6058      	str	r0, [r3, #4]
        this->fuzzyRulesCursor = aux;
 80a2f14:	6120      	str	r0, [r4, #16]
    }
    return true;
 80a2f16:	2001      	movs	r0, #1
}
 80a2f18:	bd38      	pop	{r3, r4, r5, pc}

080a2f1a <_ZN5Fuzzy8setInputEif>:

bool Fuzzy::setInput(int fuzzyInputIndex, float crispValue){
 80a2f1a:	b570      	push	{r4, r5, r6, lr}
 80a2f1c:	460d      	mov	r5, r1
 80a2f1e:	4616      	mov	r6, r2
    fuzzyInputArray *aux;
    aux = this->fuzzyInputs;
 80a2f20:	6844      	ldr	r4, [r0, #4]

    while(aux != NULL){
 80a2f22:	b164      	cbz	r4, 80a2f3e <_ZN5Fuzzy8setInputEif+0x24>
        if(aux->fuzzyInput->getIndex() == fuzzyInputIndex){
 80a2f24:	6820      	ldr	r0, [r4, #0]
 80a2f26:	f7ff fc82 	bl	80a282e <_ZN7FuzzyIO8getIndexEv>
 80a2f2a:	42a8      	cmp	r0, r5
 80a2f2c:	d105      	bne.n	80a2f3a <_ZN5Fuzzy8setInputEif+0x20>
            aux->fuzzyInput->setCrispInput(crispValue);
 80a2f2e:	6820      	ldr	r0, [r4, #0]
 80a2f30:	4631      	mov	r1, r6
 80a2f32:	f7ff fc7e 	bl	80a2832 <_ZN7FuzzyIO13setCrispInputEf>
            return true;
 80a2f36:	2001      	movs	r0, #1
 80a2f38:	bd70      	pop	{r4, r5, r6, pc}
        }
        aux = aux->next;
 80a2f3a:	6864      	ldr	r4, [r4, #4]

bool Fuzzy::setInput(int fuzzyInputIndex, float crispValue){
    fuzzyInputArray *aux;
    aux = this->fuzzyInputs;

    while(aux != NULL){
 80a2f3c:	e7f1      	b.n	80a2f22 <_ZN5Fuzzy8setInputEif+0x8>
            aux->fuzzyInput->setCrispInput(crispValue);
            return true;
        }
        aux = aux->next;
    }
    return false;
 80a2f3e:	4620      	mov	r0, r4
}
 80a2f40:	bd70      	pop	{r4, r5, r6, pc}

080a2f42 <_ZN5Fuzzy7fuzzifyEv>:

bool Fuzzy::fuzzify(){
 80a2f42:	b538      	push	{r3, r4, r5, lr}
 80a2f44:	4604      	mov	r4, r0
    fuzzyInputArray* fuzzyInputAux;

    fuzzyOutputArray *fuzzyOutputAux;

    fuzzyInputAux = this->fuzzyInputs;
 80a2f46:	6845      	ldr	r5, [r0, #4]
    while(fuzzyInputAux != NULL){
 80a2f48:	b125      	cbz	r5, 80a2f54 <_ZN5Fuzzy7fuzzifyEv+0x12>
        fuzzyInputAux->fuzzyInput->resetFuzzySets();
 80a2f4a:	6828      	ldr	r0, [r5, #0]
 80a2f4c:	f7ff fc86 	bl	80a285c <_ZN7FuzzyIO14resetFuzzySetsEv>
        fuzzyInputAux = fuzzyInputAux->next;
 80a2f50:	686d      	ldr	r5, [r5, #4]
    fuzzyInputArray* fuzzyInputAux;

    fuzzyOutputArray *fuzzyOutputAux;

    fuzzyInputAux = this->fuzzyInputs;
    while(fuzzyInputAux != NULL){
 80a2f52:	e7f9      	b.n	80a2f48 <_ZN5Fuzzy7fuzzifyEv+0x6>
        fuzzyInputAux->fuzzyInput->resetFuzzySets();
        fuzzyInputAux = fuzzyInputAux->next;
    }

    fuzzyOutputAux = this->fuzzyOutputs;
 80a2f54:	68e5      	ldr	r5, [r4, #12]
    while(fuzzyOutputAux != NULL){
 80a2f56:	b125      	cbz	r5, 80a2f62 <_ZN5Fuzzy7fuzzifyEv+0x20>
        fuzzyOutputAux->fuzzyOutput->resetFuzzySets();
 80a2f58:	6828      	ldr	r0, [r5, #0]
 80a2f5a:	f7ff fc7f 	bl	80a285c <_ZN7FuzzyIO14resetFuzzySetsEv>
        fuzzyOutputAux = fuzzyOutputAux->next;
 80a2f5e:	686d      	ldr	r5, [r5, #4]
        fuzzyInputAux->fuzzyInput->resetFuzzySets();
        fuzzyInputAux = fuzzyInputAux->next;
    }

    fuzzyOutputAux = this->fuzzyOutputs;
    while(fuzzyOutputAux != NULL){
 80a2f60:	e7f9      	b.n	80a2f56 <_ZN5Fuzzy7fuzzifyEv+0x14>
        fuzzyOutputAux->fuzzyOutput->resetFuzzySets();
        fuzzyOutputAux = fuzzyOutputAux->next;
    }

    // Calculando a pertinência de todos os FuzzyInputs
    fuzzyInputAux = this->fuzzyInputs;
 80a2f62:	6865      	ldr	r5, [r4, #4]
    while(fuzzyInputAux != NULL){
 80a2f64:	b125      	cbz	r5, 80a2f70 <_ZN5Fuzzy7fuzzifyEv+0x2e>
        fuzzyInputAux->fuzzyInput->calculateFuzzySetPertinences();
 80a2f66:	6828      	ldr	r0, [r5, #0]
 80a2f68:	f7ff fc4f 	bl	80a280a <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv>
        fuzzyInputAux = fuzzyInputAux->next;
 80a2f6c:	686d      	ldr	r5, [r5, #4]
        fuzzyOutputAux = fuzzyOutputAux->next;
    }

    // Calculando a pertinência de todos os FuzzyInputs
    fuzzyInputAux = this->fuzzyInputs;
    while(fuzzyInputAux != NULL){
 80a2f6e:	e7f9      	b.n	80a2f64 <_ZN5Fuzzy7fuzzifyEv+0x22>
        fuzzyInputAux = fuzzyInputAux->next;
    }

    // Avaliando quais regras foram disparadas
    fuzzyRuleArray* fuzzyRuleAux;
    fuzzyRuleAux = this->fuzzyRules;
 80a2f70:	6965      	ldr	r5, [r4, #20]
    // Calculando as pertinências de totos os FuzzyInputs
    while(fuzzyRuleAux != NULL){
 80a2f72:	b125      	cbz	r5, 80a2f7e <_ZN5Fuzzy7fuzzifyEv+0x3c>
        fuzzyRuleAux->fuzzyRule->evaluateExpression();
 80a2f74:	6828      	ldr	r0, [r5, #0]
 80a2f76:	f7ff fa14 	bl	80a23a2 <_ZN9FuzzyRule18evaluateExpressionEv>
        fuzzyRuleAux = fuzzyRuleAux->next;
 80a2f7a:	686d      	ldr	r5, [r5, #4]

    // Avaliando quais regras foram disparadas
    fuzzyRuleArray* fuzzyRuleAux;
    fuzzyRuleAux = this->fuzzyRules;
    // Calculando as pertinências de totos os FuzzyInputs
    while(fuzzyRuleAux != NULL){
 80a2f7c:	e7f9      	b.n	80a2f72 <_ZN5Fuzzy7fuzzifyEv+0x30>
        fuzzyRuleAux->fuzzyRule->evaluateExpression();
        fuzzyRuleAux = fuzzyRuleAux->next;
    }

    // Truncado os conjuntos de saída
    fuzzyOutputAux = this->fuzzyOutputs;
 80a2f7e:	68e4      	ldr	r4, [r4, #12]
    while(fuzzyOutputAux != NULL){
 80a2f80:	b124      	cbz	r4, 80a2f8c <_ZN5Fuzzy7fuzzifyEv+0x4a>
        fuzzyOutputAux->fuzzyOutput->truncate();
 80a2f82:	6820      	ldr	r0, [r4, #0]
 80a2f84:	f7ff fd50 	bl	80a2a28 <_ZN11FuzzyOutput8truncateEv>
        fuzzyOutputAux = fuzzyOutputAux->next;
 80a2f88:	6864      	ldr	r4, [r4, #4]
        fuzzyRuleAux = fuzzyRuleAux->next;
    }

    // Truncado os conjuntos de saída
    fuzzyOutputAux = this->fuzzyOutputs;
    while(fuzzyOutputAux != NULL){
 80a2f8a:	e7f9      	b.n	80a2f80 <_ZN5Fuzzy7fuzzifyEv+0x3e>
        fuzzyOutputAux->fuzzyOutput->truncate();
        fuzzyOutputAux = fuzzyOutputAux->next;
    }

    return true;
}
 80a2f8c:	2001      	movs	r0, #1
 80a2f8e:	bd38      	pop	{r3, r4, r5, pc}

080a2f90 <_ZN5Fuzzy9defuzzifyEi>:
        aux = aux->next;
    }
    return false;
}

float Fuzzy::defuzzify(int fuzzyOutputIndex){
 80a2f90:	b538      	push	{r3, r4, r5, lr}
 80a2f92:	460d      	mov	r5, r1
    fuzzyOutputArray *aux;
    aux = this->fuzzyOutputs;
 80a2f94:	68c4      	ldr	r4, [r0, #12]
    while(aux != NULL){
 80a2f96:	b15c      	cbz	r4, 80a2fb0 <_ZN5Fuzzy9defuzzifyEi+0x20>
        if(aux->fuzzyOutput->getIndex() == fuzzyOutputIndex){
 80a2f98:	6820      	ldr	r0, [r4, #0]
 80a2f9a:	f7ff fc48 	bl	80a282e <_ZN7FuzzyIO8getIndexEv>
 80a2f9e:	42a8      	cmp	r0, r5
 80a2fa0:	d104      	bne.n	80a2fac <_ZN5Fuzzy9defuzzifyEi+0x1c>
            return aux->fuzzyOutput->getCrispOutput();
 80a2fa2:	6820      	ldr	r0, [r4, #0]
        }
        aux = aux->next;
    }
    return 0;
}
 80a2fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
float Fuzzy::defuzzify(int fuzzyOutputIndex){
    fuzzyOutputArray *aux;
    aux = this->fuzzyOutputs;
    while(aux != NULL){
        if(aux->fuzzyOutput->getIndex() == fuzzyOutputIndex){
            return aux->fuzzyOutput->getCrispOutput();
 80a2fa8:	f7ff bc6b 	b.w	80a2882 <_ZN11FuzzyOutput14getCrispOutputEv>
        }
        aux = aux->next;
 80a2fac:	6864      	ldr	r4, [r4, #4]
}

float Fuzzy::defuzzify(int fuzzyOutputIndex){
    fuzzyOutputArray *aux;
    aux = this->fuzzyOutputs;
    while(aux != NULL){
 80a2fae:	e7f2      	b.n	80a2f96 <_ZN5Fuzzy9defuzzifyEi+0x6>
            return aux->fuzzyOutput->getCrispOutput();
        }
        aux = aux->next;
    }
    return 0;
}
 80a2fb0:	2000      	movs	r0, #0
 80a2fb2:	bd38      	pop	{r3, r4, r5, pc}

080a2fb4 <_ZN19FuzzyRuleAntecedentC1Ev>:
 */
#include "FuzzyRuleAntecedent.h"

// CONSTRUTORES
FuzzyRuleAntecedent::FuzzyRuleAntecedent(){
    this->op = 0;
 80a2fb4:	2200      	movs	r2, #0
 80a2fb6:	6002      	str	r2, [r0, #0]
    this->mode = 0;
 80a2fb8:	6042      	str	r2, [r0, #4]
    this->fuzzySet1 = NULL;
 80a2fba:	6082      	str	r2, [r0, #8]
    this->fuzzySet2 = NULL;
 80a2fbc:	60c2      	str	r2, [r0, #12]
    this->fuzzyRuleAntecedent1 = NULL;
 80a2fbe:	6102      	str	r2, [r0, #16]
    this->fuzzyRuleAntecedent2 = NULL;
 80a2fc0:	6142      	str	r2, [r0, #20]
}
 80a2fc2:	4770      	bx	lr

080a2fc4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>:
        return true;
    }
    return false;
}

bool FuzzyRuleAntecedent::joinWithAND(FuzzySet* fuzzySet1, FuzzySet* fuzzySet2){
 80a2fc4:	b510      	push	{r4, lr}
 80a2fc6:	4603      	mov	r3, r0
    if(fuzzySet1 != NULL && fuzzySet2 != NULL){
 80a2fc8:	b139      	cbz	r1, 80a2fda <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_+0x16>
 80a2fca:	b142      	cbz	r2, 80a2fde <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_+0x1a>
        this->op = OP_AND;
        this->mode = MODE_FS_FS;
 80a2fcc:	2001      	movs	r0, #1
 80a2fce:	2402      	movs	r4, #2
 80a2fd0:	e883 0011 	stmia.w	r3, {r0, r4}
        this->fuzzySet1 = fuzzySet1;
 80a2fd4:	6099      	str	r1, [r3, #8]
        this->fuzzySet2 = fuzzySet2;
 80a2fd6:	60da      	str	r2, [r3, #12]
        return true;
 80a2fd8:	bd10      	pop	{r4, pc}
    }
    return false;
 80a2fda:	4608      	mov	r0, r1
 80a2fdc:	bd10      	pop	{r4, pc}
 80a2fde:	4610      	mov	r0, r2
}
 80a2fe0:	bd10      	pop	{r4, pc}

080a2fe2 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>:
        return true;
    }
    return false;
}

bool FuzzyRuleAntecedent::joinWithAND(FuzzyRuleAntecedent* fuzzyRuleAntecedent1, FuzzyRuleAntecedent* fuzzyRuleAntecedent2){
 80a2fe2:	b510      	push	{r4, lr}
 80a2fe4:	4603      	mov	r3, r0
    if(fuzzyRuleAntecedent1 != NULL && fuzzyRuleAntecedent2 != NULL){
 80a2fe6:	b139      	cbz	r1, 80a2ff8 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_+0x16>
 80a2fe8:	b142      	cbz	r2, 80a2ffc <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_+0x1a>
        this->op = OP_AND;
        this->mode = MODE_FRA_FRA;
 80a2fea:	2001      	movs	r0, #1
 80a2fec:	2404      	movs	r4, #4
 80a2fee:	e883 0011 	stmia.w	r3, {r0, r4}
        this->fuzzyRuleAntecedent1 = fuzzyRuleAntecedent1;
 80a2ff2:	6119      	str	r1, [r3, #16]
        this->fuzzyRuleAntecedent2 = fuzzyRuleAntecedent2;
 80a2ff4:	615a      	str	r2, [r3, #20]
        return true;
 80a2ff6:	bd10      	pop	{r4, pc}
    }
    return false;
 80a2ff8:	4608      	mov	r0, r1
 80a2ffa:	bd10      	pop	{r4, pc}
 80a2ffc:	4610      	mov	r0, r2
}
 80a2ffe:	bd10      	pop	{r4, pc}

080a3000 <_ZN19FuzzyRuleAntecedent8evaluateEv>:
        return true;
    }
    return false;
}

float FuzzyRuleAntecedent::evaluate(){
 80a3000:	b538      	push	{r3, r4, r5, lr}
 80a3002:	4604      	mov	r4, r0
    switch(this->mode){
 80a3004:	6863      	ldr	r3, [r4, #4]
 80a3006:	3b01      	subs	r3, #1
 80a3008:	2b03      	cmp	r3, #3
 80a300a:	f200 80ce 	bhi.w	80a31aa <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
 80a300e:	e8df f003 	tbb	[pc, r3]
 80a3012:	0276      	.short	0x0276
 80a3014:	7b37      	.short	0x7b37
        case MODE_FS:
            return this->fuzzySet1->getPertinence();
            break;
        case MODE_FS_FS:
            switch(this->op){
 80a3016:	6823      	ldr	r3, [r4, #0]
 80a3018:	2b01      	cmp	r3, #1
 80a301a:	d002      	beq.n	80a3022 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x22>
 80a301c:	2b02      	cmp	r3, #2
 80a301e:	d01e      	beq.n	80a305e <_ZN19FuzzyRuleAntecedent8evaluateEv+0x5e>
 80a3020:	e0c3      	b.n	80a31aa <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                case OP_AND:
                    if(this->fuzzySet1->getPertinence() > 0.0 && this->fuzzySet2->getPertinence() > 0.0){
 80a3022:	68a0      	ldr	r0, [r4, #8]
 80a3024:	f7ff ff0b 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a3028:	2100      	movs	r1, #0
 80a302a:	f002 f809 	bl	80a5040 <__aeabi_fcmpgt>
 80a302e:	2800      	cmp	r0, #0
 80a3030:	f000 80bb 	beq.w	80a31aa <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
 80a3034:	68e0      	ldr	r0, [r4, #12]
 80a3036:	f7ff ff02 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a303a:	2100      	movs	r1, #0
 80a303c:	f002 f800 	bl	80a5040 <__aeabi_fcmpgt>
 80a3040:	2800      	cmp	r0, #0
 80a3042:	f000 80b2 	beq.w	80a31aa <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        if(this->fuzzySet1->getPertinence() < this->fuzzySet2->getPertinence()){
 80a3046:	68a0      	ldr	r0, [r4, #8]
 80a3048:	f7ff fef9 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a304c:	4605      	mov	r5, r0
 80a304e:	68e0      	ldr	r0, [r4, #12]
 80a3050:	f7ff fef5 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a3054:	4601      	mov	r1, r0
 80a3056:	4628      	mov	r0, r5
 80a3058:	f001 ffd4 	bl	80a5004 <__aeabi_fcmplt>
 80a305c:	e090      	b.n	80a3180 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x180>
                    }else{
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(this->fuzzySet1->getPertinence() > 0.0 || this->fuzzySet2->getPertinence() > 0.0){
 80a305e:	68a0      	ldr	r0, [r4, #8]
 80a3060:	f7ff feed 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a3064:	2100      	movs	r1, #0
 80a3066:	f001 ffeb 	bl	80a5040 <__aeabi_fcmpgt>
 80a306a:	2800      	cmp	r0, #0
 80a306c:	d17d      	bne.n	80a316a <_ZN19FuzzyRuleAntecedent8evaluateEv+0x16a>
 80a306e:	68e0      	ldr	r0, [r4, #12]
 80a3070:	f7ff fee5 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a3074:	2100      	movs	r1, #0
 80a3076:	f001 ffe3 	bl	80a5040 <__aeabi_fcmpgt>
 80a307a:	2800      	cmp	r0, #0
 80a307c:	d175      	bne.n	80a316a <_ZN19FuzzyRuleAntecedent8evaluateEv+0x16a>
 80a307e:	e094      	b.n	80a31aa <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                default:
                    return 0.0;
            }
            break;
        case MODE_FS_FRA:
            switch(this->op){
 80a3080:	6823      	ldr	r3, [r4, #0]
 80a3082:	2b01      	cmp	r3, #1
 80a3084:	d002      	beq.n	80a308c <_ZN19FuzzyRuleAntecedent8evaluateEv+0x8c>
 80a3086:	2b02      	cmp	r3, #2
 80a3088:	d01d      	beq.n	80a30c6 <_ZN19FuzzyRuleAntecedent8evaluateEv+0xc6>
 80a308a:	e08e      	b.n	80a31aa <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                case OP_AND:
                    if(this->fuzzySet1->getPertinence() > 0.0 && fuzzyRuleAntecedent1->evaluate() > 0.0){
 80a308c:	68a0      	ldr	r0, [r4, #8]
 80a308e:	f7ff fed6 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a3092:	2100      	movs	r1, #0
 80a3094:	f001 ffd4 	bl	80a5040 <__aeabi_fcmpgt>
 80a3098:	2800      	cmp	r0, #0
 80a309a:	f000 8086 	beq.w	80a31aa <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
 80a309e:	6920      	ldr	r0, [r4, #16]
 80a30a0:	f7ff ffae 	bl	80a3000 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a30a4:	2100      	movs	r1, #0
 80a30a6:	f001 ffcb 	bl	80a5040 <__aeabi_fcmpgt>
 80a30aa:	2800      	cmp	r0, #0
 80a30ac:	d07d      	beq.n	80a31aa <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        if(this->fuzzySet1->getPertinence() < fuzzyRuleAntecedent1->evaluate()){
 80a30ae:	68a0      	ldr	r0, [r4, #8]
 80a30b0:	f7ff fec5 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a30b4:	4605      	mov	r5, r0
 80a30b6:	6920      	ldr	r0, [r4, #16]
 80a30b8:	f7ff ffa2 	bl	80a3000 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a30bc:	4601      	mov	r1, r0
 80a30be:	4628      	mov	r0, r5
 80a30c0:	f001 ffa0 	bl	80a5004 <__aeabi_fcmplt>
 80a30c4:	e019      	b.n	80a30fa <_ZN19FuzzyRuleAntecedent8evaluateEv+0xfa>
                    }else{
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(this->fuzzySet1->getPertinence() > 0.0 || fuzzyRuleAntecedent1->evaluate() > 0.0){
 80a30c6:	68a0      	ldr	r0, [r4, #8]
 80a30c8:	f7ff feb9 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a30cc:	2100      	movs	r1, #0
 80a30ce:	f001 ffb7 	bl	80a5040 <__aeabi_fcmpgt>
 80a30d2:	b938      	cbnz	r0, 80a30e4 <_ZN19FuzzyRuleAntecedent8evaluateEv+0xe4>
 80a30d4:	6920      	ldr	r0, [r4, #16]
 80a30d6:	f7ff ff93 	bl	80a3000 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a30da:	2100      	movs	r1, #0
 80a30dc:	f001 ffb0 	bl	80a5040 <__aeabi_fcmpgt>
 80a30e0:	2800      	cmp	r0, #0
 80a30e2:	d062      	beq.n	80a31aa <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        if(this->fuzzySet1->getPertinence() > fuzzyRuleAntecedent1->evaluate()){
 80a30e4:	68a0      	ldr	r0, [r4, #8]
 80a30e6:	f7ff feaa 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a30ea:	4605      	mov	r5, r0
 80a30ec:	6920      	ldr	r0, [r4, #16]
 80a30ee:	f7ff ff87 	bl	80a3000 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a30f2:	4601      	mov	r1, r0
 80a30f4:	4628      	mov	r0, r5
 80a30f6:	f001 ffa3 	bl	80a5040 <__aeabi_fcmpgt>
 80a30fa:	2800      	cmp	r0, #0
 80a30fc:	d044      	beq.n	80a3188 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x188>
                            return this->fuzzySet1->getPertinence();
 80a30fe:	68a0      	ldr	r0, [r4, #8]
            break;
        default:
            return 0.0;
    }
    return 0.0;
 80a3100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                    }
                    break;
                case OP_OR:
                    if(this->fuzzySet1->getPertinence() > 0.0 || fuzzyRuleAntecedent1->evaluate() > 0.0){
                        if(this->fuzzySet1->getPertinence() > fuzzyRuleAntecedent1->evaluate()){
                            return this->fuzzySet1->getPertinence();
 80a3104:	f7ff be9b 	b.w	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
                default:
                    return 0.0;
            }
            break;
        case MODE_FRA_FRA:
            switch(this->op){
 80a3108:	6823      	ldr	r3, [r4, #0]
 80a310a:	2b01      	cmp	r3, #1
 80a310c:	d002      	beq.n	80a3114 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x114>
 80a310e:	2b02      	cmp	r3, #2
 80a3110:	d01c      	beq.n	80a314c <_ZN19FuzzyRuleAntecedent8evaluateEv+0x14c>
 80a3112:	e04a      	b.n	80a31aa <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                case OP_AND:
                    if(fuzzyRuleAntecedent1->evaluate() > 0.0 && fuzzyRuleAntecedent2->evaluate() > 0.0){
 80a3114:	6920      	ldr	r0, [r4, #16]
 80a3116:	f7ff ff73 	bl	80a3000 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a311a:	2100      	movs	r1, #0
 80a311c:	f001 ff90 	bl	80a5040 <__aeabi_fcmpgt>
 80a3120:	2800      	cmp	r0, #0
 80a3122:	d042      	beq.n	80a31aa <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
 80a3124:	6960      	ldr	r0, [r4, #20]
 80a3126:	f7ff ff6b 	bl	80a3000 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a312a:	2100      	movs	r1, #0
 80a312c:	f001 ff88 	bl	80a5040 <__aeabi_fcmpgt>
 80a3130:	2800      	cmp	r0, #0
 80a3132:	d03a      	beq.n	80a31aa <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        if(fuzzyRuleAntecedent1->evaluate() < fuzzyRuleAntecedent2->evaluate()){
 80a3134:	6920      	ldr	r0, [r4, #16]
 80a3136:	f7ff ff63 	bl	80a3000 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a313a:	4605      	mov	r5, r0
 80a313c:	6960      	ldr	r0, [r4, #20]
 80a313e:	f7ff ff5f 	bl	80a3000 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3142:	4601      	mov	r1, r0
 80a3144:	4628      	mov	r0, r5
 80a3146:	f001 ff5d 	bl	80a5004 <__aeabi_fcmplt>
 80a314a:	e02a      	b.n	80a31a2 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1a2>
                    }else{
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(fuzzyRuleAntecedent1->evaluate() > 0.0 || fuzzyRuleAntecedent2->evaluate() > 0.0){
 80a314c:	6920      	ldr	r0, [r4, #16]
 80a314e:	f7ff ff57 	bl	80a3000 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3152:	2100      	movs	r1, #0
 80a3154:	f001 ff74 	bl	80a5040 <__aeabi_fcmpgt>
 80a3158:	b9c0      	cbnz	r0, 80a318c <_ZN19FuzzyRuleAntecedent8evaluateEv+0x18c>
 80a315a:	6960      	ldr	r0, [r4, #20]
 80a315c:	f7ff ff50 	bl	80a3000 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3160:	2100      	movs	r1, #0
 80a3162:	f001 ff6d 	bl	80a5040 <__aeabi_fcmpgt>
 80a3166:	b988      	cbnz	r0, 80a318c <_ZN19FuzzyRuleAntecedent8evaluateEv+0x18c>
 80a3168:	e01f      	b.n	80a31aa <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(this->fuzzySet1->getPertinence() > 0.0 || this->fuzzySet2->getPertinence() > 0.0){
                        if(this->fuzzySet1->getPertinence() > this->fuzzySet2->getPertinence()){
 80a316a:	68a0      	ldr	r0, [r4, #8]
 80a316c:	f7ff fe67 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a3170:	4605      	mov	r5, r0
 80a3172:	68e0      	ldr	r0, [r4, #12]
 80a3174:	f7ff fe63 	bl	80a2e3e <_ZN8FuzzySet13getPertinenceEv>
 80a3178:	4601      	mov	r1, r0
 80a317a:	4628      	mov	r0, r5
 80a317c:	f001 ff60 	bl	80a5040 <__aeabi_fcmpgt>
 80a3180:	2800      	cmp	r0, #0
 80a3182:	d1bc      	bne.n	80a30fe <_ZN19FuzzyRuleAntecedent8evaluateEv+0xfe>
                            return this->fuzzySet1->getPertinence();
                        }else{
                            return this->fuzzySet2->getPertinence();
 80a3184:	68e0      	ldr	r0, [r4, #12]
 80a3186:	e7bb      	b.n	80a3100 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x100>
                    }
                    break;
                case OP_OR:
                    if(fuzzyRuleAntecedent1->evaluate() > 0.0 || fuzzyRuleAntecedent2->evaluate() > 0.0){
                        if(fuzzyRuleAntecedent1->evaluate() > fuzzyRuleAntecedent2->evaluate()){
                            return fuzzyRuleAntecedent1->evaluate();
 80a3188:	6924      	ldr	r4, [r4, #16]
 80a318a:	e73b      	b.n	80a3004 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x4>
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(fuzzyRuleAntecedent1->evaluate() > 0.0 || fuzzyRuleAntecedent2->evaluate() > 0.0){
                        if(fuzzyRuleAntecedent1->evaluate() > fuzzyRuleAntecedent2->evaluate()){
 80a318c:	6920      	ldr	r0, [r4, #16]
 80a318e:	f7ff ff37 	bl	80a3000 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3192:	4605      	mov	r5, r0
 80a3194:	6960      	ldr	r0, [r4, #20]
 80a3196:	f7ff ff33 	bl	80a3000 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a319a:	4601      	mov	r1, r0
 80a319c:	4628      	mov	r0, r5
 80a319e:	f001 ff4f 	bl	80a5040 <__aeabi_fcmpgt>
 80a31a2:	2800      	cmp	r0, #0
 80a31a4:	d1f0      	bne.n	80a3188 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x188>
                            return fuzzyRuleAntecedent1->evaluate();
                        }else{
                            return fuzzyRuleAntecedent2->evaluate();
 80a31a6:	6964      	ldr	r4, [r4, #20]
 80a31a8:	e72c      	b.n	80a3004 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x4>
            break;
        default:
            return 0.0;
    }
    return 0.0;
 80a31aa:	2000      	movs	r0, #0
 80a31ac:	bd38      	pop	{r3, r4, r5, pc}
	...

080a31b0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a31b0:	b508      	push	{r3, lr}
 80a31b2:	4b02      	ldr	r3, [pc, #8]	; (80a31bc <HAL_Pin_Map+0xc>)
 80a31b4:	681b      	ldr	r3, [r3, #0]
 80a31b6:	681b      	ldr	r3, [r3, #0]
 80a31b8:	9301      	str	r3, [sp, #4]
 80a31ba:	bd08      	pop	{r3, pc}
 80a31bc:	080601b0 	.word	0x080601b0

080a31c0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a31c0:	b508      	push	{r3, lr}
 80a31c2:	4b02      	ldr	r3, [pc, #8]	; (80a31cc <HAL_Validate_Pin_Function+0xc>)
 80a31c4:	681b      	ldr	r3, [r3, #0]
 80a31c6:	685b      	ldr	r3, [r3, #4]
 80a31c8:	9301      	str	r3, [sp, #4]
 80a31ca:	bd08      	pop	{r3, pc}
 80a31cc:	080601b0 	.word	0x080601b0

080a31d0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a31d0:	b508      	push	{r3, lr}
 80a31d2:	4b02      	ldr	r3, [pc, #8]	; (80a31dc <HAL_Pin_Mode+0xc>)
 80a31d4:	681b      	ldr	r3, [r3, #0]
 80a31d6:	689b      	ldr	r3, [r3, #8]
 80a31d8:	9301      	str	r3, [sp, #4]
 80a31da:	bd08      	pop	{r3, pc}
 80a31dc:	080601b0 	.word	0x080601b0

080a31e0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a31e0:	b508      	push	{r3, lr}
 80a31e2:	4b02      	ldr	r3, [pc, #8]	; (80a31ec <HAL_Get_Pin_Mode+0xc>)
 80a31e4:	681b      	ldr	r3, [r3, #0]
 80a31e6:	68db      	ldr	r3, [r3, #12]
 80a31e8:	9301      	str	r3, [sp, #4]
 80a31ea:	bd08      	pop	{r3, pc}
 80a31ec:	080601b0 	.word	0x080601b0

080a31f0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a31f0:	b508      	push	{r3, lr}
 80a31f2:	4b02      	ldr	r3, [pc, #8]	; (80a31fc <HAL_GPIO_Write+0xc>)
 80a31f4:	681b      	ldr	r3, [r3, #0]
 80a31f6:	691b      	ldr	r3, [r3, #16]
 80a31f8:	9301      	str	r3, [sp, #4]
 80a31fa:	bd08      	pop	{r3, pc}
 80a31fc:	080601b0 	.word	0x080601b0

080a3200 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a3200:	b508      	push	{r3, lr}
 80a3202:	4b02      	ldr	r3, [pc, #8]	; (80a320c <HAL_GPIO_Read+0xc>)
 80a3204:	681b      	ldr	r3, [r3, #0]
 80a3206:	695b      	ldr	r3, [r3, #20]
 80a3208:	9301      	str	r3, [sp, #4]
 80a320a:	bd08      	pop	{r3, pc}
 80a320c:	080601b0 	.word	0x080601b0

080a3210 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a3210:	b508      	push	{r3, lr}
 80a3212:	4b02      	ldr	r3, [pc, #8]	; (80a321c <HAL_Interrupts_Attach+0xc>)
 80a3214:	681b      	ldr	r3, [r3, #0]
 80a3216:	699b      	ldr	r3, [r3, #24]
 80a3218:	9301      	str	r3, [sp, #4]
 80a321a:	bd08      	pop	{r3, pc}
 80a321c:	080601b0 	.word	0x080601b0

080a3220 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a3220:	b508      	push	{r3, lr}
 80a3222:	4b02      	ldr	r3, [pc, #8]	; (80a322c <HAL_Interrupts_Detach+0xc>)
 80a3224:	681b      	ldr	r3, [r3, #0]
 80a3226:	69db      	ldr	r3, [r3, #28]
 80a3228:	9301      	str	r3, [sp, #4]
 80a322a:	bd08      	pop	{r3, pc}
 80a322c:	080601b0 	.word	0x080601b0

080a3230 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a3230:	b508      	push	{r3, lr}
 80a3232:	4b02      	ldr	r3, [pc, #8]	; (80a323c <HAL_SPI_Init+0xc>)
 80a3234:	681b      	ldr	r3, [r3, #0]
 80a3236:	69db      	ldr	r3, [r3, #28]
 80a3238:	9301      	str	r3, [sp, #4]
 80a323a:	bd08      	pop	{r3, pc}
 80a323c:	080601b4 	.word	0x080601b4

080a3240 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a3240:	b508      	push	{r3, lr}
 80a3242:	4b02      	ldr	r3, [pc, #8]	; (80a324c <HAL_SPI_Is_Enabled+0xc>)
 80a3244:	681b      	ldr	r3, [r3, #0]
 80a3246:	6a1b      	ldr	r3, [r3, #32]
 80a3248:	9301      	str	r3, [sp, #4]
 80a324a:	bd08      	pop	{r3, pc}
 80a324c:	080601b4 	.word	0x080601b4

080a3250 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a3250:	b508      	push	{r3, lr}
 80a3252:	4b02      	ldr	r3, [pc, #8]	; (80a325c <HAL_RNG_GetRandomNumber+0xc>)
 80a3254:	681b      	ldr	r3, [r3, #0]
 80a3256:	685b      	ldr	r3, [r3, #4]
 80a3258:	9301      	str	r3, [sp, #4]
 80a325a:	bd08      	pop	{r3, pc}
 80a325c:	0806019c 	.word	0x0806019c

080a3260 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a3260:	b508      	push	{r3, lr}
 80a3262:	4b02      	ldr	r3, [pc, #8]	; (80a326c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a3264:	681b      	ldr	r3, [r3, #0]
 80a3266:	695b      	ldr	r3, [r3, #20]
 80a3268:	9301      	str	r3, [sp, #4]
 80a326a:	bd08      	pop	{r3, pc}
 80a326c:	0806019c 	.word	0x0806019c

080a3270 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a3270:	b508      	push	{r3, lr}
 80a3272:	4b02      	ldr	r3, [pc, #8]	; (80a327c <os_mutex_create+0xc>)
 80a3274:	681b      	ldr	r3, [r3, #0]
 80a3276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3278:	9301      	str	r3, [sp, #4]
 80a327a:	bd08      	pop	{r3, pc}
 80a327c:	080601d0 	.word	0x080601d0

080a3280 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a3280:	b508      	push	{r3, lr}
 80a3282:	4b02      	ldr	r3, [pc, #8]	; (80a328c <HAL_USART_Init+0xc>)
 80a3284:	681b      	ldr	r3, [r3, #0]
 80a3286:	699b      	ldr	r3, [r3, #24]
 80a3288:	9301      	str	r3, [sp, #4]
 80a328a:	bd08      	pop	{r3, pc}
 80a328c:	080601c4 	.word	0x080601c4

080a3290 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a3290:	b508      	push	{r3, lr}
 80a3292:	4b02      	ldr	r3, [pc, #8]	; (80a329c <HAL_USART_Write_Data+0xc>)
 80a3294:	681b      	ldr	r3, [r3, #0]
 80a3296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3298:	9301      	str	r3, [sp, #4]
 80a329a:	bd08      	pop	{r3, pc}
 80a329c:	080601c4 	.word	0x080601c4

080a32a0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a32a0:	b508      	push	{r3, lr}
 80a32a2:	4b02      	ldr	r3, [pc, #8]	; (80a32ac <HAL_USART_Available_Data+0xc>)
 80a32a4:	681b      	ldr	r3, [r3, #0]
 80a32a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a32a8:	9301      	str	r3, [sp, #4]
 80a32aa:	bd08      	pop	{r3, pc}
 80a32ac:	080601c4 	.word	0x080601c4

080a32b0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a32b0:	b508      	push	{r3, lr}
 80a32b2:	4b02      	ldr	r3, [pc, #8]	; (80a32bc <HAL_USART_Read_Data+0xc>)
 80a32b4:	681b      	ldr	r3, [r3, #0]
 80a32b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a32b8:	9301      	str	r3, [sp, #4]
 80a32ba:	bd08      	pop	{r3, pc}
 80a32bc:	080601c4 	.word	0x080601c4

080a32c0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a32c0:	b508      	push	{r3, lr}
 80a32c2:	4b02      	ldr	r3, [pc, #8]	; (80a32cc <HAL_USART_Peek_Data+0xc>)
 80a32c4:	681b      	ldr	r3, [r3, #0]
 80a32c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a32c8:	9301      	str	r3, [sp, #4]
 80a32ca:	bd08      	pop	{r3, pc}
 80a32cc:	080601c4 	.word	0x080601c4

080a32d0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a32d0:	b508      	push	{r3, lr}
 80a32d2:	4b02      	ldr	r3, [pc, #8]	; (80a32dc <HAL_USART_Flush_Data+0xc>)
 80a32d4:	681b      	ldr	r3, [r3, #0]
 80a32d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a32d8:	9301      	str	r3, [sp, #4]
 80a32da:	bd08      	pop	{r3, pc}
 80a32dc:	080601c4 	.word	0x080601c4

080a32e0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a32e0:	b508      	push	{r3, lr}
 80a32e2:	4b02      	ldr	r3, [pc, #8]	; (80a32ec <HAL_USART_Is_Enabled+0xc>)
 80a32e4:	681b      	ldr	r3, [r3, #0]
 80a32e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a32e8:	9301      	str	r3, [sp, #4]
 80a32ea:	bd08      	pop	{r3, pc}
 80a32ec:	080601c4 	.word	0x080601c4

080a32f0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a32f0:	b508      	push	{r3, lr}
 80a32f2:	4b02      	ldr	r3, [pc, #8]	; (80a32fc <HAL_USART_Available_Data_For_Write+0xc>)
 80a32f4:	681b      	ldr	r3, [r3, #0]
 80a32f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a32f8:	9301      	str	r3, [sp, #4]
 80a32fa:	bd08      	pop	{r3, pc}
 80a32fc:	080601c4 	.word	0x080601c4

080a3300 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a3300:	b508      	push	{r3, lr}
 80a3302:	4b02      	ldr	r3, [pc, #8]	; (80a330c <HAL_I2C_Set_Speed+0xc>)
 80a3304:	681b      	ldr	r3, [r3, #0]
 80a3306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3308:	9301      	str	r3, [sp, #4]
 80a330a:	bd08      	pop	{r3, pc}
 80a330c:	080601ac 	.word	0x080601ac

080a3310 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a3310:	b508      	push	{r3, lr}
 80a3312:	4b02      	ldr	r3, [pc, #8]	; (80a331c <HAL_I2C_Begin+0xc>)
 80a3314:	681b      	ldr	r3, [r3, #0]
 80a3316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a3318:	9301      	str	r3, [sp, #4]
 80a331a:	bd08      	pop	{r3, pc}
 80a331c:	080601ac 	.word	0x080601ac

080a3320 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a3320:	b508      	push	{r3, lr}
 80a3322:	4b02      	ldr	r3, [pc, #8]	; (80a332c <HAL_I2C_Request_Data+0xc>)
 80a3324:	681b      	ldr	r3, [r3, #0]
 80a3326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a3328:	9301      	str	r3, [sp, #4]
 80a332a:	bd08      	pop	{r3, pc}
 80a332c:	080601ac 	.word	0x080601ac

080a3330 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a3330:	b508      	push	{r3, lr}
 80a3332:	4b02      	ldr	r3, [pc, #8]	; (80a333c <HAL_I2C_Begin_Transmission+0xc>)
 80a3334:	681b      	ldr	r3, [r3, #0]
 80a3336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a3338:	9301      	str	r3, [sp, #4]
 80a333a:	bd08      	pop	{r3, pc}
 80a333c:	080601ac 	.word	0x080601ac

080a3340 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a3340:	b508      	push	{r3, lr}
 80a3342:	4b02      	ldr	r3, [pc, #8]	; (80a334c <HAL_I2C_End_Transmission+0xc>)
 80a3344:	681b      	ldr	r3, [r3, #0]
 80a3346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a3348:	9301      	str	r3, [sp, #4]
 80a334a:	bd08      	pop	{r3, pc}
 80a334c:	080601ac 	.word	0x080601ac

080a3350 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a3350:	b508      	push	{r3, lr}
 80a3352:	4b02      	ldr	r3, [pc, #8]	; (80a335c <HAL_I2C_Write_Data+0xc>)
 80a3354:	681b      	ldr	r3, [r3, #0]
 80a3356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a3358:	9301      	str	r3, [sp, #4]
 80a335a:	bd08      	pop	{r3, pc}
 80a335c:	080601ac 	.word	0x080601ac

080a3360 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a3360:	b508      	push	{r3, lr}
 80a3362:	4b02      	ldr	r3, [pc, #8]	; (80a336c <HAL_I2C_Available_Data+0xc>)
 80a3364:	681b      	ldr	r3, [r3, #0]
 80a3366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a3368:	9301      	str	r3, [sp, #4]
 80a336a:	bd08      	pop	{r3, pc}
 80a336c:	080601ac 	.word	0x080601ac

080a3370 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a3370:	b508      	push	{r3, lr}
 80a3372:	4b02      	ldr	r3, [pc, #8]	; (80a337c <HAL_I2C_Read_Data+0xc>)
 80a3374:	681b      	ldr	r3, [r3, #0]
 80a3376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a3378:	9301      	str	r3, [sp, #4]
 80a337a:	bd08      	pop	{r3, pc}
 80a337c:	080601ac 	.word	0x080601ac

080a3380 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a3380:	b508      	push	{r3, lr}
 80a3382:	4b02      	ldr	r3, [pc, #8]	; (80a338c <HAL_I2C_Peek_Data+0xc>)
 80a3384:	681b      	ldr	r3, [r3, #0]
 80a3386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a3388:	9301      	str	r3, [sp, #4]
 80a338a:	bd08      	pop	{r3, pc}
 80a338c:	080601ac 	.word	0x080601ac

080a3390 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a3390:	b508      	push	{r3, lr}
 80a3392:	4b02      	ldr	r3, [pc, #8]	; (80a339c <HAL_I2C_Flush_Data+0xc>)
 80a3394:	681b      	ldr	r3, [r3, #0]
 80a3396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a3398:	9301      	str	r3, [sp, #4]
 80a339a:	bd08      	pop	{r3, pc}
 80a339c:	080601ac 	.word	0x080601ac

080a33a0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a33a0:	b508      	push	{r3, lr}
 80a33a2:	4b02      	ldr	r3, [pc, #8]	; (80a33ac <HAL_I2C_Is_Enabled+0xc>)
 80a33a4:	681b      	ldr	r3, [r3, #0]
 80a33a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a33a8:	9301      	str	r3, [sp, #4]
 80a33aa:	bd08      	pop	{r3, pc}
 80a33ac:	080601ac 	.word	0x080601ac

080a33b0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a33b0:	b508      	push	{r3, lr}
 80a33b2:	4b03      	ldr	r3, [pc, #12]	; (80a33c0 <HAL_I2C_Init+0x10>)
 80a33b4:	681b      	ldr	r3, [r3, #0]
 80a33b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a33ba:	9301      	str	r3, [sp, #4]
 80a33bc:	bd08      	pop	{r3, pc}
 80a33be:	0000      	.short	0x0000
 80a33c0:	080601ac 	.word	0x080601ac

080a33c4 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
 80a33c4:	b508      	push	{r3, lr}
 80a33c6:	4b02      	ldr	r3, [pc, #8]	; (80a33d0 <HAL_Servo_Attach+0xc>)
 80a33c8:	681b      	ldr	r3, [r3, #0]
 80a33ca:	691b      	ldr	r3, [r3, #16]
 80a33cc:	9301      	str	r3, [sp, #4]
 80a33ce:	bd08      	pop	{r3, pc}
 80a33d0:	080601a8 	.word	0x080601a8

080a33d4 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
 80a33d4:	b508      	push	{r3, lr}
 80a33d6:	4b02      	ldr	r3, [pc, #8]	; (80a33e0 <HAL_Servo_Detach+0xc>)
 80a33d8:	681b      	ldr	r3, [r3, #0]
 80a33da:	695b      	ldr	r3, [r3, #20]
 80a33dc:	9301      	str	r3, [sp, #4]
 80a33de:	bd08      	pop	{r3, pc}
 80a33e0:	080601a8 	.word	0x080601a8

080a33e4 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
 80a33e4:	b508      	push	{r3, lr}
 80a33e6:	4b02      	ldr	r3, [pc, #8]	; (80a33f0 <HAL_Servo_Write_Pulse_Width+0xc>)
 80a33e8:	681b      	ldr	r3, [r3, #0]
 80a33ea:	699b      	ldr	r3, [r3, #24]
 80a33ec:	9301      	str	r3, [sp, #4]
 80a33ee:	bd08      	pop	{r3, pc}
 80a33f0:	080601a8 	.word	0x080601a8

080a33f4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a33f4:	b508      	push	{r3, lr}
 80a33f6:	4b02      	ldr	r3, [pc, #8]	; (80a3400 <HAL_USB_USART_Init+0xc>)
 80a33f8:	681b      	ldr	r3, [r3, #0]
 80a33fa:	681b      	ldr	r3, [r3, #0]
 80a33fc:	9301      	str	r3, [sp, #4]
 80a33fe:	bd08      	pop	{r3, pc}
 80a3400:	080601d8 	.word	0x080601d8

080a3404 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a3404:	b508      	push	{r3, lr}
 80a3406:	4b02      	ldr	r3, [pc, #8]	; (80a3410 <HAL_USB_USART_Available_Data+0xc>)
 80a3408:	681b      	ldr	r3, [r3, #0]
 80a340a:	691b      	ldr	r3, [r3, #16]
 80a340c:	9301      	str	r3, [sp, #4]
 80a340e:	bd08      	pop	{r3, pc}
 80a3410:	080601d8 	.word	0x080601d8

080a3414 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a3414:	b508      	push	{r3, lr}
 80a3416:	4b02      	ldr	r3, [pc, #8]	; (80a3420 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a3418:	681b      	ldr	r3, [r3, #0]
 80a341a:	695b      	ldr	r3, [r3, #20]
 80a341c:	9301      	str	r3, [sp, #4]
 80a341e:	bd08      	pop	{r3, pc}
 80a3420:	080601d8 	.word	0x080601d8

080a3424 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3424:	b508      	push	{r3, lr}
 80a3426:	4b02      	ldr	r3, [pc, #8]	; (80a3430 <HAL_USB_USART_Receive_Data+0xc>)
 80a3428:	681b      	ldr	r3, [r3, #0]
 80a342a:	699b      	ldr	r3, [r3, #24]
 80a342c:	9301      	str	r3, [sp, #4]
 80a342e:	bd08      	pop	{r3, pc}
 80a3430:	080601d8 	.word	0x080601d8

080a3434 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3434:	b508      	push	{r3, lr}
 80a3436:	4b02      	ldr	r3, [pc, #8]	; (80a3440 <HAL_USB_USART_Send_Data+0xc>)
 80a3438:	681b      	ldr	r3, [r3, #0]
 80a343a:	69db      	ldr	r3, [r3, #28]
 80a343c:	9301      	str	r3, [sp, #4]
 80a343e:	bd08      	pop	{r3, pc}
 80a3440:	080601d8 	.word	0x080601d8

080a3444 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a3444:	b508      	push	{r3, lr}
 80a3446:	4b02      	ldr	r3, [pc, #8]	; (80a3450 <HAL_USB_USART_Flush_Data+0xc>)
 80a3448:	681b      	ldr	r3, [r3, #0]
 80a344a:	6a1b      	ldr	r3, [r3, #32]
 80a344c:	9301      	str	r3, [sp, #4]
 80a344e:	bd08      	pop	{r3, pc}
 80a3450:	080601d8 	.word	0x080601d8

080a3454 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a3454:	b508      	push	{r3, lr}
 80a3456:	4b02      	ldr	r3, [pc, #8]	; (80a3460 <set_system_mode+0xc>)
 80a3458:	681b      	ldr	r3, [r3, #0]
 80a345a:	685b      	ldr	r3, [r3, #4]
 80a345c:	9301      	str	r3, [sp, #4]
 80a345e:	bd08      	pop	{r3, pc}
 80a3460:	080601a4 	.word	0x080601a4

080a3464 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a3464:	b508      	push	{r3, lr}
 80a3466:	4b02      	ldr	r3, [pc, #8]	; (80a3470 <system_delay_ms+0xc>)
 80a3468:	681b      	ldr	r3, [r3, #0]
 80a346a:	695b      	ldr	r3, [r3, #20]
 80a346c:	9301      	str	r3, [sp, #4]
 80a346e:	bd08      	pop	{r3, pc}
 80a3470:	080601a4 	.word	0x080601a4

080a3474 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a3474:	b508      	push	{r3, lr}
 80a3476:	4b02      	ldr	r3, [pc, #8]	; (80a3480 <system_thread_set_state+0xc>)
 80a3478:	681b      	ldr	r3, [r3, #0]
 80a347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a347c:	9301      	str	r3, [sp, #4]
 80a347e:	bd08      	pop	{r3, pc}
 80a3480:	080601a4 	.word	0x080601a4

080a3484 <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80a3484:	b508      	push	{r3, lr}
 80a3486:	4b02      	ldr	r3, [pc, #8]	; (80a3490 <system_set_usb_request_app_handler+0xc>)
 80a3488:	681b      	ldr	r3, [r3, #0]
 80a348a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a348c:	9301      	str	r3, [sp, #4]
 80a348e:	bd08      	pop	{r3, pc}
 80a3490:	080601a4 	.word	0x080601a4

080a3494 <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80a3494:	b508      	push	{r3, lr}
 80a3496:	4b02      	ldr	r3, [pc, #8]	; (80a34a0 <system_set_usb_request_result+0xc>)
 80a3498:	681b      	ldr	r3, [r3, #0]
 80a349a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a349c:	9301      	str	r3, [sp, #4]
 80a349e:	bd08      	pop	{r3, pc}
 80a34a0:	080601a4 	.word	0x080601a4

080a34a4 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a34a4:	b508      	push	{r3, lr}
 80a34a6:	4b02      	ldr	r3, [pc, #8]	; (80a34b0 <network_ready+0xc>)
 80a34a8:	681b      	ldr	r3, [r3, #0]
 80a34aa:	691b      	ldr	r3, [r3, #16]
 80a34ac:	9301      	str	r3, [sp, #4]
 80a34ae:	bd08      	pop	{r3, pc}
 80a34b0:	080601c8 	.word	0x080601c8

080a34b4 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a34b4:	b508      	push	{r3, lr}
 80a34b6:	4b02      	ldr	r3, [pc, #8]	; (80a34c0 <malloc+0xc>)
 80a34b8:	681b      	ldr	r3, [r3, #0]
 80a34ba:	681b      	ldr	r3, [r3, #0]
 80a34bc:	9301      	str	r3, [sp, #4]
 80a34be:	bd08      	pop	{r3, pc}
 80a34c0:	080601a0 	.word	0x080601a0

080a34c4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a34c4:	b508      	push	{r3, lr}
 80a34c6:	4b02      	ldr	r3, [pc, #8]	; (80a34d0 <free+0xc>)
 80a34c8:	681b      	ldr	r3, [r3, #0]
 80a34ca:	685b      	ldr	r3, [r3, #4]
 80a34cc:	9301      	str	r3, [sp, #4]
 80a34ce:	bd08      	pop	{r3, pc}
 80a34d0:	080601a0 	.word	0x080601a0

080a34d4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a34d4:	b508      	push	{r3, lr}
 80a34d6:	4b02      	ldr	r3, [pc, #8]	; (80a34e0 <realloc+0xc>)
 80a34d8:	681b      	ldr	r3, [r3, #0]
 80a34da:	689b      	ldr	r3, [r3, #8]
 80a34dc:	9301      	str	r3, [sp, #4]
 80a34de:	bd08      	pop	{r3, pc}
 80a34e0:	080601a0 	.word	0x080601a0

080a34e4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a34e4:	4770      	bx	lr

080a34e6 <_ZN8SPIClassD0Ev>:
 80a34e6:	b510      	push	{r4, lr}
 80a34e8:	4604      	mov	r4, r0
 80a34ea:	f7fc fdd8 	bl	80a009e <_ZdlPv>
 80a34ee:	4620      	mov	r0, r4
 80a34f0:	bd10      	pop	{r4, pc}
	...

080a34f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a34f4:	b570      	push	{r4, r5, r6, lr}
 80a34f6:	4604      	mov	r4, r0
 80a34f8:	460e      	mov	r6, r1
 80a34fa:	4b07      	ldr	r3, [pc, #28]	; (80a3518 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
	Mutex(os_mutex_t handle) : handle_(handle) {}

	/**
	 * Creates a new mutex.
	 */
	Mutex() : handle_(nullptr)
 80a34fc:	2500      	movs	r5, #0
 80a34fe:	6003      	str	r3, [r0, #0]
 80a3500:	f840 5f0c 	str.w	r5, [r0, #12]!
	{
		os_mutex_create(&handle_);
 80a3504:	f7ff feb4 	bl	80a3270 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a3508:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a350a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a350c:	f7ff fe90 	bl	80a3230 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a3510:	60a5      	str	r5, [r4, #8]
}
 80a3512:	4620      	mov	r0, r4
 80a3514:	bd70      	pop	{r4, r5, r6, pc}
 80a3516:	bf00      	nop
 80a3518:	080a5200 	.word	0x080a5200

080a351c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a351c:	7900      	ldrb	r0, [r0, #4]
 80a351e:	f7ff be8f 	b.w	80a3240 <HAL_SPI_Is_Enabled>

080a3522 <_ZN5Servo17writeMicrosecondsEt>:
  // write(179).
  return a == this->minAngle || a == this->maxAngle ? a : a + 1;
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{
 80a3522:	f9b0 2000 	ldrsh.w	r2, [r0]

  if (!this->attached())
 80a3526:	1c53      	adds	r3, r2, #1
 80a3528:	d00b      	beq.n	80a3542 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
 80a352a:	8843      	ldrh	r3, [r0, #2]
 80a352c:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 80a352e:	428b      	cmp	r3, r1
 80a3530:	d803      	bhi.n	80a353a <_ZN5Servo17writeMicrosecondsEt+0x18>
 80a3532:	4288      	cmp	r0, r1
 80a3534:	4603      	mov	r3, r0
 80a3536:	bf28      	it	cs
 80a3538:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
 80a353a:	4619      	mov	r1, r3
 80a353c:	b290      	uxth	r0, r2
 80a353e:	f7ff bf51 	b.w	80a33e4 <HAL_Servo_Write_Pulse_Width>
 80a3542:	4770      	bx	lr

080a3544 <_ZN5Servo11resetFieldsEv>:
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a3544:	f64f 73ff 	movw	r3, #65535	; 0xffff
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
 80a3548:	22b4      	movs	r2, #180	; 0xb4
 80a354a:	8102      	strh	r2, [r0, #8]
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a354c:	f44f 7208 	mov.w	r2, #544	; 0x220
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a3550:	8003      	strh	r3, [r0, #0]
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a3552:	8042      	strh	r2, [r0, #2]
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a3554:	2300      	movs	r3, #0
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a3556:	f44f 6216 	mov.w	r2, #2400	; 0x960
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a355a:	80c3      	strh	r3, [r0, #6]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a355c:	8082      	strh	r2, [r0, #4]
  this->trim = 0;
 80a355e:	60c3      	str	r3, [r0, #12]
 80a3560:	4770      	bx	lr

080a3562 <_ZN5ServoC1Ev>:
#define ANGLE_TO_US(a)    ((uint16_t)(map((a), this->minAngle, this->maxAngle, \
                                        this->minPW, this->maxPW)))
#define US_TO_ANGLE(us)   ((int16_t)(map((us), this->minPW, this->maxPW,  \
                                       this->minAngle, this->maxAngle)))

Servo::Servo()
 80a3562:	b508      	push	{r3, lr}
{
  this->resetFields();
 80a3564:	f7ff ffee 	bl	80a3544 <_ZN5Servo11resetFieldsEv>
}
 80a3568:	bd08      	pop	{r3, pc}

080a356a <_ZN5Servo6detachEv>:

  return true;
}

bool Servo::detach()
{
 80a356a:	b510      	push	{r4, lr}
 80a356c:	4604      	mov	r4, r0
 80a356e:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
 80a3572:	1c43      	adds	r3, r0, #1
 80a3574:	d007      	beq.n	80a3586 <_ZN5Servo6detachEv+0x1c>
  {
    return false;
  }

  HAL_Servo_Detach(this->pin);
 80a3576:	b280      	uxth	r0, r0
 80a3578:	f7ff ff2c 	bl	80a33d4 <HAL_Servo_Detach>

  this->resetFields();
 80a357c:	4620      	mov	r0, r4
 80a357e:	f7ff ffe1 	bl	80a3544 <_ZN5Servo11resetFieldsEv>

  return true;
 80a3582:	2001      	movs	r0, #1
 80a3584:	bd10      	pop	{r4, pc}

bool Servo::detach()
{
  if (!this->attached())
  {
    return false;
 80a3586:	2000      	movs	r0, #0
  HAL_Servo_Detach(this->pin);

  this->resetFields();

  return true;
}
 80a3588:	bd10      	pop	{r4, pc}

080a358a <_ZN5Servo6attachEtttss>:
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a358a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a358e:	460d      	mov	r5, r1
 80a3590:	4604      	mov	r4, r0

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a3592:	2102      	movs	r1, #2
 80a3594:	4628      	mov	r0, r5
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a3596:	4690      	mov	r8, r2
 80a3598:	461f      	mov	r7, r3

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a359a:	f7ff fe11 	bl	80a31c0 <HAL_Validate_Pin_Function>
 80a359e:	2802      	cmp	r0, #2
 80a35a0:	d001      	beq.n	80a35a6 <_ZN5Servo6attachEtttss+0x1c>
  {
    return false;
 80a35a2:	2600      	movs	r6, #0
 80a35a4:	e019      	b.n	80a35da <_ZN5Servo6attachEtttss+0x50>
  }

  // Safety check
  if (!pinAvailable(pin))
 80a35a6:	4628      	mov	r0, r5
 80a35a8:	f000 fbd4 	bl	80a3d54 <pinAvailable>
 80a35ac:	4606      	mov	r6, r0
 80a35ae:	2800      	cmp	r0, #0
 80a35b0:	d0f7      	beq.n	80a35a2 <_ZN5Servo6attachEtttss+0x18>
  {
    return false;
  }

  if (this->attached())
 80a35b2:	f9b4 3000 	ldrsh.w	r3, [r4]
 80a35b6:	3301      	adds	r3, #1
 80a35b8:	d002      	beq.n	80a35c0 <_ZN5Servo6attachEtttss+0x36>
  {
    this->detach();
 80a35ba:	4620      	mov	r0, r4
 80a35bc:	f7ff ffd5 	bl	80a356a <_ZN5Servo6detachEv>
  }

  this->pin = pin;
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a35c0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  if (this->attached())
  {
    this->detach();
  }

  this->pin = pin;
 80a35c4:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a35c6:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
 80a35c8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  {
    this->detach();
  }

  this->pin = pin;
  this->minPW = minPW;
 80a35cc:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
 80a35d0:	80a7      	strh	r7, [r4, #4]
  this->minAngle = minAngle;
  this->maxAngle = maxAngle;
 80a35d2:	8123      	strh	r3, [r4, #8]

  HAL_Servo_Attach(this->pin);
 80a35d4:	4628      	mov	r0, r5
 80a35d6:	f7ff fef5 	bl	80a33c4 <HAL_Servo_Attach>

  return true;
}
 80a35da:	4630      	mov	r0, r6
 80a35dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a35e0 <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a35e0:	2000      	movs	r0, #0
 80a35e2:	f7ff bf37 	b.w	80a3454 <set_system_mode>

080a35e6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a35e6:	b510      	push	{r4, lr}
 80a35e8:	4604      	mov	r4, r0
{
	free(buffer);
 80a35ea:	6800      	ldr	r0, [r0, #0]
 80a35ec:	f7ff ff6a 	bl	80a34c4 <free>
}
 80a35f0:	4620      	mov	r0, r4
 80a35f2:	bd10      	pop	{r4, pc}

080a35f4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a35f4:	b510      	push	{r4, lr}
 80a35f6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a35f8:	6800      	ldr	r0, [r0, #0]
 80a35fa:	b108      	cbz	r0, 80a3600 <_ZN6String10invalidateEv+0xc>
 80a35fc:	f7ff ff62 	bl	80a34c4 <free>
	buffer = NULL;
 80a3600:	2300      	movs	r3, #0
 80a3602:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a3604:	60a3      	str	r3, [r4, #8]
 80a3606:	6063      	str	r3, [r4, #4]
 80a3608:	bd10      	pop	{r4, pc}

080a360a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a360a:	b538      	push	{r3, r4, r5, lr}
 80a360c:	4604      	mov	r4, r0
 80a360e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a3610:	6800      	ldr	r0, [r0, #0]
 80a3612:	3101      	adds	r1, #1
 80a3614:	f7ff ff5e 	bl	80a34d4 <realloc>
	if (newbuffer) {
 80a3618:	b110      	cbz	r0, 80a3620 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a361a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a361e:	2001      	movs	r0, #1
	}
	return 0;
}
 80a3620:	bd38      	pop	{r3, r4, r5, pc}

080a3622 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a3622:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a3624:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a3626:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a3628:	b113      	cbz	r3, 80a3630 <_ZN6String7reserveEj+0xe>
 80a362a:	6843      	ldr	r3, [r0, #4]
 80a362c:	428b      	cmp	r3, r1
 80a362e:	d207      	bcs.n	80a3640 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a3630:	4620      	mov	r0, r4
 80a3632:	f7ff ffea 	bl	80a360a <_ZN6String12changeBufferEj>
 80a3636:	b120      	cbz	r0, 80a3642 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a3638:	68a3      	ldr	r3, [r4, #8]
 80a363a:	b90b      	cbnz	r3, 80a3640 <_ZN6String7reserveEj+0x1e>
 80a363c:	6822      	ldr	r2, [r4, #0]
 80a363e:	7013      	strb	r3, [r2, #0]
 80a3640:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a3642:	bd10      	pop	{r4, pc}

080a3644 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a3644:	b570      	push	{r4, r5, r6, lr}
 80a3646:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a3648:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a364a:	4604      	mov	r4, r0
 80a364c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a364e:	f7ff ffe8 	bl	80a3622 <_ZN6String7reserveEj>
 80a3652:	b918      	cbnz	r0, 80a365c <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a3654:	4620      	mov	r0, r4
 80a3656:	f7ff ffcd 	bl	80a35f4 <_ZN6String10invalidateEv>
		return *this;
 80a365a:	e009      	b.n	80a3670 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a365c:	462a      	mov	r2, r5
 80a365e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a3660:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a3662:	6820      	ldr	r0, [r4, #0]
 80a3664:	f001 fd24 	bl	80a50b0 <memcpy>
	buffer[len] = 0;
 80a3668:	6822      	ldr	r2, [r4, #0]
 80a366a:	68a3      	ldr	r3, [r4, #8]
 80a366c:	2100      	movs	r1, #0
 80a366e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a3670:	4620      	mov	r0, r4
 80a3672:	bd70      	pop	{r4, r5, r6, pc}

080a3674 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3674:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3676:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3678:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a367a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a367c:	6043      	str	r3, [r0, #4]
	len = 0;
 80a367e:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a3680:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a3682:	460d      	mov	r5, r1
 80a3684:	b139      	cbz	r1, 80a3696 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a3686:	4608      	mov	r0, r1
 80a3688:	f001 fd25 	bl	80a50d6 <strlen>
 80a368c:	4629      	mov	r1, r5
 80a368e:	4602      	mov	r2, r0
 80a3690:	4620      	mov	r0, r4
 80a3692:	f7ff ffd7 	bl	80a3644 <_ZN6String4copyEPKcj>
}
 80a3696:	4620      	mov	r0, r4
 80a3698:	bd38      	pop	{r3, r4, r5, pc}

080a369a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a369a:	b538      	push	{r3, r4, r5, lr}
 80a369c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a369e:	460c      	mov	r4, r1
 80a36a0:	b141      	cbz	r1, 80a36b4 <_ZN6StringaSEPKc+0x1a>
 80a36a2:	4608      	mov	r0, r1
 80a36a4:	f001 fd17 	bl	80a50d6 <strlen>
 80a36a8:	4621      	mov	r1, r4
 80a36aa:	4602      	mov	r2, r0
 80a36ac:	4628      	mov	r0, r5
 80a36ae:	f7ff ffc9 	bl	80a3644 <_ZN6String4copyEPKcj>
 80a36b2:	e001      	b.n	80a36b8 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a36b4:	f7ff ff9e 	bl	80a35f4 <_ZN6String10invalidateEv>

	return *this;
}
 80a36b8:	4628      	mov	r0, r5
 80a36ba:	bd38      	pop	{r3, r4, r5, pc}

080a36bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a36bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a36be:	4606      	mov	r6, r0
 80a36c0:	460d      	mov	r5, r1
 80a36c2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a36c4:	2400      	movs	r4, #0
  while (size--) {
 80a36c6:	42bd      	cmp	r5, r7
 80a36c8:	d00c      	beq.n	80a36e4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a36ca:	6833      	ldr	r3, [r6, #0]
 80a36cc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a36d0:	689b      	ldr	r3, [r3, #8]
 80a36d2:	4630      	mov	r0, r6
 80a36d4:	4798      	blx	r3
     if (chunk>=0)
 80a36d6:	2800      	cmp	r0, #0
 80a36d8:	db01      	blt.n	80a36de <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a36da:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a36dc:	e7f3      	b.n	80a36c6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a36de:	2c00      	cmp	r4, #0
 80a36e0:	bf08      	it	eq
 80a36e2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a36e4:	4620      	mov	r0, r4
 80a36e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a36e8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a36e8:	b570      	push	{r4, r5, r6, lr}
 80a36ea:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a36ec:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a36ee:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a36f0:	b149      	cbz	r1, 80a3706 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a36f2:	f001 fcf0 	bl	80a50d6 <strlen>
 80a36f6:	682b      	ldr	r3, [r5, #0]
 80a36f8:	4602      	mov	r2, r0
 80a36fa:	4621      	mov	r1, r4
 80a36fc:	4628      	mov	r0, r5
    }
 80a36fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a3702:	68db      	ldr	r3, [r3, #12]
 80a3704:	4718      	bx	r3
    }
 80a3706:	bd70      	pop	{r4, r5, r6, pc}

080a3708 <_ZN5Print5printEPKc>:
 80a3708:	b508      	push	{r3, lr}
 80a370a:	f7ff ffed 	bl	80a36e8 <_ZN5Print5writeEPKc>
 80a370e:	bd08      	pop	{r3, pc}

080a3710 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a3710:	6803      	ldr	r3, [r0, #0]
 80a3712:	689b      	ldr	r3, [r3, #8]
 80a3714:	4718      	bx	r3

080a3716 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a3716:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a3718:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a371a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a371c:	f7ff fff8 	bl	80a3710 <_ZN5Print5printEc>
  n += print('\n');
 80a3720:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a3722:	4604      	mov	r4, r0
  n += print('\n');
 80a3724:	4628      	mov	r0, r5
 80a3726:	f7ff fff3 	bl	80a3710 <_ZN5Print5printEc>
  return n;
}
 80a372a:	4420      	add	r0, r4
 80a372c:	bd38      	pop	{r3, r4, r5, pc}

080a372e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a372e:	b538      	push	{r3, r4, r5, lr}
 80a3730:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3732:	f7ff ffd9 	bl	80a36e8 <_ZN5Print5writeEPKc>
 80a3736:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a3738:	4628      	mov	r0, r5
 80a373a:	f7ff ffec 	bl	80a3716 <_ZN5Print7printlnEv>
  return n;
}
 80a373e:	4420      	add	r0, r4
 80a3740:	bd38      	pop	{r3, r4, r5, pc}

080a3742 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a3742:	2a01      	cmp	r2, #1
 80a3744:	bf98      	it	ls
 80a3746:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a3748:	b530      	push	{r4, r5, lr}
 80a374a:	460b      	mov	r3, r1
 80a374c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a374e:	2100      	movs	r1, #0
 80a3750:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a3754:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a3758:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a375c:	fb05 3312 	mls	r3, r5, r2, r3
 80a3760:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a3762:	2b09      	cmp	r3, #9
 80a3764:	bf94      	ite	ls
 80a3766:	3330      	addls	r3, #48	; 0x30
 80a3768:	3337      	addhi	r3, #55	; 0x37
 80a376a:	b2db      	uxtb	r3, r3
 80a376c:	4621      	mov	r1, r4
 80a376e:	f804 3901 	strb.w	r3, [r4], #-1
 80a3772:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a3774:	2d00      	cmp	r5, #0
 80a3776:	d1ef      	bne.n	80a3758 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a3778:	f7ff ffb6 	bl	80a36e8 <_ZN5Print5writeEPKc>
}
 80a377c:	b00b      	add	sp, #44	; 0x2c
 80a377e:	bd30      	pop	{r4, r5, pc}

080a3780 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a3780:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a3782:	b922      	cbnz	r2, 80a378e <_ZN5Print5printEmi+0xe>
 80a3784:	6803      	ldr	r3, [r0, #0]
 80a3786:	b2c9      	uxtb	r1, r1
 80a3788:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a378a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a378c:	4718      	bx	r3
  else return printNumber(n, base);
 80a378e:	b2d2      	uxtb	r2, r2
}
 80a3790:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a3792:	f7ff bfd6 	b.w	80a3742 <_ZN5Print11printNumberEmh>

080a3796 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a3796:	f7ff bff3 	b.w	80a3780 <_ZN5Print5printEmi>

080a379a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a379a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a379e:	4607      	mov	r7, r0
 80a37a0:	460e      	mov	r6, r1
  if (base == 0) {
 80a37a2:	4615      	mov	r5, r2
 80a37a4:	b92a      	cbnz	r2, 80a37b2 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a37a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a37aa:	6803      	ldr	r3, [r0, #0]
 80a37ac:	b2c9      	uxtb	r1, r1
 80a37ae:	689b      	ldr	r3, [r3, #8]
 80a37b0:	4718      	bx	r3
  } else if (base == 10) {
 80a37b2:	2a0a      	cmp	r2, #10
 80a37b4:	d102      	bne.n	80a37bc <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a37b6:	2900      	cmp	r1, #0
 80a37b8:	da01      	bge.n	80a37be <_ZN5Print5printEli+0x24>
 80a37ba:	e004      	b.n	80a37c6 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a37bc:	b2d2      	uxtb	r2, r2
  }
}
 80a37be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a37c2:	f7ff bfbe 	b.w	80a3742 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a37c6:	212d      	movs	r1, #45	; 0x2d
 80a37c8:	f7ff ffa2 	bl	80a3710 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a37cc:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a37ce:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a37d0:	4271      	negs	r1, r6
 80a37d2:	4638      	mov	r0, r7
 80a37d4:	f7ff ffb5 	bl	80a3742 <_ZN5Print11printNumberEmh>
 80a37d8:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a37da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a37de <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a37de:	f7ff bfdc 	b.w	80a379a <_ZN5Print5printEli>

080a37e2 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a37e2:	b538      	push	{r3, r4, r5, lr}
 80a37e4:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a37e6:	f7ff ffd8 	bl	80a379a <_ZN5Print5printEli>
 80a37ea:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a37ec:	4628      	mov	r0, r5
 80a37ee:	f7ff ff92 	bl	80a3716 <_ZN5Print7printlnEv>
  return n;
}
 80a37f2:	4420      	add	r0, r4
 80a37f4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a37f8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a37f8:	4a01      	ldr	r2, [pc, #4]	; (80a3800 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a37fa:	4b02      	ldr	r3, [pc, #8]	; (80a3804 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a37fc:	601a      	str	r2, [r3, #0]
 80a37fe:	4770      	bx	lr
 80a3800:	080a52c3 	.word	0x080a52c3
 80a3804:	20000428 	.word	0x20000428

080a3808 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a3808:	4b02      	ldr	r3, [pc, #8]	; (80a3814 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a380a:	681a      	ldr	r2, [r3, #0]
 80a380c:	4b02      	ldr	r3, [pc, #8]	; (80a3818 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a380e:	601a      	str	r2, [r3, #0]
 80a3810:	4770      	bx	lr
 80a3812:	bf00      	nop
 80a3814:	20000360 	.word	0x20000360
 80a3818:	2000042c 	.word	0x2000042c

080a381c <delay>:
  return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a381c:	2100      	movs	r1, #0
 80a381e:	f7ff be21 	b.w	80a3464 <system_delay_ms>
	...

080a3824 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a3824:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a3826:	4b14      	ldr	r3, [pc, #80]	; (80a3878 <serialEventRun+0x54>)
 80a3828:	b133      	cbz	r3, 80a3838 <serialEventRun+0x14>
 80a382a:	f000 f921 	bl	80a3a70 <_Z16_fetch_usbserialv>
 80a382e:	6803      	ldr	r3, [r0, #0]
 80a3830:	691b      	ldr	r3, [r3, #16]
 80a3832:	4798      	blx	r3
 80a3834:	2800      	cmp	r0, #0
 80a3836:	dc16      	bgt.n	80a3866 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a3838:	4b10      	ldr	r3, [pc, #64]	; (80a387c <serialEventRun+0x58>)
 80a383a:	b133      	cbz	r3, 80a384a <serialEventRun+0x26>
 80a383c:	f000 f9e6 	bl	80a3c0c <_Z22__fetch_global_Serial1v>
 80a3840:	6803      	ldr	r3, [r0, #0]
 80a3842:	691b      	ldr	r3, [r3, #16]
 80a3844:	4798      	blx	r3
 80a3846:	2800      	cmp	r0, #0
 80a3848:	dc10      	bgt.n	80a386c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a384a:	4b0d      	ldr	r3, [pc, #52]	; (80a3880 <serialEventRun+0x5c>)
 80a384c:	b10b      	cbz	r3, 80a3852 <serialEventRun+0x2e>
 80a384e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a3852:	4b0c      	ldr	r3, [pc, #48]	; (80a3884 <serialEventRun+0x60>)
 80a3854:	b17b      	cbz	r3, 80a3876 <serialEventRun+0x52>
 80a3856:	f000 f947 	bl	80a3ae8 <_Z17_fetch_usbserial1v>
 80a385a:	6803      	ldr	r3, [r0, #0]
 80a385c:	691b      	ldr	r3, [r3, #16]
 80a385e:	4798      	blx	r3
 80a3860:	2800      	cmp	r0, #0
 80a3862:	dc06      	bgt.n	80a3872 <serialEventRun+0x4e>
 80a3864:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a3866:	f3af 8000 	nop.w
 80a386a:	e7e5      	b.n	80a3838 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a386c:	f3af 8000 	nop.w
 80a3870:	e7eb      	b.n	80a384a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a3872:	f3af 8000 	nop.w
 80a3876:	bd08      	pop	{r3, pc}
	...

080a3888 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a3888:	b508      	push	{r3, lr}
	serialEventRun();
 80a388a:	f7ff ffcb 	bl	80a3824 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a388e:	f7ff fce7 	bl	80a3260 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a3892:	4b01      	ldr	r3, [pc, #4]	; (80a3898 <_post_loop+0x10>)
 80a3894:	6018      	str	r0, [r3, #0]
 80a3896:	bd08      	pop	{r3, pc}
 80a3898:	200008b8 	.word	0x200008b8

080a389c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a389c:	4802      	ldr	r0, [pc, #8]	; (80a38a8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a389e:	4a03      	ldr	r2, [pc, #12]	; (80a38ac <_Z33system_initialize_user_backup_ramv+0x10>)
 80a38a0:	4903      	ldr	r1, [pc, #12]	; (80a38b0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a38a2:	1a12      	subs	r2, r2, r0
 80a38a4:	f001 bc04 	b.w	80a50b0 <memcpy>
 80a38a8:	40024000 	.word	0x40024000
 80a38ac:	40024004 	.word	0x40024004
 80a38b0:	080a5400 	.word	0x080a5400

080a38b4 <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80a38b4:	2000      	movs	r0, #0
 80a38b6:	4770      	bx	lr

080a38b8 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a38b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80a38ba:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a38bc:	4604      	mov	r4, r0
    switch (req->type) {
 80a38be:	2b0a      	cmp	r3, #10
 80a38c0:	d00e      	beq.n	80a38e0 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 80a38c2:	2b50      	cmp	r3, #80	; 0x50
 80a38c4:	d11c      	bne.n	80a3900 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80a38c6:	4b10      	ldr	r3, [pc, #64]	; (80a3908 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80a38c8:	681d      	ldr	r5, [r3, #0]
 80a38ca:	b1cd      	cbz	r5, 80a3900 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 80a38cc:	7d03      	ldrb	r3, [r0, #20]
 80a38ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a38d2:	9300      	str	r3, [sp, #0]
 80a38d4:	68c2      	ldr	r2, [r0, #12]
 80a38d6:	f100 0310 	add.w	r3, r0, #16
 80a38da:	6880      	ldr	r0, [r0, #8]
 80a38dc:	47a8      	blx	r5
 80a38de:	e007      	b.n	80a38f0 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80a38e0:	f100 0310 	add.w	r3, r0, #16
 80a38e4:	68c2      	ldr	r2, [r0, #12]
 80a38e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a38ea:	6880      	ldr	r0, [r0, #8]
 80a38ec:	f7ff ffe2 	bl	80a38b4 <_Z26usb_request_custom_handlerPcjjPj>
 80a38f0:	b130      	cbz	r0, 80a3900 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80a38f2:	2200      	movs	r2, #0
 80a38f4:	4620      	mov	r0, r4
 80a38f6:	4611      	mov	r1, r2
 80a38f8:	f7ff fdcc 	bl	80a3494 <system_set_usb_request_result>
        return true;
 80a38fc:	2001      	movs	r0, #1
 80a38fe:	e000      	b.n	80a3902 <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80a3900:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80a3902:	b003      	add	sp, #12
 80a3904:	bd30      	pop	{r4, r5, pc}
 80a3906:	bf00      	nop
 80a3908:	20000430 	.word	0x20000430

080a390c <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80a390c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a390e:	4c0c      	ldr	r4, [pc, #48]	; (80a3940 <module_user_init_hook+0x34>)
 80a3910:	4d0c      	ldr	r5, [pc, #48]	; (80a3944 <module_user_init_hook+0x38>)
 80a3912:	6823      	ldr	r3, [r4, #0]
 80a3914:	42ab      	cmp	r3, r5
 80a3916:	4b0c      	ldr	r3, [pc, #48]	; (80a3948 <module_user_init_hook+0x3c>)
 80a3918:	bf0c      	ite	eq
 80a391a:	2201      	moveq	r2, #1
 80a391c:	2200      	movne	r2, #0
 80a391e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3920:	d002      	beq.n	80a3928 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a3922:	f7ff ffbb 	bl	80a389c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a3926:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a3928:	4b08      	ldr	r3, [pc, #32]	; (80a394c <module_user_init_hook+0x40>)
 80a392a:	b11b      	cbz	r3, 80a3934 <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a392c:	f7ff fc90 	bl	80a3250 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a3930:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80a3934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80a3938:	2100      	movs	r1, #0
 80a393a:	4805      	ldr	r0, [pc, #20]	; (80a3950 <module_user_init_hook+0x44>)
 80a393c:	f7ff bda2 	b.w	80a3484 <system_set_usb_request_app_handler>
 80a3940:	40024000 	.word	0x40024000
 80a3944:	9a271c1e 	.word	0x9a271c1e
 80a3948:	20000434 	.word	0x20000434
 80a394c:	00000000 	.word	0x00000000
 80a3950:	080a38b9 	.word	0x080a38b9

080a3954 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a3954:	4770      	bx	lr

080a3956 <_ZN9IPAddressD0Ev>:
 80a3956:	b510      	push	{r4, lr}
 80a3958:	4604      	mov	r4, r0
 80a395a:	f7fc fba0 	bl	80a009e <_ZdlPv>
 80a395e:	4620      	mov	r0, r4
 80a3960:	bd10      	pop	{r4, pc}

080a3962 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a3962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3964:	460f      	mov	r7, r1
 80a3966:	f100 0608 	add.w	r6, r0, #8
 80a396a:	1d05      	adds	r5, r0, #4
 80a396c:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a396e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a3972:	220a      	movs	r2, #10
 80a3974:	4638      	mov	r0, r7
 80a3976:	f7ff ff0e 	bl	80a3796 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a397a:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a397c:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a397e:	d007      	beq.n	80a3990 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a3980:	2c00      	cmp	r4, #0
 80a3982:	d0f4      	beq.n	80a396e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a3984:	212e      	movs	r1, #46	; 0x2e
 80a3986:	4638      	mov	r0, r7
 80a3988:	f7ff fec2 	bl	80a3710 <_ZN5Print5printEc>
 80a398c:	4404      	add	r4, r0
 80a398e:	e7ee      	b.n	80a396e <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a3990:	4620      	mov	r0, r4
 80a3992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3994 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a3994:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a3996:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a399a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a399e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a39a2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a39a6:	2304      	movs	r3, #4
 80a39a8:	6041      	str	r1, [r0, #4]
 80a39aa:	7503      	strb	r3, [r0, #20]
 80a39ac:	bd10      	pop	{r4, pc}
	...

080a39b0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a39b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a39b2:	4d04      	ldr	r5, [pc, #16]	; (80a39c4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a39b4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a39b6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a39ba:	9500      	str	r5, [sp, #0]
 80a39bc:	f7ff ffea 	bl	80a3994 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a39c0:	b003      	add	sp, #12
 80a39c2:	bd30      	pop	{r4, r5, pc}
 80a39c4:	080a5320 	.word	0x080a5320

080a39c8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a39c8:	7441      	strb	r1, [r0, #17]
 80a39ca:	4770      	bx	lr

080a39cc <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a39cc:	4770      	bx	lr

080a39ce <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a39ce:	2100      	movs	r1, #0
 80a39d0:	7c00      	ldrb	r0, [r0, #16]
 80a39d2:	f7ff bd27 	b.w	80a3424 <HAL_USB_USART_Receive_Data>

080a39d6 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a39d6:	2101      	movs	r1, #1
 80a39d8:	7c00      	ldrb	r0, [r0, #16]
 80a39da:	f7ff bd23 	b.w	80a3424 <HAL_USB_USART_Receive_Data>

080a39de <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a39de:	7c00      	ldrb	r0, [r0, #16]
 80a39e0:	f7ff bd18 	b.w	80a3414 <HAL_USB_USART_Available_Data_For_Write>

080a39e4 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a39e4:	7c00      	ldrb	r0, [r0, #16]
 80a39e6:	f7ff bd0d 	b.w	80a3404 <HAL_USB_USART_Available_Data>

080a39ea <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a39ea:	b538      	push	{r3, r4, r5, lr}
 80a39ec:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a39ee:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a39f0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a39f2:	f7ff fd0f 	bl	80a3414 <HAL_USB_USART_Available_Data_For_Write>
 80a39f6:	2800      	cmp	r0, #0
 80a39f8:	dc01      	bgt.n	80a39fe <_ZN9USBSerial5writeEh+0x14>
 80a39fa:	7c60      	ldrb	r0, [r4, #17]
 80a39fc:	b120      	cbz	r0, 80a3a08 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a39fe:	4629      	mov	r1, r5
 80a3a00:	7c20      	ldrb	r0, [r4, #16]
 80a3a02:	f7ff fd17 	bl	80a3434 <HAL_USB_USART_Send_Data>
    return 1;
 80a3a06:	2001      	movs	r0, #1
  }
  return 0;
}
 80a3a08:	bd38      	pop	{r3, r4, r5, pc}

080a3a0a <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a3a0a:	7c00      	ldrb	r0, [r0, #16]
 80a3a0c:	f7ff bd1a 	b.w	80a3444 <HAL_USB_USART_Flush_Data>

080a3a10 <_ZN9USBSerialD0Ev>:
 80a3a10:	b510      	push	{r4, lr}
 80a3a12:	4604      	mov	r4, r0
 80a3a14:	f7fc fb43 	bl	80a009e <_ZdlPv>
 80a3a18:	4620      	mov	r0, r4
 80a3a1a:	bd10      	pop	{r4, pc}

080a3a1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3a1c:	b510      	push	{r4, lr}
 80a3a1e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a3a20:	2300      	movs	r3, #0
 80a3a22:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3a28:	60a3      	str	r3, [r4, #8]
 80a3a2a:	4b05      	ldr	r3, [pc, #20]	; (80a3a40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a3a2c:	4608      	mov	r0, r1
 80a3a2e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a3a30:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a3a32:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a3a34:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a3a36:	4611      	mov	r1, r2
 80a3a38:	f7ff fcdc 	bl	80a33f4 <HAL_USB_USART_Init>
}
 80a3a3c:	4620      	mov	r0, r4
 80a3a3e:	bd10      	pop	{r4, pc}
 80a3a40:	080a5334 	.word	0x080a5334

080a3a44 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a3a44:	b510      	push	{r4, lr}
 80a3a46:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3a48:	2214      	movs	r2, #20
 80a3a4a:	2100      	movs	r1, #0
 80a3a4c:	f001 fb3b 	bl	80a50c6 <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3a50:	4b05      	ldr	r3, [pc, #20]	; (80a3a68 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3a52:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3a54:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a3a56:	4b05      	ldr	r3, [pc, #20]	; (80a3a6c <_Z19acquireSerialBufferv+0x28>)
 80a3a58:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3a5a:	f240 1301 	movw	r3, #257	; 0x101
 80a3a5e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3a60:	2381      	movs	r3, #129	; 0x81
 80a3a62:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3a64:	bd10      	pop	{r4, pc}
 80a3a66:	bf00      	nop
 80a3a68:	200004bd 	.word	0x200004bd
 80a3a6c:	2000043c 	.word	0x2000043c

080a3a70 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a3a70:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3a72:	4d0e      	ldr	r5, [pc, #56]	; (80a3aac <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a3a74:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a3a76:	a801      	add	r0, sp, #4
 80a3a78:	f7ff ffe4 	bl	80a3a44 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3a7c:	6829      	ldr	r1, [r5, #0]
 80a3a7e:	f011 0401 	ands.w	r4, r1, #1
 80a3a82:	d110      	bne.n	80a3aa6 <_Z16_fetch_usbserialv+0x36>
 80a3a84:	4628      	mov	r0, r5
 80a3a86:	f7fc fb0c 	bl	80a00a2 <__cxa_guard_acquire>
 80a3a8a:	b160      	cbz	r0, 80a3aa6 <_Z16_fetch_usbserialv+0x36>
 80a3a8c:	aa01      	add	r2, sp, #4
 80a3a8e:	4621      	mov	r1, r4
 80a3a90:	4807      	ldr	r0, [pc, #28]	; (80a3ab0 <_Z16_fetch_usbserialv+0x40>)
 80a3a92:	f7ff ffc3 	bl	80a3a1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3a96:	4628      	mov	r0, r5
 80a3a98:	f7fc fb08 	bl	80a00ac <__cxa_guard_release>
 80a3a9c:	4a05      	ldr	r2, [pc, #20]	; (80a3ab4 <_Z16_fetch_usbserialv+0x44>)
 80a3a9e:	4906      	ldr	r1, [pc, #24]	; (80a3ab8 <_Z16_fetch_usbserialv+0x48>)
 80a3aa0:	4803      	ldr	r0, [pc, #12]	; (80a3ab0 <_Z16_fetch_usbserialv+0x40>)
 80a3aa2:	f000 fa13 	bl	80a3ecc <__aeabi_atexit>
	return _usbserial;
}
 80a3aa6:	4802      	ldr	r0, [pc, #8]	; (80a3ab0 <_Z16_fetch_usbserialv+0x40>)
 80a3aa8:	b007      	add	sp, #28
 80a3aaa:	bd30      	pop	{r4, r5, pc}
 80a3aac:	20000438 	.word	0x20000438
 80a3ab0:	200005c0 	.word	0x200005c0
 80a3ab4:	20000364 	.word	0x20000364
 80a3ab8:	080a39cd 	.word	0x080a39cd

080a3abc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a3abc:	b510      	push	{r4, lr}
 80a3abe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3ac0:	2214      	movs	r2, #20
 80a3ac2:	2100      	movs	r1, #0
 80a3ac4:	f001 faff 	bl	80a50c6 <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3ac8:	4b05      	ldr	r3, [pc, #20]	; (80a3ae0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3aca:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3acc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a3ace:	4b05      	ldr	r3, [pc, #20]	; (80a3ae4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a3ad0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3ad2:	f240 1301 	movw	r3, #257	; 0x101
 80a3ad6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3ad8:	2381      	movs	r3, #129	; 0x81
 80a3ada:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3adc:	bd10      	pop	{r4, pc}
 80a3ade:	bf00      	nop
 80a3ae0:	20000670 	.word	0x20000670
 80a3ae4:	200005d8 	.word	0x200005d8

080a3ae8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3ae8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3aea:	4c0e      	ldr	r4, [pc, #56]	; (80a3b24 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a3aec:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a3aee:	a801      	add	r0, sp, #4
 80a3af0:	f7ff ffe4 	bl	80a3abc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3af4:	6823      	ldr	r3, [r4, #0]
 80a3af6:	07db      	lsls	r3, r3, #31
 80a3af8:	d410      	bmi.n	80a3b1c <_Z17_fetch_usbserial1v+0x34>
 80a3afa:	4620      	mov	r0, r4
 80a3afc:	f7fc fad1 	bl	80a00a2 <__cxa_guard_acquire>
 80a3b00:	b160      	cbz	r0, 80a3b1c <_Z17_fetch_usbserial1v+0x34>
 80a3b02:	aa01      	add	r2, sp, #4
 80a3b04:	2101      	movs	r1, #1
 80a3b06:	4808      	ldr	r0, [pc, #32]	; (80a3b28 <_Z17_fetch_usbserial1v+0x40>)
 80a3b08:	f7ff ff88 	bl	80a3a1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3b0c:	4620      	mov	r0, r4
 80a3b0e:	f7fc facd 	bl	80a00ac <__cxa_guard_release>
 80a3b12:	4a06      	ldr	r2, [pc, #24]	; (80a3b2c <_Z17_fetch_usbserial1v+0x44>)
 80a3b14:	4906      	ldr	r1, [pc, #24]	; (80a3b30 <_Z17_fetch_usbserial1v+0x48>)
 80a3b16:	4804      	ldr	r0, [pc, #16]	; (80a3b28 <_Z17_fetch_usbserial1v+0x40>)
 80a3b18:	f000 f9d8 	bl	80a3ecc <__aeabi_atexit>
  return _usbserial1;
}
 80a3b1c:	4802      	ldr	r0, [pc, #8]	; (80a3b28 <_Z17_fetch_usbserial1v+0x40>)
 80a3b1e:	b006      	add	sp, #24
 80a3b20:	bd10      	pop	{r4, pc}
 80a3b22:	bf00      	nop
 80a3b24:	200005d4 	.word	0x200005d4
 80a3b28:	2000065c 	.word	0x2000065c
 80a3b2c:	20000364 	.word	0x20000364
 80a3b30:	080a39cd 	.word	0x080a39cd

080a3b34 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a3b34:	4700      	bx	r0
	...

080a3b38 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a3b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3b3a:	461c      	mov	r4, r3
 80a3b3c:	b085      	sub	sp, #20
 80a3b3e:	4605      	mov	r5, r0
 80a3b40:	460e      	mov	r6, r1
 80a3b42:	4617      	mov	r7, r2
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a3b44:	f7ff fb6c 	bl	80a3220 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80a3b48:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80a3b4a:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a3b4c:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a3b50:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a3b52:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a3b56:	bfb4      	ite	lt
 80a3b58:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a3b5a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a3b5e:	4628      	mov	r0, r5
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a3b60:	bfa4      	itt	ge
 80a3b62:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a3b66:	ab03      	addge	r3, sp, #12
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a3b68:	9300      	str	r3, [sp, #0]
 80a3b6a:	4632      	mov	r2, r6
 80a3b6c:	463b      	mov	r3, r7
 80a3b6e:	4904      	ldr	r1, [pc, #16]	; (80a3b80 <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a3b70:	bfa8      	it	ge
 80a3b72:	f88d 400d 	strbge.w	r4, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a3b76:	f7ff fb4b 	bl	80a3210 <HAL_Interrupts_Attach>
    return true;
}
 80a3b7a:	2001      	movs	r0, #1
 80a3b7c:	b005      	add	sp, #20
 80a3b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3b80:	080a3b35 	.word	0x080a3b35

080a3b84 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a3b84:	4770      	bx	lr

080a3b86 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3b86:	7441      	strb	r1, [r0, #17]
 80a3b88:	4770      	bx	lr

080a3b8a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a3b8a:	7c00      	ldrb	r0, [r0, #16]
 80a3b8c:	f7ff bbb0 	b.w	80a32f0 <HAL_USART_Available_Data_For_Write>

080a3b90 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a3b90:	7c00      	ldrb	r0, [r0, #16]
 80a3b92:	f7ff bb85 	b.w	80a32a0 <HAL_USART_Available_Data>

080a3b96 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a3b96:	7c00      	ldrb	r0, [r0, #16]
 80a3b98:	f7ff bb92 	b.w	80a32c0 <HAL_USART_Peek_Data>

080a3b9c <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a3b9c:	7c00      	ldrb	r0, [r0, #16]
 80a3b9e:	f7ff bb87 	b.w	80a32b0 <HAL_USART_Read_Data>

080a3ba2 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a3ba2:	7c00      	ldrb	r0, [r0, #16]
 80a3ba4:	f7ff bb94 	b.w	80a32d0 <HAL_USART_Flush_Data>

080a3ba8 <_ZN11USARTSerialD0Ev>:
 80a3ba8:	b510      	push	{r4, lr}
 80a3baa:	4604      	mov	r4, r0
 80a3bac:	f7fc fa77 	bl	80a009e <_ZdlPv>
 80a3bb0:	4620      	mov	r0, r4
 80a3bb2:	bd10      	pop	{r4, pc}

080a3bb4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3bb4:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3bb6:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a3bb8:	4604      	mov	r4, r0
 80a3bba:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3bbc:	b925      	cbnz	r5, 80a3bc8 <_ZN11USARTSerial5writeEh+0x14>
 80a3bbe:	7c00      	ldrb	r0, [r0, #16]
 80a3bc0:	f7ff fb96 	bl	80a32f0 <HAL_USART_Available_Data_For_Write>
 80a3bc4:	2800      	cmp	r0, #0
 80a3bc6:	dd05      	ble.n	80a3bd4 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3bc8:	4631      	mov	r1, r6
 80a3bca:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a3bcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3bd0:	f7ff bb5e 	b.w	80a3290 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a3bd4:	4628      	mov	r0, r5
 80a3bd6:	bd70      	pop	{r4, r5, r6, pc}

080a3bd8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3bd8:	b510      	push	{r4, lr}
 80a3bda:	4604      	mov	r4, r0
 80a3bdc:	4608      	mov	r0, r1
 80a3bde:	4611      	mov	r1, r2
 80a3be0:	2200      	movs	r2, #0
 80a3be2:	6062      	str	r2, [r4, #4]
 80a3be4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3be8:	60a2      	str	r2, [r4, #8]
 80a3bea:	4a05      	ldr	r2, [pc, #20]	; (80a3c00 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a3bec:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3bee:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a3bf0:	2201      	movs	r2, #1
 80a3bf2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a3bf4:	461a      	mov	r2, r3
 80a3bf6:	f7ff fb43 	bl	80a3280 <HAL_USART_Init>
}
 80a3bfa:	4620      	mov	r0, r4
 80a3bfc:	bd10      	pop	{r4, pc}
 80a3bfe:	bf00      	nop
 80a3c00:	080a5364 	.word	0x080a5364

080a3c04 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a3c04:	7c00      	ldrb	r0, [r0, #16]
 80a3c06:	f7ff bb6b 	b.w	80a32e0 <HAL_USART_Is_Enabled>
	...

080a3c0c <_Z22__fetch_global_Serial1v>:
// Preinstantiate Objects //////////////////////////////////////////////////////
static Ring_Buffer serial1_rx_buffer;
static Ring_Buffer serial1_tx_buffer;

USARTSerial& __fetch_global_Serial1()
{
 80a3c0c:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a3c0e:	4d0c      	ldr	r5, [pc, #48]	; (80a3c40 <_Z22__fetch_global_Serial1v+0x34>)
 80a3c10:	6829      	ldr	r1, [r5, #0]
 80a3c12:	f011 0401 	ands.w	r4, r1, #1
 80a3c16:	d111      	bne.n	80a3c3c <_Z22__fetch_global_Serial1v+0x30>
 80a3c18:	4628      	mov	r0, r5
 80a3c1a:	f7fc fa42 	bl	80a00a2 <__cxa_guard_acquire>
 80a3c1e:	b168      	cbz	r0, 80a3c3c <_Z22__fetch_global_Serial1v+0x30>
 80a3c20:	4a08      	ldr	r2, [pc, #32]	; (80a3c44 <_Z22__fetch_global_Serial1v+0x38>)
 80a3c22:	4621      	mov	r1, r4
 80a3c24:	4b08      	ldr	r3, [pc, #32]	; (80a3c48 <_Z22__fetch_global_Serial1v+0x3c>)
 80a3c26:	4809      	ldr	r0, [pc, #36]	; (80a3c4c <_Z22__fetch_global_Serial1v+0x40>)
 80a3c28:	f7ff ffd6 	bl	80a3bd8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a3c2c:	4628      	mov	r0, r5
 80a3c2e:	f7fc fa3d 	bl	80a00ac <__cxa_guard_release>
 80a3c32:	4a07      	ldr	r2, [pc, #28]	; (80a3c50 <_Z22__fetch_global_Serial1v+0x44>)
 80a3c34:	4907      	ldr	r1, [pc, #28]	; (80a3c54 <_Z22__fetch_global_Serial1v+0x48>)
 80a3c36:	4805      	ldr	r0, [pc, #20]	; (80a3c4c <_Z22__fetch_global_Serial1v+0x40>)
 80a3c38:	f000 f948 	bl	80a3ecc <__aeabi_atexit>
	return serial1;
}
 80a3c3c:	4803      	ldr	r0, [pc, #12]	; (80a3c4c <_Z22__fetch_global_Serial1v+0x40>)
 80a3c3e:	bd38      	pop	{r3, r4, r5, pc}
 80a3c40:	2000080c 	.word	0x2000080c
 80a3c44:	20000810 	.word	0x20000810
 80a3c48:	20000788 	.word	0x20000788
 80a3c4c:	20000774 	.word	0x20000774
 80a3c50:	20000364 	.word	0x20000364
 80a3c54:	080a3b85 	.word	0x080a3b85

080a3c58 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a3c58:	4770      	bx	lr

080a3c5a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a3c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3c5c:	4606      	mov	r6, r0
 80a3c5e:	4615      	mov	r5, r2
 80a3c60:	460c      	mov	r4, r1
 80a3c62:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3c64:	42bc      	cmp	r4, r7
 80a3c66:	d006      	beq.n	80a3c76 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a3c68:	6833      	ldr	r3, [r6, #0]
 80a3c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a3c6e:	689b      	ldr	r3, [r3, #8]
 80a3c70:	4630      	mov	r0, r6
 80a3c72:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3c74:	e7f6      	b.n	80a3c64 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a3c76:	4628      	mov	r0, r5
 80a3c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3c7a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a3c7a:	2200      	movs	r2, #0
 80a3c7c:	7c00      	ldrb	r0, [r0, #16]
 80a3c7e:	f7ff bb67 	b.w	80a3350 <HAL_I2C_Write_Data>

080a3c82 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a3c82:	2100      	movs	r1, #0
 80a3c84:	7c00      	ldrb	r0, [r0, #16]
 80a3c86:	f7ff bb6b 	b.w	80a3360 <HAL_I2C_Available_Data>

080a3c8a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a3c8a:	2100      	movs	r1, #0
 80a3c8c:	7c00      	ldrb	r0, [r0, #16]
 80a3c8e:	f7ff bb6f 	b.w	80a3370 <HAL_I2C_Read_Data>

080a3c92 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a3c92:	2100      	movs	r1, #0
 80a3c94:	7c00      	ldrb	r0, [r0, #16]
 80a3c96:	f7ff bb73 	b.w	80a3380 <HAL_I2C_Peek_Data>

080a3c9a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a3c9a:	2100      	movs	r1, #0
 80a3c9c:	7c00      	ldrb	r0, [r0, #16]
 80a3c9e:	f7ff bb77 	b.w	80a3390 <HAL_I2C_Flush_Data>

080a3ca2 <_ZN7TwoWireD0Ev>:
 80a3ca2:	b510      	push	{r4, lr}
 80a3ca4:	4604      	mov	r4, r0
 80a3ca6:	f7fc f9fa 	bl	80a009e <_ZdlPv>
 80a3caa:	4620      	mov	r0, r4
 80a3cac:	bd10      	pop	{r4, pc}
	...

080a3cb0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a3cb0:	b510      	push	{r4, lr}
 80a3cb2:	4604      	mov	r4, r0
 80a3cb4:	4608      	mov	r0, r1
 80a3cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3cba:	60a3      	str	r3, [r4, #8]
 80a3cbc:	4b04      	ldr	r3, [pc, #16]	; (80a3cd0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a3cbe:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a3cc0:	7420      	strb	r0, [r4, #16]
 80a3cc2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a3cc4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a3cc6:	f7ff fb73 	bl	80a33b0 <HAL_I2C_Init>

}
 80a3cca:	4620      	mov	r0, r4
 80a3ccc:	bd10      	pop	{r4, pc}
 80a3cce:	bf00      	nop
 80a3cd0:	080a5394 	.word	0x080a5394

080a3cd4 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a3cd4:	2200      	movs	r2, #0
 80a3cd6:	7c00      	ldrb	r0, [r0, #16]
 80a3cd8:	f7ff bb12 	b.w	80a3300 <HAL_I2C_Set_Speed>

080a3cdc <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a3cdc:	2300      	movs	r3, #0
 80a3cde:	461a      	mov	r2, r3
 80a3ce0:	4619      	mov	r1, r3
 80a3ce2:	7c00      	ldrb	r0, [r0, #16]
 80a3ce4:	f7ff bb14 	b.w	80a3310 <HAL_I2C_Begin>

080a3ce8 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a3ce8:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a3cea:	2400      	movs	r4, #0
 80a3cec:	7c00      	ldrb	r0, [r0, #16]
 80a3cee:	9400      	str	r4, [sp, #0]
 80a3cf0:	f7ff fb16 	bl	80a3320 <HAL_I2C_Request_Data>
  return result;
}
 80a3cf4:	b2c0      	uxtb	r0, r0
 80a3cf6:	b002      	add	sp, #8
 80a3cf8:	bd10      	pop	{r4, pc}

080a3cfa <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a3cfa:	2301      	movs	r3, #1
 80a3cfc:	f7ff bff4 	b.w	80a3ce8 <_ZN7TwoWire11requestFromEhhh>

080a3d00 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a3d00:	2301      	movs	r3, #1
 80a3d02:	b2d2      	uxtb	r2, r2
 80a3d04:	b2c9      	uxtb	r1, r1
 80a3d06:	f7ff bfef 	b.w	80a3ce8 <_ZN7TwoWire11requestFromEhhh>

080a3d0a <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a3d0a:	2200      	movs	r2, #0
 80a3d0c:	7c00      	ldrb	r0, [r0, #16]
 80a3d0e:	f7ff bb0f 	b.w	80a3330 <HAL_I2C_Begin_Transmission>

080a3d12 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a3d12:	2200      	movs	r2, #0
 80a3d14:	7c00      	ldrb	r0, [r0, #16]
 80a3d16:	f7ff bb13 	b.w	80a3340 <HAL_I2C_End_Transmission>

080a3d1a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a3d1a:	2101      	movs	r1, #1
 80a3d1c:	f7ff bff9 	b.w	80a3d12 <_ZN7TwoWire15endTransmissionEh>

080a3d20 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a3d20:	2100      	movs	r1, #0
 80a3d22:	7c00      	ldrb	r0, [r0, #16]
 80a3d24:	f7ff bb3c 	b.w	80a33a0 <HAL_I2C_Is_Enabled>

080a3d28 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a3d28:	4770      	bx	lr

080a3d2a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a3d2a:	2200      	movs	r2, #0
 80a3d2c:	4611      	mov	r1, r2
 80a3d2e:	4610      	mov	r0, r2
 80a3d30:	f7ff bbb8 	b.w	80a34a4 <network_ready>

080a3d34 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a3d34:	4803      	ldr	r0, [pc, #12]	; (80a3d44 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a3d36:	4b04      	ldr	r3, [pc, #16]	; (80a3d48 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a3d38:	4a04      	ldr	r2, [pc, #16]	; (80a3d4c <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a3d3a:	4905      	ldr	r1, [pc, #20]	; (80a3d50 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a3d3c:	6003      	str	r3, [r0, #0]
 80a3d3e:	f000 b8c5 	b.w	80a3ecc <__aeabi_atexit>
 80a3d42:	bf00      	nop
 80a3d44:	20000894 	.word	0x20000894
 80a3d48:	080a53bc 	.word	0x080a53bc
 80a3d4c:	20000364 	.word	0x20000364
 80a3d50:	080a3d29 	.word	0x080a3d29

080a3d54 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a3d54:	b510      	push	{r4, lr}
 80a3d56:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a3d58:	480f      	ldr	r0, [pc, #60]	; (80a3d98 <pinAvailable+0x44>)
 80a3d5a:	f7ff fbdf 	bl	80a351c <_ZN8SPIClass9isEnabledEv>
 80a3d5e:	b128      	cbz	r0, 80a3d6c <pinAvailable+0x18>
 80a3d60:	f1a4 030d 	sub.w	r3, r4, #13
 80a3d64:	2b02      	cmp	r3, #2
 80a3d66:	d801      	bhi.n	80a3d6c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a3d68:	2000      	movs	r0, #0
 80a3d6a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a3d6c:	f000 f88e 	bl	80a3e8c <_Z19__fetch_global_Wirev>
 80a3d70:	f7ff ffd6 	bl	80a3d20 <_ZN7TwoWire9isEnabledEv>
 80a3d74:	b108      	cbz	r0, 80a3d7a <pinAvailable+0x26>
 80a3d76:	2c01      	cmp	r4, #1
 80a3d78:	d9f6      	bls.n	80a3d68 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a3d7a:	f7ff ff47 	bl	80a3c0c <_Z22__fetch_global_Serial1v>
 80a3d7e:	f7ff ff41 	bl	80a3c04 <_ZN11USARTSerial9isEnabledEv>
 80a3d82:	b118      	cbz	r0, 80a3d8c <pinAvailable+0x38>
 80a3d84:	f1a4 0312 	sub.w	r3, r4, #18
 80a3d88:	2b01      	cmp	r3, #1
 80a3d8a:	d9ed      	bls.n	80a3d68 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a3d8c:	2c17      	cmp	r4, #23
 80a3d8e:	bf8c      	ite	hi
 80a3d90:	2000      	movhi	r0, #0
 80a3d92:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a3d94:	bd10      	pop	{r4, pc}
 80a3d96:	bf00      	nop
 80a3d98:	20000898 	.word	0x20000898

080a3d9c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3d9c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a3d9e:	b538      	push	{r3, r4, r5, lr}
 80a3da0:	4604      	mov	r4, r0
 80a3da2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3da4:	d80a      	bhi.n	80a3dbc <pinMode+0x20>
 80a3da6:	29ff      	cmp	r1, #255	; 0xff
 80a3da8:	d008      	beq.n	80a3dbc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a3daa:	f7ff ffd3 	bl	80a3d54 <pinAvailable>
 80a3dae:	b128      	cbz	r0, 80a3dbc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3db0:	4629      	mov	r1, r5
 80a3db2:	4620      	mov	r0, r4
}
 80a3db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3db8:	f7ff ba0a 	b.w	80a31d0 <HAL_Pin_Mode>
 80a3dbc:	bd38      	pop	{r3, r4, r5, pc}

080a3dbe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3dbe:	b538      	push	{r3, r4, r5, lr}
 80a3dc0:	4604      	mov	r4, r0
 80a3dc2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3dc4:	f7ff fa0c 	bl	80a31e0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3dc8:	28ff      	cmp	r0, #255	; 0xff
 80a3dca:	d010      	beq.n	80a3dee <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a3dcc:	2806      	cmp	r0, #6
 80a3dce:	d804      	bhi.n	80a3dda <digitalWrite+0x1c>
 80a3dd0:	234d      	movs	r3, #77	; 0x4d
 80a3dd2:	fa23 f000 	lsr.w	r0, r3, r0
 80a3dd6:	07c3      	lsls	r3, r0, #31
 80a3dd8:	d409      	bmi.n	80a3dee <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a3dda:	4620      	mov	r0, r4
 80a3ddc:	f7ff ffba 	bl	80a3d54 <pinAvailable>
 80a3de0:	b128      	cbz	r0, 80a3dee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3de2:	4629      	mov	r1, r5
 80a3de4:	4620      	mov	r0, r4
}
 80a3de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3dea:	f7ff ba01 	b.w	80a31f0 <HAL_GPIO_Write>
 80a3dee:	bd38      	pop	{r3, r4, r5, pc}

080a3df0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a3df0:	b510      	push	{r4, lr}
 80a3df2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3df4:	f7ff f9f4 	bl	80a31e0 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a3df8:	3804      	subs	r0, #4
 80a3dfa:	b2c0      	uxtb	r0, r0
 80a3dfc:	2801      	cmp	r0, #1
 80a3dfe:	d908      	bls.n	80a3e12 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a3e00:	4620      	mov	r0, r4
 80a3e02:	f7ff ffa7 	bl	80a3d54 <pinAvailable>
 80a3e06:	b120      	cbz	r0, 80a3e12 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a3e08:	4620      	mov	r0, r4
}
 80a3e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a3e0e:	f7ff b9f7 	b.w	80a3200 <HAL_GPIO_Read>
}
 80a3e12:	2000      	movs	r0, #0
 80a3e14:	bd10      	pop	{r4, pc}
	...

080a3e18 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3e18:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3e1a:	4c0c      	ldr	r4, [pc, #48]	; (80a3e4c <_GLOBAL__sub_I_SPI+0x34>)
 80a3e1c:	4e0c      	ldr	r6, [pc, #48]	; (80a3e50 <_GLOBAL__sub_I_SPI+0x38>)
 80a3e1e:	4d0d      	ldr	r5, [pc, #52]	; (80a3e54 <_GLOBAL__sub_I_SPI+0x3c>)
 80a3e20:	2100      	movs	r1, #0
 80a3e22:	4620      	mov	r0, r4
 80a3e24:	f7ff fb66 	bl	80a34f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3e28:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3e2a:	4c0b      	ldr	r4, [pc, #44]	; (80a3e58 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3e2c:	4632      	mov	r2, r6
 80a3e2e:	4629      	mov	r1, r5
 80a3e30:	f000 f84c 	bl	80a3ecc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3e34:	2101      	movs	r1, #1
 80a3e36:	4620      	mov	r0, r4
 80a3e38:	f7ff fb5c 	bl	80a34f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3e3c:	4632      	mov	r2, r6
 80a3e3e:	4629      	mov	r1, r5
 80a3e40:	4620      	mov	r0, r4
 80a3e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a3e46:	f000 b841 	b.w	80a3ecc <__aeabi_atexit>
 80a3e4a:	bf00      	nop
 80a3e4c:	20000898 	.word	0x20000898
 80a3e50:	20000364 	.word	0x20000364
 80a3e54:	080a34e5 	.word	0x080a34e5
 80a3e58:	200008a8 	.word	0x200008a8

080a3e5c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3e5c:	b513      	push	{r0, r1, r4, lr}
 80a3e5e:	4c08      	ldr	r4, [pc, #32]	; (80a3e80 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3e60:	2300      	movs	r3, #0
 80a3e62:	461a      	mov	r2, r3
 80a3e64:	4619      	mov	r1, r3
 80a3e66:	9300      	str	r3, [sp, #0]
 80a3e68:	4620      	mov	r0, r4
 80a3e6a:	f7ff fda1 	bl	80a39b0 <_ZN9IPAddressC1Ehhhh>
 80a3e6e:	4620      	mov	r0, r4
 80a3e70:	4a04      	ldr	r2, [pc, #16]	; (80a3e84 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3e72:	4905      	ldr	r1, [pc, #20]	; (80a3e88 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3e74:	b002      	add	sp, #8
 80a3e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3e7a:	f000 b827 	b.w	80a3ecc <__aeabi_atexit>
 80a3e7e:	bf00      	nop
 80a3e80:	200008bc 	.word	0x200008bc
 80a3e84:	20000364 	.word	0x20000364
 80a3e88:	080a3955 	.word	0x080a3955

080a3e8c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a3e8c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a3e8e:	4d0b      	ldr	r5, [pc, #44]	; (80a3ebc <_Z19__fetch_global_Wirev+0x30>)
 80a3e90:	6829      	ldr	r1, [r5, #0]
 80a3e92:	f011 0401 	ands.w	r4, r1, #1
 80a3e96:	d10f      	bne.n	80a3eb8 <_Z19__fetch_global_Wirev+0x2c>
 80a3e98:	4628      	mov	r0, r5
 80a3e9a:	f7fc f902 	bl	80a00a2 <__cxa_guard_acquire>
 80a3e9e:	b158      	cbz	r0, 80a3eb8 <_Z19__fetch_global_Wirev+0x2c>
 80a3ea0:	4621      	mov	r1, r4
 80a3ea2:	4807      	ldr	r0, [pc, #28]	; (80a3ec0 <_Z19__fetch_global_Wirev+0x34>)
 80a3ea4:	f7ff ff04 	bl	80a3cb0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a3ea8:	4628      	mov	r0, r5
 80a3eaa:	f7fc f8ff 	bl	80a00ac <__cxa_guard_release>
 80a3eae:	4a05      	ldr	r2, [pc, #20]	; (80a3ec4 <_Z19__fetch_global_Wirev+0x38>)
 80a3eb0:	4905      	ldr	r1, [pc, #20]	; (80a3ec8 <_Z19__fetch_global_Wirev+0x3c>)
 80a3eb2:	4803      	ldr	r0, [pc, #12]	; (80a3ec0 <_Z19__fetch_global_Wirev+0x34>)
 80a3eb4:	f000 f80a 	bl	80a3ecc <__aeabi_atexit>
	return wire;
}
 80a3eb8:	4801      	ldr	r0, [pc, #4]	; (80a3ec0 <_Z19__fetch_global_Wirev+0x34>)
 80a3eba:	bd38      	pop	{r3, r4, r5, pc}
 80a3ebc:	200008d4 	.word	0x200008d4
 80a3ec0:	200008d8 	.word	0x200008d8
 80a3ec4:	20000364 	.word	0x20000364
 80a3ec8:	080a3c59 	.word	0x080a3c59

080a3ecc <__aeabi_atexit>:
 80a3ecc:	460b      	mov	r3, r1
 80a3ece:	4601      	mov	r1, r0
 80a3ed0:	4618      	mov	r0, r3
 80a3ed2:	f001 b8df 	b.w	80a5094 <__cxa_atexit>
	...

080a3ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3ed8:	4b18      	ldr	r3, [pc, #96]	; (80a3f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3eda:	681a      	ldr	r2, [r3, #0]
 80a3edc:	07d1      	lsls	r1, r2, #31
 80a3ede:	bf5c      	itt	pl
 80a3ee0:	2201      	movpl	r2, #1
 80a3ee2:	601a      	strpl	r2, [r3, #0]
 80a3ee4:	4b16      	ldr	r3, [pc, #88]	; (80a3f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3ee6:	681a      	ldr	r2, [r3, #0]
 80a3ee8:	07d2      	lsls	r2, r2, #31
 80a3eea:	bf5c      	itt	pl
 80a3eec:	2201      	movpl	r2, #1
 80a3eee:	601a      	strpl	r2, [r3, #0]
 80a3ef0:	4b14      	ldr	r3, [pc, #80]	; (80a3f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3ef2:	681a      	ldr	r2, [r3, #0]
 80a3ef4:	07d0      	lsls	r0, r2, #31
 80a3ef6:	bf5c      	itt	pl
 80a3ef8:	2201      	movpl	r2, #1
 80a3efa:	601a      	strpl	r2, [r3, #0]
 80a3efc:	4b12      	ldr	r3, [pc, #72]	; (80a3f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3efe:	681a      	ldr	r2, [r3, #0]
 80a3f00:	07d1      	lsls	r1, r2, #31
 80a3f02:	bf5c      	itt	pl
 80a3f04:	2201      	movpl	r2, #1
 80a3f06:	601a      	strpl	r2, [r3, #0]
 80a3f08:	4b10      	ldr	r3, [pc, #64]	; (80a3f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3f0a:	681a      	ldr	r2, [r3, #0]
 80a3f0c:	07d2      	lsls	r2, r2, #31
 80a3f0e:	bf5c      	itt	pl
 80a3f10:	2201      	movpl	r2, #1
 80a3f12:	601a      	strpl	r2, [r3, #0]
 80a3f14:	4b0e      	ldr	r3, [pc, #56]	; (80a3f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3f16:	681a      	ldr	r2, [r3, #0]
 80a3f18:	07d0      	lsls	r0, r2, #31
 80a3f1a:	bf5c      	itt	pl
 80a3f1c:	2201      	movpl	r2, #1
 80a3f1e:	601a      	strpl	r2, [r3, #0]
 80a3f20:	4b0c      	ldr	r3, [pc, #48]	; (80a3f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3f22:	681a      	ldr	r2, [r3, #0]
 80a3f24:	07d1      	lsls	r1, r2, #31
 80a3f26:	bf5c      	itt	pl
 80a3f28:	2201      	movpl	r2, #1
 80a3f2a:	601a      	strpl	r2, [r3, #0]
 80a3f2c:	4b0a      	ldr	r3, [pc, #40]	; (80a3f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3f2e:	681a      	ldr	r2, [r3, #0]
 80a3f30:	07d2      	lsls	r2, r2, #31
 80a3f32:	bf5c      	itt	pl
 80a3f34:	2201      	movpl	r2, #1
 80a3f36:	601a      	strpl	r2, [r3, #0]
 80a3f38:	4770      	bx	lr
 80a3f3a:	bf00      	nop
 80a3f3c:	20000908 	.word	0x20000908
 80a3f40:	20000904 	.word	0x20000904
 80a3f44:	20000900 	.word	0x20000900
 80a3f48:	200008fc 	.word	0x200008fc
 80a3f4c:	200008f8 	.word	0x200008f8
 80a3f50:	200008f4 	.word	0x200008f4
 80a3f54:	200008f0 	.word	0x200008f0
 80a3f58:	200008ec 	.word	0x200008ec

080a3f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a3f5c:	4b24      	ldr	r3, [pc, #144]	; (80a3ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a3f5e:	681a      	ldr	r2, [r3, #0]
 80a3f60:	07d0      	lsls	r0, r2, #31
 80a3f62:	bf5c      	itt	pl
 80a3f64:	2201      	movpl	r2, #1
 80a3f66:	601a      	strpl	r2, [r3, #0]
 80a3f68:	4b22      	ldr	r3, [pc, #136]	; (80a3ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a3f6a:	681a      	ldr	r2, [r3, #0]
 80a3f6c:	07d1      	lsls	r1, r2, #31
 80a3f6e:	bf5c      	itt	pl
 80a3f70:	2201      	movpl	r2, #1
 80a3f72:	601a      	strpl	r2, [r3, #0]
 80a3f74:	4b20      	ldr	r3, [pc, #128]	; (80a3ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a3f76:	681a      	ldr	r2, [r3, #0]
 80a3f78:	07d2      	lsls	r2, r2, #31
 80a3f7a:	bf5c      	itt	pl
 80a3f7c:	2201      	movpl	r2, #1
 80a3f7e:	601a      	strpl	r2, [r3, #0]
 80a3f80:	4b1e      	ldr	r3, [pc, #120]	; (80a3ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a3f82:	681a      	ldr	r2, [r3, #0]
 80a3f84:	07d0      	lsls	r0, r2, #31
 80a3f86:	bf5c      	itt	pl
 80a3f88:	2201      	movpl	r2, #1
 80a3f8a:	601a      	strpl	r2, [r3, #0]
 80a3f8c:	4b1c      	ldr	r3, [pc, #112]	; (80a4000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a3f8e:	681a      	ldr	r2, [r3, #0]
 80a3f90:	07d1      	lsls	r1, r2, #31
 80a3f92:	bf5c      	itt	pl
 80a3f94:	2201      	movpl	r2, #1
 80a3f96:	601a      	strpl	r2, [r3, #0]
 80a3f98:	4b1a      	ldr	r3, [pc, #104]	; (80a4004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a3f9a:	681a      	ldr	r2, [r3, #0]
 80a3f9c:	07d2      	lsls	r2, r2, #31
 80a3f9e:	bf5c      	itt	pl
 80a3fa0:	2201      	movpl	r2, #1
 80a3fa2:	601a      	strpl	r2, [r3, #0]
 80a3fa4:	4b18      	ldr	r3, [pc, #96]	; (80a4008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a3fa6:	681a      	ldr	r2, [r3, #0]
 80a3fa8:	07d0      	lsls	r0, r2, #31
 80a3faa:	bf5c      	itt	pl
 80a3fac:	2201      	movpl	r2, #1
 80a3fae:	601a      	strpl	r2, [r3, #0]
 80a3fb0:	4b16      	ldr	r3, [pc, #88]	; (80a400c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a3fb2:	681a      	ldr	r2, [r3, #0]
 80a3fb4:	07d1      	lsls	r1, r2, #31
 80a3fb6:	bf5c      	itt	pl
 80a3fb8:	2201      	movpl	r2, #1
 80a3fba:	601a      	strpl	r2, [r3, #0]
 80a3fbc:	4b14      	ldr	r3, [pc, #80]	; (80a4010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a3fbe:	681a      	ldr	r2, [r3, #0]
 80a3fc0:	07d2      	lsls	r2, r2, #31
 80a3fc2:	bf5c      	itt	pl
 80a3fc4:	2201      	movpl	r2, #1
 80a3fc6:	601a      	strpl	r2, [r3, #0]
 80a3fc8:	4b12      	ldr	r3, [pc, #72]	; (80a4014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a3fca:	681a      	ldr	r2, [r3, #0]
 80a3fcc:	07d0      	lsls	r0, r2, #31
 80a3fce:	bf5c      	itt	pl
 80a3fd0:	2201      	movpl	r2, #1
 80a3fd2:	601a      	strpl	r2, [r3, #0]
 80a3fd4:	4b10      	ldr	r3, [pc, #64]	; (80a4018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a3fd6:	681a      	ldr	r2, [r3, #0]
 80a3fd8:	07d1      	lsls	r1, r2, #31
 80a3fda:	bf5c      	itt	pl
 80a3fdc:	2201      	movpl	r2, #1
 80a3fde:	601a      	strpl	r2, [r3, #0]
 80a3fe0:	4b0e      	ldr	r3, [pc, #56]	; (80a401c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a3fe2:	681a      	ldr	r2, [r3, #0]
 80a3fe4:	07d2      	lsls	r2, r2, #31
 80a3fe6:	bf5c      	itt	pl
 80a3fe8:	2201      	movpl	r2, #1
 80a3fea:	601a      	strpl	r2, [r3, #0]
 80a3fec:	4770      	bx	lr
 80a3fee:	bf00      	nop
 80a3ff0:	20000938 	.word	0x20000938
 80a3ff4:	20000934 	.word	0x20000934
 80a3ff8:	20000930 	.word	0x20000930
 80a3ffc:	2000092c 	.word	0x2000092c
 80a4000:	20000928 	.word	0x20000928
 80a4004:	20000924 	.word	0x20000924
 80a4008:	20000920 	.word	0x20000920
 80a400c:	2000091c 	.word	0x2000091c
 80a4010:	20000918 	.word	0x20000918
 80a4014:	20000914 	.word	0x20000914
 80a4018:	20000910 	.word	0x20000910
 80a401c:	2000090c 	.word	0x2000090c

080a4020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a4020:	4b24      	ldr	r3, [pc, #144]	; (80a40b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a4022:	681a      	ldr	r2, [r3, #0]
 80a4024:	07d0      	lsls	r0, r2, #31
 80a4026:	bf5c      	itt	pl
 80a4028:	2201      	movpl	r2, #1
 80a402a:	601a      	strpl	r2, [r3, #0]
 80a402c:	4b22      	ldr	r3, [pc, #136]	; (80a40b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a402e:	681a      	ldr	r2, [r3, #0]
 80a4030:	07d1      	lsls	r1, r2, #31
 80a4032:	bf5c      	itt	pl
 80a4034:	2201      	movpl	r2, #1
 80a4036:	601a      	strpl	r2, [r3, #0]
 80a4038:	4b20      	ldr	r3, [pc, #128]	; (80a40bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a403a:	681a      	ldr	r2, [r3, #0]
 80a403c:	07d2      	lsls	r2, r2, #31
 80a403e:	bf5c      	itt	pl
 80a4040:	2201      	movpl	r2, #1
 80a4042:	601a      	strpl	r2, [r3, #0]
 80a4044:	4b1e      	ldr	r3, [pc, #120]	; (80a40c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a4046:	681a      	ldr	r2, [r3, #0]
 80a4048:	07d0      	lsls	r0, r2, #31
 80a404a:	bf5c      	itt	pl
 80a404c:	2201      	movpl	r2, #1
 80a404e:	601a      	strpl	r2, [r3, #0]
 80a4050:	4b1c      	ldr	r3, [pc, #112]	; (80a40c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a4052:	681a      	ldr	r2, [r3, #0]
 80a4054:	07d1      	lsls	r1, r2, #31
 80a4056:	bf5c      	itt	pl
 80a4058:	2201      	movpl	r2, #1
 80a405a:	601a      	strpl	r2, [r3, #0]
 80a405c:	4b1a      	ldr	r3, [pc, #104]	; (80a40c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a405e:	681a      	ldr	r2, [r3, #0]
 80a4060:	07d2      	lsls	r2, r2, #31
 80a4062:	bf5c      	itt	pl
 80a4064:	2201      	movpl	r2, #1
 80a4066:	601a      	strpl	r2, [r3, #0]
 80a4068:	4b18      	ldr	r3, [pc, #96]	; (80a40cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a406a:	681a      	ldr	r2, [r3, #0]
 80a406c:	07d0      	lsls	r0, r2, #31
 80a406e:	bf5c      	itt	pl
 80a4070:	2201      	movpl	r2, #1
 80a4072:	601a      	strpl	r2, [r3, #0]
 80a4074:	4b16      	ldr	r3, [pc, #88]	; (80a40d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a4076:	681a      	ldr	r2, [r3, #0]
 80a4078:	07d1      	lsls	r1, r2, #31
 80a407a:	bf5c      	itt	pl
 80a407c:	2201      	movpl	r2, #1
 80a407e:	601a      	strpl	r2, [r3, #0]
 80a4080:	4b14      	ldr	r3, [pc, #80]	; (80a40d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a4082:	681a      	ldr	r2, [r3, #0]
 80a4084:	07d2      	lsls	r2, r2, #31
 80a4086:	bf5c      	itt	pl
 80a4088:	2201      	movpl	r2, #1
 80a408a:	601a      	strpl	r2, [r3, #0]
 80a408c:	4b12      	ldr	r3, [pc, #72]	; (80a40d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a408e:	681a      	ldr	r2, [r3, #0]
 80a4090:	07d0      	lsls	r0, r2, #31
 80a4092:	bf5c      	itt	pl
 80a4094:	2201      	movpl	r2, #1
 80a4096:	601a      	strpl	r2, [r3, #0]
 80a4098:	4b10      	ldr	r3, [pc, #64]	; (80a40dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a409a:	681a      	ldr	r2, [r3, #0]
 80a409c:	07d1      	lsls	r1, r2, #31
 80a409e:	bf5c      	itt	pl
 80a40a0:	2201      	movpl	r2, #1
 80a40a2:	601a      	strpl	r2, [r3, #0]
 80a40a4:	4b0e      	ldr	r3, [pc, #56]	; (80a40e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a40a6:	681a      	ldr	r2, [r3, #0]
 80a40a8:	07d2      	lsls	r2, r2, #31
 80a40aa:	bf5c      	itt	pl
 80a40ac:	2201      	movpl	r2, #1
 80a40ae:	601a      	strpl	r2, [r3, #0]
 80a40b0:	4770      	bx	lr
 80a40b2:	bf00      	nop
 80a40b4:	20000968 	.word	0x20000968
 80a40b8:	20000964 	.word	0x20000964
 80a40bc:	20000960 	.word	0x20000960
 80a40c0:	2000095c 	.word	0x2000095c
 80a40c4:	20000958 	.word	0x20000958
 80a40c8:	20000954 	.word	0x20000954
 80a40cc:	20000950 	.word	0x20000950
 80a40d0:	2000094c 	.word	0x2000094c
 80a40d4:	20000948 	.word	0x20000948
 80a40d8:	20000944 	.word	0x20000944
 80a40dc:	20000940 	.word	0x20000940
 80a40e0:	2000093c 	.word	0x2000093c

080a40e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a40e4:	4b18      	ldr	r3, [pc, #96]	; (80a4148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a40e6:	681a      	ldr	r2, [r3, #0]
 80a40e8:	07d1      	lsls	r1, r2, #31
 80a40ea:	bf5c      	itt	pl
 80a40ec:	2201      	movpl	r2, #1
 80a40ee:	601a      	strpl	r2, [r3, #0]
 80a40f0:	4b16      	ldr	r3, [pc, #88]	; (80a414c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a40f2:	681a      	ldr	r2, [r3, #0]
 80a40f4:	07d2      	lsls	r2, r2, #31
 80a40f6:	bf5c      	itt	pl
 80a40f8:	2201      	movpl	r2, #1
 80a40fa:	601a      	strpl	r2, [r3, #0]
 80a40fc:	4b14      	ldr	r3, [pc, #80]	; (80a4150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a40fe:	681a      	ldr	r2, [r3, #0]
 80a4100:	07d0      	lsls	r0, r2, #31
 80a4102:	bf5c      	itt	pl
 80a4104:	2201      	movpl	r2, #1
 80a4106:	601a      	strpl	r2, [r3, #0]
 80a4108:	4b12      	ldr	r3, [pc, #72]	; (80a4154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a410a:	681a      	ldr	r2, [r3, #0]
 80a410c:	07d1      	lsls	r1, r2, #31
 80a410e:	bf5c      	itt	pl
 80a4110:	2201      	movpl	r2, #1
 80a4112:	601a      	strpl	r2, [r3, #0]
 80a4114:	4b10      	ldr	r3, [pc, #64]	; (80a4158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a4116:	681a      	ldr	r2, [r3, #0]
 80a4118:	07d2      	lsls	r2, r2, #31
 80a411a:	bf5c      	itt	pl
 80a411c:	2201      	movpl	r2, #1
 80a411e:	601a      	strpl	r2, [r3, #0]
 80a4120:	4b0e      	ldr	r3, [pc, #56]	; (80a415c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a4122:	681a      	ldr	r2, [r3, #0]
 80a4124:	07d0      	lsls	r0, r2, #31
 80a4126:	bf5c      	itt	pl
 80a4128:	2201      	movpl	r2, #1
 80a412a:	601a      	strpl	r2, [r3, #0]
 80a412c:	4b0c      	ldr	r3, [pc, #48]	; (80a4160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a412e:	681a      	ldr	r2, [r3, #0]
 80a4130:	07d1      	lsls	r1, r2, #31
 80a4132:	bf5c      	itt	pl
 80a4134:	2201      	movpl	r2, #1
 80a4136:	601a      	strpl	r2, [r3, #0]
 80a4138:	4b0a      	ldr	r3, [pc, #40]	; (80a4164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a413a:	681a      	ldr	r2, [r3, #0]
 80a413c:	07d2      	lsls	r2, r2, #31
 80a413e:	bf5c      	itt	pl
 80a4140:	2201      	movpl	r2, #1
 80a4142:	601a      	strpl	r2, [r3, #0]
 80a4144:	4770      	bx	lr
 80a4146:	bf00      	nop
 80a4148:	20000988 	.word	0x20000988
 80a414c:	20000984 	.word	0x20000984
 80a4150:	20000980 	.word	0x20000980
 80a4154:	2000097c 	.word	0x2000097c
 80a4158:	20000978 	.word	0x20000978
 80a415c:	20000974 	.word	0x20000974
 80a4160:	20000970 	.word	0x20000970
 80a4164:	2000096c 	.word	0x2000096c

080a4168 <__aeabi_drsub>:
 80a4168:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a416c:	e002      	b.n	80a4174 <__adddf3>
 80a416e:	bf00      	nop

080a4170 <__aeabi_dsub>:
 80a4170:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a4174 <__adddf3>:
 80a4174:	b530      	push	{r4, r5, lr}
 80a4176:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a417a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a417e:	ea94 0f05 	teq	r4, r5
 80a4182:	bf08      	it	eq
 80a4184:	ea90 0f02 	teqeq	r0, r2
 80a4188:	bf1f      	itttt	ne
 80a418a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a418e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a4192:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a4196:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a419a:	f000 80e2 	beq.w	80a4362 <__adddf3+0x1ee>
 80a419e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a41a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a41a6:	bfb8      	it	lt
 80a41a8:	426d      	neglt	r5, r5
 80a41aa:	dd0c      	ble.n	80a41c6 <__adddf3+0x52>
 80a41ac:	442c      	add	r4, r5
 80a41ae:	ea80 0202 	eor.w	r2, r0, r2
 80a41b2:	ea81 0303 	eor.w	r3, r1, r3
 80a41b6:	ea82 0000 	eor.w	r0, r2, r0
 80a41ba:	ea83 0101 	eor.w	r1, r3, r1
 80a41be:	ea80 0202 	eor.w	r2, r0, r2
 80a41c2:	ea81 0303 	eor.w	r3, r1, r3
 80a41c6:	2d36      	cmp	r5, #54	; 0x36
 80a41c8:	bf88      	it	hi
 80a41ca:	bd30      	pophi	{r4, r5, pc}
 80a41cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a41d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a41d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a41d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a41dc:	d002      	beq.n	80a41e4 <__adddf3+0x70>
 80a41de:	4240      	negs	r0, r0
 80a41e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a41e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a41e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a41ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a41f0:	d002      	beq.n	80a41f8 <__adddf3+0x84>
 80a41f2:	4252      	negs	r2, r2
 80a41f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a41f8:	ea94 0f05 	teq	r4, r5
 80a41fc:	f000 80a7 	beq.w	80a434e <__adddf3+0x1da>
 80a4200:	f1a4 0401 	sub.w	r4, r4, #1
 80a4204:	f1d5 0e20 	rsbs	lr, r5, #32
 80a4208:	db0d      	blt.n	80a4226 <__adddf3+0xb2>
 80a420a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a420e:	fa22 f205 	lsr.w	r2, r2, r5
 80a4212:	1880      	adds	r0, r0, r2
 80a4214:	f141 0100 	adc.w	r1, r1, #0
 80a4218:	fa03 f20e 	lsl.w	r2, r3, lr
 80a421c:	1880      	adds	r0, r0, r2
 80a421e:	fa43 f305 	asr.w	r3, r3, r5
 80a4222:	4159      	adcs	r1, r3
 80a4224:	e00e      	b.n	80a4244 <__adddf3+0xd0>
 80a4226:	f1a5 0520 	sub.w	r5, r5, #32
 80a422a:	f10e 0e20 	add.w	lr, lr, #32
 80a422e:	2a01      	cmp	r2, #1
 80a4230:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a4234:	bf28      	it	cs
 80a4236:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a423a:	fa43 f305 	asr.w	r3, r3, r5
 80a423e:	18c0      	adds	r0, r0, r3
 80a4240:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a4244:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4248:	d507      	bpl.n	80a425a <__adddf3+0xe6>
 80a424a:	f04f 0e00 	mov.w	lr, #0
 80a424e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a4252:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a4256:	eb6e 0101 	sbc.w	r1, lr, r1
 80a425a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a425e:	d31b      	bcc.n	80a4298 <__adddf3+0x124>
 80a4260:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a4264:	d30c      	bcc.n	80a4280 <__adddf3+0x10c>
 80a4266:	0849      	lsrs	r1, r1, #1
 80a4268:	ea5f 0030 	movs.w	r0, r0, rrx
 80a426c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a4270:	f104 0401 	add.w	r4, r4, #1
 80a4274:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a4278:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a427c:	f080 809a 	bcs.w	80a43b4 <__adddf3+0x240>
 80a4280:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4284:	bf08      	it	eq
 80a4286:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a428a:	f150 0000 	adcs.w	r0, r0, #0
 80a428e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4292:	ea41 0105 	orr.w	r1, r1, r5
 80a4296:	bd30      	pop	{r4, r5, pc}
 80a4298:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a429c:	4140      	adcs	r0, r0
 80a429e:	eb41 0101 	adc.w	r1, r1, r1
 80a42a2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a42a6:	f1a4 0401 	sub.w	r4, r4, #1
 80a42aa:	d1e9      	bne.n	80a4280 <__adddf3+0x10c>
 80a42ac:	f091 0f00 	teq	r1, #0
 80a42b0:	bf04      	itt	eq
 80a42b2:	4601      	moveq	r1, r0
 80a42b4:	2000      	moveq	r0, #0
 80a42b6:	fab1 f381 	clz	r3, r1
 80a42ba:	bf08      	it	eq
 80a42bc:	3320      	addeq	r3, #32
 80a42be:	f1a3 030b 	sub.w	r3, r3, #11
 80a42c2:	f1b3 0220 	subs.w	r2, r3, #32
 80a42c6:	da0c      	bge.n	80a42e2 <__adddf3+0x16e>
 80a42c8:	320c      	adds	r2, #12
 80a42ca:	dd08      	ble.n	80a42de <__adddf3+0x16a>
 80a42cc:	f102 0c14 	add.w	ip, r2, #20
 80a42d0:	f1c2 020c 	rsb	r2, r2, #12
 80a42d4:	fa01 f00c 	lsl.w	r0, r1, ip
 80a42d8:	fa21 f102 	lsr.w	r1, r1, r2
 80a42dc:	e00c      	b.n	80a42f8 <__adddf3+0x184>
 80a42de:	f102 0214 	add.w	r2, r2, #20
 80a42e2:	bfd8      	it	le
 80a42e4:	f1c2 0c20 	rsble	ip, r2, #32
 80a42e8:	fa01 f102 	lsl.w	r1, r1, r2
 80a42ec:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a42f0:	bfdc      	itt	le
 80a42f2:	ea41 010c 	orrle.w	r1, r1, ip
 80a42f6:	4090      	lslle	r0, r2
 80a42f8:	1ae4      	subs	r4, r4, r3
 80a42fa:	bfa2      	ittt	ge
 80a42fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a4300:	4329      	orrge	r1, r5
 80a4302:	bd30      	popge	{r4, r5, pc}
 80a4304:	ea6f 0404 	mvn.w	r4, r4
 80a4308:	3c1f      	subs	r4, #31
 80a430a:	da1c      	bge.n	80a4346 <__adddf3+0x1d2>
 80a430c:	340c      	adds	r4, #12
 80a430e:	dc0e      	bgt.n	80a432e <__adddf3+0x1ba>
 80a4310:	f104 0414 	add.w	r4, r4, #20
 80a4314:	f1c4 0220 	rsb	r2, r4, #32
 80a4318:	fa20 f004 	lsr.w	r0, r0, r4
 80a431c:	fa01 f302 	lsl.w	r3, r1, r2
 80a4320:	ea40 0003 	orr.w	r0, r0, r3
 80a4324:	fa21 f304 	lsr.w	r3, r1, r4
 80a4328:	ea45 0103 	orr.w	r1, r5, r3
 80a432c:	bd30      	pop	{r4, r5, pc}
 80a432e:	f1c4 040c 	rsb	r4, r4, #12
 80a4332:	f1c4 0220 	rsb	r2, r4, #32
 80a4336:	fa20 f002 	lsr.w	r0, r0, r2
 80a433a:	fa01 f304 	lsl.w	r3, r1, r4
 80a433e:	ea40 0003 	orr.w	r0, r0, r3
 80a4342:	4629      	mov	r1, r5
 80a4344:	bd30      	pop	{r4, r5, pc}
 80a4346:	fa21 f004 	lsr.w	r0, r1, r4
 80a434a:	4629      	mov	r1, r5
 80a434c:	bd30      	pop	{r4, r5, pc}
 80a434e:	f094 0f00 	teq	r4, #0
 80a4352:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a4356:	bf06      	itte	eq
 80a4358:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a435c:	3401      	addeq	r4, #1
 80a435e:	3d01      	subne	r5, #1
 80a4360:	e74e      	b.n	80a4200 <__adddf3+0x8c>
 80a4362:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4366:	bf18      	it	ne
 80a4368:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a436c:	d029      	beq.n	80a43c2 <__adddf3+0x24e>
 80a436e:	ea94 0f05 	teq	r4, r5
 80a4372:	bf08      	it	eq
 80a4374:	ea90 0f02 	teqeq	r0, r2
 80a4378:	d005      	beq.n	80a4386 <__adddf3+0x212>
 80a437a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a437e:	bf04      	itt	eq
 80a4380:	4619      	moveq	r1, r3
 80a4382:	4610      	moveq	r0, r2
 80a4384:	bd30      	pop	{r4, r5, pc}
 80a4386:	ea91 0f03 	teq	r1, r3
 80a438a:	bf1e      	ittt	ne
 80a438c:	2100      	movne	r1, #0
 80a438e:	2000      	movne	r0, #0
 80a4390:	bd30      	popne	{r4, r5, pc}
 80a4392:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a4396:	d105      	bne.n	80a43a4 <__adddf3+0x230>
 80a4398:	0040      	lsls	r0, r0, #1
 80a439a:	4149      	adcs	r1, r1
 80a439c:	bf28      	it	cs
 80a439e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a43a2:	bd30      	pop	{r4, r5, pc}
 80a43a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a43a8:	bf3c      	itt	cc
 80a43aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a43ae:	bd30      	popcc	{r4, r5, pc}
 80a43b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a43b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a43b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a43bc:	f04f 0000 	mov.w	r0, #0
 80a43c0:	bd30      	pop	{r4, r5, pc}
 80a43c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a43c6:	bf1a      	itte	ne
 80a43c8:	4619      	movne	r1, r3
 80a43ca:	4610      	movne	r0, r2
 80a43cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a43d0:	bf1c      	itt	ne
 80a43d2:	460b      	movne	r3, r1
 80a43d4:	4602      	movne	r2, r0
 80a43d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a43da:	bf06      	itte	eq
 80a43dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a43e0:	ea91 0f03 	teqeq	r1, r3
 80a43e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a43e8:	bd30      	pop	{r4, r5, pc}
 80a43ea:	bf00      	nop

080a43ec <__aeabi_ui2d>:
 80a43ec:	f090 0f00 	teq	r0, #0
 80a43f0:	bf04      	itt	eq
 80a43f2:	2100      	moveq	r1, #0
 80a43f4:	4770      	bxeq	lr
 80a43f6:	b530      	push	{r4, r5, lr}
 80a43f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a43fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4400:	f04f 0500 	mov.w	r5, #0
 80a4404:	f04f 0100 	mov.w	r1, #0
 80a4408:	e750      	b.n	80a42ac <__adddf3+0x138>
 80a440a:	bf00      	nop

080a440c <__aeabi_i2d>:
 80a440c:	f090 0f00 	teq	r0, #0
 80a4410:	bf04      	itt	eq
 80a4412:	2100      	moveq	r1, #0
 80a4414:	4770      	bxeq	lr
 80a4416:	b530      	push	{r4, r5, lr}
 80a4418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a441c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4420:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a4424:	bf48      	it	mi
 80a4426:	4240      	negmi	r0, r0
 80a4428:	f04f 0100 	mov.w	r1, #0
 80a442c:	e73e      	b.n	80a42ac <__adddf3+0x138>
 80a442e:	bf00      	nop

080a4430 <__aeabi_f2d>:
 80a4430:	0042      	lsls	r2, r0, #1
 80a4432:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a4436:	ea4f 0131 	mov.w	r1, r1, rrx
 80a443a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a443e:	bf1f      	itttt	ne
 80a4440:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a4444:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4448:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a444c:	4770      	bxne	lr
 80a444e:	f092 0f00 	teq	r2, #0
 80a4452:	bf14      	ite	ne
 80a4454:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4458:	4770      	bxeq	lr
 80a445a:	b530      	push	{r4, r5, lr}
 80a445c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a4460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4468:	e720      	b.n	80a42ac <__adddf3+0x138>
 80a446a:	bf00      	nop

080a446c <__aeabi_ul2d>:
 80a446c:	ea50 0201 	orrs.w	r2, r0, r1
 80a4470:	bf08      	it	eq
 80a4472:	4770      	bxeq	lr
 80a4474:	b530      	push	{r4, r5, lr}
 80a4476:	f04f 0500 	mov.w	r5, #0
 80a447a:	e00a      	b.n	80a4492 <__aeabi_l2d+0x16>

080a447c <__aeabi_l2d>:
 80a447c:	ea50 0201 	orrs.w	r2, r0, r1
 80a4480:	bf08      	it	eq
 80a4482:	4770      	bxeq	lr
 80a4484:	b530      	push	{r4, r5, lr}
 80a4486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a448a:	d502      	bpl.n	80a4492 <__aeabi_l2d+0x16>
 80a448c:	4240      	negs	r0, r0
 80a448e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a449a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a449e:	f43f aedc 	beq.w	80a425a <__adddf3+0xe6>
 80a44a2:	f04f 0203 	mov.w	r2, #3
 80a44a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a44aa:	bf18      	it	ne
 80a44ac:	3203      	addne	r2, #3
 80a44ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a44b2:	bf18      	it	ne
 80a44b4:	3203      	addne	r2, #3
 80a44b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a44ba:	f1c2 0320 	rsb	r3, r2, #32
 80a44be:	fa00 fc03 	lsl.w	ip, r0, r3
 80a44c2:	fa20 f002 	lsr.w	r0, r0, r2
 80a44c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80a44ca:	ea40 000e 	orr.w	r0, r0, lr
 80a44ce:	fa21 f102 	lsr.w	r1, r1, r2
 80a44d2:	4414      	add	r4, r2
 80a44d4:	e6c1      	b.n	80a425a <__adddf3+0xe6>
 80a44d6:	bf00      	nop

080a44d8 <__aeabi_dmul>:
 80a44d8:	b570      	push	{r4, r5, r6, lr}
 80a44da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a44de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a44e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a44e6:	bf1d      	ittte	ne
 80a44e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a44ec:	ea94 0f0c 	teqne	r4, ip
 80a44f0:	ea95 0f0c 	teqne	r5, ip
 80a44f4:	f000 f8de 	bleq	80a46b4 <__aeabi_dmul+0x1dc>
 80a44f8:	442c      	add	r4, r5
 80a44fa:	ea81 0603 	eor.w	r6, r1, r3
 80a44fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a4502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a4506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a450a:	bf18      	it	ne
 80a450c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a4510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a4518:	d038      	beq.n	80a458c <__aeabi_dmul+0xb4>
 80a451a:	fba0 ce02 	umull	ip, lr, r0, r2
 80a451e:	f04f 0500 	mov.w	r5, #0
 80a4522:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a4526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a452a:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a452e:	f04f 0600 	mov.w	r6, #0
 80a4532:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a4536:	f09c 0f00 	teq	ip, #0
 80a453a:	bf18      	it	ne
 80a453c:	f04e 0e01 	orrne.w	lr, lr, #1
 80a4540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a4544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a4548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a454c:	d204      	bcs.n	80a4558 <__aeabi_dmul+0x80>
 80a454e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a4552:	416d      	adcs	r5, r5
 80a4554:	eb46 0606 	adc.w	r6, r6, r6
 80a4558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a455c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a4560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a4564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a4568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a456c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4570:	bf88      	it	hi
 80a4572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4576:	d81e      	bhi.n	80a45b6 <__aeabi_dmul+0xde>
 80a4578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a457c:	bf08      	it	eq
 80a457e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a4582:	f150 0000 	adcs.w	r0, r0, #0
 80a4586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a458a:	bd70      	pop	{r4, r5, r6, pc}
 80a458c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a4590:	ea46 0101 	orr.w	r1, r6, r1
 80a4594:	ea40 0002 	orr.w	r0, r0, r2
 80a4598:	ea81 0103 	eor.w	r1, r1, r3
 80a459c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a45a0:	bfc2      	ittt	gt
 80a45a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a45a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a45aa:	bd70      	popgt	{r4, r5, r6, pc}
 80a45ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a45b0:	f04f 0e00 	mov.w	lr, #0
 80a45b4:	3c01      	subs	r4, #1
 80a45b6:	f300 80ab 	bgt.w	80a4710 <__aeabi_dmul+0x238>
 80a45ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a45be:	bfde      	ittt	le
 80a45c0:	2000      	movle	r0, #0
 80a45c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a45c6:	bd70      	pople	{r4, r5, r6, pc}
 80a45c8:	f1c4 0400 	rsb	r4, r4, #0
 80a45cc:	3c20      	subs	r4, #32
 80a45ce:	da35      	bge.n	80a463c <__aeabi_dmul+0x164>
 80a45d0:	340c      	adds	r4, #12
 80a45d2:	dc1b      	bgt.n	80a460c <__aeabi_dmul+0x134>
 80a45d4:	f104 0414 	add.w	r4, r4, #20
 80a45d8:	f1c4 0520 	rsb	r5, r4, #32
 80a45dc:	fa00 f305 	lsl.w	r3, r0, r5
 80a45e0:	fa20 f004 	lsr.w	r0, r0, r4
 80a45e4:	fa01 f205 	lsl.w	r2, r1, r5
 80a45e8:	ea40 0002 	orr.w	r0, r0, r2
 80a45ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a45f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a45f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a45f8:	fa21 f604 	lsr.w	r6, r1, r4
 80a45fc:	eb42 0106 	adc.w	r1, r2, r6
 80a4600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4604:	bf08      	it	eq
 80a4606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a460a:	bd70      	pop	{r4, r5, r6, pc}
 80a460c:	f1c4 040c 	rsb	r4, r4, #12
 80a4610:	f1c4 0520 	rsb	r5, r4, #32
 80a4614:	fa00 f304 	lsl.w	r3, r0, r4
 80a4618:	fa20 f005 	lsr.w	r0, r0, r5
 80a461c:	fa01 f204 	lsl.w	r2, r1, r4
 80a4620:	ea40 0002 	orr.w	r0, r0, r2
 80a4624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a462c:	f141 0100 	adc.w	r1, r1, #0
 80a4630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4634:	bf08      	it	eq
 80a4636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a463a:	bd70      	pop	{r4, r5, r6, pc}
 80a463c:	f1c4 0520 	rsb	r5, r4, #32
 80a4640:	fa00 f205 	lsl.w	r2, r0, r5
 80a4644:	ea4e 0e02 	orr.w	lr, lr, r2
 80a4648:	fa20 f304 	lsr.w	r3, r0, r4
 80a464c:	fa01 f205 	lsl.w	r2, r1, r5
 80a4650:	ea43 0302 	orr.w	r3, r3, r2
 80a4654:	fa21 f004 	lsr.w	r0, r1, r4
 80a4658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a465c:	fa21 f204 	lsr.w	r2, r1, r4
 80a4660:	ea20 0002 	bic.w	r0, r0, r2
 80a4664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a4668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a466c:	bf08      	it	eq
 80a466e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4672:	bd70      	pop	{r4, r5, r6, pc}
 80a4674:	f094 0f00 	teq	r4, #0
 80a4678:	d10f      	bne.n	80a469a <__aeabi_dmul+0x1c2>
 80a467a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a467e:	0040      	lsls	r0, r0, #1
 80a4680:	eb41 0101 	adc.w	r1, r1, r1
 80a4684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4688:	bf08      	it	eq
 80a468a:	3c01      	subeq	r4, #1
 80a468c:	d0f7      	beq.n	80a467e <__aeabi_dmul+0x1a6>
 80a468e:	ea41 0106 	orr.w	r1, r1, r6
 80a4692:	f095 0f00 	teq	r5, #0
 80a4696:	bf18      	it	ne
 80a4698:	4770      	bxne	lr
 80a469a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a469e:	0052      	lsls	r2, r2, #1
 80a46a0:	eb43 0303 	adc.w	r3, r3, r3
 80a46a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a46a8:	bf08      	it	eq
 80a46aa:	3d01      	subeq	r5, #1
 80a46ac:	d0f7      	beq.n	80a469e <__aeabi_dmul+0x1c6>
 80a46ae:	ea43 0306 	orr.w	r3, r3, r6
 80a46b2:	4770      	bx	lr
 80a46b4:	ea94 0f0c 	teq	r4, ip
 80a46b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a46bc:	bf18      	it	ne
 80a46be:	ea95 0f0c 	teqne	r5, ip
 80a46c2:	d00c      	beq.n	80a46de <__aeabi_dmul+0x206>
 80a46c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a46c8:	bf18      	it	ne
 80a46ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a46ce:	d1d1      	bne.n	80a4674 <__aeabi_dmul+0x19c>
 80a46d0:	ea81 0103 	eor.w	r1, r1, r3
 80a46d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a46d8:	f04f 0000 	mov.w	r0, #0
 80a46dc:	bd70      	pop	{r4, r5, r6, pc}
 80a46de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a46e2:	bf06      	itte	eq
 80a46e4:	4610      	moveq	r0, r2
 80a46e6:	4619      	moveq	r1, r3
 80a46e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a46ec:	d019      	beq.n	80a4722 <__aeabi_dmul+0x24a>
 80a46ee:	ea94 0f0c 	teq	r4, ip
 80a46f2:	d102      	bne.n	80a46fa <__aeabi_dmul+0x222>
 80a46f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a46f8:	d113      	bne.n	80a4722 <__aeabi_dmul+0x24a>
 80a46fa:	ea95 0f0c 	teq	r5, ip
 80a46fe:	d105      	bne.n	80a470c <__aeabi_dmul+0x234>
 80a4700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a4704:	bf1c      	itt	ne
 80a4706:	4610      	movne	r0, r2
 80a4708:	4619      	movne	r1, r3
 80a470a:	d10a      	bne.n	80a4722 <__aeabi_dmul+0x24a>
 80a470c:	ea81 0103 	eor.w	r1, r1, r3
 80a4710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a471c:	f04f 0000 	mov.w	r0, #0
 80a4720:	bd70      	pop	{r4, r5, r6, pc}
 80a4722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a472a:	bd70      	pop	{r4, r5, r6, pc}

080a472c <__aeabi_ddiv>:
 80a472c:	b570      	push	{r4, r5, r6, lr}
 80a472e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a473a:	bf1d      	ittte	ne
 80a473c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4740:	ea94 0f0c 	teqne	r4, ip
 80a4744:	ea95 0f0c 	teqne	r5, ip
 80a4748:	f000 f8a7 	bleq	80a489a <__aeabi_ddiv+0x16e>
 80a474c:	eba4 0405 	sub.w	r4, r4, r5
 80a4750:	ea81 0e03 	eor.w	lr, r1, r3
 80a4754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a475c:	f000 8088 	beq.w	80a4870 <__aeabi_ddiv+0x144>
 80a4760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a476c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a4770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a4778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a477c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a4780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a4784:	429d      	cmp	r5, r3
 80a4786:	bf08      	it	eq
 80a4788:	4296      	cmpeq	r6, r2
 80a478a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a478e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a4792:	d202      	bcs.n	80a479a <__aeabi_ddiv+0x6e>
 80a4794:	085b      	lsrs	r3, r3, #1
 80a4796:	ea4f 0232 	mov.w	r2, r2, rrx
 80a479a:	1ab6      	subs	r6, r6, r2
 80a479c:	eb65 0503 	sbc.w	r5, r5, r3
 80a47a0:	085b      	lsrs	r3, r3, #1
 80a47a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a47a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a47aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a47ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80a47b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a47b6:	bf22      	ittt	cs
 80a47b8:	1ab6      	subcs	r6, r6, r2
 80a47ba:	4675      	movcs	r5, lr
 80a47bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80a47c0:	085b      	lsrs	r3, r3, #1
 80a47c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a47c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a47ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a47ce:	bf22      	ittt	cs
 80a47d0:	1ab6      	subcs	r6, r6, r2
 80a47d2:	4675      	movcs	r5, lr
 80a47d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a47d8:	085b      	lsrs	r3, r3, #1
 80a47da:	ea4f 0232 	mov.w	r2, r2, rrx
 80a47de:	ebb6 0e02 	subs.w	lr, r6, r2
 80a47e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a47e6:	bf22      	ittt	cs
 80a47e8:	1ab6      	subcs	r6, r6, r2
 80a47ea:	4675      	movcs	r5, lr
 80a47ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a47f0:	085b      	lsrs	r3, r3, #1
 80a47f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a47f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a47fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a47fe:	bf22      	ittt	cs
 80a4800:	1ab6      	subcs	r6, r6, r2
 80a4802:	4675      	movcs	r5, lr
 80a4804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4808:	ea55 0e06 	orrs.w	lr, r5, r6
 80a480c:	d018      	beq.n	80a4840 <__aeabi_ddiv+0x114>
 80a480e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a4812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a4816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a481a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a481e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a4822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a4826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a482a:	d1c0      	bne.n	80a47ae <__aeabi_ddiv+0x82>
 80a482c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4830:	d10b      	bne.n	80a484a <__aeabi_ddiv+0x11e>
 80a4832:	ea41 0100 	orr.w	r1, r1, r0
 80a4836:	f04f 0000 	mov.w	r0, #0
 80a483a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a483e:	e7b6      	b.n	80a47ae <__aeabi_ddiv+0x82>
 80a4840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4844:	bf04      	itt	eq
 80a4846:	4301      	orreq	r1, r0
 80a4848:	2000      	moveq	r0, #0
 80a484a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a484e:	bf88      	it	hi
 80a4850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4854:	f63f aeaf 	bhi.w	80a45b6 <__aeabi_dmul+0xde>
 80a4858:	ebb5 0c03 	subs.w	ip, r5, r3
 80a485c:	bf04      	itt	eq
 80a485e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a4862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4866:	f150 0000 	adcs.w	r0, r0, #0
 80a486a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a486e:	bd70      	pop	{r4, r5, r6, pc}
 80a4870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a4874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a4878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a487c:	bfc2      	ittt	gt
 80a487e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4886:	bd70      	popgt	{r4, r5, r6, pc}
 80a4888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a488c:	f04f 0e00 	mov.w	lr, #0
 80a4890:	3c01      	subs	r4, #1
 80a4892:	e690      	b.n	80a45b6 <__aeabi_dmul+0xde>
 80a4894:	ea45 0e06 	orr.w	lr, r5, r6
 80a4898:	e68d      	b.n	80a45b6 <__aeabi_dmul+0xde>
 80a489a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a489e:	ea94 0f0c 	teq	r4, ip
 80a48a2:	bf08      	it	eq
 80a48a4:	ea95 0f0c 	teqeq	r5, ip
 80a48a8:	f43f af3b 	beq.w	80a4722 <__aeabi_dmul+0x24a>
 80a48ac:	ea94 0f0c 	teq	r4, ip
 80a48b0:	d10a      	bne.n	80a48c8 <__aeabi_ddiv+0x19c>
 80a48b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a48b6:	f47f af34 	bne.w	80a4722 <__aeabi_dmul+0x24a>
 80a48ba:	ea95 0f0c 	teq	r5, ip
 80a48be:	f47f af25 	bne.w	80a470c <__aeabi_dmul+0x234>
 80a48c2:	4610      	mov	r0, r2
 80a48c4:	4619      	mov	r1, r3
 80a48c6:	e72c      	b.n	80a4722 <__aeabi_dmul+0x24a>
 80a48c8:	ea95 0f0c 	teq	r5, ip
 80a48cc:	d106      	bne.n	80a48dc <__aeabi_ddiv+0x1b0>
 80a48ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a48d2:	f43f aefd 	beq.w	80a46d0 <__aeabi_dmul+0x1f8>
 80a48d6:	4610      	mov	r0, r2
 80a48d8:	4619      	mov	r1, r3
 80a48da:	e722      	b.n	80a4722 <__aeabi_dmul+0x24a>
 80a48dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a48e0:	bf18      	it	ne
 80a48e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a48e6:	f47f aec5 	bne.w	80a4674 <__aeabi_dmul+0x19c>
 80a48ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a48ee:	f47f af0d 	bne.w	80a470c <__aeabi_dmul+0x234>
 80a48f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a48f6:	f47f aeeb 	bne.w	80a46d0 <__aeabi_dmul+0x1f8>
 80a48fa:	e712      	b.n	80a4722 <__aeabi_dmul+0x24a>

080a48fc <__gedf2>:
 80a48fc:	f04f 3cff 	mov.w	ip, #4294967295
 80a4900:	e006      	b.n	80a4910 <__cmpdf2+0x4>
 80a4902:	bf00      	nop

080a4904 <__ledf2>:
 80a4904:	f04f 0c01 	mov.w	ip, #1
 80a4908:	e002      	b.n	80a4910 <__cmpdf2+0x4>
 80a490a:	bf00      	nop

080a490c <__cmpdf2>:
 80a490c:	f04f 0c01 	mov.w	ip, #1
 80a4910:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a491c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4920:	bf18      	it	ne
 80a4922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a4926:	d01b      	beq.n	80a4960 <__cmpdf2+0x54>
 80a4928:	b001      	add	sp, #4
 80a492a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a492e:	bf0c      	ite	eq
 80a4930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a4934:	ea91 0f03 	teqne	r1, r3
 80a4938:	bf02      	ittt	eq
 80a493a:	ea90 0f02 	teqeq	r0, r2
 80a493e:	2000      	moveq	r0, #0
 80a4940:	4770      	bxeq	lr
 80a4942:	f110 0f00 	cmn.w	r0, #0
 80a4946:	ea91 0f03 	teq	r1, r3
 80a494a:	bf58      	it	pl
 80a494c:	4299      	cmppl	r1, r3
 80a494e:	bf08      	it	eq
 80a4950:	4290      	cmpeq	r0, r2
 80a4952:	bf2c      	ite	cs
 80a4954:	17d8      	asrcs	r0, r3, #31
 80a4956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a495a:	f040 0001 	orr.w	r0, r0, #1
 80a495e:	4770      	bx	lr
 80a4960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4968:	d102      	bne.n	80a4970 <__cmpdf2+0x64>
 80a496a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a496e:	d107      	bne.n	80a4980 <__cmpdf2+0x74>
 80a4970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4978:	d1d6      	bne.n	80a4928 <__cmpdf2+0x1c>
 80a497a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a497e:	d0d3      	beq.n	80a4928 <__cmpdf2+0x1c>
 80a4980:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4984:	4770      	bx	lr
 80a4986:	bf00      	nop

080a4988 <__aeabi_cdrcmple>:
 80a4988:	4684      	mov	ip, r0
 80a498a:	4610      	mov	r0, r2
 80a498c:	4662      	mov	r2, ip
 80a498e:	468c      	mov	ip, r1
 80a4990:	4619      	mov	r1, r3
 80a4992:	4663      	mov	r3, ip
 80a4994:	e000      	b.n	80a4998 <__aeabi_cdcmpeq>
 80a4996:	bf00      	nop

080a4998 <__aeabi_cdcmpeq>:
 80a4998:	b501      	push	{r0, lr}
 80a499a:	f7ff ffb7 	bl	80a490c <__cmpdf2>
 80a499e:	2800      	cmp	r0, #0
 80a49a0:	bf48      	it	mi
 80a49a2:	f110 0f00 	cmnmi.w	r0, #0
 80a49a6:	bd01      	pop	{r0, pc}

080a49a8 <__aeabi_dcmpeq>:
 80a49a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a49ac:	f7ff fff4 	bl	80a4998 <__aeabi_cdcmpeq>
 80a49b0:	bf0c      	ite	eq
 80a49b2:	2001      	moveq	r0, #1
 80a49b4:	2000      	movne	r0, #0
 80a49b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a49ba:	bf00      	nop

080a49bc <__aeabi_dcmplt>:
 80a49bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a49c0:	f7ff ffea 	bl	80a4998 <__aeabi_cdcmpeq>
 80a49c4:	bf34      	ite	cc
 80a49c6:	2001      	movcc	r0, #1
 80a49c8:	2000      	movcs	r0, #0
 80a49ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80a49ce:	bf00      	nop

080a49d0 <__aeabi_dcmple>:
 80a49d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a49d4:	f7ff ffe0 	bl	80a4998 <__aeabi_cdcmpeq>
 80a49d8:	bf94      	ite	ls
 80a49da:	2001      	movls	r0, #1
 80a49dc:	2000      	movhi	r0, #0
 80a49de:	f85d fb08 	ldr.w	pc, [sp], #8
 80a49e2:	bf00      	nop

080a49e4 <__aeabi_dcmpge>:
 80a49e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a49e8:	f7ff ffce 	bl	80a4988 <__aeabi_cdrcmple>
 80a49ec:	bf94      	ite	ls
 80a49ee:	2001      	movls	r0, #1
 80a49f0:	2000      	movhi	r0, #0
 80a49f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a49f6:	bf00      	nop

080a49f8 <__aeabi_dcmpgt>:
 80a49f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a49fc:	f7ff ffc4 	bl	80a4988 <__aeabi_cdrcmple>
 80a4a00:	bf34      	ite	cc
 80a4a02:	2001      	movcc	r0, #1
 80a4a04:	2000      	movcs	r0, #0
 80a4a06:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4a0a:	bf00      	nop

080a4a0c <__aeabi_d2f>:
 80a4a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a4a14:	bf24      	itt	cs
 80a4a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a4a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a4a1e:	d90d      	bls.n	80a4a3c <__aeabi_d2f+0x30>
 80a4a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a4a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a4a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a4a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a4a34:	bf08      	it	eq
 80a4a36:	f020 0001 	biceq.w	r0, r0, #1
 80a4a3a:	4770      	bx	lr
 80a4a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a4a40:	d121      	bne.n	80a4a86 <__aeabi_d2f+0x7a>
 80a4a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a4a46:	bfbc      	itt	lt
 80a4a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a4a4c:	4770      	bxlt	lr
 80a4a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a4a56:	f1c2 0218 	rsb	r2, r2, #24
 80a4a5a:	f1c2 0c20 	rsb	ip, r2, #32
 80a4a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 80a4a62:	fa20 f002 	lsr.w	r0, r0, r2
 80a4a66:	bf18      	it	ne
 80a4a68:	f040 0001 	orrne.w	r0, r0, #1
 80a4a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a4a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a4a78:	ea40 000c 	orr.w	r0, r0, ip
 80a4a7c:	fa23 f302 	lsr.w	r3, r3, r2
 80a4a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a4a84:	e7cc      	b.n	80a4a20 <__aeabi_d2f+0x14>
 80a4a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a4a8a:	d107      	bne.n	80a4a9c <__aeabi_d2f+0x90>
 80a4a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a4a90:	bf1e      	ittt	ne
 80a4a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a4a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a4a9a:	4770      	bxne	lr
 80a4a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a4aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4aa8:	4770      	bx	lr
 80a4aaa:	bf00      	nop

080a4aac <__aeabi_frsub>:
 80a4aac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a4ab0:	e002      	b.n	80a4ab8 <__addsf3>
 80a4ab2:	bf00      	nop

080a4ab4 <__aeabi_fsub>:
 80a4ab4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a4ab8 <__addsf3>:
 80a4ab8:	0042      	lsls	r2, r0, #1
 80a4aba:	bf1f      	itttt	ne
 80a4abc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a4ac0:	ea92 0f03 	teqne	r2, r3
 80a4ac4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a4ac8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4acc:	d06a      	beq.n	80a4ba4 <__addsf3+0xec>
 80a4ace:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a4ad2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a4ad6:	bfc1      	itttt	gt
 80a4ad8:	18d2      	addgt	r2, r2, r3
 80a4ada:	4041      	eorgt	r1, r0
 80a4adc:	4048      	eorgt	r0, r1
 80a4ade:	4041      	eorgt	r1, r0
 80a4ae0:	bfb8      	it	lt
 80a4ae2:	425b      	neglt	r3, r3
 80a4ae4:	2b19      	cmp	r3, #25
 80a4ae6:	bf88      	it	hi
 80a4ae8:	4770      	bxhi	lr
 80a4aea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4af2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a4af6:	bf18      	it	ne
 80a4af8:	4240      	negne	r0, r0
 80a4afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4afe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a4b02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a4b06:	bf18      	it	ne
 80a4b08:	4249      	negne	r1, r1
 80a4b0a:	ea92 0f03 	teq	r2, r3
 80a4b0e:	d03f      	beq.n	80a4b90 <__addsf3+0xd8>
 80a4b10:	f1a2 0201 	sub.w	r2, r2, #1
 80a4b14:	fa41 fc03 	asr.w	ip, r1, r3
 80a4b18:	eb10 000c 	adds.w	r0, r0, ip
 80a4b1c:	f1c3 0320 	rsb	r3, r3, #32
 80a4b20:	fa01 f103 	lsl.w	r1, r1, r3
 80a4b24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4b28:	d502      	bpl.n	80a4b30 <__addsf3+0x78>
 80a4b2a:	4249      	negs	r1, r1
 80a4b2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a4b30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a4b34:	d313      	bcc.n	80a4b5e <__addsf3+0xa6>
 80a4b36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a4b3a:	d306      	bcc.n	80a4b4a <__addsf3+0x92>
 80a4b3c:	0840      	lsrs	r0, r0, #1
 80a4b3e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4b42:	f102 0201 	add.w	r2, r2, #1
 80a4b46:	2afe      	cmp	r2, #254	; 0xfe
 80a4b48:	d251      	bcs.n	80a4bee <__addsf3+0x136>
 80a4b4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a4b4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4b52:	bf08      	it	eq
 80a4b54:	f020 0001 	biceq.w	r0, r0, #1
 80a4b58:	ea40 0003 	orr.w	r0, r0, r3
 80a4b5c:	4770      	bx	lr
 80a4b5e:	0049      	lsls	r1, r1, #1
 80a4b60:	eb40 0000 	adc.w	r0, r0, r0
 80a4b64:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a4b68:	f1a2 0201 	sub.w	r2, r2, #1
 80a4b6c:	d1ed      	bne.n	80a4b4a <__addsf3+0x92>
 80a4b6e:	fab0 fc80 	clz	ip, r0
 80a4b72:	f1ac 0c08 	sub.w	ip, ip, #8
 80a4b76:	ebb2 020c 	subs.w	r2, r2, ip
 80a4b7a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a4b7e:	bfaa      	itet	ge
 80a4b80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4b84:	4252      	neglt	r2, r2
 80a4b86:	4318      	orrge	r0, r3
 80a4b88:	bfbc      	itt	lt
 80a4b8a:	40d0      	lsrlt	r0, r2
 80a4b8c:	4318      	orrlt	r0, r3
 80a4b8e:	4770      	bx	lr
 80a4b90:	f092 0f00 	teq	r2, #0
 80a4b94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a4b98:	bf06      	itte	eq
 80a4b9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a4b9e:	3201      	addeq	r2, #1
 80a4ba0:	3b01      	subne	r3, #1
 80a4ba2:	e7b5      	b.n	80a4b10 <__addsf3+0x58>
 80a4ba4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4bac:	bf18      	it	ne
 80a4bae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4bb2:	d021      	beq.n	80a4bf8 <__addsf3+0x140>
 80a4bb4:	ea92 0f03 	teq	r2, r3
 80a4bb8:	d004      	beq.n	80a4bc4 <__addsf3+0x10c>
 80a4bba:	f092 0f00 	teq	r2, #0
 80a4bbe:	bf08      	it	eq
 80a4bc0:	4608      	moveq	r0, r1
 80a4bc2:	4770      	bx	lr
 80a4bc4:	ea90 0f01 	teq	r0, r1
 80a4bc8:	bf1c      	itt	ne
 80a4bca:	2000      	movne	r0, #0
 80a4bcc:	4770      	bxne	lr
 80a4bce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a4bd2:	d104      	bne.n	80a4bde <__addsf3+0x126>
 80a4bd4:	0040      	lsls	r0, r0, #1
 80a4bd6:	bf28      	it	cs
 80a4bd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a4bdc:	4770      	bx	lr
 80a4bde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a4be2:	bf3c      	itt	cc
 80a4be4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a4be8:	4770      	bxcc	lr
 80a4bea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4bee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a4bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4bf6:	4770      	bx	lr
 80a4bf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4bfc:	bf16      	itet	ne
 80a4bfe:	4608      	movne	r0, r1
 80a4c00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a4c04:	4601      	movne	r1, r0
 80a4c06:	0242      	lsls	r2, r0, #9
 80a4c08:	bf06      	itte	eq
 80a4c0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a4c0e:	ea90 0f01 	teqeq	r0, r1
 80a4c12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a4c16:	4770      	bx	lr

080a4c18 <__aeabi_ui2f>:
 80a4c18:	f04f 0300 	mov.w	r3, #0
 80a4c1c:	e004      	b.n	80a4c28 <__aeabi_i2f+0x8>
 80a4c1e:	bf00      	nop

080a4c20 <__aeabi_i2f>:
 80a4c20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a4c24:	bf48      	it	mi
 80a4c26:	4240      	negmi	r0, r0
 80a4c28:	ea5f 0c00 	movs.w	ip, r0
 80a4c2c:	bf08      	it	eq
 80a4c2e:	4770      	bxeq	lr
 80a4c30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a4c34:	4601      	mov	r1, r0
 80a4c36:	f04f 0000 	mov.w	r0, #0
 80a4c3a:	e01c      	b.n	80a4c76 <__aeabi_l2f+0x2a>

080a4c3c <__aeabi_ul2f>:
 80a4c3c:	ea50 0201 	orrs.w	r2, r0, r1
 80a4c40:	bf08      	it	eq
 80a4c42:	4770      	bxeq	lr
 80a4c44:	f04f 0300 	mov.w	r3, #0
 80a4c48:	e00a      	b.n	80a4c60 <__aeabi_l2f+0x14>
 80a4c4a:	bf00      	nop

080a4c4c <__aeabi_l2f>:
 80a4c4c:	ea50 0201 	orrs.w	r2, r0, r1
 80a4c50:	bf08      	it	eq
 80a4c52:	4770      	bxeq	lr
 80a4c54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a4c58:	d502      	bpl.n	80a4c60 <__aeabi_l2f+0x14>
 80a4c5a:	4240      	negs	r0, r0
 80a4c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4c60:	ea5f 0c01 	movs.w	ip, r1
 80a4c64:	bf02      	ittt	eq
 80a4c66:	4684      	moveq	ip, r0
 80a4c68:	4601      	moveq	r1, r0
 80a4c6a:	2000      	moveq	r0, #0
 80a4c6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a4c70:	bf08      	it	eq
 80a4c72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a4c76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a4c7a:	fabc f28c 	clz	r2, ip
 80a4c7e:	3a08      	subs	r2, #8
 80a4c80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4c84:	db10      	blt.n	80a4ca8 <__aeabi_l2f+0x5c>
 80a4c86:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4c8a:	4463      	add	r3, ip
 80a4c8c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4c90:	f1c2 0220 	rsb	r2, r2, #32
 80a4c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4c98:	fa20 f202 	lsr.w	r2, r0, r2
 80a4c9c:	eb43 0002 	adc.w	r0, r3, r2
 80a4ca0:	bf08      	it	eq
 80a4ca2:	f020 0001 	biceq.w	r0, r0, #1
 80a4ca6:	4770      	bx	lr
 80a4ca8:	f102 0220 	add.w	r2, r2, #32
 80a4cac:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4cb0:	f1c2 0220 	rsb	r2, r2, #32
 80a4cb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a4cb8:	fa21 f202 	lsr.w	r2, r1, r2
 80a4cbc:	eb43 0002 	adc.w	r0, r3, r2
 80a4cc0:	bf08      	it	eq
 80a4cc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4cc6:	4770      	bx	lr

080a4cc8 <__aeabi_fmul>:
 80a4cc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4ccc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4cd0:	bf1e      	ittt	ne
 80a4cd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4cd6:	ea92 0f0c 	teqne	r2, ip
 80a4cda:	ea93 0f0c 	teqne	r3, ip
 80a4cde:	d06f      	beq.n	80a4dc0 <__aeabi_fmul+0xf8>
 80a4ce0:	441a      	add	r2, r3
 80a4ce2:	ea80 0c01 	eor.w	ip, r0, r1
 80a4ce6:	0240      	lsls	r0, r0, #9
 80a4ce8:	bf18      	it	ne
 80a4cea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a4cee:	d01e      	beq.n	80a4d2e <__aeabi_fmul+0x66>
 80a4cf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a4cf4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a4cf8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a4cfc:	fba0 3101 	umull	r3, r1, r0, r1
 80a4d00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4d04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a4d08:	bf3e      	ittt	cc
 80a4d0a:	0049      	lslcc	r1, r1, #1
 80a4d0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a4d10:	005b      	lslcc	r3, r3, #1
 80a4d12:	ea40 0001 	orr.w	r0, r0, r1
 80a4d16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a4d1a:	2afd      	cmp	r2, #253	; 0xfd
 80a4d1c:	d81d      	bhi.n	80a4d5a <__aeabi_fmul+0x92>
 80a4d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a4d22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4d26:	bf08      	it	eq
 80a4d28:	f020 0001 	biceq.w	r0, r0, #1
 80a4d2c:	4770      	bx	lr
 80a4d2e:	f090 0f00 	teq	r0, #0
 80a4d32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4d36:	bf08      	it	eq
 80a4d38:	0249      	lsleq	r1, r1, #9
 80a4d3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4d3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a4d42:	3a7f      	subs	r2, #127	; 0x7f
 80a4d44:	bfc2      	ittt	gt
 80a4d46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4d4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4d4e:	4770      	bxgt	lr
 80a4d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4d54:	f04f 0300 	mov.w	r3, #0
 80a4d58:	3a01      	subs	r2, #1
 80a4d5a:	dc5d      	bgt.n	80a4e18 <__aeabi_fmul+0x150>
 80a4d5c:	f112 0f19 	cmn.w	r2, #25
 80a4d60:	bfdc      	itt	le
 80a4d62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a4d66:	4770      	bxle	lr
 80a4d68:	f1c2 0200 	rsb	r2, r2, #0
 80a4d6c:	0041      	lsls	r1, r0, #1
 80a4d6e:	fa21 f102 	lsr.w	r1, r1, r2
 80a4d72:	f1c2 0220 	rsb	r2, r2, #32
 80a4d76:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4d7a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a4d7e:	f140 0000 	adc.w	r0, r0, #0
 80a4d82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a4d86:	bf08      	it	eq
 80a4d88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4d8c:	4770      	bx	lr
 80a4d8e:	f092 0f00 	teq	r2, #0
 80a4d92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4d96:	bf02      	ittt	eq
 80a4d98:	0040      	lsleq	r0, r0, #1
 80a4d9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4d9e:	3a01      	subeq	r2, #1
 80a4da0:	d0f9      	beq.n	80a4d96 <__aeabi_fmul+0xce>
 80a4da2:	ea40 000c 	orr.w	r0, r0, ip
 80a4da6:	f093 0f00 	teq	r3, #0
 80a4daa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4dae:	bf02      	ittt	eq
 80a4db0:	0049      	lsleq	r1, r1, #1
 80a4db2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4db6:	3b01      	subeq	r3, #1
 80a4db8:	d0f9      	beq.n	80a4dae <__aeabi_fmul+0xe6>
 80a4dba:	ea41 010c 	orr.w	r1, r1, ip
 80a4dbe:	e78f      	b.n	80a4ce0 <__aeabi_fmul+0x18>
 80a4dc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4dc4:	ea92 0f0c 	teq	r2, ip
 80a4dc8:	bf18      	it	ne
 80a4dca:	ea93 0f0c 	teqne	r3, ip
 80a4dce:	d00a      	beq.n	80a4de6 <__aeabi_fmul+0x11e>
 80a4dd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4dd4:	bf18      	it	ne
 80a4dd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4dda:	d1d8      	bne.n	80a4d8e <__aeabi_fmul+0xc6>
 80a4ddc:	ea80 0001 	eor.w	r0, r0, r1
 80a4de0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4de4:	4770      	bx	lr
 80a4de6:	f090 0f00 	teq	r0, #0
 80a4dea:	bf17      	itett	ne
 80a4dec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a4df0:	4608      	moveq	r0, r1
 80a4df2:	f091 0f00 	teqne	r1, #0
 80a4df6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a4dfa:	d014      	beq.n	80a4e26 <__aeabi_fmul+0x15e>
 80a4dfc:	ea92 0f0c 	teq	r2, ip
 80a4e00:	d101      	bne.n	80a4e06 <__aeabi_fmul+0x13e>
 80a4e02:	0242      	lsls	r2, r0, #9
 80a4e04:	d10f      	bne.n	80a4e26 <__aeabi_fmul+0x15e>
 80a4e06:	ea93 0f0c 	teq	r3, ip
 80a4e0a:	d103      	bne.n	80a4e14 <__aeabi_fmul+0x14c>
 80a4e0c:	024b      	lsls	r3, r1, #9
 80a4e0e:	bf18      	it	ne
 80a4e10:	4608      	movne	r0, r1
 80a4e12:	d108      	bne.n	80a4e26 <__aeabi_fmul+0x15e>
 80a4e14:	ea80 0001 	eor.w	r0, r0, r1
 80a4e18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4e1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4e24:	4770      	bx	lr
 80a4e26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4e2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a4e2e:	4770      	bx	lr

080a4e30 <__aeabi_fdiv>:
 80a4e30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4e34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4e38:	bf1e      	ittt	ne
 80a4e3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4e3e:	ea92 0f0c 	teqne	r2, ip
 80a4e42:	ea93 0f0c 	teqne	r3, ip
 80a4e46:	d069      	beq.n	80a4f1c <__aeabi_fdiv+0xec>
 80a4e48:	eba2 0203 	sub.w	r2, r2, r3
 80a4e4c:	ea80 0c01 	eor.w	ip, r0, r1
 80a4e50:	0249      	lsls	r1, r1, #9
 80a4e52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a4e56:	d037      	beq.n	80a4ec8 <__aeabi_fdiv+0x98>
 80a4e58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a4e5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a4e60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a4e64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4e68:	428b      	cmp	r3, r1
 80a4e6a:	bf38      	it	cc
 80a4e6c:	005b      	lslcc	r3, r3, #1
 80a4e6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a4e72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a4e76:	428b      	cmp	r3, r1
 80a4e78:	bf24      	itt	cs
 80a4e7a:	1a5b      	subcs	r3, r3, r1
 80a4e7c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4e80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4e84:	bf24      	itt	cs
 80a4e86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a4e8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4e8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a4e92:	bf24      	itt	cs
 80a4e94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a4e98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4e9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a4ea0:	bf24      	itt	cs
 80a4ea2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a4ea6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4eaa:	011b      	lsls	r3, r3, #4
 80a4eac:	bf18      	it	ne
 80a4eae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a4eb2:	d1e0      	bne.n	80a4e76 <__aeabi_fdiv+0x46>
 80a4eb4:	2afd      	cmp	r2, #253	; 0xfd
 80a4eb6:	f63f af50 	bhi.w	80a4d5a <__aeabi_fmul+0x92>
 80a4eba:	428b      	cmp	r3, r1
 80a4ebc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4ec0:	bf08      	it	eq
 80a4ec2:	f020 0001 	biceq.w	r0, r0, #1
 80a4ec6:	4770      	bx	lr
 80a4ec8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4ecc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4ed0:	327f      	adds	r2, #127	; 0x7f
 80a4ed2:	bfc2      	ittt	gt
 80a4ed4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4ed8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4edc:	4770      	bxgt	lr
 80a4ede:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4ee2:	f04f 0300 	mov.w	r3, #0
 80a4ee6:	3a01      	subs	r2, #1
 80a4ee8:	e737      	b.n	80a4d5a <__aeabi_fmul+0x92>
 80a4eea:	f092 0f00 	teq	r2, #0
 80a4eee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4ef2:	bf02      	ittt	eq
 80a4ef4:	0040      	lsleq	r0, r0, #1
 80a4ef6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4efa:	3a01      	subeq	r2, #1
 80a4efc:	d0f9      	beq.n	80a4ef2 <__aeabi_fdiv+0xc2>
 80a4efe:	ea40 000c 	orr.w	r0, r0, ip
 80a4f02:	f093 0f00 	teq	r3, #0
 80a4f06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4f0a:	bf02      	ittt	eq
 80a4f0c:	0049      	lsleq	r1, r1, #1
 80a4f0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4f12:	3b01      	subeq	r3, #1
 80a4f14:	d0f9      	beq.n	80a4f0a <__aeabi_fdiv+0xda>
 80a4f16:	ea41 010c 	orr.w	r1, r1, ip
 80a4f1a:	e795      	b.n	80a4e48 <__aeabi_fdiv+0x18>
 80a4f1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4f20:	ea92 0f0c 	teq	r2, ip
 80a4f24:	d108      	bne.n	80a4f38 <__aeabi_fdiv+0x108>
 80a4f26:	0242      	lsls	r2, r0, #9
 80a4f28:	f47f af7d 	bne.w	80a4e26 <__aeabi_fmul+0x15e>
 80a4f2c:	ea93 0f0c 	teq	r3, ip
 80a4f30:	f47f af70 	bne.w	80a4e14 <__aeabi_fmul+0x14c>
 80a4f34:	4608      	mov	r0, r1
 80a4f36:	e776      	b.n	80a4e26 <__aeabi_fmul+0x15e>
 80a4f38:	ea93 0f0c 	teq	r3, ip
 80a4f3c:	d104      	bne.n	80a4f48 <__aeabi_fdiv+0x118>
 80a4f3e:	024b      	lsls	r3, r1, #9
 80a4f40:	f43f af4c 	beq.w	80a4ddc <__aeabi_fmul+0x114>
 80a4f44:	4608      	mov	r0, r1
 80a4f46:	e76e      	b.n	80a4e26 <__aeabi_fmul+0x15e>
 80a4f48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4f4c:	bf18      	it	ne
 80a4f4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4f52:	d1ca      	bne.n	80a4eea <__aeabi_fdiv+0xba>
 80a4f54:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a4f58:	f47f af5c 	bne.w	80a4e14 <__aeabi_fmul+0x14c>
 80a4f5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a4f60:	f47f af3c 	bne.w	80a4ddc <__aeabi_fmul+0x114>
 80a4f64:	e75f      	b.n	80a4e26 <__aeabi_fmul+0x15e>
 80a4f66:	bf00      	nop

080a4f68 <__gesf2>:
 80a4f68:	f04f 3cff 	mov.w	ip, #4294967295
 80a4f6c:	e006      	b.n	80a4f7c <__cmpsf2+0x4>
 80a4f6e:	bf00      	nop

080a4f70 <__lesf2>:
 80a4f70:	f04f 0c01 	mov.w	ip, #1
 80a4f74:	e002      	b.n	80a4f7c <__cmpsf2+0x4>
 80a4f76:	bf00      	nop

080a4f78 <__cmpsf2>:
 80a4f78:	f04f 0c01 	mov.w	ip, #1
 80a4f7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4f80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a4f84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4f88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4f8c:	bf18      	it	ne
 80a4f8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4f92:	d011      	beq.n	80a4fb8 <__cmpsf2+0x40>
 80a4f94:	b001      	add	sp, #4
 80a4f96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a4f9a:	bf18      	it	ne
 80a4f9c:	ea90 0f01 	teqne	r0, r1
 80a4fa0:	bf58      	it	pl
 80a4fa2:	ebb2 0003 	subspl.w	r0, r2, r3
 80a4fa6:	bf88      	it	hi
 80a4fa8:	17c8      	asrhi	r0, r1, #31
 80a4faa:	bf38      	it	cc
 80a4fac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a4fb0:	bf18      	it	ne
 80a4fb2:	f040 0001 	orrne.w	r0, r0, #1
 80a4fb6:	4770      	bx	lr
 80a4fb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4fbc:	d102      	bne.n	80a4fc4 <__cmpsf2+0x4c>
 80a4fbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a4fc2:	d105      	bne.n	80a4fd0 <__cmpsf2+0x58>
 80a4fc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a4fc8:	d1e4      	bne.n	80a4f94 <__cmpsf2+0x1c>
 80a4fca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a4fce:	d0e1      	beq.n	80a4f94 <__cmpsf2+0x1c>
 80a4fd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4fd4:	4770      	bx	lr
 80a4fd6:	bf00      	nop

080a4fd8 <__aeabi_cfrcmple>:
 80a4fd8:	4684      	mov	ip, r0
 80a4fda:	4608      	mov	r0, r1
 80a4fdc:	4661      	mov	r1, ip
 80a4fde:	e7ff      	b.n	80a4fe0 <__aeabi_cfcmpeq>

080a4fe0 <__aeabi_cfcmpeq>:
 80a4fe0:	b50f      	push	{r0, r1, r2, r3, lr}
 80a4fe2:	f7ff ffc9 	bl	80a4f78 <__cmpsf2>
 80a4fe6:	2800      	cmp	r0, #0
 80a4fe8:	bf48      	it	mi
 80a4fea:	f110 0f00 	cmnmi.w	r0, #0
 80a4fee:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a4ff0 <__aeabi_fcmpeq>:
 80a4ff0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4ff4:	f7ff fff4 	bl	80a4fe0 <__aeabi_cfcmpeq>
 80a4ff8:	bf0c      	ite	eq
 80a4ffa:	2001      	moveq	r0, #1
 80a4ffc:	2000      	movne	r0, #0
 80a4ffe:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5002:	bf00      	nop

080a5004 <__aeabi_fcmplt>:
 80a5004:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5008:	f7ff ffea 	bl	80a4fe0 <__aeabi_cfcmpeq>
 80a500c:	bf34      	ite	cc
 80a500e:	2001      	movcc	r0, #1
 80a5010:	2000      	movcs	r0, #0
 80a5012:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5016:	bf00      	nop

080a5018 <__aeabi_fcmple>:
 80a5018:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a501c:	f7ff ffe0 	bl	80a4fe0 <__aeabi_cfcmpeq>
 80a5020:	bf94      	ite	ls
 80a5022:	2001      	movls	r0, #1
 80a5024:	2000      	movhi	r0, #0
 80a5026:	f85d fb08 	ldr.w	pc, [sp], #8
 80a502a:	bf00      	nop

080a502c <__aeabi_fcmpge>:
 80a502c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5030:	f7ff ffd2 	bl	80a4fd8 <__aeabi_cfrcmple>
 80a5034:	bf94      	ite	ls
 80a5036:	2001      	movls	r0, #1
 80a5038:	2000      	movhi	r0, #0
 80a503a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a503e:	bf00      	nop

080a5040 <__aeabi_fcmpgt>:
 80a5040:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5044:	f7ff ffc8 	bl	80a4fd8 <__aeabi_cfrcmple>
 80a5048:	bf34      	ite	cc
 80a504a:	2001      	movcc	r0, #1
 80a504c:	2000      	movcs	r0, #0
 80a504e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5052:	bf00      	nop

080a5054 <__aeabi_f2uiz>:
 80a5054:	0042      	lsls	r2, r0, #1
 80a5056:	d20e      	bcs.n	80a5076 <__aeabi_f2uiz+0x22>
 80a5058:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a505c:	d30b      	bcc.n	80a5076 <__aeabi_f2uiz+0x22>
 80a505e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a5062:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a5066:	d409      	bmi.n	80a507c <__aeabi_f2uiz+0x28>
 80a5068:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a506c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5070:	fa23 f002 	lsr.w	r0, r3, r2
 80a5074:	4770      	bx	lr
 80a5076:	f04f 0000 	mov.w	r0, #0
 80a507a:	4770      	bx	lr
 80a507c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a5080:	d101      	bne.n	80a5086 <__aeabi_f2uiz+0x32>
 80a5082:	0242      	lsls	r2, r0, #9
 80a5084:	d102      	bne.n	80a508c <__aeabi_f2uiz+0x38>
 80a5086:	f04f 30ff 	mov.w	r0, #4294967295
 80a508a:	4770      	bx	lr
 80a508c:	f04f 0000 	mov.w	r0, #0
 80a5090:	4770      	bx	lr
 80a5092:	bf00      	nop

080a5094 <__cxa_atexit>:
 80a5094:	b510      	push	{r4, lr}
 80a5096:	4c05      	ldr	r4, [pc, #20]	; (80a50ac <__cxa_atexit+0x18>)
 80a5098:	4613      	mov	r3, r2
 80a509a:	b12c      	cbz	r4, 80a50a8 <__cxa_atexit+0x14>
 80a509c:	460a      	mov	r2, r1
 80a509e:	4601      	mov	r1, r0
 80a50a0:	2002      	movs	r0, #2
 80a50a2:	f3af 8000 	nop.w
 80a50a6:	bd10      	pop	{r4, pc}
 80a50a8:	4620      	mov	r0, r4
 80a50aa:	bd10      	pop	{r4, pc}
 80a50ac:	00000000 	.word	0x00000000

080a50b0 <memcpy>:
 80a50b0:	b510      	push	{r4, lr}
 80a50b2:	1e43      	subs	r3, r0, #1
 80a50b4:	440a      	add	r2, r1
 80a50b6:	4291      	cmp	r1, r2
 80a50b8:	d004      	beq.n	80a50c4 <memcpy+0x14>
 80a50ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a50be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a50c2:	e7f8      	b.n	80a50b6 <memcpy+0x6>
 80a50c4:	bd10      	pop	{r4, pc}

080a50c6 <memset>:
 80a50c6:	4603      	mov	r3, r0
 80a50c8:	4402      	add	r2, r0
 80a50ca:	4293      	cmp	r3, r2
 80a50cc:	d002      	beq.n	80a50d4 <memset+0xe>
 80a50ce:	f803 1b01 	strb.w	r1, [r3], #1
 80a50d2:	e7fa      	b.n	80a50ca <memset+0x4>
 80a50d4:	4770      	bx	lr

080a50d6 <strlen>:
 80a50d6:	4603      	mov	r3, r0
 80a50d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a50dc:	2a00      	cmp	r2, #0
 80a50de:	d1fb      	bne.n	80a50d8 <strlen+0x2>
 80a50e0:	1a18      	subs	r0, r3, r0
 80a50e2:	3801      	subs	r0, #1
 80a50e4:	4770      	bx	lr

080a50e6 <link_code_end>:
	...

080a50e8 <dynalib_user>:
 80a50e8:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a50f8:	0000 0000 6157 7469 6e69 2067 6f66 2072     ....Waiting for 
 80a5108:	7453 7261 0074 7453 7261 6974 676e 6920     Start.Starting i
 80a5118:	206e 2035 6573 6f63 646e 2e73 2e2e 4700     n 5 seconds....G
 80a5128:	214f 4600 6c75 206c 654c 7466 5300 616d     O!.Full Left.Sma
 80a5138:	6c6c 4c20 6665 0074 6543 746e 7265 5300     ll Left.Center.S
 80a5148:	616d 6c6c 5220 6769 7468 4600 6c75 206c     mall Right.Full 
 80a5158:	6952 6867 0074 7c20 0020 6573 736e 726f     Right. | .sensor
 80a5168:	3020 003a 6573 736e 726f 3120 003a 6573      0:.sensor 1:.se
 80a5178:	736e 726f 3220 003a 6573 736e 726f 3320     nsor 2:.sensor 3
 80a5188:	003a 6f6e 7320 6d61 6c70 0065 5453 504f     :.no sample.STOP
 80a5198:	4550 0044                                   PED.

080a519c <_ZTV9LIS3DHI2C>:
	...
 80a51a4:	2141 080a 2143 080a 2197 080a 214f 080a     A!..C!...!..O!..
 80a51b4:	6564 6976 6563 6e20 746f 6620 756f 646e     device not found
 80a51c4:	7200 7365 7465 6974 676e 6c20 7361 4d74     .resetting lastM
 80a51d4:	766f 6d65 6e65 2074 6e69 3174 735f 6372     ovement int1_src
 80a51e4:	303d 2578 0078 6572 6163 696c 7262 7461     =0x%x.recalibrat
 80a51f4:	6e69 0067                                   ing.

080a51f8 <_ZTV8SPIClass>:
	...
 80a5200:	34e5 080a 34e7 080a 0066 6e6c 6600 006e     .4...4..f.ln.fn.
 80a5210:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
 80a5220:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
 80a5230:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 80a5240:	0069 6564 6174 6c69 2073 203d 6200 7561     i.details = .bau
 80a5250:	0064 6553 6972 6c61 5500 4253 6553 6972     d.Serial.USBSeri
 80a5260:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
 80a5270:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
 80a5280:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
 80a5290:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
 80a52a0:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
 80a52b0:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
 80a52c0:	7265 6100 7070 6e00 6e6f 0065 7274 6361     er.app.none.trac
 80a52d0:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
 80a52e0:	0072 6170 696e 0063 6c61 006c 005a 2b25     r.panic.all.Z.%+
 80a52f0:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a5300:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a5310:	6974 656d 0000 0000                         time....

080a5318 <_ZTV9IPAddress>:
	...
 80a5320:	3963 080a 3955 080a 3957 080a               c9..U9..W9..

080a532c <_ZTV9USBSerial>:
	...
 80a5334:	39cd 080a 3a11 080a 39eb 080a 36bd 080a     .9...:...9...6..
 80a5344:	39e5 080a 39cf 080a 39d7 080a 3a0b 080a     .9...9...9...:..
 80a5354:	39df 080a 39c9 080a                         .9...9..

080a535c <_ZTV11USARTSerial>:
	...
 80a5364:	3b85 080a 3ba9 080a 3bb5 080a 36bd 080a     .;...;...;...6..
 80a5374:	3b91 080a 3b9d 080a 3b97 080a 3ba3 080a     .;...;...;...;..
 80a5384:	3b87 080a 3b8b 080a                         .;...;..

080a538c <_ZTV7TwoWire>:
	...
 80a5394:	3c59 080a 3ca3 080a 3c7b 080a 3c5b 080a     Y<...<..{<..[<..
 80a53a4:	3c83 080a 3c8b 080a 3c93 080a 3c9b 080a     .<...<...<...<..

080a53b4 <_ZTVN5spark9WiFiClassE>:
	...
 80a53bc:	3d2b 080a                                   +=..

080a53c0 <link_const_variable_data_end>:
 80a53c0:	080a14b9 	.word	0x080a14b9
 80a53c4:	080a213d 	.word	0x080a213d
 80a53c8:	080a2391 	.word	0x080a2391
 80a53cc:	080a35e1 	.word	0x080a35e1
 80a53d0:	080a37f9 	.word	0x080a37f9
 80a53d4:	080a3809 	.word	0x080a3809
 80a53d8:	080a3d35 	.word	0x080a3d35
 80a53dc:	080a3e19 	.word	0x080a3e19
 80a53e0:	080a3e5d 	.word	0x080a3e5d
 80a53e4:	080a3ed9 	.word	0x080a3ed9
 80a53e8:	080a3f5d 	.word	0x080a3f5d
 80a53ec:	080a4021 	.word	0x080a4021
 80a53f0:	080a40e5 	.word	0x080a40e5

080a53f4 <link_constructors_end>:
	...
