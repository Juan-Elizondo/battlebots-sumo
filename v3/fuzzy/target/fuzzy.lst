
C:/src/battlebots-sumo/v3/fuzzy/target/fuzzy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056f8  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a5710  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000034  20000300  080a5714  00030300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000640  20000334  20000334  00040334  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a5748  080a5748  00035748  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a5770  080a5770  00035770  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00099965  00000000  00000000  00035774  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001083f  00000000  00000000  000cf0d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00015177  00000000  00000000  000df918  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002178  00000000  00000000  000f4a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003028  00000000  00000000  000f6c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00025165  00000000  00000000  000f9c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00024b0f  00000000  00000000  0011ed94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00087a85  00000000  00000000  001438a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bbb4  00000000  00000000  001cb328  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	98 53 0a 08                                         .S..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f005 f997 	bl	80a5360 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f005 f99c 	bl	80a5376 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a5714 	.word	0x080a5714
 80a004c:	20000334 	.word	0x20000334
 80a0050:	20000334 	.word	0x20000334
 80a0054:	20000974 	.word	0x20000974
 80a0058:	20000974 	.word	0x20000974

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f003 fda9 	bl	80a3bb4 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a56d4 	.word	0x080a56d4
 80a0084:	080a5708 	.word	0x080a5708

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f001 b934 	b.w	80a12f4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f001 faf7 	bl	80a1680 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f003 bd4b 	b.w	80a3b30 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f003 bb6b 	b.w	80a3774 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f003 bb71 	b.w	80a3784 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00b2:	6803      	ldr	r3, [r0, #0]
 80a00b4:	4718      	bx	r3

080a00b6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a00b6:	2a01      	cmp	r2, #1
 80a00b8:	d002      	beq.n	80a00c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80a00ba:	2a02      	cmp	r2, #2
 80a00bc:	d002      	beq.n	80a00c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80a00be:	e004      	b.n	80a00ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00c0:	6001      	str	r1, [r0, #0]
	      break;
 80a00c2:	e002      	b.n	80a00ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00c4:	680b      	ldr	r3, [r1, #0]
 80a00c6:	b100      	cbz	r0, 80a00ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80a00c8:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a00ca:	2000      	movs	r0, #0
 80a00cc:	4770      	bx	lr
	...

080a00d0 <_Z5FLISRv>:

// Particle Photon settings
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(MANUAL);

void FLISR() {
 80a00d0:	b508      	push	{r3, lr}
    FLflag = digitalRead(FL);
 80a00d2:	4b05      	ldr	r3, [pc, #20]	; (80a00e8 <_Z5FLISRv+0x18>)
 80a00d4:	8818      	ldrh	r0, [r3, #0]
 80a00d6:	f003 ffe3 	bl	80a40a0 <digitalRead>
 80a00da:	4b04      	ldr	r3, [pc, #16]	; (80a00ec <_Z5FLISRv+0x1c>)
 80a00dc:	3000      	adds	r0, #0
 80a00de:	bf18      	it	ne
 80a00e0:	2001      	movne	r0, #1
 80a00e2:	7018      	strb	r0, [r3, #0]
 80a00e4:	bd08      	pop	{r3, pc}
 80a00e6:	bf00      	nop
 80a00e8:	2000031c 	.word	0x2000031c
 80a00ec:	20000324 	.word	0x20000324

080a00f0 <_Z5FRISRv>:
}

void FRISR() {
 80a00f0:	b508      	push	{r3, lr}
    FRflag = digitalRead(FR);
 80a00f2:	4b05      	ldr	r3, [pc, #20]	; (80a0108 <_Z5FRISRv+0x18>)
 80a00f4:	8818      	ldrh	r0, [r3, #0]
 80a00f6:	f003 ffd3 	bl	80a40a0 <digitalRead>
 80a00fa:	4b04      	ldr	r3, [pc, #16]	; (80a010c <_Z5FRISRv+0x1c>)
 80a00fc:	3000      	adds	r0, #0
 80a00fe:	bf18      	it	ne
 80a0100:	2001      	movne	r0, #1
 80a0102:	7018      	strb	r0, [r3, #0]
 80a0104:	bd08      	pop	{r3, pc}
 80a0106:	bf00      	nop
 80a0108:	2000030c 	.word	0x2000030c
 80a010c:	20000325 	.word	0x20000325

080a0110 <_Z5BLISRv>:
}

void BLISR() {
 80a0110:	b508      	push	{r3, lr}
    BLflag = digitalRead(BL);
 80a0112:	4b05      	ldr	r3, [pc, #20]	; (80a0128 <_Z5BLISRv+0x18>)
 80a0114:	8818      	ldrh	r0, [r3, #0]
 80a0116:	f003 ffc3 	bl	80a40a0 <digitalRead>
 80a011a:	4b04      	ldr	r3, [pc, #16]	; (80a012c <_Z5BLISRv+0x1c>)
 80a011c:	3000      	adds	r0, #0
 80a011e:	bf18      	it	ne
 80a0120:	2001      	movne	r0, #1
 80a0122:	7018      	strb	r0, [r3, #0]
 80a0124:	bd08      	pop	{r3, pc}
 80a0126:	bf00      	nop
 80a0128:	20000314 	.word	0x20000314
 80a012c:	20000310 	.word	0x20000310

080a0130 <_Z5BRISRv>:
}

void BRISR() {
 80a0130:	b508      	push	{r3, lr}
    BRflag = digitalRead(BR);
 80a0132:	4b05      	ldr	r3, [pc, #20]	; (80a0148 <_Z5BRISRv+0x18>)
 80a0134:	8818      	ldrh	r0, [r3, #0]
 80a0136:	f003 ffb3 	bl	80a40a0 <digitalRead>
 80a013a:	4b04      	ldr	r3, [pc, #16]	; (80a014c <_Z5BRISRv+0x1c>)
 80a013c:	3000      	adds	r0, #0
 80a013e:	bf18      	it	ne
 80a0140:	2001      	movne	r0, #1
 80a0142:	7018      	strb	r0, [r3, #0]
 80a0144:	bd08      	pop	{r3, pc}
 80a0146:	bf00      	nop
 80a0148:	20000318 	.word	0x20000318
 80a014c:	2000032c 	.word	0x2000032c

080a0150 <_Z5RSISRv>:
}

void RSISR() {
 80a0150:	b508      	push	{r3, lr}
    RSflag = digitalRead(RS);
 80a0152:	4b05      	ldr	r3, [pc, #20]	; (80a0168 <_Z5RSISRv+0x18>)
 80a0154:	8818      	ldrh	r0, [r3, #0]
 80a0156:	f003 ffa3 	bl	80a40a0 <digitalRead>
 80a015a:	4b04      	ldr	r3, [pc, #16]	; (80a016c <_Z5RSISRv+0x1c>)
 80a015c:	3000      	adds	r0, #0
 80a015e:	bf18      	it	ne
 80a0160:	2001      	movne	r0, #1
 80a0162:	7018      	strb	r0, [r3, #0]
 80a0164:	bd08      	pop	{r3, pc}
 80a0166:	bf00      	nop
 80a0168:	20000300 	.word	0x20000300
 80a016c:	2000033e 	.word	0x2000033e

080a0170 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 80a0170:	b507      	push	{r0, r1, r2, lr}
    {
        void* timer_id = NULL;
 80a0172:	2300      	movs	r3, #0
 80a0174:	a902      	add	r1, sp, #8
 80a0176:	f841 3d04 	str.w	r3, [r1, #-4]!
        if (!os_timer_get_id(timer, &timer_id)) {
 80a017a:	f003 f999 	bl	80a34b0 <os_timer_get_id>
 80a017e:	b920      	cbnz	r0, 80a018a <_ZN5Timer12invoke_timerEPv+0x1a>
            if (timer_id)
 80a0180:	9801      	ldr	r0, [sp, #4]
 80a0182:	b110      	cbz	r0, 80a018a <_ZN5Timer12invoke_timerEPv+0x1a>
                ((Timer*)timer_id)->timeout();
 80a0184:	6803      	ldr	r3, [r0, #0]
 80a0186:	689b      	ldr	r3, [r3, #8]
 80a0188:	4798      	blx	r3
        }
    }
 80a018a:	b003      	add	sp, #12
 80a018c:	f85d fb04 	ldr.w	pc, [sp], #4

080a0190 <_ZN5Timer7timeoutEv>:

    /*
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
 80a0190:	b510      	push	{r4, lr}
    {
		running = true;
 80a0192:	2301      	movs	r3, #1
 80a0194:	7103      	strb	r3, [r0, #4]
        if (callback)
 80a0196:	6943      	ldr	r3, [r0, #20]

    /*
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
 80a0198:	4604      	mov	r4, r0
    {
		running = true;
        if (callback)
 80a019a:	b113      	cbz	r3, 80a01a2 <_ZN5Timer7timeoutEv+0x12>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a019c:	6983      	ldr	r3, [r0, #24]
 80a019e:	300c      	adds	r0, #12
 80a01a0:	4798      	blx	r3
        {
            callback();
        }
        running = false;
 80a01a2:	2300      	movs	r3, #0
 80a01a4:	7123      	strb	r3, [r4, #4]
 80a01a6:	bd10      	pop	{r4, pc}

080a01a8 <_Z8getAccelv>:
void stop() {
  	LESC.writeMicroseconds(1500);
  	RESC.writeMicroseconds(1500);
}

void getAccel() {
 80a01a8:	b510      	push	{r4, lr}
  accel.getSample(sample);
 80a01aa:	4c05      	ldr	r4, [pc, #20]	; (80a01c0 <_Z8getAccelv+0x18>)
 80a01ac:	4805      	ldr	r0, [pc, #20]	; (80a01c4 <_Z8getAccelv+0x1c>)
 80a01ae:	4621      	mov	r1, r4
 80a01b0:	f002 f960 	bl	80a2474 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
  curAccel = sample.x;
 80a01b4:	f9b4 2000 	ldrsh.w	r2, [r4]
 80a01b8:	4b03      	ldr	r3, [pc, #12]	; (80a01c8 <_Z8getAccelv+0x20>)
 80a01ba:	601a      	str	r2, [r3, #0]
 80a01bc:	bd10      	pop	{r4, pc}
 80a01be:	bf00      	nop
 80a01c0:	20000338 	.word	0x20000338
 80a01c4:	20000354 	.word	0x20000354
 80a01c8:	200003c8 	.word	0x200003c8

080a01cc <_Z8movementi.part.5>:
  } else {              // LEFT ESC
    LESC.writeMicroseconds(pwm);
  }
}

void movement(int state) {
 80a01cc:	b508      	push	{r3, lr}
  		R_command = line_fwd;
  		L_dir = 1;
  		R_dir = 1;
      Serial.println("Back triggered, moving forward");
	} else if(state == 10) {
	    if (cur - prevFlag < nudge) {			// go backwards a 'nudge'
 80a01ce:	4a1e      	ldr	r2, [pc, #120]	; (80a0248 <_Z8movementi.part.5+0x7c>)
 80a01d0:	4b1e      	ldr	r3, [pc, #120]	; (80a024c <_Z8movementi.part.5+0x80>)
 80a01d2:	6812      	ldr	r2, [r2, #0]
 80a01d4:	681b      	ldr	r3, [r3, #0]
 80a01d6:	1a9b      	subs	r3, r3, r2
 80a01d8:	f240 22ed 	movw	r2, #749	; 0x2ed
 80a01dc:	4293      	cmp	r3, r2
 80a01de:	dc0d      	bgt.n	80a01fc <_Z8movementi.part.5+0x30>
	  		L_command = line_rev;
 80a01e0:	4a1b      	ldr	r2, [pc, #108]	; (80a0250 <_Z8movementi.part.5+0x84>)
 80a01e2:	234b      	movs	r3, #75	; 0x4b
 80a01e4:	6013      	str	r3, [r2, #0]
	  		R_command = line_rev;
 80a01e6:	4a1b      	ldr	r2, [pc, #108]	; (80a0254 <_Z8movementi.part.5+0x88>)
 80a01e8:	6013      	str	r3, [r2, #0]
	  		L_dir = 0;
 80a01ea:	4a1b      	ldr	r2, [pc, #108]	; (80a0258 <_Z8movementi.part.5+0x8c>)
 80a01ec:	2300      	movs	r3, #0
 80a01ee:	6013      	str	r3, [r2, #0]
	  		R_dir = 0;
 80a01f0:	4a1a      	ldr	r2, [pc, #104]	; (80a025c <_Z8movementi.part.5+0x90>)
 80a01f2:	6013      	str	r3, [r2, #0]
        Serial.println("Moving backwards a nudge");
 80a01f4:	f003 fd94 	bl	80a3d20 <_Z16_fetch_usbserialv>
 80a01f8:	4919      	ldr	r1, [pc, #100]	; (80a0260 <_Z8movementi.part.5+0x94>)
 80a01fa:	e021      	b.n	80a0240 <_Z8movementi.part.5+0x74>
	    }
	    else if (cur - prevFlag < degrees180) {	// turn cw 180
 80a01fc:	f240 52db 	movw	r2, #1499	; 0x5db
 80a0200:	4293      	cmp	r3, r2
 80a0202:	dc0e      	bgt.n	80a0222 <_Z8movementi.part.5+0x56>
	  		L_command = line_180;
 80a0204:	4a12      	ldr	r2, [pc, #72]	; (80a0250 <_Z8movementi.part.5+0x84>)
 80a0206:	234b      	movs	r3, #75	; 0x4b
 80a0208:	6013      	str	r3, [r2, #0]
	  		R_command = line_180;
 80a020a:	4a12      	ldr	r2, [pc, #72]	; (80a0254 <_Z8movementi.part.5+0x88>)
 80a020c:	6013      	str	r3, [r2, #0]
	  		R_dir = 0;
 80a020e:	4b13      	ldr	r3, [pc, #76]	; (80a025c <_Z8movementi.part.5+0x90>)
 80a0210:	2200      	movs	r2, #0
 80a0212:	601a      	str	r2, [r3, #0]
	  		L_dir = 1;
 80a0214:	4b10      	ldr	r3, [pc, #64]	; (80a0258 <_Z8movementi.part.5+0x8c>)
 80a0216:	2201      	movs	r2, #1
 80a0218:	601a      	str	r2, [r3, #0]
        Serial.println("Turning 180");
 80a021a:	f003 fd81 	bl	80a3d20 <_Z16_fetch_usbserialv>
 80a021e:	4911      	ldr	r1, [pc, #68]	; (80a0264 <_Z8movementi.part.5+0x98>)
 80a0220:	e00e      	b.n	80a0240 <_Z8movementi.part.5+0x74>
	    }
	    else {									// reset line flags & detection flag
        FLflag = true;						// only when movement is FINISHED
 80a0222:	4a11      	ldr	r2, [pc, #68]	; (80a0268 <_Z8movementi.part.5+0x9c>)
 80a0224:	2301      	movs	r3, #1
 80a0226:	7013      	strb	r3, [r2, #0]
        FRflag = true;
 80a0228:	4a10      	ldr	r2, [pc, #64]	; (80a026c <_Z8movementi.part.5+0xa0>)
 80a022a:	7013      	strb	r3, [r2, #0]
	      BLflag = true;
 80a022c:	4a10      	ldr	r2, [pc, #64]	; (80a0270 <_Z8movementi.part.5+0xa4>)
 80a022e:	7013      	strb	r3, [r2, #0]
	      BRflag = true;
 80a0230:	4a10      	ldr	r2, [pc, #64]	; (80a0274 <_Z8movementi.part.5+0xa8>)
 80a0232:	7013      	strb	r3, [r2, #0]
	      prevFlagSet = false;
 80a0234:	4b10      	ldr	r3, [pc, #64]	; (80a0278 <_Z8movementi.part.5+0xac>)
 80a0236:	2200      	movs	r2, #0
 80a0238:	701a      	strb	r2, [r3, #0]
        Serial.println("FINISHED DEALING WITH THE LINE");
 80a023a:	f003 fd71 	bl	80a3d20 <_Z16_fetch_usbserialv>
 80a023e:	490f      	ldr	r1, [pc, #60]	; (80a027c <_Z8movementi.part.5+0xb0>)
  		R_command = 0;
  		R_dir = 1;
  		L_dir = 1;
      Serial.println("Stopped before death");
	}
}
 80a0240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        FLflag = true;						// only when movement is FINISHED
        FRflag = true;
	      BLflag = true;
	      BRflag = true;
	      prevFlagSet = false;
        Serial.println("FINISHED DEALING WITH THE LINE");
 80a0244:	f003 bbd3 	b.w	80a39ee <_ZN5Print7printlnEPKc>
 80a0248:	200003b4 	.word	0x200003b4
 80a024c:	200003cc 	.word	0x200003cc
 80a0250:	200003d4 	.word	0x200003d4
 80a0254:	2000040c 	.word	0x2000040c
 80a0258:	20000320 	.word	0x20000320
 80a025c:	20000304 	.word	0x20000304
 80a0260:	080a53c0 	.word	0x080a53c0
 80a0264:	080a53d9 	.word	0x080a53d9
 80a0268:	20000324 	.word	0x20000324
 80a026c:	20000325 	.word	0x20000325
 80a0270:	20000310 	.word	0x20000310
 80a0274:	2000032c 	.word	0x2000032c
 80a0278:	200003d0 	.word	0x200003d0
 80a027c:	080a53e5 	.word	0x080a53e5

080a0280 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0280:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0282:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0284:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0286:	b113      	cbz	r3, 80a028e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0288:	2203      	movs	r2, #3
 80a028a:	4601      	mov	r1, r0
 80a028c:	4798      	blx	r3
    }
 80a028e:	4620      	mov	r0, r4
 80a0290:	bd10      	pop	{r4, pc}

080a0292 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
 80a0292:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 80a0294:	6880      	ldr	r0, [r0, #8]
 80a0296:	2300      	movs	r3, #0
 80a0298:	b138      	cbz	r0, 80a02aa <_ZN5Timer5_stopEjb+0x18>
 80a029a:	e88d 000a 	stmia.w	sp, {r1, r3}
 80a029e:	2102      	movs	r1, #2
 80a02a0:	f003 f90e 	bl	80a34c0 <os_timer_change>
 80a02a4:	fab0 f080 	clz	r0, r0
 80a02a8:	0940      	lsrs	r0, r0, #5
    }
 80a02aa:	b003      	add	sp, #12
 80a02ac:	f85d fb04 	ldr.w	pc, [sp], #4

080a02b0 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80a02b0:	b538      	push	{r3, r4, r5, lr}
 80a02b2:	4b0e      	ldr	r3, [pc, #56]	; (80a02ec <_ZN5TimerD1Ev+0x3c>)
 80a02b4:	4604      	mov	r4, r0
 80a02b6:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle)
 80a02b8:	6883      	ldr	r3, [r0, #8]
 80a02ba:	b18b      	cbz	r3, 80a02e0 <_ZN5TimerD1Ev+0x30>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a02bc:	2200      	movs	r2, #0
 80a02be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a02c2:	f7ff ffe6 	bl	80a0292 <_ZN5Timer5_stopEjb>
    void dispose()
    {
        if (handle)
        	{
        		stop();
        		while (running) {
 80a02c6:	7923      	ldrb	r3, [r4, #4]
 80a02c8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a02cc:	b11b      	cbz	r3, 80a02d6 <_ZN5TimerD1Ev+0x26>
				delay(1);
 80a02ce:	2001      	movs	r0, #1
 80a02d0:	f003 fbd6 	bl	80a3a80 <delay>
 80a02d4:	e7f7      	b.n	80a02c6 <_ZN5TimerD1Ev+0x16>
			}
        		os_timer_destroy(handle, nullptr);
 80a02d6:	4629      	mov	r1, r5
 80a02d8:	68a0      	ldr	r0, [r4, #8]
 80a02da:	f003 f8e1 	bl	80a34a0 <os_timer_destroy>
            handle = nullptr;
 80a02de:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a02e0:	f104 000c 	add.w	r0, r4, #12
 80a02e4:	f7ff ffcc 	bl	80a0280 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80a02e8:	4620      	mov	r0, r4
 80a02ea:	bd38      	pop	{r3, r4, r5, pc}
 80a02ec:	080a53b4 	.word	0x080a53b4

080a02f0 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80a02f0:	b510      	push	{r4, lr}
 80a02f2:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80a02f4:	f7ff ffdc 	bl	80a02b0 <_ZN5TimerD1Ev>
 80a02f8:	4620      	mov	r0, r4
 80a02fa:	f7ff fed0 	bl	80a009e <_ZdlPv>
 80a02fe:	4620      	mov	r0, r4
 80a0300:	bd10      	pop	{r4, pc}
	...

080a0304 <_Z8tof_initv>:

void RSISR() {
    RSflag = digitalRead(RS);
}

void tof_init() {
 80a0304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pinMode(A0, OUTPUT);
 80a0308:	2101      	movs	r1, #1
 80a030a:	200a      	movs	r0, #10
 80a030c:	f003 fe9e 	bl	80a404c <pinMode>
    pinMode(A1, OUTPUT);
 80a0310:	2101      	movs	r1, #1
 80a0312:	200b      	movs	r0, #11
 80a0314:	f003 fe9a 	bl	80a404c <pinMode>
    pinMode(A2, OUTPUT);
 80a0318:	2101      	movs	r1, #1
 80a031a:	200c      	movs	r0, #12
 80a031c:	f003 fe96 	bl	80a404c <pinMode>
    pinMode(A3, OUTPUT);
 80a0320:	2101      	movs	r1, #1
 80a0322:	200d      	movs	r0, #13
 80a0324:	f003 fe92 	bl	80a404c <pinMode>
    digitalWrite(A0, LOW);
 80a0328:	2100      	movs	r1, #0
 80a032a:	200a      	movs	r0, #10
 80a032c:	f003 fe9f 	bl	80a406e <digitalWrite>
    digitalWrite(A1, LOW);
 80a0330:	2100      	movs	r1, #0
 80a0332:	200b      	movs	r0, #11
 80a0334:	f003 fe9b 	bl	80a406e <digitalWrite>
    digitalWrite(A2, LOW);
 80a0338:	2100      	movs	r1, #0
 80a033a:	200c      	movs	r0, #12
 80a033c:	f003 fe97 	bl	80a406e <digitalWrite>
    digitalWrite(A3, LOW);
 80a0340:	2100      	movs	r1, #0
 80a0342:	200d      	movs	r0, #13
 80a0344:	f003 fe93 	bl	80a406e <digitalWrite>
    delay(500);
 80a0348:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a034c:	f003 fb98 	bl	80a3a80 <delay>

    Wire.setSpeed(CLOCK_SPEED_100KHZ);  // need to initialize i2c protocol after driving shdn pins low
 80a0350:	f003 fef4 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a0354:	4940      	ldr	r1, [pc, #256]	; (80a0458 <_Z8tof_initv+0x154>)
 80a0356:	f003 fe15 	bl	80a3f84 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();
 80a035a:	f003 feef 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a035e:	f003 fe15 	bl	80a3f8c <_ZN7TwoWire5beginEv>

    delay(10);
 80a0362:	200a      	movs	r0, #10
 80a0364:	f003 fb8c 	bl	80a3a80 <delay>
    digitalWrite(A0, HIGH);
 80a0368:	2101      	movs	r1, #1
 80a036a:	200a      	movs	r0, #10
 80a036c:	f003 fe7f 	bl	80a406e <digitalWrite>
    digitalWrite(A1, HIGH);
 80a0370:	2101      	movs	r1, #1
 80a0372:	200b      	movs	r0, #11
 80a0374:	f003 fe7b 	bl	80a406e <digitalWrite>
    digitalWrite(A2, HIGH);
 80a0378:	2101      	movs	r1, #1
 80a037a:	200c      	movs	r0, #12
 80a037c:	f003 fe77 	bl	80a406e <digitalWrite>
    digitalWrite(A3, HIGH);
 80a0380:	2101      	movs	r1, #1
 80a0382:	200d      	movs	r0, #13
 80a0384:	f003 fe73 	bl	80a406e <digitalWrite>
    delay(10);
 80a0388:	200a      	movs	r0, #10
 80a038a:	f003 fb79 	bl	80a3a80 <delay>
    digitalWrite(A1, LOW);
 80a038e:	2100      	movs	r1, #0
 80a0390:	200b      	movs	r0, #11
 80a0392:	f003 fe6c 	bl	80a406e <digitalWrite>
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
 80a0396:	4f31      	ldr	r7, [pc, #196]	; (80a045c <_Z8tof_initv+0x158>)
    digitalWrite(A1, HIGH);
    digitalWrite(A2, HIGH);
    digitalWrite(A3, HIGH);
    delay(10);
    digitalWrite(A1, LOW);
    digitalWrite(A2, LOW);
 80a0398:	2100      	movs	r1, #0
 80a039a:	200c      	movs	r0, #12
 80a039c:	f003 fe67 	bl	80a406e <digitalWrite>
    digitalWrite(A3, LOW);
 80a03a0:	2100      	movs	r1, #0
 80a03a2:	200d      	movs	r0, #13
 80a03a4:	f003 fe63 	bl	80a406e <digitalWrite>
    sensor0.init();
 80a03a8:	2101      	movs	r1, #1
 80a03aa:	4638      	mov	r0, r7
 80a03ac:	f001 fd60 	bl	80a1e70 <_ZN7VL53L0X4initEb>
    void startContinuous(uint32_t period_ms = 0);
    void stopContinuous(void);
    uint16_t readRangeContinuousMillimeters(void);
    uint16_t readRangeSingleMillimeters(void);

    inline void setTimeout(uint16_t timeout) { io_timeout = timeout; }
 80a03b0:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    sensor0.setAddress(0x30);
 80a03b4:	2130      	movs	r1, #48	; 0x30
 80a03b6:	4638      	mov	r0, r7
 80a03b8:	f001 fa0f 	bl	80a17da <_ZN7VL53L0X10setAddressEh>
    sensor0.setTimeout(1000);
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
 80a03bc:	4e28      	ldr	r6, [pc, #160]	; (80a0460 <_Z8tof_initv+0x15c>)
 80a03be:	f8c7 8004 	str.w	r8, [r7, #4]
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
    sensor0.setAddress(0x30);
    sensor0.setTimeout(1000);
    delay(10);
 80a03c2:	200a      	movs	r0, #10
 80a03c4:	f003 fb5c 	bl	80a3a80 <delay>
    digitalWrite(A1, HIGH);
 80a03c8:	2101      	movs	r1, #1
 80a03ca:	200b      	movs	r0, #11
 80a03cc:	f003 fe4f 	bl	80a406e <digitalWrite>
    sensor1.init();
 80a03d0:	2101      	movs	r1, #1
 80a03d2:	4630      	mov	r0, r6
 80a03d4:	f001 fd4c 	bl	80a1e70 <_ZN7VL53L0X4initEb>
    sensor1.setAddress(0x31);
 80a03d8:	2131      	movs	r1, #49	; 0x31
 80a03da:	4630      	mov	r0, r6
 80a03dc:	f001 f9fd 	bl	80a17da <_ZN7VL53L0X10setAddressEh>
    sensor1.setTimeout(1000);
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
 80a03e0:	4d20      	ldr	r5, [pc, #128]	; (80a0464 <_Z8tof_initv+0x160>)
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
    sensor1.setAddress(0x31);
    sensor1.setTimeout(1000);
    delay(10);
 80a03e2:	200a      	movs	r0, #10
 80a03e4:	f8c6 8004 	str.w	r8, [r6, #4]
 80a03e8:	f003 fb4a 	bl	80a3a80 <delay>
    digitalWrite(A2, HIGH);
 80a03ec:	2101      	movs	r1, #1
 80a03ee:	200c      	movs	r0, #12
 80a03f0:	f003 fe3d 	bl	80a406e <digitalWrite>
    sensor2.init();
 80a03f4:	2101      	movs	r1, #1
 80a03f6:	4628      	mov	r0, r5
 80a03f8:	f001 fd3a 	bl	80a1e70 <_ZN7VL53L0X4initEb>
    sensor2.setAddress(0x32);
 80a03fc:	2132      	movs	r1, #50	; 0x32
 80a03fe:	4628      	mov	r0, r5
 80a0400:	f001 f9eb 	bl	80a17da <_ZN7VL53L0X10setAddressEh>
    sensor2.setTimeout(1000);
    delay(10);
    digitalWrite(A3, HIGH);
    sensor3.init();
 80a0404:	4c18      	ldr	r4, [pc, #96]	; (80a0468 <_Z8tof_initv+0x164>)
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
    sensor2.setAddress(0x32);
    sensor2.setTimeout(1000);
    delay(10);
 80a0406:	200a      	movs	r0, #10
 80a0408:	f8c5 8004 	str.w	r8, [r5, #4]
 80a040c:	f003 fb38 	bl	80a3a80 <delay>
    digitalWrite(A3, HIGH);
 80a0410:	2101      	movs	r1, #1
 80a0412:	200d      	movs	r0, #13
 80a0414:	f003 fe2b 	bl	80a406e <digitalWrite>
    sensor3.init();
 80a0418:	2101      	movs	r1, #1
 80a041a:	4620      	mov	r0, r4
 80a041c:	f001 fd28 	bl	80a1e70 <_ZN7VL53L0X4initEb>
    sensor3.setAddress(0x33);
 80a0420:	2133      	movs	r1, #51	; 0x33
 80a0422:	4620      	mov	r0, r4
 80a0424:	f001 f9d9 	bl	80a17da <_ZN7VL53L0X10setAddressEh>
    sensor3.setTimeout(1000);
    delay(10);
 80a0428:	200a      	movs	r0, #10
 80a042a:	f8c4 8004 	str.w	r8, [r4, #4]
 80a042e:	f003 fb27 	bl	80a3a80 <delay>

    // Start continuous back-to-back mode (take readings as
    // fast as possible).  To use continuous timed mode
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
 80a0432:	4638      	mov	r0, r7
 80a0434:	210a      	movs	r1, #10
 80a0436:	f001 faee 	bl	80a1a16 <_ZN7VL53L0X15startContinuousEm>
    sensor1.startContinuous(10);
 80a043a:	4630      	mov	r0, r6
 80a043c:	210a      	movs	r1, #10
 80a043e:	f001 faea 	bl	80a1a16 <_ZN7VL53L0X15startContinuousEm>
    sensor2.startContinuous(10);
 80a0442:	4628      	mov	r0, r5
 80a0444:	210a      	movs	r1, #10
 80a0446:	f001 fae6 	bl	80a1a16 <_ZN7VL53L0X15startContinuousEm>
    sensor3.startContinuous(10);			
 80a044a:	4620      	mov	r0, r4
}
 80a044c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
    sensor1.startContinuous(10);
    sensor2.startContinuous(10);
    sensor3.startContinuous(10);			
 80a0450:	210a      	movs	r1, #10
 80a0452:	f001 bae0 	b.w	80a1a16 <_ZN7VL53L0X15startContinuousEm>
 80a0456:	bf00      	nop
 80a0458:	000186a0 	.word	0x000186a0
 80a045c:	2000036c 	.word	0x2000036c
 80a0460:	200003ec 	.word	0x200003ec
 80a0464:	20000384 	.word	0x20000384
 80a0468:	2000039c 	.word	0x2000039c

080a046c <_Z10accel_initv>:
}

void accel_init() {
 80a046c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  LIS3DHConfig config;
 80a046e:	a801      	add	r0, sp, #4
 80a0470:	f001 ffd3 	bl	80a241a <_ZN12LIS3DHConfigC1Ev>
  config.setAccelMode(LIS3DH::RATE_400_HZ);
 80a0474:	2170      	movs	r1, #112	; 0x70
 80a0476:	a801      	add	r0, sp, #4
 80a0478:	f001 ffdc 	bl	80a2434 <_ZN12LIS3DHConfig12setAccelModeEh>
  accel.setup(config);
 80a047c:	a901      	add	r1, sp, #4
 80a047e:	4803      	ldr	r0, [pc, #12]	; (80a048c <_Z10accel_initv+0x20>)
 80a0480:	f002 f830 	bl	80a24e4 <_ZN6LIS3DH5setupER12LIS3DHConfig>
}
 80a0484:	b005      	add	sp, #20
 80a0486:	f85d fb04 	ldr.w	pc, [sp], #4
 80a048a:	bf00      	nop
 80a048c:	20000354 	.word	0x20000354

080a0490 <_Z11others_initv>:

void others_init() {
 80a0490:	b508      	push	{r3, lr}
	// Line sensors
  	pinMode(FL, INPUT);
 80a0492:	4b15      	ldr	r3, [pc, #84]	; (80a04e8 <_Z11others_initv+0x58>)
 80a0494:	2100      	movs	r1, #0
 80a0496:	8818      	ldrh	r0, [r3, #0]
 80a0498:	f003 fdd8 	bl	80a404c <pinMode>
  	pinMode(FR, INPUT);
 80a049c:	4b13      	ldr	r3, [pc, #76]	; (80a04ec <_Z11others_initv+0x5c>)
 80a049e:	2100      	movs	r1, #0
 80a04a0:	8818      	ldrh	r0, [r3, #0]
 80a04a2:	f003 fdd3 	bl	80a404c <pinMode>
  	pinMode(BL, INPUT);
 80a04a6:	4b12      	ldr	r3, [pc, #72]	; (80a04f0 <_Z11others_initv+0x60>)
 80a04a8:	2100      	movs	r1, #0
 80a04aa:	8818      	ldrh	r0, [r3, #0]
 80a04ac:	f003 fdce 	bl	80a404c <pinMode>
  	pinMode(BR, INPUT);
 80a04b0:	4b10      	ldr	r3, [pc, #64]	; (80a04f4 <_Z11others_initv+0x64>)
 80a04b2:	2100      	movs	r1, #0
 80a04b4:	8818      	ldrh	r0, [r3, #0]
 80a04b6:	f003 fdc9 	bl	80a404c <pinMode>
  	// Remote switch
  	pinMode(RS, INPUT);
 80a04ba:	4b0f      	ldr	r3, [pc, #60]	; (80a04f8 <_Z11others_initv+0x68>)
 80a04bc:	2100      	movs	r1, #0
 80a04be:	8818      	ldrh	r0, [r3, #0]
 80a04c0:	f003 fdc4 	bl	80a404c <pinMode>
  	// Car ESCs
  	pinMode(Lmotor, OUTPUT);
 80a04c4:	4b0d      	ldr	r3, [pc, #52]	; (80a04fc <_Z11others_initv+0x6c>)
 80a04c6:	2101      	movs	r1, #1
 80a04c8:	8818      	ldrh	r0, [r3, #0]
 80a04ca:	f003 fdbf 	bl	80a404c <pinMode>
  	pinMode(Rmotor, OUTPUT);
 80a04ce:	4b0c      	ldr	r3, [pc, #48]	; (80a0500 <_Z11others_initv+0x70>)
 80a04d0:	2101      	movs	r1, #1
 80a04d2:	8818      	ldrh	r0, [r3, #0]
 80a04d4:	f003 fdba 	bl	80a404c <pinMode>

  	// ***Remove for competition***
  	// ***Serial monitor***
  	Serial.begin(9600);	// *** need to modify before comp ***
 80a04d8:	f003 fc22 	bl	80a3d20 <_Z16_fetch_usbserialv>
}
 80a04dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  	pinMode(Lmotor, OUTPUT);
  	pinMode(Rmotor, OUTPUT);

  	// ***Remove for competition***
  	// ***Serial monitor***
  	Serial.begin(9600);	// *** need to modify before comp ***
 80a04e0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a04e4:	f003 bc02 	b.w	80a3cec <_ZN9USBSerial5beginEl>
 80a04e8:	2000031c 	.word	0x2000031c
 80a04ec:	2000030c 	.word	0x2000030c
 80a04f0:	20000314 	.word	0x20000314
 80a04f4:	20000318 	.word	0x20000318
 80a04f8:	20000300 	.word	0x20000300
 80a04fc:	20000328 	.word	0x20000328
 80a0500:	20000308 	.word	0x20000308

080a0504 <_Z14interrupt_initv>:
}

void interrupt_init() {
 80a0504:	b530      	push	{r4, r5, lr}
	// Line sensors
  	attachInterrupt(FL, FLISR, CHANGE);
 80a0506:	4b36      	ldr	r3, [pc, #216]	; (80a05e0 <_Z14interrupt_initv+0xdc>)
  	// ***Remove for competition***
  	// ***Serial monitor***
  	Serial.begin(9600);	// *** need to modify before comp ***
}

void interrupt_init() {
 80a0508:	b091      	sub	sp, #68	; 0x44
	// Line sensors
  	attachInterrupt(FL, FLISR, CHANGE);
 80a050a:	2400      	movs	r4, #0
 80a050c:	8818      	ldrh	r0, [r3, #0]
 80a050e:	4622      	mov	r2, r4
 80a0510:	f04f 33ff 	mov.w	r3, #4294967295
 80a0514:	4933      	ldr	r1, [pc, #204]	; (80a05e4 <_Z14interrupt_initv+0xe0>)
 80a0516:	9400      	str	r4, [sp, #0]
 80a0518:	f003 fc66 	bl	80a3de8 <_Z15attachInterrupttPFvvE13InterruptModeah>
  	attachInterrupt(FR, FRISR, CHANGE);
 80a051c:	4b32      	ldr	r3, [pc, #200]	; (80a05e8 <_Z14interrupt_initv+0xe4>)
 80a051e:	4622      	mov	r2, r4
 80a0520:	8818      	ldrh	r0, [r3, #0]
 80a0522:	4932      	ldr	r1, [pc, #200]	; (80a05ec <_Z14interrupt_initv+0xe8>)
 80a0524:	f04f 33ff 	mov.w	r3, #4294967295
 80a0528:	9400      	str	r4, [sp, #0]
 80a052a:	f003 fc5d 	bl	80a3de8 <_Z15attachInterrupttPFvvE13InterruptModeah>
  	attachInterrupt(BL, BLISR, CHANGE);
 80a052e:	4b30      	ldr	r3, [pc, #192]	; (80a05f0 <_Z14interrupt_initv+0xec>)
 80a0530:	4622      	mov	r2, r4
 80a0532:	8818      	ldrh	r0, [r3, #0]
 80a0534:	492f      	ldr	r1, [pc, #188]	; (80a05f4 <_Z14interrupt_initv+0xf0>)
 80a0536:	f04f 33ff 	mov.w	r3, #4294967295
 80a053a:	9400      	str	r4, [sp, #0]
 80a053c:	f003 fc54 	bl	80a3de8 <_Z15attachInterrupttPFvvE13InterruptModeah>
  	attachInterrupt(BR, BRISR, CHANGE);
 80a0540:	4b2d      	ldr	r3, [pc, #180]	; (80a05f8 <_Z14interrupt_initv+0xf4>)
 80a0542:	4622      	mov	r2, r4
 80a0544:	8818      	ldrh	r0, [r3, #0]
 80a0546:	492d      	ldr	r1, [pc, #180]	; (80a05fc <_Z14interrupt_initv+0xf8>)
 80a0548:	f04f 33ff 	mov.w	r3, #4294967295
 80a054c:	9400      	str	r4, [sp, #0]
 80a054e:	f003 fc4b 	bl	80a3de8 <_Z15attachInterrupttPFvvE13InterruptModeah>
  	// Remote switch
  	attachInterrupt(RS, RSISR, CHANGE);
 80a0552:	4b2b      	ldr	r3, [pc, #172]	; (80a0600 <_Z14interrupt_initv+0xfc>)
 80a0554:	4622      	mov	r2, r4
 80a0556:	8818      	ldrh	r0, [r3, #0]
 80a0558:	492a      	ldr	r1, [pc, #168]	; (80a0604 <_Z14interrupt_initv+0x100>)
 80a055a:	f04f 33ff 	mov.w	r3, #4294967295
 80a055e:	9400      	str	r4, [sp, #0]
 80a0560:	f003 fc42 	bl	80a3de8 <_Z15attachInterrupttPFvvE13InterruptModeah>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a0564:	4b28      	ldr	r3, [pc, #160]	; (80a0608 <_Z14interrupt_initv+0x104>)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0566:	aa03      	add	r2, sp, #12
 80a0568:	9305      	str	r3, [sp, #20]
 80a056a:	ad05      	add	r5, sp, #20
 80a056c:	e895 0003 	ldmia.w	r5, {r0, r1}
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80a0570:	4b26      	ldr	r3, [pc, #152]	; (80a060c <_Z14interrupt_initv+0x108>)
 80a0572:	e882 0003 	stmia.w	r2, {r0, r1}
 80a0576:	9309      	str	r3, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 80a0578:	ab0c      	add	r3, sp, #48	; 0x30
 80a057a:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a057e:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0582:	e892 0003 	ldmia.w	r2, {r0, r1}
 80a0586:	e883 0003 	stmia.w	r3, {r0, r1}
 80a058a:	4b21      	ldr	r3, [pc, #132]	; (80a0610 <_Z14interrupt_initv+0x10c>)
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 80a058c:	4a21      	ldr	r2, [pc, #132]	; (80a0614 <_Z14interrupt_initv+0x110>)
 80a058e:	930e      	str	r3, [sp, #56]	; 0x38
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0590:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a0592:	2164      	movs	r1, #100	; 0x64
 80a0594:	9308      	str	r3, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0596:	4b20      	ldr	r3, [pc, #128]	; (80a0618 <_Z14interrupt_initv+0x114>)
 80a0598:	9401      	str	r4, [sp, #4]
 80a059a:	930f      	str	r3, [sp, #60]	; 0x3c
 80a059c:	9400      	str	r4, [sp, #0]
 80a059e:	ab09      	add	r3, sp, #36	; 0x24
 80a05a0:	a80b      	add	r0, sp, #44	; 0x2c
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80a05a2:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
 80a05a6:	940b      	str	r4, [sp, #44]	; 0x2c
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a05a8:	9407      	str	r4, [sp, #28]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 80a05aa:	f002 ff71 	bl	80a3490 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a05ae:	4628      	mov	r0, r5
 80a05b0:	f7ff fe66 	bl	80a0280 <_ZNSt14_Function_baseD1Ev>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a05b4:	4622      	mov	r2, r4
 80a05b6:	4621      	mov	r1, r4
 80a05b8:	a809      	add	r0, sp, #36	; 0x24
 80a05ba:	f7ff fe6a 	bl	80a0292 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 80a05be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a05c0:	b140      	cbz	r0, 80a05d4 <_Z14interrupt_initv+0xd0>
 80a05c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80a05c6:	9300      	str	r3, [sp, #0]
 80a05c8:	9401      	str	r4, [sp, #4]
 80a05ca:	4623      	mov	r3, r4
 80a05cc:	4622      	mov	r2, r4
 80a05ce:	4621      	mov	r1, r4
 80a05d0:	f002 ff76 	bl	80a34c0 <os_timer_change>
  	// Accel software timer
  	Timer accelTimer(PRINT_SAMPLE_PERIOD, getAccel); 
 80a05d4:	a809      	add	r0, sp, #36	; 0x24
 80a05d6:	f7ff fe6b 	bl	80a02b0 <_ZN5TimerD1Ev>
  	accelTimer.start();  
}
 80a05da:	b011      	add	sp, #68	; 0x44
 80a05dc:	bd30      	pop	{r4, r5, pc}
 80a05de:	bf00      	nop
 80a05e0:	2000031c 	.word	0x2000031c
 80a05e4:	080a00d1 	.word	0x080a00d1
 80a05e8:	2000030c 	.word	0x2000030c
 80a05ec:	080a00f1 	.word	0x080a00f1
 80a05f0:	20000314 	.word	0x20000314
 80a05f4:	080a0111 	.word	0x080a0111
 80a05f8:	20000318 	.word	0x20000318
 80a05fc:	080a0131 	.word	0x080a0131
 80a0600:	20000300 	.word	0x20000300
 80a0604:	080a0151 	.word	0x080a0151
 80a0608:	080a01a9 	.word	0x080a01a9
 80a060c:	080a53b4 	.word	0x080a53b4
 80a0610:	080a00b7 	.word	0x080a00b7
 80a0614:	080a0171 	.word	0x080a0171
 80a0618:	080a00b3 	.word	0x080a00b3

080a061c <_Z8ESC_initv>:

void ESC_init() {
 80a061c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  	// Necessary for Servo objects
  	LESC.attach(Lmotor);
 80a061e:	4b13      	ldr	r3, [pc, #76]	; (80a066c <_Z8ESC_initv+0x50>)
 80a0620:	4d13      	ldr	r5, [pc, #76]	; (80a0670 <_Z8ESC_initv+0x54>)
 80a0622:	2600      	movs	r6, #0
 80a0624:	27b4      	movs	r7, #180	; 0xb4
 80a0626:	8819      	ldrh	r1, [r3, #0]
 80a0628:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a062c:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80a0630:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a0634:	4628      	mov	r0, r5
 80a0636:	f003 f908 	bl	80a384a <_ZN5Servo6attachEtttss>
  	RESC.attach(Rmotor);
 80a063a:	4c0e      	ldr	r4, [pc, #56]	; (80a0674 <_Z8ESC_initv+0x58>)
 80a063c:	4b0e      	ldr	r3, [pc, #56]	; (80a0678 <_Z8ESC_initv+0x5c>)
 80a063e:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a0642:	8819      	ldrh	r1, [r3, #0]
 80a0644:	4620      	mov	r0, r4
 80a0646:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a064a:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80a064e:	f003 f8fc 	bl	80a384a <_ZN5Servo6attachEtttss>
  	// Write stop command
  	LESC.writeMicroseconds(1500);
 80a0652:	4628      	mov	r0, r5
 80a0654:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a0658:	f003 f8c3 	bl	80a37e2 <_ZN5Servo17writeMicrosecondsEt>
  	RESC.writeMicroseconds(1500);
 80a065c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a0660:	4620      	mov	r0, r4
}
 80a0662:	b003      	add	sp, #12
 80a0664:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  	// Necessary for Servo objects
  	LESC.attach(Lmotor);
  	RESC.attach(Rmotor);
  	// Write stop command
  	LESC.writeMicroseconds(1500);
  	RESC.writeMicroseconds(1500);
 80a0668:	f003 b8bb 	b.w	80a37e2 <_ZN5Servo17writeMicrosecondsEt>
 80a066c:	20000328 	.word	0x20000328
 80a0670:	20000344 	.word	0x20000344
 80a0674:	200003b8 	.word	0x200003b8
 80a0678:	20000308 	.word	0x20000308

080a067c <_Z9line_initv>:
}

void line_init() {
 80a067c:	b508      	push	{r3, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a067e:	f002 feff 	bl	80a3480 <HAL_Timer_Get_Milli_Seconds>
	// moving = true;
	prevFlag = millis();
 80a0682:	4b01      	ldr	r3, [pc, #4]	; (80a0688 <_Z9line_initv+0xc>)
 80a0684:	6018      	str	r0, [r3, #0]
 80a0686:	bd08      	pop	{r3, pc}
 80a0688:	200003b4 	.word	0x200003b4

080a068c <_Z10robot_initv>:
}

void robot_init() {
 80a068c:	b510      	push	{r4, lr}
  while(RSflag == LOW) {    // initial LOW
 80a068e:	4c0c      	ldr	r4, [pc, #48]	; (80a06c0 <_Z10robot_initv+0x34>)
 80a0690:	7823      	ldrb	r3, [r4, #0]
 80a0692:	b92b      	cbnz	r3, 80a06a0 <_Z10robot_initv+0x14>
    Serial.println("Waiting for Start");
 80a0694:	f003 fb44 	bl	80a3d20 <_Z16_fetch_usbserialv>
 80a0698:	490a      	ldr	r1, [pc, #40]	; (80a06c4 <_Z10robot_initv+0x38>)
 80a069a:	f003 f9a8 	bl	80a39ee <_ZN5Print7printlnEPKc>
	// moving = true;
	prevFlag = millis();
}

void robot_init() {
  while(RSflag == LOW) {    // initial LOW
 80a069e:	e7f7      	b.n	80a0690 <_Z10robot_initv+0x4>
    Serial.println("Waiting for Start");
  }
  Serial.println("Starting in 5 seconds...");
 80a06a0:	f003 fb3e 	bl	80a3d20 <_Z16_fetch_usbserialv>
 80a06a4:	4908      	ldr	r1, [pc, #32]	; (80a06c8 <_Z10robot_initv+0x3c>)
 80a06a6:	f003 f9a2 	bl	80a39ee <_ZN5Print7printlnEPKc>
  delay(5000);
 80a06aa:	f241 3088 	movw	r0, #5000	; 0x1388
 80a06ae:	f003 f9e7 	bl	80a3a80 <delay>
  Serial.println("GO!");    
 80a06b2:	f003 fb35 	bl	80a3d20 <_Z16_fetch_usbserialv>
}
 80a06b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  while(RSflag == LOW) {    // initial LOW
    Serial.println("Waiting for Start");
  }
  Serial.println("Starting in 5 seconds...");
  delay(5000);
  Serial.println("GO!");    
 80a06ba:	4904      	ldr	r1, [pc, #16]	; (80a06cc <_Z10robot_initv+0x40>)
 80a06bc:	f003 b997 	b.w	80a39ee <_ZN5Print7printlnEPKc>
 80a06c0:	2000033e 	.word	0x2000033e
 80a06c4:	080a5404 	.word	0x080a5404
 80a06c8:	080a5416 	.word	0x080a5416
 80a06cc:	080a542f 	.word	0x080a542f

080a06d0 <_Z10fuzzy_initv>:
}

void fuzzy_init() {
 80a06d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // low = far, high = close

  // INPUT: 1 of 4
  FuzzyInput* LL_input = new FuzzyInput(1);
 80a06d4:	2010      	movs	r0, #16
  Serial.println("Starting in 5 seconds...");
  delay(5000);
  Serial.println("GO!");    
}

void fuzzy_init() {
 80a06d6:	b099      	sub	sp, #100	; 0x64
  // low = far, high = close

  // INPUT: 1 of 4
  FuzzyInput* LL_input = new FuzzyInput(1);
 80a06d8:	f7ff fcdf 	bl	80a009a <_Znwj>
 80a06dc:	4605      	mov	r5, r0
 80a06de:	b110      	cbz	r0, 80a06e6 <_Z10fuzzy_initv+0x16>
 80a06e0:	2101      	movs	r1, #1
 80a06e2:	f002 f99c 	bl	80a2a1e <_ZN10FuzzyInputC1Ei>
  FuzzySet* LL_low = new FuzzySet(low1, low2, low3, low4);
 80a06e6:	2014      	movs	r0, #20
 80a06e8:	f7ff fcd7 	bl	80a009a <_Znwj>
 80a06ec:	4606      	mov	r6, r0
 80a06ee:	b138      	cbz	r0, 80a0700 <_Z10fuzzy_initv+0x30>
 80a06f0:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 80a06f4:	9300      	str	r3, [sp, #0]
 80a06f6:	4aa6      	ldr	r2, [pc, #664]	; (80a0990 <_Z10fuzzy_initv+0x2c0>)
 80a06f8:	4ba6      	ldr	r3, [pc, #664]	; (80a0994 <_Z10fuzzy_initv+0x2c4>)
 80a06fa:	49a7      	ldr	r1, [pc, #668]	; (80a0998 <_Z10fuzzy_initv+0x2c8>)
 80a06fc:	f002 fc0b 	bl	80a2f16 <_ZN8FuzzySetC1Effff>
  FuzzySet* LL_med = new FuzzySet(med1, med2, med3, med4);
 80a0700:	2014      	movs	r0, #20
 80a0702:	f7ff fcca 	bl	80a009a <_Znwj>
 80a0706:	4681      	mov	r9, r0
 80a0708:	b130      	cbz	r0, 80a0718 <_Z10fuzzy_initv+0x48>
 80a070a:	4ba4      	ldr	r3, [pc, #656]	; (80a099c <_Z10fuzzy_initv+0x2cc>)
 80a070c:	4aa4      	ldr	r2, [pc, #656]	; (80a09a0 <_Z10fuzzy_initv+0x2d0>)
 80a070e:	9300      	str	r3, [sp, #0]
 80a0710:	49a4      	ldr	r1, [pc, #656]	; (80a09a4 <_Z10fuzzy_initv+0x2d4>)
 80a0712:	4ba5      	ldr	r3, [pc, #660]	; (80a09a8 <_Z10fuzzy_initv+0x2d8>)
 80a0714:	f002 fbff 	bl	80a2f16 <_ZN8FuzzySetC1Effff>
  FuzzySet* LL_high = new FuzzySet(high1, high2, high3, high4);
 80a0718:	2014      	movs	r0, #20
 80a071a:	f7ff fcbe 	bl	80a009a <_Znwj>
 80a071e:	4680      	mov	r8, r0
 80a0720:	b130      	cbz	r0, 80a0730 <_Z10fuzzy_initv+0x60>
 80a0722:	4ba2      	ldr	r3, [pc, #648]	; (80a09ac <_Z10fuzzy_initv+0x2dc>)
 80a0724:	4aa2      	ldr	r2, [pc, #648]	; (80a09b0 <_Z10fuzzy_initv+0x2e0>)
 80a0726:	9300      	str	r3, [sp, #0]
 80a0728:	2100      	movs	r1, #0
 80a072a:	4ba2      	ldr	r3, [pc, #648]	; (80a09b4 <_Z10fuzzy_initv+0x2e4>)
 80a072c:	f002 fbf3 	bl	80a2f16 <_ZN8FuzzySetC1Effff>
  LL_input->addFuzzySet(LL_low);
 80a0730:	4631      	mov	r1, r6
 80a0732:	4628      	mov	r0, r5
 80a0734:	f002 f98f 	bl	80a2a56 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  LL_input->addFuzzySet(LL_med);
  LL_input->addFuzzySet(LL_high);
  fuzzy->addFuzzyInput(LL_input);
 80a0738:	4c9f      	ldr	r4, [pc, #636]	; (80a09b8 <_Z10fuzzy_initv+0x2e8>)
  FuzzyInput* LL_input = new FuzzyInput(1);
  FuzzySet* LL_low = new FuzzySet(low1, low2, low3, low4);
  FuzzySet* LL_med = new FuzzySet(med1, med2, med3, med4);
  FuzzySet* LL_high = new FuzzySet(high1, high2, high3, high4);
  LL_input->addFuzzySet(LL_low);
  LL_input->addFuzzySet(LL_med);
 80a073a:	4649      	mov	r1, r9
 80a073c:	4628      	mov	r0, r5
 80a073e:	f002 f98a 	bl	80a2a56 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  LL_input->addFuzzySet(LL_high);
 80a0742:	4641      	mov	r1, r8
 80a0744:	4628      	mov	r0, r5
 80a0746:	f002 f986 	bl	80a2a56 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyInput(LL_input);
 80a074a:	4629      	mov	r1, r5
 80a074c:	6820      	ldr	r0, [r4, #0]
 80a074e:	f002 fcb6 	bl	80a30be <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>

  // INPUT: 2 of 4
  FuzzyInput* LM_input = new FuzzyInput(2);
 80a0752:	2010      	movs	r0, #16
 80a0754:	f7ff fca1 	bl	80a009a <_Znwj>
 80a0758:	4605      	mov	r5, r0
 80a075a:	b110      	cbz	r0, 80a0762 <_Z10fuzzy_initv+0x92>
 80a075c:	2102      	movs	r1, #2
 80a075e:	f002 f95e 	bl	80a2a1e <_ZN10FuzzyInputC1Ei>
  FuzzySet* LM_low = new FuzzySet(low1, low2, low3, low4);
 80a0762:	2014      	movs	r0, #20
 80a0764:	f7ff fc99 	bl	80a009a <_Znwj>
 80a0768:	4607      	mov	r7, r0
 80a076a:	b138      	cbz	r0, 80a077c <_Z10fuzzy_initv+0xac>
 80a076c:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 80a0770:	9300      	str	r3, [sp, #0]
 80a0772:	4a87      	ldr	r2, [pc, #540]	; (80a0990 <_Z10fuzzy_initv+0x2c0>)
 80a0774:	4b87      	ldr	r3, [pc, #540]	; (80a0994 <_Z10fuzzy_initv+0x2c4>)
 80a0776:	4988      	ldr	r1, [pc, #544]	; (80a0998 <_Z10fuzzy_initv+0x2c8>)
 80a0778:	f002 fbcd 	bl	80a2f16 <_ZN8FuzzySetC1Effff>
  FuzzySet* LM_med = new FuzzySet(med1, med2, med3, med4);
 80a077c:	2014      	movs	r0, #20
 80a077e:	f7ff fc8c 	bl	80a009a <_Znwj>
 80a0782:	4682      	mov	sl, r0
 80a0784:	b130      	cbz	r0, 80a0794 <_Z10fuzzy_initv+0xc4>
 80a0786:	4b85      	ldr	r3, [pc, #532]	; (80a099c <_Z10fuzzy_initv+0x2cc>)
 80a0788:	4a85      	ldr	r2, [pc, #532]	; (80a09a0 <_Z10fuzzy_initv+0x2d0>)
 80a078a:	9300      	str	r3, [sp, #0]
 80a078c:	4985      	ldr	r1, [pc, #532]	; (80a09a4 <_Z10fuzzy_initv+0x2d4>)
 80a078e:	4b86      	ldr	r3, [pc, #536]	; (80a09a8 <_Z10fuzzy_initv+0x2d8>)
 80a0790:	f002 fbc1 	bl	80a2f16 <_ZN8FuzzySetC1Effff>
  FuzzySet* LM_high = new FuzzySet(high1, high2, high3, high4);
 80a0794:	2014      	movs	r0, #20
 80a0796:	f7ff fc80 	bl	80a009a <_Znwj>
 80a079a:	4683      	mov	fp, r0
 80a079c:	b130      	cbz	r0, 80a07ac <_Z10fuzzy_initv+0xdc>
 80a079e:	4b83      	ldr	r3, [pc, #524]	; (80a09ac <_Z10fuzzy_initv+0x2dc>)
 80a07a0:	4a83      	ldr	r2, [pc, #524]	; (80a09b0 <_Z10fuzzy_initv+0x2e0>)
 80a07a2:	9300      	str	r3, [sp, #0]
 80a07a4:	2100      	movs	r1, #0
 80a07a6:	4b83      	ldr	r3, [pc, #524]	; (80a09b4 <_Z10fuzzy_initv+0x2e4>)
 80a07a8:	f002 fbb5 	bl	80a2f16 <_ZN8FuzzySetC1Effff>
  LM_input->addFuzzySet(LM_low);
 80a07ac:	4639      	mov	r1, r7
 80a07ae:	4628      	mov	r0, r5
 80a07b0:	f002 f951 	bl	80a2a56 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  LM_input->addFuzzySet(LM_med);
 80a07b4:	4651      	mov	r1, sl
 80a07b6:	4628      	mov	r0, r5
 80a07b8:	f002 f94d 	bl	80a2a56 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  LM_input->addFuzzySet(LM_high);
 80a07bc:	4659      	mov	r1, fp
 80a07be:	4628      	mov	r0, r5
 80a07c0:	f002 f949 	bl	80a2a56 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyInput(LM_input);
 80a07c4:	4629      	mov	r1, r5
 80a07c6:	6820      	ldr	r0, [r4, #0]
 80a07c8:	f002 fc79 	bl	80a30be <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>

  // INPUT: 3 of 4
  FuzzyInput* RM_input = new FuzzyInput(3);
 80a07cc:	2010      	movs	r0, #16
 80a07ce:	f7ff fc64 	bl	80a009a <_Znwj>
 80a07d2:	4605      	mov	r5, r0
 80a07d4:	b110      	cbz	r0, 80a07dc <_Z10fuzzy_initv+0x10c>
 80a07d6:	2103      	movs	r1, #3
 80a07d8:	f002 f921 	bl	80a2a1e <_ZN10FuzzyInputC1Ei>
  FuzzySet* RM_low = new FuzzySet(low1, low2, low3, low4);
 80a07dc:	2014      	movs	r0, #20
 80a07de:	f7ff fc5c 	bl	80a009a <_Znwj>
 80a07e2:	9007      	str	r0, [sp, #28]
 80a07e4:	b138      	cbz	r0, 80a07f6 <_Z10fuzzy_initv+0x126>
 80a07e6:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 80a07ea:	9300      	str	r3, [sp, #0]
 80a07ec:	4a68      	ldr	r2, [pc, #416]	; (80a0990 <_Z10fuzzy_initv+0x2c0>)
 80a07ee:	4b69      	ldr	r3, [pc, #420]	; (80a0994 <_Z10fuzzy_initv+0x2c4>)
 80a07f0:	4969      	ldr	r1, [pc, #420]	; (80a0998 <_Z10fuzzy_initv+0x2c8>)
 80a07f2:	f002 fb90 	bl	80a2f16 <_ZN8FuzzySetC1Effff>
  FuzzySet* RM_med = new FuzzySet(med1, med2, med3, med4);
 80a07f6:	2014      	movs	r0, #20
 80a07f8:	f7ff fc4f 	bl	80a009a <_Znwj>
 80a07fc:	9008      	str	r0, [sp, #32]
 80a07fe:	b130      	cbz	r0, 80a080e <_Z10fuzzy_initv+0x13e>
 80a0800:	4b66      	ldr	r3, [pc, #408]	; (80a099c <_Z10fuzzy_initv+0x2cc>)
 80a0802:	4a67      	ldr	r2, [pc, #412]	; (80a09a0 <_Z10fuzzy_initv+0x2d0>)
 80a0804:	9300      	str	r3, [sp, #0]
 80a0806:	4967      	ldr	r1, [pc, #412]	; (80a09a4 <_Z10fuzzy_initv+0x2d4>)
 80a0808:	4b67      	ldr	r3, [pc, #412]	; (80a09a8 <_Z10fuzzy_initv+0x2d8>)
 80a080a:	f002 fb84 	bl	80a2f16 <_ZN8FuzzySetC1Effff>
  FuzzySet* RM_high = new FuzzySet(high1, high2, high3, high4);
 80a080e:	2014      	movs	r0, #20
 80a0810:	f7ff fc43 	bl	80a009a <_Znwj>
 80a0814:	9009      	str	r0, [sp, #36]	; 0x24
 80a0816:	b130      	cbz	r0, 80a0826 <_Z10fuzzy_initv+0x156>
 80a0818:	4b64      	ldr	r3, [pc, #400]	; (80a09ac <_Z10fuzzy_initv+0x2dc>)
 80a081a:	4a65      	ldr	r2, [pc, #404]	; (80a09b0 <_Z10fuzzy_initv+0x2e0>)
 80a081c:	9300      	str	r3, [sp, #0]
 80a081e:	2100      	movs	r1, #0
 80a0820:	4b64      	ldr	r3, [pc, #400]	; (80a09b4 <_Z10fuzzy_initv+0x2e4>)
 80a0822:	f002 fb78 	bl	80a2f16 <_ZN8FuzzySetC1Effff>
  RM_input->addFuzzySet(RM_low);
 80a0826:	9907      	ldr	r1, [sp, #28]
 80a0828:	4628      	mov	r0, r5
 80a082a:	f002 f914 	bl	80a2a56 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  RM_input->addFuzzySet(RM_med);
 80a082e:	9908      	ldr	r1, [sp, #32]
 80a0830:	4628      	mov	r0, r5
 80a0832:	f002 f910 	bl	80a2a56 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  RM_input->addFuzzySet(RM_high);
 80a0836:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0838:	4628      	mov	r0, r5
 80a083a:	f002 f90c 	bl	80a2a56 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyInput(RM_input);
 80a083e:	4629      	mov	r1, r5
 80a0840:	6820      	ldr	r0, [r4, #0]
 80a0842:	f002 fc3c 	bl	80a30be <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>

  // INPUT: 4 of 4
  FuzzyInput* RR_input = new FuzzyInput(4);
 80a0846:	2010      	movs	r0, #16
 80a0848:	f7ff fc27 	bl	80a009a <_Znwj>
 80a084c:	4604      	mov	r4, r0
 80a084e:	b110      	cbz	r0, 80a0856 <_Z10fuzzy_initv+0x186>
 80a0850:	2104      	movs	r1, #4
 80a0852:	f002 f8e4 	bl	80a2a1e <_ZN10FuzzyInputC1Ei>
  FuzzySet* RR_low = new FuzzySet(low1, low2, low3, low4);
 80a0856:	2014      	movs	r0, #20
 80a0858:	f7ff fc1f 	bl	80a009a <_Znwj>
 80a085c:	4605      	mov	r5, r0
 80a085e:	b138      	cbz	r0, 80a0870 <_Z10fuzzy_initv+0x1a0>
 80a0860:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 80a0864:	9300      	str	r3, [sp, #0]
 80a0866:	4a4a      	ldr	r2, [pc, #296]	; (80a0990 <_Z10fuzzy_initv+0x2c0>)
 80a0868:	4b4a      	ldr	r3, [pc, #296]	; (80a0994 <_Z10fuzzy_initv+0x2c4>)
 80a086a:	494b      	ldr	r1, [pc, #300]	; (80a0998 <_Z10fuzzy_initv+0x2c8>)
 80a086c:	f002 fb53 	bl	80a2f16 <_ZN8FuzzySetC1Effff>
  FuzzySet* RR_med = new FuzzySet(med1, med2, med3, med4);
 80a0870:	2014      	movs	r0, #20
 80a0872:	f7ff fc12 	bl	80a009a <_Znwj>
 80a0876:	900a      	str	r0, [sp, #40]	; 0x28
 80a0878:	b130      	cbz	r0, 80a0888 <_Z10fuzzy_initv+0x1b8>
 80a087a:	4b48      	ldr	r3, [pc, #288]	; (80a099c <_Z10fuzzy_initv+0x2cc>)
 80a087c:	4a48      	ldr	r2, [pc, #288]	; (80a09a0 <_Z10fuzzy_initv+0x2d0>)
 80a087e:	9300      	str	r3, [sp, #0]
 80a0880:	4948      	ldr	r1, [pc, #288]	; (80a09a4 <_Z10fuzzy_initv+0x2d4>)
 80a0882:	4b49      	ldr	r3, [pc, #292]	; (80a09a8 <_Z10fuzzy_initv+0x2d8>)
 80a0884:	f002 fb47 	bl	80a2f16 <_ZN8FuzzySetC1Effff>
  FuzzySet* RR_high = new FuzzySet(high1, high2, high3, high4);
 80a0888:	2014      	movs	r0, #20
 80a088a:	f7ff fc06 	bl	80a009a <_Znwj>
 80a088e:	900b      	str	r0, [sp, #44]	; 0x2c
 80a0890:	b130      	cbz	r0, 80a08a0 <_Z10fuzzy_initv+0x1d0>
 80a0892:	4b46      	ldr	r3, [pc, #280]	; (80a09ac <_Z10fuzzy_initv+0x2dc>)
 80a0894:	4a46      	ldr	r2, [pc, #280]	; (80a09b0 <_Z10fuzzy_initv+0x2e0>)
 80a0896:	9300      	str	r3, [sp, #0]
 80a0898:	2100      	movs	r1, #0
 80a089a:	4b46      	ldr	r3, [pc, #280]	; (80a09b4 <_Z10fuzzy_initv+0x2e4>)
 80a089c:	f002 fb3b 	bl	80a2f16 <_ZN8FuzzySetC1Effff>
  RR_input->addFuzzySet(RR_low);
 80a08a0:	4629      	mov	r1, r5
 80a08a2:	4620      	mov	r0, r4
 80a08a4:	f002 f8d7 	bl	80a2a56 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  RR_input->addFuzzySet(RR_med);
 80a08a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a08aa:	4620      	mov	r0, r4
 80a08ac:	f002 f8d3 	bl	80a2a56 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  RR_input->addFuzzySet(RR_high);
 80a08b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80a08b2:	4620      	mov	r0, r4
 80a08b4:	f002 f8cf 	bl	80a2a56 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyInput(RR_input);
 80a08b8:	4b3f      	ldr	r3, [pc, #252]	; (80a09b8 <_Z10fuzzy_initv+0x2e8>)
 80a08ba:	4621      	mov	r1, r4
 80a08bc:	6818      	ldr	r0, [r3, #0]
 80a08be:	f002 fbfe 	bl	80a30be <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>

  // OUTPUT: 1 of 1 (Test 1 *********************************)
  FuzzyOutput* drive_state = new FuzzyOutput(1);
 80a08c2:	2018      	movs	r0, #24
 80a08c4:	f7ff fbe9 	bl	80a009a <_Znwj>
 80a08c8:	4604      	mov	r4, r0
 80a08ca:	b110      	cbz	r0, 80a08d2 <_Z10fuzzy_initv+0x202>
 80a08cc:	2101      	movs	r1, #1
 80a08ce:	f002 f8de 	bl	80a2a8e <_ZN11FuzzyOutputC1Ei>
  FuzzySet* full_left = new FuzzySet(0, 5, 15, 20);
 80a08d2:	2014      	movs	r0, #20
 80a08d4:	f7ff fbe1 	bl	80a009a <_Znwj>
 80a08d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80a08da:	b130      	cbz	r0, 80a08ea <_Z10fuzzy_initv+0x21a>
 80a08dc:	4b37      	ldr	r3, [pc, #220]	; (80a09bc <_Z10fuzzy_initv+0x2ec>)
 80a08de:	4a38      	ldr	r2, [pc, #224]	; (80a09c0 <_Z10fuzzy_initv+0x2f0>)
 80a08e0:	9300      	str	r3, [sp, #0]
 80a08e2:	2100      	movs	r1, #0
 80a08e4:	4b37      	ldr	r3, [pc, #220]	; (80a09c4 <_Z10fuzzy_initv+0x2f4>)
 80a08e6:	f002 fb16 	bl	80a2f16 <_ZN8FuzzySetC1Effff>
  FuzzySet* small_left = new FuzzySet(25, 30, 35, 40);
 80a08ea:	2014      	movs	r0, #20
 80a08ec:	f7ff fbd5 	bl	80a009a <_Znwj>
 80a08f0:	9010      	str	r0, [sp, #64]	; 0x40
 80a08f2:	b130      	cbz	r0, 80a0902 <_Z10fuzzy_initv+0x232>
 80a08f4:	4b34      	ldr	r3, [pc, #208]	; (80a09c8 <_Z10fuzzy_initv+0x2f8>)
 80a08f6:	4a35      	ldr	r2, [pc, #212]	; (80a09cc <_Z10fuzzy_initv+0x2fc>)
 80a08f8:	9300      	str	r3, [sp, #0]
 80a08fa:	4935      	ldr	r1, [pc, #212]	; (80a09d0 <_Z10fuzzy_initv+0x300>)
 80a08fc:	4b35      	ldr	r3, [pc, #212]	; (80a09d4 <_Z10fuzzy_initv+0x304>)
 80a08fe:	f002 fb0a 	bl	80a2f16 <_ZN8FuzzySetC1Effff>
  FuzzySet* center = new FuzzySet(45, 50, 55, 60);
 80a0902:	2014      	movs	r0, #20
 80a0904:	f7ff fbc9 	bl	80a009a <_Znwj>
 80a0908:	9011      	str	r0, [sp, #68]	; 0x44
 80a090a:	b130      	cbz	r0, 80a091a <_Z10fuzzy_initv+0x24a>
 80a090c:	4b32      	ldr	r3, [pc, #200]	; (80a09d8 <_Z10fuzzy_initv+0x308>)
 80a090e:	4a33      	ldr	r2, [pc, #204]	; (80a09dc <_Z10fuzzy_initv+0x30c>)
 80a0910:	9300      	str	r3, [sp, #0]
 80a0912:	4933      	ldr	r1, [pc, #204]	; (80a09e0 <_Z10fuzzy_initv+0x310>)
 80a0914:	4b33      	ldr	r3, [pc, #204]	; (80a09e4 <_Z10fuzzy_initv+0x314>)
 80a0916:	f002 fafe 	bl	80a2f16 <_ZN8FuzzySetC1Effff>
  FuzzySet* small_right = new FuzzySet(65, 70, 75, 80);
 80a091a:	2014      	movs	r0, #20
 80a091c:	f7ff fbbd 	bl	80a009a <_Znwj>
 80a0920:	9012      	str	r0, [sp, #72]	; 0x48
 80a0922:	b130      	cbz	r0, 80a0932 <_Z10fuzzy_initv+0x262>
 80a0924:	4b30      	ldr	r3, [pc, #192]	; (80a09e8 <_Z10fuzzy_initv+0x318>)
 80a0926:	4a31      	ldr	r2, [pc, #196]	; (80a09ec <_Z10fuzzy_initv+0x31c>)
 80a0928:	9300      	str	r3, [sp, #0]
 80a092a:	4931      	ldr	r1, [pc, #196]	; (80a09f0 <_Z10fuzzy_initv+0x320>)
 80a092c:	4b31      	ldr	r3, [pc, #196]	; (80a09f4 <_Z10fuzzy_initv+0x324>)
 80a092e:	f002 faf2 	bl	80a2f16 <_ZN8FuzzySetC1Effff>
  FuzzySet* full_right = new FuzzySet(85, 90, 95, 100);
 80a0932:	2014      	movs	r0, #20
 80a0934:	f7ff fbb1 	bl	80a009a <_Znwj>
 80a0938:	9013      	str	r0, [sp, #76]	; 0x4c
 80a093a:	b130      	cbz	r0, 80a094a <_Z10fuzzy_initv+0x27a>
 80a093c:	4b2e      	ldr	r3, [pc, #184]	; (80a09f8 <_Z10fuzzy_initv+0x328>)
 80a093e:	4a2f      	ldr	r2, [pc, #188]	; (80a09fc <_Z10fuzzy_initv+0x32c>)
 80a0940:	9300      	str	r3, [sp, #0]
 80a0942:	492f      	ldr	r1, [pc, #188]	; (80a0a00 <_Z10fuzzy_initv+0x330>)
 80a0944:	4b2f      	ldr	r3, [pc, #188]	; (80a0a04 <_Z10fuzzy_initv+0x334>)
 80a0946:	f002 fae6 	bl	80a2f16 <_ZN8FuzzySetC1Effff>
  drive_state->addFuzzySet(full_left);
 80a094a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a094c:	4620      	mov	r0, r4
 80a094e:	f002 f882 	bl	80a2a56 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  drive_state->addFuzzySet(small_left);
 80a0952:	9910      	ldr	r1, [sp, #64]	; 0x40
 80a0954:	4620      	mov	r0, r4
 80a0956:	f002 f87e 	bl	80a2a56 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  drive_state->addFuzzySet(center);
 80a095a:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a095c:	4620      	mov	r0, r4
 80a095e:	f002 f87a 	bl	80a2a56 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  drive_state->addFuzzySet(small_right);
 80a0962:	9912      	ldr	r1, [sp, #72]	; 0x48
 80a0964:	4620      	mov	r0, r4
 80a0966:	f002 f876 	bl	80a2a56 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  drive_state->addFuzzySet(full_right);
 80a096a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a096c:	4620      	mov	r0, r4
 80a096e:	f002 f872 	bl	80a2a56 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyOutput(drive_state);
 80a0972:	4b11      	ldr	r3, [pc, #68]	; (80a09b8 <_Z10fuzzy_initv+0x2e8>)
 80a0974:	4621      	mov	r1, r4
 80a0976:	6818      	ldr	r0, [r3, #0]
 80a0978:	f002 fbb4 	bl	80a30e4 <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput>

  // Building Left FuzzyRuleAntecedents (ALL COMBINATIONS)
  FuzzyRuleAntecedent* left_low_high = new FuzzyRuleAntecedent();
 80a097c:	2018      	movs	r0, #24
 80a097e:	f7ff fb8c 	bl	80a009a <_Znwj>
 80a0982:	900c      	str	r0, [sp, #48]	; 0x30
 80a0984:	2800      	cmp	r0, #0
 80a0986:	d03f      	beq.n	80a0a08 <_Z10fuzzy_initv+0x338>
 80a0988:	f002 fc24 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
 80a098c:	e03c      	b.n	80a0a08 <_Z10fuzzy_initv+0x338>
 80a098e:	bf00      	nop
 80a0990:	447a0000 	.word	0x447a0000
 80a0994:	448e8000 	.word	0x448e8000
 80a0998:	44570000 	.word	0x44570000
 80a099c:	44548000 	.word	0x44548000
 80a09a0:	440e8000 	.word	0x440e8000
 80a09a4:	43d70000 	.word	0x43d70000
 80a09a8:	44318000 	.word	0x44318000
 80a09ac:	43d20000 	.word	0x43d20000
 80a09b0:	430c0000 	.word	0x430c0000
 80a09b4:	438c0000 	.word	0x438c0000
 80a09b8:	20000368 	.word	0x20000368
 80a09bc:	41a00000 	.word	0x41a00000
 80a09c0:	40a00000 	.word	0x40a00000
 80a09c4:	41700000 	.word	0x41700000
 80a09c8:	42200000 	.word	0x42200000
 80a09cc:	41f00000 	.word	0x41f00000
 80a09d0:	41c80000 	.word	0x41c80000
 80a09d4:	420c0000 	.word	0x420c0000
 80a09d8:	42700000 	.word	0x42700000
 80a09dc:	42480000 	.word	0x42480000
 80a09e0:	42340000 	.word	0x42340000
 80a09e4:	425c0000 	.word	0x425c0000
 80a09e8:	42a00000 	.word	0x42a00000
 80a09ec:	428c0000 	.word	0x428c0000
 80a09f0:	42820000 	.word	0x42820000
 80a09f4:	42960000 	.word	0x42960000
 80a09f8:	42c80000 	.word	0x42c80000
 80a09fc:	42b40000 	.word	0x42b40000
 80a0a00:	42aa0000 	.word	0x42aa0000
 80a0a04:	42be0000 	.word	0x42be0000
  left_low_high->joinWithAND(LL_low, LM_high);
 80a0a08:	465a      	mov	r2, fp
 80a0a0a:	4631      	mov	r1, r6
 80a0a0c:	980c      	ldr	r0, [sp, #48]	; 0x30
 80a0a0e:	f002 fbe9 	bl	80a31e4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_med_high = new FuzzyRuleAntecedent();
 80a0a12:	2018      	movs	r0, #24
 80a0a14:	f7ff fb41 	bl	80a009a <_Znwj>
 80a0a18:	9005      	str	r0, [sp, #20]
 80a0a1a:	b108      	cbz	r0, 80a0a20 <_Z10fuzzy_initv+0x350>
 80a0a1c:	f002 fbda 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_med_high->joinWithAND(LL_med, LM_high);
 80a0a20:	465a      	mov	r2, fp
 80a0a22:	4649      	mov	r1, r9
 80a0a24:	9805      	ldr	r0, [sp, #20]
 80a0a26:	f002 fbdd 	bl	80a31e4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_low_med = new FuzzyRuleAntecedent();
 80a0a2a:	2018      	movs	r0, #24
 80a0a2c:	f7ff fb35 	bl	80a009a <_Znwj>
 80a0a30:	9002      	str	r0, [sp, #8]
 80a0a32:	b108      	cbz	r0, 80a0a38 <_Z10fuzzy_initv+0x368>
 80a0a34:	f002 fbce 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_low_med->joinWithAND(LL_low, LM_med);
 80a0a38:	4652      	mov	r2, sl
 80a0a3a:	4631      	mov	r1, r6
 80a0a3c:	9802      	ldr	r0, [sp, #8]
 80a0a3e:	f002 fbd1 	bl	80a31e4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_med_med = new FuzzyRuleAntecedent();
 80a0a42:	2018      	movs	r0, #24
 80a0a44:	f7ff fb29 	bl	80a009a <_Znwj>
 80a0a48:	9003      	str	r0, [sp, #12]
 80a0a4a:	b108      	cbz	r0, 80a0a50 <_Z10fuzzy_initv+0x380>
 80a0a4c:	f002 fbc2 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_med_med->joinWithAND(LL_med, LM_med);
 80a0a50:	4652      	mov	r2, sl
 80a0a52:	4649      	mov	r1, r9
 80a0a54:	9803      	ldr	r0, [sp, #12]
 80a0a56:	f002 fbc5 	bl	80a31e4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_high_high = new FuzzyRuleAntecedent();
 80a0a5a:	2018      	movs	r0, #24
 80a0a5c:	f7ff fb1d 	bl	80a009a <_Znwj>
 80a0a60:	900d      	str	r0, [sp, #52]	; 0x34
 80a0a62:	b108      	cbz	r0, 80a0a68 <_Z10fuzzy_initv+0x398>
 80a0a64:	f002 fbb6 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_high_high->joinWithAND(LL_high, LM_high);
 80a0a68:	465a      	mov	r2, fp
 80a0a6a:	4641      	mov	r1, r8
 80a0a6c:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a0a6e:	f002 fbb9 	bl	80a31e4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_high_med = new FuzzyRuleAntecedent();
 80a0a72:	2018      	movs	r0, #24
 80a0a74:	f7ff fb11 	bl	80a009a <_Znwj>
 80a0a78:	9014      	str	r0, [sp, #80]	; 0x50
 80a0a7a:	b108      	cbz	r0, 80a0a80 <_Z10fuzzy_initv+0x3b0>
 80a0a7c:	f002 fbaa 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_high_med->joinWithAND(LL_high, LM_med);
 80a0a80:	4652      	mov	r2, sl
 80a0a82:	4641      	mov	r1, r8
 80a0a84:	9814      	ldr	r0, [sp, #80]	; 0x50
 80a0a86:	f002 fbad 	bl	80a31e4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_med_low = new FuzzyRuleAntecedent();
 80a0a8a:	2018      	movs	r0, #24
 80a0a8c:	f7ff fb05 	bl	80a009a <_Znwj>
 80a0a90:	9015      	str	r0, [sp, #84]	; 0x54
 80a0a92:	b108      	cbz	r0, 80a0a98 <_Z10fuzzy_initv+0x3c8>
 80a0a94:	f002 fb9e 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_med_low->joinWithAND(LL_med, LM_low);
 80a0a98:	463a      	mov	r2, r7
 80a0a9a:	4649      	mov	r1, r9
 80a0a9c:	9815      	ldr	r0, [sp, #84]	; 0x54
 80a0a9e:	f002 fba1 	bl	80a31e4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_high_low = new FuzzyRuleAntecedent();
 80a0aa2:	2018      	movs	r0, #24
 80a0aa4:	f7ff faf9 	bl	80a009a <_Znwj>
 80a0aa8:	9016      	str	r0, [sp, #88]	; 0x58
 80a0aaa:	b108      	cbz	r0, 80a0ab0 <_Z10fuzzy_initv+0x3e0>
 80a0aac:	f002 fb92 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_high_low->joinWithAND(LL_high, LM_low);
 80a0ab0:	463a      	mov	r2, r7
 80a0ab2:	4641      	mov	r1, r8
 80a0ab4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80a0ab6:	f002 fb95 	bl	80a31e4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_low_low = new FuzzyRuleAntecedent();
 80a0aba:	2018      	movs	r0, #24
 80a0abc:	f7ff faed 	bl	80a009a <_Znwj>
 80a0ac0:	4604      	mov	r4, r0
 80a0ac2:	b108      	cbz	r0, 80a0ac8 <_Z10fuzzy_initv+0x3f8>
 80a0ac4:	f002 fb86 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_low_low->joinWithAND(LL_low, LM_low);
 80a0ac8:	463a      	mov	r2, r7
 80a0aca:	4631      	mov	r1, r6
 80a0acc:	4620      	mov	r0, r4
 80a0ace:	f002 fb89 	bl	80a31e4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>

  // Building Right FuzzyRuleAntecedents
  FuzzyRuleAntecedent* right_high_low = new FuzzyRuleAntecedent();
 80a0ad2:	2018      	movs	r0, #24
 80a0ad4:	f7ff fae1 	bl	80a009a <_Znwj>
 80a0ad8:	900e      	str	r0, [sp, #56]	; 0x38
 80a0ada:	b108      	cbz	r0, 80a0ae0 <_Z10fuzzy_initv+0x410>
 80a0adc:	f002 fb7a 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_high_low->joinWithAND(RM_high, RR_low);
 80a0ae0:	462a      	mov	r2, r5
 80a0ae2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0ae4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80a0ae6:	f002 fb7d 	bl	80a31e4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_high_med = new FuzzyRuleAntecedent();
 80a0aea:	2018      	movs	r0, #24
 80a0aec:	f7ff fad5 	bl	80a009a <_Znwj>
 80a0af0:	9006      	str	r0, [sp, #24]
 80a0af2:	b108      	cbz	r0, 80a0af8 <_Z10fuzzy_initv+0x428>
 80a0af4:	f002 fb6e 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_high_med->joinWithAND(RM_high, RR_med);
 80a0af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a0afa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0afc:	9806      	ldr	r0, [sp, #24]
 80a0afe:	f002 fb71 	bl	80a31e4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_med_low = new FuzzyRuleAntecedent();
 80a0b02:	2018      	movs	r0, #24
 80a0b04:	f7ff fac9 	bl	80a009a <_Znwj>
 80a0b08:	9004      	str	r0, [sp, #16]
 80a0b0a:	b108      	cbz	r0, 80a0b10 <_Z10fuzzy_initv+0x440>
 80a0b0c:	f002 fb62 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_med_low->joinWithAND(RM_med, RR_low);
 80a0b10:	462a      	mov	r2, r5
 80a0b12:	9908      	ldr	r1, [sp, #32]
 80a0b14:	9804      	ldr	r0, [sp, #16]
 80a0b16:	f002 fb65 	bl	80a31e4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_low_med = new FuzzyRuleAntecedent();
 80a0b1a:	2018      	movs	r0, #24
 80a0b1c:	f7ff fabd 	bl	80a009a <_Znwj>
 80a0b20:	9017      	str	r0, [sp, #92]	; 0x5c
 80a0b22:	b108      	cbz	r0, 80a0b28 <_Z10fuzzy_initv+0x458>
 80a0b24:	f002 fb56 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_low_med->joinWithAND(RM_low, RR_med);
 80a0b28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a0b2a:	9907      	ldr	r1, [sp, #28]
 80a0b2c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80a0b2e:	f002 fb59 	bl	80a31e4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_low_low = new FuzzyRuleAntecedent();
 80a0b32:	2018      	movs	r0, #24
 80a0b34:	f7ff fab1 	bl	80a009a <_Znwj>
 80a0b38:	4606      	mov	r6, r0
 80a0b3a:	b108      	cbz	r0, 80a0b40 <_Z10fuzzy_initv+0x470>
 80a0b3c:	f002 fb4a 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_low_low->joinWithAND(RM_low, RR_low);
 80a0b40:	462a      	mov	r2, r5
 80a0b42:	9907      	ldr	r1, [sp, #28]
 80a0b44:	4630      	mov	r0, r6
 80a0b46:	f002 fb4d 	bl	80a31e4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_med_med = new FuzzyRuleAntecedent();
 80a0b4a:	2018      	movs	r0, #24
 80a0b4c:	f7ff faa5 	bl	80a009a <_Znwj>
 80a0b50:	4683      	mov	fp, r0
 80a0b52:	b108      	cbz	r0, 80a0b58 <_Z10fuzzy_initv+0x488>
 80a0b54:	f002 fb3e 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_med_med->joinWithAND(RM_med, RR_med);
 80a0b58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a0b5a:	9908      	ldr	r1, [sp, #32]
 80a0b5c:	4658      	mov	r0, fp
 80a0b5e:	f002 fb41 	bl	80a31e4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_low_high = new FuzzyRuleAntecedent();
 80a0b62:	2018      	movs	r0, #24
 80a0b64:	f7ff fa99 	bl	80a009a <_Znwj>
 80a0b68:	900a      	str	r0, [sp, #40]	; 0x28
 80a0b6a:	b108      	cbz	r0, 80a0b70 <_Z10fuzzy_initv+0x4a0>
 80a0b6c:	f002 fb32 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_low_high->joinWithAND(RM_low, RR_high);
 80a0b70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a0b72:	9907      	ldr	r1, [sp, #28]
 80a0b74:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a0b76:	f002 fb35 	bl	80a31e4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_high_high = new FuzzyRuleAntecedent();
 80a0b7a:	2018      	movs	r0, #24
 80a0b7c:	f7ff fa8d 	bl	80a009a <_Znwj>
 80a0b80:	9007      	str	r0, [sp, #28]
 80a0b82:	b108      	cbz	r0, 80a0b88 <_Z10fuzzy_initv+0x4b8>
 80a0b84:	f002 fb26 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_high_high->joinWithAND(RM_high, RR_high);
 80a0b88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a0b8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0b8c:	9807      	ldr	r0, [sp, #28]
 80a0b8e:	f002 fb29 	bl	80a31e4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_med_high = new FuzzyRuleAntecedent();
 80a0b92:	2018      	movs	r0, #24
 80a0b94:	f7ff fa81 	bl	80a009a <_Znwj>
 80a0b98:	9009      	str	r0, [sp, #36]	; 0x24
 80a0b9a:	b108      	cbz	r0, 80a0ba0 <_Z10fuzzy_initv+0x4d0>
 80a0b9c:	f002 fb1a 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_med_high->joinWithAND(RM_med, RR_high);
 80a0ba0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a0ba2:	9908      	ldr	r1, [sp, #32]
 80a0ba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80a0ba6:	f002 fb1d 	bl	80a31e4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>

  // Building drive FuzzyRuleConsequents (Test 1 *********************************)
  // NOTE: you can add multiple outputs to 1 consequent
  FuzzyRuleConsequent* drive_center = new FuzzyRuleConsequent();
 80a0baa:	2008      	movs	r0, #8
 80a0bac:	f7ff fa75 	bl	80a009a <_Znwj>
 80a0bb0:	4680      	mov	r8, r0
 80a0bb2:	b108      	cbz	r0, 80a0bb8 <_Z10fuzzy_initv+0x4e8>
 80a0bb4:	f002 fa58 	bl	80a3068 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_center->addOutput(center);
 80a0bb8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a0bba:	4640      	mov	r0, r8
 80a0bbc:	f002 fa58 	bl	80a3070 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  FuzzyRuleConsequent* drive_small_left = new FuzzyRuleConsequent();
 80a0bc0:	2008      	movs	r0, #8
 80a0bc2:	f7ff fa6a 	bl	80a009a <_Znwj>
 80a0bc6:	4607      	mov	r7, r0
 80a0bc8:	b108      	cbz	r0, 80a0bce <_Z10fuzzy_initv+0x4fe>
 80a0bca:	f002 fa4d 	bl	80a3068 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_small_left->addOutput(small_left);  
 80a0bce:	9910      	ldr	r1, [sp, #64]	; 0x40
 80a0bd0:	4638      	mov	r0, r7
 80a0bd2:	f002 fa4d 	bl	80a3070 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  FuzzyRuleConsequent* drive_full_left = new FuzzyRuleConsequent();
 80a0bd6:	2008      	movs	r0, #8
 80a0bd8:	f7ff fa5f 	bl	80a009a <_Znwj>
 80a0bdc:	9008      	str	r0, [sp, #32]
 80a0bde:	b108      	cbz	r0, 80a0be4 <_Z10fuzzy_initv+0x514>
 80a0be0:	f002 fa42 	bl	80a3068 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_full_left->addOutput(full_left);
 80a0be4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a0be6:	9808      	ldr	r0, [sp, #32]
 80a0be8:	f002 fa42 	bl	80a3070 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  FuzzyRuleConsequent* drive_full_right = new FuzzyRuleConsequent();
 80a0bec:	2008      	movs	r0, #8
 80a0bee:	f7ff fa54 	bl	80a009a <_Znwj>
 80a0bf2:	900b      	str	r0, [sp, #44]	; 0x2c
 80a0bf4:	b108      	cbz	r0, 80a0bfa <_Z10fuzzy_initv+0x52a>
 80a0bf6:	f002 fa37 	bl	80a3068 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_full_right->addOutput(full_right);
 80a0bfa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a0bfc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a0bfe:	f002 fa37 	bl	80a3070 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  FuzzyRuleConsequent* drive_small_right = new FuzzyRuleConsequent();
 80a0c02:	2008      	movs	r0, #8
 80a0c04:	f7ff fa49 	bl	80a009a <_Znwj>
 80a0c08:	4605      	mov	r5, r0
 80a0c0a:	b108      	cbz	r0, 80a0c10 <_Z10fuzzy_initv+0x540>
 80a0c0c:	f002 fa2c 	bl	80a3068 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_small_right->addOutput(small_right);
 80a0c10:	9912      	ldr	r1, [sp, #72]	; 0x48
 80a0c12:	4628      	mov	r0, r5
 80a0c14:	f002 fa2c 	bl	80a3070 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>

  // Building Complete FuzzyRuleAntedecents (Test 1 *********************************)
  // Combining (2) Left and (2) Right antecedents, merging with (1) drive consequent
  // And adding the FuzzyRules
  FuzzyRuleAntecedent* LHHL = new FuzzyRuleAntecedent();
 80a0c18:	2018      	movs	r0, #24
 80a0c1a:	f7ff fa3e 	bl	80a009a <_Znwj>
 80a0c1e:	4681      	mov	r9, r0
 80a0c20:	b108      	cbz	r0, 80a0c26 <_Z10fuzzy_initv+0x556>
 80a0c22:	f002 fad7 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LHHL->joinWithAND(left_low_high, right_high_low);
 80a0c26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a0c28:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a0c2a:	4648      	mov	r0, r9
 80a0c2c:	f002 fae9 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr1 = new FuzzyRule(1, LHHL, drive_center);
 80a0c30:	2010      	movs	r0, #16
 80a0c32:	f7ff fa32 	bl	80a009a <_Znwj>
 80a0c36:	4682      	mov	sl, r0
 80a0c38:	b120      	cbz	r0, 80a0c44 <_Z10fuzzy_initv+0x574>
 80a0c3a:	4643      	mov	r3, r8
 80a0c3c:	464a      	mov	r2, r9
 80a0c3e:	2101      	movs	r1, #1
 80a0c40:	f001 fcb8 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr1);
 80a0c44:	4bb5      	ldr	r3, [pc, #724]	; (80a0f1c <_Z10fuzzy_initv+0x84c>)
 80a0c46:	4651      	mov	r1, sl
 80a0c48:	6818      	ldr	r0, [r3, #0]
 80a0c4a:	f002 fa63 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MHHL = new FuzzyRuleAntecedent();
 80a0c4e:	2018      	movs	r0, #24
 80a0c50:	f7ff fa23 	bl	80a009a <_Znwj>
 80a0c54:	4681      	mov	r9, r0
 80a0c56:	b108      	cbz	r0, 80a0c5c <_Z10fuzzy_initv+0x58c>
 80a0c58:	f002 fabc 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  MHHL->joinWithAND(left_med_high, right_high_low);
 80a0c5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a0c5e:	9905      	ldr	r1, [sp, #20]
 80a0c60:	4648      	mov	r0, r9
 80a0c62:	f002 face 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr2 = new FuzzyRule(2, MHHL, drive_center);
 80a0c66:	2010      	movs	r0, #16
 80a0c68:	f7ff fa17 	bl	80a009a <_Znwj>
 80a0c6c:	4682      	mov	sl, r0
 80a0c6e:	b120      	cbz	r0, 80a0c7a <_Z10fuzzy_initv+0x5aa>
 80a0c70:	4643      	mov	r3, r8
 80a0c72:	464a      	mov	r2, r9
 80a0c74:	2102      	movs	r1, #2
 80a0c76:	f001 fc9d 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr2); 
 80a0c7a:	4ba8      	ldr	r3, [pc, #672]	; (80a0f1c <_Z10fuzzy_initv+0x84c>)
 80a0c7c:	4651      	mov	r1, sl
 80a0c7e:	6818      	ldr	r0, [r3, #0]
 80a0c80:	f002 fa48 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LHHM = new FuzzyRuleAntecedent();
 80a0c84:	2018      	movs	r0, #24
 80a0c86:	f7ff fa08 	bl	80a009a <_Znwj>
 80a0c8a:	4681      	mov	r9, r0
 80a0c8c:	b108      	cbz	r0, 80a0c92 <_Z10fuzzy_initv+0x5c2>
 80a0c8e:	f002 faa1 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LHHM->joinWithAND(left_low_high, right_high_med);
 80a0c92:	9a06      	ldr	r2, [sp, #24]
 80a0c94:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a0c96:	4648      	mov	r0, r9
 80a0c98:	f002 fab3 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr3 = new FuzzyRule(3, LHHM, drive_center);
 80a0c9c:	2010      	movs	r0, #16
 80a0c9e:	f7ff f9fc 	bl	80a009a <_Znwj>
 80a0ca2:	4682      	mov	sl, r0
 80a0ca4:	b120      	cbz	r0, 80a0cb0 <_Z10fuzzy_initv+0x5e0>
 80a0ca6:	4643      	mov	r3, r8
 80a0ca8:	464a      	mov	r2, r9
 80a0caa:	2103      	movs	r1, #3
 80a0cac:	f001 fc82 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr3);
 80a0cb0:	4b9a      	ldr	r3, [pc, #616]	; (80a0f1c <_Z10fuzzy_initv+0x84c>)
 80a0cb2:	4651      	mov	r1, sl
 80a0cb4:	6818      	ldr	r0, [r3, #0]
 80a0cb6:	f002 fa2d 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMML = new FuzzyRuleAntecedent();
 80a0cba:	2018      	movs	r0, #24
 80a0cbc:	f7ff f9ed 	bl	80a009a <_Znwj>
 80a0cc0:	4681      	mov	r9, r0
 80a0cc2:	b108      	cbz	r0, 80a0cc8 <_Z10fuzzy_initv+0x5f8>
 80a0cc4:	f002 fa86 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LMML->joinWithAND(left_low_med, right_med_low);
 80a0cc8:	9a04      	ldr	r2, [sp, #16]
 80a0cca:	9902      	ldr	r1, [sp, #8]
 80a0ccc:	4648      	mov	r0, r9
 80a0cce:	f002 fa98 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr4 = new FuzzyRule(4, LMML, drive_center);
 80a0cd2:	2010      	movs	r0, #16
 80a0cd4:	f7ff f9e1 	bl	80a009a <_Znwj>
 80a0cd8:	4682      	mov	sl, r0
 80a0cda:	b120      	cbz	r0, 80a0ce6 <_Z10fuzzy_initv+0x616>
 80a0cdc:	4643      	mov	r3, r8
 80a0cde:	464a      	mov	r2, r9
 80a0ce0:	2104      	movs	r1, #4
 80a0ce2:	f001 fc67 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr4);
 80a0ce6:	4b8d      	ldr	r3, [pc, #564]	; (80a0f1c <_Z10fuzzy_initv+0x84c>)
 80a0ce8:	4651      	mov	r1, sl
 80a0cea:	6818      	ldr	r0, [r3, #0]
 80a0cec:	f002 fa12 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMMM = new FuzzyRuleAntecedent();
 80a0cf0:	2018      	movs	r0, #24
 80a0cf2:	f7ff f9d2 	bl	80a009a <_Znwj>
 80a0cf6:	4681      	mov	r9, r0
 80a0cf8:	b108      	cbz	r0, 80a0cfe <_Z10fuzzy_initv+0x62e>
 80a0cfa:	f002 fa6b 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  MMMM->joinWithAND(left_med_med, right_med_med);
 80a0cfe:	465a      	mov	r2, fp
 80a0d00:	9903      	ldr	r1, [sp, #12]
 80a0d02:	4648      	mov	r0, r9
 80a0d04:	f002 fa7d 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr5 = new FuzzyRule(5, MMMM, drive_center);
 80a0d08:	2010      	movs	r0, #16
 80a0d0a:	f7ff f9c6 	bl	80a009a <_Znwj>
 80a0d0e:	4682      	mov	sl, r0
 80a0d10:	b120      	cbz	r0, 80a0d1c <_Z10fuzzy_initv+0x64c>
 80a0d12:	4643      	mov	r3, r8
 80a0d14:	464a      	mov	r2, r9
 80a0d16:	2105      	movs	r1, #5
 80a0d18:	f001 fc4c 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr5);
 80a0d1c:	4b7f      	ldr	r3, [pc, #508]	; (80a0f1c <_Z10fuzzy_initv+0x84c>)
 80a0d1e:	4651      	mov	r1, sl
 80a0d20:	6818      	ldr	r0, [r3, #0]
 80a0d22:	f002 f9f7 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HHLL = new FuzzyRuleAntecedent();
 80a0d26:	2018      	movs	r0, #24
 80a0d28:	f7ff f9b7 	bl	80a009a <_Znwj>
 80a0d2c:	4681      	mov	r9, r0
 80a0d2e:	b108      	cbz	r0, 80a0d34 <_Z10fuzzy_initv+0x664>
 80a0d30:	f002 fa50 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  HHLL->joinWithAND(left_high_high, right_low_low);
 80a0d34:	4632      	mov	r2, r6
 80a0d36:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a0d38:	4648      	mov	r0, r9
 80a0d3a:	f002 fa62 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr6 = new FuzzyRule(6, HHLL, drive_small_left);
 80a0d3e:	2010      	movs	r0, #16
 80a0d40:	f7ff f9ab 	bl	80a009a <_Znwj>
 80a0d44:	4682      	mov	sl, r0
 80a0d46:	b120      	cbz	r0, 80a0d52 <_Z10fuzzy_initv+0x682>
 80a0d48:	463b      	mov	r3, r7
 80a0d4a:	464a      	mov	r2, r9
 80a0d4c:	2106      	movs	r1, #6
 80a0d4e:	f001 fc31 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr6);
 80a0d52:	4b72      	ldr	r3, [pc, #456]	; (80a0f1c <_Z10fuzzy_initv+0x84c>)
 80a0d54:	4651      	mov	r1, sl
 80a0d56:	6818      	ldr	r0, [r3, #0]
 80a0d58:	f002 f9dc 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HHML = new FuzzyRuleAntecedent();
 80a0d5c:	2018      	movs	r0, #24
 80a0d5e:	f7ff f99c 	bl	80a009a <_Znwj>
 80a0d62:	4681      	mov	r9, r0
 80a0d64:	b108      	cbz	r0, 80a0d6a <_Z10fuzzy_initv+0x69a>
 80a0d66:	f002 fa35 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  HHML->joinWithAND(left_high_high, right_med_low);
 80a0d6a:	9a04      	ldr	r2, [sp, #16]
 80a0d6c:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a0d6e:	4648      	mov	r0, r9
 80a0d70:	f002 fa47 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr7 = new FuzzyRule(6, HHML, drive_small_left);
 80a0d74:	2010      	movs	r0, #16
 80a0d76:	f7ff f990 	bl	80a009a <_Znwj>
 80a0d7a:	4682      	mov	sl, r0
 80a0d7c:	b120      	cbz	r0, 80a0d88 <_Z10fuzzy_initv+0x6b8>
 80a0d7e:	463b      	mov	r3, r7
 80a0d80:	464a      	mov	r2, r9
 80a0d82:	2106      	movs	r1, #6
 80a0d84:	f001 fc16 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr7);
 80a0d88:	4b64      	ldr	r3, [pc, #400]	; (80a0f1c <_Z10fuzzy_initv+0x84c>)
 80a0d8a:	4651      	mov	r1, sl
 80a0d8c:	6818      	ldr	r0, [r3, #0]
 80a0d8e:	f002 f9c1 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HHMM = new FuzzyRuleAntecedent();
 80a0d92:	2018      	movs	r0, #24
 80a0d94:	f7ff f981 	bl	80a009a <_Znwj>
 80a0d98:	4681      	mov	r9, r0
 80a0d9a:	b108      	cbz	r0, 80a0da0 <_Z10fuzzy_initv+0x6d0>
 80a0d9c:	f002 fa1a 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  HHMM->joinWithAND(left_high_high, right_med_med);
 80a0da0:	465a      	mov	r2, fp
 80a0da2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a0da4:	4648      	mov	r0, r9
 80a0da6:	f002 fa2c 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr8 = new FuzzyRule(8, HHMM, drive_small_left);
 80a0daa:	2010      	movs	r0, #16
 80a0dac:	f7ff f975 	bl	80a009a <_Znwj>
 80a0db0:	4682      	mov	sl, r0
 80a0db2:	b120      	cbz	r0, 80a0dbe <_Z10fuzzy_initv+0x6ee>
 80a0db4:	463b      	mov	r3, r7
 80a0db6:	464a      	mov	r2, r9
 80a0db8:	2108      	movs	r1, #8
 80a0dba:	f001 fbfb 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr8);
 80a0dbe:	4b57      	ldr	r3, [pc, #348]	; (80a0f1c <_Z10fuzzy_initv+0x84c>)
 80a0dc0:	4651      	mov	r1, sl
 80a0dc2:	6818      	ldr	r0, [r3, #0]
 80a0dc4:	f002 f9a6 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MHMM = new FuzzyRuleAntecedent();
 80a0dc8:	2018      	movs	r0, #24
 80a0dca:	f7ff f966 	bl	80a009a <_Znwj>
 80a0dce:	4681      	mov	r9, r0
 80a0dd0:	b108      	cbz	r0, 80a0dd6 <_Z10fuzzy_initv+0x706>
 80a0dd2:	f002 f9ff 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  MHMM->joinWithAND(left_med_high, right_med_med);
 80a0dd6:	465a      	mov	r2, fp
 80a0dd8:	9905      	ldr	r1, [sp, #20]
 80a0dda:	4648      	mov	r0, r9
 80a0ddc:	f002 fa11 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr9 = new FuzzyRule(9, MHMM, drive_small_left);
 80a0de0:	2010      	movs	r0, #16
 80a0de2:	f7ff f95a 	bl	80a009a <_Znwj>
 80a0de6:	4682      	mov	sl, r0
 80a0de8:	b120      	cbz	r0, 80a0df4 <_Z10fuzzy_initv+0x724>
 80a0dea:	463b      	mov	r3, r7
 80a0dec:	464a      	mov	r2, r9
 80a0dee:	2109      	movs	r1, #9
 80a0df0:	f001 fbe0 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr9);
 80a0df4:	4b49      	ldr	r3, [pc, #292]	; (80a0f1c <_Z10fuzzy_initv+0x84c>)
 80a0df6:	4651      	mov	r1, sl
 80a0df8:	6818      	ldr	r0, [r3, #0]
 80a0dfa:	f002 f98b 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MHML = new FuzzyRuleAntecedent();
 80a0dfe:	2018      	movs	r0, #24
 80a0e00:	f7ff f94b 	bl	80a009a <_Znwj>
 80a0e04:	4681      	mov	r9, r0
 80a0e06:	b108      	cbz	r0, 80a0e0c <_Z10fuzzy_initv+0x73c>
 80a0e08:	f002 f9e4 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  MHML->joinWithAND(left_med_high, right_med_low);
 80a0e0c:	9a04      	ldr	r2, [sp, #16]
 80a0e0e:	9905      	ldr	r1, [sp, #20]
 80a0e10:	4648      	mov	r0, r9
 80a0e12:	f002 f9f6 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr10 = new FuzzyRule(10, MHML, drive_small_left);
 80a0e16:	2010      	movs	r0, #16
 80a0e18:	f7ff f93f 	bl	80a009a <_Znwj>
 80a0e1c:	4682      	mov	sl, r0
 80a0e1e:	b120      	cbz	r0, 80a0e2a <_Z10fuzzy_initv+0x75a>
 80a0e20:	463b      	mov	r3, r7
 80a0e22:	464a      	mov	r2, r9
 80a0e24:	210a      	movs	r1, #10
 80a0e26:	f001 fbc5 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr10);
 80a0e2a:	4b3c      	ldr	r3, [pc, #240]	; (80a0f1c <_Z10fuzzy_initv+0x84c>)
 80a0e2c:	4651      	mov	r1, sl
 80a0e2e:	6818      	ldr	r0, [r3, #0]
 80a0e30:	f002 f970 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MHLL = new FuzzyRuleAntecedent();
 80a0e34:	2018      	movs	r0, #24
 80a0e36:	f7ff f930 	bl	80a009a <_Znwj>
 80a0e3a:	4681      	mov	r9, r0
 80a0e3c:	b108      	cbz	r0, 80a0e42 <_Z10fuzzy_initv+0x772>
 80a0e3e:	f002 f9c9 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  MHLL->joinWithAND(left_med_high, right_low_low);
 80a0e42:	4632      	mov	r2, r6
 80a0e44:	9905      	ldr	r1, [sp, #20]
 80a0e46:	4648      	mov	r0, r9
 80a0e48:	f002 f9db 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr11 = new FuzzyRule(11, MHLL, drive_small_left);
 80a0e4c:	2010      	movs	r0, #16
 80a0e4e:	f7ff f924 	bl	80a009a <_Znwj>
 80a0e52:	4682      	mov	sl, r0
 80a0e54:	b120      	cbz	r0, 80a0e60 <_Z10fuzzy_initv+0x790>
 80a0e56:	463b      	mov	r3, r7
 80a0e58:	464a      	mov	r2, r9
 80a0e5a:	210b      	movs	r1, #11
 80a0e5c:	f001 fbaa 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr11);
 80a0e60:	4b2e      	ldr	r3, [pc, #184]	; (80a0f1c <_Z10fuzzy_initv+0x84c>)
 80a0e62:	4651      	mov	r1, sl
 80a0e64:	6818      	ldr	r0, [r3, #0]
 80a0e66:	f002 f955 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMML = new FuzzyRuleAntecedent();
 80a0e6a:	2018      	movs	r0, #24
 80a0e6c:	f7ff f915 	bl	80a009a <_Znwj>
 80a0e70:	4681      	mov	r9, r0
 80a0e72:	b108      	cbz	r0, 80a0e78 <_Z10fuzzy_initv+0x7a8>
 80a0e74:	f002 f9ae 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  MMML->joinWithAND(left_med_med, right_med_low);
 80a0e78:	9a04      	ldr	r2, [sp, #16]
 80a0e7a:	9903      	ldr	r1, [sp, #12]
 80a0e7c:	4648      	mov	r0, r9
 80a0e7e:	f002 f9c0 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr12 = new FuzzyRule(12, MMML, drive_small_left);
 80a0e82:	2010      	movs	r0, #16
 80a0e84:	f7ff f909 	bl	80a009a <_Znwj>
 80a0e88:	4682      	mov	sl, r0
 80a0e8a:	b120      	cbz	r0, 80a0e96 <_Z10fuzzy_initv+0x7c6>
 80a0e8c:	463b      	mov	r3, r7
 80a0e8e:	464a      	mov	r2, r9
 80a0e90:	210c      	movs	r1, #12
 80a0e92:	f001 fb8f 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr12);
 80a0e96:	4b21      	ldr	r3, [pc, #132]	; (80a0f1c <_Z10fuzzy_initv+0x84c>)
 80a0e98:	4651      	mov	r1, sl
 80a0e9a:	6818      	ldr	r0, [r3, #0]
 80a0e9c:	f002 f93a 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMLL = new FuzzyRuleAntecedent();
 80a0ea0:	2018      	movs	r0, #24
 80a0ea2:	f7ff f8fa 	bl	80a009a <_Znwj>
 80a0ea6:	4681      	mov	r9, r0
 80a0ea8:	b108      	cbz	r0, 80a0eae <_Z10fuzzy_initv+0x7de>
 80a0eaa:	f002 f993 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  MMLL->joinWithAND(left_med_med, right_low_low);
 80a0eae:	4632      	mov	r2, r6
 80a0eb0:	9903      	ldr	r1, [sp, #12]
 80a0eb2:	4648      	mov	r0, r9
 80a0eb4:	f002 f9a5 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr13 = new FuzzyRule(13, MMLL, drive_small_left);
 80a0eb8:	2010      	movs	r0, #16
 80a0eba:	f7ff f8ee 	bl	80a009a <_Znwj>
 80a0ebe:	4682      	mov	sl, r0
 80a0ec0:	b120      	cbz	r0, 80a0ecc <_Z10fuzzy_initv+0x7fc>
 80a0ec2:	463b      	mov	r3, r7
 80a0ec4:	464a      	mov	r2, r9
 80a0ec6:	210d      	movs	r1, #13
 80a0ec8:	f001 fb74 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr13);
 80a0ecc:	4b13      	ldr	r3, [pc, #76]	; (80a0f1c <_Z10fuzzy_initv+0x84c>)
 80a0ece:	4651      	mov	r1, sl
 80a0ed0:	6818      	ldr	r0, [r3, #0]
 80a0ed2:	f002 f91f 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HMLL = new FuzzyRuleAntecedent();
 80a0ed6:	2018      	movs	r0, #24
 80a0ed8:	f7ff f8df 	bl	80a009a <_Znwj>
 80a0edc:	4681      	mov	r9, r0
 80a0ede:	b108      	cbz	r0, 80a0ee4 <_Z10fuzzy_initv+0x814>
 80a0ee0:	f002 f978 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  HMLL->joinWithAND(left_high_med, right_low_low);
 80a0ee4:	4632      	mov	r2, r6
 80a0ee6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80a0ee8:	4648      	mov	r0, r9
 80a0eea:	f002 f98a 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr14 = new FuzzyRule(14, HMLL, drive_small_left);
 80a0eee:	2010      	movs	r0, #16
 80a0ef0:	f7ff f8d3 	bl	80a009a <_Znwj>
 80a0ef4:	4682      	mov	sl, r0
 80a0ef6:	b120      	cbz	r0, 80a0f02 <_Z10fuzzy_initv+0x832>
 80a0ef8:	463b      	mov	r3, r7
 80a0efa:	464a      	mov	r2, r9
 80a0efc:	210e      	movs	r1, #14
 80a0efe:	f001 fb59 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr14);
 80a0f02:	4b06      	ldr	r3, [pc, #24]	; (80a0f1c <_Z10fuzzy_initv+0x84c>)
 80a0f04:	4651      	mov	r1, sl
 80a0f06:	6818      	ldr	r0, [r3, #0]
 80a0f08:	f002 f904 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MLLL = new FuzzyRuleAntecedent();
 80a0f0c:	2018      	movs	r0, #24
 80a0f0e:	f7ff f8c4 	bl	80a009a <_Znwj>
 80a0f12:	4681      	mov	r9, r0
 80a0f14:	b120      	cbz	r0, 80a0f20 <_Z10fuzzy_initv+0x850>
 80a0f16:	f002 f95d 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
 80a0f1a:	e001      	b.n	80a0f20 <_Z10fuzzy_initv+0x850>
 80a0f1c:	20000368 	.word	0x20000368
  MLLL->joinWithAND(left_med_low, right_low_low);
 80a0f20:	4632      	mov	r2, r6
 80a0f22:	9915      	ldr	r1, [sp, #84]	; 0x54
 80a0f24:	4648      	mov	r0, r9
 80a0f26:	f002 f96c 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr15 = new FuzzyRule(15, MLLL, drive_small_left);
 80a0f2a:	2010      	movs	r0, #16
 80a0f2c:	f7ff f8b5 	bl	80a009a <_Znwj>
 80a0f30:	4682      	mov	sl, r0
 80a0f32:	b120      	cbz	r0, 80a0f3e <_Z10fuzzy_initv+0x86e>
 80a0f34:	463b      	mov	r3, r7
 80a0f36:	464a      	mov	r2, r9
 80a0f38:	210f      	movs	r1, #15
 80a0f3a:	f001 fb3b 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr15);
 80a0f3e:	4bbf      	ldr	r3, [pc, #764]	; (80a123c <_Z10fuzzy_initv+0xb6c>)
 80a0f40:	4651      	mov	r1, sl
 80a0f42:	6818      	ldr	r0, [r3, #0]
 80a0f44:	f002 f8e6 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HLLL = new FuzzyRuleAntecedent();
 80a0f48:	2018      	movs	r0, #24
 80a0f4a:	f7ff f8a6 	bl	80a009a <_Znwj>
 80a0f4e:	4681      	mov	r9, r0
 80a0f50:	b108      	cbz	r0, 80a0f56 <_Z10fuzzy_initv+0x886>
 80a0f52:	f002 f93f 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  HLLL->joinWithAND(left_high_low, right_low_low);
 80a0f56:	4632      	mov	r2, r6
 80a0f58:	9916      	ldr	r1, [sp, #88]	; 0x58
 80a0f5a:	4648      	mov	r0, r9
 80a0f5c:	f002 f951 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr16 = new FuzzyRule(16, HLLL, drive_full_left);
 80a0f60:	2010      	movs	r0, #16
 80a0f62:	f7ff f89a 	bl	80a009a <_Znwj>
 80a0f66:	4682      	mov	sl, r0
 80a0f68:	b120      	cbz	r0, 80a0f74 <_Z10fuzzy_initv+0x8a4>
 80a0f6a:	9b08      	ldr	r3, [sp, #32]
 80a0f6c:	464a      	mov	r2, r9
 80a0f6e:	2110      	movs	r1, #16
 80a0f70:	f001 fb20 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr16);
 80a0f74:	4bb1      	ldr	r3, [pc, #708]	; (80a123c <_Z10fuzzy_initv+0xb6c>)
 80a0f76:	4651      	mov	r1, sl
 80a0f78:	6818      	ldr	r0, [r3, #0]
 80a0f7a:	f002 f8cb 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLLH = new FuzzyRuleAntecedent();
 80a0f7e:	2018      	movs	r0, #24
 80a0f80:	f7ff f88b 	bl	80a009a <_Znwj>
 80a0f84:	4681      	mov	r9, r0
 80a0f86:	b108      	cbz	r0, 80a0f8c <_Z10fuzzy_initv+0x8bc>
 80a0f88:	f002 f924 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLLH->joinWithAND(left_low_low, right_low_high);
 80a0f8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a0f8e:	4621      	mov	r1, r4
 80a0f90:	4648      	mov	r0, r9
 80a0f92:	f002 f936 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr17 = new FuzzyRule(17, LLLH, drive_full_right);
 80a0f96:	2010      	movs	r0, #16
 80a0f98:	f7ff f87f 	bl	80a009a <_Znwj>
 80a0f9c:	4682      	mov	sl, r0
 80a0f9e:	b120      	cbz	r0, 80a0faa <_Z10fuzzy_initv+0x8da>
 80a0fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a0fa2:	464a      	mov	r2, r9
 80a0fa4:	2111      	movs	r1, #17
 80a0fa6:	f001 fb05 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr17);
 80a0faa:	4ba4      	ldr	r3, [pc, #656]	; (80a123c <_Z10fuzzy_initv+0xb6c>)
 80a0fac:	4651      	mov	r1, sl
 80a0fae:	6818      	ldr	r0, [r3, #0]
 80a0fb0:	f002 f8b0 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLHH = new FuzzyRuleAntecedent();
 80a0fb4:	2018      	movs	r0, #24
 80a0fb6:	f7ff f870 	bl	80a009a <_Znwj>
 80a0fba:	4681      	mov	r9, r0
 80a0fbc:	b108      	cbz	r0, 80a0fc2 <_Z10fuzzy_initv+0x8f2>
 80a0fbe:	f002 f909 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLHH->joinWithAND(left_low_low, right_high_high);
 80a0fc2:	9a07      	ldr	r2, [sp, #28]
 80a0fc4:	4621      	mov	r1, r4
 80a0fc6:	4648      	mov	r0, r9
 80a0fc8:	f002 f91b 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr18 = new FuzzyRule(18, LLHH, drive_small_right);
 80a0fcc:	2010      	movs	r0, #16
 80a0fce:	f7ff f864 	bl	80a009a <_Znwj>
 80a0fd2:	4682      	mov	sl, r0
 80a0fd4:	b120      	cbz	r0, 80a0fe0 <_Z10fuzzy_initv+0x910>
 80a0fd6:	462b      	mov	r3, r5
 80a0fd8:	464a      	mov	r2, r9
 80a0fda:	2112      	movs	r1, #18
 80a0fdc:	f001 faea 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr18);
 80a0fe0:	4b96      	ldr	r3, [pc, #600]	; (80a123c <_Z10fuzzy_initv+0xb6c>)
 80a0fe2:	4651      	mov	r1, sl
 80a0fe4:	6818      	ldr	r0, [r3, #0]
 80a0fe6:	f002 f895 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMHH = new FuzzyRuleAntecedent();
 80a0fea:	2018      	movs	r0, #24
 80a0fec:	f7ff f855 	bl	80a009a <_Znwj>
 80a0ff0:	4681      	mov	r9, r0
 80a0ff2:	b108      	cbz	r0, 80a0ff8 <_Z10fuzzy_initv+0x928>
 80a0ff4:	f002 f8ee 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LMHH->joinWithAND(left_low_med, right_high_high);
 80a0ff8:	9a07      	ldr	r2, [sp, #28]
 80a0ffa:	9902      	ldr	r1, [sp, #8]
 80a0ffc:	4648      	mov	r0, r9
 80a0ffe:	f002 f900 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr19 = new FuzzyRule(19, LMHH, drive_small_right);
 80a1002:	2010      	movs	r0, #16
 80a1004:	f7ff f849 	bl	80a009a <_Znwj>
 80a1008:	4682      	mov	sl, r0
 80a100a:	b120      	cbz	r0, 80a1016 <_Z10fuzzy_initv+0x946>
 80a100c:	462b      	mov	r3, r5
 80a100e:	464a      	mov	r2, r9
 80a1010:	2113      	movs	r1, #19
 80a1012:	f001 facf 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr19);
 80a1016:	4b89      	ldr	r3, [pc, #548]	; (80a123c <_Z10fuzzy_initv+0xb6c>)
 80a1018:	4651      	mov	r1, sl
 80a101a:	6818      	ldr	r0, [r3, #0]
 80a101c:	f002 f87a 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMHH = new FuzzyRuleAntecedent();
 80a1020:	2018      	movs	r0, #24
 80a1022:	f7ff f83a 	bl	80a009a <_Znwj>
 80a1026:	4681      	mov	r9, r0
 80a1028:	b108      	cbz	r0, 80a102e <_Z10fuzzy_initv+0x95e>
 80a102a:	f002 f8d3 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  MMHH->joinWithAND(left_med_med, right_high_high);
 80a102e:	9a07      	ldr	r2, [sp, #28]
 80a1030:	9903      	ldr	r1, [sp, #12]
 80a1032:	4648      	mov	r0, r9
 80a1034:	f002 f8e5 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr20 = new FuzzyRule(20, MMHH, drive_small_right);
 80a1038:	2010      	movs	r0, #16
 80a103a:	f7ff f82e 	bl	80a009a <_Znwj>
 80a103e:	4682      	mov	sl, r0
 80a1040:	b120      	cbz	r0, 80a104c <_Z10fuzzy_initv+0x97c>
 80a1042:	462b      	mov	r3, r5
 80a1044:	464a      	mov	r2, r9
 80a1046:	2114      	movs	r1, #20
 80a1048:	f001 fab4 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr20);
 80a104c:	4b7b      	ldr	r3, [pc, #492]	; (80a123c <_Z10fuzzy_initv+0xb6c>)
 80a104e:	4651      	mov	r1, sl
 80a1050:	6818      	ldr	r0, [r3, #0]
 80a1052:	f002 f85f 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMHM = new FuzzyRuleAntecedent();
 80a1056:	2018      	movs	r0, #24
 80a1058:	f7ff f81f 	bl	80a009a <_Znwj>
 80a105c:	4681      	mov	r9, r0
 80a105e:	b108      	cbz	r0, 80a1064 <_Z10fuzzy_initv+0x994>
 80a1060:	f002 f8b8 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  MMHM->joinWithAND(left_med_med, right_high_med);
 80a1064:	9a06      	ldr	r2, [sp, #24]
 80a1066:	9903      	ldr	r1, [sp, #12]
 80a1068:	4648      	mov	r0, r9
 80a106a:	f002 f8ca 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr21 = new FuzzyRule(21, MMHM, drive_small_right);
 80a106e:	2010      	movs	r0, #16
 80a1070:	f7ff f813 	bl	80a009a <_Znwj>
 80a1074:	4682      	mov	sl, r0
 80a1076:	b120      	cbz	r0, 80a1082 <_Z10fuzzy_initv+0x9b2>
 80a1078:	462b      	mov	r3, r5
 80a107a:	464a      	mov	r2, r9
 80a107c:	2115      	movs	r1, #21
 80a107e:	f001 fa99 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr21);
 80a1082:	4b6e      	ldr	r3, [pc, #440]	; (80a123c <_Z10fuzzy_initv+0xb6c>)
 80a1084:	4651      	mov	r1, sl
 80a1086:	6818      	ldr	r0, [r3, #0]
 80a1088:	f002 f844 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMHM = new FuzzyRuleAntecedent();
 80a108c:	2018      	movs	r0, #24
 80a108e:	f7ff f804 	bl	80a009a <_Znwj>
 80a1092:	4681      	mov	r9, r0
 80a1094:	b108      	cbz	r0, 80a109a <_Z10fuzzy_initv+0x9ca>
 80a1096:	f002 f89d 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LMHM->joinWithAND(left_low_med, right_high_med);
 80a109a:	9a06      	ldr	r2, [sp, #24]
 80a109c:	9902      	ldr	r1, [sp, #8]
 80a109e:	4648      	mov	r0, r9
 80a10a0:	f002 f8af 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr22 = new FuzzyRule(22, LMHM, drive_small_right);
 80a10a4:	2010      	movs	r0, #16
 80a10a6:	f7fe fff8 	bl	80a009a <_Znwj>
 80a10aa:	4682      	mov	sl, r0
 80a10ac:	b120      	cbz	r0, 80a10b8 <_Z10fuzzy_initv+0x9e8>
 80a10ae:	462b      	mov	r3, r5
 80a10b0:	464a      	mov	r2, r9
 80a10b2:	2116      	movs	r1, #22
 80a10b4:	f001 fa7e 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr22);
 80a10b8:	4b60      	ldr	r3, [pc, #384]	; (80a123c <_Z10fuzzy_initv+0xb6c>)
 80a10ba:	4651      	mov	r1, sl
 80a10bc:	6818      	ldr	r0, [r3, #0]
 80a10be:	f002 f829 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLHM = new FuzzyRuleAntecedent();
 80a10c2:	2018      	movs	r0, #24
 80a10c4:	f7fe ffe9 	bl	80a009a <_Znwj>
 80a10c8:	4681      	mov	r9, r0
 80a10ca:	b108      	cbz	r0, 80a10d0 <_Z10fuzzy_initv+0xa00>
 80a10cc:	f002 f882 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLHM->joinWithAND(left_low_low, right_high_med);
 80a10d0:	9a06      	ldr	r2, [sp, #24]
 80a10d2:	4621      	mov	r1, r4
 80a10d4:	4648      	mov	r0, r9
 80a10d6:	f002 f894 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr23 = new FuzzyRule(23, LLHM, drive_small_right);
 80a10da:	2010      	movs	r0, #16
 80a10dc:	f7fe ffdd 	bl	80a009a <_Znwj>
 80a10e0:	4682      	mov	sl, r0
 80a10e2:	b120      	cbz	r0, 80a10ee <_Z10fuzzy_initv+0xa1e>
 80a10e4:	462b      	mov	r3, r5
 80a10e6:	464a      	mov	r2, r9
 80a10e8:	2117      	movs	r1, #23
 80a10ea:	f001 fa63 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr23);
 80a10ee:	4b53      	ldr	r3, [pc, #332]	; (80a123c <_Z10fuzzy_initv+0xb6c>)
 80a10f0:	4651      	mov	r1, sl
 80a10f2:	6818      	ldr	r0, [r3, #0]
 80a10f4:	f002 f80e 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMMM = new FuzzyRuleAntecedent();
 80a10f8:	2018      	movs	r0, #24
 80a10fa:	f7fe ffce 	bl	80a009a <_Znwj>
 80a10fe:	4681      	mov	r9, r0
 80a1100:	b108      	cbz	r0, 80a1106 <_Z10fuzzy_initv+0xa36>
 80a1102:	f002 f867 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LMMM->joinWithAND(left_low_med, right_med_med);
 80a1106:	465a      	mov	r2, fp
 80a1108:	9902      	ldr	r1, [sp, #8]
 80a110a:	4648      	mov	r0, r9
 80a110c:	f002 f879 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr24 = new FuzzyRule(24, LMMM, drive_small_right);
 80a1110:	2010      	movs	r0, #16
 80a1112:	f7fe ffc2 	bl	80a009a <_Znwj>
 80a1116:	4682      	mov	sl, r0
 80a1118:	b120      	cbz	r0, 80a1124 <_Z10fuzzy_initv+0xa54>
 80a111a:	462b      	mov	r3, r5
 80a111c:	464a      	mov	r2, r9
 80a111e:	2118      	movs	r1, #24
 80a1120:	f001 fa48 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr24);
 80a1124:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80a123c <_Z10fuzzy_initv+0xb6c>
 80a1128:	4651      	mov	r1, sl
 80a112a:	f8d9 0000 	ldr.w	r0, [r9]
 80a112e:	f001 fff1 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLMM = new FuzzyRuleAntecedent();
 80a1132:	2018      	movs	r0, #24
 80a1134:	f7fe ffb1 	bl	80a009a <_Znwj>
 80a1138:	4682      	mov	sl, r0
 80a113a:	b108      	cbz	r0, 80a1140 <_Z10fuzzy_initv+0xa70>
 80a113c:	f002 f84a 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLMM->joinWithAND(left_low_low, right_med_med);
 80a1140:	465a      	mov	r2, fp
 80a1142:	4621      	mov	r1, r4
 80a1144:	4650      	mov	r0, sl
 80a1146:	f002 f85c 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr25 = new FuzzyRule(25, LLMM, drive_small_right);
 80a114a:	2010      	movs	r0, #16
 80a114c:	f7fe ffa5 	bl	80a009a <_Znwj>
 80a1150:	4683      	mov	fp, r0
 80a1152:	b120      	cbz	r0, 80a115e <_Z10fuzzy_initv+0xa8e>
 80a1154:	462b      	mov	r3, r5
 80a1156:	4652      	mov	r2, sl
 80a1158:	2119      	movs	r1, #25
 80a115a:	f001 fa2b 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr25);
 80a115e:	4659      	mov	r1, fp
 80a1160:	f8d9 0000 	ldr.w	r0, [r9]
 80a1164:	f001 ffd6 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLMH = new FuzzyRuleAntecedent();
 80a1168:	2018      	movs	r0, #24
 80a116a:	f7fe ff96 	bl	80a009a <_Znwj>
 80a116e:	4681      	mov	r9, r0
 80a1170:	b108      	cbz	r0, 80a1176 <_Z10fuzzy_initv+0xaa6>
 80a1172:	f002 f82f 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLMH->joinWithAND(left_low_low, right_med_high);
 80a1176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a1178:	4621      	mov	r1, r4
 80a117a:	4648      	mov	r0, r9
 80a117c:	f002 f841 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr26 = new FuzzyRule(26, LLMH, drive_small_right);
 80a1180:	2010      	movs	r0, #16
 80a1182:	f7fe ff8a 	bl	80a009a <_Znwj>
 80a1186:	4682      	mov	sl, r0
 80a1188:	b120      	cbz	r0, 80a1194 <_Z10fuzzy_initv+0xac4>
 80a118a:	462b      	mov	r3, r5
 80a118c:	464a      	mov	r2, r9
 80a118e:	211a      	movs	r1, #26
 80a1190:	f001 fa10 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr26);
 80a1194:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80a123c <_Z10fuzzy_initv+0xb6c>
 80a1198:	4651      	mov	r1, sl
 80a119a:	f8d9 0000 	ldr.w	r0, [r9]
 80a119e:	f001 ffb9 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLLM = new FuzzyRuleAntecedent();
 80a11a2:	2018      	movs	r0, #24
 80a11a4:	f7fe ff79 	bl	80a009a <_Znwj>
 80a11a8:	4682      	mov	sl, r0
 80a11aa:	b108      	cbz	r0, 80a11b0 <_Z10fuzzy_initv+0xae0>
 80a11ac:	f002 f812 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLLM->joinWithAND(left_low_low, right_low_med);
 80a11b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a11b2:	4621      	mov	r1, r4
 80a11b4:	4650      	mov	r0, sl
 80a11b6:	f002 f824 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr27 = new FuzzyRule(27, LLLM, drive_small_right);
 80a11ba:	2010      	movs	r0, #16
 80a11bc:	f7fe ff6d 	bl	80a009a <_Znwj>
 80a11c0:	4683      	mov	fp, r0
 80a11c2:	b120      	cbz	r0, 80a11ce <_Z10fuzzy_initv+0xafe>
 80a11c4:	462b      	mov	r3, r5
 80a11c6:	4652      	mov	r2, sl
 80a11c8:	211b      	movs	r1, #27
 80a11ca:	f001 f9f3 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr27);
 80a11ce:	4659      	mov	r1, fp
 80a11d0:	f8d9 0000 	ldr.w	r0, [r9]
 80a11d4:	f001 ff9e 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLLL = new FuzzyRuleAntecedent();
 80a11d8:	2018      	movs	r0, #24
 80a11da:	f7fe ff5e 	bl	80a009a <_Znwj>
 80a11de:	4682      	mov	sl, r0
 80a11e0:	b108      	cbz	r0, 80a11e6 <_Z10fuzzy_initv+0xb16>
 80a11e2:	f001 fff7 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLLL->joinWithAND(left_low_low, right_low_low);
 80a11e6:	4632      	mov	r2, r6
 80a11e8:	4621      	mov	r1, r4
 80a11ea:	4650      	mov	r0, sl
 80a11ec:	f002 f809 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr28 = new FuzzyRule(28, LLLL, drive_center);	// should it be search?
 80a11f0:	2010      	movs	r0, #16
 80a11f2:	f7fe ff52 	bl	80a009a <_Znwj>
 80a11f6:	4683      	mov	fp, r0
 80a11f8:	b120      	cbz	r0, 80a1204 <_Z10fuzzy_initv+0xb34>
 80a11fa:	4643      	mov	r3, r8
 80a11fc:	4652      	mov	r2, sl
 80a11fe:	211c      	movs	r1, #28
 80a1200:	f001 f9d8 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr28);
 80a1204:	4659      	mov	r1, fp
 80a1206:	f8d9 0000 	ldr.w	r0, [r9]
 80a120a:	f001 ff83 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  // Revisions
  FuzzyRuleAntecedent* LHLL = new FuzzyRuleAntecedent();
 80a120e:	2018      	movs	r0, #24
 80a1210:	f7fe ff43 	bl	80a009a <_Znwj>
 80a1214:	4680      	mov	r8, r0
 80a1216:	b108      	cbz	r0, 80a121c <_Z10fuzzy_initv+0xb4c>
 80a1218:	f001 ffdc 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LHLL->joinWithAND(left_low_high, right_low_low);
 80a121c:	4632      	mov	r2, r6
 80a121e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a1220:	4640      	mov	r0, r8
 80a1222:	f001 ffee 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr29 = new FuzzyRule(29, LHLL, drive_small_left);
 80a1226:	2010      	movs	r0, #16
 80a1228:	f7fe ff37 	bl	80a009a <_Znwj>
 80a122c:	4682      	mov	sl, r0
 80a122e:	b138      	cbz	r0, 80a1240 <_Z10fuzzy_initv+0xb70>
 80a1230:	463b      	mov	r3, r7
 80a1232:	4642      	mov	r2, r8
 80a1234:	211d      	movs	r1, #29
 80a1236:	f001 f9bd 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
 80a123a:	e001      	b.n	80a1240 <_Z10fuzzy_initv+0xb70>
 80a123c:	20000368 	.word	0x20000368
  fuzzy->addFuzzyRule(fr29);
 80a1240:	4651      	mov	r1, sl
 80a1242:	f8d9 0000 	ldr.w	r0, [r9]
 80a1246:	f001 ff65 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMLL = new FuzzyRuleAntecedent();
 80a124a:	2018      	movs	r0, #24
 80a124c:	f7fe ff25 	bl	80a009a <_Znwj>
 80a1250:	4680      	mov	r8, r0
 80a1252:	b108      	cbz	r0, 80a1258 <_Z10fuzzy_initv+0xb88>
 80a1254:	f001 ffbe 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LMLL->joinWithAND(left_low_med, right_low_low);
 80a1258:	4632      	mov	r2, r6
 80a125a:	9902      	ldr	r1, [sp, #8]
 80a125c:	4640      	mov	r0, r8
 80a125e:	f001 ffd0 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr30 = new FuzzyRule(30, LMLL, drive_small_left);
 80a1262:	2010      	movs	r0, #16
 80a1264:	f7fe ff19 	bl	80a009a <_Znwj>
 80a1268:	4606      	mov	r6, r0
 80a126a:	b120      	cbz	r0, 80a1276 <_Z10fuzzy_initv+0xba6>
 80a126c:	463b      	mov	r3, r7
 80a126e:	4642      	mov	r2, r8
 80a1270:	211e      	movs	r1, #30
 80a1272:	f001 f99f 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr30);
 80a1276:	4631      	mov	r1, r6
 80a1278:	f8d9 0000 	ldr.w	r0, [r9]
 80a127c:	f001 ff4a 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLML = new FuzzyRuleAntecedent();
 80a1280:	2018      	movs	r0, #24
 80a1282:	f7fe ff0a 	bl	80a009a <_Znwj>
 80a1286:	4606      	mov	r6, r0
 80a1288:	b108      	cbz	r0, 80a128e <_Z10fuzzy_initv+0xbbe>
 80a128a:	f001 ffa3 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLML->joinWithAND(left_low_low, right_med_low);
 80a128e:	9a04      	ldr	r2, [sp, #16]
 80a1290:	4621      	mov	r1, r4
 80a1292:	4630      	mov	r0, r6
 80a1294:	f001 ffb5 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr31 = new FuzzyRule(31, LLML, drive_small_right);
 80a1298:	2010      	movs	r0, #16
 80a129a:	f7fe fefe 	bl	80a009a <_Znwj>
 80a129e:	4607      	mov	r7, r0
 80a12a0:	b120      	cbz	r0, 80a12ac <_Z10fuzzy_initv+0xbdc>
 80a12a2:	462b      	mov	r3, r5
 80a12a4:	4632      	mov	r2, r6
 80a12a6:	211f      	movs	r1, #31
 80a12a8:	f001 f984 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr31);
 80a12ac:	4639      	mov	r1, r7
 80a12ae:	f8d9 0000 	ldr.w	r0, [r9]
 80a12b2:	f001 ff2f 	bl	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLHL = new FuzzyRuleAntecedent();
 80a12b6:	2018      	movs	r0, #24
 80a12b8:	f7fe feef 	bl	80a009a <_Znwj>
 80a12bc:	4606      	mov	r6, r0
 80a12be:	b108      	cbz	r0, 80a12c4 <_Z10fuzzy_initv+0xbf4>
 80a12c0:	f001 ff88 	bl	80a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLHL->joinWithAND(left_low_low, right_high_low);
 80a12c4:	4621      	mov	r1, r4
 80a12c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a12c8:	4630      	mov	r0, r6
 80a12ca:	f001 ff9a 	bl	80a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr32 = new FuzzyRule(32, LLHL, drive_small_right);
 80a12ce:	2010      	movs	r0, #16
 80a12d0:	f7fe fee3 	bl	80a009a <_Znwj>
 80a12d4:	4604      	mov	r4, r0
 80a12d6:	b120      	cbz	r0, 80a12e2 <_Z10fuzzy_initv+0xc12>
 80a12d8:	462b      	mov	r3, r5
 80a12da:	4632      	mov	r2, r6
 80a12dc:	2120      	movs	r1, #32
 80a12de:	f001 f969 	bl	80a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr32);
 80a12e2:	4621      	mov	r1, r4
 80a12e4:	f8d9 0000 	ldr.w	r0, [r9]
}
 80a12e8:	b019      	add	sp, #100	; 0x64
 80a12ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fuzzy->addFuzzyRule(fr31);

  FuzzyRuleAntecedent* LLHL = new FuzzyRuleAntecedent();
  LLHL->joinWithAND(left_low_low, right_high_low);
  FuzzyRule* fr32 = new FuzzyRule(32, LLHL, drive_small_right);
  fuzzy->addFuzzyRule(fr32);
 80a12ee:	f001 bf11 	b.w	80a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>
 80a12f2:	bf00      	nop

080a12f4 <setup>:
}

void setup() {
 80a12f4:	b508      	push	{r3, lr}
	tof_init();			// ToF and I2C
 80a12f6:	f7ff f805 	bl	80a0304 <_Z8tof_initv>
	accel_init();		// accelerometer
 80a12fa:	f7ff f8b7 	bl	80a046c <_Z10accel_initv>
	others_init();		// line, remote, esc, ***printing***
 80a12fe:	f7ff f8c7 	bl	80a0490 <_Z11others_initv>
	interrupt_init();	// interrupts for lines and remote
 80a1302:	f7ff f8ff 	bl	80a0504 <_Z14interrupt_initv>
	ESC_init();			// Car ESCs
 80a1306:	f7ff f989 	bl	80a061c <_Z8ESC_initv>
	fuzzy_init();		// Fuzzy library************
 80a130a:	f7ff f9e1 	bl	80a06d0 <_Z10fuzzy_initv>

	RGB.control(true); 	// take control of the on-board LED for debugging
 80a130e:	2001      	movs	r0, #1
 80a1310:	f002 fbb9 	bl	80a3a86 <_ZN8RGBClass7controlEb>

	robot_init();
 80a1314:	f7ff f9ba 	bl	80a068c <_Z10robot_initv>
	line_init();		// initialize line variables
}
 80a1318:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	fuzzy_init();		// Fuzzy library************

	RGB.control(true); 	// take control of the on-board LED for debugging

	robot_init();
	line_init();		// initialize line variables
 80a131c:	f7ff b9ae 	b.w	80a067c <_Z9line_initv>

080a1320 <_Z4stopv>:

// -----------------------------------------------------------
// ------------------Runtime functions------------------------
// -----------------------------------------------------------

void stop() {
 80a1320:	b508      	push	{r3, lr}
  	LESC.writeMicroseconds(1500);
 80a1322:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a1326:	4805      	ldr	r0, [pc, #20]	; (80a133c <_Z4stopv+0x1c>)
 80a1328:	f002 fa5b 	bl	80a37e2 <_ZN5Servo17writeMicrosecondsEt>
  	RESC.writeMicroseconds(1500);
}
 80a132c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// ------------------Runtime functions------------------------
// -----------------------------------------------------------

void stop() {
  	LESC.writeMicroseconds(1500);
  	RESC.writeMicroseconds(1500);
 80a1330:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a1334:	4802      	ldr	r0, [pc, #8]	; (80a1340 <_Z4stopv+0x20>)
 80a1336:	f002 ba54 	b.w	80a37e2 <_ZN5Servo17writeMicrosecondsEt>
 80a133a:	bf00      	nop
 80a133c:	20000344 	.word	0x20000344
 80a1340:	200003b8 	.word	0x200003b8

080a1344 <_Z6getToFv>:
void getAccel() {
  accel.getSample(sample);
  curAccel = sample.x;
}

void getToF() {
 80a1344:	b508      	push	{r3, lr}
	RR_distance = sensor0.readRangeContinuousMillimeters();
 80a1346:	480a      	ldr	r0, [pc, #40]	; (80a1370 <_Z6getToFv+0x2c>)
 80a1348:	f000 fba0 	bl	80a1a8c <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a134c:	4b09      	ldr	r3, [pc, #36]	; (80a1374 <_Z6getToFv+0x30>)
 80a134e:	8018      	strh	r0, [r3, #0]
	RM_distance = sensor1.readRangeContinuousMillimeters();
 80a1350:	4809      	ldr	r0, [pc, #36]	; (80a1378 <_Z6getToFv+0x34>)
 80a1352:	f000 fb9b 	bl	80a1a8c <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a1356:	4b09      	ldr	r3, [pc, #36]	; (80a137c <_Z6getToFv+0x38>)
 80a1358:	8018      	strh	r0, [r3, #0]
	LM_distance = sensor2.readRangeContinuousMillimeters();
 80a135a:	4809      	ldr	r0, [pc, #36]	; (80a1380 <_Z6getToFv+0x3c>)
 80a135c:	f000 fb96 	bl	80a1a8c <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a1360:	4b08      	ldr	r3, [pc, #32]	; (80a1384 <_Z6getToFv+0x40>)
 80a1362:	8018      	strh	r0, [r3, #0]
	LL_distance = sensor3.readRangeContinuousMillimeters();
 80a1364:	4808      	ldr	r0, [pc, #32]	; (80a1388 <_Z6getToFv+0x44>)
 80a1366:	f000 fb91 	bl	80a1a8c <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a136a:	4b08      	ldr	r3, [pc, #32]	; (80a138c <_Z6getToFv+0x48>)
 80a136c:	8018      	strh	r0, [r3, #0]
 80a136e:	bd08      	pop	{r3, pc}
 80a1370:	2000036c 	.word	0x2000036c
 80a1374:	20000340 	.word	0x20000340
 80a1378:	200003ec 	.word	0x200003ec
 80a137c:	20000404 	.word	0x20000404
 80a1380:	20000384 	.word	0x20000384
 80a1384:	200003d8 	.word	0x200003d8
 80a1388:	2000039c 	.word	0x2000039c
 80a138c:	20000406 	.word	0x20000406

080a1390 <_Z7doFuzzyv>:
	// if (sensor0.timeoutOccurred() || sensor1.timeoutOccurred() || sensor2.timeoutOccurred() || sensor3.timeoutOccurred()) { Serial.print(" SENSOR TIMEOUT"); }
}

void doFuzzy() {
 80a1390:	b510      	push	{r4, lr}
  fuzzy->setInput(1, LL_distance);
 80a1392:	4b57      	ldr	r3, [pc, #348]	; (80a14f0 <_Z7doFuzzyv+0x160>)
 80a1394:	4c57      	ldr	r4, [pc, #348]	; (80a14f4 <_Z7doFuzzyv+0x164>)
 80a1396:	8818      	ldrh	r0, [r3, #0]
 80a1398:	f003 fd96 	bl	80a4ec8 <__aeabi_ui2f>
 80a139c:	2101      	movs	r1, #1
 80a139e:	4602      	mov	r2, r0
 80a13a0:	6820      	ldr	r0, [r4, #0]
 80a13a2:	f001 feca 	bl	80a313a <_ZN5Fuzzy8setInputEif>
  fuzzy->setInput(2, LM_distance);
 80a13a6:	4b54      	ldr	r3, [pc, #336]	; (80a14f8 <_Z7doFuzzyv+0x168>)
 80a13a8:	8818      	ldrh	r0, [r3, #0]
 80a13aa:	f003 fd8d 	bl	80a4ec8 <__aeabi_ui2f>
 80a13ae:	2102      	movs	r1, #2
 80a13b0:	4602      	mov	r2, r0
 80a13b2:	6820      	ldr	r0, [r4, #0]
 80a13b4:	f001 fec1 	bl	80a313a <_ZN5Fuzzy8setInputEif>
  fuzzy->setInput(3, RM_distance);
 80a13b8:	4b50      	ldr	r3, [pc, #320]	; (80a14fc <_Z7doFuzzyv+0x16c>)
 80a13ba:	8818      	ldrh	r0, [r3, #0]
 80a13bc:	f003 fd84 	bl	80a4ec8 <__aeabi_ui2f>
 80a13c0:	2103      	movs	r1, #3
 80a13c2:	4602      	mov	r2, r0
 80a13c4:	6820      	ldr	r0, [r4, #0]
 80a13c6:	f001 feb8 	bl	80a313a <_ZN5Fuzzy8setInputEif>
  fuzzy->setInput(4, RR_distance);
 80a13ca:	4b4d      	ldr	r3, [pc, #308]	; (80a1500 <_Z7doFuzzyv+0x170>)
 80a13cc:	8818      	ldrh	r0, [r3, #0]
 80a13ce:	f003 fd7b 	bl	80a4ec8 <__aeabi_ui2f>
 80a13d2:	2104      	movs	r1, #4
 80a13d4:	4602      	mov	r2, r0
 80a13d6:	6820      	ldr	r0, [r4, #0]
 80a13d8:	f001 feaf 	bl	80a313a <_ZN5Fuzzy8setInputEif>
  fuzzy->fuzzify();
 80a13dc:	6820      	ldr	r0, [r4, #0]
 80a13de:	f001 fec0 	bl	80a3162 <_ZN5Fuzzy7fuzzifyEv>
  output = fuzzy->defuzzify(1);
 80a13e2:	2101      	movs	r1, #1
 80a13e4:	6820      	ldr	r0, [r4, #0]
 80a13e6:	f001 fee3 	bl	80a31b0 <_ZN5Fuzzy9defuzzifyEi>
 80a13ea:	4b46      	ldr	r3, [pc, #280]	; (80a1504 <_Z7doFuzzyv+0x174>)

	if((output >= 0) && (output < 20)) {
 80a13ec:	2100      	movs	r1, #0
  fuzzy->setInput(1, LL_distance);
  fuzzy->setInput(2, LM_distance);
  fuzzy->setInput(3, RM_distance);
  fuzzy->setInput(4, RR_distance);
  fuzzy->fuzzify();
  output = fuzzy->defuzzify(1);
 80a13ee:	6018      	str	r0, [r3, #0]
 80a13f0:	4604      	mov	r4, r0

	if((output >= 0) && (output < 20)) {
 80a13f2:	f003 ff73 	bl	80a52dc <__aeabi_fcmpge>
 80a13f6:	b190      	cbz	r0, 80a141e <_Z7doFuzzyv+0x8e>
 80a13f8:	4943      	ldr	r1, [pc, #268]	; (80a1508 <_Z7doFuzzyv+0x178>)
 80a13fa:	4620      	mov	r0, r4
 80a13fc:	f003 ff5a 	bl	80a52b4 <__aeabi_fcmplt>
 80a1400:	b168      	cbz	r0, 80a141e <_Z7doFuzzyv+0x8e>
		decision = "Full Left";
 80a1402:	4942      	ldr	r1, [pc, #264]	; (80a150c <_Z7doFuzzyv+0x17c>)
 80a1404:	4842      	ldr	r0, [pc, #264]	; (80a1510 <_Z7doFuzzyv+0x180>)
 80a1406:	f002 faa8 	bl	80a395a <_ZN6StringaSEPKc>
		RGB.color(0, 0, 255);
 80a140a:	2100      	movs	r1, #0
 80a140c:	22ff      	movs	r2, #255	; 0xff
 80a140e:	4608      	mov	r0, r1
 80a1410:	f002 fb49 	bl	80a3aa6 <_ZN8RGBClass5colorEiii>

		L_command = v_full_slow;
 80a1414:	4b3f      	ldr	r3, [pc, #252]	; (80a1514 <_Z7doFuzzyv+0x184>)
 80a1416:	2232      	movs	r2, #50	; 0x32
 80a1418:	601a      	str	r2, [r3, #0]
		R_command = v_full_fast;
 80a141a:	224b      	movs	r2, #75	; 0x4b
 80a141c:	e05f      	b.n	80a14de <_Z7doFuzzyv+0x14e>
		L_dir = 1;
		R_dir = 1;
	} else if((output >= 20) && (output < 40)) {
 80a141e:	493a      	ldr	r1, [pc, #232]	; (80a1508 <_Z7doFuzzyv+0x178>)
 80a1420:	4620      	mov	r0, r4
 80a1422:	f003 ff5b 	bl	80a52dc <__aeabi_fcmpge>
 80a1426:	b190      	cbz	r0, 80a144e <_Z7doFuzzyv+0xbe>
 80a1428:	493b      	ldr	r1, [pc, #236]	; (80a1518 <_Z7doFuzzyv+0x188>)
 80a142a:	4620      	mov	r0, r4
 80a142c:	f003 ff42 	bl	80a52b4 <__aeabi_fcmplt>
 80a1430:	b168      	cbz	r0, 80a144e <_Z7doFuzzyv+0xbe>
		decision = "Small Left";
 80a1432:	493a      	ldr	r1, [pc, #232]	; (80a151c <_Z7doFuzzyv+0x18c>)
 80a1434:	4836      	ldr	r0, [pc, #216]	; (80a1510 <_Z7doFuzzyv+0x180>)
 80a1436:	f002 fa90 	bl	80a395a <_ZN6StringaSEPKc>
		RGB.color(0, 128, 128);
 80a143a:	2280      	movs	r2, #128	; 0x80
 80a143c:	4611      	mov	r1, r2
 80a143e:	2000      	movs	r0, #0
 80a1440:	f002 fb31 	bl	80a3aa6 <_ZN8RGBClass5colorEiii>

 		L_command = v_small_slow;
 80a1444:	4b33      	ldr	r3, [pc, #204]	; (80a1514 <_Z7doFuzzyv+0x184>)
 80a1446:	2228      	movs	r2, #40	; 0x28
 80a1448:	601a      	str	r2, [r3, #0]
		R_command = v_small_fast;
 80a144a:	223c      	movs	r2, #60	; 0x3c
 80a144c:	e047      	b.n	80a14de <_Z7doFuzzyv+0x14e>
		L_dir = 1;
		R_dir = 1;
  } else if((output >= 40) && (output < 60)) {
 80a144e:	4932      	ldr	r1, [pc, #200]	; (80a1518 <_Z7doFuzzyv+0x188>)
 80a1450:	4620      	mov	r0, r4
 80a1452:	f003 ff43 	bl	80a52dc <__aeabi_fcmpge>
 80a1456:	b198      	cbz	r0, 80a1480 <_Z7doFuzzyv+0xf0>
 80a1458:	4931      	ldr	r1, [pc, #196]	; (80a1520 <_Z7doFuzzyv+0x190>)
 80a145a:	4620      	mov	r0, r4
 80a145c:	f003 ff2a 	bl	80a52b4 <__aeabi_fcmplt>
 80a1460:	b170      	cbz	r0, 80a1480 <_Z7doFuzzyv+0xf0>
	  decision = "Center";
 80a1462:	4930      	ldr	r1, [pc, #192]	; (80a1524 <_Z7doFuzzyv+0x194>)
 80a1464:	482a      	ldr	r0, [pc, #168]	; (80a1510 <_Z7doFuzzyv+0x180>)
 80a1466:	f002 fa78 	bl	80a395a <_ZN6StringaSEPKc>
	  RGB.color(0, 255, 0);
 80a146a:	2200      	movs	r2, #0
 80a146c:	4610      	mov	r0, r2
 80a146e:	21ff      	movs	r1, #255	; 0xff
 80a1470:	f002 fb19 	bl	80a3aa6 <_ZN8RGBClass5colorEiii>

		L_command = v_center;
 80a1474:	4a27      	ldr	r2, [pc, #156]	; (80a1514 <_Z7doFuzzyv+0x184>)
 80a1476:	2332      	movs	r3, #50	; 0x32
 80a1478:	6013      	str	r3, [r2, #0]
		R_command = v_center;
 80a147a:	4a2b      	ldr	r2, [pc, #172]	; (80a1528 <_Z7doFuzzyv+0x198>)
 80a147c:	6013      	str	r3, [r2, #0]
 80a147e:	e030      	b.n	80a14e2 <_Z7doFuzzyv+0x152>
		L_dir = 1;
		R_dir = 1;
  } else if((output >= 60) && (output < 80)) {
 80a1480:	4927      	ldr	r1, [pc, #156]	; (80a1520 <_Z7doFuzzyv+0x190>)
 80a1482:	4620      	mov	r0, r4
 80a1484:	f003 ff2a 	bl	80a52dc <__aeabi_fcmpge>
 80a1488:	b190      	cbz	r0, 80a14b0 <_Z7doFuzzyv+0x120>
 80a148a:	4928      	ldr	r1, [pc, #160]	; (80a152c <_Z7doFuzzyv+0x19c>)
 80a148c:	4620      	mov	r0, r4
 80a148e:	f003 ff11 	bl	80a52b4 <__aeabi_fcmplt>
 80a1492:	b168      	cbz	r0, 80a14b0 <_Z7doFuzzyv+0x120>
	  decision = "Small Right";
 80a1494:	4926      	ldr	r1, [pc, #152]	; (80a1530 <_Z7doFuzzyv+0x1a0>)
 80a1496:	481e      	ldr	r0, [pc, #120]	; (80a1510 <_Z7doFuzzyv+0x180>)
 80a1498:	f002 fa5f 	bl	80a395a <_ZN6StringaSEPKc>
	  RGB.color(128, 128, 0);
 80a149c:	2180      	movs	r1, #128	; 0x80
 80a149e:	2200      	movs	r2, #0
 80a14a0:	4608      	mov	r0, r1
 80a14a2:	f002 fb00 	bl	80a3aa6 <_ZN8RGBClass5colorEiii>

		L_command = v_small_fast;
 80a14a6:	4b1b      	ldr	r3, [pc, #108]	; (80a1514 <_Z7doFuzzyv+0x184>)
 80a14a8:	223c      	movs	r2, #60	; 0x3c
 80a14aa:	601a      	str	r2, [r3, #0]
		R_command = v_small_slow;
 80a14ac:	2228      	movs	r2, #40	; 0x28
 80a14ae:	e016      	b.n	80a14de <_Z7doFuzzyv+0x14e>
		L_dir = 1;
		R_dir = 1;
  } else if((output >= 80) && (output < 100)) {
 80a14b0:	491e      	ldr	r1, [pc, #120]	; (80a152c <_Z7doFuzzyv+0x19c>)
 80a14b2:	4620      	mov	r0, r4
 80a14b4:	f003 ff12 	bl	80a52dc <__aeabi_fcmpge>
 80a14b8:	b1c0      	cbz	r0, 80a14ec <_Z7doFuzzyv+0x15c>
 80a14ba:	491e      	ldr	r1, [pc, #120]	; (80a1534 <_Z7doFuzzyv+0x1a4>)
 80a14bc:	4620      	mov	r0, r4
 80a14be:	f003 fef9 	bl	80a52b4 <__aeabi_fcmplt>
 80a14c2:	b198      	cbz	r0, 80a14ec <_Z7doFuzzyv+0x15c>
	  decision = "Full Right";
 80a14c4:	491c      	ldr	r1, [pc, #112]	; (80a1538 <_Z7doFuzzyv+0x1a8>)
 80a14c6:	4812      	ldr	r0, [pc, #72]	; (80a1510 <_Z7doFuzzyv+0x180>)
 80a14c8:	f002 fa47 	bl	80a395a <_ZN6StringaSEPKc>
	  RGB.color(255, 0, 0);
 80a14cc:	2200      	movs	r2, #0
 80a14ce:	4611      	mov	r1, r2
 80a14d0:	20ff      	movs	r0, #255	; 0xff
 80a14d2:	f002 fae8 	bl	80a3aa6 <_ZN8RGBClass5colorEiii>

		L_command = v_full_fast;
 80a14d6:	4b0f      	ldr	r3, [pc, #60]	; (80a1514 <_Z7doFuzzyv+0x184>)
 80a14d8:	224b      	movs	r2, #75	; 0x4b
 80a14da:	601a      	str	r2, [r3, #0]
		R_command = v_full_slow;
 80a14dc:	2232      	movs	r2, #50	; 0x32
 80a14de:	4b12      	ldr	r3, [pc, #72]	; (80a1528 <_Z7doFuzzyv+0x198>)
 80a14e0:	601a      	str	r2, [r3, #0]
		L_dir = 1;
 80a14e2:	4a16      	ldr	r2, [pc, #88]	; (80a153c <_Z7doFuzzyv+0x1ac>)
 80a14e4:	2301      	movs	r3, #1
 80a14e6:	6013      	str	r3, [r2, #0]
		R_dir = 1;
 80a14e8:	4a15      	ldr	r2, [pc, #84]	; (80a1540 <_Z7doFuzzyv+0x1b0>)
 80a14ea:	6013      	str	r3, [r2, #0]
 80a14ec:	bd10      	pop	{r4, pc}
 80a14ee:	bf00      	nop
 80a14f0:	20000406 	.word	0x20000406
 80a14f4:	20000368 	.word	0x20000368
 80a14f8:	200003d8 	.word	0x200003d8
 80a14fc:	20000404 	.word	0x20000404
 80a1500:	20000340 	.word	0x20000340
 80a1504:	20000408 	.word	0x20000408
 80a1508:	41a00000 	.word	0x41a00000
 80a150c:	080a5433 	.word	0x080a5433
 80a1510:	200003dc 	.word	0x200003dc
 80a1514:	200003d4 	.word	0x200003d4
 80a1518:	42200000 	.word	0x42200000
 80a151c:	080a543d 	.word	0x080a543d
 80a1520:	42700000 	.word	0x42700000
 80a1524:	080a5448 	.word	0x080a5448
 80a1528:	2000040c 	.word	0x2000040c
 80a152c:	42a00000 	.word	0x42a00000
 80a1530:	080a544f 	.word	0x080a544f
 80a1534:	42c80000 	.word	0x42c80000
 80a1538:	080a545b 	.word	0x080a545b
 80a153c:	20000320 	.word	0x20000320
 80a1540:	20000304 	.word	0x20000304

080a1544 <_Z11checkSwitchv>:
  }
}

void checkSwitch() {
 80a1544:	b508      	push	{r3, lr}
  	if(RSflag == LOW) {
 80a1546:	4b06      	ldr	r3, [pc, #24]	; (80a1560 <_Z11checkSwitchv+0x1c>)
 80a1548:	781b      	ldrb	r3, [r3, #0]
 80a154a:	b93b      	cbnz	r3, 80a155c <_Z11checkSwitchv+0x18>
  		stop();
 80a154c:	f7ff fee8 	bl	80a1320 <_Z4stopv>
  		Serial.print("STOPPED");
 80a1550:	f002 fbe6 	bl	80a3d20 <_Z16_fetch_usbserialv>
 80a1554:	4903      	ldr	r1, [pc, #12]	; (80a1564 <_Z11checkSwitchv+0x20>)
 80a1556:	f002 fa37 	bl	80a39c8 <_ZN5Print5printEPKc>
 80a155a:	e7fe      	b.n	80a155a <_Z11checkSwitchv+0x16>
 80a155c:	bd08      	pop	{r3, pc}
 80a155e:	bf00      	nop
 80a1560:	2000033e 	.word	0x2000033e
 80a1564:	080a5466 	.word	0x080a5466

080a1568 <_Z4moveiii>:
  // 1100 for maximum reverse, 1800 for maximum forward
  // 30% throttle is 1500 +/- 300*0.3 = 1500 +/- 90

  int pwm = 1500;       // default is ESC stopped

  if(direction == 1) {  // forward
 80a1568:	2a01      	cmp	r2, #1
    pwm = 1500 + speed;
  } else {              // reverse
    pwm = 1500 - speed;
 80a156a:	bf16      	itet	ne
 80a156c:	f5c1 61bb 	rsbne	r1, r1, #1496	; 0x5d8
  // 30% throttle is 1500 +/- 300*0.3 = 1500 +/- 90

  int pwm = 1500;       // default is ESC stopped

  if(direction == 1) {  // forward
    pwm = 1500 + speed;
 80a1570:	f201 51dc 	addweq	r1, r1, #1500	; 0x5dc
  } else {              // reverse
    pwm = 1500 - speed;
 80a1574:	3104      	addne	r1, #4
  }
  if(motor == 1) {      // RIGHT ESC
 80a1576:	2801      	cmp	r0, #1
 80a1578:	b289      	uxth	r1, r1
    RESC.writeMicroseconds(pwm);
 80a157a:	bf0c      	ite	eq
 80a157c:	4801      	ldreq	r0, [pc, #4]	; (80a1584 <_Z4moveiii+0x1c>)
  } else {              // LEFT ESC
    LESC.writeMicroseconds(pwm);
 80a157e:	4802      	ldrne	r0, [pc, #8]	; (80a1588 <_Z4moveiii+0x20>)
 80a1580:	f002 b92f 	b.w	80a37e2 <_ZN5Servo17writeMicrosecondsEt>
 80a1584:	200003b8 	.word	0x200003b8
 80a1588:	20000344 	.word	0x20000344

080a158c <_Z8movementi>:
  }
}

void movement(int state) {
 80a158c:	b508      	push	{r3, lr}
	// right now, there are only states 0, 1, and 10***
	if(state == 0) {			// move forward
 80a158e:	b968      	cbnz	r0, 80a15ac <_Z8movementi+0x20>
  		L_command = line_fwd;
 80a1590:	4a12      	ldr	r2, [pc, #72]	; (80a15dc <_Z8movementi+0x50>)
 80a1592:	234b      	movs	r3, #75	; 0x4b
 80a1594:	6013      	str	r3, [r2, #0]
  		R_command = line_fwd;
 80a1596:	4a12      	ldr	r2, [pc, #72]	; (80a15e0 <_Z8movementi+0x54>)
 80a1598:	6013      	str	r3, [r2, #0]
  		L_dir = 1;
 80a159a:	4a12      	ldr	r2, [pc, #72]	; (80a15e4 <_Z8movementi+0x58>)
 80a159c:	2301      	movs	r3, #1
 80a159e:	6013      	str	r3, [r2, #0]
  		R_dir = 1;
 80a15a0:	4a11      	ldr	r2, [pc, #68]	; (80a15e8 <_Z8movementi+0x5c>)
 80a15a2:	6013      	str	r3, [r2, #0]
      Serial.println("Back triggered, moving forward");
 80a15a4:	f002 fbbc 	bl	80a3d20 <_Z16_fetch_usbserialv>
 80a15a8:	4910      	ldr	r1, [pc, #64]	; (80a15ec <_Z8movementi+0x60>)
 80a15aa:	e012      	b.n	80a15d2 <_Z8movementi+0x46>
	} else if(state == 10) {
 80a15ac:	280a      	cmp	r0, #10
 80a15ae:	d103      	bne.n	80a15b8 <_Z8movementi+0x2c>
  		R_command = 0;
  		R_dir = 1;
  		L_dir = 1;
      Serial.println("Stopped before death");
	}
}
 80a15b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a15b4:	f7fe be0a 	b.w	80a01cc <_Z8movementi.part.5>
	      prevFlagSet = false;
        Serial.println("FINISHED DEALING WITH THE LINE");
	    }
	    // moving = true;
	} else {					// stop
  		L_command = 0;
 80a15b8:	4a08      	ldr	r2, [pc, #32]	; (80a15dc <_Z8movementi+0x50>)
 80a15ba:	2300      	movs	r3, #0
 80a15bc:	6013      	str	r3, [r2, #0]
  		R_command = 0;
 80a15be:	4a08      	ldr	r2, [pc, #32]	; (80a15e0 <_Z8movementi+0x54>)
 80a15c0:	6013      	str	r3, [r2, #0]
  		R_dir = 1;
 80a15c2:	4a09      	ldr	r2, [pc, #36]	; (80a15e8 <_Z8movementi+0x5c>)
 80a15c4:	2301      	movs	r3, #1
 80a15c6:	6013      	str	r3, [r2, #0]
  		L_dir = 1;
 80a15c8:	4a06      	ldr	r2, [pc, #24]	; (80a15e4 <_Z8movementi+0x58>)
 80a15ca:	6013      	str	r3, [r2, #0]
      Serial.println("Stopped before death");
 80a15cc:	f002 fba8 	bl	80a3d20 <_Z16_fetch_usbserialv>
 80a15d0:	4907      	ldr	r1, [pc, #28]	; (80a15f0 <_Z8movementi+0x64>)
	}
}
 80a15d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	} else {					// stop
  		L_command = 0;
  		R_command = 0;
  		R_dir = 1;
  		L_dir = 1;
      Serial.println("Stopped before death");
 80a15d6:	f002 ba0a 	b.w	80a39ee <_ZN5Print7printlnEPKc>
 80a15da:	bf00      	nop
 80a15dc:	200003d4 	.word	0x200003d4
 80a15e0:	2000040c 	.word	0x2000040c
 80a15e4:	20000320 	.word	0x20000320
 80a15e8:	20000304 	.word	0x20000304
 80a15ec:	080a546e 	.word	0x080a546e
 80a15f0:	080a548d 	.word	0x080a548d

080a15f4 <_Z9checkLinev>:
	}
}

void checkLine() {
 80a15f4:	b508      	push	{r3, lr}
  if (!FLflag || !FRflag || prevFlagSet) {				// if front line triggered
 80a15f6:	4b1a      	ldr	r3, [pc, #104]	; (80a1660 <_Z9checkLinev+0x6c>)
 80a15f8:	781a      	ldrb	r2, [r3, #0]
 80a15fa:	4b1a      	ldr	r3, [pc, #104]	; (80a1664 <_Z9checkLinev+0x70>)
 80a15fc:	b122      	cbz	r2, 80a1608 <_Z9checkLinev+0x14>
 80a15fe:	4a1a      	ldr	r2, [pc, #104]	; (80a1668 <_Z9checkLinev+0x74>)
 80a1600:	7812      	ldrb	r2, [r2, #0]
 80a1602:	b10a      	cbz	r2, 80a1608 <_Z9checkLinev+0x14>
 80a1604:	781a      	ldrb	r2, [r3, #0]
 80a1606:	b19a      	cbz	r2, 80a1630 <_Z9checkLinev+0x3c>
    if (!prevFlagSet) {					// and if this is the FIRST detection of the line
 80a1608:	781b      	ldrb	r3, [r3, #0]
 80a160a:	b96b      	cbnz	r3, 80a1628 <_Z9checkLinev+0x34>
      RGB.color(255, 255, 255);
 80a160c:	22ff      	movs	r2, #255	; 0xff
 80a160e:	4610      	mov	r0, r2
 80a1610:	4611      	mov	r1, r2
 80a1612:	f002 fa48 	bl	80a3aa6 <_ZN8RGBClass5colorEiii>
      prevFlag = cur;					// reset the turn timer
 80a1616:	4b15      	ldr	r3, [pc, #84]	; (80a166c <_Z9checkLinev+0x78>)
      prevFlagSet = true;				// ensures timer is reset only ONCE
 80a1618:	2001      	movs	r0, #1

void checkLine() {
  if (!FLflag || !FRflag || prevFlagSet) {				// if front line triggered
    if (!prevFlagSet) {					// and if this is the FIRST detection of the line
      RGB.color(255, 255, 255);
      prevFlag = cur;					// reset the turn timer
 80a161a:	681a      	ldr	r2, [r3, #0]
 80a161c:	4b14      	ldr	r3, [pc, #80]	; (80a1670 <_Z9checkLinev+0x7c>)
 80a161e:	601a      	str	r2, [r3, #0]
      prevFlagSet = true;				// ensures timer is reset only ONCE
 80a1620:	4b10      	ldr	r3, [pc, #64]	; (80a1664 <_Z9checkLinev+0x70>)
 80a1622:	7018      	strb	r0, [r3, #0]
      movement(1);						// stop before you fall off
 80a1624:	f7ff ffb2 	bl	80a158c <_Z8movementi>

  } else if(!prevFlagSet) {  // if a line hasn't been seen, continue fuzzy
    Serial.println("Doing Fuzzy");
    // prevFlagSet = false;	
  }
}
 80a1628:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a162c:	f7fe bdce 	b.w	80a01cc <_Z8movementi.part.5>
      prevFlag = cur;					// reset the turn timer
      prevFlagSet = true;				// ensures timer is reset only ONCE
      movement(1);						// stop before you fall off
    }
    movement(10);						// begin/continue the turn sequence
  } else if (!BRflag || !BLflag) {		// if back line triggered, move forward
 80a1630:	4b10      	ldr	r3, [pc, #64]	; (80a1674 <_Z9checkLinev+0x80>)
 80a1632:	781b      	ldrb	r3, [r3, #0]
 80a1634:	b113      	cbz	r3, 80a163c <_Z9checkLinev+0x48>
 80a1636:	4b10      	ldr	r3, [pc, #64]	; (80a1678 <_Z9checkLinev+0x84>)
 80a1638:	781b      	ldrb	r3, [r3, #0]
 80a163a:	b94b      	cbnz	r3, 80a1650 <_Z9checkLinev+0x5c>
    RGB.color(255, 255, 255);
 80a163c:	22ff      	movs	r2, #255	; 0xff
 80a163e:	4610      	mov	r0, r2
 80a1640:	4611      	mov	r1, r2
 80a1642:	f002 fa30 	bl	80a3aa6 <_ZN8RGBClass5colorEiii>

  } else if(!prevFlagSet) {  // if a line hasn't been seen, continue fuzzy
    Serial.println("Doing Fuzzy");
    // prevFlagSet = false;	
  }
}
 80a1646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      movement(1);						// stop before you fall off
    }
    movement(10);						// begin/continue the turn sequence
  } else if (!BRflag || !BLflag) {		// if back line triggered, move forward
    RGB.color(255, 255, 255);
    movement(0);
 80a164a:	2000      	movs	r0, #0
 80a164c:	f7ff bf9e 	b.w	80a158c <_Z8movementi>

    // prevFlagSet = true;

  } else if(!prevFlagSet) {  // if a line hasn't been seen, continue fuzzy
    Serial.println("Doing Fuzzy");
 80a1650:	f002 fb66 	bl	80a3d20 <_Z16_fetch_usbserialv>
    // prevFlagSet = false;	
  }
}
 80a1654:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    movement(0);

    // prevFlagSet = true;

  } else if(!prevFlagSet) {  // if a line hasn't been seen, continue fuzzy
    Serial.println("Doing Fuzzy");
 80a1658:	4908      	ldr	r1, [pc, #32]	; (80a167c <_Z9checkLinev+0x88>)
 80a165a:	f002 b9c8 	b.w	80a39ee <_ZN5Print7printlnEPKc>
 80a165e:	bf00      	nop
 80a1660:	20000324 	.word	0x20000324
 80a1664:	200003d0 	.word	0x200003d0
 80a1668:	20000325 	.word	0x20000325
 80a166c:	200003cc 	.word	0x200003cc
 80a1670:	200003b4 	.word	0x200003b4
 80a1674:	2000032c 	.word	0x2000032c
 80a1678:	20000310 	.word	0x20000310
 80a167c:	080a54a2 	.word	0x080a54a2

080a1680 <loop>:
    // prevFlagSet = false;	
  }
}

void loop(){
 80a1680:	b508      	push	{r3, lr}
	checkLine();
 80a1682:	f7ff ffb7 	bl	80a15f4 <_Z9checkLinev>
  // Serial.print(LM_distance);
  // Serial.print(" | ");
  // Serial.print("LL: ");
  // Serial.print(LL_distance);

	if (!prevFlagSet) {	// if dealing with line don't do fuzzy
 80a1686:	4b0e      	ldr	r3, [pc, #56]	; (80a16c0 <loop+0x40>)
 80a1688:	781b      	ldrb	r3, [r3, #0]
 80a168a:	b91b      	cbnz	r3, 80a1694 <loop+0x14>
		getToF();
 80a168c:	f7ff fe5a 	bl	80a1344 <_Z6getToFv>
		doFuzzy();
 80a1690:	f7ff fe7e 	bl	80a1390 <_Z7doFuzzyv>
 80a1694:	f001 fef4 	bl	80a3480 <HAL_Timer_Get_Milli_Seconds>
	}

  cur = millis();           // update timer
 80a1698:	4b0a      	ldr	r3, [pc, #40]	; (80a16c4 <loop+0x44>)
 80a169a:	6018      	str	r0, [r3, #0]

	checkSwitch();
 80a169c:	f7ff ff52 	bl	80a1544 <_Z11checkSwitchv>

  move(1, R_command, R_dir);
 80a16a0:	4b09      	ldr	r3, [pc, #36]	; (80a16c8 <loop+0x48>)
 80a16a2:	2001      	movs	r0, #1
 80a16a4:	681a      	ldr	r2, [r3, #0]
 80a16a6:	4b09      	ldr	r3, [pc, #36]	; (80a16cc <loop+0x4c>)
 80a16a8:	6819      	ldr	r1, [r3, #0]
 80a16aa:	f7ff ff5d 	bl	80a1568 <_Z4moveiii>
  move(2, L_command, L_dir);
 80a16ae:	4b08      	ldr	r3, [pc, #32]	; (80a16d0 <loop+0x50>)
 80a16b0:	2002      	movs	r0, #2
 80a16b2:	681a      	ldr	r2, [r3, #0]
 80a16b4:	4b07      	ldr	r3, [pc, #28]	; (80a16d4 <loop+0x54>)
 80a16b6:	6819      	ldr	r1, [r3, #0]
 80a16b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  cur = millis();           // update timer

	checkSwitch();

  move(1, R_command, R_dir);
  move(2, L_command, L_dir);
 80a16bc:	f7ff bf54 	b.w	80a1568 <_Z4moveiii>
 80a16c0:	200003d0 	.word	0x200003d0
 80a16c4:	200003cc 	.word	0x200003cc
 80a16c8:	20000304 	.word	0x20000304
 80a16cc:	2000040c 	.word	0x2000040c
 80a16d0:	20000320 	.word	0x20000320
 80a16d4:	200003d4 	.word	0x200003d4

080a16d8 <_GLOBAL__sub_I_sensor0>:
 80a16d8:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a16da:	f001 fe79 	bl	80a33d0 <HAL_Pin_Map>
#if !defined(PARTICLE)
#  include <Wire.h>
#endif

// Time of Flight sensors
VL53L0X sensor0;	// RR
 80a16de:	481d      	ldr	r0, [pc, #116]	; (80a1754 <_GLOBAL__sub_I_sensor0+0x7c>)
 80a16e0:	f000 f85a 	bl	80a1798 <_ZN7VL53L0XC1Ev>
VL53L0X sensor1;	// RM
 80a16e4:	481c      	ldr	r0, [pc, #112]	; (80a1758 <_GLOBAL__sub_I_sensor0+0x80>)
 80a16e6:	f000 f857 	bl	80a1798 <_ZN7VL53L0XC1Ev>
VL53L0X sensor2;	// LM
 80a16ea:	481c      	ldr	r0, [pc, #112]	; (80a175c <_GLOBAL__sub_I_sensor0+0x84>)
 80a16ec:	f000 f854 	bl	80a1798 <_ZN7VL53L0XC1Ev>
VL53L0X sensor3;	// LL
 80a16f0:	481b      	ldr	r0, [pc, #108]	; (80a1760 <_GLOBAL__sub_I_sensor0+0x88>)
 80a16f2:	f000 f851 	bl	80a1798 <_ZN7VL53L0XC1Ev>
// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
int curAccel = 0;
void getAccel();        // ISR prototype
LIS3DHSample sample;
LIS3DHI2C accel(Wire, 0, WKP);
 80a16f6:	f002 fd21 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a16fa:	2311      	movs	r3, #17
 80a16fc:	4601      	mov	r1, r0
 80a16fe:	2200      	movs	r2, #0
 80a1700:	4818      	ldr	r0, [pc, #96]	; (80a1764 <_GLOBAL__sub_I_sensor0+0x8c>)
 80a1702:	f000 ff4b 	bl	80a259c <_ZN9LIS3DHI2CC1ER7TwoWirehi>
 80a1706:	4a18      	ldr	r2, [pc, #96]	; (80a1768 <_GLOBAL__sub_I_sensor0+0x90>)
 80a1708:	4918      	ldr	r1, [pc, #96]	; (80a176c <_GLOBAL__sub_I_sensor0+0x94>)
 80a170a:	4816      	ldr	r0, [pc, #88]	; (80a1764 <_GLOBAL__sub_I_sensor0+0x8c>)
 80a170c:	f002 fd36 	bl	80a417c <__aeabi_atexit>

// Car ESCs
Servo LESC;
 80a1710:	4817      	ldr	r0, [pc, #92]	; (80a1770 <_GLOBAL__sub_I_sensor0+0x98>)
 80a1712:	f002 f886 	bl	80a3822 <_ZN5ServoC1Ev>
Servo RESC;
 80a1716:	4817      	ldr	r0, [pc, #92]	; (80a1774 <_GLOBAL__sub_I_sensor0+0x9c>)
 80a1718:	f002 f883 	bl	80a3822 <_ZN5ServoC1Ev>
int R_command = 0;
int L_dir = 1;
int R_dir = 1;

// Fuzzy logic
Fuzzy* fuzzy = new Fuzzy();
 80a171c:	2018      	movs	r0, #24
 80a171e:	f7fe fcbc 	bl	80a009a <_Znwj>
 80a1722:	4604      	mov	r4, r0
 80a1724:	b108      	cbz	r0, 80a172a <_GLOBAL__sub_I_sensor0+0x52>
 80a1726:	f001 fcc2 	bl	80a30ae <_ZN5FuzzyC1Ev>
 80a172a:	4b13      	ldr	r3, [pc, #76]	; (80a1778 <_GLOBAL__sub_I_sensor0+0xa0>)
float output;
String decision;
 80a172c:	4913      	ldr	r1, [pc, #76]	; (80a177c <_GLOBAL__sub_I_sensor0+0xa4>)
 80a172e:	4814      	ldr	r0, [pc, #80]	; (80a1780 <_GLOBAL__sub_I_sensor0+0xa8>)
int R_command = 0;
int L_dir = 1;
int R_dir = 1;

// Fuzzy logic
Fuzzy* fuzzy = new Fuzzy();
 80a1730:	601c      	str	r4, [r3, #0]
float output;
String decision;
 80a1732:	f002 f8ff 	bl	80a3934 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1736:	4a0c      	ldr	r2, [pc, #48]	; (80a1768 <_GLOBAL__sub_I_sensor0+0x90>)
 80a1738:	4912      	ldr	r1, [pc, #72]	; (80a1784 <_GLOBAL__sub_I_sensor0+0xac>)
 80a173a:	4811      	ldr	r0, [pc, #68]	; (80a1780 <_GLOBAL__sub_I_sensor0+0xa8>)
 80a173c:	f002 fd1e 	bl	80a417c <__aeabi_atexit>

// Particle Photon settings
SYSTEM_THREAD(ENABLED);
 80a1740:	2001      	movs	r0, #1
 80a1742:	2100      	movs	r1, #0
 80a1744:	f001 fff6 	bl	80a3734 <system_thread_set_state>

	checkSwitch();

  move(1, R_command, R_dir);
  move(2, L_command, L_dir);
 80a1748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a174c:	2003      	movs	r0, #3
 80a174e:	f001 bfe1 	b.w	80a3714 <set_system_mode>
 80a1752:	bf00      	nop
 80a1754:	2000036c 	.word	0x2000036c
 80a1758:	200003ec 	.word	0x200003ec
 80a175c:	20000384 	.word	0x20000384
 80a1760:	2000039c 	.word	0x2000039c
 80a1764:	20000354 	.word	0x20000354
 80a1768:	20000334 	.word	0x20000334
 80a176c:	080a2361 	.word	0x080a2361
 80a1770:	20000344 	.word	0x20000344
 80a1774:	200003b8 	.word	0x200003b8
 80a1778:	20000368 	.word	0x20000368
 80a177c:	080a5532 	.word	0x080a5532
 80a1780:	200003dc 	.word	0x200003dc
 80a1784:	080a38a7 	.word	0x080a38a7

080a1788 <_ZN7TwoWire5writeEm>:
  virtual int peek(void);
  virtual void flush(void);
  void onReceive(void (*)(int));
  void onRequest(void (*)(void));

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
 80a1788:	6803      	ldr	r3, [r0, #0]
 80a178a:	b2c9      	uxtb	r1, r1
 80a178c:	689b      	ldr	r3, [r3, #8]
 80a178e:	4718      	bx	r3

080a1790 <_ZN7TwoWire5writeEi>:
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a1790:	6803      	ldr	r3, [r0, #0]
 80a1792:	b2c9      	uxtb	r1, r1
 80a1794:	689b      	ldr	r3, [r3, #8]
 80a1796:	4718      	bx	r3

080a1798 <_ZN7VL53L0XC1Ev>:
// Constructors ////////////////////////////////////////////////////////////////

VL53L0X::VL53L0X(void)
  : address(ADDRESS_DEFAULT)
  , io_timeout(0) // no timeout
  , did_timeout(false)
 80a1798:	2229      	movs	r2, #41	; 0x29
 80a179a:	7042      	strb	r2, [r0, #1]
 80a179c:	2200      	movs	r2, #0
 80a179e:	6042      	str	r2, [r0, #4]
 80a17a0:	7202      	strb	r2, [r0, #8]
{
}
 80a17a2:	4770      	bx	lr

080a17a4 <_ZN7VL53L0X8writeRegEhh>:
  return true;
}

// Write an 8-bit register
void VL53L0X::writeReg(uint8_t reg, uint8_t value)
{
 80a17a4:	b570      	push	{r4, r5, r6, lr}
 80a17a6:	4604      	mov	r4, r0
 80a17a8:	4615      	mov	r5, r2
 80a17aa:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a17ac:	f002 fcc6 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a17b0:	7861      	ldrb	r1, [r4, #1]
 80a17b2:	f002 fc02 	bl	80a3fba <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a17b6:	f002 fcc1 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a17ba:	6803      	ldr	r3, [r0, #0]
 80a17bc:	4631      	mov	r1, r6
 80a17be:	689b      	ldr	r3, [r3, #8]
 80a17c0:	4798      	blx	r3
  Wire.write(value);
 80a17c2:	f002 fcbb 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a17c6:	6803      	ldr	r3, [r0, #0]
 80a17c8:	4629      	mov	r1, r5
 80a17ca:	689b      	ldr	r3, [r3, #8]
 80a17cc:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a17ce:	f002 fcb5 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a17d2:	f002 fbfa 	bl	80a3fca <_ZN7TwoWire15endTransmissionEv>
 80a17d6:	7020      	strb	r0, [r4, #0]
 80a17d8:	bd70      	pop	{r4, r5, r6, pc}

080a17da <_ZN7VL53L0X10setAddressEh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void VL53L0X::setAddress(uint8_t new_addr)
{
 80a17da:	b538      	push	{r3, r4, r5, lr}
 80a17dc:	4605      	mov	r5, r0
 80a17de:	460c      	mov	r4, r1
  writeReg(I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 80a17e0:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80a17e4:	218a      	movs	r1, #138	; 0x8a
 80a17e6:	f7ff ffdd 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  address = new_addr;
 80a17ea:	706c      	strb	r4, [r5, #1]
 80a17ec:	bd38      	pop	{r3, r4, r5, pc}

080a17ee <_ZN7VL53L0X13writeReg16BitEht>:
  last_status = Wire.endTransmission();
}

// Write a 16-bit register
void VL53L0X::writeReg16Bit(uint8_t reg, uint16_t value)
{
 80a17ee:	b570      	push	{r4, r5, r6, lr}
 80a17f0:	4604      	mov	r4, r0
 80a17f2:	4615      	mov	r5, r2
 80a17f4:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a17f6:	f002 fca1 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a17fa:	7861      	ldrb	r1, [r4, #1]
 80a17fc:	f002 fbdd 	bl	80a3fba <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a1800:	f002 fc9c 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a1804:	6803      	ldr	r3, [r0, #0]
 80a1806:	4631      	mov	r1, r6
 80a1808:	689b      	ldr	r3, [r3, #8]
 80a180a:	4798      	blx	r3
  Wire.write((value >> 8) & 0xFF); // value high byte
 80a180c:	f002 fc96 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a1810:	0a29      	lsrs	r1, r5, #8
 80a1812:	f7ff ffbd 	bl	80a1790 <_ZN7TwoWire5writeEi>
  Wire.write( value       & 0xFF); // value low byte
 80a1816:	f002 fc91 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a181a:	b2e9      	uxtb	r1, r5
 80a181c:	f7ff ffb8 	bl	80a1790 <_ZN7TwoWire5writeEi>
  last_status = Wire.endTransmission();
 80a1820:	f002 fc8c 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a1824:	f002 fbd1 	bl	80a3fca <_ZN7TwoWire15endTransmissionEv>
 80a1828:	7020      	strb	r0, [r4, #0]
 80a182a:	bd70      	pop	{r4, r5, r6, pc}

080a182c <_ZN7VL53L0X13writeReg32BitEhm>:
}

// Write a 32-bit register
void VL53L0X::writeReg32Bit(uint8_t reg, uint32_t value)
{
 80a182c:	b570      	push	{r4, r5, r6, lr}
 80a182e:	4605      	mov	r5, r0
 80a1830:	4614      	mov	r4, r2
 80a1832:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a1834:	f002 fc82 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a1838:	7869      	ldrb	r1, [r5, #1]
 80a183a:	f002 fbbe 	bl	80a3fba <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a183e:	f002 fc7d 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a1842:	6803      	ldr	r3, [r0, #0]
 80a1844:	4631      	mov	r1, r6
 80a1846:	689b      	ldr	r3, [r3, #8]
 80a1848:	4798      	blx	r3
  Wire.write((value >> 24) & 0xFF); // value highest byte
 80a184a:	f002 fc77 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a184e:	0e21      	lsrs	r1, r4, #24
 80a1850:	f7ff ff9a 	bl	80a1788 <_ZN7TwoWire5writeEm>
  Wire.write((value >> 16) & 0xFF);
 80a1854:	f002 fc72 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a1858:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80a185c:	f7ff ff94 	bl	80a1788 <_ZN7TwoWire5writeEm>
  Wire.write((value >>  8) & 0xFF);
 80a1860:	f002 fc6c 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a1864:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80a1868:	f7ff ff8e 	bl	80a1788 <_ZN7TwoWire5writeEm>
  Wire.write( value        & 0xFF); // value lowest byte
 80a186c:	f002 fc66 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a1870:	b2e1      	uxtb	r1, r4
 80a1872:	f7ff ff89 	bl	80a1788 <_ZN7TwoWire5writeEm>
  last_status = Wire.endTransmission();
 80a1876:	f002 fc61 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a187a:	f002 fba6 	bl	80a3fca <_ZN7TwoWire15endTransmissionEv>
 80a187e:	7028      	strb	r0, [r5, #0]
 80a1880:	bd70      	pop	{r4, r5, r6, pc}

080a1882 <_ZN7VL53L0X7readRegEh>:
}

// Read an 8-bit register
uint8_t VL53L0X::readReg(uint8_t reg)
{
 80a1882:	b538      	push	{r3, r4, r5, lr}
 80a1884:	4604      	mov	r4, r0
 80a1886:	460d      	mov	r5, r1
  uint8_t value;

  Wire.beginTransmission(address);
 80a1888:	f002 fc58 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a188c:	7861      	ldrb	r1, [r4, #1]
 80a188e:	f002 fb94 	bl	80a3fba <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a1892:	f002 fc53 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a1896:	6803      	ldr	r3, [r0, #0]
 80a1898:	4629      	mov	r1, r5
 80a189a:	689b      	ldr	r3, [r3, #8]
 80a189c:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a189e:	f002 fc4d 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a18a2:	f002 fb92 	bl	80a3fca <_ZN7TwoWire15endTransmissionEv>
 80a18a6:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)1);
 80a18a8:	f002 fc48 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a18ac:	2201      	movs	r2, #1
 80a18ae:	7861      	ldrb	r1, [r4, #1]
 80a18b0:	f002 fb7b 	bl	80a3faa <_ZN7TwoWire11requestFromEhh>
  value = Wire.read();
 80a18b4:	f002 fc42 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a18b8:	6803      	ldr	r3, [r0, #0]
 80a18ba:	695b      	ldr	r3, [r3, #20]
 80a18bc:	4798      	blx	r3

  return value;
}
 80a18be:	b2c0      	uxtb	r0, r0
 80a18c0:	bd38      	pop	{r3, r4, r5, pc}

080a18c2 <_ZN7VL53L0X12readReg16BitEh>:

// Read a 16-bit register
uint16_t VL53L0X::readReg16Bit(uint8_t reg)
{
 80a18c2:	b538      	push	{r3, r4, r5, lr}
 80a18c4:	4604      	mov	r4, r0
 80a18c6:	460d      	mov	r5, r1
  uint16_t value;

  Wire.beginTransmission(address);
 80a18c8:	f002 fc38 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a18cc:	7861      	ldrb	r1, [r4, #1]
 80a18ce:	f002 fb74 	bl	80a3fba <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a18d2:	f002 fc33 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a18d6:	6803      	ldr	r3, [r0, #0]
 80a18d8:	4629      	mov	r1, r5
 80a18da:	689b      	ldr	r3, [r3, #8]
 80a18dc:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a18de:	f002 fc2d 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a18e2:	f002 fb72 	bl	80a3fca <_ZN7TwoWire15endTransmissionEv>
 80a18e6:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)2);
 80a18e8:	f002 fc28 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a18ec:	7861      	ldrb	r1, [r4, #1]
 80a18ee:	2202      	movs	r2, #2
 80a18f0:	f002 fb5b 	bl	80a3faa <_ZN7TwoWire11requestFromEhh>
  value  = (uint16_t)Wire.read() << 8; // value high byte
 80a18f4:	f002 fc22 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a18f8:	6803      	ldr	r3, [r0, #0]
 80a18fa:	695b      	ldr	r3, [r3, #20]
 80a18fc:	4798      	blx	r3
 80a18fe:	4604      	mov	r4, r0
  value |=           Wire.read();      // value low byte
 80a1900:	f002 fc1c 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a1904:	6803      	ldr	r3, [r0, #0]
 80a1906:	695b      	ldr	r3, [r3, #20]
 80a1908:	4798      	blx	r3
 80a190a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8

  return value;
}
 80a190e:	b280      	uxth	r0, r0
 80a1910:	bd38      	pop	{r3, r4, r5, pc}

080a1912 <_ZN7VL53L0X10writeMultiEhPKhh>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
 80a1912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1914:	4606      	mov	r6, r0
 80a1916:	4614      	mov	r4, r2
 80a1918:	461d      	mov	r5, r3
 80a191a:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a191c:	f002 fc0e 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a1920:	7871      	ldrb	r1, [r6, #1]
 80a1922:	f002 fb4a 	bl	80a3fba <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a1926:	f002 fc09 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a192a:	6803      	ldr	r3, [r0, #0]
 80a192c:	4639      	mov	r1, r7
 80a192e:	689b      	ldr	r3, [r3, #8]
 80a1930:	4798      	blx	r3
 80a1932:	4425      	add	r5, r4

  while (count-- > 0)
 80a1934:	42ac      	cmp	r4, r5
 80a1936:	d007      	beq.n	80a1948 <_ZN7VL53L0X10writeMultiEhPKhh+0x36>
  {
    Wire.write(*(src++));
 80a1938:	f002 fc00 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a193c:	6803      	ldr	r3, [r0, #0]
 80a193e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1942:	689b      	ldr	r3, [r3, #8]
 80a1944:	4798      	blx	r3
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
  Wire.beginTransmission(address);
  Wire.write(reg);

  while (count-- > 0)
 80a1946:	e7f5      	b.n	80a1934 <_ZN7VL53L0X10writeMultiEhPKhh+0x22>
  {
    Wire.write(*(src++));
  }

  last_status = Wire.endTransmission();
 80a1948:	f002 fbf8 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a194c:	f002 fb3d 	bl	80a3fca <_ZN7TwoWire15endTransmissionEv>
 80a1950:	7030      	strb	r0, [r6, #0]
 80a1952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1954 <_ZN7VL53L0X9readMultiEhPhh>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void VL53L0X::readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 80a1954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1956:	4606      	mov	r6, r0
 80a1958:	4614      	mov	r4, r2
 80a195a:	461d      	mov	r5, r3
 80a195c:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a195e:	f002 fbed 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a1962:	7871      	ldrb	r1, [r6, #1]
 80a1964:	f002 fb29 	bl	80a3fba <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a1968:	f002 fbe8 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a196c:	6803      	ldr	r3, [r0, #0]
 80a196e:	4639      	mov	r1, r7
 80a1970:	689b      	ldr	r3, [r3, #8]
 80a1972:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a1974:	f002 fbe2 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a1978:	f002 fb27 	bl	80a3fca <_ZN7TwoWire15endTransmissionEv>
 80a197c:	7030      	strb	r0, [r6, #0]

  Wire.requestFrom(address, count);
 80a197e:	f002 fbdd 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a1982:	462a      	mov	r2, r5
 80a1984:	7871      	ldrb	r1, [r6, #1]
 80a1986:	f002 fb10 	bl	80a3faa <_ZN7TwoWire11requestFromEhh>
 80a198a:	4425      	add	r5, r4

  while (count-- > 0)
 80a198c:	42ac      	cmp	r4, r5
 80a198e:	d007      	beq.n	80a19a0 <_ZN7VL53L0X9readMultiEhPhh+0x4c>
  {
    *(dst++) = Wire.read();
 80a1990:	f002 fbd4 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a1994:	6803      	ldr	r3, [r0, #0]
 80a1996:	695b      	ldr	r3, [r3, #20]
 80a1998:	4798      	blx	r3
 80a199a:	f804 0b01 	strb.w	r0, [r4], #1
  Wire.write(reg);
  last_status = Wire.endTransmission();

  Wire.requestFrom(address, count);

  while (count-- > 0)
 80a199e:	e7f5      	b.n	80a198c <_ZN7VL53L0X9readMultiEhPhh+0x38>
 80a19a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a19a2:	0000      	movs	r0, r0
 80a19a4:	0000      	movs	r0, r0
	...

080a19a8 <_ZN7VL53L0X18setSignalRateLimitEf>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
 80a19a8:	b570      	push	{r4, r5, r6, lr}
 80a19aa:	460d      	mov	r5, r1
 80a19ac:	4606      	mov	r6, r0
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a19ae:	2100      	movs	r1, #0
 80a19b0:	4628      	mov	r0, r5
 80a19b2:	f003 fc7f 	bl	80a52b4 <__aeabi_fcmplt>
 80a19b6:	b9b0      	cbnz	r0, 80a19e6 <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>
 80a19b8:	4628      	mov	r0, r5
 80a19ba:	f002 fe91 	bl	80a46e0 <__aeabi_f2d>
 80a19be:	a30c      	add	r3, pc, #48	; (adr r3, 80a19f0 <_ZN7VL53L0X18setSignalRateLimitEf+0x48>)
 80a19c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a19c4:	f003 f970 	bl	80a4ca8 <__aeabi_dcmpgt>
 80a19c8:	b968      	cbnz	r0, 80a19e6 <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80a19ca:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80a19ce:	4628      	mov	r0, r5
 80a19d0:	f003 fad2 	bl	80a4f78 <__aeabi_fmul>
 80a19d4:	f003 fc96 	bl	80a5304 <__aeabi_f2uiz>
 80a19d8:	2144      	movs	r1, #68	; 0x44
 80a19da:	b282      	uxth	r2, r0
 80a19dc:	4630      	mov	r0, r6
 80a19de:	f7ff ff06 	bl	80a17ee <_ZN7VL53L0X13writeReg16BitEht>
 80a19e2:	2001      	movs	r0, #1
 80a19e4:	bd70      	pop	{r4, r5, r6, pc}
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a19e6:	2000      	movs	r0, #0
 80a19e8:	bd70      	pop	{r4, r5, r6, pc}
 80a19ea:	bf00      	nop
 80a19ec:	f3af 8000 	nop.w
 80a19f0:	0a3d70a4 	.word	0x0a3d70a4
 80a19f4:	407fffd7 	.word	0x407fffd7

080a19f8 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>:
}

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t VL53L0X::getVcselPulsePeriod(vcselPeriodType type)
{
 80a19f8:	b508      	push	{r3, lr}
  if (type == VcselPeriodPreRange)
 80a19fa:	b909      	cbnz	r1, 80a1a00 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x8>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80a19fc:	2150      	movs	r1, #80	; 0x50
 80a19fe:	e002      	b.n	80a1a06 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0xe>
  }
  else if (type == VcselPeriodFinalRange)
 80a1a00:	2901      	cmp	r1, #1
 80a1a02:	d106      	bne.n	80a1a12 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x1a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a1a04:	2170      	movs	r1, #112	; 0x70
 80a1a06:	f7ff ff3c 	bl	80a1882 <_ZN7VL53L0X7readRegEh>
 80a1a0a:	3001      	adds	r0, #1
 80a1a0c:	0040      	lsls	r0, r0, #1
 80a1a0e:	b2c0      	uxtb	r0, r0
 80a1a10:	bd08      	pop	{r3, pc}
  }
  else { return 255; }
 80a1a12:	20ff      	movs	r0, #255	; 0xff
}
 80a1a14:	bd08      	pop	{r3, pc}

080a1a16 <_ZN7VL53L0X15startContinuousEm>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X::startContinuous(uint32_t period_ms)
{
 80a1a16:	b538      	push	{r3, r4, r5, lr}
 80a1a18:	4604      	mov	r4, r0
 80a1a1a:	460d      	mov	r5, r1
  writeReg(0x80, 0x01);
 80a1a1c:	2201      	movs	r2, #1
 80a1a1e:	2180      	movs	r1, #128	; 0x80
 80a1a20:	f7ff fec0 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a1a24:	2201      	movs	r2, #1
 80a1a26:	21ff      	movs	r1, #255	; 0xff
 80a1a28:	4620      	mov	r0, r4
 80a1a2a:	f7ff febb 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a1a2e:	2200      	movs	r2, #0
 80a1a30:	4611      	mov	r1, r2
 80a1a32:	4620      	mov	r0, r4
 80a1a34:	f7ff feb6 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x91, stop_variable);
 80a1a38:	7c22      	ldrb	r2, [r4, #16]
 80a1a3a:	2191      	movs	r1, #145	; 0x91
 80a1a3c:	4620      	mov	r0, r4
 80a1a3e:	f7ff feb1 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a1a42:	2201      	movs	r2, #1
 80a1a44:	2100      	movs	r1, #0
 80a1a46:	4620      	mov	r0, r4
 80a1a48:	f7ff feac 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1a4c:	2200      	movs	r2, #0
 80a1a4e:	21ff      	movs	r1, #255	; 0xff
 80a1a50:	4620      	mov	r0, r4
 80a1a52:	f7ff fea7 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a1a56:	2200      	movs	r2, #0
 80a1a58:	2180      	movs	r1, #128	; 0x80
 80a1a5a:	4620      	mov	r0, r4
 80a1a5c:	f7ff fea2 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  if (period_ms != 0)
 80a1a60:	b16d      	cbz	r5, 80a1a7e <_ZN7VL53L0X15startContinuousEm+0x68>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 80a1a62:	21f8      	movs	r1, #248	; 0xf8
 80a1a64:	4620      	mov	r0, r4
 80a1a66:	f7ff ff2c 	bl	80a18c2 <_ZN7VL53L0X12readReg16BitEh>

    if (osc_calibrate_val != 0)
 80a1a6a:	b100      	cbz	r0, 80a1a6e <_ZN7VL53L0X15startContinuousEm+0x58>
    {
      period_ms *= osc_calibrate_val;
 80a1a6c:	4345      	muls	r5, r0
    }

    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 80a1a6e:	462a      	mov	r2, r5
 80a1a70:	2104      	movs	r1, #4
 80a1a72:	4620      	mov	r0, r4
 80a1a74:	f7ff feda 	bl	80a182c <_ZN7VL53L0X13writeReg32BitEhm>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 80a1a78:	2204      	movs	r2, #4
 80a1a7a:	2100      	movs	r1, #0
 80a1a7c:	e001      	b.n	80a1a82 <_ZN7VL53L0X15startContinuousEm+0x6c>
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a1a7e:	4629      	mov	r1, r5
 80a1a80:	2202      	movs	r2, #2
 80a1a82:	4620      	mov	r0, r4
  }
}
 80a1a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a1a88:	f7ff be8c 	b.w	80a17a4 <_ZN7VL53L0X8writeRegEhh>

080a1a8c <_ZN7VL53L0X30readRangeContinuousMillimetersEv>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t VL53L0X::readRangeContinuousMillimeters(void)
{
 80a1a8c:	b538      	push	{r3, r4, r5, lr}
 80a1a8e:	4604      	mov	r4, r0
 80a1a90:	f001 fcf6 	bl	80a3480 <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a1a94:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a1a96:	2113      	movs	r1, #19
 80a1a98:	4620      	mov	r0, r4
 80a1a9a:	f7ff fef2 	bl	80a1882 <_ZN7VL53L0X7readRegEh>
 80a1a9e:	0743      	lsls	r3, r0, #29
 80a1aa0:	d10e      	bne.n	80a1ac0 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0x34>
  {
    if (checkTimeoutExpired())
 80a1aa2:	6863      	ldr	r3, [r4, #4]
 80a1aa4:	2b00      	cmp	r3, #0
 80a1aa6:	d0f6      	beq.n	80a1a96 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
 80a1aa8:	f001 fcea 	bl	80a3480 <HAL_Timer_Get_Milli_Seconds>
 80a1aac:	68e3      	ldr	r3, [r4, #12]
 80a1aae:	1ac0      	subs	r0, r0, r3
 80a1ab0:	6863      	ldr	r3, [r4, #4]
 80a1ab2:	4298      	cmp	r0, r3
 80a1ab4:	d9ef      	bls.n	80a1a96 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
    {
      did_timeout = true;
 80a1ab6:	2301      	movs	r3, #1
 80a1ab8:	7223      	strb	r3, [r4, #8]
      return 65535;
 80a1aba:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  return range;
}
 80a1abe:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);
 80a1ac0:	211e      	movs	r1, #30
 80a1ac2:	4620      	mov	r0, r4
 80a1ac4:	f7ff fefd 	bl	80a18c2 <_ZN7VL53L0X12readReg16BitEh>
 80a1ac8:	4605      	mov	r5, r0

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a1aca:	2201      	movs	r2, #1
 80a1acc:	4620      	mov	r0, r4
 80a1ace:	210b      	movs	r1, #11
 80a1ad0:	f7ff fe68 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
 80a1ad4:	4628      	mov	r0, r5
 80a1ad6:	bd38      	pop	{r3, r4, r5, pc}

080a1ad8 <_ZN7VL53L0X11getSpadInfoEPhPb>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X::getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80a1ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1ada:	4604      	mov	r4, r0
 80a1adc:	460f      	mov	r7, r1
 80a1ade:	4616      	mov	r6, r2
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80a1ae0:	2180      	movs	r1, #128	; 0x80
 80a1ae2:	2201      	movs	r2, #1
 80a1ae4:	f7ff fe5e 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a1ae8:	2201      	movs	r2, #1
 80a1aea:	21ff      	movs	r1, #255	; 0xff
 80a1aec:	4620      	mov	r0, r4
 80a1aee:	f7ff fe59 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a1af2:	2200      	movs	r2, #0
 80a1af4:	4611      	mov	r1, r2
 80a1af6:	4620      	mov	r0, r4
 80a1af8:	f7ff fe54 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x06);
 80a1afc:	2206      	movs	r2, #6
 80a1afe:	21ff      	movs	r1, #255	; 0xff
 80a1b00:	4620      	mov	r0, r4
 80a1b02:	f7ff fe4f 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg(0x83) | 0x04);
 80a1b06:	2183      	movs	r1, #131	; 0x83
 80a1b08:	4620      	mov	r0, r4
 80a1b0a:	f7ff feba 	bl	80a1882 <_ZN7VL53L0X7readRegEh>
 80a1b0e:	f040 0204 	orr.w	r2, r0, #4
 80a1b12:	b2d2      	uxtb	r2, r2
 80a1b14:	2183      	movs	r1, #131	; 0x83
 80a1b16:	4620      	mov	r0, r4
 80a1b18:	f7ff fe44 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x07);
 80a1b1c:	2207      	movs	r2, #7
 80a1b1e:	21ff      	movs	r1, #255	; 0xff
 80a1b20:	4620      	mov	r0, r4
 80a1b22:	f7ff fe3f 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x81, 0x01);
 80a1b26:	2201      	movs	r2, #1
 80a1b28:	2181      	movs	r1, #129	; 0x81
 80a1b2a:	4620      	mov	r0, r4
 80a1b2c:	f7ff fe3a 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a1b30:	2201      	movs	r2, #1
 80a1b32:	2180      	movs	r1, #128	; 0x80
 80a1b34:	4620      	mov	r0, r4
 80a1b36:	f7ff fe35 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x94, 0x6b);
 80a1b3a:	226b      	movs	r2, #107	; 0x6b
 80a1b3c:	2194      	movs	r1, #148	; 0x94
 80a1b3e:	4620      	mov	r0, r4
 80a1b40:	f7ff fe30 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, 0x00);
 80a1b44:	2200      	movs	r2, #0
 80a1b46:	2183      	movs	r1, #131	; 0x83
 80a1b48:	4620      	mov	r0, r4
 80a1b4a:	f7ff fe2b 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
 80a1b4e:	f001 fc97 	bl	80a3480 <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a1b52:	60e0      	str	r0, [r4, #12]
  while (readReg(0x83) == 0x00)
 80a1b54:	2183      	movs	r1, #131	; 0x83
 80a1b56:	4620      	mov	r0, r4
 80a1b58:	f7ff fe93 	bl	80a1882 <_ZN7VL53L0X7readRegEh>
 80a1b5c:	4605      	mov	r5, r0
 80a1b5e:	b958      	cbnz	r0, 80a1b78 <_ZN7VL53L0X11getSpadInfoEPhPb+0xa0>
  {
    if (checkTimeoutExpired()) { return false; }
 80a1b60:	6863      	ldr	r3, [r4, #4]
 80a1b62:	2b00      	cmp	r3, #0
 80a1b64:	d0f6      	beq.n	80a1b54 <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a1b66:	f001 fc8b 	bl	80a3480 <HAL_Timer_Get_Milli_Seconds>
 80a1b6a:	68e3      	ldr	r3, [r4, #12]
 80a1b6c:	1ac0      	subs	r0, r0, r3
 80a1b6e:	6863      	ldr	r3, [r4, #4]
 80a1b70:	4298      	cmp	r0, r3
 80a1b72:	d9ef      	bls.n	80a1b54 <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a1b74:	4628      	mov	r0, r5

  writeReg(0xFF, 0x00);
  writeReg(0x80, 0x00);

  return true;
}
 80a1b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  startTimeout();
  while (readReg(0x83) == 0x00)
  {
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
 80a1b78:	2201      	movs	r2, #1
 80a1b7a:	4620      	mov	r0, r4
 80a1b7c:	2183      	movs	r1, #131	; 0x83
 80a1b7e:	f7ff fe11 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  tmp = readReg(0x92);
 80a1b82:	2192      	movs	r1, #146	; 0x92
 80a1b84:	4620      	mov	r0, r4
 80a1b86:	f7ff fe7c 	bl	80a1882 <_ZN7VL53L0X7readRegEh>

  *count = tmp & 0x7f;
 80a1b8a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a1b8e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
 80a1b92:	703b      	strb	r3, [r7, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;

  writeReg(0x81, 0x00);
 80a1b94:	2200      	movs	r2, #0
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a1b96:	7030      	strb	r0, [r6, #0]

  writeReg(0x81, 0x00);
 80a1b98:	2181      	movs	r1, #129	; 0x81
 80a1b9a:	4620      	mov	r0, r4
 80a1b9c:	f7ff fe02 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x06);
 80a1ba0:	2206      	movs	r2, #6
 80a1ba2:	4620      	mov	r0, r4
 80a1ba4:	21ff      	movs	r1, #255	; 0xff
 80a1ba6:	f7ff fdfd 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg( 0x83  & ~0x04));
 80a1baa:	2183      	movs	r1, #131	; 0x83
 80a1bac:	4620      	mov	r0, r4
 80a1bae:	f7ff fe68 	bl	80a1882 <_ZN7VL53L0X7readRegEh>
 80a1bb2:	2183      	movs	r1, #131	; 0x83
 80a1bb4:	4602      	mov	r2, r0
 80a1bb6:	4620      	mov	r0, r4
 80a1bb8:	f7ff fdf4 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a1bbc:	4620      	mov	r0, r4
 80a1bbe:	2201      	movs	r2, #1
 80a1bc0:	21ff      	movs	r1, #255	; 0xff
 80a1bc2:	f7ff fdef 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a1bc6:	4620      	mov	r0, r4
 80a1bc8:	2201      	movs	r2, #1
 80a1bca:	2100      	movs	r1, #0
 80a1bcc:	f7ff fdea 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1bd0:	4620      	mov	r0, r4
 80a1bd2:	2200      	movs	r2, #0
 80a1bd4:	21ff      	movs	r1, #255	; 0xff
 80a1bd6:	f7ff fde5 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a1bda:	4620      	mov	r0, r4
 80a1bdc:	2200      	movs	r2, #0
 80a1bde:	2180      	movs	r1, #128	; 0x80
 80a1be0:	f7ff fde0 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  return true;
 80a1be4:	2001      	movs	r0, #1
 80a1be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1be8 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>:
}

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X::getSequenceStepEnables(SequenceStepEnables * enables)
{
 80a1be8:	b510      	push	{r4, lr}
 80a1bea:	460c      	mov	r4, r1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 80a1bec:	2101      	movs	r1, #1
 80a1bee:	f7ff fe48 	bl	80a1882 <_ZN7VL53L0X7readRegEh>

  enables->tcc          = (sequence_config >> 4) & 0x1;
 80a1bf2:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80a1bf6:	7023      	strb	r3, [r4, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 80a1bf8:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80a1bfc:	70a3      	strb	r3, [r4, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 80a1bfe:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80a1c02:	7063      	strb	r3, [r4, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a1c04:	f3c0 1380 	ubfx	r3, r0, #6, #1
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a1c08:	f3c0 10c0 	ubfx	r0, r0, #7, #1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);

  enables->tcc          = (sequence_config >> 4) & 0x1;
  enables->dss          = (sequence_config >> 3) & 0x1;
  enables->msrc         = (sequence_config >> 2) & 0x1;
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a1c0c:	70e3      	strb	r3, [r4, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a1c0e:	7120      	strb	r0, [r4, #4]
 80a1c10:	bd10      	pop	{r4, pc}

080a1c12 <_ZN7VL53L0X13decodeTimeoutEm>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X::decodeTimeout(uint32_t reg_val)
{
 80a1c12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a1c16:	4298      	cmp	r0, r3
 80a1c18:	bf28      	it	cs
 80a1c1a:	4618      	movcs	r0, r3
  if (reg_val > 0xFFFF) reg_val = 0xFFFF;
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80a1c1c:	b2c3      	uxtb	r3, r0
 80a1c1e:	0a00      	lsrs	r0, r0, #8
 80a1c20:	fa03 f000 	lsl.w	r0, r3, r0
 80a1c24:	3001      	adds	r0, #1
}
 80a1c26:	b280      	uxth	r0, r0
 80a1c28:	4770      	bx	lr

080a1c2a <_ZN7VL53L0X13encodeTimeoutEm>:
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a1c2a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80a1c2e:	d201      	bcs.n	80a1c34 <_ZN7VL53L0X13encodeTimeoutEm+0xa>

  // format: "(LSByte * 2^MSByte) + 1"
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
 80a1c30:	b178      	cbz	r0, 80a1c52 <_ZN7VL53L0X13encodeTimeoutEm+0x28>
 80a1c32:	e001      	b.n	80a1c38 <_ZN7VL53L0X13encodeTimeoutEm+0xe>
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a1c34:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;
 80a1c38:	3801      	subs	r0, #1
 80a1c3a:	2300      	movs	r3, #0

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a1c3c:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 80a1c40:	b29a      	uxth	r2, r3
 80a1c42:	f103 0301 	add.w	r3, r3, #1
 80a1c46:	d001      	beq.n	80a1c4c <_ZN7VL53L0X13encodeTimeoutEm+0x22>
    {
      ls_byte >>= 1;
 80a1c48:	0840      	lsrs	r0, r0, #1

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a1c4a:	e7f7      	b.n	80a1c3c <_ZN7VL53L0X13encodeTimeoutEm+0x12>
    {
      ls_byte >>= 1;
      ms_byte++;
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 80a1c4c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80a1c50:	b280      	uxth	r0, r0
  }
  else { return 0; }
}
 80a1c52:	4770      	bx	lr

080a1c54 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1c54:	4b08      	ldr	r3, [pc, #32]	; (80a1c78 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh+0x24>)

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a1c56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1c5a:	4359      	muls	r1, r3
}

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80a1c5c:	b510      	push	{r4, lr}
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1c5e:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a1c62:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 80a1c66:	fbb1 f3f2 	udiv	r3, r1, r2
 80a1c6a:	fbb1 f1f4 	udiv	r1, r1, r4
 80a1c6e:	fb00 1003 	mla	r0, r0, r3, r1
}
 80a1c72:	fbb0 f0f2 	udiv	r0, r0, r2
 80a1c76:	bd10      	pop	{r4, pc}
 80a1c78:	003a2f00 	.word	0x003a2f00

080a1c7c <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a1c7c:	b570      	push	{r4, r5, r6, lr}
 80a1c7e:	460e      	mov	r6, r1
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a1c80:	2100      	movs	r1, #0
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a1c82:	4614      	mov	r4, r2
 80a1c84:	4605      	mov	r5, r0
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a1c86:	f7ff feb7 	bl	80a19f8 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a1c8a:	2146      	movs	r1, #70	; 0x46
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a1c8c:	8020      	strh	r0, [r4, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a1c8e:	4628      	mov	r0, r5
 80a1c90:	f7ff fdf7 	bl	80a1882 <_ZN7VL53L0X7readRegEh>
 80a1c94:	3001      	adds	r0, #1
 80a1c96:	b280      	uxth	r0, r0
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a1c98:	7821      	ldrb	r1, [r4, #0]
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a1c9a:	80a0      	strh	r0, [r4, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a1c9c:	f7ff ffda 	bl	80a1c54 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a1ca0:	2151      	movs	r1, #81	; 0x51
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a1ca2:	60e0      	str	r0, [r4, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a1ca4:	4628      	mov	r0, r5
 80a1ca6:	f7ff fe0c 	bl	80a18c2 <_ZN7VL53L0X12readReg16BitEh>
 80a1caa:	f7ff ffb2 	bl	80a1c12 <_ZN7VL53L0X13decodeTimeoutEm>
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a1cae:	7821      	ldrb	r1, [r4, #0]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a1cb0:	80e0      	strh	r0, [r4, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a1cb2:	f7ff ffcf 	bl	80a1c54 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a1cb6:	2170      	movs	r1, #112	; 0x70

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a1cb8:	6120      	str	r0, [r4, #16]
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a1cba:	4628      	mov	r0, r5
 80a1cbc:	f7ff fde1 	bl	80a1882 <_ZN7VL53L0X7readRegEh>
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 80a1cc0:	3001      	adds	r0, #1
 80a1cc2:	0040      	lsls	r0, r0, #1
 80a1cc4:	b2c0      	uxtb	r0, r0
 80a1cc6:	8060      	strh	r0, [r4, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a1cc8:	2171      	movs	r1, #113	; 0x71
 80a1cca:	4628      	mov	r0, r5
 80a1ccc:	f7ff fdf9 	bl	80a18c2 <_ZN7VL53L0X12readReg16BitEh>
 80a1cd0:	f7ff ff9f 	bl	80a1c12 <_ZN7VL53L0X13decodeTimeoutEm>
 80a1cd4:	8120      	strh	r0, [r4, #8]

  if (enables->pre_range)
 80a1cd6:	78f3      	ldrb	r3, [r6, #3]
 80a1cd8:	b113      	cbz	r3, 80a1ce0 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE+0x64>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 80a1cda:	88e3      	ldrh	r3, [r4, #6]
 80a1cdc:	1ac0      	subs	r0, r0, r3
 80a1cde:	8120      	strh	r0, [r4, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 80a1ce0:	78a1      	ldrb	r1, [r4, #2]
 80a1ce2:	8920      	ldrh	r0, [r4, #8]
 80a1ce4:	f7ff ffb6 	bl	80a1c54 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->final_range_vcsel_period_pclks);
 80a1ce8:	6160      	str	r0, [r4, #20]
 80a1cea:	bd70      	pop	{r4, r5, r6, pc}

080a1cec <_ZN7VL53L0X26getMeasurementTimingBudgetEv>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t VL53L0X::getMeasurementTimingBudget(void)
{
 80a1cec:	b510      	push	{r4, lr}
 80a1cee:	4604      	mov	r4, r0
 80a1cf0:	b088      	sub	sp, #32
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a1cf2:	4669      	mov	r1, sp
 80a1cf4:	f7ff ff78 	bl	80a1be8 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a1cf8:	aa02      	add	r2, sp, #8
 80a1cfa:	4669      	mov	r1, sp
 80a1cfc:	4620      	mov	r0, r4
 80a1cfe:	f7ff ffbd 	bl	80a1c7c <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a1d02:	f89d 3000 	ldrb.w	r3, [sp]
 80a1d06:	b11b      	cbz	r3, 80a1d10 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x24>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a1d08:	9805      	ldr	r0, [sp, #20]
 80a1d0a:	f600 5084 	addw	r0, r0, #3460	; 0xd84
 80a1d0e:	e001      	b.n	80a1d14 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x28>
  uint16_t const DssOverhead        = 690;
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80a1d10:	f640 3036 	movw	r0, #2870	; 0xb36
  if (enables.tcc)
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a1d14:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a1d18:	b12b      	cbz	r3, 80a1d26 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x3a>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a1d1a:	9b05      	ldr	r3, [sp, #20]
 80a1d1c:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a1d20:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a1d24:	e006      	b.n	80a1d34 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  }
  else if (enables.msrc)
 80a1d26:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a1d2a:	b11b      	cbz	r3, 80a1d34 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a1d2c:	9b05      	ldr	r3, [sp, #20]
 80a1d2e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a1d32:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a1d34:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80a1d38:	b11b      	cbz	r3, 80a1d42 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x56>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a1d3a:	9b06      	ldr	r3, [sp, #24]
 80a1d3c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a1d40:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a1d42:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a1d46:	b11b      	cbz	r3, 80a1d50 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x64>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80a1d48:	9b07      	ldr	r3, [sp, #28]
 80a1d4a:	f203 2326 	addw	r3, r3, #550	; 0x226
 80a1d4e:	4418      	add	r0, r3
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 80a1d50:	6160      	str	r0, [r4, #20]
  return budget_us;
}
 80a1d52:	b008      	add	sp, #32
 80a1d54:	bd10      	pop	{r4, pc}
	...

080a1d58 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1d58:	4b08      	ldr	r3, [pc, #32]	; (80a1d7c <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh+0x24>)

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a1d5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1d5e:	4359      	muls	r1, r3

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a1d60:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1d64:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a1d68:	fbb1 f3f3 	udiv	r3, r1, r3
 80a1d6c:	fbb1 f1f2 	udiv	r1, r1, r2
 80a1d70:	fb02 3000 	mla	r0, r2, r0, r3
}
 80a1d74:	fbb0 f0f1 	udiv	r0, r0, r1
 80a1d78:	4770      	bx	lr
 80a1d7a:	bf00      	nop
 80a1d7c:	003a2f00 	.word	0x003a2f00

080a1d80 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>:
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a1d80:	f644 631f 	movw	r3, #19999	; 0x4e1f
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a1d84:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a1d86:	4299      	cmp	r1, r3
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a1d88:	b089      	sub	sp, #36	; 0x24
 80a1d8a:	4606      	mov	r6, r0
 80a1d8c:	460d      	mov	r5, r1
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a1d8e:	d942      	bls.n	80a1e16 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>

  uint32_t used_budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a1d90:	4669      	mov	r1, sp
 80a1d92:	f7ff ff29 	bl	80a1be8 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a1d96:	aa02      	add	r2, sp, #8
 80a1d98:	4669      	mov	r1, sp
 80a1d9a:	4630      	mov	r0, r6
 80a1d9c:	f7ff ff6e 	bl	80a1c7c <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a1da0:	f89d 3000 	ldrb.w	r3, [sp]
 80a1da4:	b11b      	cbz	r3, 80a1dae <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x2e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a1da6:	9805      	ldr	r0, [sp, #20]
 80a1da8:	f600 3036 	addw	r0, r0, #2870	; 0xb36
 80a1dac:	e001      	b.n	80a1db2 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x32>

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80a1dae:	f640 00e8 	movw	r0, #2280	; 0x8e8
  if (enables.tcc)
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a1db2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a1db6:	b12b      	cbz	r3, 80a1dc4 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x44>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a1db8:	9b05      	ldr	r3, [sp, #20]
 80a1dba:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a1dbe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a1dc2:	e006      	b.n	80a1dd2 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  }
  else if (enables.msrc)
 80a1dc4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a1dc8:	b11b      	cbz	r3, 80a1dd2 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a1dca:	9b05      	ldr	r3, [sp, #20]
 80a1dcc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a1dd0:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a1dd2:	f89d 7003 	ldrb.w	r7, [sp, #3]
 80a1dd6:	b11f      	cbz	r7, 80a1de0 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x60>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a1dd8:	9b06      	ldr	r3, [sp, #24]
 80a1dda:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a1dde:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a1de0:	f89d 4004 	ldrb.w	r4, [sp, #4]
 80a1de4:	b1ac      	cbz	r4, 80a1e12 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x92>
  {
    used_budget_us += FinalRangeOverhead;
 80a1de6:	f200 2026 	addw	r0, r0, #550	; 0x226
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80a1dea:	4285      	cmp	r5, r0
 80a1dec:	d313      	bcc.n	80a1e16 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint32_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80a1dee:	f89d 100a 	ldrb.w	r1, [sp, #10]
 80a1df2:	1a28      	subs	r0, r5, r0
 80a1df4:	f7ff ffb0 	bl	80a1d58 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>

    if (enables.pre_range)
 80a1df8:	b117      	cbz	r7, 80a1e00 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x80>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80a1dfa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80a1dfe:	4418      	add	r0, r3
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80a1e00:	f7ff ff13 	bl	80a1c2a <_ZN7VL53L0X13encodeTimeoutEm>
      encodeTimeout(final_range_timeout_mclks));
 80a1e04:	2171      	movs	r1, #113	; 0x71
 80a1e06:	4602      	mov	r2, r0
 80a1e08:	4630      	mov	r0, r6
 80a1e0a:	f7ff fcf0 	bl	80a17ee <_ZN7VL53L0X13writeReg16BitEht>

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 80a1e0e:	6175      	str	r5, [r6, #20]
 80a1e10:	e002      	b.n	80a1e18 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  }
  return true;
 80a1e12:	2401      	movs	r4, #1
 80a1e14:	e000      	b.n	80a1e18 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a1e16:	2400      	movs	r4, #0
    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
  }
  return true;
}
 80a1e18:	4620      	mov	r0, r4
 80a1e1a:	b009      	add	sp, #36	; 0x24
 80a1e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1e1e <_ZN7VL53L0X27performSingleRefCalibrationEh>:
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a1e1e:	b538      	push	{r3, r4, r5, lr}
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a1e20:	f041 0201 	orr.w	r2, r1, #1
 80a1e24:	2100      	movs	r1, #0
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a1e26:	4604      	mov	r4, r0
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a1e28:	f7ff fcbc 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
 80a1e2c:	f001 fb28 	bl	80a3480 <HAL_Timer_Get_Milli_Seconds>

  startTimeout();
 80a1e30:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a1e32:	2113      	movs	r1, #19
 80a1e34:	4620      	mov	r0, r4
 80a1e36:	f7ff fd24 	bl	80a1882 <_ZN7VL53L0X7readRegEh>
 80a1e3a:	f010 0507 	ands.w	r5, r0, #7
 80a1e3e:	d10b      	bne.n	80a1e58 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x3a>
  {
    if (checkTimeoutExpired()) { return false; }
 80a1e40:	6863      	ldr	r3, [r4, #4]
 80a1e42:	2b00      	cmp	r3, #0
 80a1e44:	d0f5      	beq.n	80a1e32 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a1e46:	f001 fb1b 	bl	80a3480 <HAL_Timer_Get_Milli_Seconds>
 80a1e4a:	68e3      	ldr	r3, [r4, #12]
 80a1e4c:	1ac0      	subs	r0, r0, r3
 80a1e4e:	6863      	ldr	r3, [r4, #4]
 80a1e50:	4298      	cmp	r0, r3
 80a1e52:	d9ee      	bls.n	80a1e32 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a1e54:	4628      	mov	r0, r5
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  writeReg(SYSRANGE_START, 0x00);

  return true;
}
 80a1e56:	bd38      	pop	{r3, r4, r5, pc}
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
  {
    if (checkTimeoutExpired()) { return false; }
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a1e58:	4620      	mov	r0, r4
 80a1e5a:	2201      	movs	r2, #1
 80a1e5c:	210b      	movs	r1, #11
 80a1e5e:	f7ff fca1 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  writeReg(SYSRANGE_START, 0x00);
 80a1e62:	2200      	movs	r2, #0
 80a1e64:	4620      	mov	r0, r4
 80a1e66:	4611      	mov	r1, r2
 80a1e68:	f7ff fc9c 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
 80a1e6c:	2001      	movs	r0, #1
 80a1e6e:	bd38      	pop	{r3, r4, r5, pc}

080a1e70 <_ZN7VL53L0X4initEb>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool VL53L0X::init(bool io_2v8)
{
 80a1e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1e72:	4604      	mov	r4, r0
 80a1e74:	b085      	sub	sp, #20
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 80a1e76:	b149      	cbz	r1, 80a1e8c <_ZN7VL53L0X4initEb+0x1c>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 80a1e78:	2189      	movs	r1, #137	; 0x89
 80a1e7a:	f7ff fd02 	bl	80a1882 <_ZN7VL53L0X7readRegEh>
 80a1e7e:	f040 0201 	orr.w	r2, r0, #1
 80a1e82:	b2d2      	uxtb	r2, r2
 80a1e84:	2189      	movs	r1, #137	; 0x89
 80a1e86:	4620      	mov	r0, r4
 80a1e88:	f7ff fc8c 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 80a1e8c:	2200      	movs	r2, #0
 80a1e8e:	2188      	movs	r1, #136	; 0x88
 80a1e90:	4620      	mov	r0, r4
 80a1e92:	f7ff fc87 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a1e96:	2201      	movs	r2, #1
 80a1e98:	2180      	movs	r1, #128	; 0x80
 80a1e9a:	4620      	mov	r0, r4
 80a1e9c:	f7ff fc82 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a1ea0:	2201      	movs	r2, #1
 80a1ea2:	21ff      	movs	r1, #255	; 0xff
 80a1ea4:	4620      	mov	r0, r4
 80a1ea6:	f7ff fc7d 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a1eaa:	2200      	movs	r2, #0
 80a1eac:	4611      	mov	r1, r2
 80a1eae:	4620      	mov	r0, r4
 80a1eb0:	f7ff fc78 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  stop_variable = readReg(0x91);
 80a1eb4:	2191      	movs	r1, #145	; 0x91
 80a1eb6:	4620      	mov	r0, r4
 80a1eb8:	f7ff fce3 	bl	80a1882 <_ZN7VL53L0X7readRegEh>
  writeReg(0x00, 0x01);
 80a1ebc:	2201      	movs	r2, #1
  writeReg(0x88, 0x00);

  writeReg(0x80, 0x01);
  writeReg(0xFF, 0x01);
  writeReg(0x00, 0x00);
  stop_variable = readReg(0x91);
 80a1ebe:	7420      	strb	r0, [r4, #16]
  writeReg(0x00, 0x01);
 80a1ec0:	2100      	movs	r1, #0
 80a1ec2:	4620      	mov	r0, r4
 80a1ec4:	f7ff fc6e 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1ec8:	2200      	movs	r2, #0
 80a1eca:	21ff      	movs	r1, #255	; 0xff
 80a1ecc:	4620      	mov	r0, r4
 80a1ece:	f7ff fc69 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a1ed2:	2200      	movs	r2, #0
 80a1ed4:	2180      	movs	r1, #128	; 0x80
 80a1ed6:	4620      	mov	r0, r4
 80a1ed8:	f7ff fc64 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80a1edc:	2160      	movs	r1, #96	; 0x60
 80a1ede:	4620      	mov	r0, r4
 80a1ee0:	f7ff fccf 	bl	80a1882 <_ZN7VL53L0X7readRegEh>
 80a1ee4:	f040 0212 	orr.w	r2, r0, #18
 80a1ee8:	b2d2      	uxtb	r2, r2
 80a1eea:	2160      	movs	r1, #96	; 0x60
 80a1eec:	4620      	mov	r0, r4
 80a1eee:	f7ff fc59 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80a1ef2:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a1ef6:	4620      	mov	r0, r4
 80a1ef8:	f7ff fd56 	bl	80a19a8 <_ZN7VL53L0X18setSignalRateLimitEf>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80a1efc:	22ff      	movs	r2, #255	; 0xff
 80a1efe:	2101      	movs	r1, #1
 80a1f00:	4620      	mov	r0, r4
 80a1f02:	f7ff fc4f 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80a1f06:	f10d 0207 	add.w	r2, sp, #7
 80a1f0a:	f10d 0106 	add.w	r1, sp, #6
 80a1f0e:	4620      	mov	r0, r4
 80a1f10:	f7ff fde2 	bl	80a1ad8 <_ZN7VL53L0X11getSpadInfoEPhPb>
 80a1f14:	b908      	cbnz	r0, 80a1f1a <_ZN7VL53L0X4initEb+0xaa>
 80a1f16:	2500      	movs	r5, #0
 80a1f18:	e21d      	b.n	80a2356 <_ZN7VL53L0X4initEb+0x4e6>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a1f1a:	2306      	movs	r3, #6
 80a1f1c:	aa02      	add	r2, sp, #8
 80a1f1e:	21b0      	movs	r1, #176	; 0xb0
 80a1f20:	4620      	mov	r0, r4
 80a1f22:	f7ff fd17 	bl	80a1954 <_ZN7VL53L0X9readMultiEhPhh>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 80a1f26:	2201      	movs	r2, #1
 80a1f28:	21ff      	movs	r1, #255	; 0xff
 80a1f2a:	4620      	mov	r0, r4
 80a1f2c:	f7ff fc3a 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80a1f30:	2200      	movs	r2, #0
 80a1f32:	214f      	movs	r1, #79	; 0x4f
 80a1f34:	4620      	mov	r0, r4
 80a1f36:	f7ff fc35 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80a1f3a:	222c      	movs	r2, #44	; 0x2c
 80a1f3c:	214e      	movs	r1, #78	; 0x4e
 80a1f3e:	4620      	mov	r0, r4
 80a1f40:	f7ff fc30 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1f44:	2200      	movs	r2, #0
 80a1f46:	21ff      	movs	r1, #255	; 0xff
 80a1f48:	4620      	mov	r0, r4
 80a1f4a:	f7ff fc2b 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1f4e:	2500      	movs	r5, #0

  writeReg(0xFF, 0x01);
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80a1f50:	4620      	mov	r0, r4
 80a1f52:	21b6      	movs	r1, #182	; 0xb6
 80a1f54:	22b4      	movs	r2, #180	; 0xb4
 80a1f56:	f7ff fc25 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;
 80a1f5a:	4629      	mov	r1, r5
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a1f5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1f60:	f89d 6006 	ldrb.w	r6, [sp, #6]
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a1f64:	2b00      	cmp	r3, #0
 80a1f66:	bf14      	ite	ne
 80a1f68:	200c      	movne	r0, #12
 80a1f6a:	2000      	moveq	r0, #0
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1f6c:	2701      	movs	r7, #1
 80a1f6e:	b2eb      	uxtb	r3, r5
 80a1f70:	08da      	lsrs	r2, r3, #3
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1f72:	4298      	cmp	r0, r3
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1f74:	f10d 0e10 	add.w	lr, sp, #16
 80a1f78:	f003 0307 	and.w	r3, r3, #7
 80a1f7c:	4472      	add	r2, lr
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1f7e:	d801      	bhi.n	80a1f84 <_ZN7VL53L0X4initEb+0x114>
 80a1f80:	428e      	cmp	r6, r1
 80a1f82:	d108      	bne.n	80a1f96 <_ZN7VL53L0X4initEb+0x126>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1f84:	f812 ec08 	ldrb.w	lr, [r2, #-8]
 80a1f88:	fa07 f303 	lsl.w	r3, r7, r3
 80a1f8c:	ea2e 0303 	bic.w	r3, lr, r3
 80a1f90:	f802 3c08 	strb.w	r3, [r2, #-8]
 80a1f94:	e007      	b.n	80a1fa6 <_ZN7VL53L0X4initEb+0x136>
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 80a1f96:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80a1f9a:	fa42 f303 	asr.w	r3, r2, r3
 80a1f9e:	07db      	lsls	r3, r3, #31
    {
      spads_enabled++;
 80a1fa0:	bf44      	itt	mi
 80a1fa2:	3101      	addmi	r1, #1
 80a1fa4:	b2c9      	uxtbmi	r1, r1
 80a1fa6:	3501      	adds	r5, #1
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
 80a1fa8:	2d30      	cmp	r5, #48	; 0x30
 80a1faa:	d1e0      	bne.n	80a1f6e <_ZN7VL53L0X4initEb+0xfe>
    {
      spads_enabled++;
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a1fac:	2306      	movs	r3, #6
 80a1fae:	aa02      	add	r2, sp, #8
 80a1fb0:	21b0      	movs	r1, #176	; 0xb0
 80a1fb2:	4620      	mov	r0, r4
 80a1fb4:	f7ff fcad 	bl	80a1912 <_ZN7VL53L0X10writeMultiEhPKhh>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 80a1fb8:	2201      	movs	r2, #1
 80a1fba:	21ff      	movs	r1, #255	; 0xff
 80a1fbc:	4620      	mov	r0, r4
 80a1fbe:	f7ff fbf1 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a1fc2:	2200      	movs	r2, #0
 80a1fc4:	4611      	mov	r1, r2
 80a1fc6:	4620      	mov	r0, r4
 80a1fc8:	f7ff fbec 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1fcc:	2200      	movs	r2, #0
 80a1fce:	21ff      	movs	r1, #255	; 0xff
 80a1fd0:	4620      	mov	r0, r4
 80a1fd2:	f7ff fbe7 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x09, 0x00);
 80a1fd6:	2200      	movs	r2, #0
 80a1fd8:	2109      	movs	r1, #9
 80a1fda:	4620      	mov	r0, r4
 80a1fdc:	f7ff fbe2 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x10, 0x00);
 80a1fe0:	2200      	movs	r2, #0
 80a1fe2:	2110      	movs	r1, #16
 80a1fe4:	4620      	mov	r0, r4
 80a1fe6:	f7ff fbdd 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x11, 0x00);
 80a1fea:	2200      	movs	r2, #0
 80a1fec:	2111      	movs	r1, #17
 80a1fee:	4620      	mov	r0, r4
 80a1ff0:	f7ff fbd8 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x24, 0x01);
 80a1ff4:	2201      	movs	r2, #1
 80a1ff6:	2124      	movs	r1, #36	; 0x24
 80a1ff8:	4620      	mov	r0, r4
 80a1ffa:	f7ff fbd3 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x25, 0xFF);
 80a1ffe:	22ff      	movs	r2, #255	; 0xff
 80a2000:	2125      	movs	r1, #37	; 0x25
 80a2002:	4620      	mov	r0, r4
 80a2004:	f7ff fbce 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x75, 0x00);
 80a2008:	2200      	movs	r2, #0
 80a200a:	2175      	movs	r1, #117	; 0x75
 80a200c:	4620      	mov	r0, r4
 80a200e:	f7ff fbc9 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a2012:	2201      	movs	r2, #1
 80a2014:	21ff      	movs	r1, #255	; 0xff
 80a2016:	4620      	mov	r0, r4
 80a2018:	f7ff fbc4 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4E, 0x2C);
 80a201c:	222c      	movs	r2, #44	; 0x2c
 80a201e:	214e      	movs	r1, #78	; 0x4e
 80a2020:	4620      	mov	r0, r4
 80a2022:	f7ff fbbf 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x00);
 80a2026:	2200      	movs	r2, #0
 80a2028:	2148      	movs	r1, #72	; 0x48
 80a202a:	4620      	mov	r0, r4
 80a202c:	f7ff fbba 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x20);
 80a2030:	2220      	movs	r2, #32
 80a2032:	4629      	mov	r1, r5
 80a2034:	4620      	mov	r0, r4
 80a2036:	f7ff fbb5 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a203a:	2200      	movs	r2, #0
 80a203c:	21ff      	movs	r1, #255	; 0xff
 80a203e:	4620      	mov	r0, r4
 80a2040:	f7ff fbb0 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x09);
 80a2044:	2209      	movs	r2, #9
 80a2046:	4629      	mov	r1, r5
 80a2048:	4620      	mov	r0, r4
 80a204a:	f7ff fbab 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x54, 0x00);
 80a204e:	2200      	movs	r2, #0
 80a2050:	2154      	movs	r1, #84	; 0x54
 80a2052:	4620      	mov	r0, r4
 80a2054:	f7ff fba6 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a2058:	2204      	movs	r2, #4
 80a205a:	2131      	movs	r1, #49	; 0x31
 80a205c:	4620      	mov	r0, r4
 80a205e:	f7ff fba1 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x32, 0x03);
 80a2062:	2203      	movs	r2, #3
 80a2064:	2132      	movs	r1, #50	; 0x32
 80a2066:	4620      	mov	r0, r4
 80a2068:	f7ff fb9c 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x83);
 80a206c:	2283      	movs	r2, #131	; 0x83
 80a206e:	2140      	movs	r1, #64	; 0x40
 80a2070:	4620      	mov	r0, r4
 80a2072:	f7ff fb97 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x25);
 80a2076:	2225      	movs	r2, #37	; 0x25
 80a2078:	2146      	movs	r1, #70	; 0x46
 80a207a:	4620      	mov	r0, r4
 80a207c:	f7ff fb92 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x60, 0x00);
 80a2080:	2200      	movs	r2, #0
 80a2082:	2160      	movs	r1, #96	; 0x60
 80a2084:	4620      	mov	r0, r4
 80a2086:	f7ff fb8d 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x27, 0x00);
 80a208a:	2200      	movs	r2, #0
 80a208c:	2127      	movs	r1, #39	; 0x27
 80a208e:	4620      	mov	r0, r4
 80a2090:	f7ff fb88 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x50, 0x06);
 80a2094:	2206      	movs	r2, #6
 80a2096:	2150      	movs	r1, #80	; 0x50
 80a2098:	4620      	mov	r0, r4
 80a209a:	f7ff fb83 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x51, 0x00);
 80a209e:	2200      	movs	r2, #0
 80a20a0:	2151      	movs	r1, #81	; 0x51
 80a20a2:	4620      	mov	r0, r4
 80a20a4:	f7ff fb7e 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x52, 0x96);
 80a20a8:	2296      	movs	r2, #150	; 0x96
 80a20aa:	2152      	movs	r1, #82	; 0x52
 80a20ac:	4620      	mov	r0, r4
 80a20ae:	f7ff fb79 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x56, 0x08);
 80a20b2:	2208      	movs	r2, #8
 80a20b4:	2156      	movs	r1, #86	; 0x56
 80a20b6:	4620      	mov	r0, r4
 80a20b8:	f7ff fb74 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x57, 0x30);
 80a20bc:	462a      	mov	r2, r5
 80a20be:	2157      	movs	r1, #87	; 0x57
 80a20c0:	4620      	mov	r0, r4
 80a20c2:	f7ff fb6f 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x61, 0x00);
 80a20c6:	2200      	movs	r2, #0
 80a20c8:	2161      	movs	r1, #97	; 0x61
 80a20ca:	4620      	mov	r0, r4
 80a20cc:	f7ff fb6a 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x62, 0x00);
 80a20d0:	2200      	movs	r2, #0
 80a20d2:	2162      	movs	r1, #98	; 0x62
 80a20d4:	4620      	mov	r0, r4
 80a20d6:	f7ff fb65 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x64, 0x00);
 80a20da:	2200      	movs	r2, #0
 80a20dc:	2164      	movs	r1, #100	; 0x64
 80a20de:	4620      	mov	r0, r4
 80a20e0:	f7ff fb60 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x65, 0x00);
 80a20e4:	2200      	movs	r2, #0
 80a20e6:	2165      	movs	r1, #101	; 0x65
 80a20e8:	4620      	mov	r0, r4
 80a20ea:	f7ff fb5b 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x66, 0xA0);
 80a20ee:	22a0      	movs	r2, #160	; 0xa0
 80a20f0:	2166      	movs	r1, #102	; 0x66
 80a20f2:	4620      	mov	r0, r4
 80a20f4:	f7ff fb56 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a20f8:	2201      	movs	r2, #1
 80a20fa:	21ff      	movs	r1, #255	; 0xff
 80a20fc:	4620      	mov	r0, r4
 80a20fe:	f7ff fb51 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x22, 0x32);
 80a2102:	2232      	movs	r2, #50	; 0x32
 80a2104:	2122      	movs	r1, #34	; 0x22
 80a2106:	4620      	mov	r0, r4
 80a2108:	f7ff fb4c 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x14);
 80a210c:	2214      	movs	r2, #20
 80a210e:	2147      	movs	r1, #71	; 0x47
 80a2110:	4620      	mov	r0, r4
 80a2112:	f7ff fb47 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x49, 0xFF);
 80a2116:	22ff      	movs	r2, #255	; 0xff
 80a2118:	2149      	movs	r1, #73	; 0x49
 80a211a:	4620      	mov	r0, r4
 80a211c:	f7ff fb42 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4A, 0x00);
 80a2120:	2200      	movs	r2, #0
 80a2122:	214a      	movs	r1, #74	; 0x4a
 80a2124:	4620      	mov	r0, r4
 80a2126:	f7ff fb3d 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a212a:	2200      	movs	r2, #0
 80a212c:	21ff      	movs	r1, #255	; 0xff
 80a212e:	4620      	mov	r0, r4
 80a2130:	f7ff fb38 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7A, 0x0A);
 80a2134:	220a      	movs	r2, #10
 80a2136:	217a      	movs	r1, #122	; 0x7a
 80a2138:	4620      	mov	r0, r4
 80a213a:	f7ff fb33 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7B, 0x00);
 80a213e:	2200      	movs	r2, #0
 80a2140:	217b      	movs	r1, #123	; 0x7b
 80a2142:	4620      	mov	r0, r4
 80a2144:	f7ff fb2e 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x78, 0x21);
 80a2148:	2221      	movs	r2, #33	; 0x21
 80a214a:	2178      	movs	r1, #120	; 0x78
 80a214c:	4620      	mov	r0, r4
 80a214e:	f7ff fb29 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a2152:	2201      	movs	r2, #1
 80a2154:	21ff      	movs	r1, #255	; 0xff
 80a2156:	4620      	mov	r0, r4
 80a2158:	f7ff fb24 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x23, 0x34);
 80a215c:	2234      	movs	r2, #52	; 0x34
 80a215e:	2123      	movs	r1, #35	; 0x23
 80a2160:	4620      	mov	r0, r4
 80a2162:	f7ff fb1f 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x42, 0x00);
 80a2166:	2200      	movs	r2, #0
 80a2168:	2142      	movs	r1, #66	; 0x42
 80a216a:	4620      	mov	r0, r4
 80a216c:	f7ff fb1a 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0xFF);
 80a2170:	22ff      	movs	r2, #255	; 0xff
 80a2172:	2144      	movs	r1, #68	; 0x44
 80a2174:	4620      	mov	r0, r4
 80a2176:	f7ff fb15 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x26);
 80a217a:	2226      	movs	r2, #38	; 0x26
 80a217c:	2145      	movs	r1, #69	; 0x45
 80a217e:	4620      	mov	r0, r4
 80a2180:	f7ff fb10 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x05);
 80a2184:	2205      	movs	r2, #5
 80a2186:	2146      	movs	r1, #70	; 0x46
 80a2188:	4620      	mov	r0, r4
 80a218a:	f7ff fb0b 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x40);
 80a218e:	2240      	movs	r2, #64	; 0x40
 80a2190:	4611      	mov	r1, r2
 80a2192:	4620      	mov	r0, r4
 80a2194:	f7ff fb06 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0E, 0x06);
 80a2198:	2206      	movs	r2, #6
 80a219a:	210e      	movs	r1, #14
 80a219c:	4620      	mov	r0, r4
 80a219e:	f7ff fb01 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x20, 0x1A);
 80a21a2:	221a      	movs	r2, #26
 80a21a4:	2120      	movs	r1, #32
 80a21a6:	4620      	mov	r0, r4
 80a21a8:	f7ff fafc 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x43, 0x40);
 80a21ac:	2240      	movs	r2, #64	; 0x40
 80a21ae:	2143      	movs	r1, #67	; 0x43
 80a21b0:	4620      	mov	r0, r4
 80a21b2:	f7ff faf7 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a21b6:	2200      	movs	r2, #0
 80a21b8:	21ff      	movs	r1, #255	; 0xff
 80a21ba:	4620      	mov	r0, r4
 80a21bc:	f7ff faf2 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x34, 0x03);
 80a21c0:	2203      	movs	r2, #3
 80a21c2:	2134      	movs	r1, #52	; 0x34
 80a21c4:	4620      	mov	r0, r4
 80a21c6:	f7ff faed 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x35, 0x44);
 80a21ca:	2244      	movs	r2, #68	; 0x44
 80a21cc:	2135      	movs	r1, #53	; 0x35
 80a21ce:	4620      	mov	r0, r4
 80a21d0:	f7ff fae8 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a21d4:	2201      	movs	r2, #1
 80a21d6:	21ff      	movs	r1, #255	; 0xff
 80a21d8:	4620      	mov	r0, r4
 80a21da:	f7ff fae3 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a21de:	2204      	movs	r2, #4
 80a21e0:	2131      	movs	r1, #49	; 0x31
 80a21e2:	4620      	mov	r0, r4
 80a21e4:	f7ff fade 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4B, 0x09);
 80a21e8:	2209      	movs	r2, #9
 80a21ea:	214b      	movs	r1, #75	; 0x4b
 80a21ec:	4620      	mov	r0, r4
 80a21ee:	f7ff fad9 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4C, 0x05);
 80a21f2:	2205      	movs	r2, #5
 80a21f4:	214c      	movs	r1, #76	; 0x4c
 80a21f6:	4620      	mov	r0, r4
 80a21f8:	f7ff fad4 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4D, 0x04);
 80a21fc:	2204      	movs	r2, #4
 80a21fe:	214d      	movs	r1, #77	; 0x4d
 80a2200:	4620      	mov	r0, r4
 80a2202:	f7ff facf 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a2206:	2200      	movs	r2, #0
 80a2208:	21ff      	movs	r1, #255	; 0xff
 80a220a:	4620      	mov	r0, r4
 80a220c:	f7ff faca 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0x00);
 80a2210:	2200      	movs	r2, #0
 80a2212:	2144      	movs	r1, #68	; 0x44
 80a2214:	4620      	mov	r0, r4
 80a2216:	f7ff fac5 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x20);
 80a221a:	2220      	movs	r2, #32
 80a221c:	2145      	movs	r1, #69	; 0x45
 80a221e:	4620      	mov	r0, r4
 80a2220:	f7ff fac0 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x08);
 80a2224:	2208      	movs	r2, #8
 80a2226:	2147      	movs	r1, #71	; 0x47
 80a2228:	4620      	mov	r0, r4
 80a222a:	f7ff fabb 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x28);
 80a222e:	2228      	movs	r2, #40	; 0x28
 80a2230:	2148      	movs	r1, #72	; 0x48
 80a2232:	4620      	mov	r0, r4
 80a2234:	f7ff fab6 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x67, 0x00);
 80a2238:	2200      	movs	r2, #0
 80a223a:	2167      	movs	r1, #103	; 0x67
 80a223c:	4620      	mov	r0, r4
 80a223e:	f7ff fab1 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x70, 0x04);
 80a2242:	2204      	movs	r2, #4
 80a2244:	2170      	movs	r1, #112	; 0x70
 80a2246:	4620      	mov	r0, r4
 80a2248:	f7ff faac 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x71, 0x01);
 80a224c:	2201      	movs	r2, #1
 80a224e:	2171      	movs	r1, #113	; 0x71
 80a2250:	4620      	mov	r0, r4
 80a2252:	f7ff faa7 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x72, 0xFE);
 80a2256:	22fe      	movs	r2, #254	; 0xfe
 80a2258:	2172      	movs	r1, #114	; 0x72
 80a225a:	4620      	mov	r0, r4
 80a225c:	f7ff faa2 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x76, 0x00);
 80a2260:	2200      	movs	r2, #0
 80a2262:	2176      	movs	r1, #118	; 0x76
 80a2264:	4620      	mov	r0, r4
 80a2266:	f7ff fa9d 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x77, 0x00);
 80a226a:	2200      	movs	r2, #0
 80a226c:	2177      	movs	r1, #119	; 0x77
 80a226e:	4620      	mov	r0, r4
 80a2270:	f7ff fa98 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a2274:	2201      	movs	r2, #1
 80a2276:	21ff      	movs	r1, #255	; 0xff
 80a2278:	4620      	mov	r0, r4
 80a227a:	f7ff fa93 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0D, 0x01);
 80a227e:	2201      	movs	r2, #1
 80a2280:	210d      	movs	r1, #13
 80a2282:	4620      	mov	r0, r4
 80a2284:	f7ff fa8e 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a2288:	2200      	movs	r2, #0
 80a228a:	21ff      	movs	r1, #255	; 0xff
 80a228c:	4620      	mov	r0, r4
 80a228e:	f7ff fa89 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x01);
 80a2292:	2201      	movs	r2, #1
 80a2294:	2180      	movs	r1, #128	; 0x80
 80a2296:	4620      	mov	r0, r4
 80a2298:	f7ff fa84 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x01, 0xF8);
 80a229c:	22f8      	movs	r2, #248	; 0xf8
 80a229e:	2101      	movs	r1, #1
 80a22a0:	4620      	mov	r0, r4
 80a22a2:	f7ff fa7f 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a22a6:	2201      	movs	r2, #1
 80a22a8:	21ff      	movs	r1, #255	; 0xff
 80a22aa:	4620      	mov	r0, r4
 80a22ac:	f7ff fa7a 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x8E, 0x01);
 80a22b0:	2201      	movs	r2, #1
 80a22b2:	218e      	movs	r1, #142	; 0x8e
 80a22b4:	4620      	mov	r0, r4
 80a22b6:	f7ff fa75 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a22ba:	2201      	movs	r2, #1
 80a22bc:	2100      	movs	r1, #0
 80a22be:	4620      	mov	r0, r4
 80a22c0:	f7ff fa70 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a22c4:	2200      	movs	r2, #0
 80a22c6:	21ff      	movs	r1, #255	; 0xff
 80a22c8:	4620      	mov	r0, r4
 80a22ca:	f7ff fa6b 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a22ce:	2200      	movs	r2, #0
 80a22d0:	2180      	movs	r1, #128	; 0x80
 80a22d2:	4620      	mov	r0, r4
 80a22d4:	f7ff fa66 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80a22d8:	2204      	movs	r2, #4
 80a22da:	210a      	movs	r1, #10
 80a22dc:	4620      	mov	r0, r4
 80a22de:	f7ff fa61 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80a22e2:	2184      	movs	r1, #132	; 0x84
 80a22e4:	4620      	mov	r0, r4
 80a22e6:	f7ff facc 	bl	80a1882 <_ZN7VL53L0X7readRegEh>
 80a22ea:	2184      	movs	r1, #132	; 0x84
 80a22ec:	f000 02ef 	and.w	r2, r0, #239	; 0xef
 80a22f0:	4620      	mov	r0, r4
 80a22f2:	f7ff fa57 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a22f6:	2201      	movs	r2, #1
 80a22f8:	210b      	movs	r1, #11
 80a22fa:	4620      	mov	r0, r4
 80a22fc:	f7ff fa52 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a2300:	4620      	mov	r0, r4
 80a2302:	f7ff fcf3 	bl	80a1cec <_ZN7VL53L0X26getMeasurementTimingBudgetEv>
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a2306:	22e8      	movs	r2, #232	; 0xe8
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a2308:	6160      	str	r0, [r4, #20]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a230a:	2101      	movs	r1, #1
 80a230c:	4620      	mov	r0, r4
 80a230e:	f7ff fa49 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(measurement_timing_budget_us);
 80a2312:	6961      	ldr	r1, [r4, #20]
 80a2314:	4620      	mov	r0, r4
 80a2316:	f7ff fd33 	bl	80a1d80 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80a231a:	2201      	movs	r2, #1
 80a231c:	4611      	mov	r1, r2
 80a231e:	4620      	mov	r0, r4
 80a2320:	f7ff fa40 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x40)) { return false; }
 80a2324:	2140      	movs	r1, #64	; 0x40
 80a2326:	4620      	mov	r0, r4
 80a2328:	f7ff fd79 	bl	80a1e1e <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a232c:	2800      	cmp	r0, #0
 80a232e:	f43f adf2 	beq.w	80a1f16 <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80a2332:	2202      	movs	r2, #2
 80a2334:	2101      	movs	r1, #1
 80a2336:	4620      	mov	r0, r4
 80a2338:	f7ff fa34 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x00)) { return false; }
 80a233c:	2100      	movs	r1, #0
 80a233e:	4620      	mov	r0, r4
 80a2340:	f7ff fd6d 	bl	80a1e1e <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a2344:	4605      	mov	r5, r0
 80a2346:	2800      	cmp	r0, #0
 80a2348:	f43f ade5 	beq.w	80a1f16 <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a234c:	22e8      	movs	r2, #232	; 0xe8
 80a234e:	2101      	movs	r1, #1
 80a2350:	4620      	mov	r0, r4
 80a2352:	f7ff fa27 	bl	80a17a4 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_PerformRefCalibration() end

  return true;
}
 80a2356:	4628      	mov	r0, r5
 80a2358:	b005      	add	sp, #20
 80a235a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a235c <_GLOBAL__sub_I__ZN7VL53L0XC2Ev>:
 80a235c:	f001 b838 	b.w	80a33d0 <HAL_Pin_Map>

080a2360 <_ZN9LIS3DHI2CD1Ev>:

}

LIS3DHI2C::~LIS3DHI2C() {

}
 80a2360:	4770      	bx	lr

080a2362 <_ZN9LIS3DHI2CD0Ev>:

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {

}

LIS3DHI2C::~LIS3DHI2C() {
 80a2362:	b510      	push	{r4, lr}
 80a2364:	4604      	mov	r4, r0

}
 80a2366:	f7fd fe9a 	bl	80a009e <_ZdlPv>
 80a236a:	4620      	mov	r0, r4
 80a236c:	bd10      	pop	{r4, pc}

080a236e <_ZN9LIS3DHI2C9writeDataEhPKhj>:
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a236e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2370:	4605      	mov	r5, r0
 80a2372:	461e      	mov	r6, r3
 80a2374:	460f      	mov	r7, r1

	wire.beginTransmission(getI2CAddr());
 80a2376:	7c01      	ldrb	r1, [r0, #16]
 80a2378:	68c0      	ldr	r0, [r0, #12]
 80a237a:	f041 0118 	orr.w	r1, r1, #24
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a237e:	4614      	mov	r4, r2

	wire.beginTransmission(getI2CAddr());
 80a2380:	f001 fe1b 	bl	80a3fba <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a2384:	68e8      	ldr	r0, [r5, #12]

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a2386:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a2388:	6803      	ldr	r3, [r0, #0]
bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a238a:	bf88      	it	hi
 80a238c:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a2390:	689b      	ldr	r3, [r3, #8]
 80a2392:	4639      	mov	r1, r7
 80a2394:	4798      	blx	r3
 80a2396:	4426      	add	r6, r4
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a2398:	42a6      	cmp	r6, r4
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a239a:	68e8      	ldr	r0, [r5, #12]

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a239c:	d005      	beq.n	80a23aa <_ZN9LIS3DHI2C9writeDataEhPKhj+0x3c>
		wire.write(buf[ii]);
 80a239e:	6803      	ldr	r3, [r0, #0]
 80a23a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a23a4:	689b      	ldr	r3, [r3, #8]
 80a23a6:	4798      	blx	r3

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a23a8:	e7f6      	b.n	80a2398 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x2a>
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a23aa:	f001 fe0e 	bl	80a3fca <_ZN7TwoWire15endTransmissionEv>

	return (res == 0);
}
 80a23ae:	fab0 f080 	clz	r0, r0
 80a23b2:	0940      	lsrs	r0, r0, #5
 80a23b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a23b6 <_ZN9LIS3DHI2C8readDataEhPhj>:

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a23b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a23b8:	4604      	mov	r4, r0
 80a23ba:	461e      	mov	r6, r3
 80a23bc:	460f      	mov	r7, r1
	wire.beginTransmission(getI2CAddr());
 80a23be:	7c01      	ldrb	r1, [r0, #16]
 80a23c0:	68c0      	ldr	r0, [r0, #12]
 80a23c2:	f041 0118 	orr.w	r1, r1, #24

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a23c6:	4615      	mov	r5, r2
	wire.beginTransmission(getI2CAddr());
 80a23c8:	f001 fdf7 	bl	80a3fba <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a23cc:	68e0      	ldr	r0, [r4, #12]
}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a23ce:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a23d0:	6803      	ldr	r3, [r0, #0]

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a23d2:	bf88      	it	hi
 80a23d4:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a23d8:	689b      	ldr	r3, [r3, #8]
 80a23da:	4639      	mov	r1, r7
 80a23dc:	4798      	blx	r3

	uint8_t res = wire.endTransmission();
 80a23de:	68e0      	ldr	r0, [r4, #12]
 80a23e0:	f001 fdf3 	bl	80a3fca <_ZN7TwoWire15endTransmissionEv>
	if (res != 0) {
 80a23e4:	b9a8      	cbnz	r0, 80a2412 <_ZN9LIS3DHI2C8readDataEhPhj+0x5c>
		return false;
	}

	wire.requestFrom((int)getI2CAddr(), numBytes);
 80a23e6:	7c21      	ldrb	r1, [r4, #16]
 80a23e8:	4632      	mov	r2, r6
 80a23ea:	f041 0118 	orr.w	r1, r1, #24
 80a23ee:	68e0      	ldr	r0, [r4, #12]
 80a23f0:	f001 fdde 	bl	80a3fb0 <_ZN7TwoWire11requestFromEii>
 80a23f4:	442e      	add	r6, r5
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
 80a23f6:	42ae      	cmp	r6, r5
 80a23f8:	d00d      	beq.n	80a2416 <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
 80a23fa:	68e0      	ldr	r0, [r4, #12]
 80a23fc:	6803      	ldr	r3, [r0, #0]
 80a23fe:	691b      	ldr	r3, [r3, #16]
 80a2400:	4798      	blx	r3
 80a2402:	b140      	cbz	r0, 80a2416 <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
		buf[ii] = wire.read();
 80a2404:	68e0      	ldr	r0, [r4, #12]
 80a2406:	6803      	ldr	r3, [r0, #0]
 80a2408:	695b      	ldr	r3, [r3, #20]
 80a240a:	4798      	blx	r3
 80a240c:	f805 0b01 	strb.w	r0, [r5], #1
 80a2410:	e7f1      	b.n	80a23f6 <_ZN9LIS3DHI2C8readDataEhPhj+0x40>
	}
	wire.write(addr);

	uint8_t res = wire.endTransmission();
	if (res != 0) {
		return false;
 80a2412:	2000      	movs	r0, #0
 80a2414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2416:	2001      	movs	r0, #1
	wire.requestFrom((int)getI2CAddr(), numBytes);
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
		buf[ii] = wire.read();
	}
	return true;
}
 80a2418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a241a <_ZN12LIS3DHConfigC1Ev>:
#include "LIS3DH.h"

// Official project location:
// https://github.com/rickkas7/LIS3DH

LIS3DHConfig::LIS3DHConfig() {
 80a241a:	2200      	movs	r2, #0
 80a241c:	7002      	strb	r2, [r0, #0]
 80a241e:	7042      	strb	r2, [r0, #1]
 80a2420:	7082      	strb	r2, [r0, #2]
 80a2422:	70c2      	strb	r2, [r0, #3]
 80a2424:	7102      	strb	r2, [r0, #4]
 80a2426:	7142      	strb	r2, [r0, #5]
 80a2428:	7182      	strb	r2, [r0, #6]
 80a242a:	71c2      	strb	r2, [r0, #7]
 80a242c:	7202      	strb	r2, [r0, #8]
 80a242e:	7242      	strb	r2, [r0, #9]
 80a2430:	7282      	strb	r2, [r0, #10]
}
 80a2432:	4770      	bx	lr

080a2434 <_ZN12LIS3DHConfig12setAccelModeEh>:
}

LIS3DHConfig &LIS3DHConfig::setAccelMode(uint8_t rate) {

	// Enable specified rate, with XYZ detection enabled
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
 80a2434:	f041 0107 	orr.w	r1, r1, #7
 80a2438:	7001      	strb	r1, [r0, #0]

	return *this;
}
 80a243a:	4770      	bx	lr

080a243c <_ZN6LIS3DH13readRegister8Eh>:

	return pos;
}


uint8_t LIS3DH::readRegister8(uint8_t addr) {
 80a243c:	b513      	push	{r0, r1, r4, lr}

	uint8_t resp[1];
	readData(addr, resp, sizeof(resp));
 80a243e:	6803      	ldr	r3, [r0, #0]
 80a2440:	aa01      	add	r2, sp, #4
 80a2442:	689c      	ldr	r4, [r3, #8]
 80a2444:	2301      	movs	r3, #1
 80a2446:	47a0      	blx	r4

	return resp[0];
}
 80a2448:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80a244c:	b002      	add	sp, #8
 80a244e:	bd10      	pop	{r4, pc}

080a2450 <_ZN6LIS3DH9hasDeviceEv>:
LIS3DH::~LIS3DH() {

}


bool LIS3DH::hasDevice() {
 80a2450:	b538      	push	{r3, r4, r5, lr}
 80a2452:	4605      	mov	r5, r0
 80a2454:	240a      	movs	r4, #10
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
 80a2456:	210f      	movs	r1, #15
 80a2458:	4628      	mov	r0, r5
 80a245a:	f7ff ffef 	bl	80a243c <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
 80a245e:	2833      	cmp	r0, #51	; 0x33
			found = true;
 80a2460:	f04f 0001 	mov.w	r0, #1

bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
		if (whoami == WHO_AM_I) {
 80a2464:	d005      	beq.n	80a2472 <_ZN6LIS3DH9hasDeviceEv+0x22>
			found = true;
			break;
		}
		delay(1);
 80a2466:	f001 fb0b 	bl	80a3a80 <delay>
}


bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
 80a246a:	3c01      	subs	r4, #1
 80a246c:	d1f3      	bne.n	80a2456 <_ZN6LIS3DH9hasDeviceEv+0x6>

}


bool LIS3DH::hasDevice() {
	bool found = false;
 80a246e:	4620      	mov	r0, r4
 80a2470:	bd38      	pop	{r3, r4, r5, pc}
			break;
		}
		delay(1);
	}
	return found;
}
 80a2472:	bd38      	pop	{r3, r4, r5, pc}

080a2474 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a2474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a2476:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a2478:	2107      	movs	r1, #7

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a247a:	4606      	mov	r6, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a247c:	f7ff ffde 	bl	80a243c <_ZN6LIS3DH13readRegister8Eh>
 80a2480:	f000 0008 	and.w	r0, r0, #8

	bool hasData = ((statusAuxReg & STATUS_AUX_321DA) != 0);
 80a2484:	2800      	cmp	r0, #0
 80a2486:	bf14      	ite	ne
 80a2488:	2501      	movne	r5, #1
 80a248a:	2500      	moveq	r5, #0

	//Serial.printlnf("fifoSrcReg=0x%02x", fifoSrcReg);

	if (hasData) {
 80a248c:	d01b      	beq.n	80a24c6 <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x52>
		uint8_t resp[6];
		readData(REG_OUT_X_L, resp, sizeof(resp));
 80a248e:	6833      	ldr	r3, [r6, #0]
 80a2490:	466a      	mov	r2, sp
 80a2492:	689f      	ldr	r7, [r3, #8]
 80a2494:	2128      	movs	r1, #40	; 0x28
 80a2496:	2306      	movs	r3, #6
 80a2498:	4630      	mov	r0, r6
 80a249a:	47b8      	blx	r7

		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
 80a249c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a24a0:	f89d 3000 	ldrb.w	r3, [sp]
 80a24a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a24a8:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
 80a24aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a24ae:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a24b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a24b6:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
 80a24b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a24bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a24c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a24c4:	80a3      	strh	r3, [r4, #4]
	}
	return hasData;
}
 80a24c6:	4628      	mov	r0, r5
 80a24c8:	b003      	add	sp, #12
 80a24ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a24cc <_ZN6LIS3DH14writeRegister8Ehh>:

	return resp[0] | (((uint16_t)resp[1]) << 8);
}


void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
 80a24cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a24ce:	ac02      	add	r4, sp, #8

	writeData(addr, req, sizeof(req));
 80a24d0:	6803      	ldr	r3, [r0, #0]

void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a24d2:	f804 2d04 	strb.w	r2, [r4, #-4]!

	writeData(addr, req, sizeof(req));
 80a24d6:	68dd      	ldr	r5, [r3, #12]
 80a24d8:	4622      	mov	r2, r4
 80a24da:	2301      	movs	r3, #1
 80a24dc:	47a8      	blx	r5
}
 80a24de:	b003      	add	sp, #12
 80a24e0:	bd30      	pop	{r4, r5, pc}
	...

080a24e4 <_ZN6LIS3DH5setupER12LIS3DHConfig>:
		delay(1);
	}
	return found;
}

bool LIS3DH::setup(LIS3DHConfig &config) {
 80a24e4:	b570      	push	{r4, r5, r6, lr}
 80a24e6:	4604      	mov	r4, r0
 80a24e8:	460d      	mov	r5, r1

	if (!hasDevice()) {
 80a24ea:	f7ff ffb1 	bl	80a2450 <_ZN6LIS3DH9hasDeviceEv>
 80a24ee:	4606      	mov	r6, r0
 80a24f0:	b928      	cbnz	r0, 80a24fe <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		Serial.println("device not found");
 80a24f2:	f001 fc15 	bl	80a3d20 <_Z16_fetch_usbserialv>
 80a24f6:	4928      	ldr	r1, [pc, #160]	; (80a2598 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
 80a24f8:	f001 fa79 	bl	80a39ee <_ZN5Print7printlnEPKc>
		return false;
 80a24fc:	e049      	b.n	80a2592 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
	}

	writeRegister8(REG_CTRL_REG1, config.reg1);
 80a24fe:	782a      	ldrb	r2, [r5, #0]
 80a2500:	2120      	movs	r1, #32
 80a2502:	4620      	mov	r0, r4
 80a2504:	f7ff ffe2 	bl	80a24cc <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
 80a2508:	786a      	ldrb	r2, [r5, #1]
 80a250a:	2121      	movs	r1, #33	; 0x21
 80a250c:	4620      	mov	r0, r4
 80a250e:	f7ff ffdd 	bl	80a24cc <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
 80a2512:	78aa      	ldrb	r2, [r5, #2]
 80a2514:	2122      	movs	r1, #34	; 0x22
 80a2516:	4620      	mov	r0, r4
 80a2518:	f7ff ffd8 	bl	80a24cc <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
 80a251c:	78ea      	ldrb	r2, [r5, #3]
 80a251e:	2123      	movs	r1, #35	; 0x23
 80a2520:	4620      	mov	r0, r4
 80a2522:	f7ff ffd3 	bl	80a24cc <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
 80a2526:	792a      	ldrb	r2, [r5, #4]
 80a2528:	2124      	movs	r1, #36	; 0x24
 80a252a:	4620      	mov	r0, r4
 80a252c:	f7ff ffce 	bl	80a24cc <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
 80a2530:	796a      	ldrb	r2, [r5, #5]
 80a2532:	2125      	movs	r1, #37	; 0x25
 80a2534:	4620      	mov	r0, r4
 80a2536:	f7ff ffc9 	bl	80a24cc <_ZN6LIS3DH14writeRegister8Ehh>

	if (config.setReference) {
 80a253a:	79ab      	ldrb	r3, [r5, #6]
 80a253c:	b11b      	cbz	r3, 80a2546 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x62>
		// In normal mode, reading the reference register sets it for the current normal force
		// (the normal force of gravity acting on the device)
		readRegister8(REG_REFERENCE);
 80a253e:	2126      	movs	r1, #38	; 0x26
 80a2540:	4620      	mov	r0, r4
 80a2542:	f7ff ff7b 	bl	80a243c <_ZN6LIS3DH13readRegister8Eh>
	}
	// Set FIFO mode
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
 80a2546:	7aaa      	ldrb	r2, [r5, #10]
 80a2548:	212e      	movs	r1, #46	; 0x2e
 80a254a:	4620      	mov	r0, r4
 80a254c:	f7ff ffbe 	bl	80a24cc <_ZN6LIS3DH14writeRegister8Ehh>



	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
 80a2550:	78ab      	ldrb	r3, [r5, #2]
 80a2552:	065b      	lsls	r3, r3, #25
 80a2554:	d51d      	bpl.n	80a2592 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>

		writeRegister8(REG_INT1_THS, config.int1_ths);
 80a2556:	79ea      	ldrb	r2, [r5, #7]
 80a2558:	2132      	movs	r1, #50	; 0x32
 80a255a:	4620      	mov	r0, r4
 80a255c:	f7ff ffb6 	bl	80a24cc <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
 80a2560:	7a2a      	ldrb	r2, [r5, #8]
 80a2562:	2133      	movs	r1, #51	; 0x33
 80a2564:	4620      	mov	r0, r4
 80a2566:	f7ff ffb1 	bl	80a24cc <_ZN6LIS3DH14writeRegister8Ehh>

		if (intPin >= 0) {
 80a256a:	6863      	ldr	r3, [r4, #4]
 80a256c:	2b00      	cmp	r3, #0
 80a256e:	db0a      	blt.n	80a2586 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa2>
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a2570:	7a6a      	ldrb	r2, [r5, #9]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a2572:	4620      	mov	r0, r4
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a2574:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a2576:	2130      	movs	r1, #48	; 0x30
 80a2578:	f7ff ffa8 	bl	80a24cc <_ZN6LIS3DH14writeRegister8Ehh>

			// Clear the interrupt just in case
			readRegister8(REG_INT1_SRC);
 80a257c:	2131      	movs	r1, #49	; 0x31
 80a257e:	4620      	mov	r0, r4
 80a2580:	f7ff ff5c 	bl	80a243c <_ZN6LIS3DH13readRegister8Eh>
 80a2584:	e005      	b.n	80a2592 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
		}
		else {
			int1_cfg = 0;
 80a2586:	2200      	movs	r2, #0
 80a2588:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
 80a258a:	2130      	movs	r1, #48	; 0x30
 80a258c:	4620      	mov	r0, r4
 80a258e:	f7ff ff9d 	bl	80a24cc <_ZN6LIS3DH14writeRegister8Ehh>




	return true;
}
 80a2592:	4630      	mov	r0, r6
 80a2594:	bd70      	pop	{r4, r5, r6, pc}
 80a2596:	bf00      	nop
 80a2598:	080a54c8 	.word	0x080a54c8

080a259c <_ZN9LIS3DHI2CC1ER7TwoWirehi>:

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a259c:	b510      	push	{r4, lr}

	return *this;
}


LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
 80a259e:	6043      	str	r3, [r0, #4]

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a25a0:	4b02      	ldr	r3, [pc, #8]	; (80a25ac <_ZN9LIS3DHI2CC1ER7TwoWirehi+0x10>)
 80a25a2:	60c1      	str	r1, [r0, #12]
 80a25a4:	6003      	str	r3, [r0, #0]
 80a25a6:	7402      	strb	r2, [r0, #16]

}
 80a25a8:	bd10      	pop	{r4, pc}
 80a25aa:	bf00      	nop
 80a25ac:	080a54b8 	.word	0x080a54b8

080a25b0 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:
 80a25b0:	f000 bf0e 	b.w	80a33d0 <HAL_Pin_Map>

080a25b4 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>:
#include "FuzzyRule.h"

FuzzyRule::FuzzyRule(){
}

FuzzyRule::FuzzyRule(int index, FuzzyRuleAntecedent* fuzzyRuleAntecedent, FuzzyRuleConsequent* fuzzyRuleConsequent){
 80a25b4:	b510      	push	{r4, lr}
    this->index = index;
    this->fuzzyRuleAntecedent = fuzzyRuleAntecedent;
    this->fuzzyRuleConsequent = fuzzyRuleConsequent;
 80a25b6:	60c3      	str	r3, [r0, #12]
    this->fired = false;
 80a25b8:	2300      	movs	r3, #0

FuzzyRule::FuzzyRule(){
}

FuzzyRule::FuzzyRule(int index, FuzzyRuleAntecedent* fuzzyRuleAntecedent, FuzzyRuleConsequent* fuzzyRuleConsequent){
    this->index = index;
 80a25ba:	6001      	str	r1, [r0, #0]
    this->fuzzyRuleAntecedent = fuzzyRuleAntecedent;
 80a25bc:	6082      	str	r2, [r0, #8]
    this->fuzzyRuleConsequent = fuzzyRuleConsequent;
    this->fired = false;
 80a25be:	7103      	strb	r3, [r0, #4]
}
 80a25c0:	bd10      	pop	{r4, pc}

080a25c2 <_ZN9FuzzyRule18evaluateExpressionEv>:

int FuzzyRule::getIndex(){
    return this->index;
}

bool FuzzyRule::evaluateExpression(){
 80a25c2:	b538      	push	{r3, r4, r5, lr}
 80a25c4:	4604      	mov	r4, r0
    if (this->fuzzyRuleAntecedent != NULL){
 80a25c6:	6880      	ldr	r0, [r0, #8]
 80a25c8:	b170      	cbz	r0, 80a25e8 <_ZN9FuzzyRule18evaluateExpressionEv+0x26>
        float powerOfAntecedent = this->fuzzyRuleAntecedent->evaluate();
 80a25ca:	f000 fe29 	bl	80a3220 <_ZN19FuzzyRuleAntecedent8evaluateEv>

        (powerOfAntecedent > 0.0) ?    (this->fired = true) : (this->fired = false);
 80a25ce:	2100      	movs	r1, #0
    return this->index;
}

bool FuzzyRule::evaluateExpression(){
    if (this->fuzzyRuleAntecedent != NULL){
        float powerOfAntecedent = this->fuzzyRuleAntecedent->evaluate();
 80a25d0:	4605      	mov	r5, r0

        (powerOfAntecedent > 0.0) ?    (this->fired = true) : (this->fired = false);
 80a25d2:	f002 fe8d 	bl	80a52f0 <__aeabi_fcmpgt>
 80a25d6:	b110      	cbz	r0, 80a25de <_ZN9FuzzyRule18evaluateExpressionEv+0x1c>
 80a25d8:	2301      	movs	r3, #1
 80a25da:	7123      	strb	r3, [r4, #4]
 80a25dc:	e000      	b.n	80a25e0 <_ZN9FuzzyRule18evaluateExpressionEv+0x1e>
 80a25de:	7120      	strb	r0, [r4, #4]
        
        this->fuzzyRuleConsequent->evaluate(powerOfAntecedent);
 80a25e0:	4629      	mov	r1, r5
 80a25e2:	68e0      	ldr	r0, [r4, #12]
 80a25e4:	f000 fd57 	bl	80a3096 <_ZN19FuzzyRuleConsequent8evaluateEf>
    }
    return this->fired;
}
 80a25e8:	7920      	ldrb	r0, [r4, #4]
 80a25ea:	bd38      	pop	{r3, r4, r5, pc}

080a25ec <_ZN16FuzzyCompositionC1Ev>:
#include "FuzzyComposition.h"
#include <math.h>

// CONSTRUTORES
FuzzyComposition::FuzzyComposition(){
    this->pointsCursor     = NULL;
 80a25ec:	2200      	movs	r2, #0
 80a25ee:	6002      	str	r2, [r0, #0]
    this->points         = NULL;
 80a25f0:	6042      	str	r2, [r0, #4]
}
 80a25f2:	4770      	bx	lr

080a25f4 <_ZN16FuzzyComposition8addPointEff>:
// DESTRUTOR
FuzzyComposition::~FuzzyComposition(){
    this->cleanPoints(this->points);
}

bool FuzzyComposition::addPoint(float point, float pertinence){
 80a25f4:	b570      	push	{r4, r5, r6, lr}
 80a25f6:	4604      	mov	r4, r0
    pointsArray* aux;
    // Alocando espaço na memória
    if((aux = (pointsArray* ) malloc(sizeof(pointsArray))) == NULL){
 80a25f8:	2010      	movs	r0, #16
// DESTRUTOR
FuzzyComposition::~FuzzyComposition(){
    this->cleanPoints(this->points);
}

bool FuzzyComposition::addPoint(float point, float pertinence){
 80a25fa:	460e      	mov	r6, r1
 80a25fc:	4615      	mov	r5, r2
    pointsArray* aux;
    // Alocando espaço na memória
    if((aux = (pointsArray* ) malloc(sizeof(pointsArray))) == NULL){
 80a25fe:	f001 f8b9 	bl	80a3774 <malloc>
 80a2602:	2300      	movs	r3, #0
 80a2604:	b170      	cbz	r0, 80a2624 <_ZN16FuzzyComposition8addPointEff+0x30>
        return false;
    }
    aux->previous = NULL;
 80a2606:	6003      	str	r3, [r0, #0]
    aux->point = point;
 80a2608:	6046      	str	r6, [r0, #4]
    aux->pertinence = pertinence;
 80a260a:	6085      	str	r5, [r0, #8]
    aux->next = NULL;
 80a260c:	60c3      	str	r3, [r0, #12]

    if(this->points == NULL){
 80a260e:	6863      	ldr	r3, [r4, #4]
 80a2610:	b913      	cbnz	r3, 80a2618 <_ZN16FuzzyComposition8addPointEff+0x24>
        this->points = aux;
 80a2612:	6060      	str	r0, [r4, #4]
        this->pointsCursor  = aux;
 80a2614:	6020      	str	r0, [r4, #0]
 80a2616:	e004      	b.n	80a2622 <_ZN16FuzzyComposition8addPointEff+0x2e>
    }else{
        aux->previous = this->pointsCursor;
 80a2618:	6823      	ldr	r3, [r4, #0]
 80a261a:	6003      	str	r3, [r0, #0]
        this->pointsCursor = aux;
 80a261c:	6020      	str	r0, [r4, #0]
        aux->previous->next = this->pointsCursor;
 80a261e:	6803      	ldr	r3, [r0, #0]
 80a2620:	60d8      	str	r0, [r3, #12]
    }
    return true;
 80a2622:	2001      	movs	r0, #1
}
 80a2624:	bd70      	pop	{r4, r5, r6, pc}

080a2626 <_ZN16FuzzyComposition10checkPointEff>:

bool FuzzyComposition::checkPoint(float point, float pertinence){
 80a2626:	b570      	push	{r4, r5, r6, lr}
 80a2628:	460d      	mov	r5, r1
 80a262a:	4616      	mov	r6, r2
    pointsArray* aux;
    aux = this->pointsCursor;
 80a262c:	6804      	ldr	r4, [r0, #0]
    while(aux != NULL){
 80a262e:	b15c      	cbz	r4, 80a2648 <_ZN16FuzzyComposition10checkPointEff+0x22>
        if(aux->point == point && aux->pertinence == pertinence){
 80a2630:	4629      	mov	r1, r5
 80a2632:	6860      	ldr	r0, [r4, #4]
 80a2634:	f002 fe34 	bl	80a52a0 <__aeabi_fcmpeq>
 80a2638:	b120      	cbz	r0, 80a2644 <_ZN16FuzzyComposition10checkPointEff+0x1e>
 80a263a:	4631      	mov	r1, r6
 80a263c:	68a0      	ldr	r0, [r4, #8]
 80a263e:	f002 fe2f 	bl	80a52a0 <__aeabi_fcmpeq>
 80a2642:	b918      	cbnz	r0, 80a264c <_ZN16FuzzyComposition10checkPointEff+0x26>
            return true;
        }
        aux = aux->previous;
 80a2644:	6824      	ldr	r4, [r4, #0]
}

bool FuzzyComposition::checkPoint(float point, float pertinence){
    pointsArray* aux;
    aux = this->pointsCursor;
    while(aux != NULL){
 80a2646:	e7f2      	b.n	80a262e <_ZN16FuzzyComposition10checkPointEff+0x8>
        if(aux->point == point && aux->pertinence == pertinence){
            return true;
        }
        aux = aux->previous;
    }
    return false;
 80a2648:	4620      	mov	r0, r4
 80a264a:	bd70      	pop	{r4, r5, r6, pc}
bool FuzzyComposition::checkPoint(float point, float pertinence){
    pointsArray* aux;
    aux = this->pointsCursor;
    while(aux != NULL){
        if(aux->point == point && aux->pertinence == pertinence){
            return true;
 80a264c:	2001      	movs	r0, #1
        }
        aux = aux->previous;
    }
    return false;
}
 80a264e:	bd70      	pop	{r4, r5, r6, pc}

080a2650 <_ZN16FuzzyComposition8avaliateEv>:
        aux = aux->next;
    }
    return true;
}

float FuzzyComposition::avaliate(){
 80a2650:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pointsArray* aux;
    float numerator     = 0.0;
    float denominator   = 0.0;
 80a2654:	2700      	movs	r7, #0
    return true;
}

float FuzzyComposition::avaliate(){
    pointsArray* aux;
    float numerator     = 0.0;
 80a2656:	46ba      	mov	sl, r7
    float denominator   = 0.0;

    aux = this->points;
 80a2658:	6845      	ldr	r5, [r0, #4]
    while(aux != NULL){
 80a265a:	2d00      	cmp	r5, #0
 80a265c:	f000 80b1 	beq.w	80a27c2 <_ZN16FuzzyComposition8avaliateEv+0x172>
        if(aux->next != NULL){
 80a2660:	68ee      	ldr	r6, [r5, #12]
 80a2662:	b90e      	cbnz	r6, 80a2668 <_ZN16FuzzyComposition8avaliateEv+0x18>
        aux = aux->next;
    }
    return true;
}

float FuzzyComposition::avaliate(){
 80a2664:	4635      	mov	r5, r6
 80a2666:	e7f8      	b.n	80a265a <_ZN16FuzzyComposition8avaliateEv+0xa>
    aux = this->points;
    while(aux != NULL){
        if(aux->next != NULL){
            float area = 0.0;
            float middle = 0.0;
            if(aux->point == aux->next->point){
 80a2668:	686c      	ldr	r4, [r5, #4]
 80a266a:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80a266e:	4620      	mov	r0, r4
 80a2670:	4641      	mov	r1, r8
 80a2672:	f002 fe15 	bl	80a52a0 <__aeabi_fcmpeq>
 80a2676:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80a267a:	b108      	cbz	r0, 80a2680 <_ZN16FuzzyComposition8avaliateEv+0x30>
                // Se Singleton
                area     = aux->pertinence;
 80a267c:	465d      	mov	r5, fp
 80a267e:	e091      	b.n	80a27a4 <_ZN16FuzzyComposition8avaliateEv+0x154>
                middle   = aux->point;
            }else if(aux->pertinence == 0.0 || aux->next->pertinence == 0.0){
 80a2680:	2100      	movs	r1, #0
 80a2682:	4658      	mov	r0, fp
 80a2684:	f002 fe0c 	bl	80a52a0 <__aeabi_fcmpeq>
 80a2688:	b930      	cbnz	r0, 80a2698 <_ZN16FuzzyComposition8avaliateEv+0x48>
 80a268a:	68b5      	ldr	r5, [r6, #8]
 80a268c:	2100      	movs	r1, #0
 80a268e:	4628      	mov	r0, r5
 80a2690:	f002 fe06 	bl	80a52a0 <__aeabi_fcmpeq>
 80a2694:	2800      	cmp	r0, #0
 80a2696:	d036      	beq.n	80a2706 <_ZN16FuzzyComposition8avaliateEv+0xb6>
                // Se triangulo
                float pertinence;
                if(aux->pertinence > 0.0){
 80a2698:	2100      	movs	r1, #0
 80a269a:	4658      	mov	r0, fp
 80a269c:	f002 fe28 	bl	80a52f0 <__aeabi_fcmpgt>
 80a26a0:	b908      	cbnz	r0, 80a26a6 <_ZN16FuzzyComposition8avaliateEv+0x56>
                    pertinence = aux->pertinence;
                }else{
                    pertinence = aux->next->pertinence;
 80a26a2:	68b5      	ldr	r5, [r6, #8]
 80a26a4:	e000      	b.n	80a26a8 <_ZN16FuzzyComposition8avaliateEv+0x58>
                middle   = aux->point;
            }else if(aux->pertinence == 0.0 || aux->next->pertinence == 0.0){
                // Se triangulo
                float pertinence;
                if(aux->pertinence > 0.0){
                    pertinence = aux->pertinence;
 80a26a6:	465d      	mov	r5, fp
                }else{
                    pertinence = aux->next->pertinence;
                }
                area = ((aux->next->point - aux->point) * pertinence) / 2.0;
 80a26a8:	4621      	mov	r1, r4
 80a26aa:	4640      	mov	r0, r8
 80a26ac:	f002 fb5a 	bl	80a4d64 <__aeabi_fsub>
 80a26b0:	4601      	mov	r1, r0
 80a26b2:	4680      	mov	r8, r0
 80a26b4:	4628      	mov	r0, r5
 80a26b6:	f002 fc5f 	bl	80a4f78 <__aeabi_fmul>
 80a26ba:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a26be:	f002 fc5b 	bl	80a4f78 <__aeabi_fmul>
                if(aux->pertinence < aux->next->pertinence){
 80a26c2:	68b1      	ldr	r1, [r6, #8]
                if(aux->pertinence > 0.0){
                    pertinence = aux->pertinence;
                }else{
                    pertinence = aux->next->pertinence;
                }
                area = ((aux->next->point - aux->point) * pertinence) / 2.0;
 80a26c4:	4605      	mov	r5, r0
                if(aux->pertinence < aux->next->pertinence){
 80a26c6:	4658      	mov	r0, fp
 80a26c8:	f002 fdf4 	bl	80a52b4 <__aeabi_fcmplt>
 80a26cc:	b128      	cbz	r0, 80a26da <_ZN16FuzzyComposition8avaliateEv+0x8a>
                    middle = ((aux->next->point - aux->point) / 1.5) + aux->point;
 80a26ce:	4640      	mov	r0, r8
 80a26d0:	f002 f806 	bl	80a46e0 <__aeabi_f2d>
 80a26d4:	2200      	movs	r2, #0
 80a26d6:	4b42      	ldr	r3, [pc, #264]	; (80a27e0 <_ZN16FuzzyComposition8avaliateEv+0x190>)
 80a26d8:	e004      	b.n	80a26e4 <_ZN16FuzzyComposition8avaliateEv+0x94>
                }else{
                    middle = ((aux->next->point - aux->point) / 3.0) + aux->point;
 80a26da:	4640      	mov	r0, r8
 80a26dc:	f002 f800 	bl	80a46e0 <__aeabi_f2d>
 80a26e0:	4b40      	ldr	r3, [pc, #256]	; (80a27e4 <_ZN16FuzzyComposition8avaliateEv+0x194>)
 80a26e2:	2200      	movs	r2, #0
 80a26e4:	f002 f97a 	bl	80a49dc <__aeabi_ddiv>
 80a26e8:	4680      	mov	r8, r0
 80a26ea:	4620      	mov	r0, r4
 80a26ec:	4689      	mov	r9, r1
 80a26ee:	f001 fff7 	bl	80a46e0 <__aeabi_f2d>
 80a26f2:	4602      	mov	r2, r0
 80a26f4:	460b      	mov	r3, r1
 80a26f6:	4640      	mov	r0, r8
 80a26f8:	4649      	mov	r1, r9
 80a26fa:	f001 fe93 	bl	80a4424 <__adddf3>
 80a26fe:	f002 fadd 	bl	80a4cbc <__aeabi_d2f>
 80a2702:	4604      	mov	r4, r0
 80a2704:	e04e      	b.n	80a27a4 <_ZN16FuzzyComposition8avaliateEv+0x154>
                }
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence == aux->next->pertinence)){
 80a2706:	2100      	movs	r1, #0
 80a2708:	4658      	mov	r0, fp
 80a270a:	f002 fdf1 	bl	80a52f0 <__aeabi_fcmpgt>
 80a270e:	2100      	movs	r1, #0
 80a2710:	b1c0      	cbz	r0, 80a2744 <_ZN16FuzzyComposition8avaliateEv+0xf4>
 80a2712:	4628      	mov	r0, r5
 80a2714:	f002 fdec 	bl	80a52f0 <__aeabi_fcmpgt>
 80a2718:	b1c0      	cbz	r0, 80a274c <_ZN16FuzzyComposition8avaliateEv+0xfc>
 80a271a:	4629      	mov	r1, r5
 80a271c:	4658      	mov	r0, fp
 80a271e:	f002 fdbf 	bl	80a52a0 <__aeabi_fcmpeq>
 80a2722:	b1e8      	cbz	r0, 80a2760 <_ZN16FuzzyComposition8avaliateEv+0x110>
                // Se quadrado
                area = (aux->next->point - aux->point) * aux->pertinence;
 80a2724:	4621      	mov	r1, r4
 80a2726:	4640      	mov	r0, r8
 80a2728:	f002 fb1c 	bl	80a4d64 <__aeabi_fsub>
 80a272c:	4601      	mov	r1, r0
 80a272e:	4680      	mov	r8, r0
 80a2730:	4658      	mov	r0, fp
 80a2732:	f002 fc21 	bl	80a4f78 <__aeabi_fmul>
 80a2736:	4605      	mov	r5, r0
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
 80a2738:	4640      	mov	r0, r8
 80a273a:	f001 ffd1 	bl	80a46e0 <__aeabi_f2d>
 80a273e:	2200      	movs	r2, #0
 80a2740:	4b29      	ldr	r3, [pc, #164]	; (80a27e8 <_ZN16FuzzyComposition8avaliateEv+0x198>)
 80a2742:	e02a      	b.n	80a279a <_ZN16FuzzyComposition8avaliateEv+0x14a>
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence != aux->next->pertinence)){
 80a2744:	4658      	mov	r0, fp
 80a2746:	f002 fdd3 	bl	80a52f0 <__aeabi_fcmpgt>
 80a274a:	b348      	cbz	r0, 80a27a0 <_ZN16FuzzyComposition8avaliateEv+0x150>
 80a274c:	2100      	movs	r1, #0
 80a274e:	4628      	mov	r0, r5
 80a2750:	f002 fdce 	bl	80a52f0 <__aeabi_fcmpgt>
 80a2754:	b320      	cbz	r0, 80a27a0 <_ZN16FuzzyComposition8avaliateEv+0x150>
 80a2756:	4629      	mov	r1, r5
 80a2758:	4658      	mov	r0, fp
 80a275a:	f002 fda1 	bl	80a52a0 <__aeabi_fcmpeq>
 80a275e:	b9f8      	cbnz	r0, 80a27a0 <_ZN16FuzzyComposition8avaliateEv+0x150>
                // Se trapezio
                area = ((aux->pertinence + aux->next->pertinence) / 2.0) * (aux->next->point - aux->point);
 80a2760:	4621      	mov	r1, r4
 80a2762:	4640      	mov	r0, r8
 80a2764:	f002 fafe 	bl	80a4d64 <__aeabi_fsub>
 80a2768:	f001 ffba 	bl	80a46e0 <__aeabi_f2d>
 80a276c:	4680      	mov	r8, r0
 80a276e:	4689      	mov	r9, r1
 80a2770:	4658      	mov	r0, fp
 80a2772:	4629      	mov	r1, r5
 80a2774:	f002 faf8 	bl	80a4d68 <__addsf3>
 80a2778:	f001 ffb2 	bl	80a46e0 <__aeabi_f2d>
 80a277c:	2200      	movs	r2, #0
 80a277e:	4b1a      	ldr	r3, [pc, #104]	; (80a27e8 <_ZN16FuzzyComposition8avaliateEv+0x198>)
 80a2780:	f002 f802 	bl	80a4788 <__aeabi_dmul>
 80a2784:	4642      	mov	r2, r8
 80a2786:	464b      	mov	r3, r9
 80a2788:	f001 fffe 	bl	80a4788 <__aeabi_dmul>
 80a278c:	f002 fa96 	bl	80a4cbc <__aeabi_d2f>
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
 80a2790:	4649      	mov	r1, r9
                // Se quadrado
                area = (aux->next->point - aux->point) * aux->pertinence;
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence != aux->next->pertinence)){
                // Se trapezio
                area = ((aux->pertinence + aux->next->pertinence) / 2.0) * (aux->next->point - aux->point);
 80a2792:	4605      	mov	r5, r0
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
 80a2794:	4640      	mov	r0, r8
 80a2796:	4b14      	ldr	r3, [pc, #80]	; (80a27e8 <_ZN16FuzzyComposition8avaliateEv+0x198>)
 80a2798:	2200      	movs	r2, #0
 80a279a:	f001 fff5 	bl	80a4788 <__aeabi_dmul>
 80a279e:	e7a3      	b.n	80a26e8 <_ZN16FuzzyComposition8avaliateEv+0x98>

    aux = this->points;
    while(aux != NULL){
        if(aux->next != NULL){
            float area = 0.0;
            float middle = 0.0;
 80a27a0:	2400      	movs	r4, #0
    float denominator   = 0.0;

    aux = this->points;
    while(aux != NULL){
        if(aux->next != NULL){
            float area = 0.0;
 80a27a2:	4625      	mov	r5, r4
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence != aux->next->pertinence)){
                // Se trapezio
                area = ((aux->pertinence + aux->next->pertinence) / 2.0) * (aux->next->point - aux->point);
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
            }
            numerator += middle * area;
 80a27a4:	4621      	mov	r1, r4
 80a27a6:	4628      	mov	r0, r5
 80a27a8:	f002 fbe6 	bl	80a4f78 <__aeabi_fmul>
 80a27ac:	4601      	mov	r1, r0
 80a27ae:	4650      	mov	r0, sl
 80a27b0:	f002 fada 	bl	80a4d68 <__addsf3>
            denominator += area;
 80a27b4:	4629      	mov	r1, r5
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence != aux->next->pertinence)){
                // Se trapezio
                area = ((aux->pertinence + aux->next->pertinence) / 2.0) * (aux->next->point - aux->point);
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
            }
            numerator += middle * area;
 80a27b6:	4682      	mov	sl, r0
            denominator += area;
 80a27b8:	4638      	mov	r0, r7
 80a27ba:	f002 fad5 	bl	80a4d68 <__addsf3>
 80a27be:	4607      	mov	r7, r0
 80a27c0:	e750      	b.n	80a2664 <_ZN16FuzzyComposition8avaliateEv+0x14>
        }
        aux = aux->next;
    }

    if(denominator == 0.0){
 80a27c2:	2100      	movs	r1, #0
 80a27c4:	4638      	mov	r0, r7
 80a27c6:	f002 fd6b 	bl	80a52a0 <__aeabi_fcmpeq>
 80a27ca:	b928      	cbnz	r0, 80a27d8 <_ZN16FuzzyComposition8avaliateEv+0x188>
        return 0.0;
    }else{
        return numerator / denominator;
 80a27cc:	4639      	mov	r1, r7
 80a27ce:	4650      	mov	r0, sl
 80a27d0:	f002 fc86 	bl	80a50e0 <__aeabi_fdiv>
 80a27d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }
        aux = aux->next;
    }

    if(denominator == 0.0){
        return 0.0;
 80a27d8:	2000      	movs	r0, #0
    }else{
        return numerator / denominator;
    }
}
 80a27da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a27de:	bf00      	nop
 80a27e0:	3ff80000 	.word	0x3ff80000
 80a27e4:	40080000 	.word	0x40080000
 80a27e8:	3fe00000 	.word	0x3fe00000

080a27ec <_ZN16FuzzyComposition11cleanPointsEP11pointsArray>:
    this->pointsCursor = NULL;
    return true;
}

// MÉTODOS PRIVADOS
void FuzzyComposition::cleanPoints(pointsArray* aux){
 80a27ec:	b510      	push	{r4, lr}
    if(aux != NULL){
 80a27ee:	460c      	mov	r4, r1
 80a27f0:	b139      	cbz	r1, 80a2802 <_ZN16FuzzyComposition11cleanPointsEP11pointsArray+0x16>
        // Esvaziando a memória alocada
        this->cleanPoints(aux->next);
 80a27f2:	68c9      	ldr	r1, [r1, #12]
 80a27f4:	f7ff fffa 	bl	80a27ec <_ZN16FuzzyComposition11cleanPointsEP11pointsArray>
        free(aux);
 80a27f8:	4620      	mov	r0, r4
    }
}
 80a27fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// MÉTODOS PRIVADOS
void FuzzyComposition::cleanPoints(pointsArray* aux){
    if(aux != NULL){
        // Esvaziando a memória alocada
        this->cleanPoints(aux->next);
        free(aux);
 80a27fe:	f000 bfc1 	b.w	80a3784 <free>
 80a2802:	bd10      	pop	{r4, pc}

080a2804 <_ZN16FuzzyComposition5emptyEv>:
    }else{
        return numerator / denominator;
    }
}

bool FuzzyComposition::empty(){
 80a2804:	b510      	push	{r4, lr}
 80a2806:	4604      	mov	r4, r0
    // limpando a memória
    this->cleanPoints(this->points);
 80a2808:	6841      	ldr	r1, [r0, #4]
 80a280a:	f7ff ffef 	bl	80a27ec <_ZN16FuzzyComposition11cleanPointsEP11pointsArray>
    // resetando os ponteiros
    this->points = NULL;
 80a280e:	2300      	movs	r3, #0
 80a2810:	6063      	str	r3, [r4, #4]
    this->pointsCursor = NULL;
 80a2812:	6023      	str	r3, [r4, #0]
    return true;
}
 80a2814:	2001      	movs	r0, #1
 80a2816:	bd10      	pop	{r4, pc}

080a2818 <_ZN16FuzzyComposition8rmvPointEP11pointsArray>:

        return true;
    }
}

bool FuzzyComposition::rmvPoint(pointsArray* point){
 80a2818:	b508      	push	{r3, lr}
    if(point != NULL){
 80a281a:	b111      	cbz	r1, 80a2822 <_ZN16FuzzyComposition8rmvPointEP11pointsArray+0xa>
        free(point);
 80a281c:	4608      	mov	r0, r1
 80a281e:	f000 ffb1 	bl	80a3784 <free>
    }
    return true;
}
 80a2822:	2001      	movs	r0, #1
 80a2824:	bd08      	pop	{r3, pc}
	...

080a2828 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_>:
        this->cleanPoints(aux->next);
        free(aux);
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
 80a2828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a282c:	461e      	mov	r6, r3
    float x1 = aSegmentBegin->point;
 80a282e:	684b      	ldr	r3, [r1, #4]
        this->cleanPoints(aux->next);
        free(aux);
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
 80a2830:	b087      	sub	sp, #28
    float x1 = aSegmentBegin->point;
 80a2832:	9301      	str	r3, [sp, #4]
    float y1 = aSegmentBegin->pertinence;
 80a2834:	688b      	ldr	r3, [r1, #8]
    float x2 = aSegmentEnd->point;
    float y2 = aSegmentEnd->pertinence;
    float x3 = bSegmentBegin->point;
    float y3 = bSegmentBegin->pertinence;
 80a2836:	f8d6 9008 	ldr.w	r9, [r6, #8]
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
    float x1 = aSegmentBegin->point;
    float y1 = aSegmentBegin->pertinence;
 80a283a:	9302      	str	r3, [sp, #8]
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a283c:	9b10      	ldr	r3, [sp, #64]	; 0x40
        this->cleanPoints(aux->next);
        free(aux);
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
 80a283e:	9005      	str	r0, [sp, #20]
 80a2840:	460c      	mov	r4, r1
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2842:	6898      	ldr	r0, [r3, #8]
 80a2844:	4649      	mov	r1, r9
        this->cleanPoints(aux->next);
        free(aux);
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
 80a2846:	4617      	mov	r7, r2
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2848:	f002 fa8c 	bl	80a4d64 <__aeabi_fsub>
 80a284c:	9901      	ldr	r1, [sp, #4]
 80a284e:	4682      	mov	sl, r0
 80a2850:	6878      	ldr	r0, [r7, #4]
 80a2852:	f002 fa87 	bl	80a4d64 <__aeabi_fsub>
bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
    float x1 = aSegmentBegin->point;
    float y1 = aSegmentBegin->pertinence;
    float x2 = aSegmentEnd->point;
    float y2 = aSegmentEnd->pertinence;
    float x3 = bSegmentBegin->point;
 80a2856:	f8d6 8004 	ldr.w	r8, [r6, #4]
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a285a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a285c:	4641      	mov	r1, r8
 80a285e:	9003      	str	r0, [sp, #12]
 80a2860:	6858      	ldr	r0, [r3, #4]
 80a2862:	f002 fa7f 	bl	80a4d64 <__aeabi_fsub>
 80a2866:	9902      	ldr	r1, [sp, #8]
 80a2868:	4683      	mov	fp, r0
 80a286a:	68b8      	ldr	r0, [r7, #8]
 80a286c:	f002 fa7a 	bl	80a4d64 <__aeabi_fsub>
 80a2870:	9903      	ldr	r1, [sp, #12]
 80a2872:	9004      	str	r0, [sp, #16]
 80a2874:	4650      	mov	r0, sl
 80a2876:	f002 fb7f 	bl	80a4f78 <__aeabi_fmul>
 80a287a:	9904      	ldr	r1, [sp, #16]
 80a287c:	4605      	mov	r5, r0
 80a287e:	4658      	mov	r0, fp
 80a2880:	f002 fb7a 	bl	80a4f78 <__aeabi_fmul>
 80a2884:	4601      	mov	r1, r0
 80a2886:	4628      	mov	r0, r5
 80a2888:	f002 fa6c 	bl	80a4d64 <__aeabi_fsub>
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a288c:	4649      	mov	r1, r9
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a288e:	4605      	mov	r5, r0
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a2890:	9802      	ldr	r0, [sp, #8]
 80a2892:	f002 fa67 	bl	80a4d64 <__aeabi_fsub>
 80a2896:	4641      	mov	r1, r8
 80a2898:	4681      	mov	r9, r0
 80a289a:	9801      	ldr	r0, [sp, #4]
 80a289c:	f002 fa62 	bl	80a4d64 <__aeabi_fsub>
 80a28a0:	4649      	mov	r1, r9
 80a28a2:	4680      	mov	r8, r0
 80a28a4:	4658      	mov	r0, fp
 80a28a6:	f002 fb67 	bl	80a4f78 <__aeabi_fmul>
 80a28aa:	4641      	mov	r1, r8
 80a28ac:	4683      	mov	fp, r0
 80a28ae:	4650      	mov	r0, sl
 80a28b0:	f002 fb62 	bl	80a4f78 <__aeabi_fmul>
 80a28b4:	4601      	mov	r1, r0
 80a28b6:	4658      	mov	r0, fp
 80a28b8:	f002 fa54 	bl	80a4d64 <__aeabi_fsub>
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a28bc:	4649      	mov	r1, r9
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a28be:	4682      	mov	sl, r0
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a28c0:	9803      	ldr	r0, [sp, #12]
 80a28c2:	f002 fb59 	bl	80a4f78 <__aeabi_fmul>
 80a28c6:	4641      	mov	r1, r8
 80a28c8:	4681      	mov	r9, r0
 80a28ca:	9804      	ldr	r0, [sp, #16]
 80a28cc:	f002 fb54 	bl	80a4f78 <__aeabi_fmul>
 80a28d0:	4601      	mov	r1, r0
 80a28d2:	4648      	mov	r0, r9
 80a28d4:	f002 fa46 	bl	80a4d64 <__aeabi_fsub>

    if(denom < 0.0){
 80a28d8:	2100      	movs	r1, #0
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a28da:	4680      	mov	r8, r0

    if(denom < 0.0){
 80a28dc:	4628      	mov	r0, r5
 80a28de:	f002 fce9 	bl	80a52b4 <__aeabi_fcmplt>
 80a28e2:	b108      	cbz	r0, 80a28e8 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xc0>
        denom *= -1.0;
 80a28e4:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    }
    if(numera < 0.0){
 80a28e8:	2100      	movs	r1, #0
 80a28ea:	4650      	mov	r0, sl
 80a28ec:	f002 fce2 	bl	80a52b4 <__aeabi_fcmplt>
 80a28f0:	b108      	cbz	r0, 80a28f6 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xce>
        numera *= -1.0;
 80a28f2:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
    }
    if(numerb < 0.0){
 80a28f6:	2100      	movs	r1, #0
 80a28f8:	4640      	mov	r0, r8
 80a28fa:	f002 fcdb 	bl	80a52b4 <__aeabi_fcmplt>
 80a28fe:	b108      	cbz	r0, 80a2904 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xdc>
        numerb *= -1.0;
 80a2900:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
    }

    // Se os seguimentos forem paralelos, retornar falso
    if(denom < EPS){
 80a2904:	4628      	mov	r0, r5
 80a2906:	f001 feeb 	bl	80a46e0 <__aeabi_f2d>
 80a290a:	a331      	add	r3, pc, #196	; (adr r3, 80a29d0 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x1a8>)
 80a290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2910:	f002 f9ac 	bl	80a4c6c <__aeabi_dcmplt>
 80a2914:	b108      	cbz	r0, 80a291a <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xf2>
        return false;
 80a2916:	2000      	movs	r0, #0
 80a2918:	e057      	b.n	80a29ca <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x1a2>
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
 80a291a:	4629      	mov	r1, r5
 80a291c:	4650      	mov	r0, sl
 80a291e:	f002 fbdf 	bl	80a50e0 <__aeabi_fdiv>
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a2922:	2100      	movs	r1, #0
    if(denom < EPS){
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
 80a2924:	4681      	mov	r9, r0
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a2926:	f002 fcc5 	bl	80a52b4 <__aeabi_fcmplt>
 80a292a:	2800      	cmp	r0, #0
 80a292c:	d1f3      	bne.n	80a2916 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
 80a292e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2932:	4648      	mov	r0, r9
 80a2934:	f002 fcdc 	bl	80a52f0 <__aeabi_fcmpgt>
 80a2938:	2800      	cmp	r0, #0
 80a293a:	d1ec      	bne.n	80a2916 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
    mub = numerb / denom;
 80a293c:	4629      	mov	r1, r5
 80a293e:	4640      	mov	r0, r8
 80a2940:	f002 fbce 	bl	80a50e0 <__aeabi_fdiv>
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a2944:	2100      	movs	r1, #0
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
    mub = numerb / denom;
 80a2946:	4605      	mov	r5, r0
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a2948:	f002 fcb4 	bl	80a52b4 <__aeabi_fcmplt>
 80a294c:	2800      	cmp	r0, #0
 80a294e:	d1e2      	bne.n	80a2916 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
 80a2950:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2954:	4628      	mov	r0, r5
 80a2956:	f002 fccb 	bl	80a52f0 <__aeabi_fcmpgt>
 80a295a:	2800      	cmp	r0, #0
 80a295c:	d1db      	bne.n	80a2916 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
        return false;
    }else{
        // Calculando o ponto e a pertinencia do novo elemento
        point         = x1 + mua * (x2 - x1);
 80a295e:	4649      	mov	r1, r9
 80a2960:	9803      	ldr	r0, [sp, #12]
 80a2962:	f002 fb09 	bl	80a4f78 <__aeabi_fmul>
 80a2966:	9901      	ldr	r1, [sp, #4]
 80a2968:	f002 f9fe 	bl	80a4d68 <__addsf3>
        pertinence     = y1 + mua * (y2 - y1);
 80a296c:	4649      	mov	r1, r9
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
        return false;
    }else{
        // Calculando o ponto e a pertinencia do novo elemento
        point         = x1 + mua * (x2 - x1);
 80a296e:	4605      	mov	r5, r0
        pertinence     = y1 + mua * (y2 - y1);
 80a2970:	9804      	ldr	r0, [sp, #16]
 80a2972:	f002 fb01 	bl	80a4f78 <__aeabi_fmul>
 80a2976:	9902      	ldr	r1, [sp, #8]
 80a2978:	f002 f9f6 	bl	80a4d68 <__addsf3>
 80a297c:	4680      	mov	r8, r0

        // Adicionando um novo ponto
        pointsArray* aux;
        // Alocando espaço na memória
        if((aux = (pointsArray *) malloc(sizeof(pointsArray))) == NULL){
 80a297e:	2010      	movs	r0, #16
 80a2980:	f000 fef8 	bl	80a3774 <malloc>
 80a2984:	2800      	cmp	r0, #0
 80a2986:	d0c6      	beq.n	80a2916 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
            return false;
        }

        aux->previous = bSegmentEnd;
 80a2988:	9b10      	ldr	r3, [sp, #64]	; 0x40
        aux->point = point;
 80a298a:	6045      	str	r5, [r0, #4]
        // Alocando espaço na memória
        if((aux = (pointsArray *) malloc(sizeof(pointsArray))) == NULL){
            return false;
        }

        aux->previous = bSegmentEnd;
 80a298c:	6003      	str	r3, [r0, #0]
        aux->point = point;
        aux->pertinence = pertinence;
 80a298e:	f8c0 8008 	str.w	r8, [r0, #8]
        aux->next = aSegmentEnd;
 80a2992:	60c7      	str	r7, [r0, #12]

        bSegmentEnd->next = aux;
 80a2994:	60d8      	str	r0, [r3, #12]
        aSegmentEnd->previous = aux;
 80a2996:	6038      	str	r0, [r7, #0]

        float stopPoint = bSegmentBegin->point;
 80a2998:	6877      	ldr	r7, [r6, #4]
        float stopPertinence = bSegmentBegin->pertinence;
 80a299a:	68b6      	ldr	r6, [r6, #8]

        pointsArray* temp = aSegmentBegin;
        pointsArray* excl;

        do{
            float pointToCompare = temp->point;
 80a299c:	f8d4 9004 	ldr.w	r9, [r4, #4]
            float pertinenceToCompare = temp->pertinence;

            excl = temp->previous;

            this->rmvPoint(temp);
 80a29a0:	4621      	mov	r1, r4
 80a29a2:	9805      	ldr	r0, [sp, #20]
        pointsArray* temp = aSegmentBegin;
        pointsArray* excl;

        do{
            float pointToCompare = temp->point;
            float pertinenceToCompare = temp->pertinence;
 80a29a4:	f8d4 8008 	ldr.w	r8, [r4, #8]

            excl = temp->previous;
 80a29a8:	6825      	ldr	r5, [r4, #0]

            this->rmvPoint(temp);
 80a29aa:	f7ff ff35 	bl	80a2818 <_ZN16FuzzyComposition8rmvPointEP11pointsArray>

            temp = excl;

            if(stopPoint == pointToCompare && stopPertinence == pertinenceToCompare){
 80a29ae:	4649      	mov	r1, r9
 80a29b0:	4638      	mov	r0, r7
 80a29b2:	f002 fc75 	bl	80a52a0 <__aeabi_fcmpeq>
 80a29b6:	b120      	cbz	r0, 80a29c2 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x19a>
 80a29b8:	4641      	mov	r1, r8
 80a29ba:	4630      	mov	r0, r6
 80a29bc:	f002 fc70 	bl	80a52a0 <__aeabi_fcmpeq>
 80a29c0:	b910      	cbnz	r0, 80a29c8 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x1a0>
 80a29c2:	462c      	mov	r4, r5
                break;
            }
        }while(temp != NULL);
 80a29c4:	2d00      	cmp	r5, #0
 80a29c6:	d1e9      	bne.n	80a299c <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x174>

        return true;
 80a29c8:	2001      	movs	r0, #1
    }
}
 80a29ca:	b007      	add	sp, #28
 80a29cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a29d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80a29d4:	3f50624d 	.word	0x3f50624d

080a29d8 <_ZN16FuzzyComposition5buildEv>:
        aux = aux->previous;
    }
    return false;
}

bool FuzzyComposition::build(){
 80a29d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a29da:	4606      	mov	r6, r0
    pointsArray* aux;

    aux = this->points;
 80a29dc:	6845      	ldr	r5, [r0, #4]
    while(aux != NULL){
 80a29de:	b1dd      	cbz	r5, 80a2a18 <_ZN16FuzzyComposition5buildEv+0x40>
 80a29e0:	462c      	mov	r4, r5
        pointsArray* temp = aux;
        while(temp->previous != NULL){
 80a29e2:	6827      	ldr	r7, [r4, #0]
 80a29e4:	b1b7      	cbz	r7, 80a2a14 <_ZN16FuzzyComposition5buildEv+0x3c>
            if(temp->point < temp->previous->point){
 80a29e6:	6879      	ldr	r1, [r7, #4]
 80a29e8:	6860      	ldr	r0, [r4, #4]
 80a29ea:	f002 fc63 	bl	80a52b4 <__aeabi_fcmplt>
 80a29ee:	b908      	cbnz	r0, 80a29f4 <_ZN16FuzzyComposition5buildEv+0x1c>
 80a29f0:	463c      	mov	r4, r7
 80a29f2:	e7f6      	b.n	80a29e2 <_ZN16FuzzyComposition5buildEv+0xa>
 80a29f4:	4627      	mov	r7, r4
            temp = temp->previous;
        }
        pointsArray* zPoint;
        if(temp != NULL){
            zPoint = temp;
            while(temp->previous != NULL){
 80a29f6:	683b      	ldr	r3, [r7, #0]
 80a29f8:	b163      	cbz	r3, 80a2a14 <_ZN16FuzzyComposition5buildEv+0x3c>
                bool result = false;
                if(temp->previous->previous != NULL){
 80a29fa:	681a      	ldr	r2, [r3, #0]
 80a29fc:	b142      	cbz	r2, 80a2a10 <_ZN16FuzzyComposition5buildEv+0x38>
                    result = rebuild(zPoint, zPoint->next, temp->previous, temp->previous->previous);
 80a29fe:	9200      	str	r2, [sp, #0]
 80a2a00:	68e2      	ldr	r2, [r4, #12]
 80a2a02:	4621      	mov	r1, r4
 80a2a04:	4630      	mov	r0, r6
 80a2a06:	f7ff ff0f 	bl	80a2828 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_>
                }
                if(result == true){
 80a2a0a:	b108      	cbz	r0, 80a2a10 <_ZN16FuzzyComposition5buildEv+0x38>
                    aux = this->points;
 80a2a0c:	6875      	ldr	r5, [r6, #4]
                    break;
 80a2a0e:	e001      	b.n	80a2a14 <_ZN16FuzzyComposition5buildEv+0x3c>
                }
                temp = temp->previous;
 80a2a10:	683f      	ldr	r7, [r7, #0]
            temp = temp->previous;
        }
        pointsArray* zPoint;
        if(temp != NULL){
            zPoint = temp;
            while(temp->previous != NULL){
 80a2a12:	e7f0      	b.n	80a29f6 <_ZN16FuzzyComposition5buildEv+0x1e>
                    break;
                }
                temp = temp->previous;
            }
        }
        aux = aux->next;
 80a2a14:	68ed      	ldr	r5, [r5, #12]

bool FuzzyComposition::build(){
    pointsArray* aux;

    aux = this->points;
    while(aux != NULL){
 80a2a16:	e7e2      	b.n	80a29de <_ZN16FuzzyComposition5buildEv+0x6>
            }
        }
        aux = aux->next;
    }
    return true;
}
 80a2a18:	2001      	movs	r0, #1
 80a2a1a:	b003      	add	sp, #12
 80a2a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2a1e <_ZN10FuzzyInputC1Ei>:

// CONSTRUTORES
FuzzyInput::FuzzyInput() : FuzzyIO(){
}

FuzzyInput::FuzzyInput(int index) : FuzzyIO(index){
 80a2a1e:	b510      	push	{r4, lr}
 80a2a20:	4604      	mov	r4, r0
 80a2a22:	f000 f80f 	bl	80a2a44 <_ZN7FuzzyIOC1Ei>
}
 80a2a26:	4620      	mov	r0, r4
 80a2a28:	bd10      	pop	{r4, pc}

080a2a2a <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv>:
// DESTRUTOR
FuzzyInput::~FuzzyInput(){
}

// MÉTODOS PÚBLICOS
bool FuzzyInput::calculateFuzzySetPertinences(){
 80a2a2a:	b538      	push	{r3, r4, r5, lr}
 80a2a2c:	4605      	mov	r5, r0
    fuzzySetArray *aux;
    aux = this->fuzzySets;
 80a2a2e:	6884      	ldr	r4, [r0, #8]

    while(aux != NULL){
 80a2a30:	b134      	cbz	r4, 80a2a40 <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv+0x16>
        if (aux->fuzzySet != NULL){
 80a2a32:	6820      	ldr	r0, [r4, #0]
 80a2a34:	b110      	cbz	r0, 80a2a3c <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv+0x12>
            aux->fuzzySet->calculatePertinence(this->crispInput);
 80a2a36:	6869      	ldr	r1, [r5, #4]
 80a2a38:	f000 fa7e 	bl	80a2f38 <_ZN8FuzzySet19calculatePertinenceEf>
        }
        aux = aux->next;
 80a2a3c:	6864      	ldr	r4, [r4, #4]
// MÉTODOS PÚBLICOS
bool FuzzyInput::calculateFuzzySetPertinences(){
    fuzzySetArray *aux;
    aux = this->fuzzySets;

    while(aux != NULL){
 80a2a3e:	e7f7      	b.n	80a2a30 <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv+0x6>
        }
        aux = aux->next;
    }
    
    return true;
 80a2a40:	2001      	movs	r0, #1
 80a2a42:	bd38      	pop	{r3, r4, r5, pc}

080a2a44 <_ZN7FuzzyIOC1Ei>:
}

FuzzyIO::FuzzyIO(int index){
    this->index = index;
    // Iniciando os ponteiros como nulo
    this->fuzzySets          = NULL;
 80a2a44:	2200      	movs	r2, #0
// CONSTRUTORES
FuzzyIO::FuzzyIO(){
}

FuzzyIO::FuzzyIO(int index){
    this->index = index;
 80a2a46:	6001      	str	r1, [r0, #0]
    // Iniciando os ponteiros como nulo
    this->fuzzySets          = NULL;
 80a2a48:	6082      	str	r2, [r0, #8]
    this->fuzzySetsCursor    = NULL;
 80a2a4a:	60c2      	str	r2, [r0, #12]
}
 80a2a4c:	4770      	bx	lr

080a2a4e <_ZN7FuzzyIO8getIndexEv>:
}

// MÉTODOS PÚBLICOS
int FuzzyIO::getIndex(){
    return this->index;
}
 80a2a4e:	6800      	ldr	r0, [r0, #0]
 80a2a50:	4770      	bx	lr

080a2a52 <_ZN7FuzzyIO13setCrispInputEf>:

void FuzzyIO::setCrispInput(float crispInput){
    this->crispInput = crispInput;
 80a2a52:	6041      	str	r1, [r0, #4]
 80a2a54:	4770      	bx	lr

080a2a56 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>:

float FuzzyIO::getCrispInput(){
    return this->crispInput;
}

bool FuzzyIO::addFuzzySet(FuzzySet* fuzzySet){
 80a2a56:	b538      	push	{r3, r4, r5, lr}
 80a2a58:	4604      	mov	r4, r0
    fuzzySetArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetArray *) malloc(sizeof(fuzzySetArray))) == NULL){
 80a2a5a:	2008      	movs	r0, #8

float FuzzyIO::getCrispInput(){
    return this->crispInput;
}

bool FuzzyIO::addFuzzySet(FuzzySet* fuzzySet){
 80a2a5c:	460d      	mov	r5, r1
    fuzzySetArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetArray *) malloc(sizeof(fuzzySetArray))) == NULL){
 80a2a5e:	f000 fe89 	bl	80a3774 <malloc>
 80a2a62:	b150      	cbz	r0, 80a2a7a <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet+0x24>
        return false;
    }
    aux->fuzzySet     = fuzzySet;
    aux->next         = NULL;
 80a2a64:	2300      	movs	r3, #0
    fuzzySetArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetArray *) malloc(sizeof(fuzzySetArray))) == NULL){
        return false;
    }
    aux->fuzzySet     = fuzzySet;
 80a2a66:	6005      	str	r5, [r0, #0]
    aux->next         = NULL;
 80a2a68:	6043      	str	r3, [r0, #4]

    if(this->fuzzySets == NULL){
 80a2a6a:	68a3      	ldr	r3, [r4, #8]
 80a2a6c:	b90b      	cbnz	r3, 80a2a72 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet+0x1c>
        this->fuzzySets = aux;
 80a2a6e:	60a0      	str	r0, [r4, #8]
 80a2a70:	e001      	b.n	80a2a76 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet+0x20>
        this->fuzzySetsCursor = aux;
    }else{
        this->fuzzySetsCursor->next = aux;
 80a2a72:	68e3      	ldr	r3, [r4, #12]
 80a2a74:	6058      	str	r0, [r3, #4]
        this->fuzzySetsCursor = aux;
 80a2a76:	60e0      	str	r0, [r4, #12]
    }
    return true;
 80a2a78:	2001      	movs	r0, #1
}
 80a2a7a:	bd38      	pop	{r3, r4, r5, pc}

080a2a7c <_ZN7FuzzyIO14resetFuzzySetsEv>:

void FuzzyIO::resetFuzzySets(){
 80a2a7c:	b510      	push	{r4, lr}
    fuzzySetArray* fuzzySetsAux;
    fuzzySetsAux = this->fuzzySets;
 80a2a7e:	6884      	ldr	r4, [r0, #8]
    // Calculando as pertinências de totos os FuzzyInputs
    while(fuzzySetsAux != NULL){
 80a2a80:	b124      	cbz	r4, 80a2a8c <_ZN7FuzzyIO14resetFuzzySetsEv+0x10>
        fuzzySetsAux->fuzzySet->reset();
 80a2a82:	6820      	ldr	r0, [r4, #0]
 80a2a84:	f000 faed 	bl	80a3062 <_ZN8FuzzySet5resetEv>
        fuzzySetsAux = fuzzySetsAux->next;
 80a2a88:	6864      	ldr	r4, [r4, #4]

void FuzzyIO::resetFuzzySets(){
    fuzzySetArray* fuzzySetsAux;
    fuzzySetsAux = this->fuzzySets;
    // Calculando as pertinências de totos os FuzzyInputs
    while(fuzzySetsAux != NULL){
 80a2a8a:	e7f9      	b.n	80a2a80 <_ZN7FuzzyIO14resetFuzzySetsEv+0x4>
 80a2a8c:	bd10      	pop	{r4, pc}

080a2a8e <_ZN11FuzzyOutputC1Ei>:

// CONSTRUTORES
FuzzyOutput::FuzzyOutput() : FuzzyIO(){
}

FuzzyOutput::FuzzyOutput(int index) : FuzzyIO(index){
 80a2a8e:	b510      	push	{r4, lr}
 80a2a90:	4604      	mov	r4, r0
 80a2a92:	f7ff ffd7 	bl	80a2a44 <_ZN7FuzzyIOC1Ei>
 80a2a96:	f104 0010 	add.w	r0, r4, #16
 80a2a9a:	f7ff fda7 	bl	80a25ec <_ZN16FuzzyCompositionC1Ev>
}
 80a2a9e:	4620      	mov	r0, r4
 80a2aa0:	bd10      	pop	{r4, pc}

080a2aa2 <_ZN11FuzzyOutput14getCrispOutputEv>:

    return true;
}

float FuzzyOutput::getCrispOutput(){
    return this->fuzzyComposition.avaliate();
 80a2aa2:	3010      	adds	r0, #16
 80a2aa4:	f7ff bdd4 	b.w	80a2650 <_ZN16FuzzyComposition8avaliateEv>

080a2aa8 <_ZN11FuzzyOutput5orderEv>:
}

// Um simples Bubble Sort
bool FuzzyOutput::order(){
 80a2aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fuzzySetArray *aux1;
    fuzzySetArray *aux2;

    aux1 = this->fuzzySets;
 80a2aaa:	6884      	ldr	r4, [r0, #8]
float FuzzyOutput::getCrispOutput(){
    return this->fuzzyComposition.avaliate();
}

// Um simples Bubble Sort
bool FuzzyOutput::order(){
 80a2aac:	4606      	mov	r6, r0
    fuzzySetArray *aux1;
    fuzzySetArray *aux2;

    aux1 = this->fuzzySets;
 80a2aae:	4625      	mov	r5, r4
    aux2 = this->fuzzySets;

    while(aux1 != NULL){
 80a2ab0:	b1cd      	cbz	r5, 80a2ae6 <_ZN11FuzzyOutput5orderEv+0x3e>
        while(aux2 != NULL){
 80a2ab2:	b1ac      	cbz	r4, 80a2ae0 <_ZN11FuzzyOutput5orderEv+0x38>
            if(aux2->next != NULL){
 80a2ab4:	6863      	ldr	r3, [r4, #4]
 80a2ab6:	b18b      	cbz	r3, 80a2adc <_ZN11FuzzyOutput5orderEv+0x34>
                if(aux2->fuzzySet->getPointA() > aux2->next->fuzzySet->getPointA()){
 80a2ab8:	6820      	ldr	r0, [r4, #0]
 80a2aba:	f000 fa35 	bl	80a2f28 <_ZN8FuzzySet9getPointAEv>
 80a2abe:	6863      	ldr	r3, [r4, #4]
 80a2ac0:	4607      	mov	r7, r0
 80a2ac2:	6818      	ldr	r0, [r3, #0]
 80a2ac4:	f000 fa30 	bl	80a2f28 <_ZN8FuzzySet9getPointAEv>
 80a2ac8:	4601      	mov	r1, r0
 80a2aca:	4638      	mov	r0, r7
 80a2acc:	f002 fc10 	bl	80a52f0 <__aeabi_fcmpgt>
 80a2ad0:	b120      	cbz	r0, 80a2adc <_ZN11FuzzyOutput5orderEv+0x34>

// MÉTODOS PRIVADOS
bool FuzzyOutput::swap(fuzzySetArray* fuzzySetA, fuzzySetArray* fuzzySetB){
    FuzzySet* aux;
    
    aux = fuzzySetA->fuzzySet;
 80a2ad2:	e894 000c 	ldmia.w	r4, {r2, r3}
    fuzzySetA->fuzzySet = fuzzySetB->fuzzySet;
 80a2ad6:	6819      	ldr	r1, [r3, #0]
 80a2ad8:	6021      	str	r1, [r4, #0]
    fuzzySetB->fuzzySet = aux;
 80a2ada:	601a      	str	r2, [r3, #0]
            if(aux2->next != NULL){
                if(aux2->fuzzySet->getPointA() > aux2->next->fuzzySet->getPointA()){
                    this->swap(aux2, aux2->next);
                }
            }
            aux2 = aux2->next;
 80a2adc:	6864      	ldr	r4, [r4, #4]

    aux1 = this->fuzzySets;
    aux2 = this->fuzzySets;

    while(aux1 != NULL){
        while(aux2 != NULL){
 80a2ade:	e7e8      	b.n	80a2ab2 <_ZN11FuzzyOutput5orderEv+0xa>
                    this->swap(aux2, aux2->next);
                }
            }
            aux2 = aux2->next;
        }
        aux2 = this->fuzzySets;
 80a2ae0:	68b4      	ldr	r4, [r6, #8]
        aux1 = aux1->next;
 80a2ae2:	686d      	ldr	r5, [r5, #4]
    fuzzySetArray *aux2;

    aux1 = this->fuzzySets;
    aux2 = this->fuzzySets;

    while(aux1 != NULL){
 80a2ae4:	e7e4      	b.n	80a2ab0 <_ZN11FuzzyOutput5orderEv+0x8>
        }
        aux2 = this->fuzzySets;
        aux1 = aux1->next;
    }
    return true;
}
 80a2ae6:	2001      	movs	r0, #1
 80a2ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2aea:	0000      	movs	r0, r0
 80a2aec:	0000      	movs	r0, r0
	...

080a2af0 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_>:
    fuzzySetB->fuzzySet = aux;

    return true;
}

bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
 80a2af0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2af4:	9810      	ldr	r0, [sp, #64]	; 0x40
    fuzzySetB->fuzzySet = aux;

    return true;
}

bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
 80a2af6:	460f      	mov	r7, r1
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2af8:	990e      	ldr	r1, [sp, #56]	; 0x38
    fuzzySetB->fuzzySet = aux;

    return true;
}

bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
 80a2afa:	4615      	mov	r5, r2
 80a2afc:	461c      	mov	r4, r3
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2afe:	f002 f931 	bl	80a4d64 <__aeabi_fsub>
 80a2b02:	4639      	mov	r1, r7
 80a2b04:	4682      	mov	sl, r0
 80a2b06:	4620      	mov	r0, r4
 80a2b08:	f002 f92c 	bl	80a4d64 <__aeabi_fsub>
 80a2b0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a2b0e:	4680      	mov	r8, r0
 80a2b10:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80a2b12:	f002 f927 	bl	80a4d64 <__aeabi_fsub>
 80a2b16:	4629      	mov	r1, r5
 80a2b18:	4683      	mov	fp, r0
 80a2b1a:	980c      	ldr	r0, [sp, #48]	; 0x30
 80a2b1c:	f002 f922 	bl	80a4d64 <__aeabi_fsub>
 80a2b20:	4641      	mov	r1, r8
 80a2b22:	4606      	mov	r6, r0
 80a2b24:	4650      	mov	r0, sl
 80a2b26:	f002 fa27 	bl	80a4f78 <__aeabi_fmul>
 80a2b2a:	4631      	mov	r1, r6
 80a2b2c:	4604      	mov	r4, r0
 80a2b2e:	4658      	mov	r0, fp
 80a2b30:	f002 fa22 	bl	80a4f78 <__aeabi_fmul>
 80a2b34:	4601      	mov	r1, r0
 80a2b36:	4620      	mov	r0, r4
 80a2b38:	f002 f914 	bl	80a4d64 <__aeabi_fsub>
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a2b3c:	990e      	ldr	r1, [sp, #56]	; 0x38

bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2b3e:	4604      	mov	r4, r0
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a2b40:	4628      	mov	r0, r5
 80a2b42:	f002 f90f 	bl	80a4d64 <__aeabi_fsub>
 80a2b46:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a2b48:	4681      	mov	r9, r0
 80a2b4a:	4638      	mov	r0, r7
 80a2b4c:	f002 f90a 	bl	80a4d64 <__aeabi_fsub>
 80a2b50:	4649      	mov	r1, r9
 80a2b52:	9001      	str	r0, [sp, #4]
 80a2b54:	4658      	mov	r0, fp
 80a2b56:	f002 fa0f 	bl	80a4f78 <__aeabi_fmul>
 80a2b5a:	9901      	ldr	r1, [sp, #4]
 80a2b5c:	4683      	mov	fp, r0
 80a2b5e:	4650      	mov	r0, sl
 80a2b60:	f002 fa0a 	bl	80a4f78 <__aeabi_fmul>
 80a2b64:	4601      	mov	r1, r0
 80a2b66:	4658      	mov	r0, fp
 80a2b68:	f002 f8fc 	bl	80a4d64 <__aeabi_fsub>
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a2b6c:	4649      	mov	r1, r9
bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a2b6e:	4682      	mov	sl, r0
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a2b70:	4640      	mov	r0, r8
 80a2b72:	f002 fa01 	bl	80a4f78 <__aeabi_fmul>
 80a2b76:	9901      	ldr	r1, [sp, #4]
 80a2b78:	4681      	mov	r9, r0
 80a2b7a:	4630      	mov	r0, r6
 80a2b7c:	f002 f9fc 	bl	80a4f78 <__aeabi_fmul>
 80a2b80:	4601      	mov	r1, r0
 80a2b82:	4648      	mov	r0, r9
 80a2b84:	f002 f8ee 	bl	80a4d64 <__aeabi_fsub>

    if(denom < 0.0){
 80a2b88:	2100      	movs	r1, #0
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a2b8a:	4681      	mov	r9, r0

    if(denom < 0.0){
 80a2b8c:	4620      	mov	r0, r4
 80a2b8e:	f002 fb91 	bl	80a52b4 <__aeabi_fcmplt>
 80a2b92:	b108      	cbz	r0, 80a2b98 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0xa8>
        denom *= -1.0;
 80a2b94:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    }
    if(numera < 0.0){
 80a2b98:	2100      	movs	r1, #0
 80a2b9a:	4650      	mov	r0, sl
 80a2b9c:	f002 fb8a 	bl	80a52b4 <__aeabi_fcmplt>
 80a2ba0:	b108      	cbz	r0, 80a2ba6 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0xb6>
        numera *= -1.0;
 80a2ba2:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
    }
    if(numerb < 0.0){
 80a2ba6:	2100      	movs	r1, #0
 80a2ba8:	4648      	mov	r0, r9
 80a2baa:	f002 fb83 	bl	80a52b4 <__aeabi_fcmplt>
 80a2bae:	b108      	cbz	r0, 80a2bb4 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0xc4>
        numerb *= -1.0;
 80a2bb0:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
    }

    // Se os seguimentos forem paralelos, retornar falso
    if(denom < EPS){
 80a2bb4:	4620      	mov	r0, r4
 80a2bb6:	f001 fd93 	bl	80a46e0 <__aeabi_f2d>
 80a2bba:	a321      	add	r3, pc, #132	; (adr r3, 80a2c40 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x150>)
 80a2bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2bc0:	f002 f854 	bl	80a4c6c <__aeabi_dcmplt>
 80a2bc4:	9001      	str	r0, [sp, #4]
 80a2bc6:	2800      	cmp	r0, #0
 80a2bc8:	d133      	bne.n	80a2c32 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x142>
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
 80a2bca:	4621      	mov	r1, r4
 80a2bcc:	4650      	mov	r0, sl
 80a2bce:	f002 fa87 	bl	80a50e0 <__aeabi_fdiv>
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a2bd2:	2100      	movs	r1, #0
    if(denom < EPS){
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
 80a2bd4:	4682      	mov	sl, r0
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a2bd6:	f002 fb6d 	bl	80a52b4 <__aeabi_fcmplt>
 80a2bda:	bb50      	cbnz	r0, 80a2c32 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x142>
 80a2bdc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2be0:	4650      	mov	r0, sl
 80a2be2:	f002 fb85 	bl	80a52f0 <__aeabi_fcmpgt>
 80a2be6:	bb20      	cbnz	r0, 80a2c32 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x142>
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
    mub = numerb / denom;
 80a2be8:	4621      	mov	r1, r4
 80a2bea:	9001      	str	r0, [sp, #4]
 80a2bec:	4648      	mov	r0, r9
 80a2bee:	f002 fa77 	bl	80a50e0 <__aeabi_fdiv>
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a2bf2:	2100      	movs	r1, #0
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
    mub = numerb / denom;
 80a2bf4:	4681      	mov	r9, r0
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a2bf6:	f002 fb5d 	bl	80a52b4 <__aeabi_fcmplt>
 80a2bfa:	4604      	mov	r4, r0
 80a2bfc:	b9c8      	cbnz	r0, 80a2c32 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x142>
 80a2bfe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2c02:	4648      	mov	r0, r9
 80a2c04:	f002 fb74 	bl	80a52f0 <__aeabi_fcmpgt>
 80a2c08:	b9a8      	cbnz	r0, 80a2c36 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x146>
        return false;
    }else{
        // Calculando o ponto e a pertinencia do novo elemento
        *point      = x1 + mua * (x2 - x1);
 80a2c0a:	4651      	mov	r1, sl
 80a2c0c:	4640      	mov	r0, r8
 80a2c0e:	f002 f9b3 	bl	80a4f78 <__aeabi_fmul>
 80a2c12:	4639      	mov	r1, r7
 80a2c14:	f002 f8a8 	bl	80a4d68 <__addsf3>
 80a2c18:	9b11      	ldr	r3, [sp, #68]	; 0x44
        *pertinence = y1 + mua * (y2 - y1);
 80a2c1a:	4651      	mov	r1, sl
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
        return false;
    }else{
        // Calculando o ponto e a pertinencia do novo elemento
        *point      = x1 + mua * (x2 - x1);
 80a2c1c:	6018      	str	r0, [r3, #0]
        *pertinence = y1 + mua * (y2 - y1);
 80a2c1e:	4630      	mov	r0, r6
 80a2c20:	f002 f9aa 	bl	80a4f78 <__aeabi_fmul>
 80a2c24:	4629      	mov	r1, r5
 80a2c26:	f002 f89f 	bl	80a4d68 <__addsf3>
 80a2c2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a2c2c:	6018      	str	r0, [r3, #0]

        return true;
 80a2c2e:	2001      	movs	r0, #1
 80a2c30:	e002      	b.n	80a2c38 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x148>
        numerb *= -1.0;
    }

    // Se os seguimentos forem paralelos, retornar falso
    if(denom < EPS){
        return false;
 80a2c32:	2000      	movs	r0, #0
 80a2c34:	e000      	b.n	80a2c38 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x148>
 80a2c36:	4620      	mov	r0, r4
        *point      = x1 + mua * (x2 - x1);
        *pertinence = y1 + mua * (y2 - y1);

        return true;
    }
 80a2c38:	b003      	add	sp, #12
 80a2c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2c3e:	bf00      	nop
 80a2c40:	d2f1a9fc 	.word	0xd2f1a9fc
 80a2c44:	3f50624d 	.word	0x3f50624d

080a2c48 <_ZN11FuzzyOutput8truncateEv>:
FuzzyOutput::~FuzzyOutput(){
    this->fuzzyComposition.empty();
}

// MÉTODOS PÚBLICOS
bool FuzzyOutput::truncate(){
 80a2c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2c4c:	4606      	mov	r6, r0
    // esvaziando a composição
    this->fuzzyComposition.empty();
 80a2c4e:	f100 0510 	add.w	r5, r0, #16
FuzzyOutput::~FuzzyOutput(){
    this->fuzzyComposition.empty();
}

// MÉTODOS PÚBLICOS
bool FuzzyOutput::truncate(){
 80a2c52:	b091      	sub	sp, #68	; 0x44
    // esvaziando a composição
    this->fuzzyComposition.empty();
 80a2c54:	4628      	mov	r0, r5
 80a2c56:	f7ff fdd5 	bl	80a2804 <_ZN16FuzzyComposition5emptyEv>

    fuzzySetArray *aux;
    aux = this->fuzzySets;
 80a2c5a:	68b4      	ldr	r4, [r6, #8]
                        this->fuzzyComposition.addPoint(newPointC, newPertinenceC);
                    }
                }
            }else if(aux->fuzzySet->getPointB() != aux->fuzzySet->getPointC()){
                // se trapezio
                if(aux->fuzzySet->getPertinence() == 1.0){
 80a2c5c:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
                    }
                }else{
                    float newPointB         = aux->fuzzySet->getPointB();
                    float newPertinenceB    = aux->fuzzySet->getPertinence();

                    rebuild(aux->fuzzySet->getPointA(), 0.0, aux->fuzzySet->getPointB(), 1.0, aux->fuzzySet->getPointA(), aux->fuzzySet->getPertinence(), aux->fuzzySet->getPointD(), aux->fuzzySet->getPertinence(), &newPointB, &newPertinenceB);
 80a2c60:	af0d      	add	r7, sp, #52	; 0x34
    // esvaziando a composição
    this->fuzzyComposition.empty();

    fuzzySetArray *aux;
    aux = this->fuzzySets;
    while(aux != NULL){
 80a2c62:	2c00      	cmp	r4, #0
 80a2c64:	f000 8150 	beq.w	80a2f08 <_ZN11FuzzyOutput8truncateEv+0x2c0>
        if(aux->fuzzySet->getPertinence() > 0.0){
 80a2c68:	6820      	ldr	r0, [r4, #0]
 80a2c6a:	f000 f9f8 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a2c6e:	2100      	movs	r1, #0
 80a2c70:	f002 fb3e 	bl	80a52f0 <__aeabi_fcmpgt>
 80a2c74:	2800      	cmp	r0, #0
 80a2c76:	f000 80d8 	beq.w	80a2e2a <_ZN11FuzzyOutput8truncateEv+0x1e2>
            // Se não for trapezio iniciado com pertinencia 1 (sem o triangulo esquerdo)
            if(aux->fuzzySet->getPointA() != aux->fuzzySet->getPointB()){
 80a2c7a:	6820      	ldr	r0, [r4, #0]
 80a2c7c:	f000 f954 	bl	80a2f28 <_ZN8FuzzySet9getPointAEv>
 80a2c80:	4680      	mov	r8, r0
 80a2c82:	6820      	ldr	r0, [r4, #0]
 80a2c84:	f000 f952 	bl	80a2f2c <_ZN8FuzzySet9getPointBEv>
 80a2c88:	4601      	mov	r1, r0
 80a2c8a:	4640      	mov	r0, r8
 80a2c8c:	f002 fb08 	bl	80a52a0 <__aeabi_fcmpeq>
 80a2c90:	b980      	cbnz	r0, 80a2cb4 <_ZN11FuzzyOutput8truncateEv+0x6c>
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointA(), 0.0) == false){
 80a2c92:	6820      	ldr	r0, [r4, #0]
 80a2c94:	f000 f948 	bl	80a2f28 <_ZN8FuzzySet9getPointAEv>
 80a2c98:	2200      	movs	r2, #0
 80a2c9a:	4601      	mov	r1, r0
 80a2c9c:	4628      	mov	r0, r5
 80a2c9e:	f7ff fcc2 	bl	80a2626 <_ZN16FuzzyComposition10checkPointEff>
 80a2ca2:	b938      	cbnz	r0, 80a2cb4 <_ZN11FuzzyOutput8truncateEv+0x6c>
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointA(), 0.0);
 80a2ca4:	6820      	ldr	r0, [r4, #0]
 80a2ca6:	f000 f93f 	bl	80a2f28 <_ZN8FuzzySet9getPointAEv>
 80a2caa:	2200      	movs	r2, #0
 80a2cac:	4601      	mov	r1, r0
 80a2cae:	4628      	mov	r0, r5
 80a2cb0:	f7ff fca0 	bl	80a25f4 <_ZN16FuzzyComposition8addPointEff>
                }
            }

            if(aux->fuzzySet->getPointB() == aux->fuzzySet->getPointC() && aux->fuzzySet->getPointA() != aux->fuzzySet->getPointD()){
 80a2cb4:	6820      	ldr	r0, [r4, #0]
 80a2cb6:	f000 f939 	bl	80a2f2c <_ZN8FuzzySet9getPointBEv>
 80a2cba:	4680      	mov	r8, r0
 80a2cbc:	6820      	ldr	r0, [r4, #0]
 80a2cbe:	f000 f937 	bl	80a2f30 <_ZN8FuzzySet9getPointCEv>
 80a2cc2:	4601      	mov	r1, r0
 80a2cc4:	4640      	mov	r0, r8
 80a2cc6:	f002 faeb 	bl	80a52a0 <__aeabi_fcmpeq>
 80a2cca:	b168      	cbz	r0, 80a2ce8 <_ZN11FuzzyOutput8truncateEv+0xa0>
 80a2ccc:	6820      	ldr	r0, [r4, #0]
 80a2cce:	f000 f92b 	bl	80a2f28 <_ZN8FuzzySet9getPointAEv>
 80a2cd2:	4680      	mov	r8, r0
 80a2cd4:	6820      	ldr	r0, [r4, #0]
 80a2cd6:	f000 f92d 	bl	80a2f34 <_ZN8FuzzySet9getPointDEv>
 80a2cda:	4601      	mov	r1, r0
 80a2cdc:	4640      	mov	r0, r8
 80a2cde:	f002 fadf 	bl	80a52a0 <__aeabi_fcmpeq>
 80a2ce2:	2800      	cmp	r0, #0
 80a2ce4:	f000 80a3 	beq.w	80a2e2e <_ZN11FuzzyOutput8truncateEv+0x1e6>

                    if(this->fuzzyComposition.checkPoint(newPointC, newPertinenceC) == false){
                        this->fuzzyComposition.addPoint(newPointC, newPertinenceC);
                    }
                }
            }else if(aux->fuzzySet->getPointB() != aux->fuzzySet->getPointC()){
 80a2ce8:	6820      	ldr	r0, [r4, #0]
 80a2cea:	f000 f91f 	bl	80a2f2c <_ZN8FuzzySet9getPointBEv>
 80a2cee:	4680      	mov	r8, r0
 80a2cf0:	6820      	ldr	r0, [r4, #0]
 80a2cf2:	f000 f91d 	bl	80a2f30 <_ZN8FuzzySet9getPointCEv>
 80a2cf6:	4601      	mov	r1, r0
 80a2cf8:	4640      	mov	r0, r8
 80a2cfa:	f002 fad1 	bl	80a52a0 <__aeabi_fcmpeq>
 80a2cfe:	2800      	cmp	r0, #0
 80a2d00:	f040 809f 	bne.w	80a2e42 <_ZN11FuzzyOutput8truncateEv+0x1fa>
                // se trapezio
                if(aux->fuzzySet->getPertinence() == 1.0){
 80a2d04:	6820      	ldr	r0, [r4, #0]
 80a2d06:	f000 f9aa 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a2d0a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2d0e:	f002 fac7 	bl	80a52a0 <__aeabi_fcmpeq>
 80a2d12:	2800      	cmp	r0, #0
 80a2d14:	f040 80c4 	bne.w	80a2ea0 <_ZN11FuzzyOutput8truncateEv+0x258>

                    if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointC(), aux->fuzzySet->getPertinence()) == false){
                        this->fuzzyComposition.addPoint(aux->fuzzySet->getPointC(), aux->fuzzySet->getPertinence());
                    }
                }else{
                    float newPointB         = aux->fuzzySet->getPointB();
 80a2d18:	6820      	ldr	r0, [r4, #0]
 80a2d1a:	f000 f907 	bl	80a2f2c <_ZN8FuzzySet9getPointBEv>
 80a2d1e:	900c      	str	r0, [sp, #48]	; 0x30
                    float newPertinenceB    = aux->fuzzySet->getPertinence();
 80a2d20:	6820      	ldr	r0, [r4, #0]
 80a2d22:	f000 f99c 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a2d26:	900d      	str	r0, [sp, #52]	; 0x34

                    rebuild(aux->fuzzySet->getPointA(), 0.0, aux->fuzzySet->getPointB(), 1.0, aux->fuzzySet->getPointA(), aux->fuzzySet->getPertinence(), aux->fuzzySet->getPointD(), aux->fuzzySet->getPertinence(), &newPointB, &newPertinenceB);
 80a2d28:	6820      	ldr	r0, [r4, #0]
 80a2d2a:	f000 f8fd 	bl	80a2f28 <_ZN8FuzzySet9getPointAEv>
 80a2d2e:	4680      	mov	r8, r0
 80a2d30:	6820      	ldr	r0, [r4, #0]
 80a2d32:	f000 f8fb 	bl	80a2f2c <_ZN8FuzzySet9getPointBEv>
 80a2d36:	4682      	mov	sl, r0
 80a2d38:	6820      	ldr	r0, [r4, #0]
 80a2d3a:	f000 f8f5 	bl	80a2f28 <_ZN8FuzzySet9getPointAEv>
 80a2d3e:	4683      	mov	fp, r0
 80a2d40:	6820      	ldr	r0, [r4, #0]
 80a2d42:	f000 f98c 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a2d46:	900a      	str	r0, [sp, #40]	; 0x28
 80a2d48:	6820      	ldr	r0, [r4, #0]
 80a2d4a:	f000 f8f3 	bl	80a2f34 <_ZN8FuzzySet9getPointDEv>
 80a2d4e:	9009      	str	r0, [sp, #36]	; 0x24
 80a2d50:	6820      	ldr	r0, [r4, #0]
 80a2d52:	f000 f984 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a2d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a2d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a2d5a:	a90c      	add	r1, sp, #48	; 0x30
 80a2d5c:	9105      	str	r1, [sp, #20]
 80a2d5e:	9004      	str	r0, [sp, #16]
 80a2d60:	9203      	str	r2, [sp, #12]
 80a2d62:	9302      	str	r3, [sp, #8]
 80a2d64:	2200      	movs	r2, #0
 80a2d66:	4641      	mov	r1, r8
 80a2d68:	9706      	str	r7, [sp, #24]
 80a2d6a:	f8cd b004 	str.w	fp, [sp, #4]
 80a2d6e:	f8cd 9000 	str.w	r9, [sp]
 80a2d72:	4653      	mov	r3, sl
 80a2d74:	4630      	mov	r0, r6
 80a2d76:	f7ff febb 	bl	80a2af0 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_>

                    if(this->fuzzyComposition.checkPoint(newPointB, newPertinenceB) == false){
 80a2d7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a2d7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a2d7e:	4628      	mov	r0, r5
 80a2d80:	f7ff fc51 	bl	80a2626 <_ZN16FuzzyComposition10checkPointEff>
 80a2d84:	b920      	cbnz	r0, 80a2d90 <_ZN11FuzzyOutput8truncateEv+0x148>
                        this->fuzzyComposition.addPoint(newPointB, newPertinenceB);
 80a2d86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a2d88:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a2d8a:	4628      	mov	r0, r5
 80a2d8c:	f7ff fc32 	bl	80a25f4 <_ZN16FuzzyComposition8addPointEff>
                    }

                    float newPointC         = aux->fuzzySet->getPointB();
 80a2d90:	6820      	ldr	r0, [r4, #0]
 80a2d92:	f000 f8cb 	bl	80a2f2c <_ZN8FuzzySet9getPointBEv>
 80a2d96:	900e      	str	r0, [sp, #56]	; 0x38
                    float newPertinenceC    = aux->fuzzySet->getPertinence();
 80a2d98:	6820      	ldr	r0, [r4, #0]
 80a2d9a:	f000 f960 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a2d9e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 80a2da2:	f848 0d04 	str.w	r0, [r8, #-4]!

                    rebuild(aux->fuzzySet->getPointC(), 1.0, aux->fuzzySet->getPointD(), 0.0, aux->fuzzySet->getPointA(), aux->fuzzySet->getPertinence(), aux->fuzzySet->getPointD(), aux->fuzzySet->getPertinence(), &newPointC, &newPertinenceC);
 80a2da6:	6820      	ldr	r0, [r4, #0]
 80a2da8:	f000 f8c2 	bl	80a2f30 <_ZN8FuzzySet9getPointCEv>
 80a2dac:	4682      	mov	sl, r0
 80a2dae:	6820      	ldr	r0, [r4, #0]
 80a2db0:	f000 f8c0 	bl	80a2f34 <_ZN8FuzzySet9getPointDEv>
 80a2db4:	4683      	mov	fp, r0
 80a2db6:	6820      	ldr	r0, [r4, #0]
 80a2db8:	f000 f8b6 	bl	80a2f28 <_ZN8FuzzySet9getPointAEv>
 80a2dbc:	9009      	str	r0, [sp, #36]	; 0x24
 80a2dbe:	6820      	ldr	r0, [r4, #0]
 80a2dc0:	f000 f94d 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a2dc4:	900b      	str	r0, [sp, #44]	; 0x2c
 80a2dc6:	6820      	ldr	r0, [r4, #0]
 80a2dc8:	f000 f8b4 	bl	80a2f34 <_ZN8FuzzySet9getPointDEv>
 80a2dcc:	900a      	str	r0, [sp, #40]	; 0x28
 80a2dce:	6820      	ldr	r0, [r4, #0]
 80a2dd0:	f000 f945 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a2dd4:	ab0e      	add	r3, sp, #56	; 0x38
 80a2dd6:	9305      	str	r3, [sp, #20]
 80a2dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a2dda:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a2ddc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a2dde:	9301      	str	r3, [sp, #4]
 80a2de0:	2300      	movs	r3, #0
 80a2de2:	9004      	str	r0, [sp, #16]
 80a2de4:	9103      	str	r1, [sp, #12]
 80a2de6:	9202      	str	r2, [sp, #8]
 80a2de8:	9300      	str	r3, [sp, #0]
 80a2dea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80a2dee:	4651      	mov	r1, sl
 80a2df0:	f8cd 8018 	str.w	r8, [sp, #24]
 80a2df4:	465b      	mov	r3, fp
 80a2df6:	4630      	mov	r0, r6
 80a2df8:	f7ff fe7a 	bl	80a2af0 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_>

                    if(this->fuzzyComposition.checkPoint(newPointC, newPertinenceC) == false){
 80a2dfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a2dfe:	990e      	ldr	r1, [sp, #56]	; 0x38
 80a2e00:	4628      	mov	r0, r5
 80a2e02:	f7ff fc10 	bl	80a2626 <_ZN16FuzzyComposition10checkPointEff>
 80a2e06:	b920      	cbnz	r0, 80a2e12 <_ZN11FuzzyOutput8truncateEv+0x1ca>
                        this->fuzzyComposition.addPoint(newPointC, newPertinenceC);
 80a2e08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a2e0a:	990e      	ldr	r1, [sp, #56]	; 0x38
                    }
                }
            }else{
                //senao singleton
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence()) == false){
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence());
 80a2e0c:	4628      	mov	r0, r5
 80a2e0e:	f7ff fbf1 	bl	80a25f4 <_ZN16FuzzyComposition8addPointEff>
                }
            }
            
            //Se não for trapezio iniciado com pertinencia 1 (sem o triangulo direito)
            if(aux->fuzzySet->getPointC() != aux->fuzzySet->getPointD()){
 80a2e12:	6820      	ldr	r0, [r4, #0]
 80a2e14:	f000 f88c 	bl	80a2f30 <_ZN8FuzzySet9getPointCEv>
 80a2e18:	4680      	mov	r8, r0
 80a2e1a:	6820      	ldr	r0, [r4, #0]
 80a2e1c:	f000 f88a 	bl	80a2f34 <_ZN8FuzzySet9getPointDEv>
 80a2e20:	4601      	mov	r1, r0
 80a2e22:	4640      	mov	r0, r8
 80a2e24:	f002 fa3c 	bl	80a52a0 <__aeabi_fcmpeq>
 80a2e28:	b318      	cbz	r0, 80a2e72 <_ZN11FuzzyOutput8truncateEv+0x22a>
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointD(), 0.0) == false || aux->fuzzySet->getPointD() == aux->fuzzySet->getPointA()){
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointD(), 0.0);
                }
            }
        }
        aux = aux->next;
 80a2e2a:	6864      	ldr	r4, [r4, #4]
    // esvaziando a composição
    this->fuzzyComposition.empty();

    fuzzySetArray *aux;
    aux = this->fuzzySets;
    while(aux != NULL){
 80a2e2c:	e719      	b.n	80a2c62 <_ZN11FuzzyOutput8truncateEv+0x1a>
                }
            }

            if(aux->fuzzySet->getPointB() == aux->fuzzySet->getPointC() && aux->fuzzySet->getPointA() != aux->fuzzySet->getPointD()){
                // se trinagulo
                if(aux->fuzzySet->getPertinence() == 1.0){
 80a2e2e:	6820      	ldr	r0, [r4, #0]
 80a2e30:	f000 f915 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a2e34:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2e38:	f002 fa32 	bl	80a52a0 <__aeabi_fcmpeq>
 80a2e3c:	2800      	cmp	r0, #0
 80a2e3e:	f43f af6b 	beq.w	80a2d18 <_ZN11FuzzyOutput8truncateEv+0xd0>
                        this->fuzzyComposition.addPoint(newPointC, newPertinenceC);
                    }
                }
            }else{
                //senao singleton
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence()) == false){
 80a2e42:	6820      	ldr	r0, [r4, #0]
 80a2e44:	f000 f872 	bl	80a2f2c <_ZN8FuzzySet9getPointBEv>
 80a2e48:	4680      	mov	r8, r0
 80a2e4a:	6820      	ldr	r0, [r4, #0]
 80a2e4c:	f000 f907 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a2e50:	4641      	mov	r1, r8
 80a2e52:	4602      	mov	r2, r0
 80a2e54:	4628      	mov	r0, r5
 80a2e56:	f7ff fbe6 	bl	80a2626 <_ZN16FuzzyComposition10checkPointEff>
 80a2e5a:	2800      	cmp	r0, #0
 80a2e5c:	d1d9      	bne.n	80a2e12 <_ZN11FuzzyOutput8truncateEv+0x1ca>
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence());
 80a2e5e:	6820      	ldr	r0, [r4, #0]
 80a2e60:	f000 f864 	bl	80a2f2c <_ZN8FuzzySet9getPointBEv>
 80a2e64:	4680      	mov	r8, r0
 80a2e66:	6820      	ldr	r0, [r4, #0]
 80a2e68:	f000 f8f9 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a2e6c:	4641      	mov	r1, r8
 80a2e6e:	4602      	mov	r2, r0
 80a2e70:	e7cc      	b.n	80a2e0c <_ZN11FuzzyOutput8truncateEv+0x1c4>
                }
            }
            
            //Se não for trapezio iniciado com pertinencia 1 (sem o triangulo direito)
            if(aux->fuzzySet->getPointC() != aux->fuzzySet->getPointD()){
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointD(), 0.0) == false || aux->fuzzySet->getPointD() == aux->fuzzySet->getPointA()){
 80a2e72:	6820      	ldr	r0, [r4, #0]
 80a2e74:	f000 f85e 	bl	80a2f34 <_ZN8FuzzySet9getPointDEv>
 80a2e78:	2200      	movs	r2, #0
 80a2e7a:	4601      	mov	r1, r0
 80a2e7c:	4628      	mov	r0, r5
 80a2e7e:	f7ff fbd2 	bl	80a2626 <_ZN16FuzzyComposition10checkPointEff>
 80a2e82:	2800      	cmp	r0, #0
 80a2e84:	d037      	beq.n	80a2ef6 <_ZN11FuzzyOutput8truncateEv+0x2ae>
 80a2e86:	6820      	ldr	r0, [r4, #0]
 80a2e88:	f000 f854 	bl	80a2f34 <_ZN8FuzzySet9getPointDEv>
 80a2e8c:	4680      	mov	r8, r0
 80a2e8e:	6820      	ldr	r0, [r4, #0]
 80a2e90:	f000 f84a 	bl	80a2f28 <_ZN8FuzzySet9getPointAEv>
 80a2e94:	4601      	mov	r1, r0
 80a2e96:	4640      	mov	r0, r8
 80a2e98:	f002 fa02 	bl	80a52a0 <__aeabi_fcmpeq>
 80a2e9c:	bb58      	cbnz	r0, 80a2ef6 <_ZN11FuzzyOutput8truncateEv+0x2ae>
 80a2e9e:	e7c4      	b.n	80a2e2a <_ZN11FuzzyOutput8truncateEv+0x1e2>
                    }
                }
            }else if(aux->fuzzySet->getPointB() != aux->fuzzySet->getPointC()){
                // se trapezio
                if(aux->fuzzySet->getPertinence() == 1.0){
                    if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence()) == false){
 80a2ea0:	6820      	ldr	r0, [r4, #0]
 80a2ea2:	f000 f843 	bl	80a2f2c <_ZN8FuzzySet9getPointBEv>
 80a2ea6:	4680      	mov	r8, r0
 80a2ea8:	6820      	ldr	r0, [r4, #0]
 80a2eaa:	f000 f8d8 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a2eae:	4641      	mov	r1, r8
 80a2eb0:	4602      	mov	r2, r0
 80a2eb2:	4628      	mov	r0, r5
 80a2eb4:	f7ff fbb7 	bl	80a2626 <_ZN16FuzzyComposition10checkPointEff>
 80a2eb8:	b958      	cbnz	r0, 80a2ed2 <_ZN11FuzzyOutput8truncateEv+0x28a>
                        this->fuzzyComposition.addPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence());
 80a2eba:	6820      	ldr	r0, [r4, #0]
 80a2ebc:	f000 f836 	bl	80a2f2c <_ZN8FuzzySet9getPointBEv>
 80a2ec0:	4680      	mov	r8, r0
 80a2ec2:	6820      	ldr	r0, [r4, #0]
 80a2ec4:	f000 f8cb 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a2ec8:	4641      	mov	r1, r8
 80a2eca:	4602      	mov	r2, r0
 80a2ecc:	4628      	mov	r0, r5
 80a2ece:	f7ff fb91 	bl	80a25f4 <_ZN16FuzzyComposition8addPointEff>
                    }

                    if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointC(), aux->fuzzySet->getPertinence()) == false){
 80a2ed2:	6820      	ldr	r0, [r4, #0]
 80a2ed4:	f000 f82c 	bl	80a2f30 <_ZN8FuzzySet9getPointCEv>
 80a2ed8:	4680      	mov	r8, r0
 80a2eda:	6820      	ldr	r0, [r4, #0]
 80a2edc:	f000 f8bf 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a2ee0:	4641      	mov	r1, r8
 80a2ee2:	4602      	mov	r2, r0
 80a2ee4:	4628      	mov	r0, r5
 80a2ee6:	f7ff fb9e 	bl	80a2626 <_ZN16FuzzyComposition10checkPointEff>
 80a2eea:	2800      	cmp	r0, #0
 80a2eec:	d191      	bne.n	80a2e12 <_ZN11FuzzyOutput8truncateEv+0x1ca>
                        this->fuzzyComposition.addPoint(aux->fuzzySet->getPointC(), aux->fuzzySet->getPertinence());
 80a2eee:	6820      	ldr	r0, [r4, #0]
 80a2ef0:	f000 f81e 	bl	80a2f30 <_ZN8FuzzySet9getPointCEv>
 80a2ef4:	e7b6      	b.n	80a2e64 <_ZN11FuzzyOutput8truncateEv+0x21c>
            }
            
            //Se não for trapezio iniciado com pertinencia 1 (sem o triangulo direito)
            if(aux->fuzzySet->getPointC() != aux->fuzzySet->getPointD()){
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointD(), 0.0) == false || aux->fuzzySet->getPointD() == aux->fuzzySet->getPointA()){
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointD(), 0.0);
 80a2ef6:	6820      	ldr	r0, [r4, #0]
 80a2ef8:	f000 f81c 	bl	80a2f34 <_ZN8FuzzySet9getPointDEv>
 80a2efc:	2200      	movs	r2, #0
 80a2efe:	4601      	mov	r1, r0
 80a2f00:	4628      	mov	r0, r5
 80a2f02:	f7ff fb77 	bl	80a25f4 <_ZN16FuzzyComposition8addPointEff>
 80a2f06:	e790      	b.n	80a2e2a <_ZN11FuzzyOutput8truncateEv+0x1e2>
            }
        }
        aux = aux->next;
    }

    this->fuzzyComposition.build();
 80a2f08:	4628      	mov	r0, r5
 80a2f0a:	f7ff fd65 	bl	80a29d8 <_ZN16FuzzyComposition5buildEv>

    return true;
}
 80a2f0e:	2001      	movs	r0, #1
 80a2f10:	b011      	add	sp, #68	; 0x44
 80a2f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2f16 <_ZN8FuzzySetC1Effff>:
#include "FuzzySet.h"

FuzzySet::FuzzySet(){
}

FuzzySet::FuzzySet(float a, float b, float c, float d){
 80a2f16:	b510      	push	{r4, lr}
    this->a = a;
    this->b = b;
    this->c = c;
 80a2f18:	6083      	str	r3, [r0, #8]
    this->d = d;
 80a2f1a:	9b02      	ldr	r3, [sp, #8]

FuzzySet::FuzzySet(){
}

FuzzySet::FuzzySet(float a, float b, float c, float d){
    this->a = a;
 80a2f1c:	6001      	str	r1, [r0, #0]
    this->b = b;
    this->c = c;
    this->d = d;
 80a2f1e:	60c3      	str	r3, [r0, #12]
    this->pertinence = 0.0;
 80a2f20:	2300      	movs	r3, #0
FuzzySet::FuzzySet(){
}

FuzzySet::FuzzySet(float a, float b, float c, float d){
    this->a = a;
    this->b = b;
 80a2f22:	6042      	str	r2, [r0, #4]
    this->c = c;
    this->d = d;
    this->pertinence = 0.0;
 80a2f24:	6103      	str	r3, [r0, #16]
}
 80a2f26:	bd10      	pop	{r4, pc}

080a2f28 <_ZN8FuzzySet9getPointAEv>:

float FuzzySet::getPointA(){
    return this->a;
}
 80a2f28:	6800      	ldr	r0, [r0, #0]
 80a2f2a:	4770      	bx	lr

080a2f2c <_ZN8FuzzySet9getPointBEv>:

float FuzzySet::getPointB(){
    return this->b;
}
 80a2f2c:	6840      	ldr	r0, [r0, #4]
 80a2f2e:	4770      	bx	lr

080a2f30 <_ZN8FuzzySet9getPointCEv>:

float FuzzySet::getPointC(){
    return this->c;
}
 80a2f30:	6880      	ldr	r0, [r0, #8]
 80a2f32:	4770      	bx	lr

080a2f34 <_ZN8FuzzySet9getPointDEv>:

float FuzzySet::getPointD(){
    return this->d;
}
 80a2f34:	68c0      	ldr	r0, [r0, #12]
 80a2f36:	4770      	bx	lr

080a2f38 <_ZN8FuzzySet19calculatePertinenceEf>:

bool FuzzySet::calculatePertinence(float crispValue){
 80a2f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float slope;

    if (crispValue < this->a){
 80a2f3c:	6807      	ldr	r7, [r0, #0]

float FuzzySet::getPointD(){
    return this->d;
}

bool FuzzySet::calculatePertinence(float crispValue){
 80a2f3e:	4604      	mov	r4, r0
    float slope;

    if (crispValue < this->a){
 80a2f40:	4638      	mov	r0, r7

float FuzzySet::getPointD(){
    return this->d;
}

bool FuzzySet::calculatePertinence(float crispValue){
 80a2f42:	460d      	mov	r5, r1
    float slope;

    if (crispValue < this->a){
 80a2f44:	f002 f9d4 	bl	80a52f0 <__aeabi_fcmpgt>
 80a2f48:	6866      	ldr	r6, [r4, #4]
 80a2f4a:	b198      	cbz	r0, 80a2f74 <_ZN8FuzzySet19calculatePertinenceEf+0x3c>
        if (this->a == this->b && this->b != this->c && this->c != this->d){
 80a2f4c:	4631      	mov	r1, r6
 80a2f4e:	4638      	mov	r0, r7
 80a2f50:	f002 f9a6 	bl	80a52a0 <__aeabi_fcmpeq>
 80a2f54:	2800      	cmp	r0, #0
 80a2f56:	d02e      	beq.n	80a2fb6 <_ZN8FuzzySet19calculatePertinenceEf+0x7e>
 80a2f58:	68a5      	ldr	r5, [r4, #8]
 80a2f5a:	4630      	mov	r0, r6
 80a2f5c:	4629      	mov	r1, r5
 80a2f5e:	f002 f99f 	bl	80a52a0 <__aeabi_fcmpeq>
 80a2f62:	bb40      	cbnz	r0, 80a2fb6 <_ZN8FuzzySet19calculatePertinenceEf+0x7e>
 80a2f64:	4628      	mov	r0, r5
 80a2f66:	68e1      	ldr	r1, [r4, #12]
 80a2f68:	f002 f99a 	bl	80a52a0 <__aeabi_fcmpeq>
 80a2f6c:	bb18      	cbnz	r0, 80a2fb6 <_ZN8FuzzySet19calculatePertinenceEf+0x7e>
            this->pertinence = 1.0;
 80a2f6e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80a2f72:	e021      	b.n	80a2fb8 <_ZN8FuzzySet19calculatePertinenceEf+0x80>
        }else{
            this->pertinence = 0.0;
        }
    }else if (crispValue >= this->a && crispValue < this->b){
 80a2f74:	4629      	mov	r1, r5
 80a2f76:	4638      	mov	r0, r7
 80a2f78:	f002 f9a6 	bl	80a52c8 <__aeabi_fcmple>
 80a2f7c:	b9f0      	cbnz	r0, 80a2fbc <_ZN8FuzzySet19calculatePertinenceEf+0x84>
        slope = 1.0 / (this->b - this->a);
        this->pertinence = slope * (crispValue - this->b) + 1.0;
    }else if (crispValue >= this->b && crispValue <= this->c){
 80a2f7e:	4631      	mov	r1, r6
 80a2f80:	4628      	mov	r0, r5
 80a2f82:	f002 f9ab 	bl	80a52dc <__aeabi_fcmpge>
 80a2f86:	2800      	cmp	r0, #0
 80a2f88:	d12f      	bne.n	80a2fea <_ZN8FuzzySet19calculatePertinenceEf+0xb2>
        this->pertinence = 1.0;
    }else if (crispValue > this->c && crispValue <= this->d){
 80a2f8a:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80a2f8e:	4628      	mov	r0, r5
 80a2f90:	4641      	mov	r1, r8
 80a2f92:	f002 f9ad 	bl	80a52f0 <__aeabi_fcmpgt>
 80a2f96:	f8d4 900c 	ldr.w	r9, [r4, #12]
 80a2f9a:	2800      	cmp	r0, #0
 80a2f9c:	d12c      	bne.n	80a2ff8 <_ZN8FuzzySet19calculatePertinenceEf+0xc0>
        slope = 1.0 / (this->c - this->d);
        this->pertinence = slope * (crispValue - this->c) + 1.0;
    }else if (crispValue > this->d){
 80a2f9e:	4649      	mov	r1, r9
 80a2fa0:	4628      	mov	r0, r5
 80a2fa2:	f002 f9a5 	bl	80a52f0 <__aeabi_fcmpgt>
 80a2fa6:	2800      	cmp	r0, #0
 80a2fa8:	d04d      	beq.n	80a3046 <_ZN8FuzzySet19calculatePertinenceEf+0x10e>
        if (this->c == this->d && this->c != this->b && this->b != this->a){
 80a2faa:	4649      	mov	r1, r9
 80a2fac:	4640      	mov	r0, r8
 80a2fae:	f002 f977 	bl	80a52a0 <__aeabi_fcmpeq>
 80a2fb2:	2800      	cmp	r0, #0
 80a2fb4:	d13e      	bne.n	80a3034 <_ZN8FuzzySet19calculatePertinenceEf+0xfc>

    if (crispValue < this->a){
        if (this->a == this->b && this->b != this->c && this->c != this->d){
            this->pertinence = 1.0;
        }else{
            this->pertinence = 0.0;
 80a2fb6:	2300      	movs	r3, #0
 80a2fb8:	6123      	str	r3, [r4, #16]
 80a2fba:	e044      	b.n	80a3046 <_ZN8FuzzySet19calculatePertinenceEf+0x10e>
        }
    }else if (crispValue >= this->a && crispValue < this->b){
 80a2fbc:	4631      	mov	r1, r6
 80a2fbe:	4628      	mov	r0, r5
 80a2fc0:	f002 f978 	bl	80a52b4 <__aeabi_fcmplt>
 80a2fc4:	2800      	cmp	r0, #0
 80a2fc6:	d0da      	beq.n	80a2f7e <_ZN8FuzzySet19calculatePertinenceEf+0x46>
        slope = 1.0 / (this->b - this->a);
        this->pertinence = slope * (crispValue - this->b) + 1.0;
 80a2fc8:	4639      	mov	r1, r7
 80a2fca:	4630      	mov	r0, r6
 80a2fcc:	f001 feca 	bl	80a4d64 <__aeabi_fsub>
 80a2fd0:	4601      	mov	r1, r0
 80a2fd2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a2fd6:	f002 f883 	bl	80a50e0 <__aeabi_fdiv>
 80a2fda:	4631      	mov	r1, r6
 80a2fdc:	4607      	mov	r7, r0
 80a2fde:	4628      	mov	r0, r5
 80a2fe0:	f001 fec0 	bl	80a4d64 <__aeabi_fsub>
 80a2fe4:	4601      	mov	r1, r0
 80a2fe6:	4638      	mov	r0, r7
 80a2fe8:	e01c      	b.n	80a3024 <_ZN8FuzzySet19calculatePertinenceEf+0xec>
    }else if (crispValue >= this->b && crispValue <= this->c){
 80a2fea:	68a1      	ldr	r1, [r4, #8]
 80a2fec:	4628      	mov	r0, r5
 80a2fee:	f002 f96b 	bl	80a52c8 <__aeabi_fcmple>
 80a2ff2:	2800      	cmp	r0, #0
 80a2ff4:	d0c9      	beq.n	80a2f8a <_ZN8FuzzySet19calculatePertinenceEf+0x52>
 80a2ff6:	e7ba      	b.n	80a2f6e <_ZN8FuzzySet19calculatePertinenceEf+0x36>
        this->pertinence = 1.0;
    }else if (crispValue > this->c && crispValue <= this->d){
 80a2ff8:	4649      	mov	r1, r9
 80a2ffa:	4628      	mov	r0, r5
 80a2ffc:	f002 f964 	bl	80a52c8 <__aeabi_fcmple>
 80a3000:	2800      	cmp	r0, #0
 80a3002:	d0cc      	beq.n	80a2f9e <_ZN8FuzzySet19calculatePertinenceEf+0x66>
        slope = 1.0 / (this->c - this->d);
        this->pertinence = slope * (crispValue - this->c) + 1.0;
 80a3004:	4649      	mov	r1, r9
 80a3006:	4640      	mov	r0, r8
 80a3008:	f001 feac 	bl	80a4d64 <__aeabi_fsub>
 80a300c:	4601      	mov	r1, r0
 80a300e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a3012:	f002 f865 	bl	80a50e0 <__aeabi_fdiv>
 80a3016:	4641      	mov	r1, r8
 80a3018:	4606      	mov	r6, r0
 80a301a:	4628      	mov	r0, r5
 80a301c:	f001 fea2 	bl	80a4d64 <__aeabi_fsub>
 80a3020:	4601      	mov	r1, r0
 80a3022:	4630      	mov	r0, r6
 80a3024:	f001 ffa8 	bl	80a4f78 <__aeabi_fmul>
 80a3028:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a302c:	f001 fe9c 	bl	80a4d68 <__addsf3>
 80a3030:	6120      	str	r0, [r4, #16]
 80a3032:	e008      	b.n	80a3046 <_ZN8FuzzySet19calculatePertinenceEf+0x10e>
    }else if (crispValue > this->d){
        if (this->c == this->d && this->c != this->b && this->b != this->a){
 80a3034:	4641      	mov	r1, r8
 80a3036:	4630      	mov	r0, r6
 80a3038:	f002 f932 	bl	80a52a0 <__aeabi_fcmpeq>
 80a303c:	2800      	cmp	r0, #0
 80a303e:	d1ba      	bne.n	80a2fb6 <_ZN8FuzzySet19calculatePertinenceEf+0x7e>
 80a3040:	4631      	mov	r1, r6
 80a3042:	4638      	mov	r0, r7
 80a3044:	e790      	b.n	80a2f68 <_ZN8FuzzySet19calculatePertinenceEf+0x30>
        }else{
            this->pertinence = 0.0;
        }
    }
    return true;
}
 80a3046:	2001      	movs	r0, #1
 80a3048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a304c <_ZN8FuzzySet13setPertinenceEf>:

void FuzzySet::setPertinence(float pertinence){
 80a304c:	b538      	push	{r3, r4, r5, lr}
 80a304e:	4604      	mov	r4, r0
    if(this->pertinence < pertinence){
 80a3050:	6900      	ldr	r0, [r0, #16]
        }
    }
    return true;
}

void FuzzySet::setPertinence(float pertinence){
 80a3052:	460d      	mov	r5, r1
    if(this->pertinence < pertinence){
 80a3054:	f002 f92e 	bl	80a52b4 <__aeabi_fcmplt>
 80a3058:	b100      	cbz	r0, 80a305c <_ZN8FuzzySet13setPertinenceEf+0x10>
        this->pertinence = pertinence;
 80a305a:	6125      	str	r5, [r4, #16]
 80a305c:	bd38      	pop	{r3, r4, r5, pc}

080a305e <_ZN8FuzzySet13getPertinenceEv>:
    }
}

float FuzzySet::getPertinence(){
    return this->pertinence;
}
 80a305e:	6900      	ldr	r0, [r0, #16]
 80a3060:	4770      	bx	lr

080a3062 <_ZN8FuzzySet5resetEv>:

void FuzzySet::reset(){
    this->pertinence = 0.0;
 80a3062:	2300      	movs	r3, #0
 80a3064:	6103      	str	r3, [r0, #16]
 80a3066:	4770      	bx	lr

080a3068 <_ZN19FuzzyRuleConsequentC1Ev>:
 */
#include "FuzzyRuleConsequent.h"

// CONSTRUTORES
FuzzyRuleConsequent::FuzzyRuleConsequent(){
    this->fuzzySetOutputs = NULL;
 80a3068:	2200      	movs	r2, #0
 80a306a:	6042      	str	r2, [r0, #4]
    this->fuzzySetOutputsCursor = NULL;
 80a306c:	6002      	str	r2, [r0, #0]
}
 80a306e:	4770      	bx	lr

080a3070 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>:
FuzzyRuleConsequent::~FuzzyRuleConsequent(){
    this->cleanFuzzySets(this->fuzzySetOutputs);
}

// MÉTODOS PÚBLICOS
bool FuzzyRuleConsequent::addOutput(FuzzySet* fuzzySet){
 80a3070:	b538      	push	{r3, r4, r5, lr}
 80a3072:	4604      	mov	r4, r0
    fuzzySetOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetOutputArray *) malloc(sizeof(fuzzySetOutputArray))) == NULL){
 80a3074:	2008      	movs	r0, #8
FuzzyRuleConsequent::~FuzzyRuleConsequent(){
    this->cleanFuzzySets(this->fuzzySetOutputs);
}

// MÉTODOS PÚBLICOS
bool FuzzyRuleConsequent::addOutput(FuzzySet* fuzzySet){
 80a3076:	460d      	mov	r5, r1
    fuzzySetOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetOutputArray *) malloc(sizeof(fuzzySetOutputArray))) == NULL){
 80a3078:	f000 fb7c 	bl	80a3774 <malloc>
 80a307c:	b150      	cbz	r0, 80a3094 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet+0x24>
        return false;
    }
    aux->fuzzySet     = fuzzySet;
    aux->next         = NULL;
 80a307e:	2300      	movs	r3, #0
    fuzzySetOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetOutputArray *) malloc(sizeof(fuzzySetOutputArray))) == NULL){
        return false;
    }
    aux->fuzzySet     = fuzzySet;
 80a3080:	6005      	str	r5, [r0, #0]
    aux->next         = NULL;
 80a3082:	6043      	str	r3, [r0, #4]

    if(this->fuzzySetOutputs == NULL){
 80a3084:	6863      	ldr	r3, [r4, #4]
 80a3086:	b90b      	cbnz	r3, 80a308c <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet+0x1c>
        this->fuzzySetOutputs = aux;
 80a3088:	6060      	str	r0, [r4, #4]
 80a308a:	e001      	b.n	80a3090 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet+0x20>
        this->fuzzySetOutputsCursor    = aux;
    }else{
        this->fuzzySetOutputsCursor->next = aux;
 80a308c:	6823      	ldr	r3, [r4, #0]
 80a308e:	6058      	str	r0, [r3, #4]
        this->fuzzySetOutputsCursor = aux;
 80a3090:	6020      	str	r0, [r4, #0]
    }
    return true;
 80a3092:	2001      	movs	r0, #1
}
 80a3094:	bd38      	pop	{r3, r4, r5, pc}

080a3096 <_ZN19FuzzyRuleConsequent8evaluateEf>:

bool FuzzyRuleConsequent::evaluate(float power){
 80a3096:	b538      	push	{r3, r4, r5, lr}
 80a3098:	460d      	mov	r5, r1
    fuzzySetOutputArray *aux;
    aux = this->fuzzySetOutputs;
 80a309a:	6844      	ldr	r4, [r0, #4]
    while(aux != NULL){
 80a309c:	b12c      	cbz	r4, 80a30aa <_ZN19FuzzyRuleConsequent8evaluateEf+0x14>
        aux->fuzzySet->setPertinence(power);
 80a309e:	6820      	ldr	r0, [r4, #0]
 80a30a0:	4629      	mov	r1, r5
 80a30a2:	f7ff ffd3 	bl	80a304c <_ZN8FuzzySet13setPertinenceEf>
        aux = aux->next;
 80a30a6:	6864      	ldr	r4, [r4, #4]
}

bool FuzzyRuleConsequent::evaluate(float power){
    fuzzySetOutputArray *aux;
    aux = this->fuzzySetOutputs;
    while(aux != NULL){
 80a30a8:	e7f8      	b.n	80a309c <_ZN19FuzzyRuleConsequent8evaluateEf+0x6>
        aux->fuzzySet->setPertinence(power);
        aux = aux->next;
    }
    return true;
}
 80a30aa:	2001      	movs	r0, #1
 80a30ac:	bd38      	pop	{r3, r4, r5, pc}

080a30ae <_ZN5FuzzyC1Ev>:

// CONSTRUTORES
Fuzzy::Fuzzy(){
    // Iniciando os ponteiros como nulo
    // FuzzyInput
    this->fuzzyInputs       = NULL;
 80a30ae:	2200      	movs	r2, #0
 80a30b0:	6042      	str	r2, [r0, #4]
    this->fuzzyInputsCursor = NULL;
 80a30b2:	6002      	str	r2, [r0, #0]
    // FuzzyOutput
    this->fuzzyOutputs          = NULL;
 80a30b4:	60c2      	str	r2, [r0, #12]
    this->fuzzyOutputsCursor    = NULL;
 80a30b6:	6082      	str	r2, [r0, #8]
    // FuzzyRule
    this->fuzzyRules        = NULL;
 80a30b8:	6142      	str	r2, [r0, #20]
    this->fuzzyRulesCursor  = NULL;
 80a30ba:	6102      	str	r2, [r0, #16]
}
 80a30bc:	4770      	bx	lr

080a30be <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>:
    this->cleanFuzzyOutputs(this->fuzzyOutputs);
    this->cleanFuzzyRules(this->fuzzyRules);
}

// MÉTODOS PÚBLICOS
bool Fuzzy::addFuzzyInput(FuzzyInput* fuzzyInput){
 80a30be:	b538      	push	{r3, r4, r5, lr}
 80a30c0:	4604      	mov	r4, r0
    fuzzyInputArray* aux;
    
    // Alocando espaço na memória
    if((aux = (fuzzyInputArray *) malloc(sizeof(fuzzyInputArray))) == NULL){
 80a30c2:	2008      	movs	r0, #8
    this->cleanFuzzyOutputs(this->fuzzyOutputs);
    this->cleanFuzzyRules(this->fuzzyRules);
}

// MÉTODOS PÚBLICOS
bool Fuzzy::addFuzzyInput(FuzzyInput* fuzzyInput){
 80a30c4:	460d      	mov	r5, r1
    fuzzyInputArray* aux;
    
    // Alocando espaço na memória
    if((aux = (fuzzyInputArray *) malloc(sizeof(fuzzyInputArray))) == NULL){
 80a30c6:	f000 fb55 	bl	80a3774 <malloc>
 80a30ca:	b150      	cbz	r0, 80a30e2 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput+0x24>
        return false;
    }

    aux->fuzzyInput = fuzzyInput;
    aux->next = NULL;
 80a30cc:	2300      	movs	r3, #0
    // Alocando espaço na memória
    if((aux = (fuzzyInputArray *) malloc(sizeof(fuzzyInputArray))) == NULL){
        return false;
    }

    aux->fuzzyInput = fuzzyInput;
 80a30ce:	6005      	str	r5, [r0, #0]
    aux->next = NULL;
 80a30d0:	6043      	str	r3, [r0, #4]

    if(this->fuzzyInputs == NULL){
 80a30d2:	6863      	ldr	r3, [r4, #4]
 80a30d4:	b90b      	cbnz	r3, 80a30da <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput+0x1c>
        this->fuzzyInputs = aux;
 80a30d6:	6060      	str	r0, [r4, #4]
 80a30d8:	e001      	b.n	80a30de <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput+0x20>
        this->fuzzyInputsCursor  = aux;
    }else{
        this->fuzzyInputsCursor->next = aux;
 80a30da:	6823      	ldr	r3, [r4, #0]
 80a30dc:	6058      	str	r0, [r3, #4]
        this->fuzzyInputsCursor = aux;
 80a30de:	6020      	str	r0, [r4, #0]
    }

    return true;
 80a30e0:	2001      	movs	r0, #1
}
 80a30e2:	bd38      	pop	{r3, r4, r5, pc}

080a30e4 <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput>:

bool Fuzzy::addFuzzyOutput(FuzzyOutput* fuzzyOutput){
 80a30e4:	b570      	push	{r4, r5, r6, lr}
 80a30e6:	4605      	mov	r5, r0
    fuzzyOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzyOutputArray *) malloc(sizeof(fuzzyOutputArray))) == NULL){
 80a30e8:	2008      	movs	r0, #8
    }

    return true;
}

bool Fuzzy::addFuzzyOutput(FuzzyOutput* fuzzyOutput){
 80a30ea:	460e      	mov	r6, r1
    fuzzyOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzyOutputArray *) malloc(sizeof(fuzzyOutputArray))) == NULL){
 80a30ec:	f000 fb42 	bl	80a3774 <malloc>
 80a30f0:	4604      	mov	r4, r0
 80a30f2:	b170      	cbz	r0, 80a3112 <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput+0x2e>
        return false;
    }
    aux->fuzzyOutput = fuzzyOutput;
    aux->next = NULL;
 80a30f4:	2300      	movs	r3, #0
 80a30f6:	6043      	str	r3, [r0, #4]
    fuzzyOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzyOutputArray *) malloc(sizeof(fuzzyOutputArray))) == NULL){
        return false;
    }
    aux->fuzzyOutput = fuzzyOutput;
 80a30f8:	6006      	str	r6, [r0, #0]
    aux->next = NULL;

    // Ordenando o fuzzyOutput
    fuzzyOutput->order();
 80a30fa:	4630      	mov	r0, r6
 80a30fc:	f7ff fcd4 	bl	80a2aa8 <_ZN11FuzzyOutput5orderEv>

    if(this->fuzzyOutputs == NULL){
 80a3100:	68eb      	ldr	r3, [r5, #12]
 80a3102:	b90b      	cbnz	r3, 80a3108 <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput+0x24>
        this->fuzzyOutputs = aux;
 80a3104:	60ec      	str	r4, [r5, #12]
 80a3106:	e001      	b.n	80a310c <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput+0x28>
        this->fuzzyOutputsCursor  = aux;
    }else{
        this->fuzzyOutputsCursor->next = aux;
 80a3108:	68ab      	ldr	r3, [r5, #8]
 80a310a:	605c      	str	r4, [r3, #4]
        this->fuzzyOutputsCursor = aux;
 80a310c:	60ac      	str	r4, [r5, #8]
    }
    return true;
 80a310e:	2001      	movs	r0, #1
 80a3110:	bd70      	pop	{r4, r5, r6, pc}
}
 80a3112:	bd70      	pop	{r4, r5, r6, pc}

080a3114 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>:

bool Fuzzy::addFuzzyRule(FuzzyRule* fuzzyRule){
 80a3114:	b538      	push	{r3, r4, r5, lr}
 80a3116:	4604      	mov	r4, r0
    fuzzyRuleArray* aux;
    // Alocando espaço na memória
    if((aux = (fuzzyRuleArray *) malloc(sizeof(fuzzyRuleArray))) == NULL){
 80a3118:	2008      	movs	r0, #8
        this->fuzzyOutputsCursor = aux;
    }
    return true;
}

bool Fuzzy::addFuzzyRule(FuzzyRule* fuzzyRule){
 80a311a:	460d      	mov	r5, r1
    fuzzyRuleArray* aux;
    // Alocando espaço na memória
    if((aux = (fuzzyRuleArray *) malloc(sizeof(fuzzyRuleArray))) == NULL){
 80a311c:	f000 fb2a 	bl	80a3774 <malloc>
 80a3120:	b150      	cbz	r0, 80a3138 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule+0x24>
        return false;
    }
    aux->fuzzyRule = fuzzyRule;
    aux->next = NULL;
 80a3122:	2300      	movs	r3, #0
    fuzzyRuleArray* aux;
    // Alocando espaço na memória
    if((aux = (fuzzyRuleArray *) malloc(sizeof(fuzzyRuleArray))) == NULL){
        return false;
    }
    aux->fuzzyRule = fuzzyRule;
 80a3124:	6005      	str	r5, [r0, #0]
    aux->next = NULL;
 80a3126:	6043      	str	r3, [r0, #4]

    if(this->fuzzyRules == NULL){
 80a3128:	6963      	ldr	r3, [r4, #20]
 80a312a:	b90b      	cbnz	r3, 80a3130 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule+0x1c>
        this->fuzzyRules = aux;
 80a312c:	6160      	str	r0, [r4, #20]
 80a312e:	e001      	b.n	80a3134 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule+0x20>
        this->fuzzyRulesCursor  = aux;
    }else{
        this->fuzzyRulesCursor->next = aux;
 80a3130:	6923      	ldr	r3, [r4, #16]
 80a3132:	6058      	str	r0, [r3, #4]
        this->fuzzyRulesCursor = aux;
 80a3134:	6120      	str	r0, [r4, #16]
    }
    return true;
 80a3136:	2001      	movs	r0, #1
}
 80a3138:	bd38      	pop	{r3, r4, r5, pc}

080a313a <_ZN5Fuzzy8setInputEif>:

bool Fuzzy::setInput(int fuzzyInputIndex, float crispValue){
 80a313a:	b570      	push	{r4, r5, r6, lr}
 80a313c:	460d      	mov	r5, r1
 80a313e:	4616      	mov	r6, r2
    fuzzyInputArray *aux;
    aux = this->fuzzyInputs;
 80a3140:	6844      	ldr	r4, [r0, #4]

    while(aux != NULL){
 80a3142:	b164      	cbz	r4, 80a315e <_ZN5Fuzzy8setInputEif+0x24>
        if(aux->fuzzyInput->getIndex() == fuzzyInputIndex){
 80a3144:	6820      	ldr	r0, [r4, #0]
 80a3146:	f7ff fc82 	bl	80a2a4e <_ZN7FuzzyIO8getIndexEv>
 80a314a:	42a8      	cmp	r0, r5
 80a314c:	d105      	bne.n	80a315a <_ZN5Fuzzy8setInputEif+0x20>
            aux->fuzzyInput->setCrispInput(crispValue);
 80a314e:	6820      	ldr	r0, [r4, #0]
 80a3150:	4631      	mov	r1, r6
 80a3152:	f7ff fc7e 	bl	80a2a52 <_ZN7FuzzyIO13setCrispInputEf>
            return true;
 80a3156:	2001      	movs	r0, #1
 80a3158:	bd70      	pop	{r4, r5, r6, pc}
        }
        aux = aux->next;
 80a315a:	6864      	ldr	r4, [r4, #4]

bool Fuzzy::setInput(int fuzzyInputIndex, float crispValue){
    fuzzyInputArray *aux;
    aux = this->fuzzyInputs;

    while(aux != NULL){
 80a315c:	e7f1      	b.n	80a3142 <_ZN5Fuzzy8setInputEif+0x8>
            aux->fuzzyInput->setCrispInput(crispValue);
            return true;
        }
        aux = aux->next;
    }
    return false;
 80a315e:	4620      	mov	r0, r4
}
 80a3160:	bd70      	pop	{r4, r5, r6, pc}

080a3162 <_ZN5Fuzzy7fuzzifyEv>:

bool Fuzzy::fuzzify(){
 80a3162:	b538      	push	{r3, r4, r5, lr}
 80a3164:	4604      	mov	r4, r0
    fuzzyInputArray* fuzzyInputAux;

    fuzzyOutputArray *fuzzyOutputAux;

    fuzzyInputAux = this->fuzzyInputs;
 80a3166:	6845      	ldr	r5, [r0, #4]
    while(fuzzyInputAux != NULL){
 80a3168:	b125      	cbz	r5, 80a3174 <_ZN5Fuzzy7fuzzifyEv+0x12>
        fuzzyInputAux->fuzzyInput->resetFuzzySets();
 80a316a:	6828      	ldr	r0, [r5, #0]
 80a316c:	f7ff fc86 	bl	80a2a7c <_ZN7FuzzyIO14resetFuzzySetsEv>
        fuzzyInputAux = fuzzyInputAux->next;
 80a3170:	686d      	ldr	r5, [r5, #4]
    fuzzyInputArray* fuzzyInputAux;

    fuzzyOutputArray *fuzzyOutputAux;

    fuzzyInputAux = this->fuzzyInputs;
    while(fuzzyInputAux != NULL){
 80a3172:	e7f9      	b.n	80a3168 <_ZN5Fuzzy7fuzzifyEv+0x6>
        fuzzyInputAux->fuzzyInput->resetFuzzySets();
        fuzzyInputAux = fuzzyInputAux->next;
    }

    fuzzyOutputAux = this->fuzzyOutputs;
 80a3174:	68e5      	ldr	r5, [r4, #12]
    while(fuzzyOutputAux != NULL){
 80a3176:	b125      	cbz	r5, 80a3182 <_ZN5Fuzzy7fuzzifyEv+0x20>
        fuzzyOutputAux->fuzzyOutput->resetFuzzySets();
 80a3178:	6828      	ldr	r0, [r5, #0]
 80a317a:	f7ff fc7f 	bl	80a2a7c <_ZN7FuzzyIO14resetFuzzySetsEv>
        fuzzyOutputAux = fuzzyOutputAux->next;
 80a317e:	686d      	ldr	r5, [r5, #4]
        fuzzyInputAux->fuzzyInput->resetFuzzySets();
        fuzzyInputAux = fuzzyInputAux->next;
    }

    fuzzyOutputAux = this->fuzzyOutputs;
    while(fuzzyOutputAux != NULL){
 80a3180:	e7f9      	b.n	80a3176 <_ZN5Fuzzy7fuzzifyEv+0x14>
        fuzzyOutputAux->fuzzyOutput->resetFuzzySets();
        fuzzyOutputAux = fuzzyOutputAux->next;
    }

    // Calculando a pertinência de todos os FuzzyInputs
    fuzzyInputAux = this->fuzzyInputs;
 80a3182:	6865      	ldr	r5, [r4, #4]
    while(fuzzyInputAux != NULL){
 80a3184:	b125      	cbz	r5, 80a3190 <_ZN5Fuzzy7fuzzifyEv+0x2e>
        fuzzyInputAux->fuzzyInput->calculateFuzzySetPertinences();
 80a3186:	6828      	ldr	r0, [r5, #0]
 80a3188:	f7ff fc4f 	bl	80a2a2a <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv>
        fuzzyInputAux = fuzzyInputAux->next;
 80a318c:	686d      	ldr	r5, [r5, #4]
        fuzzyOutputAux = fuzzyOutputAux->next;
    }

    // Calculando a pertinência de todos os FuzzyInputs
    fuzzyInputAux = this->fuzzyInputs;
    while(fuzzyInputAux != NULL){
 80a318e:	e7f9      	b.n	80a3184 <_ZN5Fuzzy7fuzzifyEv+0x22>
        fuzzyInputAux = fuzzyInputAux->next;
    }

    // Avaliando quais regras foram disparadas
    fuzzyRuleArray* fuzzyRuleAux;
    fuzzyRuleAux = this->fuzzyRules;
 80a3190:	6965      	ldr	r5, [r4, #20]
    // Calculando as pertinências de totos os FuzzyInputs
    while(fuzzyRuleAux != NULL){
 80a3192:	b125      	cbz	r5, 80a319e <_ZN5Fuzzy7fuzzifyEv+0x3c>
        fuzzyRuleAux->fuzzyRule->evaluateExpression();
 80a3194:	6828      	ldr	r0, [r5, #0]
 80a3196:	f7ff fa14 	bl	80a25c2 <_ZN9FuzzyRule18evaluateExpressionEv>
        fuzzyRuleAux = fuzzyRuleAux->next;
 80a319a:	686d      	ldr	r5, [r5, #4]

    // Avaliando quais regras foram disparadas
    fuzzyRuleArray* fuzzyRuleAux;
    fuzzyRuleAux = this->fuzzyRules;
    // Calculando as pertinências de totos os FuzzyInputs
    while(fuzzyRuleAux != NULL){
 80a319c:	e7f9      	b.n	80a3192 <_ZN5Fuzzy7fuzzifyEv+0x30>
        fuzzyRuleAux->fuzzyRule->evaluateExpression();
        fuzzyRuleAux = fuzzyRuleAux->next;
    }

    // Truncado os conjuntos de saída
    fuzzyOutputAux = this->fuzzyOutputs;
 80a319e:	68e4      	ldr	r4, [r4, #12]
    while(fuzzyOutputAux != NULL){
 80a31a0:	b124      	cbz	r4, 80a31ac <_ZN5Fuzzy7fuzzifyEv+0x4a>
        fuzzyOutputAux->fuzzyOutput->truncate();
 80a31a2:	6820      	ldr	r0, [r4, #0]
 80a31a4:	f7ff fd50 	bl	80a2c48 <_ZN11FuzzyOutput8truncateEv>
        fuzzyOutputAux = fuzzyOutputAux->next;
 80a31a8:	6864      	ldr	r4, [r4, #4]
        fuzzyRuleAux = fuzzyRuleAux->next;
    }

    // Truncado os conjuntos de saída
    fuzzyOutputAux = this->fuzzyOutputs;
    while(fuzzyOutputAux != NULL){
 80a31aa:	e7f9      	b.n	80a31a0 <_ZN5Fuzzy7fuzzifyEv+0x3e>
        fuzzyOutputAux->fuzzyOutput->truncate();
        fuzzyOutputAux = fuzzyOutputAux->next;
    }

    return true;
}
 80a31ac:	2001      	movs	r0, #1
 80a31ae:	bd38      	pop	{r3, r4, r5, pc}

080a31b0 <_ZN5Fuzzy9defuzzifyEi>:
        aux = aux->next;
    }
    return false;
}

float Fuzzy::defuzzify(int fuzzyOutputIndex){
 80a31b0:	b538      	push	{r3, r4, r5, lr}
 80a31b2:	460d      	mov	r5, r1
    fuzzyOutputArray *aux;
    aux = this->fuzzyOutputs;
 80a31b4:	68c4      	ldr	r4, [r0, #12]
    while(aux != NULL){
 80a31b6:	b15c      	cbz	r4, 80a31d0 <_ZN5Fuzzy9defuzzifyEi+0x20>
        if(aux->fuzzyOutput->getIndex() == fuzzyOutputIndex){
 80a31b8:	6820      	ldr	r0, [r4, #0]
 80a31ba:	f7ff fc48 	bl	80a2a4e <_ZN7FuzzyIO8getIndexEv>
 80a31be:	42a8      	cmp	r0, r5
 80a31c0:	d104      	bne.n	80a31cc <_ZN5Fuzzy9defuzzifyEi+0x1c>
            return aux->fuzzyOutput->getCrispOutput();
 80a31c2:	6820      	ldr	r0, [r4, #0]
        }
        aux = aux->next;
    }
    return 0;
}
 80a31c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
float Fuzzy::defuzzify(int fuzzyOutputIndex){
    fuzzyOutputArray *aux;
    aux = this->fuzzyOutputs;
    while(aux != NULL){
        if(aux->fuzzyOutput->getIndex() == fuzzyOutputIndex){
            return aux->fuzzyOutput->getCrispOutput();
 80a31c8:	f7ff bc6b 	b.w	80a2aa2 <_ZN11FuzzyOutput14getCrispOutputEv>
        }
        aux = aux->next;
 80a31cc:	6864      	ldr	r4, [r4, #4]
}

float Fuzzy::defuzzify(int fuzzyOutputIndex){
    fuzzyOutputArray *aux;
    aux = this->fuzzyOutputs;
    while(aux != NULL){
 80a31ce:	e7f2      	b.n	80a31b6 <_ZN5Fuzzy9defuzzifyEi+0x6>
            return aux->fuzzyOutput->getCrispOutput();
        }
        aux = aux->next;
    }
    return 0;
}
 80a31d0:	2000      	movs	r0, #0
 80a31d2:	bd38      	pop	{r3, r4, r5, pc}

080a31d4 <_ZN19FuzzyRuleAntecedentC1Ev>:
 */
#include "FuzzyRuleAntecedent.h"

// CONSTRUTORES
FuzzyRuleAntecedent::FuzzyRuleAntecedent(){
    this->op = 0;
 80a31d4:	2200      	movs	r2, #0
 80a31d6:	6002      	str	r2, [r0, #0]
    this->mode = 0;
 80a31d8:	6042      	str	r2, [r0, #4]
    this->fuzzySet1 = NULL;
 80a31da:	6082      	str	r2, [r0, #8]
    this->fuzzySet2 = NULL;
 80a31dc:	60c2      	str	r2, [r0, #12]
    this->fuzzyRuleAntecedent1 = NULL;
 80a31de:	6102      	str	r2, [r0, #16]
    this->fuzzyRuleAntecedent2 = NULL;
 80a31e0:	6142      	str	r2, [r0, #20]
}
 80a31e2:	4770      	bx	lr

080a31e4 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>:
        return true;
    }
    return false;
}

bool FuzzyRuleAntecedent::joinWithAND(FuzzySet* fuzzySet1, FuzzySet* fuzzySet2){
 80a31e4:	b510      	push	{r4, lr}
 80a31e6:	4603      	mov	r3, r0
    if(fuzzySet1 != NULL && fuzzySet2 != NULL){
 80a31e8:	b139      	cbz	r1, 80a31fa <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_+0x16>
 80a31ea:	b142      	cbz	r2, 80a31fe <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_+0x1a>
        this->op = OP_AND;
        this->mode = MODE_FS_FS;
 80a31ec:	2001      	movs	r0, #1
 80a31ee:	2402      	movs	r4, #2
 80a31f0:	e883 0011 	stmia.w	r3, {r0, r4}
        this->fuzzySet1 = fuzzySet1;
 80a31f4:	6099      	str	r1, [r3, #8]
        this->fuzzySet2 = fuzzySet2;
 80a31f6:	60da      	str	r2, [r3, #12]
        return true;
 80a31f8:	bd10      	pop	{r4, pc}
    }
    return false;
 80a31fa:	4608      	mov	r0, r1
 80a31fc:	bd10      	pop	{r4, pc}
 80a31fe:	4610      	mov	r0, r2
}
 80a3200:	bd10      	pop	{r4, pc}

080a3202 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>:
        return true;
    }
    return false;
}

bool FuzzyRuleAntecedent::joinWithAND(FuzzyRuleAntecedent* fuzzyRuleAntecedent1, FuzzyRuleAntecedent* fuzzyRuleAntecedent2){
 80a3202:	b510      	push	{r4, lr}
 80a3204:	4603      	mov	r3, r0
    if(fuzzyRuleAntecedent1 != NULL && fuzzyRuleAntecedent2 != NULL){
 80a3206:	b139      	cbz	r1, 80a3218 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_+0x16>
 80a3208:	b142      	cbz	r2, 80a321c <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_+0x1a>
        this->op = OP_AND;
        this->mode = MODE_FRA_FRA;
 80a320a:	2001      	movs	r0, #1
 80a320c:	2404      	movs	r4, #4
 80a320e:	e883 0011 	stmia.w	r3, {r0, r4}
        this->fuzzyRuleAntecedent1 = fuzzyRuleAntecedent1;
 80a3212:	6119      	str	r1, [r3, #16]
        this->fuzzyRuleAntecedent2 = fuzzyRuleAntecedent2;
 80a3214:	615a      	str	r2, [r3, #20]
        return true;
 80a3216:	bd10      	pop	{r4, pc}
    }
    return false;
 80a3218:	4608      	mov	r0, r1
 80a321a:	bd10      	pop	{r4, pc}
 80a321c:	4610      	mov	r0, r2
}
 80a321e:	bd10      	pop	{r4, pc}

080a3220 <_ZN19FuzzyRuleAntecedent8evaluateEv>:
        return true;
    }
    return false;
}

float FuzzyRuleAntecedent::evaluate(){
 80a3220:	b538      	push	{r3, r4, r5, lr}
 80a3222:	4604      	mov	r4, r0
    switch(this->mode){
 80a3224:	6863      	ldr	r3, [r4, #4]
 80a3226:	3b01      	subs	r3, #1
 80a3228:	2b03      	cmp	r3, #3
 80a322a:	f200 80ce 	bhi.w	80a33ca <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
 80a322e:	e8df f003 	tbb	[pc, r3]
 80a3232:	0276      	.short	0x0276
 80a3234:	7b37      	.short	0x7b37
        case MODE_FS:
            return this->fuzzySet1->getPertinence();
            break;
        case MODE_FS_FS:
            switch(this->op){
 80a3236:	6823      	ldr	r3, [r4, #0]
 80a3238:	2b01      	cmp	r3, #1
 80a323a:	d002      	beq.n	80a3242 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x22>
 80a323c:	2b02      	cmp	r3, #2
 80a323e:	d01e      	beq.n	80a327e <_ZN19FuzzyRuleAntecedent8evaluateEv+0x5e>
 80a3240:	e0c3      	b.n	80a33ca <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                case OP_AND:
                    if(this->fuzzySet1->getPertinence() > 0.0 && this->fuzzySet2->getPertinence() > 0.0){
 80a3242:	68a0      	ldr	r0, [r4, #8]
 80a3244:	f7ff ff0b 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a3248:	2100      	movs	r1, #0
 80a324a:	f002 f851 	bl	80a52f0 <__aeabi_fcmpgt>
 80a324e:	2800      	cmp	r0, #0
 80a3250:	f000 80bb 	beq.w	80a33ca <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
 80a3254:	68e0      	ldr	r0, [r4, #12]
 80a3256:	f7ff ff02 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a325a:	2100      	movs	r1, #0
 80a325c:	f002 f848 	bl	80a52f0 <__aeabi_fcmpgt>
 80a3260:	2800      	cmp	r0, #0
 80a3262:	f000 80b2 	beq.w	80a33ca <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        if(this->fuzzySet1->getPertinence() < this->fuzzySet2->getPertinence()){
 80a3266:	68a0      	ldr	r0, [r4, #8]
 80a3268:	f7ff fef9 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a326c:	4605      	mov	r5, r0
 80a326e:	68e0      	ldr	r0, [r4, #12]
 80a3270:	f7ff fef5 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a3274:	4601      	mov	r1, r0
 80a3276:	4628      	mov	r0, r5
 80a3278:	f002 f81c 	bl	80a52b4 <__aeabi_fcmplt>
 80a327c:	e090      	b.n	80a33a0 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x180>
                    }else{
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(this->fuzzySet1->getPertinence() > 0.0 || this->fuzzySet2->getPertinence() > 0.0){
 80a327e:	68a0      	ldr	r0, [r4, #8]
 80a3280:	f7ff feed 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a3284:	2100      	movs	r1, #0
 80a3286:	f002 f833 	bl	80a52f0 <__aeabi_fcmpgt>
 80a328a:	2800      	cmp	r0, #0
 80a328c:	d17d      	bne.n	80a338a <_ZN19FuzzyRuleAntecedent8evaluateEv+0x16a>
 80a328e:	68e0      	ldr	r0, [r4, #12]
 80a3290:	f7ff fee5 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a3294:	2100      	movs	r1, #0
 80a3296:	f002 f82b 	bl	80a52f0 <__aeabi_fcmpgt>
 80a329a:	2800      	cmp	r0, #0
 80a329c:	d175      	bne.n	80a338a <_ZN19FuzzyRuleAntecedent8evaluateEv+0x16a>
 80a329e:	e094      	b.n	80a33ca <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                default:
                    return 0.0;
            }
            break;
        case MODE_FS_FRA:
            switch(this->op){
 80a32a0:	6823      	ldr	r3, [r4, #0]
 80a32a2:	2b01      	cmp	r3, #1
 80a32a4:	d002      	beq.n	80a32ac <_ZN19FuzzyRuleAntecedent8evaluateEv+0x8c>
 80a32a6:	2b02      	cmp	r3, #2
 80a32a8:	d01d      	beq.n	80a32e6 <_ZN19FuzzyRuleAntecedent8evaluateEv+0xc6>
 80a32aa:	e08e      	b.n	80a33ca <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                case OP_AND:
                    if(this->fuzzySet1->getPertinence() > 0.0 && fuzzyRuleAntecedent1->evaluate() > 0.0){
 80a32ac:	68a0      	ldr	r0, [r4, #8]
 80a32ae:	f7ff fed6 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a32b2:	2100      	movs	r1, #0
 80a32b4:	f002 f81c 	bl	80a52f0 <__aeabi_fcmpgt>
 80a32b8:	2800      	cmp	r0, #0
 80a32ba:	f000 8086 	beq.w	80a33ca <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
 80a32be:	6920      	ldr	r0, [r4, #16]
 80a32c0:	f7ff ffae 	bl	80a3220 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a32c4:	2100      	movs	r1, #0
 80a32c6:	f002 f813 	bl	80a52f0 <__aeabi_fcmpgt>
 80a32ca:	2800      	cmp	r0, #0
 80a32cc:	d07d      	beq.n	80a33ca <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        if(this->fuzzySet1->getPertinence() < fuzzyRuleAntecedent1->evaluate()){
 80a32ce:	68a0      	ldr	r0, [r4, #8]
 80a32d0:	f7ff fec5 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a32d4:	4605      	mov	r5, r0
 80a32d6:	6920      	ldr	r0, [r4, #16]
 80a32d8:	f7ff ffa2 	bl	80a3220 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a32dc:	4601      	mov	r1, r0
 80a32de:	4628      	mov	r0, r5
 80a32e0:	f001 ffe8 	bl	80a52b4 <__aeabi_fcmplt>
 80a32e4:	e019      	b.n	80a331a <_ZN19FuzzyRuleAntecedent8evaluateEv+0xfa>
                    }else{
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(this->fuzzySet1->getPertinence() > 0.0 || fuzzyRuleAntecedent1->evaluate() > 0.0){
 80a32e6:	68a0      	ldr	r0, [r4, #8]
 80a32e8:	f7ff feb9 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a32ec:	2100      	movs	r1, #0
 80a32ee:	f001 ffff 	bl	80a52f0 <__aeabi_fcmpgt>
 80a32f2:	b938      	cbnz	r0, 80a3304 <_ZN19FuzzyRuleAntecedent8evaluateEv+0xe4>
 80a32f4:	6920      	ldr	r0, [r4, #16]
 80a32f6:	f7ff ff93 	bl	80a3220 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a32fa:	2100      	movs	r1, #0
 80a32fc:	f001 fff8 	bl	80a52f0 <__aeabi_fcmpgt>
 80a3300:	2800      	cmp	r0, #0
 80a3302:	d062      	beq.n	80a33ca <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        if(this->fuzzySet1->getPertinence() > fuzzyRuleAntecedent1->evaluate()){
 80a3304:	68a0      	ldr	r0, [r4, #8]
 80a3306:	f7ff feaa 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a330a:	4605      	mov	r5, r0
 80a330c:	6920      	ldr	r0, [r4, #16]
 80a330e:	f7ff ff87 	bl	80a3220 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3312:	4601      	mov	r1, r0
 80a3314:	4628      	mov	r0, r5
 80a3316:	f001 ffeb 	bl	80a52f0 <__aeabi_fcmpgt>
 80a331a:	2800      	cmp	r0, #0
 80a331c:	d044      	beq.n	80a33a8 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x188>
                            return this->fuzzySet1->getPertinence();
 80a331e:	68a0      	ldr	r0, [r4, #8]
            break;
        default:
            return 0.0;
    }
    return 0.0;
 80a3320:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                    }
                    break;
                case OP_OR:
                    if(this->fuzzySet1->getPertinence() > 0.0 || fuzzyRuleAntecedent1->evaluate() > 0.0){
                        if(this->fuzzySet1->getPertinence() > fuzzyRuleAntecedent1->evaluate()){
                            return this->fuzzySet1->getPertinence();
 80a3324:	f7ff be9b 	b.w	80a305e <_ZN8FuzzySet13getPertinenceEv>
                default:
                    return 0.0;
            }
            break;
        case MODE_FRA_FRA:
            switch(this->op){
 80a3328:	6823      	ldr	r3, [r4, #0]
 80a332a:	2b01      	cmp	r3, #1
 80a332c:	d002      	beq.n	80a3334 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x114>
 80a332e:	2b02      	cmp	r3, #2
 80a3330:	d01c      	beq.n	80a336c <_ZN19FuzzyRuleAntecedent8evaluateEv+0x14c>
 80a3332:	e04a      	b.n	80a33ca <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                case OP_AND:
                    if(fuzzyRuleAntecedent1->evaluate() > 0.0 && fuzzyRuleAntecedent2->evaluate() > 0.0){
 80a3334:	6920      	ldr	r0, [r4, #16]
 80a3336:	f7ff ff73 	bl	80a3220 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a333a:	2100      	movs	r1, #0
 80a333c:	f001 ffd8 	bl	80a52f0 <__aeabi_fcmpgt>
 80a3340:	2800      	cmp	r0, #0
 80a3342:	d042      	beq.n	80a33ca <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
 80a3344:	6960      	ldr	r0, [r4, #20]
 80a3346:	f7ff ff6b 	bl	80a3220 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a334a:	2100      	movs	r1, #0
 80a334c:	f001 ffd0 	bl	80a52f0 <__aeabi_fcmpgt>
 80a3350:	2800      	cmp	r0, #0
 80a3352:	d03a      	beq.n	80a33ca <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        if(fuzzyRuleAntecedent1->evaluate() < fuzzyRuleAntecedent2->evaluate()){
 80a3354:	6920      	ldr	r0, [r4, #16]
 80a3356:	f7ff ff63 	bl	80a3220 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a335a:	4605      	mov	r5, r0
 80a335c:	6960      	ldr	r0, [r4, #20]
 80a335e:	f7ff ff5f 	bl	80a3220 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3362:	4601      	mov	r1, r0
 80a3364:	4628      	mov	r0, r5
 80a3366:	f001 ffa5 	bl	80a52b4 <__aeabi_fcmplt>
 80a336a:	e02a      	b.n	80a33c2 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1a2>
                    }else{
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(fuzzyRuleAntecedent1->evaluate() > 0.0 || fuzzyRuleAntecedent2->evaluate() > 0.0){
 80a336c:	6920      	ldr	r0, [r4, #16]
 80a336e:	f7ff ff57 	bl	80a3220 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3372:	2100      	movs	r1, #0
 80a3374:	f001 ffbc 	bl	80a52f0 <__aeabi_fcmpgt>
 80a3378:	b9c0      	cbnz	r0, 80a33ac <_ZN19FuzzyRuleAntecedent8evaluateEv+0x18c>
 80a337a:	6960      	ldr	r0, [r4, #20]
 80a337c:	f7ff ff50 	bl	80a3220 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3380:	2100      	movs	r1, #0
 80a3382:	f001 ffb5 	bl	80a52f0 <__aeabi_fcmpgt>
 80a3386:	b988      	cbnz	r0, 80a33ac <_ZN19FuzzyRuleAntecedent8evaluateEv+0x18c>
 80a3388:	e01f      	b.n	80a33ca <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(this->fuzzySet1->getPertinence() > 0.0 || this->fuzzySet2->getPertinence() > 0.0){
                        if(this->fuzzySet1->getPertinence() > this->fuzzySet2->getPertinence()){
 80a338a:	68a0      	ldr	r0, [r4, #8]
 80a338c:	f7ff fe67 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a3390:	4605      	mov	r5, r0
 80a3392:	68e0      	ldr	r0, [r4, #12]
 80a3394:	f7ff fe63 	bl	80a305e <_ZN8FuzzySet13getPertinenceEv>
 80a3398:	4601      	mov	r1, r0
 80a339a:	4628      	mov	r0, r5
 80a339c:	f001 ffa8 	bl	80a52f0 <__aeabi_fcmpgt>
 80a33a0:	2800      	cmp	r0, #0
 80a33a2:	d1bc      	bne.n	80a331e <_ZN19FuzzyRuleAntecedent8evaluateEv+0xfe>
                            return this->fuzzySet1->getPertinence();
                        }else{
                            return this->fuzzySet2->getPertinence();
 80a33a4:	68e0      	ldr	r0, [r4, #12]
 80a33a6:	e7bb      	b.n	80a3320 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x100>
                    }
                    break;
                case OP_OR:
                    if(fuzzyRuleAntecedent1->evaluate() > 0.0 || fuzzyRuleAntecedent2->evaluate() > 0.0){
                        if(fuzzyRuleAntecedent1->evaluate() > fuzzyRuleAntecedent2->evaluate()){
                            return fuzzyRuleAntecedent1->evaluate();
 80a33a8:	6924      	ldr	r4, [r4, #16]
 80a33aa:	e73b      	b.n	80a3224 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x4>
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(fuzzyRuleAntecedent1->evaluate() > 0.0 || fuzzyRuleAntecedent2->evaluate() > 0.0){
                        if(fuzzyRuleAntecedent1->evaluate() > fuzzyRuleAntecedent2->evaluate()){
 80a33ac:	6920      	ldr	r0, [r4, #16]
 80a33ae:	f7ff ff37 	bl	80a3220 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a33b2:	4605      	mov	r5, r0
 80a33b4:	6960      	ldr	r0, [r4, #20]
 80a33b6:	f7ff ff33 	bl	80a3220 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a33ba:	4601      	mov	r1, r0
 80a33bc:	4628      	mov	r0, r5
 80a33be:	f001 ff97 	bl	80a52f0 <__aeabi_fcmpgt>
 80a33c2:	2800      	cmp	r0, #0
 80a33c4:	d1f0      	bne.n	80a33a8 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x188>
                            return fuzzyRuleAntecedent1->evaluate();
                        }else{
                            return fuzzyRuleAntecedent2->evaluate();
 80a33c6:	6964      	ldr	r4, [r4, #20]
 80a33c8:	e72c      	b.n	80a3224 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x4>
            break;
        default:
            return 0.0;
    }
    return 0.0;
 80a33ca:	2000      	movs	r0, #0
 80a33cc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a33d0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a33d0:	b508      	push	{r3, lr}
 80a33d2:	4b02      	ldr	r3, [pc, #8]	; (80a33dc <HAL_Pin_Map+0xc>)
 80a33d4:	681b      	ldr	r3, [r3, #0]
 80a33d6:	681b      	ldr	r3, [r3, #0]
 80a33d8:	9301      	str	r3, [sp, #4]
 80a33da:	bd08      	pop	{r3, pc}
 80a33dc:	080601b0 	.word	0x080601b0

080a33e0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a33e0:	b508      	push	{r3, lr}
 80a33e2:	4b02      	ldr	r3, [pc, #8]	; (80a33ec <HAL_Validate_Pin_Function+0xc>)
 80a33e4:	681b      	ldr	r3, [r3, #0]
 80a33e6:	685b      	ldr	r3, [r3, #4]
 80a33e8:	9301      	str	r3, [sp, #4]
 80a33ea:	bd08      	pop	{r3, pc}
 80a33ec:	080601b0 	.word	0x080601b0

080a33f0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a33f0:	b508      	push	{r3, lr}
 80a33f2:	4b02      	ldr	r3, [pc, #8]	; (80a33fc <HAL_Pin_Mode+0xc>)
 80a33f4:	681b      	ldr	r3, [r3, #0]
 80a33f6:	689b      	ldr	r3, [r3, #8]
 80a33f8:	9301      	str	r3, [sp, #4]
 80a33fa:	bd08      	pop	{r3, pc}
 80a33fc:	080601b0 	.word	0x080601b0

080a3400 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a3400:	b508      	push	{r3, lr}
 80a3402:	4b02      	ldr	r3, [pc, #8]	; (80a340c <HAL_Get_Pin_Mode+0xc>)
 80a3404:	681b      	ldr	r3, [r3, #0]
 80a3406:	68db      	ldr	r3, [r3, #12]
 80a3408:	9301      	str	r3, [sp, #4]
 80a340a:	bd08      	pop	{r3, pc}
 80a340c:	080601b0 	.word	0x080601b0

080a3410 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a3410:	b508      	push	{r3, lr}
 80a3412:	4b02      	ldr	r3, [pc, #8]	; (80a341c <HAL_GPIO_Write+0xc>)
 80a3414:	681b      	ldr	r3, [r3, #0]
 80a3416:	691b      	ldr	r3, [r3, #16]
 80a3418:	9301      	str	r3, [sp, #4]
 80a341a:	bd08      	pop	{r3, pc}
 80a341c:	080601b0 	.word	0x080601b0

080a3420 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a3420:	b508      	push	{r3, lr}
 80a3422:	4b02      	ldr	r3, [pc, #8]	; (80a342c <HAL_GPIO_Read+0xc>)
 80a3424:	681b      	ldr	r3, [r3, #0]
 80a3426:	695b      	ldr	r3, [r3, #20]
 80a3428:	9301      	str	r3, [sp, #4]
 80a342a:	bd08      	pop	{r3, pc}
 80a342c:	080601b0 	.word	0x080601b0

080a3430 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a3430:	b508      	push	{r3, lr}
 80a3432:	4b02      	ldr	r3, [pc, #8]	; (80a343c <HAL_Interrupts_Attach+0xc>)
 80a3434:	681b      	ldr	r3, [r3, #0]
 80a3436:	699b      	ldr	r3, [r3, #24]
 80a3438:	9301      	str	r3, [sp, #4]
 80a343a:	bd08      	pop	{r3, pc}
 80a343c:	080601b0 	.word	0x080601b0

080a3440 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a3440:	b508      	push	{r3, lr}
 80a3442:	4b02      	ldr	r3, [pc, #8]	; (80a344c <HAL_Interrupts_Detach+0xc>)
 80a3444:	681b      	ldr	r3, [r3, #0]
 80a3446:	69db      	ldr	r3, [r3, #28]
 80a3448:	9301      	str	r3, [sp, #4]
 80a344a:	bd08      	pop	{r3, pc}
 80a344c:	080601b0 	.word	0x080601b0

080a3450 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a3450:	b508      	push	{r3, lr}
 80a3452:	4b02      	ldr	r3, [pc, #8]	; (80a345c <HAL_SPI_Init+0xc>)
 80a3454:	681b      	ldr	r3, [r3, #0]
 80a3456:	69db      	ldr	r3, [r3, #28]
 80a3458:	9301      	str	r3, [sp, #4]
 80a345a:	bd08      	pop	{r3, pc}
 80a345c:	080601b4 	.word	0x080601b4

080a3460 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a3460:	b508      	push	{r3, lr}
 80a3462:	4b02      	ldr	r3, [pc, #8]	; (80a346c <HAL_SPI_Is_Enabled+0xc>)
 80a3464:	681b      	ldr	r3, [r3, #0]
 80a3466:	6a1b      	ldr	r3, [r3, #32]
 80a3468:	9301      	str	r3, [sp, #4]
 80a346a:	bd08      	pop	{r3, pc}
 80a346c:	080601b4 	.word	0x080601b4

080a3470 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a3470:	b508      	push	{r3, lr}
 80a3472:	4b02      	ldr	r3, [pc, #8]	; (80a347c <HAL_RNG_GetRandomNumber+0xc>)
 80a3474:	681b      	ldr	r3, [r3, #0]
 80a3476:	685b      	ldr	r3, [r3, #4]
 80a3478:	9301      	str	r3, [sp, #4]
 80a347a:	bd08      	pop	{r3, pc}
 80a347c:	0806019c 	.word	0x0806019c

080a3480 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a3480:	b508      	push	{r3, lr}
 80a3482:	4b02      	ldr	r3, [pc, #8]	; (80a348c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a3484:	681b      	ldr	r3, [r3, #0]
 80a3486:	695b      	ldr	r3, [r3, #20]
 80a3488:	9301      	str	r3, [sp, #4]
 80a348a:	bd08      	pop	{r3, pc}
 80a348c:	0806019c 	.word	0x0806019c

080a3490 <os_timer_create>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 80a3490:	b508      	push	{r3, lr}
 80a3492:	4b02      	ldr	r3, [pc, #8]	; (80a349c <os_timer_create+0xc>)
 80a3494:	681b      	ldr	r3, [r3, #0]
 80a3496:	6a1b      	ldr	r3, [r3, #32]
 80a3498:	9301      	str	r3, [sp, #4]
 80a349a:	bd08      	pop	{r3, pc}
 80a349c:	080601d0 	.word	0x080601d0

080a34a0 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 80a34a0:	b508      	push	{r3, lr}
 80a34a2:	4b02      	ldr	r3, [pc, #8]	; (80a34ac <os_timer_destroy+0xc>)
 80a34a4:	681b      	ldr	r3, [r3, #0]
 80a34a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a34a8:	9301      	str	r3, [sp, #4]
 80a34aa:	bd08      	pop	{r3, pc}
 80a34ac:	080601d0 	.word	0x080601d0

080a34b0 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 80a34b0:	b508      	push	{r3, lr}
 80a34b2:	4b02      	ldr	r3, [pc, #8]	; (80a34bc <os_timer_get_id+0xc>)
 80a34b4:	681b      	ldr	r3, [r3, #0]
 80a34b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a34b8:	9301      	str	r3, [sp, #4]
 80a34ba:	bd08      	pop	{r3, pc}
 80a34bc:	080601d0 	.word	0x080601d0

080a34c0 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 80a34c0:	b508      	push	{r3, lr}
 80a34c2:	4b02      	ldr	r3, [pc, #8]	; (80a34cc <os_timer_change+0xc>)
 80a34c4:	681b      	ldr	r3, [r3, #0]
 80a34c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a34c8:	9301      	str	r3, [sp, #4]
 80a34ca:	bd08      	pop	{r3, pc}
 80a34cc:	080601d0 	.word	0x080601d0

080a34d0 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a34d0:	b508      	push	{r3, lr}
 80a34d2:	4b02      	ldr	r3, [pc, #8]	; (80a34dc <os_mutex_create+0xc>)
 80a34d4:	681b      	ldr	r3, [r3, #0]
 80a34d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a34d8:	9301      	str	r3, [sp, #4]
 80a34da:	bd08      	pop	{r3, pc}
 80a34dc:	080601d0 	.word	0x080601d0

080a34e0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a34e0:	b508      	push	{r3, lr}
 80a34e2:	4b02      	ldr	r3, [pc, #8]	; (80a34ec <HAL_USART_Init+0xc>)
 80a34e4:	681b      	ldr	r3, [r3, #0]
 80a34e6:	699b      	ldr	r3, [r3, #24]
 80a34e8:	9301      	str	r3, [sp, #4]
 80a34ea:	bd08      	pop	{r3, pc}
 80a34ec:	080601c4 	.word	0x080601c4

080a34f0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a34f0:	b508      	push	{r3, lr}
 80a34f2:	4b02      	ldr	r3, [pc, #8]	; (80a34fc <HAL_USART_Write_Data+0xc>)
 80a34f4:	681b      	ldr	r3, [r3, #0]
 80a34f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a34f8:	9301      	str	r3, [sp, #4]
 80a34fa:	bd08      	pop	{r3, pc}
 80a34fc:	080601c4 	.word	0x080601c4

080a3500 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a3500:	b508      	push	{r3, lr}
 80a3502:	4b02      	ldr	r3, [pc, #8]	; (80a350c <HAL_USART_Available_Data+0xc>)
 80a3504:	681b      	ldr	r3, [r3, #0]
 80a3506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3508:	9301      	str	r3, [sp, #4]
 80a350a:	bd08      	pop	{r3, pc}
 80a350c:	080601c4 	.word	0x080601c4

080a3510 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a3510:	b508      	push	{r3, lr}
 80a3512:	4b02      	ldr	r3, [pc, #8]	; (80a351c <HAL_USART_Read_Data+0xc>)
 80a3514:	681b      	ldr	r3, [r3, #0]
 80a3516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3518:	9301      	str	r3, [sp, #4]
 80a351a:	bd08      	pop	{r3, pc}
 80a351c:	080601c4 	.word	0x080601c4

080a3520 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a3520:	b508      	push	{r3, lr}
 80a3522:	4b02      	ldr	r3, [pc, #8]	; (80a352c <HAL_USART_Peek_Data+0xc>)
 80a3524:	681b      	ldr	r3, [r3, #0]
 80a3526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3528:	9301      	str	r3, [sp, #4]
 80a352a:	bd08      	pop	{r3, pc}
 80a352c:	080601c4 	.word	0x080601c4

080a3530 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a3530:	b508      	push	{r3, lr}
 80a3532:	4b02      	ldr	r3, [pc, #8]	; (80a353c <HAL_USART_Flush_Data+0xc>)
 80a3534:	681b      	ldr	r3, [r3, #0]
 80a3536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3538:	9301      	str	r3, [sp, #4]
 80a353a:	bd08      	pop	{r3, pc}
 80a353c:	080601c4 	.word	0x080601c4

080a3540 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a3540:	b508      	push	{r3, lr}
 80a3542:	4b02      	ldr	r3, [pc, #8]	; (80a354c <HAL_USART_Is_Enabled+0xc>)
 80a3544:	681b      	ldr	r3, [r3, #0]
 80a3546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a3548:	9301      	str	r3, [sp, #4]
 80a354a:	bd08      	pop	{r3, pc}
 80a354c:	080601c4 	.word	0x080601c4

080a3550 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a3550:	b508      	push	{r3, lr}
 80a3552:	4b02      	ldr	r3, [pc, #8]	; (80a355c <HAL_USART_Available_Data_For_Write+0xc>)
 80a3554:	681b      	ldr	r3, [r3, #0]
 80a3556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3558:	9301      	str	r3, [sp, #4]
 80a355a:	bd08      	pop	{r3, pc}
 80a355c:	080601c4 	.word	0x080601c4

080a3560 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a3560:	b508      	push	{r3, lr}
 80a3562:	4b02      	ldr	r3, [pc, #8]	; (80a356c <HAL_I2C_Set_Speed+0xc>)
 80a3564:	681b      	ldr	r3, [r3, #0]
 80a3566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3568:	9301      	str	r3, [sp, #4]
 80a356a:	bd08      	pop	{r3, pc}
 80a356c:	080601ac 	.word	0x080601ac

080a3570 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a3570:	b508      	push	{r3, lr}
 80a3572:	4b02      	ldr	r3, [pc, #8]	; (80a357c <HAL_I2C_Begin+0xc>)
 80a3574:	681b      	ldr	r3, [r3, #0]
 80a3576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a3578:	9301      	str	r3, [sp, #4]
 80a357a:	bd08      	pop	{r3, pc}
 80a357c:	080601ac 	.word	0x080601ac

080a3580 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a3580:	b508      	push	{r3, lr}
 80a3582:	4b02      	ldr	r3, [pc, #8]	; (80a358c <HAL_I2C_Request_Data+0xc>)
 80a3584:	681b      	ldr	r3, [r3, #0]
 80a3586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a3588:	9301      	str	r3, [sp, #4]
 80a358a:	bd08      	pop	{r3, pc}
 80a358c:	080601ac 	.word	0x080601ac

080a3590 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a3590:	b508      	push	{r3, lr}
 80a3592:	4b02      	ldr	r3, [pc, #8]	; (80a359c <HAL_I2C_Begin_Transmission+0xc>)
 80a3594:	681b      	ldr	r3, [r3, #0]
 80a3596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a3598:	9301      	str	r3, [sp, #4]
 80a359a:	bd08      	pop	{r3, pc}
 80a359c:	080601ac 	.word	0x080601ac

080a35a0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a35a0:	b508      	push	{r3, lr}
 80a35a2:	4b02      	ldr	r3, [pc, #8]	; (80a35ac <HAL_I2C_End_Transmission+0xc>)
 80a35a4:	681b      	ldr	r3, [r3, #0]
 80a35a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a35a8:	9301      	str	r3, [sp, #4]
 80a35aa:	bd08      	pop	{r3, pc}
 80a35ac:	080601ac 	.word	0x080601ac

080a35b0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a35b0:	b508      	push	{r3, lr}
 80a35b2:	4b02      	ldr	r3, [pc, #8]	; (80a35bc <HAL_I2C_Write_Data+0xc>)
 80a35b4:	681b      	ldr	r3, [r3, #0]
 80a35b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a35b8:	9301      	str	r3, [sp, #4]
 80a35ba:	bd08      	pop	{r3, pc}
 80a35bc:	080601ac 	.word	0x080601ac

080a35c0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a35c0:	b508      	push	{r3, lr}
 80a35c2:	4b02      	ldr	r3, [pc, #8]	; (80a35cc <HAL_I2C_Available_Data+0xc>)
 80a35c4:	681b      	ldr	r3, [r3, #0]
 80a35c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a35c8:	9301      	str	r3, [sp, #4]
 80a35ca:	bd08      	pop	{r3, pc}
 80a35cc:	080601ac 	.word	0x080601ac

080a35d0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a35d0:	b508      	push	{r3, lr}
 80a35d2:	4b02      	ldr	r3, [pc, #8]	; (80a35dc <HAL_I2C_Read_Data+0xc>)
 80a35d4:	681b      	ldr	r3, [r3, #0]
 80a35d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a35d8:	9301      	str	r3, [sp, #4]
 80a35da:	bd08      	pop	{r3, pc}
 80a35dc:	080601ac 	.word	0x080601ac

080a35e0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a35e0:	b508      	push	{r3, lr}
 80a35e2:	4b02      	ldr	r3, [pc, #8]	; (80a35ec <HAL_I2C_Peek_Data+0xc>)
 80a35e4:	681b      	ldr	r3, [r3, #0]
 80a35e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a35e8:	9301      	str	r3, [sp, #4]
 80a35ea:	bd08      	pop	{r3, pc}
 80a35ec:	080601ac 	.word	0x080601ac

080a35f0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a35f0:	b508      	push	{r3, lr}
 80a35f2:	4b02      	ldr	r3, [pc, #8]	; (80a35fc <HAL_I2C_Flush_Data+0xc>)
 80a35f4:	681b      	ldr	r3, [r3, #0]
 80a35f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a35f8:	9301      	str	r3, [sp, #4]
 80a35fa:	bd08      	pop	{r3, pc}
 80a35fc:	080601ac 	.word	0x080601ac

080a3600 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a3600:	b508      	push	{r3, lr}
 80a3602:	4b02      	ldr	r3, [pc, #8]	; (80a360c <HAL_I2C_Is_Enabled+0xc>)
 80a3604:	681b      	ldr	r3, [r3, #0]
 80a3606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a3608:	9301      	str	r3, [sp, #4]
 80a360a:	bd08      	pop	{r3, pc}
 80a360c:	080601ac 	.word	0x080601ac

080a3610 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a3610:	b508      	push	{r3, lr}
 80a3612:	4b03      	ldr	r3, [pc, #12]	; (80a3620 <HAL_I2C_Init+0x10>)
 80a3614:	681b      	ldr	r3, [r3, #0]
 80a3616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a361a:	9301      	str	r3, [sp, #4]
 80a361c:	bd08      	pop	{r3, pc}
 80a361e:	0000      	.short	0x0000
 80a3620:	080601ac 	.word	0x080601ac

080a3624 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
 80a3624:	b508      	push	{r3, lr}
 80a3626:	4b02      	ldr	r3, [pc, #8]	; (80a3630 <HAL_Servo_Attach+0xc>)
 80a3628:	681b      	ldr	r3, [r3, #0]
 80a362a:	691b      	ldr	r3, [r3, #16]
 80a362c:	9301      	str	r3, [sp, #4]
 80a362e:	bd08      	pop	{r3, pc}
 80a3630:	080601a8 	.word	0x080601a8

080a3634 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
 80a3634:	b508      	push	{r3, lr}
 80a3636:	4b02      	ldr	r3, [pc, #8]	; (80a3640 <HAL_Servo_Detach+0xc>)
 80a3638:	681b      	ldr	r3, [r3, #0]
 80a363a:	695b      	ldr	r3, [r3, #20]
 80a363c:	9301      	str	r3, [sp, #4]
 80a363e:	bd08      	pop	{r3, pc}
 80a3640:	080601a8 	.word	0x080601a8

080a3644 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
 80a3644:	b508      	push	{r3, lr}
 80a3646:	4b02      	ldr	r3, [pc, #8]	; (80a3650 <HAL_Servo_Write_Pulse_Width+0xc>)
 80a3648:	681b      	ldr	r3, [r3, #0]
 80a364a:	699b      	ldr	r3, [r3, #24]
 80a364c:	9301      	str	r3, [sp, #4]
 80a364e:	bd08      	pop	{r3, pc}
 80a3650:	080601a8 	.word	0x080601a8

080a3654 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a3654:	b508      	push	{r3, lr}
 80a3656:	4b02      	ldr	r3, [pc, #8]	; (80a3660 <HAL_USB_USART_Init+0xc>)
 80a3658:	681b      	ldr	r3, [r3, #0]
 80a365a:	681b      	ldr	r3, [r3, #0]
 80a365c:	9301      	str	r3, [sp, #4]
 80a365e:	bd08      	pop	{r3, pc}
 80a3660:	080601d8 	.word	0x080601d8

080a3664 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a3664:	b508      	push	{r3, lr}
 80a3666:	4b02      	ldr	r3, [pc, #8]	; (80a3670 <HAL_USB_USART_Begin+0xc>)
 80a3668:	681b      	ldr	r3, [r3, #0]
 80a366a:	685b      	ldr	r3, [r3, #4]
 80a366c:	9301      	str	r3, [sp, #4]
 80a366e:	bd08      	pop	{r3, pc}
 80a3670:	080601d8 	.word	0x080601d8

080a3674 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a3674:	b508      	push	{r3, lr}
 80a3676:	4b02      	ldr	r3, [pc, #8]	; (80a3680 <HAL_USB_USART_Available_Data+0xc>)
 80a3678:	681b      	ldr	r3, [r3, #0]
 80a367a:	691b      	ldr	r3, [r3, #16]
 80a367c:	9301      	str	r3, [sp, #4]
 80a367e:	bd08      	pop	{r3, pc}
 80a3680:	080601d8 	.word	0x080601d8

080a3684 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a3684:	b508      	push	{r3, lr}
 80a3686:	4b02      	ldr	r3, [pc, #8]	; (80a3690 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a3688:	681b      	ldr	r3, [r3, #0]
 80a368a:	695b      	ldr	r3, [r3, #20]
 80a368c:	9301      	str	r3, [sp, #4]
 80a368e:	bd08      	pop	{r3, pc}
 80a3690:	080601d8 	.word	0x080601d8

080a3694 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3694:	b508      	push	{r3, lr}
 80a3696:	4b02      	ldr	r3, [pc, #8]	; (80a36a0 <HAL_USB_USART_Receive_Data+0xc>)
 80a3698:	681b      	ldr	r3, [r3, #0]
 80a369a:	699b      	ldr	r3, [r3, #24]
 80a369c:	9301      	str	r3, [sp, #4]
 80a369e:	bd08      	pop	{r3, pc}
 80a36a0:	080601d8 	.word	0x080601d8

080a36a4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a36a4:	b508      	push	{r3, lr}
 80a36a6:	4b02      	ldr	r3, [pc, #8]	; (80a36b0 <HAL_USB_USART_Send_Data+0xc>)
 80a36a8:	681b      	ldr	r3, [r3, #0]
 80a36aa:	69db      	ldr	r3, [r3, #28]
 80a36ac:	9301      	str	r3, [sp, #4]
 80a36ae:	bd08      	pop	{r3, pc}
 80a36b0:	080601d8 	.word	0x080601d8

080a36b4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a36b4:	b508      	push	{r3, lr}
 80a36b6:	4b02      	ldr	r3, [pc, #8]	; (80a36c0 <HAL_USB_USART_Flush_Data+0xc>)
 80a36b8:	681b      	ldr	r3, [r3, #0]
 80a36ba:	6a1b      	ldr	r3, [r3, #32]
 80a36bc:	9301      	str	r3, [sp, #4]
 80a36be:	bd08      	pop	{r3, pc}
 80a36c0:	080601d8 	.word	0x080601d8

080a36c4 <LED_SetSignalingColor>:
#include "dynalib.h"

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
 80a36c4:	b508      	push	{r3, lr}
 80a36c6:	4b02      	ldr	r3, [pc, #8]	; (80a36d0 <LED_SetSignalingColor+0xc>)
 80a36c8:	681b      	ldr	r3, [r3, #0]
 80a36ca:	685b      	ldr	r3, [r3, #4]
 80a36cc:	9301      	str	r3, [sp, #4]
 80a36ce:	bd08      	pop	{r3, pc}
 80a36d0:	080201a8 	.word	0x080201a8

080a36d4 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 80a36d4:	b508      	push	{r3, lr}
 80a36d6:	4b02      	ldr	r3, [pc, #8]	; (80a36e0 <LED_Signaling_Start+0xc>)
 80a36d8:	681b      	ldr	r3, [r3, #0]
 80a36da:	689b      	ldr	r3, [r3, #8]
 80a36dc:	9301      	str	r3, [sp, #4]
 80a36de:	bd08      	pop	{r3, pc}
 80a36e0:	080201a8 	.word	0x080201a8

080a36e4 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80a36e4:	b508      	push	{r3, lr}
 80a36e6:	4b02      	ldr	r3, [pc, #8]	; (80a36f0 <LED_Signaling_Stop+0xc>)
 80a36e8:	681b      	ldr	r3, [r3, #0]
 80a36ea:	68db      	ldr	r3, [r3, #12]
 80a36ec:	9301      	str	r3, [sp, #4]
 80a36ee:	bd08      	pop	{r3, pc}
 80a36f0:	080201a8 	.word	0x080201a8

080a36f4 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80a36f4:	b508      	push	{r3, lr}
 80a36f6:	4b02      	ldr	r3, [pc, #8]	; (80a3700 <LED_RGB_IsOverRidden+0xc>)
 80a36f8:	681b      	ldr	r3, [r3, #0]
 80a36fa:	699b      	ldr	r3, [r3, #24]
 80a36fc:	9301      	str	r3, [sp, #4]
 80a36fe:	bd08      	pop	{r3, pc}
 80a3700:	080201a8 	.word	0x080201a8

080a3704 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
 80a3704:	b508      	push	{r3, lr}
 80a3706:	4b02      	ldr	r3, [pc, #8]	; (80a3710 <LED_On+0xc>)
 80a3708:	681b      	ldr	r3, [r3, #0]
 80a370a:	69db      	ldr	r3, [r3, #28]
 80a370c:	9301      	str	r3, [sp, #4]
 80a370e:	bd08      	pop	{r3, pc}
 80a3710:	080201a8 	.word	0x080201a8

080a3714 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a3714:	b508      	push	{r3, lr}
 80a3716:	4b02      	ldr	r3, [pc, #8]	; (80a3720 <set_system_mode+0xc>)
 80a3718:	681b      	ldr	r3, [r3, #0]
 80a371a:	685b      	ldr	r3, [r3, #4]
 80a371c:	9301      	str	r3, [sp, #4]
 80a371e:	bd08      	pop	{r3, pc}
 80a3720:	080601a4 	.word	0x080601a4

080a3724 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a3724:	b508      	push	{r3, lr}
 80a3726:	4b02      	ldr	r3, [pc, #8]	; (80a3730 <system_delay_ms+0xc>)
 80a3728:	681b      	ldr	r3, [r3, #0]
 80a372a:	695b      	ldr	r3, [r3, #20]
 80a372c:	9301      	str	r3, [sp, #4]
 80a372e:	bd08      	pop	{r3, pc}
 80a3730:	080601a4 	.word	0x080601a4

080a3734 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a3734:	b508      	push	{r3, lr}
 80a3736:	4b02      	ldr	r3, [pc, #8]	; (80a3740 <system_thread_set_state+0xc>)
 80a3738:	681b      	ldr	r3, [r3, #0]
 80a373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a373c:	9301      	str	r3, [sp, #4]
 80a373e:	bd08      	pop	{r3, pc}
 80a3740:	080601a4 	.word	0x080601a4

080a3744 <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80a3744:	b508      	push	{r3, lr}
 80a3746:	4b02      	ldr	r3, [pc, #8]	; (80a3750 <system_set_usb_request_app_handler+0xc>)
 80a3748:	681b      	ldr	r3, [r3, #0]
 80a374a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a374c:	9301      	str	r3, [sp, #4]
 80a374e:	bd08      	pop	{r3, pc}
 80a3750:	080601a4 	.word	0x080601a4

080a3754 <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80a3754:	b508      	push	{r3, lr}
 80a3756:	4b02      	ldr	r3, [pc, #8]	; (80a3760 <system_set_usb_request_result+0xc>)
 80a3758:	681b      	ldr	r3, [r3, #0]
 80a375a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a375c:	9301      	str	r3, [sp, #4]
 80a375e:	bd08      	pop	{r3, pc}
 80a3760:	080601a4 	.word	0x080601a4

080a3764 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a3764:	b508      	push	{r3, lr}
 80a3766:	4b02      	ldr	r3, [pc, #8]	; (80a3770 <network_ready+0xc>)
 80a3768:	681b      	ldr	r3, [r3, #0]
 80a376a:	691b      	ldr	r3, [r3, #16]
 80a376c:	9301      	str	r3, [sp, #4]
 80a376e:	bd08      	pop	{r3, pc}
 80a3770:	080601c8 	.word	0x080601c8

080a3774 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a3774:	b508      	push	{r3, lr}
 80a3776:	4b02      	ldr	r3, [pc, #8]	; (80a3780 <malloc+0xc>)
 80a3778:	681b      	ldr	r3, [r3, #0]
 80a377a:	681b      	ldr	r3, [r3, #0]
 80a377c:	9301      	str	r3, [sp, #4]
 80a377e:	bd08      	pop	{r3, pc}
 80a3780:	080601a0 	.word	0x080601a0

080a3784 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a3784:	b508      	push	{r3, lr}
 80a3786:	4b02      	ldr	r3, [pc, #8]	; (80a3790 <free+0xc>)
 80a3788:	681b      	ldr	r3, [r3, #0]
 80a378a:	685b      	ldr	r3, [r3, #4]
 80a378c:	9301      	str	r3, [sp, #4]
 80a378e:	bd08      	pop	{r3, pc}
 80a3790:	080601a0 	.word	0x080601a0

080a3794 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a3794:	b508      	push	{r3, lr}
 80a3796:	4b02      	ldr	r3, [pc, #8]	; (80a37a0 <realloc+0xc>)
 80a3798:	681b      	ldr	r3, [r3, #0]
 80a379a:	689b      	ldr	r3, [r3, #8]
 80a379c:	9301      	str	r3, [sp, #4]
 80a379e:	bd08      	pop	{r3, pc}
 80a37a0:	080601a0 	.word	0x080601a0

080a37a4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a37a4:	4770      	bx	lr

080a37a6 <_ZN8SPIClassD0Ev>:
 80a37a6:	b510      	push	{r4, lr}
 80a37a8:	4604      	mov	r4, r0
 80a37aa:	f7fc fc78 	bl	80a009e <_ZdlPv>
 80a37ae:	4620      	mov	r0, r4
 80a37b0:	bd10      	pop	{r4, pc}
	...

080a37b4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a37b4:	b570      	push	{r4, r5, r6, lr}
 80a37b6:	4604      	mov	r4, r0
 80a37b8:	460e      	mov	r6, r1
 80a37ba:	4b07      	ldr	r3, [pc, #28]	; (80a37d8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
	Mutex(os_mutex_t handle) : handle_(handle) {}

	/**
	 * Creates a new mutex.
	 */
	Mutex() : handle_(nullptr)
 80a37bc:	2500      	movs	r5, #0
 80a37be:	6003      	str	r3, [r0, #0]
 80a37c0:	f840 5f0c 	str.w	r5, [r0, #12]!
	{
		os_mutex_create(&handle_);
 80a37c4:	f7ff fe84 	bl	80a34d0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a37c8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a37ca:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a37cc:	f7ff fe40 	bl	80a3450 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a37d0:	60a5      	str	r5, [r4, #8]
}
 80a37d2:	4620      	mov	r0, r4
 80a37d4:	bd70      	pop	{r4, r5, r6, pc}
 80a37d6:	bf00      	nop
 80a37d8:	080a5514 	.word	0x080a5514

080a37dc <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a37dc:	7900      	ldrb	r0, [r0, #4]
 80a37de:	f7ff be3f 	b.w	80a3460 <HAL_SPI_Is_Enabled>

080a37e2 <_ZN5Servo17writeMicrosecondsEt>:
  // write(179).
  return a == this->minAngle || a == this->maxAngle ? a : a + 1;
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{
 80a37e2:	f9b0 2000 	ldrsh.w	r2, [r0]

  if (!this->attached())
 80a37e6:	1c53      	adds	r3, r2, #1
 80a37e8:	d00b      	beq.n	80a3802 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
 80a37ea:	8843      	ldrh	r3, [r0, #2]
 80a37ec:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 80a37ee:	428b      	cmp	r3, r1
 80a37f0:	d803      	bhi.n	80a37fa <_ZN5Servo17writeMicrosecondsEt+0x18>
 80a37f2:	4288      	cmp	r0, r1
 80a37f4:	4603      	mov	r3, r0
 80a37f6:	bf28      	it	cs
 80a37f8:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
 80a37fa:	4619      	mov	r1, r3
 80a37fc:	b290      	uxth	r0, r2
 80a37fe:	f7ff bf21 	b.w	80a3644 <HAL_Servo_Write_Pulse_Width>
 80a3802:	4770      	bx	lr

080a3804 <_ZN5Servo11resetFieldsEv>:
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a3804:	f64f 73ff 	movw	r3, #65535	; 0xffff
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
 80a3808:	22b4      	movs	r2, #180	; 0xb4
 80a380a:	8102      	strh	r2, [r0, #8]
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a380c:	f44f 7208 	mov.w	r2, #544	; 0x220
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a3810:	8003      	strh	r3, [r0, #0]
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a3812:	8042      	strh	r2, [r0, #2]
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a3814:	2300      	movs	r3, #0
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a3816:	f44f 6216 	mov.w	r2, #2400	; 0x960
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a381a:	80c3      	strh	r3, [r0, #6]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a381c:	8082      	strh	r2, [r0, #4]
  this->trim = 0;
 80a381e:	60c3      	str	r3, [r0, #12]
 80a3820:	4770      	bx	lr

080a3822 <_ZN5ServoC1Ev>:
#define ANGLE_TO_US(a)    ((uint16_t)(map((a), this->minAngle, this->maxAngle, \
                                        this->minPW, this->maxPW)))
#define US_TO_ANGLE(us)   ((int16_t)(map((us), this->minPW, this->maxPW,  \
                                       this->minAngle, this->maxAngle)))

Servo::Servo()
 80a3822:	b508      	push	{r3, lr}
{
  this->resetFields();
 80a3824:	f7ff ffee 	bl	80a3804 <_ZN5Servo11resetFieldsEv>
}
 80a3828:	bd08      	pop	{r3, pc}

080a382a <_ZN5Servo6detachEv>:

  return true;
}

bool Servo::detach()
{
 80a382a:	b510      	push	{r4, lr}
 80a382c:	4604      	mov	r4, r0
 80a382e:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
 80a3832:	1c43      	adds	r3, r0, #1
 80a3834:	d007      	beq.n	80a3846 <_ZN5Servo6detachEv+0x1c>
  {
    return false;
  }

  HAL_Servo_Detach(this->pin);
 80a3836:	b280      	uxth	r0, r0
 80a3838:	f7ff fefc 	bl	80a3634 <HAL_Servo_Detach>

  this->resetFields();
 80a383c:	4620      	mov	r0, r4
 80a383e:	f7ff ffe1 	bl	80a3804 <_ZN5Servo11resetFieldsEv>

  return true;
 80a3842:	2001      	movs	r0, #1
 80a3844:	bd10      	pop	{r4, pc}

bool Servo::detach()
{
  if (!this->attached())
  {
    return false;
 80a3846:	2000      	movs	r0, #0
  HAL_Servo_Detach(this->pin);

  this->resetFields();

  return true;
}
 80a3848:	bd10      	pop	{r4, pc}

080a384a <_ZN5Servo6attachEtttss>:
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a384a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a384e:	460d      	mov	r5, r1
 80a3850:	4604      	mov	r4, r0

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a3852:	2102      	movs	r1, #2
 80a3854:	4628      	mov	r0, r5
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a3856:	4690      	mov	r8, r2
 80a3858:	461f      	mov	r7, r3

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a385a:	f7ff fdc1 	bl	80a33e0 <HAL_Validate_Pin_Function>
 80a385e:	2802      	cmp	r0, #2
 80a3860:	d001      	beq.n	80a3866 <_ZN5Servo6attachEtttss+0x1c>
  {
    return false;
 80a3862:	2600      	movs	r6, #0
 80a3864:	e019      	b.n	80a389a <_ZN5Servo6attachEtttss+0x50>
  }

  // Safety check
  if (!pinAvailable(pin))
 80a3866:	4628      	mov	r0, r5
 80a3868:	f000 fbcc 	bl	80a4004 <pinAvailable>
 80a386c:	4606      	mov	r6, r0
 80a386e:	2800      	cmp	r0, #0
 80a3870:	d0f7      	beq.n	80a3862 <_ZN5Servo6attachEtttss+0x18>
  {
    return false;
  }

  if (this->attached())
 80a3872:	f9b4 3000 	ldrsh.w	r3, [r4]
 80a3876:	3301      	adds	r3, #1
 80a3878:	d002      	beq.n	80a3880 <_ZN5Servo6attachEtttss+0x36>
  {
    this->detach();
 80a387a:	4620      	mov	r0, r4
 80a387c:	f7ff ffd5 	bl	80a382a <_ZN5Servo6detachEv>
  }

  this->pin = pin;
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a3880:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  if (this->attached())
  {
    this->detach();
  }

  this->pin = pin;
 80a3884:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a3886:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
 80a3888:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  {
    this->detach();
  }

  this->pin = pin;
  this->minPW = minPW;
 80a388c:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
 80a3890:	80a7      	strh	r7, [r4, #4]
  this->minAngle = minAngle;
  this->maxAngle = maxAngle;
 80a3892:	8123      	strh	r3, [r4, #8]

  HAL_Servo_Attach(this->pin);
 80a3894:	4628      	mov	r0, r5
 80a3896:	f7ff fec5 	bl	80a3624 <HAL_Servo_Attach>

  return true;
}
 80a389a:	4630      	mov	r0, r6
 80a389c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a38a0 <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a38a0:	2000      	movs	r0, #0
 80a38a2:	f7ff bf37 	b.w	80a3714 <set_system_mode>

080a38a6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a38a6:	b510      	push	{r4, lr}
 80a38a8:	4604      	mov	r4, r0
{
	free(buffer);
 80a38aa:	6800      	ldr	r0, [r0, #0]
 80a38ac:	f7ff ff6a 	bl	80a3784 <free>
}
 80a38b0:	4620      	mov	r0, r4
 80a38b2:	bd10      	pop	{r4, pc}

080a38b4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a38b4:	b510      	push	{r4, lr}
 80a38b6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a38b8:	6800      	ldr	r0, [r0, #0]
 80a38ba:	b108      	cbz	r0, 80a38c0 <_ZN6String10invalidateEv+0xc>
 80a38bc:	f7ff ff62 	bl	80a3784 <free>
	buffer = NULL;
 80a38c0:	2300      	movs	r3, #0
 80a38c2:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a38c4:	60a3      	str	r3, [r4, #8]
 80a38c6:	6063      	str	r3, [r4, #4]
 80a38c8:	bd10      	pop	{r4, pc}

080a38ca <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a38ca:	b538      	push	{r3, r4, r5, lr}
 80a38cc:	4604      	mov	r4, r0
 80a38ce:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a38d0:	6800      	ldr	r0, [r0, #0]
 80a38d2:	3101      	adds	r1, #1
 80a38d4:	f7ff ff5e 	bl	80a3794 <realloc>
	if (newbuffer) {
 80a38d8:	b110      	cbz	r0, 80a38e0 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a38da:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a38de:	2001      	movs	r0, #1
	}
	return 0;
}
 80a38e0:	bd38      	pop	{r3, r4, r5, pc}

080a38e2 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a38e2:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a38e4:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a38e6:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a38e8:	b113      	cbz	r3, 80a38f0 <_ZN6String7reserveEj+0xe>
 80a38ea:	6843      	ldr	r3, [r0, #4]
 80a38ec:	428b      	cmp	r3, r1
 80a38ee:	d207      	bcs.n	80a3900 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a38f0:	4620      	mov	r0, r4
 80a38f2:	f7ff ffea 	bl	80a38ca <_ZN6String12changeBufferEj>
 80a38f6:	b120      	cbz	r0, 80a3902 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a38f8:	68a3      	ldr	r3, [r4, #8]
 80a38fa:	b90b      	cbnz	r3, 80a3900 <_ZN6String7reserveEj+0x1e>
 80a38fc:	6822      	ldr	r2, [r4, #0]
 80a38fe:	7013      	strb	r3, [r2, #0]
 80a3900:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a3902:	bd10      	pop	{r4, pc}

080a3904 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a3904:	b570      	push	{r4, r5, r6, lr}
 80a3906:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a3908:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a390a:	4604      	mov	r4, r0
 80a390c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a390e:	f7ff ffe8 	bl	80a38e2 <_ZN6String7reserveEj>
 80a3912:	b918      	cbnz	r0, 80a391c <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a3914:	4620      	mov	r0, r4
 80a3916:	f7ff ffcd 	bl	80a38b4 <_ZN6String10invalidateEv>
		return *this;
 80a391a:	e009      	b.n	80a3930 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a391c:	462a      	mov	r2, r5
 80a391e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a3920:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a3922:	6820      	ldr	r0, [r4, #0]
 80a3924:	f001 fd1c 	bl	80a5360 <memcpy>
	buffer[len] = 0;
 80a3928:	6822      	ldr	r2, [r4, #0]
 80a392a:	68a3      	ldr	r3, [r4, #8]
 80a392c:	2100      	movs	r1, #0
 80a392e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a3930:	4620      	mov	r0, r4
 80a3932:	bd70      	pop	{r4, r5, r6, pc}

080a3934 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3934:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3936:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3938:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a393a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a393c:	6043      	str	r3, [r0, #4]
	len = 0;
 80a393e:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a3940:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a3942:	460d      	mov	r5, r1
 80a3944:	b139      	cbz	r1, 80a3956 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a3946:	4608      	mov	r0, r1
 80a3948:	f001 fd1d 	bl	80a5386 <strlen>
 80a394c:	4629      	mov	r1, r5
 80a394e:	4602      	mov	r2, r0
 80a3950:	4620      	mov	r0, r4
 80a3952:	f7ff ffd7 	bl	80a3904 <_ZN6String4copyEPKcj>
}
 80a3956:	4620      	mov	r0, r4
 80a3958:	bd38      	pop	{r3, r4, r5, pc}

080a395a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a395a:	b538      	push	{r3, r4, r5, lr}
 80a395c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a395e:	460c      	mov	r4, r1
 80a3960:	b141      	cbz	r1, 80a3974 <_ZN6StringaSEPKc+0x1a>
 80a3962:	4608      	mov	r0, r1
 80a3964:	f001 fd0f 	bl	80a5386 <strlen>
 80a3968:	4621      	mov	r1, r4
 80a396a:	4602      	mov	r2, r0
 80a396c:	4628      	mov	r0, r5
 80a396e:	f7ff ffc9 	bl	80a3904 <_ZN6String4copyEPKcj>
 80a3972:	e001      	b.n	80a3978 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a3974:	f7ff ff9e 	bl	80a38b4 <_ZN6String10invalidateEv>

	return *this;
}
 80a3978:	4628      	mov	r0, r5
 80a397a:	bd38      	pop	{r3, r4, r5, pc}

080a397c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a397e:	4606      	mov	r6, r0
 80a3980:	460d      	mov	r5, r1
 80a3982:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a3984:	2400      	movs	r4, #0
  while (size--) {
 80a3986:	42bd      	cmp	r5, r7
 80a3988:	d00c      	beq.n	80a39a4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a398a:	6833      	ldr	r3, [r6, #0]
 80a398c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a3990:	689b      	ldr	r3, [r3, #8]
 80a3992:	4630      	mov	r0, r6
 80a3994:	4798      	blx	r3
     if (chunk>=0)
 80a3996:	2800      	cmp	r0, #0
 80a3998:	db01      	blt.n	80a399e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a399a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a399c:	e7f3      	b.n	80a3986 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a399e:	2c00      	cmp	r4, #0
 80a39a0:	bf08      	it	eq
 80a39a2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a39a4:	4620      	mov	r0, r4
 80a39a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a39a8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a39a8:	b570      	push	{r4, r5, r6, lr}
 80a39aa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a39ac:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a39ae:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a39b0:	b149      	cbz	r1, 80a39c6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a39b2:	f001 fce8 	bl	80a5386 <strlen>
 80a39b6:	682b      	ldr	r3, [r5, #0]
 80a39b8:	4602      	mov	r2, r0
 80a39ba:	4621      	mov	r1, r4
 80a39bc:	4628      	mov	r0, r5
    }
 80a39be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a39c2:	68db      	ldr	r3, [r3, #12]
 80a39c4:	4718      	bx	r3
    }
 80a39c6:	bd70      	pop	{r4, r5, r6, pc}

080a39c8 <_ZN5Print5printEPKc>:
 80a39c8:	b508      	push	{r3, lr}
 80a39ca:	f7ff ffed 	bl	80a39a8 <_ZN5Print5writeEPKc>
 80a39ce:	bd08      	pop	{r3, pc}

080a39d0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a39d0:	6803      	ldr	r3, [r0, #0]
 80a39d2:	689b      	ldr	r3, [r3, #8]
 80a39d4:	4718      	bx	r3

080a39d6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a39d6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a39d8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a39da:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a39dc:	f7ff fff8 	bl	80a39d0 <_ZN5Print5printEc>
  n += print('\n');
 80a39e0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a39e2:	4604      	mov	r4, r0
  n += print('\n');
 80a39e4:	4628      	mov	r0, r5
 80a39e6:	f7ff fff3 	bl	80a39d0 <_ZN5Print5printEc>
  return n;
}
 80a39ea:	4420      	add	r0, r4
 80a39ec:	bd38      	pop	{r3, r4, r5, pc}

080a39ee <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a39ee:	b538      	push	{r3, r4, r5, lr}
 80a39f0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a39f2:	f7ff ffd9 	bl	80a39a8 <_ZN5Print5writeEPKc>
 80a39f6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a39f8:	4628      	mov	r0, r5
 80a39fa:	f7ff ffec 	bl	80a39d6 <_ZN5Print7printlnEv>
  return n;
}
 80a39fe:	4420      	add	r0, r4
 80a3a00:	bd38      	pop	{r3, r4, r5, pc}

080a3a02 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a3a02:	2a01      	cmp	r2, #1
 80a3a04:	bf98      	it	ls
 80a3a06:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a3a08:	b530      	push	{r4, r5, lr}
 80a3a0a:	460b      	mov	r3, r1
 80a3a0c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a3a0e:	2100      	movs	r1, #0
 80a3a10:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a3a14:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a3a18:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a3a1c:	fb05 3312 	mls	r3, r5, r2, r3
 80a3a20:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a3a22:	2b09      	cmp	r3, #9
 80a3a24:	bf94      	ite	ls
 80a3a26:	3330      	addls	r3, #48	; 0x30
 80a3a28:	3337      	addhi	r3, #55	; 0x37
 80a3a2a:	b2db      	uxtb	r3, r3
 80a3a2c:	4621      	mov	r1, r4
 80a3a2e:	f804 3901 	strb.w	r3, [r4], #-1
 80a3a32:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a3a34:	2d00      	cmp	r5, #0
 80a3a36:	d1ef      	bne.n	80a3a18 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a3a38:	f7ff ffb6 	bl	80a39a8 <_ZN5Print5writeEPKc>
}
 80a3a3c:	b00b      	add	sp, #44	; 0x2c
 80a3a3e:	bd30      	pop	{r4, r5, pc}

080a3a40 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a3a40:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a3a42:	b922      	cbnz	r2, 80a3a4e <_ZN5Print5printEmi+0xe>
 80a3a44:	6803      	ldr	r3, [r0, #0]
 80a3a46:	b2c9      	uxtb	r1, r1
 80a3a48:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a3a4a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a3a4c:	4718      	bx	r3
  else return printNumber(n, base);
 80a3a4e:	b2d2      	uxtb	r2, r2
}
 80a3a50:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a3a52:	f7ff bfd6 	b.w	80a3a02 <_ZN5Print11printNumberEmh>

080a3a56 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a3a56:	f7ff bff3 	b.w	80a3a40 <_ZN5Print5printEmi>
	...

080a3a5c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a3a5c:	4a01      	ldr	r2, [pc, #4]	; (80a3a64 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a3a5e:	4b02      	ldr	r3, [pc, #8]	; (80a3a68 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a3a60:	601a      	str	r2, [r3, #0]
 80a3a62:	4770      	bx	lr
 80a3a64:	080a55d7 	.word	0x080a55d7
 80a3a68:	20000410 	.word	0x20000410

080a3a6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a3a6c:	4b02      	ldr	r3, [pc, #8]	; (80a3a78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a3a6e:	681a      	ldr	r2, [r3, #0]
 80a3a70:	4b02      	ldr	r3, [pc, #8]	; (80a3a7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a3a72:	601a      	str	r2, [r3, #0]
 80a3a74:	4770      	bx	lr
 80a3a76:	bf00      	nop
 80a3a78:	20000330 	.word	0x20000330
 80a3a7c:	20000414 	.word	0x20000414

080a3a80 <delay>:
  return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a3a80:	2100      	movs	r1, #0
 80a3a82:	f7ff be4f 	b.w	80a3724 <system_delay_ms>

080a3a86 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 80a3a86:	b510      	push	{r4, lr}
 80a3a88:	4604      	mov	r4, r0
#include "core_hal.h"
#include "rgbled.h"

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 80a3a8a:	f7ff fe33 	bl	80a36f4 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if(override == controlled())
 80a3a8e:	4284      	cmp	r4, r0
 80a3a90:	d008      	beq.n	80a3aa4 <_ZN8RGBClass7controlEb+0x1e>
            return;
    else if (override)
 80a3a92:	b11c      	cbz	r4, 80a3a9c <_ZN8RGBClass7controlEb+0x16>
            LED_Signaling_Start();
    else
            LED_Signaling_Stop();
}
 80a3a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if(override == controlled())
            return;
    else if (override)
            LED_Signaling_Start();
 80a3a98:	f7ff be1c 	b.w	80a36d4 <LED_Signaling_Start>
    else
            LED_Signaling_Stop();
}
 80a3a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if(override == controlled())
            return;
    else if (override)
            LED_Signaling_Start();
    else
            LED_Signaling_Stop();
 80a3aa0:	f7ff be20 	b.w	80a36e4 <LED_Signaling_Stop>
 80a3aa4:	bd10      	pop	{r4, pc}

080a3aa6 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
 80a3aa6:	b570      	push	{r4, r5, r6, lr}
 80a3aa8:	4605      	mov	r5, r0
 80a3aaa:	460e      	mov	r6, r1
 80a3aac:	4614      	mov	r4, r2
#include "core_hal.h"
#include "rgbled.h"

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 80a3aae:	f7ff fe21 	bl	80a36f4 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled())
 80a3ab2:	b150      	cbz	r0, 80a3aca <_ZN8RGBClass5colorEiii+0x24>
            return;

    LED_SetSignalingColor(red << 16 | green << 8 | blue);
 80a3ab4:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
 80a3ab8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80a3abc:	f7ff fe02 	bl	80a36c4 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
 80a3ac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled())
            return;

    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
 80a3ac4:	20e7      	movs	r0, #231	; 0xe7
 80a3ac6:	f7ff be1d 	b.w	80a3704 <LED_On>
 80a3aca:	bd70      	pop	{r4, r5, r6, pc}

080a3acc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a3acc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a3ace:	4b14      	ldr	r3, [pc, #80]	; (80a3b20 <serialEventRun+0x54>)
 80a3ad0:	b133      	cbz	r3, 80a3ae0 <serialEventRun+0x14>
 80a3ad2:	f000 f925 	bl	80a3d20 <_Z16_fetch_usbserialv>
 80a3ad6:	6803      	ldr	r3, [r0, #0]
 80a3ad8:	691b      	ldr	r3, [r3, #16]
 80a3ada:	4798      	blx	r3
 80a3adc:	2800      	cmp	r0, #0
 80a3ade:	dc16      	bgt.n	80a3b0e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a3ae0:	4b10      	ldr	r3, [pc, #64]	; (80a3b24 <serialEventRun+0x58>)
 80a3ae2:	b133      	cbz	r3, 80a3af2 <serialEventRun+0x26>
 80a3ae4:	f000 f9ea 	bl	80a3ebc <_Z22__fetch_global_Serial1v>
 80a3ae8:	6803      	ldr	r3, [r0, #0]
 80a3aea:	691b      	ldr	r3, [r3, #16]
 80a3aec:	4798      	blx	r3
 80a3aee:	2800      	cmp	r0, #0
 80a3af0:	dc10      	bgt.n	80a3b14 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a3af2:	4b0d      	ldr	r3, [pc, #52]	; (80a3b28 <serialEventRun+0x5c>)
 80a3af4:	b10b      	cbz	r3, 80a3afa <serialEventRun+0x2e>
 80a3af6:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a3afa:	4b0c      	ldr	r3, [pc, #48]	; (80a3b2c <serialEventRun+0x60>)
 80a3afc:	b17b      	cbz	r3, 80a3b1e <serialEventRun+0x52>
 80a3afe:	f000 f94b 	bl	80a3d98 <_Z17_fetch_usbserial1v>
 80a3b02:	6803      	ldr	r3, [r0, #0]
 80a3b04:	691b      	ldr	r3, [r3, #16]
 80a3b06:	4798      	blx	r3
 80a3b08:	2800      	cmp	r0, #0
 80a3b0a:	dc06      	bgt.n	80a3b1a <serialEventRun+0x4e>
 80a3b0c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a3b0e:	f3af 8000 	nop.w
 80a3b12:	e7e5      	b.n	80a3ae0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a3b14:	f3af 8000 	nop.w
 80a3b18:	e7eb      	b.n	80a3af2 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a3b1a:	f3af 8000 	nop.w
 80a3b1e:	bd08      	pop	{r3, pc}
	...

080a3b30 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a3b30:	b508      	push	{r3, lr}
	serialEventRun();
 80a3b32:	f7ff ffcb 	bl	80a3acc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a3b36:	f7ff fca3 	bl	80a3480 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a3b3a:	4b01      	ldr	r3, [pc, #4]	; (80a3b40 <_post_loop+0x10>)
 80a3b3c:	6018      	str	r0, [r3, #0]
 80a3b3e:	bd08      	pop	{r3, pc}
 80a3b40:	200008a0 	.word	0x200008a0

080a3b44 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a3b44:	4802      	ldr	r0, [pc, #8]	; (80a3b50 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a3b46:	4a03      	ldr	r2, [pc, #12]	; (80a3b54 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a3b48:	4903      	ldr	r1, [pc, #12]	; (80a3b58 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a3b4a:	1a12      	subs	r2, r2, r0
 80a3b4c:	f001 bc08 	b.w	80a5360 <memcpy>
 80a3b50:	40024000 	.word	0x40024000
 80a3b54:	40024004 	.word	0x40024004
 80a3b58:	080a5710 	.word	0x080a5710

080a3b5c <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80a3b5c:	2000      	movs	r0, #0
 80a3b5e:	4770      	bx	lr

080a3b60 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a3b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80a3b62:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a3b64:	4604      	mov	r4, r0
    switch (req->type) {
 80a3b66:	2b0a      	cmp	r3, #10
 80a3b68:	d00e      	beq.n	80a3b88 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 80a3b6a:	2b50      	cmp	r3, #80	; 0x50
 80a3b6c:	d11c      	bne.n	80a3ba8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80a3b6e:	4b10      	ldr	r3, [pc, #64]	; (80a3bb0 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80a3b70:	681d      	ldr	r5, [r3, #0]
 80a3b72:	b1cd      	cbz	r5, 80a3ba8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 80a3b74:	7d03      	ldrb	r3, [r0, #20]
 80a3b76:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a3b7a:	9300      	str	r3, [sp, #0]
 80a3b7c:	68c2      	ldr	r2, [r0, #12]
 80a3b7e:	f100 0310 	add.w	r3, r0, #16
 80a3b82:	6880      	ldr	r0, [r0, #8]
 80a3b84:	47a8      	blx	r5
 80a3b86:	e007      	b.n	80a3b98 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80a3b88:	f100 0310 	add.w	r3, r0, #16
 80a3b8c:	68c2      	ldr	r2, [r0, #12]
 80a3b8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a3b92:	6880      	ldr	r0, [r0, #8]
 80a3b94:	f7ff ffe2 	bl	80a3b5c <_Z26usb_request_custom_handlerPcjjPj>
 80a3b98:	b130      	cbz	r0, 80a3ba8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80a3b9a:	2200      	movs	r2, #0
 80a3b9c:	4620      	mov	r0, r4
 80a3b9e:	4611      	mov	r1, r2
 80a3ba0:	f7ff fdd8 	bl	80a3754 <system_set_usb_request_result>
        return true;
 80a3ba4:	2001      	movs	r0, #1
 80a3ba6:	e000      	b.n	80a3baa <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80a3ba8:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80a3baa:	b003      	add	sp, #12
 80a3bac:	bd30      	pop	{r4, r5, pc}
 80a3bae:	bf00      	nop
 80a3bb0:	20000418 	.word	0x20000418

080a3bb4 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80a3bb4:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a3bb6:	4c0c      	ldr	r4, [pc, #48]	; (80a3be8 <module_user_init_hook+0x34>)
 80a3bb8:	4d0c      	ldr	r5, [pc, #48]	; (80a3bec <module_user_init_hook+0x38>)
 80a3bba:	6823      	ldr	r3, [r4, #0]
 80a3bbc:	42ab      	cmp	r3, r5
 80a3bbe:	4b0c      	ldr	r3, [pc, #48]	; (80a3bf0 <module_user_init_hook+0x3c>)
 80a3bc0:	bf0c      	ite	eq
 80a3bc2:	2201      	moveq	r2, #1
 80a3bc4:	2200      	movne	r2, #0
 80a3bc6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3bc8:	d002      	beq.n	80a3bd0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a3bca:	f7ff ffbb 	bl	80a3b44 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a3bce:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a3bd0:	4b08      	ldr	r3, [pc, #32]	; (80a3bf4 <module_user_init_hook+0x40>)
 80a3bd2:	b11b      	cbz	r3, 80a3bdc <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3bd4:	f7ff fc4c 	bl	80a3470 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a3bd8:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80a3bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80a3be0:	2100      	movs	r1, #0
 80a3be2:	4805      	ldr	r0, [pc, #20]	; (80a3bf8 <module_user_init_hook+0x44>)
 80a3be4:	f7ff bdae 	b.w	80a3744 <system_set_usb_request_app_handler>
 80a3be8:	40024000 	.word	0x40024000
 80a3bec:	9a271c1e 	.word	0x9a271c1e
 80a3bf0:	2000041c 	.word	0x2000041c
 80a3bf4:	00000000 	.word	0x00000000
 80a3bf8:	080a3b61 	.word	0x080a3b61

080a3bfc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a3bfc:	4770      	bx	lr

080a3bfe <_ZN9IPAddressD0Ev>:
 80a3bfe:	b510      	push	{r4, lr}
 80a3c00:	4604      	mov	r4, r0
 80a3c02:	f7fc fa4c 	bl	80a009e <_ZdlPv>
 80a3c06:	4620      	mov	r0, r4
 80a3c08:	bd10      	pop	{r4, pc}

080a3c0a <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a3c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3c0c:	460f      	mov	r7, r1
 80a3c0e:	f100 0608 	add.w	r6, r0, #8
 80a3c12:	1d05      	adds	r5, r0, #4
 80a3c14:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3c16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a3c1a:	220a      	movs	r2, #10
 80a3c1c:	4638      	mov	r0, r7
 80a3c1e:	f7ff ff1a 	bl	80a3a56 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3c22:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3c24:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3c26:	d007      	beq.n	80a3c38 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a3c28:	2c00      	cmp	r4, #0
 80a3c2a:	d0f4      	beq.n	80a3c16 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a3c2c:	212e      	movs	r1, #46	; 0x2e
 80a3c2e:	4638      	mov	r0, r7
 80a3c30:	f7ff fece 	bl	80a39d0 <_ZN5Print5printEc>
 80a3c34:	4404      	add	r4, r0
 80a3c36:	e7ee      	b.n	80a3c16 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a3c38:	4620      	mov	r0, r4
 80a3c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3c3c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a3c3c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a3c3e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a3c42:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a3c46:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a3c4a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a3c4e:	2304      	movs	r3, #4
 80a3c50:	6041      	str	r1, [r0, #4]
 80a3c52:	7503      	strb	r3, [r0, #20]
 80a3c54:	bd10      	pop	{r4, pc}
	...

080a3c58 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a3c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a3c5a:	4d04      	ldr	r5, [pc, #16]	; (80a3c6c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a3c5c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a3c5e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a3c62:	9500      	str	r5, [sp, #0]
 80a3c64:	f7ff ffea 	bl	80a3c3c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a3c68:	b003      	add	sp, #12
 80a3c6a:	bd30      	pop	{r4, r5, pc}
 80a3c6c:	080a5634 	.word	0x080a5634

080a3c70 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3c70:	7441      	strb	r1, [r0, #17]
 80a3c72:	4770      	bx	lr

080a3c74 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a3c74:	4770      	bx	lr

080a3c76 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a3c76:	2100      	movs	r1, #0
 80a3c78:	7c00      	ldrb	r0, [r0, #16]
 80a3c7a:	f7ff bd0b 	b.w	80a3694 <HAL_USB_USART_Receive_Data>

080a3c7e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a3c7e:	2101      	movs	r1, #1
 80a3c80:	7c00      	ldrb	r0, [r0, #16]
 80a3c82:	f7ff bd07 	b.w	80a3694 <HAL_USB_USART_Receive_Data>

080a3c86 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a3c86:	7c00      	ldrb	r0, [r0, #16]
 80a3c88:	f7ff bcfc 	b.w	80a3684 <HAL_USB_USART_Available_Data_For_Write>

080a3c8c <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a3c8c:	7c00      	ldrb	r0, [r0, #16]
 80a3c8e:	f7ff bcf1 	b.w	80a3674 <HAL_USB_USART_Available_Data>

080a3c92 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a3c92:	b538      	push	{r3, r4, r5, lr}
 80a3c94:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3c96:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a3c98:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3c9a:	f7ff fcf3 	bl	80a3684 <HAL_USB_USART_Available_Data_For_Write>
 80a3c9e:	2800      	cmp	r0, #0
 80a3ca0:	dc01      	bgt.n	80a3ca6 <_ZN9USBSerial5writeEh+0x14>
 80a3ca2:	7c60      	ldrb	r0, [r4, #17]
 80a3ca4:	b120      	cbz	r0, 80a3cb0 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a3ca6:	4629      	mov	r1, r5
 80a3ca8:	7c20      	ldrb	r0, [r4, #16]
 80a3caa:	f7ff fcfb 	bl	80a36a4 <HAL_USB_USART_Send_Data>
    return 1;
 80a3cae:	2001      	movs	r0, #1
  }
  return 0;
}
 80a3cb0:	bd38      	pop	{r3, r4, r5, pc}

080a3cb2 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a3cb2:	7c00      	ldrb	r0, [r0, #16]
 80a3cb4:	f7ff bcfe 	b.w	80a36b4 <HAL_USB_USART_Flush_Data>

080a3cb8 <_ZN9USBSerialD0Ev>:
 80a3cb8:	b510      	push	{r4, lr}
 80a3cba:	4604      	mov	r4, r0
 80a3cbc:	f7fc f9ef 	bl	80a009e <_ZdlPv>
 80a3cc0:	4620      	mov	r0, r4
 80a3cc2:	bd10      	pop	{r4, pc}

080a3cc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3cc4:	b510      	push	{r4, lr}
 80a3cc6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a3cc8:	2300      	movs	r3, #0
 80a3cca:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3ccc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3cd0:	60a3      	str	r3, [r4, #8]
 80a3cd2:	4b05      	ldr	r3, [pc, #20]	; (80a3ce8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a3cd4:	4608      	mov	r0, r1
 80a3cd6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a3cd8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a3cda:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a3cdc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a3cde:	4611      	mov	r1, r2
 80a3ce0:	f7ff fcb8 	bl	80a3654 <HAL_USB_USART_Init>
}
 80a3ce4:	4620      	mov	r0, r4
 80a3ce6:	bd10      	pop	{r4, pc}
 80a3ce8:	080a5648 	.word	0x080a5648

080a3cec <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a3cec:	2200      	movs	r2, #0
 80a3cee:	7c00      	ldrb	r0, [r0, #16]
 80a3cf0:	f7ff bcb8 	b.w	80a3664 <HAL_USB_USART_Begin>

080a3cf4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a3cf4:	b510      	push	{r4, lr}
 80a3cf6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3cf8:	2214      	movs	r2, #20
 80a3cfa:	2100      	movs	r1, #0
 80a3cfc:	f001 fb3b 	bl	80a5376 <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3d00:	4b05      	ldr	r3, [pc, #20]	; (80a3d18 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3d02:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3d04:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a3d06:	4b05      	ldr	r3, [pc, #20]	; (80a3d1c <_Z19acquireSerialBufferv+0x28>)
 80a3d08:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3d0a:	f240 1301 	movw	r3, #257	; 0x101
 80a3d0e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3d10:	2381      	movs	r3, #129	; 0x81
 80a3d12:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3d14:	bd10      	pop	{r4, pc}
 80a3d16:	bf00      	nop
 80a3d18:	200004a5 	.word	0x200004a5
 80a3d1c:	20000424 	.word	0x20000424

080a3d20 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a3d20:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3d22:	4d0e      	ldr	r5, [pc, #56]	; (80a3d5c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a3d24:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a3d26:	a801      	add	r0, sp, #4
 80a3d28:	f7ff ffe4 	bl	80a3cf4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3d2c:	6829      	ldr	r1, [r5, #0]
 80a3d2e:	f011 0401 	ands.w	r4, r1, #1
 80a3d32:	d110      	bne.n	80a3d56 <_Z16_fetch_usbserialv+0x36>
 80a3d34:	4628      	mov	r0, r5
 80a3d36:	f7fc f9b4 	bl	80a00a2 <__cxa_guard_acquire>
 80a3d3a:	b160      	cbz	r0, 80a3d56 <_Z16_fetch_usbserialv+0x36>
 80a3d3c:	aa01      	add	r2, sp, #4
 80a3d3e:	4621      	mov	r1, r4
 80a3d40:	4807      	ldr	r0, [pc, #28]	; (80a3d60 <_Z16_fetch_usbserialv+0x40>)
 80a3d42:	f7ff ffbf 	bl	80a3cc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3d46:	4628      	mov	r0, r5
 80a3d48:	f7fc f9b0 	bl	80a00ac <__cxa_guard_release>
 80a3d4c:	4a05      	ldr	r2, [pc, #20]	; (80a3d64 <_Z16_fetch_usbserialv+0x44>)
 80a3d4e:	4906      	ldr	r1, [pc, #24]	; (80a3d68 <_Z16_fetch_usbserialv+0x48>)
 80a3d50:	4803      	ldr	r0, [pc, #12]	; (80a3d60 <_Z16_fetch_usbserialv+0x40>)
 80a3d52:	f000 fa13 	bl	80a417c <__aeabi_atexit>
	return _usbserial;
}
 80a3d56:	4802      	ldr	r0, [pc, #8]	; (80a3d60 <_Z16_fetch_usbserialv+0x40>)
 80a3d58:	b007      	add	sp, #28
 80a3d5a:	bd30      	pop	{r4, r5, pc}
 80a3d5c:	20000420 	.word	0x20000420
 80a3d60:	200005a8 	.word	0x200005a8
 80a3d64:	20000334 	.word	0x20000334
 80a3d68:	080a3c75 	.word	0x080a3c75

080a3d6c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a3d6c:	b510      	push	{r4, lr}
 80a3d6e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3d70:	2214      	movs	r2, #20
 80a3d72:	2100      	movs	r1, #0
 80a3d74:	f001 faff 	bl	80a5376 <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3d78:	4b05      	ldr	r3, [pc, #20]	; (80a3d90 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3d7a:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3d7c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a3d7e:	4b05      	ldr	r3, [pc, #20]	; (80a3d94 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a3d80:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3d82:	f240 1301 	movw	r3, #257	; 0x101
 80a3d86:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3d88:	2381      	movs	r3, #129	; 0x81
 80a3d8a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3d8c:	bd10      	pop	{r4, pc}
 80a3d8e:	bf00      	nop
 80a3d90:	20000658 	.word	0x20000658
 80a3d94:	200005c0 	.word	0x200005c0

080a3d98 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3d98:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3d9a:	4c0e      	ldr	r4, [pc, #56]	; (80a3dd4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a3d9c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a3d9e:	a801      	add	r0, sp, #4
 80a3da0:	f7ff ffe4 	bl	80a3d6c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3da4:	6823      	ldr	r3, [r4, #0]
 80a3da6:	07db      	lsls	r3, r3, #31
 80a3da8:	d410      	bmi.n	80a3dcc <_Z17_fetch_usbserial1v+0x34>
 80a3daa:	4620      	mov	r0, r4
 80a3dac:	f7fc f979 	bl	80a00a2 <__cxa_guard_acquire>
 80a3db0:	b160      	cbz	r0, 80a3dcc <_Z17_fetch_usbserial1v+0x34>
 80a3db2:	aa01      	add	r2, sp, #4
 80a3db4:	2101      	movs	r1, #1
 80a3db6:	4808      	ldr	r0, [pc, #32]	; (80a3dd8 <_Z17_fetch_usbserial1v+0x40>)
 80a3db8:	f7ff ff84 	bl	80a3cc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3dbc:	4620      	mov	r0, r4
 80a3dbe:	f7fc f975 	bl	80a00ac <__cxa_guard_release>
 80a3dc2:	4a06      	ldr	r2, [pc, #24]	; (80a3ddc <_Z17_fetch_usbserial1v+0x44>)
 80a3dc4:	4906      	ldr	r1, [pc, #24]	; (80a3de0 <_Z17_fetch_usbserial1v+0x48>)
 80a3dc6:	4804      	ldr	r0, [pc, #16]	; (80a3dd8 <_Z17_fetch_usbserial1v+0x40>)
 80a3dc8:	f000 f9d8 	bl	80a417c <__aeabi_atexit>
  return _usbserial1;
}
 80a3dcc:	4802      	ldr	r0, [pc, #8]	; (80a3dd8 <_Z17_fetch_usbserial1v+0x40>)
 80a3dce:	b006      	add	sp, #24
 80a3dd0:	bd10      	pop	{r4, pc}
 80a3dd2:	bf00      	nop
 80a3dd4:	200005bc 	.word	0x200005bc
 80a3dd8:	20000644 	.word	0x20000644
 80a3ddc:	20000334 	.word	0x20000334
 80a3de0:	080a3c75 	.word	0x080a3c75

080a3de4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a3de4:	4700      	bx	r0
	...

080a3de8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a3de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3dea:	461c      	mov	r4, r3
 80a3dec:	b085      	sub	sp, #20
 80a3dee:	4605      	mov	r5, r0
 80a3df0:	460e      	mov	r6, r1
 80a3df2:	4617      	mov	r7, r2
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a3df4:	f7ff fb24 	bl	80a3440 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80a3df8:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80a3dfa:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a3dfc:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a3e00:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a3e02:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a3e06:	bfb4      	ite	lt
 80a3e08:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a3e0a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a3e0e:	4628      	mov	r0, r5
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a3e10:	bfa4      	itt	ge
 80a3e12:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a3e16:	ab03      	addge	r3, sp, #12
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a3e18:	9300      	str	r3, [sp, #0]
 80a3e1a:	4632      	mov	r2, r6
 80a3e1c:	463b      	mov	r3, r7
 80a3e1e:	4904      	ldr	r1, [pc, #16]	; (80a3e30 <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a3e20:	bfa8      	it	ge
 80a3e22:	f88d 400d 	strbge.w	r4, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a3e26:	f7ff fb03 	bl	80a3430 <HAL_Interrupts_Attach>
    return true;
}
 80a3e2a:	2001      	movs	r0, #1
 80a3e2c:	b005      	add	sp, #20
 80a3e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3e30:	080a3de5 	.word	0x080a3de5

080a3e34 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a3e34:	4770      	bx	lr

080a3e36 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3e36:	7441      	strb	r1, [r0, #17]
 80a3e38:	4770      	bx	lr

080a3e3a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a3e3a:	7c00      	ldrb	r0, [r0, #16]
 80a3e3c:	f7ff bb88 	b.w	80a3550 <HAL_USART_Available_Data_For_Write>

080a3e40 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a3e40:	7c00      	ldrb	r0, [r0, #16]
 80a3e42:	f7ff bb5d 	b.w	80a3500 <HAL_USART_Available_Data>

080a3e46 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a3e46:	7c00      	ldrb	r0, [r0, #16]
 80a3e48:	f7ff bb6a 	b.w	80a3520 <HAL_USART_Peek_Data>

080a3e4c <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a3e4c:	7c00      	ldrb	r0, [r0, #16]
 80a3e4e:	f7ff bb5f 	b.w	80a3510 <HAL_USART_Read_Data>

080a3e52 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a3e52:	7c00      	ldrb	r0, [r0, #16]
 80a3e54:	f7ff bb6c 	b.w	80a3530 <HAL_USART_Flush_Data>

080a3e58 <_ZN11USARTSerialD0Ev>:
 80a3e58:	b510      	push	{r4, lr}
 80a3e5a:	4604      	mov	r4, r0
 80a3e5c:	f7fc f91f 	bl	80a009e <_ZdlPv>
 80a3e60:	4620      	mov	r0, r4
 80a3e62:	bd10      	pop	{r4, pc}

080a3e64 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3e64:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3e66:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a3e68:	4604      	mov	r4, r0
 80a3e6a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3e6c:	b925      	cbnz	r5, 80a3e78 <_ZN11USARTSerial5writeEh+0x14>
 80a3e6e:	7c00      	ldrb	r0, [r0, #16]
 80a3e70:	f7ff fb6e 	bl	80a3550 <HAL_USART_Available_Data_For_Write>
 80a3e74:	2800      	cmp	r0, #0
 80a3e76:	dd05      	ble.n	80a3e84 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3e78:	4631      	mov	r1, r6
 80a3e7a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a3e7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3e80:	f7ff bb36 	b.w	80a34f0 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a3e84:	4628      	mov	r0, r5
 80a3e86:	bd70      	pop	{r4, r5, r6, pc}

080a3e88 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3e88:	b510      	push	{r4, lr}
 80a3e8a:	4604      	mov	r4, r0
 80a3e8c:	4608      	mov	r0, r1
 80a3e8e:	4611      	mov	r1, r2
 80a3e90:	2200      	movs	r2, #0
 80a3e92:	6062      	str	r2, [r4, #4]
 80a3e94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3e98:	60a2      	str	r2, [r4, #8]
 80a3e9a:	4a05      	ldr	r2, [pc, #20]	; (80a3eb0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a3e9c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3e9e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a3ea0:	2201      	movs	r2, #1
 80a3ea2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a3ea4:	461a      	mov	r2, r3
 80a3ea6:	f7ff fb1b 	bl	80a34e0 <HAL_USART_Init>
}
 80a3eaa:	4620      	mov	r0, r4
 80a3eac:	bd10      	pop	{r4, pc}
 80a3eae:	bf00      	nop
 80a3eb0:	080a5678 	.word	0x080a5678

080a3eb4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a3eb4:	7c00      	ldrb	r0, [r0, #16]
 80a3eb6:	f7ff bb43 	b.w	80a3540 <HAL_USART_Is_Enabled>
	...

080a3ebc <_Z22__fetch_global_Serial1v>:
// Preinstantiate Objects //////////////////////////////////////////////////////
static Ring_Buffer serial1_rx_buffer;
static Ring_Buffer serial1_tx_buffer;

USARTSerial& __fetch_global_Serial1()
{
 80a3ebc:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a3ebe:	4d0c      	ldr	r5, [pc, #48]	; (80a3ef0 <_Z22__fetch_global_Serial1v+0x34>)
 80a3ec0:	6829      	ldr	r1, [r5, #0]
 80a3ec2:	f011 0401 	ands.w	r4, r1, #1
 80a3ec6:	d111      	bne.n	80a3eec <_Z22__fetch_global_Serial1v+0x30>
 80a3ec8:	4628      	mov	r0, r5
 80a3eca:	f7fc f8ea 	bl	80a00a2 <__cxa_guard_acquire>
 80a3ece:	b168      	cbz	r0, 80a3eec <_Z22__fetch_global_Serial1v+0x30>
 80a3ed0:	4a08      	ldr	r2, [pc, #32]	; (80a3ef4 <_Z22__fetch_global_Serial1v+0x38>)
 80a3ed2:	4621      	mov	r1, r4
 80a3ed4:	4b08      	ldr	r3, [pc, #32]	; (80a3ef8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a3ed6:	4809      	ldr	r0, [pc, #36]	; (80a3efc <_Z22__fetch_global_Serial1v+0x40>)
 80a3ed8:	f7ff ffd6 	bl	80a3e88 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a3edc:	4628      	mov	r0, r5
 80a3ede:	f7fc f8e5 	bl	80a00ac <__cxa_guard_release>
 80a3ee2:	4a07      	ldr	r2, [pc, #28]	; (80a3f00 <_Z22__fetch_global_Serial1v+0x44>)
 80a3ee4:	4907      	ldr	r1, [pc, #28]	; (80a3f04 <_Z22__fetch_global_Serial1v+0x48>)
 80a3ee6:	4805      	ldr	r0, [pc, #20]	; (80a3efc <_Z22__fetch_global_Serial1v+0x40>)
 80a3ee8:	f000 f948 	bl	80a417c <__aeabi_atexit>
	return serial1;
}
 80a3eec:	4803      	ldr	r0, [pc, #12]	; (80a3efc <_Z22__fetch_global_Serial1v+0x40>)
 80a3eee:	bd38      	pop	{r3, r4, r5, pc}
 80a3ef0:	200007f4 	.word	0x200007f4
 80a3ef4:	200007f8 	.word	0x200007f8
 80a3ef8:	20000770 	.word	0x20000770
 80a3efc:	2000075c 	.word	0x2000075c
 80a3f00:	20000334 	.word	0x20000334
 80a3f04:	080a3e35 	.word	0x080a3e35

080a3f08 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a3f08:	4770      	bx	lr

080a3f0a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a3f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3f0c:	4606      	mov	r6, r0
 80a3f0e:	4615      	mov	r5, r2
 80a3f10:	460c      	mov	r4, r1
 80a3f12:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3f14:	42bc      	cmp	r4, r7
 80a3f16:	d006      	beq.n	80a3f26 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a3f18:	6833      	ldr	r3, [r6, #0]
 80a3f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a3f1e:	689b      	ldr	r3, [r3, #8]
 80a3f20:	4630      	mov	r0, r6
 80a3f22:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3f24:	e7f6      	b.n	80a3f14 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a3f26:	4628      	mov	r0, r5
 80a3f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3f2a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a3f2a:	2200      	movs	r2, #0
 80a3f2c:	7c00      	ldrb	r0, [r0, #16]
 80a3f2e:	f7ff bb3f 	b.w	80a35b0 <HAL_I2C_Write_Data>

080a3f32 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a3f32:	2100      	movs	r1, #0
 80a3f34:	7c00      	ldrb	r0, [r0, #16]
 80a3f36:	f7ff bb43 	b.w	80a35c0 <HAL_I2C_Available_Data>

080a3f3a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a3f3a:	2100      	movs	r1, #0
 80a3f3c:	7c00      	ldrb	r0, [r0, #16]
 80a3f3e:	f7ff bb47 	b.w	80a35d0 <HAL_I2C_Read_Data>

080a3f42 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a3f42:	2100      	movs	r1, #0
 80a3f44:	7c00      	ldrb	r0, [r0, #16]
 80a3f46:	f7ff bb4b 	b.w	80a35e0 <HAL_I2C_Peek_Data>

080a3f4a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a3f4a:	2100      	movs	r1, #0
 80a3f4c:	7c00      	ldrb	r0, [r0, #16]
 80a3f4e:	f7ff bb4f 	b.w	80a35f0 <HAL_I2C_Flush_Data>

080a3f52 <_ZN7TwoWireD0Ev>:
 80a3f52:	b510      	push	{r4, lr}
 80a3f54:	4604      	mov	r4, r0
 80a3f56:	f7fc f8a2 	bl	80a009e <_ZdlPv>
 80a3f5a:	4620      	mov	r0, r4
 80a3f5c:	bd10      	pop	{r4, pc}
	...

080a3f60 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a3f60:	b510      	push	{r4, lr}
 80a3f62:	4604      	mov	r4, r0
 80a3f64:	4608      	mov	r0, r1
 80a3f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3f6a:	60a3      	str	r3, [r4, #8]
 80a3f6c:	4b04      	ldr	r3, [pc, #16]	; (80a3f80 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a3f6e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a3f70:	7420      	strb	r0, [r4, #16]
 80a3f72:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a3f74:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a3f76:	f7ff fb4b 	bl	80a3610 <HAL_I2C_Init>

}
 80a3f7a:	4620      	mov	r0, r4
 80a3f7c:	bd10      	pop	{r4, pc}
 80a3f7e:	bf00      	nop
 80a3f80:	080a56a8 	.word	0x080a56a8

080a3f84 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a3f84:	2200      	movs	r2, #0
 80a3f86:	7c00      	ldrb	r0, [r0, #16]
 80a3f88:	f7ff baea 	b.w	80a3560 <HAL_I2C_Set_Speed>

080a3f8c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a3f8c:	2300      	movs	r3, #0
 80a3f8e:	461a      	mov	r2, r3
 80a3f90:	4619      	mov	r1, r3
 80a3f92:	7c00      	ldrb	r0, [r0, #16]
 80a3f94:	f7ff baec 	b.w	80a3570 <HAL_I2C_Begin>

080a3f98 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a3f98:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a3f9a:	2400      	movs	r4, #0
 80a3f9c:	7c00      	ldrb	r0, [r0, #16]
 80a3f9e:	9400      	str	r4, [sp, #0]
 80a3fa0:	f7ff faee 	bl	80a3580 <HAL_I2C_Request_Data>
  return result;
}
 80a3fa4:	b2c0      	uxtb	r0, r0
 80a3fa6:	b002      	add	sp, #8
 80a3fa8:	bd10      	pop	{r4, pc}

080a3faa <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a3faa:	2301      	movs	r3, #1
 80a3fac:	f7ff bff4 	b.w	80a3f98 <_ZN7TwoWire11requestFromEhhh>

080a3fb0 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a3fb0:	2301      	movs	r3, #1
 80a3fb2:	b2d2      	uxtb	r2, r2
 80a3fb4:	b2c9      	uxtb	r1, r1
 80a3fb6:	f7ff bfef 	b.w	80a3f98 <_ZN7TwoWire11requestFromEhhh>

080a3fba <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a3fba:	2200      	movs	r2, #0
 80a3fbc:	7c00      	ldrb	r0, [r0, #16]
 80a3fbe:	f7ff bae7 	b.w	80a3590 <HAL_I2C_Begin_Transmission>

080a3fc2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a3fc2:	2200      	movs	r2, #0
 80a3fc4:	7c00      	ldrb	r0, [r0, #16]
 80a3fc6:	f7ff baeb 	b.w	80a35a0 <HAL_I2C_End_Transmission>

080a3fca <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a3fca:	2101      	movs	r1, #1
 80a3fcc:	f7ff bff9 	b.w	80a3fc2 <_ZN7TwoWire15endTransmissionEh>

080a3fd0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a3fd0:	2100      	movs	r1, #0
 80a3fd2:	7c00      	ldrb	r0, [r0, #16]
 80a3fd4:	f7ff bb14 	b.w	80a3600 <HAL_I2C_Is_Enabled>

080a3fd8 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a3fd8:	4770      	bx	lr

080a3fda <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a3fda:	2200      	movs	r2, #0
 80a3fdc:	4611      	mov	r1, r2
 80a3fde:	4610      	mov	r0, r2
 80a3fe0:	f7ff bbc0 	b.w	80a3764 <network_ready>

080a3fe4 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a3fe4:	4803      	ldr	r0, [pc, #12]	; (80a3ff4 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a3fe6:	4b04      	ldr	r3, [pc, #16]	; (80a3ff8 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a3fe8:	4a04      	ldr	r2, [pc, #16]	; (80a3ffc <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a3fea:	4905      	ldr	r1, [pc, #20]	; (80a4000 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a3fec:	6003      	str	r3, [r0, #0]
 80a3fee:	f000 b8c5 	b.w	80a417c <__aeabi_atexit>
 80a3ff2:	bf00      	nop
 80a3ff4:	2000087c 	.word	0x2000087c
 80a3ff8:	080a56d0 	.word	0x080a56d0
 80a3ffc:	20000334 	.word	0x20000334
 80a4000:	080a3fd9 	.word	0x080a3fd9

080a4004 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a4004:	b510      	push	{r4, lr}
 80a4006:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a4008:	480f      	ldr	r0, [pc, #60]	; (80a4048 <pinAvailable+0x44>)
 80a400a:	f7ff fbe7 	bl	80a37dc <_ZN8SPIClass9isEnabledEv>
 80a400e:	b128      	cbz	r0, 80a401c <pinAvailable+0x18>
 80a4010:	f1a4 030d 	sub.w	r3, r4, #13
 80a4014:	2b02      	cmp	r3, #2
 80a4016:	d801      	bhi.n	80a401c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a4018:	2000      	movs	r0, #0
 80a401a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a401c:	f000 f88e 	bl	80a413c <_Z19__fetch_global_Wirev>
 80a4020:	f7ff ffd6 	bl	80a3fd0 <_ZN7TwoWire9isEnabledEv>
 80a4024:	b108      	cbz	r0, 80a402a <pinAvailable+0x26>
 80a4026:	2c01      	cmp	r4, #1
 80a4028:	d9f6      	bls.n	80a4018 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a402a:	f7ff ff47 	bl	80a3ebc <_Z22__fetch_global_Serial1v>
 80a402e:	f7ff ff41 	bl	80a3eb4 <_ZN11USARTSerial9isEnabledEv>
 80a4032:	b118      	cbz	r0, 80a403c <pinAvailable+0x38>
 80a4034:	f1a4 0312 	sub.w	r3, r4, #18
 80a4038:	2b01      	cmp	r3, #1
 80a403a:	d9ed      	bls.n	80a4018 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a403c:	2c17      	cmp	r4, #23
 80a403e:	bf8c      	ite	hi
 80a4040:	2000      	movhi	r0, #0
 80a4042:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a4044:	bd10      	pop	{r4, pc}
 80a4046:	bf00      	nop
 80a4048:	20000880 	.word	0x20000880

080a404c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a404c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a404e:	b538      	push	{r3, r4, r5, lr}
 80a4050:	4604      	mov	r4, r0
 80a4052:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a4054:	d80a      	bhi.n	80a406c <pinMode+0x20>
 80a4056:	29ff      	cmp	r1, #255	; 0xff
 80a4058:	d008      	beq.n	80a406c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a405a:	f7ff ffd3 	bl	80a4004 <pinAvailable>
 80a405e:	b128      	cbz	r0, 80a406c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a4060:	4629      	mov	r1, r5
 80a4062:	4620      	mov	r0, r4
}
 80a4064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a4068:	f7ff b9c2 	b.w	80a33f0 <HAL_Pin_Mode>
 80a406c:	bd38      	pop	{r3, r4, r5, pc}

080a406e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a406e:	b538      	push	{r3, r4, r5, lr}
 80a4070:	4604      	mov	r4, r0
 80a4072:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a4074:	f7ff f9c4 	bl	80a3400 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a4078:	28ff      	cmp	r0, #255	; 0xff
 80a407a:	d010      	beq.n	80a409e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a407c:	2806      	cmp	r0, #6
 80a407e:	d804      	bhi.n	80a408a <digitalWrite+0x1c>
 80a4080:	234d      	movs	r3, #77	; 0x4d
 80a4082:	fa23 f000 	lsr.w	r0, r3, r0
 80a4086:	07c3      	lsls	r3, r0, #31
 80a4088:	d409      	bmi.n	80a409e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a408a:	4620      	mov	r0, r4
 80a408c:	f7ff ffba 	bl	80a4004 <pinAvailable>
 80a4090:	b128      	cbz	r0, 80a409e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a4092:	4629      	mov	r1, r5
 80a4094:	4620      	mov	r0, r4
}
 80a4096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a409a:	f7ff b9b9 	b.w	80a3410 <HAL_GPIO_Write>
 80a409e:	bd38      	pop	{r3, r4, r5, pc}

080a40a0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a40a0:	b510      	push	{r4, lr}
 80a40a2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a40a4:	f7ff f9ac 	bl	80a3400 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a40a8:	3804      	subs	r0, #4
 80a40aa:	b2c0      	uxtb	r0, r0
 80a40ac:	2801      	cmp	r0, #1
 80a40ae:	d908      	bls.n	80a40c2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a40b0:	4620      	mov	r0, r4
 80a40b2:	f7ff ffa7 	bl	80a4004 <pinAvailable>
 80a40b6:	b120      	cbz	r0, 80a40c2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a40b8:	4620      	mov	r0, r4
}
 80a40ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a40be:	f7ff b9af 	b.w	80a3420 <HAL_GPIO_Read>
}
 80a40c2:	2000      	movs	r0, #0
 80a40c4:	bd10      	pop	{r4, pc}
	...

080a40c8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a40c8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a40ca:	4c0c      	ldr	r4, [pc, #48]	; (80a40fc <_GLOBAL__sub_I_SPI+0x34>)
 80a40cc:	4e0c      	ldr	r6, [pc, #48]	; (80a4100 <_GLOBAL__sub_I_SPI+0x38>)
 80a40ce:	4d0d      	ldr	r5, [pc, #52]	; (80a4104 <_GLOBAL__sub_I_SPI+0x3c>)
 80a40d0:	2100      	movs	r1, #0
 80a40d2:	4620      	mov	r0, r4
 80a40d4:	f7ff fb6e 	bl	80a37b4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a40d8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a40da:	4c0b      	ldr	r4, [pc, #44]	; (80a4108 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a40dc:	4632      	mov	r2, r6
 80a40de:	4629      	mov	r1, r5
 80a40e0:	f000 f84c 	bl	80a417c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a40e4:	2101      	movs	r1, #1
 80a40e6:	4620      	mov	r0, r4
 80a40e8:	f7ff fb64 	bl	80a37b4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a40ec:	4632      	mov	r2, r6
 80a40ee:	4629      	mov	r1, r5
 80a40f0:	4620      	mov	r0, r4
 80a40f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a40f6:	f000 b841 	b.w	80a417c <__aeabi_atexit>
 80a40fa:	bf00      	nop
 80a40fc:	20000880 	.word	0x20000880
 80a4100:	20000334 	.word	0x20000334
 80a4104:	080a37a5 	.word	0x080a37a5
 80a4108:	20000890 	.word	0x20000890

080a410c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a410c:	b513      	push	{r0, r1, r4, lr}
 80a410e:	4c08      	ldr	r4, [pc, #32]	; (80a4130 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a4110:	2300      	movs	r3, #0
 80a4112:	461a      	mov	r2, r3
 80a4114:	4619      	mov	r1, r3
 80a4116:	9300      	str	r3, [sp, #0]
 80a4118:	4620      	mov	r0, r4
 80a411a:	f7ff fd9d 	bl	80a3c58 <_ZN9IPAddressC1Ehhhh>
 80a411e:	4620      	mov	r0, r4
 80a4120:	4a04      	ldr	r2, [pc, #16]	; (80a4134 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a4122:	4905      	ldr	r1, [pc, #20]	; (80a4138 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a4124:	b002      	add	sp, #8
 80a4126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a412a:	f000 b827 	b.w	80a417c <__aeabi_atexit>
 80a412e:	bf00      	nop
 80a4130:	200008a4 	.word	0x200008a4
 80a4134:	20000334 	.word	0x20000334
 80a4138:	080a3bfd 	.word	0x080a3bfd

080a413c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a413c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a413e:	4d0b      	ldr	r5, [pc, #44]	; (80a416c <_Z19__fetch_global_Wirev+0x30>)
 80a4140:	6829      	ldr	r1, [r5, #0]
 80a4142:	f011 0401 	ands.w	r4, r1, #1
 80a4146:	d10f      	bne.n	80a4168 <_Z19__fetch_global_Wirev+0x2c>
 80a4148:	4628      	mov	r0, r5
 80a414a:	f7fb ffaa 	bl	80a00a2 <__cxa_guard_acquire>
 80a414e:	b158      	cbz	r0, 80a4168 <_Z19__fetch_global_Wirev+0x2c>
 80a4150:	4621      	mov	r1, r4
 80a4152:	4807      	ldr	r0, [pc, #28]	; (80a4170 <_Z19__fetch_global_Wirev+0x34>)
 80a4154:	f7ff ff04 	bl	80a3f60 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a4158:	4628      	mov	r0, r5
 80a415a:	f7fb ffa7 	bl	80a00ac <__cxa_guard_release>
 80a415e:	4a05      	ldr	r2, [pc, #20]	; (80a4174 <_Z19__fetch_global_Wirev+0x38>)
 80a4160:	4905      	ldr	r1, [pc, #20]	; (80a4178 <_Z19__fetch_global_Wirev+0x3c>)
 80a4162:	4803      	ldr	r0, [pc, #12]	; (80a4170 <_Z19__fetch_global_Wirev+0x34>)
 80a4164:	f000 f80a 	bl	80a417c <__aeabi_atexit>
	return wire;
}
 80a4168:	4801      	ldr	r0, [pc, #4]	; (80a4170 <_Z19__fetch_global_Wirev+0x34>)
 80a416a:	bd38      	pop	{r3, r4, r5, pc}
 80a416c:	200008bc 	.word	0x200008bc
 80a4170:	200008c0 	.word	0x200008c0
 80a4174:	20000334 	.word	0x20000334
 80a4178:	080a3f09 	.word	0x080a3f09

080a417c <__aeabi_atexit>:
 80a417c:	460b      	mov	r3, r1
 80a417e:	4601      	mov	r1, r0
 80a4180:	4618      	mov	r0, r3
 80a4182:	f001 b8df 	b.w	80a5344 <__cxa_atexit>
	...

080a4188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a4188:	4b18      	ldr	r3, [pc, #96]	; (80a41ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a418a:	681a      	ldr	r2, [r3, #0]
 80a418c:	07d1      	lsls	r1, r2, #31
 80a418e:	bf5c      	itt	pl
 80a4190:	2201      	movpl	r2, #1
 80a4192:	601a      	strpl	r2, [r3, #0]
 80a4194:	4b16      	ldr	r3, [pc, #88]	; (80a41f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a4196:	681a      	ldr	r2, [r3, #0]
 80a4198:	07d2      	lsls	r2, r2, #31
 80a419a:	bf5c      	itt	pl
 80a419c:	2201      	movpl	r2, #1
 80a419e:	601a      	strpl	r2, [r3, #0]
 80a41a0:	4b14      	ldr	r3, [pc, #80]	; (80a41f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a41a2:	681a      	ldr	r2, [r3, #0]
 80a41a4:	07d0      	lsls	r0, r2, #31
 80a41a6:	bf5c      	itt	pl
 80a41a8:	2201      	movpl	r2, #1
 80a41aa:	601a      	strpl	r2, [r3, #0]
 80a41ac:	4b12      	ldr	r3, [pc, #72]	; (80a41f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a41ae:	681a      	ldr	r2, [r3, #0]
 80a41b0:	07d1      	lsls	r1, r2, #31
 80a41b2:	bf5c      	itt	pl
 80a41b4:	2201      	movpl	r2, #1
 80a41b6:	601a      	strpl	r2, [r3, #0]
 80a41b8:	4b10      	ldr	r3, [pc, #64]	; (80a41fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a41ba:	681a      	ldr	r2, [r3, #0]
 80a41bc:	07d2      	lsls	r2, r2, #31
 80a41be:	bf5c      	itt	pl
 80a41c0:	2201      	movpl	r2, #1
 80a41c2:	601a      	strpl	r2, [r3, #0]
 80a41c4:	4b0e      	ldr	r3, [pc, #56]	; (80a4200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a41c6:	681a      	ldr	r2, [r3, #0]
 80a41c8:	07d0      	lsls	r0, r2, #31
 80a41ca:	bf5c      	itt	pl
 80a41cc:	2201      	movpl	r2, #1
 80a41ce:	601a      	strpl	r2, [r3, #0]
 80a41d0:	4b0c      	ldr	r3, [pc, #48]	; (80a4204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a41d2:	681a      	ldr	r2, [r3, #0]
 80a41d4:	07d1      	lsls	r1, r2, #31
 80a41d6:	bf5c      	itt	pl
 80a41d8:	2201      	movpl	r2, #1
 80a41da:	601a      	strpl	r2, [r3, #0]
 80a41dc:	4b0a      	ldr	r3, [pc, #40]	; (80a4208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a41de:	681a      	ldr	r2, [r3, #0]
 80a41e0:	07d2      	lsls	r2, r2, #31
 80a41e2:	bf5c      	itt	pl
 80a41e4:	2201      	movpl	r2, #1
 80a41e6:	601a      	strpl	r2, [r3, #0]
 80a41e8:	4770      	bx	lr
 80a41ea:	bf00      	nop
 80a41ec:	200008f0 	.word	0x200008f0
 80a41f0:	200008ec 	.word	0x200008ec
 80a41f4:	200008e8 	.word	0x200008e8
 80a41f8:	200008e4 	.word	0x200008e4
 80a41fc:	200008e0 	.word	0x200008e0
 80a4200:	200008dc 	.word	0x200008dc
 80a4204:	200008d8 	.word	0x200008d8
 80a4208:	200008d4 	.word	0x200008d4

080a420c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a420c:	4b24      	ldr	r3, [pc, #144]	; (80a42a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a420e:	681a      	ldr	r2, [r3, #0]
 80a4210:	07d0      	lsls	r0, r2, #31
 80a4212:	bf5c      	itt	pl
 80a4214:	2201      	movpl	r2, #1
 80a4216:	601a      	strpl	r2, [r3, #0]
 80a4218:	4b22      	ldr	r3, [pc, #136]	; (80a42a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a421a:	681a      	ldr	r2, [r3, #0]
 80a421c:	07d1      	lsls	r1, r2, #31
 80a421e:	bf5c      	itt	pl
 80a4220:	2201      	movpl	r2, #1
 80a4222:	601a      	strpl	r2, [r3, #0]
 80a4224:	4b20      	ldr	r3, [pc, #128]	; (80a42a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a4226:	681a      	ldr	r2, [r3, #0]
 80a4228:	07d2      	lsls	r2, r2, #31
 80a422a:	bf5c      	itt	pl
 80a422c:	2201      	movpl	r2, #1
 80a422e:	601a      	strpl	r2, [r3, #0]
 80a4230:	4b1e      	ldr	r3, [pc, #120]	; (80a42ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a4232:	681a      	ldr	r2, [r3, #0]
 80a4234:	07d0      	lsls	r0, r2, #31
 80a4236:	bf5c      	itt	pl
 80a4238:	2201      	movpl	r2, #1
 80a423a:	601a      	strpl	r2, [r3, #0]
 80a423c:	4b1c      	ldr	r3, [pc, #112]	; (80a42b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a423e:	681a      	ldr	r2, [r3, #0]
 80a4240:	07d1      	lsls	r1, r2, #31
 80a4242:	bf5c      	itt	pl
 80a4244:	2201      	movpl	r2, #1
 80a4246:	601a      	strpl	r2, [r3, #0]
 80a4248:	4b1a      	ldr	r3, [pc, #104]	; (80a42b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a424a:	681a      	ldr	r2, [r3, #0]
 80a424c:	07d2      	lsls	r2, r2, #31
 80a424e:	bf5c      	itt	pl
 80a4250:	2201      	movpl	r2, #1
 80a4252:	601a      	strpl	r2, [r3, #0]
 80a4254:	4b18      	ldr	r3, [pc, #96]	; (80a42b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a4256:	681a      	ldr	r2, [r3, #0]
 80a4258:	07d0      	lsls	r0, r2, #31
 80a425a:	bf5c      	itt	pl
 80a425c:	2201      	movpl	r2, #1
 80a425e:	601a      	strpl	r2, [r3, #0]
 80a4260:	4b16      	ldr	r3, [pc, #88]	; (80a42bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a4262:	681a      	ldr	r2, [r3, #0]
 80a4264:	07d1      	lsls	r1, r2, #31
 80a4266:	bf5c      	itt	pl
 80a4268:	2201      	movpl	r2, #1
 80a426a:	601a      	strpl	r2, [r3, #0]
 80a426c:	4b14      	ldr	r3, [pc, #80]	; (80a42c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a426e:	681a      	ldr	r2, [r3, #0]
 80a4270:	07d2      	lsls	r2, r2, #31
 80a4272:	bf5c      	itt	pl
 80a4274:	2201      	movpl	r2, #1
 80a4276:	601a      	strpl	r2, [r3, #0]
 80a4278:	4b12      	ldr	r3, [pc, #72]	; (80a42c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a427a:	681a      	ldr	r2, [r3, #0]
 80a427c:	07d0      	lsls	r0, r2, #31
 80a427e:	bf5c      	itt	pl
 80a4280:	2201      	movpl	r2, #1
 80a4282:	601a      	strpl	r2, [r3, #0]
 80a4284:	4b10      	ldr	r3, [pc, #64]	; (80a42c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a4286:	681a      	ldr	r2, [r3, #0]
 80a4288:	07d1      	lsls	r1, r2, #31
 80a428a:	bf5c      	itt	pl
 80a428c:	2201      	movpl	r2, #1
 80a428e:	601a      	strpl	r2, [r3, #0]
 80a4290:	4b0e      	ldr	r3, [pc, #56]	; (80a42cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a4292:	681a      	ldr	r2, [r3, #0]
 80a4294:	07d2      	lsls	r2, r2, #31
 80a4296:	bf5c      	itt	pl
 80a4298:	2201      	movpl	r2, #1
 80a429a:	601a      	strpl	r2, [r3, #0]
 80a429c:	4770      	bx	lr
 80a429e:	bf00      	nop
 80a42a0:	20000920 	.word	0x20000920
 80a42a4:	2000091c 	.word	0x2000091c
 80a42a8:	20000918 	.word	0x20000918
 80a42ac:	20000914 	.word	0x20000914
 80a42b0:	20000910 	.word	0x20000910
 80a42b4:	2000090c 	.word	0x2000090c
 80a42b8:	20000908 	.word	0x20000908
 80a42bc:	20000904 	.word	0x20000904
 80a42c0:	20000900 	.word	0x20000900
 80a42c4:	200008fc 	.word	0x200008fc
 80a42c8:	200008f8 	.word	0x200008f8
 80a42cc:	200008f4 	.word	0x200008f4

080a42d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a42d0:	4b24      	ldr	r3, [pc, #144]	; (80a4364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a42d2:	681a      	ldr	r2, [r3, #0]
 80a42d4:	07d0      	lsls	r0, r2, #31
 80a42d6:	bf5c      	itt	pl
 80a42d8:	2201      	movpl	r2, #1
 80a42da:	601a      	strpl	r2, [r3, #0]
 80a42dc:	4b22      	ldr	r3, [pc, #136]	; (80a4368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a42de:	681a      	ldr	r2, [r3, #0]
 80a42e0:	07d1      	lsls	r1, r2, #31
 80a42e2:	bf5c      	itt	pl
 80a42e4:	2201      	movpl	r2, #1
 80a42e6:	601a      	strpl	r2, [r3, #0]
 80a42e8:	4b20      	ldr	r3, [pc, #128]	; (80a436c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a42ea:	681a      	ldr	r2, [r3, #0]
 80a42ec:	07d2      	lsls	r2, r2, #31
 80a42ee:	bf5c      	itt	pl
 80a42f0:	2201      	movpl	r2, #1
 80a42f2:	601a      	strpl	r2, [r3, #0]
 80a42f4:	4b1e      	ldr	r3, [pc, #120]	; (80a4370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a42f6:	681a      	ldr	r2, [r3, #0]
 80a42f8:	07d0      	lsls	r0, r2, #31
 80a42fa:	bf5c      	itt	pl
 80a42fc:	2201      	movpl	r2, #1
 80a42fe:	601a      	strpl	r2, [r3, #0]
 80a4300:	4b1c      	ldr	r3, [pc, #112]	; (80a4374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a4302:	681a      	ldr	r2, [r3, #0]
 80a4304:	07d1      	lsls	r1, r2, #31
 80a4306:	bf5c      	itt	pl
 80a4308:	2201      	movpl	r2, #1
 80a430a:	601a      	strpl	r2, [r3, #0]
 80a430c:	4b1a      	ldr	r3, [pc, #104]	; (80a4378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a430e:	681a      	ldr	r2, [r3, #0]
 80a4310:	07d2      	lsls	r2, r2, #31
 80a4312:	bf5c      	itt	pl
 80a4314:	2201      	movpl	r2, #1
 80a4316:	601a      	strpl	r2, [r3, #0]
 80a4318:	4b18      	ldr	r3, [pc, #96]	; (80a437c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a431a:	681a      	ldr	r2, [r3, #0]
 80a431c:	07d0      	lsls	r0, r2, #31
 80a431e:	bf5c      	itt	pl
 80a4320:	2201      	movpl	r2, #1
 80a4322:	601a      	strpl	r2, [r3, #0]
 80a4324:	4b16      	ldr	r3, [pc, #88]	; (80a4380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a4326:	681a      	ldr	r2, [r3, #0]
 80a4328:	07d1      	lsls	r1, r2, #31
 80a432a:	bf5c      	itt	pl
 80a432c:	2201      	movpl	r2, #1
 80a432e:	601a      	strpl	r2, [r3, #0]
 80a4330:	4b14      	ldr	r3, [pc, #80]	; (80a4384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a4332:	681a      	ldr	r2, [r3, #0]
 80a4334:	07d2      	lsls	r2, r2, #31
 80a4336:	bf5c      	itt	pl
 80a4338:	2201      	movpl	r2, #1
 80a433a:	601a      	strpl	r2, [r3, #0]
 80a433c:	4b12      	ldr	r3, [pc, #72]	; (80a4388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a433e:	681a      	ldr	r2, [r3, #0]
 80a4340:	07d0      	lsls	r0, r2, #31
 80a4342:	bf5c      	itt	pl
 80a4344:	2201      	movpl	r2, #1
 80a4346:	601a      	strpl	r2, [r3, #0]
 80a4348:	4b10      	ldr	r3, [pc, #64]	; (80a438c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a434a:	681a      	ldr	r2, [r3, #0]
 80a434c:	07d1      	lsls	r1, r2, #31
 80a434e:	bf5c      	itt	pl
 80a4350:	2201      	movpl	r2, #1
 80a4352:	601a      	strpl	r2, [r3, #0]
 80a4354:	4b0e      	ldr	r3, [pc, #56]	; (80a4390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a4356:	681a      	ldr	r2, [r3, #0]
 80a4358:	07d2      	lsls	r2, r2, #31
 80a435a:	bf5c      	itt	pl
 80a435c:	2201      	movpl	r2, #1
 80a435e:	601a      	strpl	r2, [r3, #0]
 80a4360:	4770      	bx	lr
 80a4362:	bf00      	nop
 80a4364:	20000950 	.word	0x20000950
 80a4368:	2000094c 	.word	0x2000094c
 80a436c:	20000948 	.word	0x20000948
 80a4370:	20000944 	.word	0x20000944
 80a4374:	20000940 	.word	0x20000940
 80a4378:	2000093c 	.word	0x2000093c
 80a437c:	20000938 	.word	0x20000938
 80a4380:	20000934 	.word	0x20000934
 80a4384:	20000930 	.word	0x20000930
 80a4388:	2000092c 	.word	0x2000092c
 80a438c:	20000928 	.word	0x20000928
 80a4390:	20000924 	.word	0x20000924

080a4394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a4394:	4b18      	ldr	r3, [pc, #96]	; (80a43f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a4396:	681a      	ldr	r2, [r3, #0]
 80a4398:	07d1      	lsls	r1, r2, #31
 80a439a:	bf5c      	itt	pl
 80a439c:	2201      	movpl	r2, #1
 80a439e:	601a      	strpl	r2, [r3, #0]
 80a43a0:	4b16      	ldr	r3, [pc, #88]	; (80a43fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a43a2:	681a      	ldr	r2, [r3, #0]
 80a43a4:	07d2      	lsls	r2, r2, #31
 80a43a6:	bf5c      	itt	pl
 80a43a8:	2201      	movpl	r2, #1
 80a43aa:	601a      	strpl	r2, [r3, #0]
 80a43ac:	4b14      	ldr	r3, [pc, #80]	; (80a4400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a43ae:	681a      	ldr	r2, [r3, #0]
 80a43b0:	07d0      	lsls	r0, r2, #31
 80a43b2:	bf5c      	itt	pl
 80a43b4:	2201      	movpl	r2, #1
 80a43b6:	601a      	strpl	r2, [r3, #0]
 80a43b8:	4b12      	ldr	r3, [pc, #72]	; (80a4404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a43ba:	681a      	ldr	r2, [r3, #0]
 80a43bc:	07d1      	lsls	r1, r2, #31
 80a43be:	bf5c      	itt	pl
 80a43c0:	2201      	movpl	r2, #1
 80a43c2:	601a      	strpl	r2, [r3, #0]
 80a43c4:	4b10      	ldr	r3, [pc, #64]	; (80a4408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a43c6:	681a      	ldr	r2, [r3, #0]
 80a43c8:	07d2      	lsls	r2, r2, #31
 80a43ca:	bf5c      	itt	pl
 80a43cc:	2201      	movpl	r2, #1
 80a43ce:	601a      	strpl	r2, [r3, #0]
 80a43d0:	4b0e      	ldr	r3, [pc, #56]	; (80a440c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a43d2:	681a      	ldr	r2, [r3, #0]
 80a43d4:	07d0      	lsls	r0, r2, #31
 80a43d6:	bf5c      	itt	pl
 80a43d8:	2201      	movpl	r2, #1
 80a43da:	601a      	strpl	r2, [r3, #0]
 80a43dc:	4b0c      	ldr	r3, [pc, #48]	; (80a4410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a43de:	681a      	ldr	r2, [r3, #0]
 80a43e0:	07d1      	lsls	r1, r2, #31
 80a43e2:	bf5c      	itt	pl
 80a43e4:	2201      	movpl	r2, #1
 80a43e6:	601a      	strpl	r2, [r3, #0]
 80a43e8:	4b0a      	ldr	r3, [pc, #40]	; (80a4414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a43ea:	681a      	ldr	r2, [r3, #0]
 80a43ec:	07d2      	lsls	r2, r2, #31
 80a43ee:	bf5c      	itt	pl
 80a43f0:	2201      	movpl	r2, #1
 80a43f2:	601a      	strpl	r2, [r3, #0]
 80a43f4:	4770      	bx	lr
 80a43f6:	bf00      	nop
 80a43f8:	20000970 	.word	0x20000970
 80a43fc:	2000096c 	.word	0x2000096c
 80a4400:	20000968 	.word	0x20000968
 80a4404:	20000964 	.word	0x20000964
 80a4408:	20000960 	.word	0x20000960
 80a440c:	2000095c 	.word	0x2000095c
 80a4410:	20000958 	.word	0x20000958
 80a4414:	20000954 	.word	0x20000954

080a4418 <__aeabi_drsub>:
 80a4418:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a441c:	e002      	b.n	80a4424 <__adddf3>
 80a441e:	bf00      	nop

080a4420 <__aeabi_dsub>:
 80a4420:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a4424 <__adddf3>:
 80a4424:	b530      	push	{r4, r5, lr}
 80a4426:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a442a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a442e:	ea94 0f05 	teq	r4, r5
 80a4432:	bf08      	it	eq
 80a4434:	ea90 0f02 	teqeq	r0, r2
 80a4438:	bf1f      	itttt	ne
 80a443a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a443e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a4442:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a4446:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a444a:	f000 80e2 	beq.w	80a4612 <__adddf3+0x1ee>
 80a444e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a4452:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a4456:	bfb8      	it	lt
 80a4458:	426d      	neglt	r5, r5
 80a445a:	dd0c      	ble.n	80a4476 <__adddf3+0x52>
 80a445c:	442c      	add	r4, r5
 80a445e:	ea80 0202 	eor.w	r2, r0, r2
 80a4462:	ea81 0303 	eor.w	r3, r1, r3
 80a4466:	ea82 0000 	eor.w	r0, r2, r0
 80a446a:	ea83 0101 	eor.w	r1, r3, r1
 80a446e:	ea80 0202 	eor.w	r2, r0, r2
 80a4472:	ea81 0303 	eor.w	r3, r1, r3
 80a4476:	2d36      	cmp	r5, #54	; 0x36
 80a4478:	bf88      	it	hi
 80a447a:	bd30      	pophi	{r4, r5, pc}
 80a447c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4480:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4484:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a4488:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a448c:	d002      	beq.n	80a4494 <__adddf3+0x70>
 80a448e:	4240      	negs	r0, r0
 80a4490:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4494:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a4498:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a449c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a44a0:	d002      	beq.n	80a44a8 <__adddf3+0x84>
 80a44a2:	4252      	negs	r2, r2
 80a44a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a44a8:	ea94 0f05 	teq	r4, r5
 80a44ac:	f000 80a7 	beq.w	80a45fe <__adddf3+0x1da>
 80a44b0:	f1a4 0401 	sub.w	r4, r4, #1
 80a44b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80a44b8:	db0d      	blt.n	80a44d6 <__adddf3+0xb2>
 80a44ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a44be:	fa22 f205 	lsr.w	r2, r2, r5
 80a44c2:	1880      	adds	r0, r0, r2
 80a44c4:	f141 0100 	adc.w	r1, r1, #0
 80a44c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80a44cc:	1880      	adds	r0, r0, r2
 80a44ce:	fa43 f305 	asr.w	r3, r3, r5
 80a44d2:	4159      	adcs	r1, r3
 80a44d4:	e00e      	b.n	80a44f4 <__adddf3+0xd0>
 80a44d6:	f1a5 0520 	sub.w	r5, r5, #32
 80a44da:	f10e 0e20 	add.w	lr, lr, #32
 80a44de:	2a01      	cmp	r2, #1
 80a44e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a44e4:	bf28      	it	cs
 80a44e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a44ea:	fa43 f305 	asr.w	r3, r3, r5
 80a44ee:	18c0      	adds	r0, r0, r3
 80a44f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a44f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a44f8:	d507      	bpl.n	80a450a <__adddf3+0xe6>
 80a44fa:	f04f 0e00 	mov.w	lr, #0
 80a44fe:	f1dc 0c00 	rsbs	ip, ip, #0
 80a4502:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a4506:	eb6e 0101 	sbc.w	r1, lr, r1
 80a450a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a450e:	d31b      	bcc.n	80a4548 <__adddf3+0x124>
 80a4510:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a4514:	d30c      	bcc.n	80a4530 <__adddf3+0x10c>
 80a4516:	0849      	lsrs	r1, r1, #1
 80a4518:	ea5f 0030 	movs.w	r0, r0, rrx
 80a451c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a4520:	f104 0401 	add.w	r4, r4, #1
 80a4524:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a4528:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a452c:	f080 809a 	bcs.w	80a4664 <__adddf3+0x240>
 80a4530:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4534:	bf08      	it	eq
 80a4536:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a453a:	f150 0000 	adcs.w	r0, r0, #0
 80a453e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4542:	ea41 0105 	orr.w	r1, r1, r5
 80a4546:	bd30      	pop	{r4, r5, pc}
 80a4548:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a454c:	4140      	adcs	r0, r0
 80a454e:	eb41 0101 	adc.w	r1, r1, r1
 80a4552:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4556:	f1a4 0401 	sub.w	r4, r4, #1
 80a455a:	d1e9      	bne.n	80a4530 <__adddf3+0x10c>
 80a455c:	f091 0f00 	teq	r1, #0
 80a4560:	bf04      	itt	eq
 80a4562:	4601      	moveq	r1, r0
 80a4564:	2000      	moveq	r0, #0
 80a4566:	fab1 f381 	clz	r3, r1
 80a456a:	bf08      	it	eq
 80a456c:	3320      	addeq	r3, #32
 80a456e:	f1a3 030b 	sub.w	r3, r3, #11
 80a4572:	f1b3 0220 	subs.w	r2, r3, #32
 80a4576:	da0c      	bge.n	80a4592 <__adddf3+0x16e>
 80a4578:	320c      	adds	r2, #12
 80a457a:	dd08      	ble.n	80a458e <__adddf3+0x16a>
 80a457c:	f102 0c14 	add.w	ip, r2, #20
 80a4580:	f1c2 020c 	rsb	r2, r2, #12
 80a4584:	fa01 f00c 	lsl.w	r0, r1, ip
 80a4588:	fa21 f102 	lsr.w	r1, r1, r2
 80a458c:	e00c      	b.n	80a45a8 <__adddf3+0x184>
 80a458e:	f102 0214 	add.w	r2, r2, #20
 80a4592:	bfd8      	it	le
 80a4594:	f1c2 0c20 	rsble	ip, r2, #32
 80a4598:	fa01 f102 	lsl.w	r1, r1, r2
 80a459c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a45a0:	bfdc      	itt	le
 80a45a2:	ea41 010c 	orrle.w	r1, r1, ip
 80a45a6:	4090      	lslle	r0, r2
 80a45a8:	1ae4      	subs	r4, r4, r3
 80a45aa:	bfa2      	ittt	ge
 80a45ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a45b0:	4329      	orrge	r1, r5
 80a45b2:	bd30      	popge	{r4, r5, pc}
 80a45b4:	ea6f 0404 	mvn.w	r4, r4
 80a45b8:	3c1f      	subs	r4, #31
 80a45ba:	da1c      	bge.n	80a45f6 <__adddf3+0x1d2>
 80a45bc:	340c      	adds	r4, #12
 80a45be:	dc0e      	bgt.n	80a45de <__adddf3+0x1ba>
 80a45c0:	f104 0414 	add.w	r4, r4, #20
 80a45c4:	f1c4 0220 	rsb	r2, r4, #32
 80a45c8:	fa20 f004 	lsr.w	r0, r0, r4
 80a45cc:	fa01 f302 	lsl.w	r3, r1, r2
 80a45d0:	ea40 0003 	orr.w	r0, r0, r3
 80a45d4:	fa21 f304 	lsr.w	r3, r1, r4
 80a45d8:	ea45 0103 	orr.w	r1, r5, r3
 80a45dc:	bd30      	pop	{r4, r5, pc}
 80a45de:	f1c4 040c 	rsb	r4, r4, #12
 80a45e2:	f1c4 0220 	rsb	r2, r4, #32
 80a45e6:	fa20 f002 	lsr.w	r0, r0, r2
 80a45ea:	fa01 f304 	lsl.w	r3, r1, r4
 80a45ee:	ea40 0003 	orr.w	r0, r0, r3
 80a45f2:	4629      	mov	r1, r5
 80a45f4:	bd30      	pop	{r4, r5, pc}
 80a45f6:	fa21 f004 	lsr.w	r0, r1, r4
 80a45fa:	4629      	mov	r1, r5
 80a45fc:	bd30      	pop	{r4, r5, pc}
 80a45fe:	f094 0f00 	teq	r4, #0
 80a4602:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a4606:	bf06      	itte	eq
 80a4608:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a460c:	3401      	addeq	r4, #1
 80a460e:	3d01      	subne	r5, #1
 80a4610:	e74e      	b.n	80a44b0 <__adddf3+0x8c>
 80a4612:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4616:	bf18      	it	ne
 80a4618:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a461c:	d029      	beq.n	80a4672 <__adddf3+0x24e>
 80a461e:	ea94 0f05 	teq	r4, r5
 80a4622:	bf08      	it	eq
 80a4624:	ea90 0f02 	teqeq	r0, r2
 80a4628:	d005      	beq.n	80a4636 <__adddf3+0x212>
 80a462a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a462e:	bf04      	itt	eq
 80a4630:	4619      	moveq	r1, r3
 80a4632:	4610      	moveq	r0, r2
 80a4634:	bd30      	pop	{r4, r5, pc}
 80a4636:	ea91 0f03 	teq	r1, r3
 80a463a:	bf1e      	ittt	ne
 80a463c:	2100      	movne	r1, #0
 80a463e:	2000      	movne	r0, #0
 80a4640:	bd30      	popne	{r4, r5, pc}
 80a4642:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a4646:	d105      	bne.n	80a4654 <__adddf3+0x230>
 80a4648:	0040      	lsls	r0, r0, #1
 80a464a:	4149      	adcs	r1, r1
 80a464c:	bf28      	it	cs
 80a464e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a4652:	bd30      	pop	{r4, r5, pc}
 80a4654:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a4658:	bf3c      	itt	cc
 80a465a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a465e:	bd30      	popcc	{r4, r5, pc}
 80a4660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4664:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a4668:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a466c:	f04f 0000 	mov.w	r0, #0
 80a4670:	bd30      	pop	{r4, r5, pc}
 80a4672:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4676:	bf1a      	itte	ne
 80a4678:	4619      	movne	r1, r3
 80a467a:	4610      	movne	r0, r2
 80a467c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a4680:	bf1c      	itt	ne
 80a4682:	460b      	movne	r3, r1
 80a4684:	4602      	movne	r2, r0
 80a4686:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a468a:	bf06      	itte	eq
 80a468c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a4690:	ea91 0f03 	teqeq	r1, r3
 80a4694:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a4698:	bd30      	pop	{r4, r5, pc}
 80a469a:	bf00      	nop

080a469c <__aeabi_ui2d>:
 80a469c:	f090 0f00 	teq	r0, #0
 80a46a0:	bf04      	itt	eq
 80a46a2:	2100      	moveq	r1, #0
 80a46a4:	4770      	bxeq	lr
 80a46a6:	b530      	push	{r4, r5, lr}
 80a46a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a46ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a46b0:	f04f 0500 	mov.w	r5, #0
 80a46b4:	f04f 0100 	mov.w	r1, #0
 80a46b8:	e750      	b.n	80a455c <__adddf3+0x138>
 80a46ba:	bf00      	nop

080a46bc <__aeabi_i2d>:
 80a46bc:	f090 0f00 	teq	r0, #0
 80a46c0:	bf04      	itt	eq
 80a46c2:	2100      	moveq	r1, #0
 80a46c4:	4770      	bxeq	lr
 80a46c6:	b530      	push	{r4, r5, lr}
 80a46c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a46cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a46d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a46d4:	bf48      	it	mi
 80a46d6:	4240      	negmi	r0, r0
 80a46d8:	f04f 0100 	mov.w	r1, #0
 80a46dc:	e73e      	b.n	80a455c <__adddf3+0x138>
 80a46de:	bf00      	nop

080a46e0 <__aeabi_f2d>:
 80a46e0:	0042      	lsls	r2, r0, #1
 80a46e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a46e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a46ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a46ee:	bf1f      	itttt	ne
 80a46f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a46f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a46f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a46fc:	4770      	bxne	lr
 80a46fe:	f092 0f00 	teq	r2, #0
 80a4702:	bf14      	ite	ne
 80a4704:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4708:	4770      	bxeq	lr
 80a470a:	b530      	push	{r4, r5, lr}
 80a470c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a4710:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4714:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4718:	e720      	b.n	80a455c <__adddf3+0x138>
 80a471a:	bf00      	nop

080a471c <__aeabi_ul2d>:
 80a471c:	ea50 0201 	orrs.w	r2, r0, r1
 80a4720:	bf08      	it	eq
 80a4722:	4770      	bxeq	lr
 80a4724:	b530      	push	{r4, r5, lr}
 80a4726:	f04f 0500 	mov.w	r5, #0
 80a472a:	e00a      	b.n	80a4742 <__aeabi_l2d+0x16>

080a472c <__aeabi_l2d>:
 80a472c:	ea50 0201 	orrs.w	r2, r0, r1
 80a4730:	bf08      	it	eq
 80a4732:	4770      	bxeq	lr
 80a4734:	b530      	push	{r4, r5, lr}
 80a4736:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a473a:	d502      	bpl.n	80a4742 <__aeabi_l2d+0x16>
 80a473c:	4240      	negs	r0, r0
 80a473e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4742:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4746:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a474a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a474e:	f43f aedc 	beq.w	80a450a <__adddf3+0xe6>
 80a4752:	f04f 0203 	mov.w	r2, #3
 80a4756:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a475a:	bf18      	it	ne
 80a475c:	3203      	addne	r2, #3
 80a475e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4762:	bf18      	it	ne
 80a4764:	3203      	addne	r2, #3
 80a4766:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a476a:	f1c2 0320 	rsb	r3, r2, #32
 80a476e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a4772:	fa20 f002 	lsr.w	r0, r0, r2
 80a4776:	fa01 fe03 	lsl.w	lr, r1, r3
 80a477a:	ea40 000e 	orr.w	r0, r0, lr
 80a477e:	fa21 f102 	lsr.w	r1, r1, r2
 80a4782:	4414      	add	r4, r2
 80a4784:	e6c1      	b.n	80a450a <__adddf3+0xe6>
 80a4786:	bf00      	nop

080a4788 <__aeabi_dmul>:
 80a4788:	b570      	push	{r4, r5, r6, lr}
 80a478a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a478e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4792:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4796:	bf1d      	ittte	ne
 80a4798:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a479c:	ea94 0f0c 	teqne	r4, ip
 80a47a0:	ea95 0f0c 	teqne	r5, ip
 80a47a4:	f000 f8de 	bleq	80a4964 <__aeabi_dmul+0x1dc>
 80a47a8:	442c      	add	r4, r5
 80a47aa:	ea81 0603 	eor.w	r6, r1, r3
 80a47ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a47b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a47b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a47ba:	bf18      	it	ne
 80a47bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a47c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a47c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a47c8:	d038      	beq.n	80a483c <__aeabi_dmul+0xb4>
 80a47ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80a47ce:	f04f 0500 	mov.w	r5, #0
 80a47d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a47d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a47da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a47de:	f04f 0600 	mov.w	r6, #0
 80a47e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a47e6:	f09c 0f00 	teq	ip, #0
 80a47ea:	bf18      	it	ne
 80a47ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80a47f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a47f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a47f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a47fc:	d204      	bcs.n	80a4808 <__aeabi_dmul+0x80>
 80a47fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a4802:	416d      	adcs	r5, r5
 80a4804:	eb46 0606 	adc.w	r6, r6, r6
 80a4808:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a480c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a4810:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a4814:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a4818:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a481c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4820:	bf88      	it	hi
 80a4822:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4826:	d81e      	bhi.n	80a4866 <__aeabi_dmul+0xde>
 80a4828:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a482c:	bf08      	it	eq
 80a482e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a4832:	f150 0000 	adcs.w	r0, r0, #0
 80a4836:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a483a:	bd70      	pop	{r4, r5, r6, pc}
 80a483c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a4840:	ea46 0101 	orr.w	r1, r6, r1
 80a4844:	ea40 0002 	orr.w	r0, r0, r2
 80a4848:	ea81 0103 	eor.w	r1, r1, r3
 80a484c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a4850:	bfc2      	ittt	gt
 80a4852:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4856:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a485a:	bd70      	popgt	{r4, r5, r6, pc}
 80a485c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4860:	f04f 0e00 	mov.w	lr, #0
 80a4864:	3c01      	subs	r4, #1
 80a4866:	f300 80ab 	bgt.w	80a49c0 <__aeabi_dmul+0x238>
 80a486a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a486e:	bfde      	ittt	le
 80a4870:	2000      	movle	r0, #0
 80a4872:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a4876:	bd70      	pople	{r4, r5, r6, pc}
 80a4878:	f1c4 0400 	rsb	r4, r4, #0
 80a487c:	3c20      	subs	r4, #32
 80a487e:	da35      	bge.n	80a48ec <__aeabi_dmul+0x164>
 80a4880:	340c      	adds	r4, #12
 80a4882:	dc1b      	bgt.n	80a48bc <__aeabi_dmul+0x134>
 80a4884:	f104 0414 	add.w	r4, r4, #20
 80a4888:	f1c4 0520 	rsb	r5, r4, #32
 80a488c:	fa00 f305 	lsl.w	r3, r0, r5
 80a4890:	fa20 f004 	lsr.w	r0, r0, r4
 80a4894:	fa01 f205 	lsl.w	r2, r1, r5
 80a4898:	ea40 0002 	orr.w	r0, r0, r2
 80a489c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a48a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a48a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a48a8:	fa21 f604 	lsr.w	r6, r1, r4
 80a48ac:	eb42 0106 	adc.w	r1, r2, r6
 80a48b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a48b4:	bf08      	it	eq
 80a48b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a48ba:	bd70      	pop	{r4, r5, r6, pc}
 80a48bc:	f1c4 040c 	rsb	r4, r4, #12
 80a48c0:	f1c4 0520 	rsb	r5, r4, #32
 80a48c4:	fa00 f304 	lsl.w	r3, r0, r4
 80a48c8:	fa20 f005 	lsr.w	r0, r0, r5
 80a48cc:	fa01 f204 	lsl.w	r2, r1, r4
 80a48d0:	ea40 0002 	orr.w	r0, r0, r2
 80a48d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a48d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a48dc:	f141 0100 	adc.w	r1, r1, #0
 80a48e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a48e4:	bf08      	it	eq
 80a48e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a48ea:	bd70      	pop	{r4, r5, r6, pc}
 80a48ec:	f1c4 0520 	rsb	r5, r4, #32
 80a48f0:	fa00 f205 	lsl.w	r2, r0, r5
 80a48f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80a48f8:	fa20 f304 	lsr.w	r3, r0, r4
 80a48fc:	fa01 f205 	lsl.w	r2, r1, r5
 80a4900:	ea43 0302 	orr.w	r3, r3, r2
 80a4904:	fa21 f004 	lsr.w	r0, r1, r4
 80a4908:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a490c:	fa21 f204 	lsr.w	r2, r1, r4
 80a4910:	ea20 0002 	bic.w	r0, r0, r2
 80a4914:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a4918:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a491c:	bf08      	it	eq
 80a491e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4922:	bd70      	pop	{r4, r5, r6, pc}
 80a4924:	f094 0f00 	teq	r4, #0
 80a4928:	d10f      	bne.n	80a494a <__aeabi_dmul+0x1c2>
 80a492a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a492e:	0040      	lsls	r0, r0, #1
 80a4930:	eb41 0101 	adc.w	r1, r1, r1
 80a4934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4938:	bf08      	it	eq
 80a493a:	3c01      	subeq	r4, #1
 80a493c:	d0f7      	beq.n	80a492e <__aeabi_dmul+0x1a6>
 80a493e:	ea41 0106 	orr.w	r1, r1, r6
 80a4942:	f095 0f00 	teq	r5, #0
 80a4946:	bf18      	it	ne
 80a4948:	4770      	bxne	lr
 80a494a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a494e:	0052      	lsls	r2, r2, #1
 80a4950:	eb43 0303 	adc.w	r3, r3, r3
 80a4954:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a4958:	bf08      	it	eq
 80a495a:	3d01      	subeq	r5, #1
 80a495c:	d0f7      	beq.n	80a494e <__aeabi_dmul+0x1c6>
 80a495e:	ea43 0306 	orr.w	r3, r3, r6
 80a4962:	4770      	bx	lr
 80a4964:	ea94 0f0c 	teq	r4, ip
 80a4968:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a496c:	bf18      	it	ne
 80a496e:	ea95 0f0c 	teqne	r5, ip
 80a4972:	d00c      	beq.n	80a498e <__aeabi_dmul+0x206>
 80a4974:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4978:	bf18      	it	ne
 80a497a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a497e:	d1d1      	bne.n	80a4924 <__aeabi_dmul+0x19c>
 80a4980:	ea81 0103 	eor.w	r1, r1, r3
 80a4984:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4988:	f04f 0000 	mov.w	r0, #0
 80a498c:	bd70      	pop	{r4, r5, r6, pc}
 80a498e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4992:	bf06      	itte	eq
 80a4994:	4610      	moveq	r0, r2
 80a4996:	4619      	moveq	r1, r3
 80a4998:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a499c:	d019      	beq.n	80a49d2 <__aeabi_dmul+0x24a>
 80a499e:	ea94 0f0c 	teq	r4, ip
 80a49a2:	d102      	bne.n	80a49aa <__aeabi_dmul+0x222>
 80a49a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a49a8:	d113      	bne.n	80a49d2 <__aeabi_dmul+0x24a>
 80a49aa:	ea95 0f0c 	teq	r5, ip
 80a49ae:	d105      	bne.n	80a49bc <__aeabi_dmul+0x234>
 80a49b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a49b4:	bf1c      	itt	ne
 80a49b6:	4610      	movne	r0, r2
 80a49b8:	4619      	movne	r1, r3
 80a49ba:	d10a      	bne.n	80a49d2 <__aeabi_dmul+0x24a>
 80a49bc:	ea81 0103 	eor.w	r1, r1, r3
 80a49c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a49c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a49c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a49cc:	f04f 0000 	mov.w	r0, #0
 80a49d0:	bd70      	pop	{r4, r5, r6, pc}
 80a49d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a49d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a49da:	bd70      	pop	{r4, r5, r6, pc}

080a49dc <__aeabi_ddiv>:
 80a49dc:	b570      	push	{r4, r5, r6, lr}
 80a49de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a49e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a49e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a49ea:	bf1d      	ittte	ne
 80a49ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a49f0:	ea94 0f0c 	teqne	r4, ip
 80a49f4:	ea95 0f0c 	teqne	r5, ip
 80a49f8:	f000 f8a7 	bleq	80a4b4a <__aeabi_ddiv+0x16e>
 80a49fc:	eba4 0405 	sub.w	r4, r4, r5
 80a4a00:	ea81 0e03 	eor.w	lr, r1, r3
 80a4a04:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4a08:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4a0c:	f000 8088 	beq.w	80a4b20 <__aeabi_ddiv+0x144>
 80a4a10:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4a14:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4a18:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a4a1c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a4a20:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4a24:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a4a28:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a4a2c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a4a30:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a4a34:	429d      	cmp	r5, r3
 80a4a36:	bf08      	it	eq
 80a4a38:	4296      	cmpeq	r6, r2
 80a4a3a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a4a3e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a4a42:	d202      	bcs.n	80a4a4a <__aeabi_ddiv+0x6e>
 80a4a44:	085b      	lsrs	r3, r3, #1
 80a4a46:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4a4a:	1ab6      	subs	r6, r6, r2
 80a4a4c:	eb65 0503 	sbc.w	r5, r5, r3
 80a4a50:	085b      	lsrs	r3, r3, #1
 80a4a52:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4a56:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a4a5a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a4a5e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4a62:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4a66:	bf22      	ittt	cs
 80a4a68:	1ab6      	subcs	r6, r6, r2
 80a4a6a:	4675      	movcs	r5, lr
 80a4a6c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4a70:	085b      	lsrs	r3, r3, #1
 80a4a72:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4a76:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4a7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4a7e:	bf22      	ittt	cs
 80a4a80:	1ab6      	subcs	r6, r6, r2
 80a4a82:	4675      	movcs	r5, lr
 80a4a84:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4a88:	085b      	lsrs	r3, r3, #1
 80a4a8a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4a8e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4a92:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4a96:	bf22      	ittt	cs
 80a4a98:	1ab6      	subcs	r6, r6, r2
 80a4a9a:	4675      	movcs	r5, lr
 80a4a9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4aa0:	085b      	lsrs	r3, r3, #1
 80a4aa2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4aa6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4aaa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4aae:	bf22      	ittt	cs
 80a4ab0:	1ab6      	subcs	r6, r6, r2
 80a4ab2:	4675      	movcs	r5, lr
 80a4ab4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4ab8:	ea55 0e06 	orrs.w	lr, r5, r6
 80a4abc:	d018      	beq.n	80a4af0 <__aeabi_ddiv+0x114>
 80a4abe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a4ac2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a4ac6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a4aca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a4ace:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a4ad2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a4ad6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a4ada:	d1c0      	bne.n	80a4a5e <__aeabi_ddiv+0x82>
 80a4adc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4ae0:	d10b      	bne.n	80a4afa <__aeabi_ddiv+0x11e>
 80a4ae2:	ea41 0100 	orr.w	r1, r1, r0
 80a4ae6:	f04f 0000 	mov.w	r0, #0
 80a4aea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a4aee:	e7b6      	b.n	80a4a5e <__aeabi_ddiv+0x82>
 80a4af0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4af4:	bf04      	itt	eq
 80a4af6:	4301      	orreq	r1, r0
 80a4af8:	2000      	moveq	r0, #0
 80a4afa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4afe:	bf88      	it	hi
 80a4b00:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4b04:	f63f aeaf 	bhi.w	80a4866 <__aeabi_dmul+0xde>
 80a4b08:	ebb5 0c03 	subs.w	ip, r5, r3
 80a4b0c:	bf04      	itt	eq
 80a4b0e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a4b12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4b16:	f150 0000 	adcs.w	r0, r0, #0
 80a4b1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4b1e:	bd70      	pop	{r4, r5, r6, pc}
 80a4b20:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a4b24:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a4b28:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a4b2c:	bfc2      	ittt	gt
 80a4b2e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4b32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4b36:	bd70      	popgt	{r4, r5, r6, pc}
 80a4b38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4b3c:	f04f 0e00 	mov.w	lr, #0
 80a4b40:	3c01      	subs	r4, #1
 80a4b42:	e690      	b.n	80a4866 <__aeabi_dmul+0xde>
 80a4b44:	ea45 0e06 	orr.w	lr, r5, r6
 80a4b48:	e68d      	b.n	80a4866 <__aeabi_dmul+0xde>
 80a4b4a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4b4e:	ea94 0f0c 	teq	r4, ip
 80a4b52:	bf08      	it	eq
 80a4b54:	ea95 0f0c 	teqeq	r5, ip
 80a4b58:	f43f af3b 	beq.w	80a49d2 <__aeabi_dmul+0x24a>
 80a4b5c:	ea94 0f0c 	teq	r4, ip
 80a4b60:	d10a      	bne.n	80a4b78 <__aeabi_ddiv+0x19c>
 80a4b62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4b66:	f47f af34 	bne.w	80a49d2 <__aeabi_dmul+0x24a>
 80a4b6a:	ea95 0f0c 	teq	r5, ip
 80a4b6e:	f47f af25 	bne.w	80a49bc <__aeabi_dmul+0x234>
 80a4b72:	4610      	mov	r0, r2
 80a4b74:	4619      	mov	r1, r3
 80a4b76:	e72c      	b.n	80a49d2 <__aeabi_dmul+0x24a>
 80a4b78:	ea95 0f0c 	teq	r5, ip
 80a4b7c:	d106      	bne.n	80a4b8c <__aeabi_ddiv+0x1b0>
 80a4b7e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4b82:	f43f aefd 	beq.w	80a4980 <__aeabi_dmul+0x1f8>
 80a4b86:	4610      	mov	r0, r2
 80a4b88:	4619      	mov	r1, r3
 80a4b8a:	e722      	b.n	80a49d2 <__aeabi_dmul+0x24a>
 80a4b8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4b90:	bf18      	it	ne
 80a4b92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4b96:	f47f aec5 	bne.w	80a4924 <__aeabi_dmul+0x19c>
 80a4b9a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a4b9e:	f47f af0d 	bne.w	80a49bc <__aeabi_dmul+0x234>
 80a4ba2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a4ba6:	f47f aeeb 	bne.w	80a4980 <__aeabi_dmul+0x1f8>
 80a4baa:	e712      	b.n	80a49d2 <__aeabi_dmul+0x24a>

080a4bac <__gedf2>:
 80a4bac:	f04f 3cff 	mov.w	ip, #4294967295
 80a4bb0:	e006      	b.n	80a4bc0 <__cmpdf2+0x4>
 80a4bb2:	bf00      	nop

080a4bb4 <__ledf2>:
 80a4bb4:	f04f 0c01 	mov.w	ip, #1
 80a4bb8:	e002      	b.n	80a4bc0 <__cmpdf2+0x4>
 80a4bba:	bf00      	nop

080a4bbc <__cmpdf2>:
 80a4bbc:	f04f 0c01 	mov.w	ip, #1
 80a4bc0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4bc4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4bc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4bcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4bd0:	bf18      	it	ne
 80a4bd2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a4bd6:	d01b      	beq.n	80a4c10 <__cmpdf2+0x54>
 80a4bd8:	b001      	add	sp, #4
 80a4bda:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a4bde:	bf0c      	ite	eq
 80a4be0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a4be4:	ea91 0f03 	teqne	r1, r3
 80a4be8:	bf02      	ittt	eq
 80a4bea:	ea90 0f02 	teqeq	r0, r2
 80a4bee:	2000      	moveq	r0, #0
 80a4bf0:	4770      	bxeq	lr
 80a4bf2:	f110 0f00 	cmn.w	r0, #0
 80a4bf6:	ea91 0f03 	teq	r1, r3
 80a4bfa:	bf58      	it	pl
 80a4bfc:	4299      	cmppl	r1, r3
 80a4bfe:	bf08      	it	eq
 80a4c00:	4290      	cmpeq	r0, r2
 80a4c02:	bf2c      	ite	cs
 80a4c04:	17d8      	asrcs	r0, r3, #31
 80a4c06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a4c0a:	f040 0001 	orr.w	r0, r0, #1
 80a4c0e:	4770      	bx	lr
 80a4c10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4c14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4c18:	d102      	bne.n	80a4c20 <__cmpdf2+0x64>
 80a4c1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4c1e:	d107      	bne.n	80a4c30 <__cmpdf2+0x74>
 80a4c20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4c24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4c28:	d1d6      	bne.n	80a4bd8 <__cmpdf2+0x1c>
 80a4c2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a4c2e:	d0d3      	beq.n	80a4bd8 <__cmpdf2+0x1c>
 80a4c30:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4c34:	4770      	bx	lr
 80a4c36:	bf00      	nop

080a4c38 <__aeabi_cdrcmple>:
 80a4c38:	4684      	mov	ip, r0
 80a4c3a:	4610      	mov	r0, r2
 80a4c3c:	4662      	mov	r2, ip
 80a4c3e:	468c      	mov	ip, r1
 80a4c40:	4619      	mov	r1, r3
 80a4c42:	4663      	mov	r3, ip
 80a4c44:	e000      	b.n	80a4c48 <__aeabi_cdcmpeq>
 80a4c46:	bf00      	nop

080a4c48 <__aeabi_cdcmpeq>:
 80a4c48:	b501      	push	{r0, lr}
 80a4c4a:	f7ff ffb7 	bl	80a4bbc <__cmpdf2>
 80a4c4e:	2800      	cmp	r0, #0
 80a4c50:	bf48      	it	mi
 80a4c52:	f110 0f00 	cmnmi.w	r0, #0
 80a4c56:	bd01      	pop	{r0, pc}

080a4c58 <__aeabi_dcmpeq>:
 80a4c58:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4c5c:	f7ff fff4 	bl	80a4c48 <__aeabi_cdcmpeq>
 80a4c60:	bf0c      	ite	eq
 80a4c62:	2001      	moveq	r0, #1
 80a4c64:	2000      	movne	r0, #0
 80a4c66:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4c6a:	bf00      	nop

080a4c6c <__aeabi_dcmplt>:
 80a4c6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4c70:	f7ff ffea 	bl	80a4c48 <__aeabi_cdcmpeq>
 80a4c74:	bf34      	ite	cc
 80a4c76:	2001      	movcc	r0, #1
 80a4c78:	2000      	movcs	r0, #0
 80a4c7a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4c7e:	bf00      	nop

080a4c80 <__aeabi_dcmple>:
 80a4c80:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4c84:	f7ff ffe0 	bl	80a4c48 <__aeabi_cdcmpeq>
 80a4c88:	bf94      	ite	ls
 80a4c8a:	2001      	movls	r0, #1
 80a4c8c:	2000      	movhi	r0, #0
 80a4c8e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4c92:	bf00      	nop

080a4c94 <__aeabi_dcmpge>:
 80a4c94:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4c98:	f7ff ffce 	bl	80a4c38 <__aeabi_cdrcmple>
 80a4c9c:	bf94      	ite	ls
 80a4c9e:	2001      	movls	r0, #1
 80a4ca0:	2000      	movhi	r0, #0
 80a4ca2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4ca6:	bf00      	nop

080a4ca8 <__aeabi_dcmpgt>:
 80a4ca8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4cac:	f7ff ffc4 	bl	80a4c38 <__aeabi_cdrcmple>
 80a4cb0:	bf34      	ite	cc
 80a4cb2:	2001      	movcc	r0, #1
 80a4cb4:	2000      	movcs	r0, #0
 80a4cb6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4cba:	bf00      	nop

080a4cbc <__aeabi_d2f>:
 80a4cbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4cc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a4cc4:	bf24      	itt	cs
 80a4cc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a4cca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a4cce:	d90d      	bls.n	80a4cec <__aeabi_d2f+0x30>
 80a4cd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4cd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a4cd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a4cdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a4ce0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a4ce4:	bf08      	it	eq
 80a4ce6:	f020 0001 	biceq.w	r0, r0, #1
 80a4cea:	4770      	bx	lr
 80a4cec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a4cf0:	d121      	bne.n	80a4d36 <__aeabi_d2f+0x7a>
 80a4cf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a4cf6:	bfbc      	itt	lt
 80a4cf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a4cfc:	4770      	bxlt	lr
 80a4cfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4d02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a4d06:	f1c2 0218 	rsb	r2, r2, #24
 80a4d0a:	f1c2 0c20 	rsb	ip, r2, #32
 80a4d0e:	fa10 f30c 	lsls.w	r3, r0, ip
 80a4d12:	fa20 f002 	lsr.w	r0, r0, r2
 80a4d16:	bf18      	it	ne
 80a4d18:	f040 0001 	orrne.w	r0, r0, #1
 80a4d1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4d20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a4d24:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a4d28:	ea40 000c 	orr.w	r0, r0, ip
 80a4d2c:	fa23 f302 	lsr.w	r3, r3, r2
 80a4d30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a4d34:	e7cc      	b.n	80a4cd0 <__aeabi_d2f+0x14>
 80a4d36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a4d3a:	d107      	bne.n	80a4d4c <__aeabi_d2f+0x90>
 80a4d3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a4d40:	bf1e      	ittt	ne
 80a4d42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a4d46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a4d4a:	4770      	bxne	lr
 80a4d4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a4d50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4d54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4d58:	4770      	bx	lr
 80a4d5a:	bf00      	nop

080a4d5c <__aeabi_frsub>:
 80a4d5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a4d60:	e002      	b.n	80a4d68 <__addsf3>
 80a4d62:	bf00      	nop

080a4d64 <__aeabi_fsub>:
 80a4d64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a4d68 <__addsf3>:
 80a4d68:	0042      	lsls	r2, r0, #1
 80a4d6a:	bf1f      	itttt	ne
 80a4d6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a4d70:	ea92 0f03 	teqne	r2, r3
 80a4d74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a4d78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4d7c:	d06a      	beq.n	80a4e54 <__addsf3+0xec>
 80a4d7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a4d82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a4d86:	bfc1      	itttt	gt
 80a4d88:	18d2      	addgt	r2, r2, r3
 80a4d8a:	4041      	eorgt	r1, r0
 80a4d8c:	4048      	eorgt	r0, r1
 80a4d8e:	4041      	eorgt	r1, r0
 80a4d90:	bfb8      	it	lt
 80a4d92:	425b      	neglt	r3, r3
 80a4d94:	2b19      	cmp	r3, #25
 80a4d96:	bf88      	it	hi
 80a4d98:	4770      	bxhi	lr
 80a4d9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4d9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4da2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a4da6:	bf18      	it	ne
 80a4da8:	4240      	negne	r0, r0
 80a4daa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4dae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a4db2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a4db6:	bf18      	it	ne
 80a4db8:	4249      	negne	r1, r1
 80a4dba:	ea92 0f03 	teq	r2, r3
 80a4dbe:	d03f      	beq.n	80a4e40 <__addsf3+0xd8>
 80a4dc0:	f1a2 0201 	sub.w	r2, r2, #1
 80a4dc4:	fa41 fc03 	asr.w	ip, r1, r3
 80a4dc8:	eb10 000c 	adds.w	r0, r0, ip
 80a4dcc:	f1c3 0320 	rsb	r3, r3, #32
 80a4dd0:	fa01 f103 	lsl.w	r1, r1, r3
 80a4dd4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4dd8:	d502      	bpl.n	80a4de0 <__addsf3+0x78>
 80a4dda:	4249      	negs	r1, r1
 80a4ddc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a4de0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a4de4:	d313      	bcc.n	80a4e0e <__addsf3+0xa6>
 80a4de6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a4dea:	d306      	bcc.n	80a4dfa <__addsf3+0x92>
 80a4dec:	0840      	lsrs	r0, r0, #1
 80a4dee:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4df2:	f102 0201 	add.w	r2, r2, #1
 80a4df6:	2afe      	cmp	r2, #254	; 0xfe
 80a4df8:	d251      	bcs.n	80a4e9e <__addsf3+0x136>
 80a4dfa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a4dfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4e02:	bf08      	it	eq
 80a4e04:	f020 0001 	biceq.w	r0, r0, #1
 80a4e08:	ea40 0003 	orr.w	r0, r0, r3
 80a4e0c:	4770      	bx	lr
 80a4e0e:	0049      	lsls	r1, r1, #1
 80a4e10:	eb40 0000 	adc.w	r0, r0, r0
 80a4e14:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a4e18:	f1a2 0201 	sub.w	r2, r2, #1
 80a4e1c:	d1ed      	bne.n	80a4dfa <__addsf3+0x92>
 80a4e1e:	fab0 fc80 	clz	ip, r0
 80a4e22:	f1ac 0c08 	sub.w	ip, ip, #8
 80a4e26:	ebb2 020c 	subs.w	r2, r2, ip
 80a4e2a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a4e2e:	bfaa      	itet	ge
 80a4e30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4e34:	4252      	neglt	r2, r2
 80a4e36:	4318      	orrge	r0, r3
 80a4e38:	bfbc      	itt	lt
 80a4e3a:	40d0      	lsrlt	r0, r2
 80a4e3c:	4318      	orrlt	r0, r3
 80a4e3e:	4770      	bx	lr
 80a4e40:	f092 0f00 	teq	r2, #0
 80a4e44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a4e48:	bf06      	itte	eq
 80a4e4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a4e4e:	3201      	addeq	r2, #1
 80a4e50:	3b01      	subne	r3, #1
 80a4e52:	e7b5      	b.n	80a4dc0 <__addsf3+0x58>
 80a4e54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4e58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4e5c:	bf18      	it	ne
 80a4e5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4e62:	d021      	beq.n	80a4ea8 <__addsf3+0x140>
 80a4e64:	ea92 0f03 	teq	r2, r3
 80a4e68:	d004      	beq.n	80a4e74 <__addsf3+0x10c>
 80a4e6a:	f092 0f00 	teq	r2, #0
 80a4e6e:	bf08      	it	eq
 80a4e70:	4608      	moveq	r0, r1
 80a4e72:	4770      	bx	lr
 80a4e74:	ea90 0f01 	teq	r0, r1
 80a4e78:	bf1c      	itt	ne
 80a4e7a:	2000      	movne	r0, #0
 80a4e7c:	4770      	bxne	lr
 80a4e7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a4e82:	d104      	bne.n	80a4e8e <__addsf3+0x126>
 80a4e84:	0040      	lsls	r0, r0, #1
 80a4e86:	bf28      	it	cs
 80a4e88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a4e8c:	4770      	bx	lr
 80a4e8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a4e92:	bf3c      	itt	cc
 80a4e94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a4e98:	4770      	bxcc	lr
 80a4e9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4e9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a4ea2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4ea6:	4770      	bx	lr
 80a4ea8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4eac:	bf16      	itet	ne
 80a4eae:	4608      	movne	r0, r1
 80a4eb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a4eb4:	4601      	movne	r1, r0
 80a4eb6:	0242      	lsls	r2, r0, #9
 80a4eb8:	bf06      	itte	eq
 80a4eba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a4ebe:	ea90 0f01 	teqeq	r0, r1
 80a4ec2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a4ec6:	4770      	bx	lr

080a4ec8 <__aeabi_ui2f>:
 80a4ec8:	f04f 0300 	mov.w	r3, #0
 80a4ecc:	e004      	b.n	80a4ed8 <__aeabi_i2f+0x8>
 80a4ece:	bf00      	nop

080a4ed0 <__aeabi_i2f>:
 80a4ed0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a4ed4:	bf48      	it	mi
 80a4ed6:	4240      	negmi	r0, r0
 80a4ed8:	ea5f 0c00 	movs.w	ip, r0
 80a4edc:	bf08      	it	eq
 80a4ede:	4770      	bxeq	lr
 80a4ee0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a4ee4:	4601      	mov	r1, r0
 80a4ee6:	f04f 0000 	mov.w	r0, #0
 80a4eea:	e01c      	b.n	80a4f26 <__aeabi_l2f+0x2a>

080a4eec <__aeabi_ul2f>:
 80a4eec:	ea50 0201 	orrs.w	r2, r0, r1
 80a4ef0:	bf08      	it	eq
 80a4ef2:	4770      	bxeq	lr
 80a4ef4:	f04f 0300 	mov.w	r3, #0
 80a4ef8:	e00a      	b.n	80a4f10 <__aeabi_l2f+0x14>
 80a4efa:	bf00      	nop

080a4efc <__aeabi_l2f>:
 80a4efc:	ea50 0201 	orrs.w	r2, r0, r1
 80a4f00:	bf08      	it	eq
 80a4f02:	4770      	bxeq	lr
 80a4f04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a4f08:	d502      	bpl.n	80a4f10 <__aeabi_l2f+0x14>
 80a4f0a:	4240      	negs	r0, r0
 80a4f0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4f10:	ea5f 0c01 	movs.w	ip, r1
 80a4f14:	bf02      	ittt	eq
 80a4f16:	4684      	moveq	ip, r0
 80a4f18:	4601      	moveq	r1, r0
 80a4f1a:	2000      	moveq	r0, #0
 80a4f1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a4f20:	bf08      	it	eq
 80a4f22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a4f26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a4f2a:	fabc f28c 	clz	r2, ip
 80a4f2e:	3a08      	subs	r2, #8
 80a4f30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4f34:	db10      	blt.n	80a4f58 <__aeabi_l2f+0x5c>
 80a4f36:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4f3a:	4463      	add	r3, ip
 80a4f3c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4f40:	f1c2 0220 	rsb	r2, r2, #32
 80a4f44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4f48:	fa20 f202 	lsr.w	r2, r0, r2
 80a4f4c:	eb43 0002 	adc.w	r0, r3, r2
 80a4f50:	bf08      	it	eq
 80a4f52:	f020 0001 	biceq.w	r0, r0, #1
 80a4f56:	4770      	bx	lr
 80a4f58:	f102 0220 	add.w	r2, r2, #32
 80a4f5c:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4f60:	f1c2 0220 	rsb	r2, r2, #32
 80a4f64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a4f68:	fa21 f202 	lsr.w	r2, r1, r2
 80a4f6c:	eb43 0002 	adc.w	r0, r3, r2
 80a4f70:	bf08      	it	eq
 80a4f72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4f76:	4770      	bx	lr

080a4f78 <__aeabi_fmul>:
 80a4f78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4f7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4f80:	bf1e      	ittt	ne
 80a4f82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4f86:	ea92 0f0c 	teqne	r2, ip
 80a4f8a:	ea93 0f0c 	teqne	r3, ip
 80a4f8e:	d06f      	beq.n	80a5070 <__aeabi_fmul+0xf8>
 80a4f90:	441a      	add	r2, r3
 80a4f92:	ea80 0c01 	eor.w	ip, r0, r1
 80a4f96:	0240      	lsls	r0, r0, #9
 80a4f98:	bf18      	it	ne
 80a4f9a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a4f9e:	d01e      	beq.n	80a4fde <__aeabi_fmul+0x66>
 80a4fa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a4fa4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a4fa8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a4fac:	fba0 3101 	umull	r3, r1, r0, r1
 80a4fb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4fb4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a4fb8:	bf3e      	ittt	cc
 80a4fba:	0049      	lslcc	r1, r1, #1
 80a4fbc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a4fc0:	005b      	lslcc	r3, r3, #1
 80a4fc2:	ea40 0001 	orr.w	r0, r0, r1
 80a4fc6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a4fca:	2afd      	cmp	r2, #253	; 0xfd
 80a4fcc:	d81d      	bhi.n	80a500a <__aeabi_fmul+0x92>
 80a4fce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a4fd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4fd6:	bf08      	it	eq
 80a4fd8:	f020 0001 	biceq.w	r0, r0, #1
 80a4fdc:	4770      	bx	lr
 80a4fde:	f090 0f00 	teq	r0, #0
 80a4fe2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4fe6:	bf08      	it	eq
 80a4fe8:	0249      	lsleq	r1, r1, #9
 80a4fea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4fee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a4ff2:	3a7f      	subs	r2, #127	; 0x7f
 80a4ff4:	bfc2      	ittt	gt
 80a4ff6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4ffa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4ffe:	4770      	bxgt	lr
 80a5000:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5004:	f04f 0300 	mov.w	r3, #0
 80a5008:	3a01      	subs	r2, #1
 80a500a:	dc5d      	bgt.n	80a50c8 <__aeabi_fmul+0x150>
 80a500c:	f112 0f19 	cmn.w	r2, #25
 80a5010:	bfdc      	itt	le
 80a5012:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a5016:	4770      	bxle	lr
 80a5018:	f1c2 0200 	rsb	r2, r2, #0
 80a501c:	0041      	lsls	r1, r0, #1
 80a501e:	fa21 f102 	lsr.w	r1, r1, r2
 80a5022:	f1c2 0220 	rsb	r2, r2, #32
 80a5026:	fa00 fc02 	lsl.w	ip, r0, r2
 80a502a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a502e:	f140 0000 	adc.w	r0, r0, #0
 80a5032:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a5036:	bf08      	it	eq
 80a5038:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a503c:	4770      	bx	lr
 80a503e:	f092 0f00 	teq	r2, #0
 80a5042:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a5046:	bf02      	ittt	eq
 80a5048:	0040      	lsleq	r0, r0, #1
 80a504a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a504e:	3a01      	subeq	r2, #1
 80a5050:	d0f9      	beq.n	80a5046 <__aeabi_fmul+0xce>
 80a5052:	ea40 000c 	orr.w	r0, r0, ip
 80a5056:	f093 0f00 	teq	r3, #0
 80a505a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a505e:	bf02      	ittt	eq
 80a5060:	0049      	lsleq	r1, r1, #1
 80a5062:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a5066:	3b01      	subeq	r3, #1
 80a5068:	d0f9      	beq.n	80a505e <__aeabi_fmul+0xe6>
 80a506a:	ea41 010c 	orr.w	r1, r1, ip
 80a506e:	e78f      	b.n	80a4f90 <__aeabi_fmul+0x18>
 80a5070:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5074:	ea92 0f0c 	teq	r2, ip
 80a5078:	bf18      	it	ne
 80a507a:	ea93 0f0c 	teqne	r3, ip
 80a507e:	d00a      	beq.n	80a5096 <__aeabi_fmul+0x11e>
 80a5080:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5084:	bf18      	it	ne
 80a5086:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a508a:	d1d8      	bne.n	80a503e <__aeabi_fmul+0xc6>
 80a508c:	ea80 0001 	eor.w	r0, r0, r1
 80a5090:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5094:	4770      	bx	lr
 80a5096:	f090 0f00 	teq	r0, #0
 80a509a:	bf17      	itett	ne
 80a509c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a50a0:	4608      	moveq	r0, r1
 80a50a2:	f091 0f00 	teqne	r1, #0
 80a50a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a50aa:	d014      	beq.n	80a50d6 <__aeabi_fmul+0x15e>
 80a50ac:	ea92 0f0c 	teq	r2, ip
 80a50b0:	d101      	bne.n	80a50b6 <__aeabi_fmul+0x13e>
 80a50b2:	0242      	lsls	r2, r0, #9
 80a50b4:	d10f      	bne.n	80a50d6 <__aeabi_fmul+0x15e>
 80a50b6:	ea93 0f0c 	teq	r3, ip
 80a50ba:	d103      	bne.n	80a50c4 <__aeabi_fmul+0x14c>
 80a50bc:	024b      	lsls	r3, r1, #9
 80a50be:	bf18      	it	ne
 80a50c0:	4608      	movne	r0, r1
 80a50c2:	d108      	bne.n	80a50d6 <__aeabi_fmul+0x15e>
 80a50c4:	ea80 0001 	eor.w	r0, r0, r1
 80a50c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a50cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a50d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a50d4:	4770      	bx	lr
 80a50d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a50da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a50de:	4770      	bx	lr

080a50e0 <__aeabi_fdiv>:
 80a50e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a50e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a50e8:	bf1e      	ittt	ne
 80a50ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a50ee:	ea92 0f0c 	teqne	r2, ip
 80a50f2:	ea93 0f0c 	teqne	r3, ip
 80a50f6:	d069      	beq.n	80a51cc <__aeabi_fdiv+0xec>
 80a50f8:	eba2 0203 	sub.w	r2, r2, r3
 80a50fc:	ea80 0c01 	eor.w	ip, r0, r1
 80a5100:	0249      	lsls	r1, r1, #9
 80a5102:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a5106:	d037      	beq.n	80a5178 <__aeabi_fdiv+0x98>
 80a5108:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a510c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a5110:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a5114:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5118:	428b      	cmp	r3, r1
 80a511a:	bf38      	it	cc
 80a511c:	005b      	lslcc	r3, r3, #1
 80a511e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a5122:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a5126:	428b      	cmp	r3, r1
 80a5128:	bf24      	itt	cs
 80a512a:	1a5b      	subcs	r3, r3, r1
 80a512c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5130:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a5134:	bf24      	itt	cs
 80a5136:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a513a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a513e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a5142:	bf24      	itt	cs
 80a5144:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a5148:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a514c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a5150:	bf24      	itt	cs
 80a5152:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a5156:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a515a:	011b      	lsls	r3, r3, #4
 80a515c:	bf18      	it	ne
 80a515e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a5162:	d1e0      	bne.n	80a5126 <__aeabi_fdiv+0x46>
 80a5164:	2afd      	cmp	r2, #253	; 0xfd
 80a5166:	f63f af50 	bhi.w	80a500a <__aeabi_fmul+0x92>
 80a516a:	428b      	cmp	r3, r1
 80a516c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5170:	bf08      	it	eq
 80a5172:	f020 0001 	biceq.w	r0, r0, #1
 80a5176:	4770      	bx	lr
 80a5178:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a517c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5180:	327f      	adds	r2, #127	; 0x7f
 80a5182:	bfc2      	ittt	gt
 80a5184:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5188:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a518c:	4770      	bxgt	lr
 80a518e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5192:	f04f 0300 	mov.w	r3, #0
 80a5196:	3a01      	subs	r2, #1
 80a5198:	e737      	b.n	80a500a <__aeabi_fmul+0x92>
 80a519a:	f092 0f00 	teq	r2, #0
 80a519e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a51a2:	bf02      	ittt	eq
 80a51a4:	0040      	lsleq	r0, r0, #1
 80a51a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a51aa:	3a01      	subeq	r2, #1
 80a51ac:	d0f9      	beq.n	80a51a2 <__aeabi_fdiv+0xc2>
 80a51ae:	ea40 000c 	orr.w	r0, r0, ip
 80a51b2:	f093 0f00 	teq	r3, #0
 80a51b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a51ba:	bf02      	ittt	eq
 80a51bc:	0049      	lsleq	r1, r1, #1
 80a51be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a51c2:	3b01      	subeq	r3, #1
 80a51c4:	d0f9      	beq.n	80a51ba <__aeabi_fdiv+0xda>
 80a51c6:	ea41 010c 	orr.w	r1, r1, ip
 80a51ca:	e795      	b.n	80a50f8 <__aeabi_fdiv+0x18>
 80a51cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a51d0:	ea92 0f0c 	teq	r2, ip
 80a51d4:	d108      	bne.n	80a51e8 <__aeabi_fdiv+0x108>
 80a51d6:	0242      	lsls	r2, r0, #9
 80a51d8:	f47f af7d 	bne.w	80a50d6 <__aeabi_fmul+0x15e>
 80a51dc:	ea93 0f0c 	teq	r3, ip
 80a51e0:	f47f af70 	bne.w	80a50c4 <__aeabi_fmul+0x14c>
 80a51e4:	4608      	mov	r0, r1
 80a51e6:	e776      	b.n	80a50d6 <__aeabi_fmul+0x15e>
 80a51e8:	ea93 0f0c 	teq	r3, ip
 80a51ec:	d104      	bne.n	80a51f8 <__aeabi_fdiv+0x118>
 80a51ee:	024b      	lsls	r3, r1, #9
 80a51f0:	f43f af4c 	beq.w	80a508c <__aeabi_fmul+0x114>
 80a51f4:	4608      	mov	r0, r1
 80a51f6:	e76e      	b.n	80a50d6 <__aeabi_fmul+0x15e>
 80a51f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a51fc:	bf18      	it	ne
 80a51fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5202:	d1ca      	bne.n	80a519a <__aeabi_fdiv+0xba>
 80a5204:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a5208:	f47f af5c 	bne.w	80a50c4 <__aeabi_fmul+0x14c>
 80a520c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a5210:	f47f af3c 	bne.w	80a508c <__aeabi_fmul+0x114>
 80a5214:	e75f      	b.n	80a50d6 <__aeabi_fmul+0x15e>
 80a5216:	bf00      	nop

080a5218 <__gesf2>:
 80a5218:	f04f 3cff 	mov.w	ip, #4294967295
 80a521c:	e006      	b.n	80a522c <__cmpsf2+0x4>
 80a521e:	bf00      	nop

080a5220 <__lesf2>:
 80a5220:	f04f 0c01 	mov.w	ip, #1
 80a5224:	e002      	b.n	80a522c <__cmpsf2+0x4>
 80a5226:	bf00      	nop

080a5228 <__cmpsf2>:
 80a5228:	f04f 0c01 	mov.w	ip, #1
 80a522c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5230:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a5234:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5238:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a523c:	bf18      	it	ne
 80a523e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5242:	d011      	beq.n	80a5268 <__cmpsf2+0x40>
 80a5244:	b001      	add	sp, #4
 80a5246:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a524a:	bf18      	it	ne
 80a524c:	ea90 0f01 	teqne	r0, r1
 80a5250:	bf58      	it	pl
 80a5252:	ebb2 0003 	subspl.w	r0, r2, r3
 80a5256:	bf88      	it	hi
 80a5258:	17c8      	asrhi	r0, r1, #31
 80a525a:	bf38      	it	cc
 80a525c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a5260:	bf18      	it	ne
 80a5262:	f040 0001 	orrne.w	r0, r0, #1
 80a5266:	4770      	bx	lr
 80a5268:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a526c:	d102      	bne.n	80a5274 <__cmpsf2+0x4c>
 80a526e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a5272:	d105      	bne.n	80a5280 <__cmpsf2+0x58>
 80a5274:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a5278:	d1e4      	bne.n	80a5244 <__cmpsf2+0x1c>
 80a527a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a527e:	d0e1      	beq.n	80a5244 <__cmpsf2+0x1c>
 80a5280:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5284:	4770      	bx	lr
 80a5286:	bf00      	nop

080a5288 <__aeabi_cfrcmple>:
 80a5288:	4684      	mov	ip, r0
 80a528a:	4608      	mov	r0, r1
 80a528c:	4661      	mov	r1, ip
 80a528e:	e7ff      	b.n	80a5290 <__aeabi_cfcmpeq>

080a5290 <__aeabi_cfcmpeq>:
 80a5290:	b50f      	push	{r0, r1, r2, r3, lr}
 80a5292:	f7ff ffc9 	bl	80a5228 <__cmpsf2>
 80a5296:	2800      	cmp	r0, #0
 80a5298:	bf48      	it	mi
 80a529a:	f110 0f00 	cmnmi.w	r0, #0
 80a529e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a52a0 <__aeabi_fcmpeq>:
 80a52a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a52a4:	f7ff fff4 	bl	80a5290 <__aeabi_cfcmpeq>
 80a52a8:	bf0c      	ite	eq
 80a52aa:	2001      	moveq	r0, #1
 80a52ac:	2000      	movne	r0, #0
 80a52ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80a52b2:	bf00      	nop

080a52b4 <__aeabi_fcmplt>:
 80a52b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a52b8:	f7ff ffea 	bl	80a5290 <__aeabi_cfcmpeq>
 80a52bc:	bf34      	ite	cc
 80a52be:	2001      	movcc	r0, #1
 80a52c0:	2000      	movcs	r0, #0
 80a52c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a52c6:	bf00      	nop

080a52c8 <__aeabi_fcmple>:
 80a52c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a52cc:	f7ff ffe0 	bl	80a5290 <__aeabi_cfcmpeq>
 80a52d0:	bf94      	ite	ls
 80a52d2:	2001      	movls	r0, #1
 80a52d4:	2000      	movhi	r0, #0
 80a52d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a52da:	bf00      	nop

080a52dc <__aeabi_fcmpge>:
 80a52dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a52e0:	f7ff ffd2 	bl	80a5288 <__aeabi_cfrcmple>
 80a52e4:	bf94      	ite	ls
 80a52e6:	2001      	movls	r0, #1
 80a52e8:	2000      	movhi	r0, #0
 80a52ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80a52ee:	bf00      	nop

080a52f0 <__aeabi_fcmpgt>:
 80a52f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a52f4:	f7ff ffc8 	bl	80a5288 <__aeabi_cfrcmple>
 80a52f8:	bf34      	ite	cc
 80a52fa:	2001      	movcc	r0, #1
 80a52fc:	2000      	movcs	r0, #0
 80a52fe:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5302:	bf00      	nop

080a5304 <__aeabi_f2uiz>:
 80a5304:	0042      	lsls	r2, r0, #1
 80a5306:	d20e      	bcs.n	80a5326 <__aeabi_f2uiz+0x22>
 80a5308:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a530c:	d30b      	bcc.n	80a5326 <__aeabi_f2uiz+0x22>
 80a530e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a5312:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a5316:	d409      	bmi.n	80a532c <__aeabi_f2uiz+0x28>
 80a5318:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a531c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5320:	fa23 f002 	lsr.w	r0, r3, r2
 80a5324:	4770      	bx	lr
 80a5326:	f04f 0000 	mov.w	r0, #0
 80a532a:	4770      	bx	lr
 80a532c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a5330:	d101      	bne.n	80a5336 <__aeabi_f2uiz+0x32>
 80a5332:	0242      	lsls	r2, r0, #9
 80a5334:	d102      	bne.n	80a533c <__aeabi_f2uiz+0x38>
 80a5336:	f04f 30ff 	mov.w	r0, #4294967295
 80a533a:	4770      	bx	lr
 80a533c:	f04f 0000 	mov.w	r0, #0
 80a5340:	4770      	bx	lr
 80a5342:	bf00      	nop

080a5344 <__cxa_atexit>:
 80a5344:	b510      	push	{r4, lr}
 80a5346:	4c05      	ldr	r4, [pc, #20]	; (80a535c <__cxa_atexit+0x18>)
 80a5348:	4613      	mov	r3, r2
 80a534a:	b12c      	cbz	r4, 80a5358 <__cxa_atexit+0x14>
 80a534c:	460a      	mov	r2, r1
 80a534e:	4601      	mov	r1, r0
 80a5350:	2002      	movs	r0, #2
 80a5352:	f3af 8000 	nop.w
 80a5356:	bd10      	pop	{r4, pc}
 80a5358:	4620      	mov	r0, r4
 80a535a:	bd10      	pop	{r4, pc}
 80a535c:	00000000 	.word	0x00000000

080a5360 <memcpy>:
 80a5360:	b510      	push	{r4, lr}
 80a5362:	1e43      	subs	r3, r0, #1
 80a5364:	440a      	add	r2, r1
 80a5366:	4291      	cmp	r1, r2
 80a5368:	d004      	beq.n	80a5374 <memcpy+0x14>
 80a536a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a536e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a5372:	e7f8      	b.n	80a5366 <memcpy+0x6>
 80a5374:	bd10      	pop	{r4, pc}

080a5376 <memset>:
 80a5376:	4603      	mov	r3, r0
 80a5378:	4402      	add	r2, r0
 80a537a:	4293      	cmp	r3, r2
 80a537c:	d002      	beq.n	80a5384 <memset+0xe>
 80a537e:	f803 1b01 	strb.w	r1, [r3], #1
 80a5382:	e7fa      	b.n	80a537a <memset+0x4>
 80a5384:	4770      	bx	lr

080a5386 <strlen>:
 80a5386:	4603      	mov	r3, r0
 80a5388:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a538c:	2a00      	cmp	r2, #0
 80a538e:	d1fb      	bne.n	80a5388 <strlen+0x2>
 80a5390:	1a18      	subs	r0, r3, r0
 80a5392:	3801      	subs	r0, #1
 80a5394:	4770      	bx	lr

080a5396 <link_code_end>:
	...

080a5398 <dynalib_user>:
 80a5398:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a53a8:	0000 0000                                   ....

080a53ac <_ZTV5Timer>:
	...
 80a53b4:	02b1 080a 02f1 080a 0191 080a 6f4d 6976     ............Movi
 80a53c4:	676e 6220 6361 776b 7261 7364 6120 6e20     ng backwards a n
 80a53d4:	6475 6567 5400 7275 696e 676e 3120 3038     udge.Turning 180
 80a53e4:	4600 4e49 5349 4548 2044 4544 4c41 4e49     .FINISHED DEALIN
 80a53f4:	2047 4957 4854 5420 4548 4c20 4e49 0045     G WITH THE LINE.
 80a5404:	6157 7469 6e69 2067 6f66 2072 7453 7261     Waiting for Star
 80a5414:	0074 7453 7261 6974 676e 6920 206e 2035     t.Starting in 5 
 80a5424:	6573 6f63 646e 2e73 2e2e 4700 214f 4600     seconds....GO!.F
 80a5434:	6c75 206c 654c 7466 5300 616d 6c6c 4c20     ull Left.Small L
 80a5444:	6665 0074 6543 746e 7265 5300 616d 6c6c     eft.Center.Small
 80a5454:	5220 6769 7468 4600 6c75 206c 6952 6867      Right.Full Righ
 80a5464:	0074 5453 504f 4550 0044 6142 6b63 7420     t.STOPPED.Back t
 80a5474:	6972 6767 7265 6465 202c 6f6d 6976 676e     riggered, moving
 80a5484:	6620 726f 6177 6472 5300 6f74 7070 6465      forward.Stopped
 80a5494:	6220 6665 726f 2065 6564 7461 0068 6f44      before death.Do
 80a54a4:	6e69 2067 7546 7a7a 0079 0000               ing Fuzzy...

080a54b0 <_ZTV9LIS3DHI2C>:
	...
 80a54b8:	2361 080a 2363 080a 23b7 080a 236f 080a     a#..c#...#..o#..
 80a54c8:	6564 6976 6563 6e20 746f 6620 756f 646e     device not found
 80a54d8:	7200 7365 7465 6974 676e 6c20 7361 4d74     .resetting lastM
 80a54e8:	766f 6d65 6e65 2074 6e69 3174 735f 6372     ovement int1_src
 80a54f8:	303d 2578 0078 6572 6163 696c 7262 7461     =0x%x.recalibrat
 80a5508:	6e69 0067                                   ing.

080a550c <_ZTV8SPIClass>:
	...
 80a5514:	37a5 080a 37a7 080a 0066 6e6c 6600 006e     .7...7..f.ln.fn.
 80a5524:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
 80a5534:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
 80a5544:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 80a5554:	0069 6564 6174 6c69 2073 203d 6200 7561     i.details = .bau
 80a5564:	0064 6553 6972 6c61 5500 4253 6553 6972     d.Serial.USBSeri
 80a5574:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
 80a5584:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
 80a5594:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
 80a55a4:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
 80a55b4:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
 80a55c4:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
 80a55d4:	7265 6100 7070 6e00 6e6f 0065 7274 6361     er.app.none.trac
 80a55e4:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
 80a55f4:	0072 6170 696e 0063 6c61 006c 005a 2b25     r.panic.all.Z.%+
 80a5604:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a5614:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a5624:	6974 656d 0000 0000                         time....

080a562c <_ZTV9IPAddress>:
	...
 80a5634:	3c0b 080a 3bfd 080a 3bff 080a               .<...;...;..

080a5640 <_ZTV9USBSerial>:
	...
 80a5648:	3c75 080a 3cb9 080a 3c93 080a 397d 080a     u<...<...<..}9..
 80a5658:	3c8d 080a 3c77 080a 3c7f 080a 3cb3 080a     .<..w<...<...<..
 80a5668:	3c87 080a 3c71 080a                         .<..q<..

080a5670 <_ZTV11USARTSerial>:
	...
 80a5678:	3e35 080a 3e59 080a 3e65 080a 397d 080a     5>..Y>..e>..}9..
 80a5688:	3e41 080a 3e4d 080a 3e47 080a 3e53 080a     A>..M>..G>..S>..
 80a5698:	3e37 080a 3e3b 080a                         7>..;>..

080a56a0 <_ZTV7TwoWire>:
	...
 80a56a8:	3f09 080a 3f53 080a 3f2b 080a 3f0b 080a     .?..S?..+?...?..
 80a56b8:	3f33 080a 3f3b 080a 3f43 080a 3f4b 080a     3?..;?..C?..K?..

080a56c8 <_ZTVN5spark9WiFiClassE>:
	...
 80a56d0:	3fdb 080a                                   .?..

080a56d4 <link_const_variable_data_end>:
 80a56d4:	080a16d9 	.word	0x080a16d9
 80a56d8:	080a235d 	.word	0x080a235d
 80a56dc:	080a25b1 	.word	0x080a25b1
 80a56e0:	080a38a1 	.word	0x080a38a1
 80a56e4:	080a3a5d 	.word	0x080a3a5d
 80a56e8:	080a3a6d 	.word	0x080a3a6d
 80a56ec:	080a3fe5 	.word	0x080a3fe5
 80a56f0:	080a40c9 	.word	0x080a40c9
 80a56f4:	080a410d 	.word	0x080a410d
 80a56f8:	080a4189 	.word	0x080a4189
 80a56fc:	080a420d 	.word	0x080a420d
 80a5700:	080a42d1 	.word	0x080a42d1
 80a5704:	080a4395 	.word	0x080a4395

080a5708 <link_constructors_end>:
	...
