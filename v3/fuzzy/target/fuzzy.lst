
C:/src/battlebots-sumo/v3/fuzzy/target/fuzzy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d8  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a54f0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000034  20000300  080a54f4  00030300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000640  20000334  20000334  00040334  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a5528  080a5528  00035528  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a5550  080a5550  00035550  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000994ec  00000000  00000000  00035554  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00010824  00000000  00000000  000cea40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00014fd3  00000000  00000000  000df264  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002170  00000000  00000000  000f4237  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003020  00000000  00000000  000f63a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00025165  00000000  00000000  000f93c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00024a49  00000000  00000000  0011e52c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00087a11  00000000  00000000  00142f75  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bb70  00000000  00000000  001ca988  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	f8 51 0a 08                                         .Q..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f005 f8c7 	bl	80a51c0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f005 f8cc 	bl	80a51d6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a54f4 	.word	0x080a54f4
 80a004c:	20000334 	.word	0x20000334
 80a0050:	20000334 	.word	0x20000334
 80a0054:	20000974 	.word	0x20000974
 80a0058:	20000974 	.word	0x20000974

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f003 fcd9 	bl	80a3a14 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a54b0 	.word	0x080a54b0
 80a0084:	080a54e4 	.word	0x080a54e4

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f001 b85e 	b.w	80a1148 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f001 fa2f 	bl	80a14f0 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f003 bc7b 	b.w	80a3990 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f003 ba9b 	b.w	80a35d4 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f003 baa1 	b.w	80a35e4 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00b2:	6803      	ldr	r3, [r0, #0]
 80a00b4:	4718      	bx	r3

080a00b6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a00b6:	2a01      	cmp	r2, #1
 80a00b8:	d002      	beq.n	80a00c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80a00ba:	2a02      	cmp	r2, #2
 80a00bc:	d002      	beq.n	80a00c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80a00be:	e004      	b.n	80a00ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00c0:	6001      	str	r1, [r0, #0]
	      break;
 80a00c2:	e002      	b.n	80a00ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00c4:	680b      	ldr	r3, [r1, #0]
 80a00c6:	b100      	cbz	r0, 80a00ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80a00c8:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a00ca:	2000      	movs	r0, #0
 80a00cc:	4770      	bx	lr
	...

080a00d0 <_Z5FLISRv>:

// Particle Photon settings
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(MANUAL);

void FLISR() {
 80a00d0:	b508      	push	{r3, lr}
    FLflag = digitalRead(FL);
 80a00d2:	4b05      	ldr	r3, [pc, #20]	; (80a00e8 <_Z5FLISRv+0x18>)
 80a00d4:	8818      	ldrh	r0, [r3, #0]
 80a00d6:	f003 ff13 	bl	80a3f00 <digitalRead>
 80a00da:	4b04      	ldr	r3, [pc, #16]	; (80a00ec <_Z5FLISRv+0x1c>)
 80a00dc:	3000      	adds	r0, #0
 80a00de:	bf18      	it	ne
 80a00e0:	2001      	movne	r0, #1
 80a00e2:	7018      	strb	r0, [r3, #0]
 80a00e4:	bd08      	pop	{r3, pc}
 80a00e6:	bf00      	nop
 80a00e8:	20000318 	.word	0x20000318
 80a00ec:	20000324 	.word	0x20000324

080a00f0 <_Z5FRISRv>:
}

void FRISR() {
 80a00f0:	b508      	push	{r3, lr}
    FRflag = digitalRead(FR);
 80a00f2:	4b05      	ldr	r3, [pc, #20]	; (80a0108 <_Z5FRISRv+0x18>)
 80a00f4:	8818      	ldrh	r0, [r3, #0]
 80a00f6:	f003 ff03 	bl	80a3f00 <digitalRead>
 80a00fa:	4b04      	ldr	r3, [pc, #16]	; (80a010c <_Z5FRISRv+0x1c>)
 80a00fc:	3000      	adds	r0, #0
 80a00fe:	bf18      	it	ne
 80a0100:	2001      	movne	r0, #1
 80a0102:	7018      	strb	r0, [r3, #0]
 80a0104:	bd08      	pop	{r3, pc}
 80a0106:	bf00      	nop
 80a0108:	2000030c 	.word	0x2000030c
 80a010c:	20000325 	.word	0x20000325

080a0110 <_Z5BLISRv>:
}

void BLISR() {
 80a0110:	b508      	push	{r3, lr}
    BLflag = digitalRead(BL);
 80a0112:	4b05      	ldr	r3, [pc, #20]	; (80a0128 <_Z5BLISRv+0x18>)
 80a0114:	8818      	ldrh	r0, [r3, #0]
 80a0116:	f003 fef3 	bl	80a3f00 <digitalRead>
 80a011a:	4b04      	ldr	r3, [pc, #16]	; (80a012c <_Z5BLISRv+0x1c>)
 80a011c:	3000      	adds	r0, #0
 80a011e:	bf18      	it	ne
 80a0120:	2001      	movne	r0, #1
 80a0122:	7018      	strb	r0, [r3, #0]
 80a0124:	bd08      	pop	{r3, pc}
 80a0126:	bf00      	nop
 80a0128:	20000310 	.word	0x20000310
 80a012c:	20000308 	.word	0x20000308

080a0130 <_Z5BRISRv>:
}

void BRISR() {
 80a0130:	b508      	push	{r3, lr}
    BRflag = digitalRead(BR);
 80a0132:	4b05      	ldr	r3, [pc, #20]	; (80a0148 <_Z5BRISRv+0x18>)
 80a0134:	8818      	ldrh	r0, [r3, #0]
 80a0136:	f003 fee3 	bl	80a3f00 <digitalRead>
 80a013a:	4b04      	ldr	r3, [pc, #16]	; (80a014c <_Z5BRISRv+0x1c>)
 80a013c:	3000      	adds	r0, #0
 80a013e:	bf18      	it	ne
 80a0140:	2001      	movne	r0, #1
 80a0142:	7018      	strb	r0, [r3, #0]
 80a0144:	bd08      	pop	{r3, pc}
 80a0146:	bf00      	nop
 80a0148:	20000314 	.word	0x20000314
 80a014c:	2000032c 	.word	0x2000032c

080a0150 <_Z5RSISRv>:
}

void RSISR() {
 80a0150:	b508      	push	{r3, lr}
    RSflag = digitalRead(RS);
 80a0152:	4b05      	ldr	r3, [pc, #20]	; (80a0168 <_Z5RSISRv+0x18>)
 80a0154:	8818      	ldrh	r0, [r3, #0]
 80a0156:	f003 fed3 	bl	80a3f00 <digitalRead>
 80a015a:	4b04      	ldr	r3, [pc, #16]	; (80a016c <_Z5RSISRv+0x1c>)
 80a015c:	3000      	adds	r0, #0
 80a015e:	bf18      	it	ne
 80a0160:	2001      	movne	r0, #1
 80a0162:	7018      	strb	r0, [r3, #0]
 80a0164:	bd08      	pop	{r3, pc}
 80a0166:	bf00      	nop
 80a0168:	20000300 	.word	0x20000300
 80a016c:	2000033e 	.word	0x2000033e

080a0170 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 80a0170:	b507      	push	{r0, r1, r2, lr}
    {
        void* timer_id = NULL;
 80a0172:	2300      	movs	r3, #0
 80a0174:	a902      	add	r1, sp, #8
 80a0176:	f841 3d04 	str.w	r3, [r1, #-4]!
        if (!os_timer_get_id(timer, &timer_id)) {
 80a017a:	f003 f8c9 	bl	80a3310 <os_timer_get_id>
 80a017e:	b920      	cbnz	r0, 80a018a <_ZN5Timer12invoke_timerEPv+0x1a>
            if (timer_id)
 80a0180:	9801      	ldr	r0, [sp, #4]
 80a0182:	b110      	cbz	r0, 80a018a <_ZN5Timer12invoke_timerEPv+0x1a>
                ((Timer*)timer_id)->timeout();
 80a0184:	6803      	ldr	r3, [r0, #0]
 80a0186:	689b      	ldr	r3, [r3, #8]
 80a0188:	4798      	blx	r3
        }
    }
 80a018a:	b003      	add	sp, #12
 80a018c:	f85d fb04 	ldr.w	pc, [sp], #4

080a0190 <_ZN5Timer7timeoutEv>:

    /*
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
 80a0190:	b510      	push	{r4, lr}
    {
		running = true;
 80a0192:	2301      	movs	r3, #1
 80a0194:	7103      	strb	r3, [r0, #4]
        if (callback)
 80a0196:	6943      	ldr	r3, [r0, #20]

    /*
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
 80a0198:	4604      	mov	r4, r0
    {
		running = true;
        if (callback)
 80a019a:	b113      	cbz	r3, 80a01a2 <_ZN5Timer7timeoutEv+0x12>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a019c:	6983      	ldr	r3, [r0, #24]
 80a019e:	300c      	adds	r0, #12
 80a01a0:	4798      	blx	r3
        {
            callback();
        }
        running = false;
 80a01a2:	2300      	movs	r3, #0
 80a01a4:	7123      	strb	r3, [r4, #4]
 80a01a6:	bd10      	pop	{r4, pc}

080a01a8 <_Z8getAccelv>:
void stop() {
  	LESC.writeMicroseconds(1500);
  	RESC.writeMicroseconds(1500);
}

void getAccel() {
 80a01a8:	b510      	push	{r4, lr}
  accel.getSample(sample);
 80a01aa:	4c05      	ldr	r4, [pc, #20]	; (80a01c0 <_Z8getAccelv+0x18>)
 80a01ac:	4805      	ldr	r0, [pc, #20]	; (80a01c4 <_Z8getAccelv+0x1c>)
 80a01ae:	4621      	mov	r1, r4
 80a01b0:	f002 f890 	bl	80a22d4 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
  curAccel = sample.x;
 80a01b4:	f9b4 2000 	ldrsh.w	r2, [r4]
 80a01b8:	4b03      	ldr	r3, [pc, #12]	; (80a01c8 <_Z8getAccelv+0x20>)
 80a01ba:	601a      	str	r2, [r3, #0]
 80a01bc:	bd10      	pop	{r4, pc}
 80a01be:	bf00      	nop
 80a01c0:	20000338 	.word	0x20000338
 80a01c4:	20000354 	.word	0x20000354
 80a01c8:	200003c8 	.word	0x200003c8

080a01cc <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a01cc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a01ce:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a01d0:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a01d2:	b113      	cbz	r3, 80a01da <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a01d4:	2203      	movs	r2, #3
 80a01d6:	4601      	mov	r1, r0
 80a01d8:	4798      	blx	r3
    }
 80a01da:	4620      	mov	r0, r4
 80a01dc:	bd10      	pop	{r4, pc}

080a01de <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
 80a01de:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 80a01e0:	6880      	ldr	r0, [r0, #8]
 80a01e2:	2300      	movs	r3, #0
 80a01e4:	b138      	cbz	r0, 80a01f6 <_ZN5Timer5_stopEjb+0x18>
 80a01e6:	e88d 000a 	stmia.w	sp, {r1, r3}
 80a01ea:	2102      	movs	r1, #2
 80a01ec:	f003 f898 	bl	80a3320 <os_timer_change>
 80a01f0:	fab0 f080 	clz	r0, r0
 80a01f4:	0940      	lsrs	r0, r0, #5
    }
 80a01f6:	b003      	add	sp, #12
 80a01f8:	f85d fb04 	ldr.w	pc, [sp], #4

080a01fc <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80a01fc:	b538      	push	{r3, r4, r5, lr}
 80a01fe:	4b0e      	ldr	r3, [pc, #56]	; (80a0238 <_ZN5TimerD1Ev+0x3c>)
 80a0200:	4604      	mov	r4, r0
 80a0202:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle)
 80a0204:	6883      	ldr	r3, [r0, #8]
 80a0206:	b18b      	cbz	r3, 80a022c <_ZN5TimerD1Ev+0x30>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a0208:	2200      	movs	r2, #0
 80a020a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a020e:	f7ff ffe6 	bl	80a01de <_ZN5Timer5_stopEjb>
    void dispose()
    {
        if (handle)
        	{
        		stop();
        		while (running) {
 80a0212:	7923      	ldrb	r3, [r4, #4]
 80a0214:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a0218:	b11b      	cbz	r3, 80a0222 <_ZN5TimerD1Ev+0x26>
				delay(1);
 80a021a:	2001      	movs	r0, #1
 80a021c:	f003 fb60 	bl	80a38e0 <delay>
 80a0220:	e7f7      	b.n	80a0212 <_ZN5TimerD1Ev+0x16>
			}
        		os_timer_destroy(handle, nullptr);
 80a0222:	4629      	mov	r1, r5
 80a0224:	68a0      	ldr	r0, [r4, #8]
 80a0226:	f003 f86b 	bl	80a3300 <os_timer_destroy>
            handle = nullptr;
 80a022a:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a022c:	f104 000c 	add.w	r0, r4, #12
 80a0230:	f7ff ffcc 	bl	80a01cc <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80a0234:	4620      	mov	r0, r4
 80a0236:	bd38      	pop	{r3, r4, r5, pc}
 80a0238:	080a5214 	.word	0x080a5214

080a023c <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80a023c:	b510      	push	{r4, lr}
 80a023e:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80a0240:	f7ff ffdc 	bl	80a01fc <_ZN5TimerD1Ev>
 80a0244:	4620      	mov	r0, r4
 80a0246:	f7ff ff2a 	bl	80a009e <_ZdlPv>
 80a024a:	4620      	mov	r0, r4
 80a024c:	bd10      	pop	{r4, pc}
	...

080a0250 <_Z8tof_initv>:

void RSISR() {
    RSflag = digitalRead(RS);
}

void tof_init() {
 80a0250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pinMode(A0, OUTPUT);
 80a0254:	2101      	movs	r1, #1
 80a0256:	200a      	movs	r0, #10
 80a0258:	f003 fe28 	bl	80a3eac <pinMode>
    pinMode(A1, OUTPUT);
 80a025c:	2101      	movs	r1, #1
 80a025e:	200b      	movs	r0, #11
 80a0260:	f003 fe24 	bl	80a3eac <pinMode>
    pinMode(A2, OUTPUT);
 80a0264:	2101      	movs	r1, #1
 80a0266:	200c      	movs	r0, #12
 80a0268:	f003 fe20 	bl	80a3eac <pinMode>
    pinMode(A3, OUTPUT);
 80a026c:	2101      	movs	r1, #1
 80a026e:	200d      	movs	r0, #13
 80a0270:	f003 fe1c 	bl	80a3eac <pinMode>
    digitalWrite(A0, LOW);
 80a0274:	2100      	movs	r1, #0
 80a0276:	200a      	movs	r0, #10
 80a0278:	f003 fe29 	bl	80a3ece <digitalWrite>
    digitalWrite(A1, LOW);
 80a027c:	2100      	movs	r1, #0
 80a027e:	200b      	movs	r0, #11
 80a0280:	f003 fe25 	bl	80a3ece <digitalWrite>
    digitalWrite(A2, LOW);
 80a0284:	2100      	movs	r1, #0
 80a0286:	200c      	movs	r0, #12
 80a0288:	f003 fe21 	bl	80a3ece <digitalWrite>
    digitalWrite(A3, LOW);
 80a028c:	2100      	movs	r1, #0
 80a028e:	200d      	movs	r0, #13
 80a0290:	f003 fe1d 	bl	80a3ece <digitalWrite>
    delay(500);
 80a0294:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0298:	f003 fb22 	bl	80a38e0 <delay>

    Wire.setSpeed(CLOCK_SPEED_100KHZ);  // need to initialize i2c protocol after driving shdn pins low
 80a029c:	f003 fe7e 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a02a0:	4940      	ldr	r1, [pc, #256]	; (80a03a4 <_Z8tof_initv+0x154>)
 80a02a2:	f003 fd9f 	bl	80a3de4 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();
 80a02a6:	f003 fe79 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a02aa:	f003 fd9f 	bl	80a3dec <_ZN7TwoWire5beginEv>

    delay(10);
 80a02ae:	200a      	movs	r0, #10
 80a02b0:	f003 fb16 	bl	80a38e0 <delay>
    digitalWrite(A0, HIGH);
 80a02b4:	2101      	movs	r1, #1
 80a02b6:	200a      	movs	r0, #10
 80a02b8:	f003 fe09 	bl	80a3ece <digitalWrite>
    digitalWrite(A1, HIGH);
 80a02bc:	2101      	movs	r1, #1
 80a02be:	200b      	movs	r0, #11
 80a02c0:	f003 fe05 	bl	80a3ece <digitalWrite>
    digitalWrite(A2, HIGH);
 80a02c4:	2101      	movs	r1, #1
 80a02c6:	200c      	movs	r0, #12
 80a02c8:	f003 fe01 	bl	80a3ece <digitalWrite>
    digitalWrite(A3, HIGH);
 80a02cc:	2101      	movs	r1, #1
 80a02ce:	200d      	movs	r0, #13
 80a02d0:	f003 fdfd 	bl	80a3ece <digitalWrite>
    delay(10);
 80a02d4:	200a      	movs	r0, #10
 80a02d6:	f003 fb03 	bl	80a38e0 <delay>
    digitalWrite(A1, LOW);
 80a02da:	2100      	movs	r1, #0
 80a02dc:	200b      	movs	r0, #11
 80a02de:	f003 fdf6 	bl	80a3ece <digitalWrite>
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
 80a02e2:	4f31      	ldr	r7, [pc, #196]	; (80a03a8 <_Z8tof_initv+0x158>)
    digitalWrite(A1, HIGH);
    digitalWrite(A2, HIGH);
    digitalWrite(A3, HIGH);
    delay(10);
    digitalWrite(A1, LOW);
    digitalWrite(A2, LOW);
 80a02e4:	2100      	movs	r1, #0
 80a02e6:	200c      	movs	r0, #12
 80a02e8:	f003 fdf1 	bl	80a3ece <digitalWrite>
    digitalWrite(A3, LOW);
 80a02ec:	2100      	movs	r1, #0
 80a02ee:	200d      	movs	r0, #13
 80a02f0:	f003 fded 	bl	80a3ece <digitalWrite>
    sensor0.init();
 80a02f4:	2101      	movs	r1, #1
 80a02f6:	4638      	mov	r0, r7
 80a02f8:	f001 fcea 	bl	80a1cd0 <_ZN7VL53L0X4initEb>
    void startContinuous(uint32_t period_ms = 0);
    void stopContinuous(void);
    uint16_t readRangeContinuousMillimeters(void);
    uint16_t readRangeSingleMillimeters(void);

    inline void setTimeout(uint16_t timeout) { io_timeout = timeout; }
 80a02fc:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    sensor0.setAddress(0x30);
 80a0300:	2130      	movs	r1, #48	; 0x30
 80a0302:	4638      	mov	r0, r7
 80a0304:	f001 f99b 	bl	80a163e <_ZN7VL53L0X10setAddressEh>
    sensor0.setTimeout(1000);
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
 80a0308:	4e28      	ldr	r6, [pc, #160]	; (80a03ac <_Z8tof_initv+0x15c>)
 80a030a:	f8c7 8004 	str.w	r8, [r7, #4]
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
    sensor0.setAddress(0x30);
    sensor0.setTimeout(1000);
    delay(10);
 80a030e:	200a      	movs	r0, #10
 80a0310:	f003 fae6 	bl	80a38e0 <delay>
    digitalWrite(A1, HIGH);
 80a0314:	2101      	movs	r1, #1
 80a0316:	200b      	movs	r0, #11
 80a0318:	f003 fdd9 	bl	80a3ece <digitalWrite>
    sensor1.init();
 80a031c:	2101      	movs	r1, #1
 80a031e:	4630      	mov	r0, r6
 80a0320:	f001 fcd6 	bl	80a1cd0 <_ZN7VL53L0X4initEb>
    sensor1.setAddress(0x31);
 80a0324:	2131      	movs	r1, #49	; 0x31
 80a0326:	4630      	mov	r0, r6
 80a0328:	f001 f989 	bl	80a163e <_ZN7VL53L0X10setAddressEh>
    sensor1.setTimeout(1000);
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
 80a032c:	4d20      	ldr	r5, [pc, #128]	; (80a03b0 <_Z8tof_initv+0x160>)
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
    sensor1.setAddress(0x31);
    sensor1.setTimeout(1000);
    delay(10);
 80a032e:	200a      	movs	r0, #10
 80a0330:	f8c6 8004 	str.w	r8, [r6, #4]
 80a0334:	f003 fad4 	bl	80a38e0 <delay>
    digitalWrite(A2, HIGH);
 80a0338:	2101      	movs	r1, #1
 80a033a:	200c      	movs	r0, #12
 80a033c:	f003 fdc7 	bl	80a3ece <digitalWrite>
    sensor2.init();
 80a0340:	2101      	movs	r1, #1
 80a0342:	4628      	mov	r0, r5
 80a0344:	f001 fcc4 	bl	80a1cd0 <_ZN7VL53L0X4initEb>
    sensor2.setAddress(0x32);
 80a0348:	2132      	movs	r1, #50	; 0x32
 80a034a:	4628      	mov	r0, r5
 80a034c:	f001 f977 	bl	80a163e <_ZN7VL53L0X10setAddressEh>
    sensor2.setTimeout(1000);
    delay(10);
    digitalWrite(A3, HIGH);
    sensor3.init();
 80a0350:	4c18      	ldr	r4, [pc, #96]	; (80a03b4 <_Z8tof_initv+0x164>)
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
    sensor2.setAddress(0x32);
    sensor2.setTimeout(1000);
    delay(10);
 80a0352:	200a      	movs	r0, #10
 80a0354:	f8c5 8004 	str.w	r8, [r5, #4]
 80a0358:	f003 fac2 	bl	80a38e0 <delay>
    digitalWrite(A3, HIGH);
 80a035c:	2101      	movs	r1, #1
 80a035e:	200d      	movs	r0, #13
 80a0360:	f003 fdb5 	bl	80a3ece <digitalWrite>
    sensor3.init();
 80a0364:	2101      	movs	r1, #1
 80a0366:	4620      	mov	r0, r4
 80a0368:	f001 fcb2 	bl	80a1cd0 <_ZN7VL53L0X4initEb>
    sensor3.setAddress(0x33);
 80a036c:	2133      	movs	r1, #51	; 0x33
 80a036e:	4620      	mov	r0, r4
 80a0370:	f001 f965 	bl	80a163e <_ZN7VL53L0X10setAddressEh>
    sensor3.setTimeout(1000);
    delay(10);
 80a0374:	200a      	movs	r0, #10
 80a0376:	f8c4 8004 	str.w	r8, [r4, #4]
 80a037a:	f003 fab1 	bl	80a38e0 <delay>

    // Start continuous back-to-back mode (take readings as
    // fast as possible).  To use continuous timed mode
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
 80a037e:	4638      	mov	r0, r7
 80a0380:	210a      	movs	r1, #10
 80a0382:	f001 fa78 	bl	80a1876 <_ZN7VL53L0X15startContinuousEm>
    sensor1.startContinuous(10);
 80a0386:	4630      	mov	r0, r6
 80a0388:	210a      	movs	r1, #10
 80a038a:	f001 fa74 	bl	80a1876 <_ZN7VL53L0X15startContinuousEm>
    sensor2.startContinuous(10);
 80a038e:	4628      	mov	r0, r5
 80a0390:	210a      	movs	r1, #10
 80a0392:	f001 fa70 	bl	80a1876 <_ZN7VL53L0X15startContinuousEm>
    sensor3.startContinuous(10);			
 80a0396:	4620      	mov	r0, r4
}
 80a0398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
    sensor1.startContinuous(10);
    sensor2.startContinuous(10);
    sensor3.startContinuous(10);			
 80a039c:	210a      	movs	r1, #10
 80a039e:	f001 ba6a 	b.w	80a1876 <_ZN7VL53L0X15startContinuousEm>
 80a03a2:	bf00      	nop
 80a03a4:	000186a0 	.word	0x000186a0
 80a03a8:	2000036c 	.word	0x2000036c
 80a03ac:	200003ec 	.word	0x200003ec
 80a03b0:	20000384 	.word	0x20000384
 80a03b4:	2000039c 	.word	0x2000039c

080a03b8 <_Z10accel_initv>:
}

void accel_init() {
 80a03b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  LIS3DHConfig config;
 80a03ba:	a801      	add	r0, sp, #4
 80a03bc:	f001 ff5d 	bl	80a227a <_ZN12LIS3DHConfigC1Ev>
  config.setAccelMode(LIS3DH::RATE_400_HZ);
 80a03c0:	2170      	movs	r1, #112	; 0x70
 80a03c2:	a801      	add	r0, sp, #4
 80a03c4:	f001 ff66 	bl	80a2294 <_ZN12LIS3DHConfig12setAccelModeEh>
  accel.setup(config);
 80a03c8:	a901      	add	r1, sp, #4
 80a03ca:	4803      	ldr	r0, [pc, #12]	; (80a03d8 <_Z10accel_initv+0x20>)
 80a03cc:	f001 ffba 	bl	80a2344 <_ZN6LIS3DH5setupER12LIS3DHConfig>
}
 80a03d0:	b005      	add	sp, #20
 80a03d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80a03d6:	bf00      	nop
 80a03d8:	20000354 	.word	0x20000354

080a03dc <_Z11others_initv>:

void others_init() {
 80a03dc:	b508      	push	{r3, lr}
	// Line sensors
  	pinMode(FL, INPUT);
 80a03de:	4b15      	ldr	r3, [pc, #84]	; (80a0434 <_Z11others_initv+0x58>)
 80a03e0:	2100      	movs	r1, #0
 80a03e2:	8818      	ldrh	r0, [r3, #0]
 80a03e4:	f003 fd62 	bl	80a3eac <pinMode>
  	pinMode(FR, INPUT);
 80a03e8:	4b13      	ldr	r3, [pc, #76]	; (80a0438 <_Z11others_initv+0x5c>)
 80a03ea:	2100      	movs	r1, #0
 80a03ec:	8818      	ldrh	r0, [r3, #0]
 80a03ee:	f003 fd5d 	bl	80a3eac <pinMode>
  	pinMode(BL, INPUT);
 80a03f2:	4b12      	ldr	r3, [pc, #72]	; (80a043c <_Z11others_initv+0x60>)
 80a03f4:	2100      	movs	r1, #0
 80a03f6:	8818      	ldrh	r0, [r3, #0]
 80a03f8:	f003 fd58 	bl	80a3eac <pinMode>
  	pinMode(BR, INPUT);
 80a03fc:	4b10      	ldr	r3, [pc, #64]	; (80a0440 <_Z11others_initv+0x64>)
 80a03fe:	2100      	movs	r1, #0
 80a0400:	8818      	ldrh	r0, [r3, #0]
 80a0402:	f003 fd53 	bl	80a3eac <pinMode>
  	// Remote switch
  	pinMode(RS, INPUT);
 80a0406:	4b0f      	ldr	r3, [pc, #60]	; (80a0444 <_Z11others_initv+0x68>)
 80a0408:	2100      	movs	r1, #0
 80a040a:	8818      	ldrh	r0, [r3, #0]
 80a040c:	f003 fd4e 	bl	80a3eac <pinMode>
  	// Car ESCs
  	pinMode(Lmotor, OUTPUT);
 80a0410:	4b0d      	ldr	r3, [pc, #52]	; (80a0448 <_Z11others_initv+0x6c>)
 80a0412:	2101      	movs	r1, #1
 80a0414:	8818      	ldrh	r0, [r3, #0]
 80a0416:	f003 fd49 	bl	80a3eac <pinMode>
  	pinMode(Rmotor, OUTPUT);
 80a041a:	4b0c      	ldr	r3, [pc, #48]	; (80a044c <_Z11others_initv+0x70>)
 80a041c:	2101      	movs	r1, #1
 80a041e:	8818      	ldrh	r0, [r3, #0]
 80a0420:	f003 fd44 	bl	80a3eac <pinMode>

  	// ***Remove for competition***
  	// ***Serial monitor***
  	Serial.begin(9600);	// *** need to modify before comp ***
 80a0424:	f003 fbac 	bl	80a3b80 <_Z16_fetch_usbserialv>
}
 80a0428:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  	pinMode(Lmotor, OUTPUT);
  	pinMode(Rmotor, OUTPUT);

  	// ***Remove for competition***
  	// ***Serial monitor***
  	Serial.begin(9600);	// *** need to modify before comp ***
 80a042c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0430:	f003 bb8c 	b.w	80a3b4c <_ZN9USBSerial5beginEl>
 80a0434:	20000318 	.word	0x20000318
 80a0438:	2000030c 	.word	0x2000030c
 80a043c:	20000310 	.word	0x20000310
 80a0440:	20000314 	.word	0x20000314
 80a0444:	20000300 	.word	0x20000300
 80a0448:	20000328 	.word	0x20000328
 80a044c:	20000320 	.word	0x20000320

080a0450 <_Z14interrupt_initv>:
}

void interrupt_init() {
 80a0450:	b530      	push	{r4, r5, lr}
	// Line sensors
  	attachInterrupt(FL, FLISR, CHANGE);
 80a0452:	4b36      	ldr	r3, [pc, #216]	; (80a052c <_Z14interrupt_initv+0xdc>)
  	// ***Remove for competition***
  	// ***Serial monitor***
  	Serial.begin(9600);	// *** need to modify before comp ***
}

void interrupt_init() {
 80a0454:	b091      	sub	sp, #68	; 0x44
	// Line sensors
  	attachInterrupt(FL, FLISR, CHANGE);
 80a0456:	2400      	movs	r4, #0
 80a0458:	8818      	ldrh	r0, [r3, #0]
 80a045a:	4622      	mov	r2, r4
 80a045c:	f04f 33ff 	mov.w	r3, #4294967295
 80a0460:	4933      	ldr	r1, [pc, #204]	; (80a0530 <_Z14interrupt_initv+0xe0>)
 80a0462:	9400      	str	r4, [sp, #0]
 80a0464:	f003 fbf0 	bl	80a3c48 <_Z15attachInterrupttPFvvE13InterruptModeah>
  	attachInterrupt(FR, FRISR, CHANGE);
 80a0468:	4b32      	ldr	r3, [pc, #200]	; (80a0534 <_Z14interrupt_initv+0xe4>)
 80a046a:	4622      	mov	r2, r4
 80a046c:	8818      	ldrh	r0, [r3, #0]
 80a046e:	4932      	ldr	r1, [pc, #200]	; (80a0538 <_Z14interrupt_initv+0xe8>)
 80a0470:	f04f 33ff 	mov.w	r3, #4294967295
 80a0474:	9400      	str	r4, [sp, #0]
 80a0476:	f003 fbe7 	bl	80a3c48 <_Z15attachInterrupttPFvvE13InterruptModeah>
  	attachInterrupt(BL, BLISR, CHANGE);
 80a047a:	4b30      	ldr	r3, [pc, #192]	; (80a053c <_Z14interrupt_initv+0xec>)
 80a047c:	4622      	mov	r2, r4
 80a047e:	8818      	ldrh	r0, [r3, #0]
 80a0480:	492f      	ldr	r1, [pc, #188]	; (80a0540 <_Z14interrupt_initv+0xf0>)
 80a0482:	f04f 33ff 	mov.w	r3, #4294967295
 80a0486:	9400      	str	r4, [sp, #0]
 80a0488:	f003 fbde 	bl	80a3c48 <_Z15attachInterrupttPFvvE13InterruptModeah>
  	attachInterrupt(BR, BRISR, CHANGE);
 80a048c:	4b2d      	ldr	r3, [pc, #180]	; (80a0544 <_Z14interrupt_initv+0xf4>)
 80a048e:	4622      	mov	r2, r4
 80a0490:	8818      	ldrh	r0, [r3, #0]
 80a0492:	492d      	ldr	r1, [pc, #180]	; (80a0548 <_Z14interrupt_initv+0xf8>)
 80a0494:	f04f 33ff 	mov.w	r3, #4294967295
 80a0498:	9400      	str	r4, [sp, #0]
 80a049a:	f003 fbd5 	bl	80a3c48 <_Z15attachInterrupttPFvvE13InterruptModeah>
  	// Remote switch
  	attachInterrupt(RS, RSISR, CHANGE);
 80a049e:	4b2b      	ldr	r3, [pc, #172]	; (80a054c <_Z14interrupt_initv+0xfc>)
 80a04a0:	4622      	mov	r2, r4
 80a04a2:	8818      	ldrh	r0, [r3, #0]
 80a04a4:	492a      	ldr	r1, [pc, #168]	; (80a0550 <_Z14interrupt_initv+0x100>)
 80a04a6:	f04f 33ff 	mov.w	r3, #4294967295
 80a04aa:	9400      	str	r4, [sp, #0]
 80a04ac:	f003 fbcc 	bl	80a3c48 <_Z15attachInterrupttPFvvE13InterruptModeah>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a04b0:	4b28      	ldr	r3, [pc, #160]	; (80a0554 <_Z14interrupt_initv+0x104>)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a04b2:	aa03      	add	r2, sp, #12
 80a04b4:	9305      	str	r3, [sp, #20]
 80a04b6:	ad05      	add	r5, sp, #20
 80a04b8:	e895 0003 	ldmia.w	r5, {r0, r1}
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80a04bc:	4b26      	ldr	r3, [pc, #152]	; (80a0558 <_Z14interrupt_initv+0x108>)
 80a04be:	e882 0003 	stmia.w	r2, {r0, r1}
 80a04c2:	9309      	str	r3, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 80a04c4:	ab0c      	add	r3, sp, #48	; 0x30
 80a04c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a04ca:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a04ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80a04d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80a04d6:	4b21      	ldr	r3, [pc, #132]	; (80a055c <_Z14interrupt_initv+0x10c>)
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 80a04d8:	4a21      	ldr	r2, [pc, #132]	; (80a0560 <_Z14interrupt_initv+0x110>)
 80a04da:	930e      	str	r3, [sp, #56]	; 0x38
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a04dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a04de:	2164      	movs	r1, #100	; 0x64
 80a04e0:	9308      	str	r3, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
 80a04e2:	4b20      	ldr	r3, [pc, #128]	; (80a0564 <_Z14interrupt_initv+0x114>)
 80a04e4:	9401      	str	r4, [sp, #4]
 80a04e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80a04e8:	9400      	str	r4, [sp, #0]
 80a04ea:	ab09      	add	r3, sp, #36	; 0x24
 80a04ec:	a80b      	add	r0, sp, #44	; 0x2c
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80a04ee:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
 80a04f2:	940b      	str	r4, [sp, #44]	; 0x2c
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a04f4:	9407      	str	r4, [sp, #28]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 80a04f6:	f002 fefb 	bl	80a32f0 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a04fa:	4628      	mov	r0, r5
 80a04fc:	f7ff fe66 	bl	80a01cc <_ZNSt14_Function_baseD1Ev>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a0500:	4622      	mov	r2, r4
 80a0502:	4621      	mov	r1, r4
 80a0504:	a809      	add	r0, sp, #36	; 0x24
 80a0506:	f7ff fe6a 	bl	80a01de <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 80a050a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a050c:	b140      	cbz	r0, 80a0520 <_Z14interrupt_initv+0xd0>
 80a050e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80a0512:	9300      	str	r3, [sp, #0]
 80a0514:	9401      	str	r4, [sp, #4]
 80a0516:	4623      	mov	r3, r4
 80a0518:	4622      	mov	r2, r4
 80a051a:	4621      	mov	r1, r4
 80a051c:	f002 ff00 	bl	80a3320 <os_timer_change>
  	// Accel software timer
  	Timer accelTimer(PRINT_SAMPLE_PERIOD, getAccel); 
 80a0520:	a809      	add	r0, sp, #36	; 0x24
 80a0522:	f7ff fe6b 	bl	80a01fc <_ZN5TimerD1Ev>
  	accelTimer.start();  
}
 80a0526:	b011      	add	sp, #68	; 0x44
 80a0528:	bd30      	pop	{r4, r5, pc}
 80a052a:	bf00      	nop
 80a052c:	20000318 	.word	0x20000318
 80a0530:	080a00d1 	.word	0x080a00d1
 80a0534:	2000030c 	.word	0x2000030c
 80a0538:	080a00f1 	.word	0x080a00f1
 80a053c:	20000310 	.word	0x20000310
 80a0540:	080a0111 	.word	0x080a0111
 80a0544:	20000314 	.word	0x20000314
 80a0548:	080a0131 	.word	0x080a0131
 80a054c:	20000300 	.word	0x20000300
 80a0550:	080a0151 	.word	0x080a0151
 80a0554:	080a01a9 	.word	0x080a01a9
 80a0558:	080a5214 	.word	0x080a5214
 80a055c:	080a00b7 	.word	0x080a00b7
 80a0560:	080a0171 	.word	0x080a0171
 80a0564:	080a00b3 	.word	0x080a00b3

080a0568 <_Z8ESC_initv>:

void ESC_init() {
 80a0568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  	// Necessary for Servo objects
  	LESC.attach(Lmotor);
 80a056a:	4b13      	ldr	r3, [pc, #76]	; (80a05b8 <_Z8ESC_initv+0x50>)
 80a056c:	4d13      	ldr	r5, [pc, #76]	; (80a05bc <_Z8ESC_initv+0x54>)
 80a056e:	2600      	movs	r6, #0
 80a0570:	27b4      	movs	r7, #180	; 0xb4
 80a0572:	8819      	ldrh	r1, [r3, #0]
 80a0574:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a0578:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80a057c:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a0580:	4628      	mov	r0, r5
 80a0582:	f003 f892 	bl	80a36aa <_ZN5Servo6attachEtttss>
  	RESC.attach(Rmotor);
 80a0586:	4c0e      	ldr	r4, [pc, #56]	; (80a05c0 <_Z8ESC_initv+0x58>)
 80a0588:	4b0e      	ldr	r3, [pc, #56]	; (80a05c4 <_Z8ESC_initv+0x5c>)
 80a058a:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a058e:	8819      	ldrh	r1, [r3, #0]
 80a0590:	4620      	mov	r0, r4
 80a0592:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a0596:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80a059a:	f003 f886 	bl	80a36aa <_ZN5Servo6attachEtttss>
  	// Write stop command
  	LESC.writeMicroseconds(1500);
 80a059e:	4628      	mov	r0, r5
 80a05a0:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a05a4:	f003 f84d 	bl	80a3642 <_ZN5Servo17writeMicrosecondsEt>
  	RESC.writeMicroseconds(1500);
 80a05a8:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a05ac:	4620      	mov	r0, r4
}
 80a05ae:	b003      	add	sp, #12
 80a05b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  	// Necessary for Servo objects
  	LESC.attach(Lmotor);
  	RESC.attach(Rmotor);
  	// Write stop command
  	LESC.writeMicroseconds(1500);
  	RESC.writeMicroseconds(1500);
 80a05b4:	f003 b845 	b.w	80a3642 <_ZN5Servo17writeMicrosecondsEt>
 80a05b8:	20000328 	.word	0x20000328
 80a05bc:	20000344 	.word	0x20000344
 80a05c0:	200003b8 	.word	0x200003b8
 80a05c4:	20000320 	.word	0x20000320

080a05c8 <_Z9line_initv>:
}

void line_init() {
 80a05c8:	b508      	push	{r3, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a05ca:	f002 fe89 	bl	80a32e0 <HAL_Timer_Get_Milli_Seconds>
	// moving = true;
	prevFlag = millis();
 80a05ce:	4b01      	ldr	r3, [pc, #4]	; (80a05d4 <_Z9line_initv+0xc>)
 80a05d0:	6018      	str	r0, [r3, #0]
 80a05d2:	bd08      	pop	{r3, pc}
 80a05d4:	200003b4 	.word	0x200003b4

080a05d8 <_Z10robot_initv>:
}

void robot_init() {
 80a05d8:	b510      	push	{r4, lr}
  while(RSflag == LOW) {    // initial LOW
 80a05da:	4c0c      	ldr	r4, [pc, #48]	; (80a060c <_Z10robot_initv+0x34>)
 80a05dc:	7823      	ldrb	r3, [r4, #0]
 80a05de:	b92b      	cbnz	r3, 80a05ec <_Z10robot_initv+0x14>
    Serial.println("Waiting for Start");
 80a05e0:	f003 face 	bl	80a3b80 <_Z16_fetch_usbserialv>
 80a05e4:	490a      	ldr	r1, [pc, #40]	; (80a0610 <_Z10robot_initv+0x38>)
 80a05e6:	f003 f932 	bl	80a384e <_ZN5Print7printlnEPKc>
	// moving = true;
	prevFlag = millis();
}

void robot_init() {
  while(RSflag == LOW) {    // initial LOW
 80a05ea:	e7f7      	b.n	80a05dc <_Z10robot_initv+0x4>
    Serial.println("Waiting for Start");
  }
  Serial.println("Starting in 5 seconds...");
 80a05ec:	f003 fac8 	bl	80a3b80 <_Z16_fetch_usbserialv>
 80a05f0:	4908      	ldr	r1, [pc, #32]	; (80a0614 <_Z10robot_initv+0x3c>)
 80a05f2:	f003 f92c 	bl	80a384e <_ZN5Print7printlnEPKc>
  delay(5000);
 80a05f6:	f241 3088 	movw	r0, #5000	; 0x1388
 80a05fa:	f003 f971 	bl	80a38e0 <delay>
  Serial.println("GO!");    
 80a05fe:	f003 fabf 	bl	80a3b80 <_Z16_fetch_usbserialv>
}
 80a0602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  while(RSflag == LOW) {    // initial LOW
    Serial.println("Waiting for Start");
  }
  Serial.println("Starting in 5 seconds...");
  delay(5000);
  Serial.println("GO!");    
 80a0606:	4904      	ldr	r1, [pc, #16]	; (80a0618 <_Z10robot_initv+0x40>)
 80a0608:	f003 b921 	b.w	80a384e <_ZN5Print7printlnEPKc>
 80a060c:	2000033e 	.word	0x2000033e
 80a0610:	080a5220 	.word	0x080a5220
 80a0614:	080a5232 	.word	0x080a5232
 80a0618:	080a524b 	.word	0x080a524b

080a061c <_Z10fuzzy_initv>:
}

void fuzzy_init() {
 80a061c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // low = far, high = close

  // INPUT: 1 of 4
  FuzzyInput* LL_input = new FuzzyInput(1);
 80a0620:	2010      	movs	r0, #16
  Serial.println("Starting in 5 seconds...");
  delay(5000);
  Serial.println("GO!");    
}

void fuzzy_init() {
 80a0622:	b099      	sub	sp, #100	; 0x64
  // low = far, high = close

  // INPUT: 1 of 4
  FuzzyInput* LL_input = new FuzzyInput(1);
 80a0624:	f7ff fd39 	bl	80a009a <_Znwj>
 80a0628:	4605      	mov	r5, r0
 80a062a:	b110      	cbz	r0, 80a0632 <_Z10fuzzy_initv+0x16>
 80a062c:	2101      	movs	r1, #1
 80a062e:	f002 f926 	bl	80a287e <_ZN10FuzzyInputC1Ei>
  FuzzySet* LL_low = new FuzzySet(low1, low2, low3, low4);
 80a0632:	2014      	movs	r0, #20
 80a0634:	f7ff fd31 	bl	80a009a <_Znwj>
 80a0638:	4606      	mov	r6, r0
 80a063a:	b138      	cbz	r0, 80a064c <_Z10fuzzy_initv+0x30>
 80a063c:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 80a0640:	9300      	str	r3, [sp, #0]
 80a0642:	4aa6      	ldr	r2, [pc, #664]	; (80a08dc <_Z10fuzzy_initv+0x2c0>)
 80a0644:	4ba6      	ldr	r3, [pc, #664]	; (80a08e0 <_Z10fuzzy_initv+0x2c4>)
 80a0646:	49a7      	ldr	r1, [pc, #668]	; (80a08e4 <_Z10fuzzy_initv+0x2c8>)
 80a0648:	f002 fb95 	bl	80a2d76 <_ZN8FuzzySetC1Effff>
  FuzzySet* LL_med = new FuzzySet(med1, med2, med3, med4);
 80a064c:	2014      	movs	r0, #20
 80a064e:	f7ff fd24 	bl	80a009a <_Znwj>
 80a0652:	4681      	mov	r9, r0
 80a0654:	b130      	cbz	r0, 80a0664 <_Z10fuzzy_initv+0x48>
 80a0656:	4ba4      	ldr	r3, [pc, #656]	; (80a08e8 <_Z10fuzzy_initv+0x2cc>)
 80a0658:	4aa4      	ldr	r2, [pc, #656]	; (80a08ec <_Z10fuzzy_initv+0x2d0>)
 80a065a:	9300      	str	r3, [sp, #0]
 80a065c:	49a4      	ldr	r1, [pc, #656]	; (80a08f0 <_Z10fuzzy_initv+0x2d4>)
 80a065e:	4ba5      	ldr	r3, [pc, #660]	; (80a08f4 <_Z10fuzzy_initv+0x2d8>)
 80a0660:	f002 fb89 	bl	80a2d76 <_ZN8FuzzySetC1Effff>
  FuzzySet* LL_high = new FuzzySet(high1, high2, high3, high4);
 80a0664:	2014      	movs	r0, #20
 80a0666:	f7ff fd18 	bl	80a009a <_Znwj>
 80a066a:	4680      	mov	r8, r0
 80a066c:	b130      	cbz	r0, 80a067c <_Z10fuzzy_initv+0x60>
 80a066e:	4ba2      	ldr	r3, [pc, #648]	; (80a08f8 <_Z10fuzzy_initv+0x2dc>)
 80a0670:	4aa2      	ldr	r2, [pc, #648]	; (80a08fc <_Z10fuzzy_initv+0x2e0>)
 80a0672:	9300      	str	r3, [sp, #0]
 80a0674:	2100      	movs	r1, #0
 80a0676:	4ba2      	ldr	r3, [pc, #648]	; (80a0900 <_Z10fuzzy_initv+0x2e4>)
 80a0678:	f002 fb7d 	bl	80a2d76 <_ZN8FuzzySetC1Effff>
  LL_input->addFuzzySet(LL_low);
 80a067c:	4631      	mov	r1, r6
 80a067e:	4628      	mov	r0, r5
 80a0680:	f002 f919 	bl	80a28b6 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  LL_input->addFuzzySet(LL_med);
  LL_input->addFuzzySet(LL_high);
  fuzzy->addFuzzyInput(LL_input);
 80a0684:	4c9f      	ldr	r4, [pc, #636]	; (80a0904 <_Z10fuzzy_initv+0x2e8>)
  FuzzyInput* LL_input = new FuzzyInput(1);
  FuzzySet* LL_low = new FuzzySet(low1, low2, low3, low4);
  FuzzySet* LL_med = new FuzzySet(med1, med2, med3, med4);
  FuzzySet* LL_high = new FuzzySet(high1, high2, high3, high4);
  LL_input->addFuzzySet(LL_low);
  LL_input->addFuzzySet(LL_med);
 80a0686:	4649      	mov	r1, r9
 80a0688:	4628      	mov	r0, r5
 80a068a:	f002 f914 	bl	80a28b6 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  LL_input->addFuzzySet(LL_high);
 80a068e:	4641      	mov	r1, r8
 80a0690:	4628      	mov	r0, r5
 80a0692:	f002 f910 	bl	80a28b6 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyInput(LL_input);
 80a0696:	4629      	mov	r1, r5
 80a0698:	6820      	ldr	r0, [r4, #0]
 80a069a:	f002 fc40 	bl	80a2f1e <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>

  // INPUT: 2 of 4
  FuzzyInput* LM_input = new FuzzyInput(2);
 80a069e:	2010      	movs	r0, #16
 80a06a0:	f7ff fcfb 	bl	80a009a <_Znwj>
 80a06a4:	4605      	mov	r5, r0
 80a06a6:	b110      	cbz	r0, 80a06ae <_Z10fuzzy_initv+0x92>
 80a06a8:	2102      	movs	r1, #2
 80a06aa:	f002 f8e8 	bl	80a287e <_ZN10FuzzyInputC1Ei>
  FuzzySet* LM_low = new FuzzySet(low1, low2, low3, low4);
 80a06ae:	2014      	movs	r0, #20
 80a06b0:	f7ff fcf3 	bl	80a009a <_Znwj>
 80a06b4:	4607      	mov	r7, r0
 80a06b6:	b138      	cbz	r0, 80a06c8 <_Z10fuzzy_initv+0xac>
 80a06b8:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 80a06bc:	9300      	str	r3, [sp, #0]
 80a06be:	4a87      	ldr	r2, [pc, #540]	; (80a08dc <_Z10fuzzy_initv+0x2c0>)
 80a06c0:	4b87      	ldr	r3, [pc, #540]	; (80a08e0 <_Z10fuzzy_initv+0x2c4>)
 80a06c2:	4988      	ldr	r1, [pc, #544]	; (80a08e4 <_Z10fuzzy_initv+0x2c8>)
 80a06c4:	f002 fb57 	bl	80a2d76 <_ZN8FuzzySetC1Effff>
  FuzzySet* LM_med = new FuzzySet(med1, med2, med3, med4);
 80a06c8:	2014      	movs	r0, #20
 80a06ca:	f7ff fce6 	bl	80a009a <_Znwj>
 80a06ce:	4682      	mov	sl, r0
 80a06d0:	b130      	cbz	r0, 80a06e0 <_Z10fuzzy_initv+0xc4>
 80a06d2:	4b85      	ldr	r3, [pc, #532]	; (80a08e8 <_Z10fuzzy_initv+0x2cc>)
 80a06d4:	4a85      	ldr	r2, [pc, #532]	; (80a08ec <_Z10fuzzy_initv+0x2d0>)
 80a06d6:	9300      	str	r3, [sp, #0]
 80a06d8:	4985      	ldr	r1, [pc, #532]	; (80a08f0 <_Z10fuzzy_initv+0x2d4>)
 80a06da:	4b86      	ldr	r3, [pc, #536]	; (80a08f4 <_Z10fuzzy_initv+0x2d8>)
 80a06dc:	f002 fb4b 	bl	80a2d76 <_ZN8FuzzySetC1Effff>
  FuzzySet* LM_high = new FuzzySet(high1, high2, high3, high4);
 80a06e0:	2014      	movs	r0, #20
 80a06e2:	f7ff fcda 	bl	80a009a <_Znwj>
 80a06e6:	4683      	mov	fp, r0
 80a06e8:	b130      	cbz	r0, 80a06f8 <_Z10fuzzy_initv+0xdc>
 80a06ea:	4b83      	ldr	r3, [pc, #524]	; (80a08f8 <_Z10fuzzy_initv+0x2dc>)
 80a06ec:	4a83      	ldr	r2, [pc, #524]	; (80a08fc <_Z10fuzzy_initv+0x2e0>)
 80a06ee:	9300      	str	r3, [sp, #0]
 80a06f0:	2100      	movs	r1, #0
 80a06f2:	4b83      	ldr	r3, [pc, #524]	; (80a0900 <_Z10fuzzy_initv+0x2e4>)
 80a06f4:	f002 fb3f 	bl	80a2d76 <_ZN8FuzzySetC1Effff>
  LM_input->addFuzzySet(LM_low);
 80a06f8:	4639      	mov	r1, r7
 80a06fa:	4628      	mov	r0, r5
 80a06fc:	f002 f8db 	bl	80a28b6 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  LM_input->addFuzzySet(LM_med);
 80a0700:	4651      	mov	r1, sl
 80a0702:	4628      	mov	r0, r5
 80a0704:	f002 f8d7 	bl	80a28b6 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  LM_input->addFuzzySet(LM_high);
 80a0708:	4659      	mov	r1, fp
 80a070a:	4628      	mov	r0, r5
 80a070c:	f002 f8d3 	bl	80a28b6 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyInput(LM_input);
 80a0710:	4629      	mov	r1, r5
 80a0712:	6820      	ldr	r0, [r4, #0]
 80a0714:	f002 fc03 	bl	80a2f1e <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>

  // INPUT: 3 of 4
  FuzzyInput* RM_input = new FuzzyInput(3);
 80a0718:	2010      	movs	r0, #16
 80a071a:	f7ff fcbe 	bl	80a009a <_Znwj>
 80a071e:	4605      	mov	r5, r0
 80a0720:	b110      	cbz	r0, 80a0728 <_Z10fuzzy_initv+0x10c>
 80a0722:	2103      	movs	r1, #3
 80a0724:	f002 f8ab 	bl	80a287e <_ZN10FuzzyInputC1Ei>
  FuzzySet* RM_low = new FuzzySet(low1, low2, low3, low4);
 80a0728:	2014      	movs	r0, #20
 80a072a:	f7ff fcb6 	bl	80a009a <_Znwj>
 80a072e:	9008      	str	r0, [sp, #32]
 80a0730:	b138      	cbz	r0, 80a0742 <_Z10fuzzy_initv+0x126>
 80a0732:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 80a0736:	9300      	str	r3, [sp, #0]
 80a0738:	4a68      	ldr	r2, [pc, #416]	; (80a08dc <_Z10fuzzy_initv+0x2c0>)
 80a073a:	4b69      	ldr	r3, [pc, #420]	; (80a08e0 <_Z10fuzzy_initv+0x2c4>)
 80a073c:	4969      	ldr	r1, [pc, #420]	; (80a08e4 <_Z10fuzzy_initv+0x2c8>)
 80a073e:	f002 fb1a 	bl	80a2d76 <_ZN8FuzzySetC1Effff>
  FuzzySet* RM_med = new FuzzySet(med1, med2, med3, med4);
 80a0742:	2014      	movs	r0, #20
 80a0744:	f7ff fca9 	bl	80a009a <_Znwj>
 80a0748:	9009      	str	r0, [sp, #36]	; 0x24
 80a074a:	b130      	cbz	r0, 80a075a <_Z10fuzzy_initv+0x13e>
 80a074c:	4b66      	ldr	r3, [pc, #408]	; (80a08e8 <_Z10fuzzy_initv+0x2cc>)
 80a074e:	4a67      	ldr	r2, [pc, #412]	; (80a08ec <_Z10fuzzy_initv+0x2d0>)
 80a0750:	9300      	str	r3, [sp, #0]
 80a0752:	4967      	ldr	r1, [pc, #412]	; (80a08f0 <_Z10fuzzy_initv+0x2d4>)
 80a0754:	4b67      	ldr	r3, [pc, #412]	; (80a08f4 <_Z10fuzzy_initv+0x2d8>)
 80a0756:	f002 fb0e 	bl	80a2d76 <_ZN8FuzzySetC1Effff>
  FuzzySet* RM_high = new FuzzySet(high1, high2, high3, high4);
 80a075a:	2014      	movs	r0, #20
 80a075c:	f7ff fc9d 	bl	80a009a <_Znwj>
 80a0760:	900a      	str	r0, [sp, #40]	; 0x28
 80a0762:	b130      	cbz	r0, 80a0772 <_Z10fuzzy_initv+0x156>
 80a0764:	4b64      	ldr	r3, [pc, #400]	; (80a08f8 <_Z10fuzzy_initv+0x2dc>)
 80a0766:	4a65      	ldr	r2, [pc, #404]	; (80a08fc <_Z10fuzzy_initv+0x2e0>)
 80a0768:	9300      	str	r3, [sp, #0]
 80a076a:	2100      	movs	r1, #0
 80a076c:	4b64      	ldr	r3, [pc, #400]	; (80a0900 <_Z10fuzzy_initv+0x2e4>)
 80a076e:	f002 fb02 	bl	80a2d76 <_ZN8FuzzySetC1Effff>
  RM_input->addFuzzySet(RM_low);
 80a0772:	9908      	ldr	r1, [sp, #32]
 80a0774:	4628      	mov	r0, r5
 80a0776:	f002 f89e 	bl	80a28b6 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  RM_input->addFuzzySet(RM_med);
 80a077a:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a077c:	4628      	mov	r0, r5
 80a077e:	f002 f89a 	bl	80a28b6 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  RM_input->addFuzzySet(RM_high);
 80a0782:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a0784:	4628      	mov	r0, r5
 80a0786:	f002 f896 	bl	80a28b6 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyInput(RM_input);
 80a078a:	4629      	mov	r1, r5
 80a078c:	6820      	ldr	r0, [r4, #0]
 80a078e:	f002 fbc6 	bl	80a2f1e <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>

  // INPUT: 4 of 4
  FuzzyInput* RR_input = new FuzzyInput(4);
 80a0792:	2010      	movs	r0, #16
 80a0794:	f7ff fc81 	bl	80a009a <_Znwj>
 80a0798:	4604      	mov	r4, r0
 80a079a:	b110      	cbz	r0, 80a07a2 <_Z10fuzzy_initv+0x186>
 80a079c:	2104      	movs	r1, #4
 80a079e:	f002 f86e 	bl	80a287e <_ZN10FuzzyInputC1Ei>
  FuzzySet* RR_low = new FuzzySet(low1, low2, low3, low4);
 80a07a2:	2014      	movs	r0, #20
 80a07a4:	f7ff fc79 	bl	80a009a <_Znwj>
 80a07a8:	4605      	mov	r5, r0
 80a07aa:	b138      	cbz	r0, 80a07bc <_Z10fuzzy_initv+0x1a0>
 80a07ac:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 80a07b0:	9300      	str	r3, [sp, #0]
 80a07b2:	4a4a      	ldr	r2, [pc, #296]	; (80a08dc <_Z10fuzzy_initv+0x2c0>)
 80a07b4:	4b4a      	ldr	r3, [pc, #296]	; (80a08e0 <_Z10fuzzy_initv+0x2c4>)
 80a07b6:	494b      	ldr	r1, [pc, #300]	; (80a08e4 <_Z10fuzzy_initv+0x2c8>)
 80a07b8:	f002 fadd 	bl	80a2d76 <_ZN8FuzzySetC1Effff>
  FuzzySet* RR_med = new FuzzySet(med1, med2, med3, med4);
 80a07bc:	2014      	movs	r0, #20
 80a07be:	f7ff fc6c 	bl	80a009a <_Znwj>
 80a07c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80a07c4:	b130      	cbz	r0, 80a07d4 <_Z10fuzzy_initv+0x1b8>
 80a07c6:	4b48      	ldr	r3, [pc, #288]	; (80a08e8 <_Z10fuzzy_initv+0x2cc>)
 80a07c8:	4a48      	ldr	r2, [pc, #288]	; (80a08ec <_Z10fuzzy_initv+0x2d0>)
 80a07ca:	9300      	str	r3, [sp, #0]
 80a07cc:	4948      	ldr	r1, [pc, #288]	; (80a08f0 <_Z10fuzzy_initv+0x2d4>)
 80a07ce:	4b49      	ldr	r3, [pc, #292]	; (80a08f4 <_Z10fuzzy_initv+0x2d8>)
 80a07d0:	f002 fad1 	bl	80a2d76 <_ZN8FuzzySetC1Effff>
  FuzzySet* RR_high = new FuzzySet(high1, high2, high3, high4);
 80a07d4:	2014      	movs	r0, #20
 80a07d6:	f7ff fc60 	bl	80a009a <_Znwj>
 80a07da:	900c      	str	r0, [sp, #48]	; 0x30
 80a07dc:	b130      	cbz	r0, 80a07ec <_Z10fuzzy_initv+0x1d0>
 80a07de:	4b46      	ldr	r3, [pc, #280]	; (80a08f8 <_Z10fuzzy_initv+0x2dc>)
 80a07e0:	4a46      	ldr	r2, [pc, #280]	; (80a08fc <_Z10fuzzy_initv+0x2e0>)
 80a07e2:	9300      	str	r3, [sp, #0]
 80a07e4:	2100      	movs	r1, #0
 80a07e6:	4b46      	ldr	r3, [pc, #280]	; (80a0900 <_Z10fuzzy_initv+0x2e4>)
 80a07e8:	f002 fac5 	bl	80a2d76 <_ZN8FuzzySetC1Effff>
  RR_input->addFuzzySet(RR_low);
 80a07ec:	4629      	mov	r1, r5
 80a07ee:	4620      	mov	r0, r4
 80a07f0:	f002 f861 	bl	80a28b6 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  RR_input->addFuzzySet(RR_med);
 80a07f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80a07f6:	4620      	mov	r0, r4
 80a07f8:	f002 f85d 	bl	80a28b6 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  RR_input->addFuzzySet(RR_high);
 80a07fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a07fe:	4620      	mov	r0, r4
 80a0800:	f002 f859 	bl	80a28b6 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyInput(RR_input);
 80a0804:	4b3f      	ldr	r3, [pc, #252]	; (80a0904 <_Z10fuzzy_initv+0x2e8>)
 80a0806:	4621      	mov	r1, r4
 80a0808:	6818      	ldr	r0, [r3, #0]
 80a080a:	f002 fb88 	bl	80a2f1e <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>

  // OUTPUT: 1 of 1 (Test 1 *********************************)
  FuzzyOutput* drive_state = new FuzzyOutput(1);
 80a080e:	2018      	movs	r0, #24
 80a0810:	f7ff fc43 	bl	80a009a <_Znwj>
 80a0814:	4604      	mov	r4, r0
 80a0816:	b110      	cbz	r0, 80a081e <_Z10fuzzy_initv+0x202>
 80a0818:	2101      	movs	r1, #1
 80a081a:	f002 f868 	bl	80a28ee <_ZN11FuzzyOutputC1Ei>
  FuzzySet* full_left = new FuzzySet(0, 5, 15, 20);
 80a081e:	2014      	movs	r0, #20
 80a0820:	f7ff fc3b 	bl	80a009a <_Znwj>
 80a0824:	900f      	str	r0, [sp, #60]	; 0x3c
 80a0826:	b130      	cbz	r0, 80a0836 <_Z10fuzzy_initv+0x21a>
 80a0828:	4b37      	ldr	r3, [pc, #220]	; (80a0908 <_Z10fuzzy_initv+0x2ec>)
 80a082a:	4a38      	ldr	r2, [pc, #224]	; (80a090c <_Z10fuzzy_initv+0x2f0>)
 80a082c:	9300      	str	r3, [sp, #0]
 80a082e:	2100      	movs	r1, #0
 80a0830:	4b37      	ldr	r3, [pc, #220]	; (80a0910 <_Z10fuzzy_initv+0x2f4>)
 80a0832:	f002 faa0 	bl	80a2d76 <_ZN8FuzzySetC1Effff>
  FuzzySet* small_left = new FuzzySet(25, 30, 35, 40);
 80a0836:	2014      	movs	r0, #20
 80a0838:	f7ff fc2f 	bl	80a009a <_Znwj>
 80a083c:	9010      	str	r0, [sp, #64]	; 0x40
 80a083e:	b130      	cbz	r0, 80a084e <_Z10fuzzy_initv+0x232>
 80a0840:	4b34      	ldr	r3, [pc, #208]	; (80a0914 <_Z10fuzzy_initv+0x2f8>)
 80a0842:	4a35      	ldr	r2, [pc, #212]	; (80a0918 <_Z10fuzzy_initv+0x2fc>)
 80a0844:	9300      	str	r3, [sp, #0]
 80a0846:	4935      	ldr	r1, [pc, #212]	; (80a091c <_Z10fuzzy_initv+0x300>)
 80a0848:	4b35      	ldr	r3, [pc, #212]	; (80a0920 <_Z10fuzzy_initv+0x304>)
 80a084a:	f002 fa94 	bl	80a2d76 <_ZN8FuzzySetC1Effff>
  FuzzySet* center = new FuzzySet(45, 50, 55, 60);
 80a084e:	2014      	movs	r0, #20
 80a0850:	f7ff fc23 	bl	80a009a <_Znwj>
 80a0854:	9011      	str	r0, [sp, #68]	; 0x44
 80a0856:	b130      	cbz	r0, 80a0866 <_Z10fuzzy_initv+0x24a>
 80a0858:	4b32      	ldr	r3, [pc, #200]	; (80a0924 <_Z10fuzzy_initv+0x308>)
 80a085a:	4a33      	ldr	r2, [pc, #204]	; (80a0928 <_Z10fuzzy_initv+0x30c>)
 80a085c:	9300      	str	r3, [sp, #0]
 80a085e:	4933      	ldr	r1, [pc, #204]	; (80a092c <_Z10fuzzy_initv+0x310>)
 80a0860:	4b33      	ldr	r3, [pc, #204]	; (80a0930 <_Z10fuzzy_initv+0x314>)
 80a0862:	f002 fa88 	bl	80a2d76 <_ZN8FuzzySetC1Effff>
  FuzzySet* small_right = new FuzzySet(65, 70, 75, 80);
 80a0866:	2014      	movs	r0, #20
 80a0868:	f7ff fc17 	bl	80a009a <_Znwj>
 80a086c:	9012      	str	r0, [sp, #72]	; 0x48
 80a086e:	b130      	cbz	r0, 80a087e <_Z10fuzzy_initv+0x262>
 80a0870:	4b30      	ldr	r3, [pc, #192]	; (80a0934 <_Z10fuzzy_initv+0x318>)
 80a0872:	4a31      	ldr	r2, [pc, #196]	; (80a0938 <_Z10fuzzy_initv+0x31c>)
 80a0874:	9300      	str	r3, [sp, #0]
 80a0876:	4931      	ldr	r1, [pc, #196]	; (80a093c <_Z10fuzzy_initv+0x320>)
 80a0878:	4b31      	ldr	r3, [pc, #196]	; (80a0940 <_Z10fuzzy_initv+0x324>)
 80a087a:	f002 fa7c 	bl	80a2d76 <_ZN8FuzzySetC1Effff>
  FuzzySet* full_right = new FuzzySet(85, 90, 95, 100);
 80a087e:	2014      	movs	r0, #20
 80a0880:	f7ff fc0b 	bl	80a009a <_Znwj>
 80a0884:	9013      	str	r0, [sp, #76]	; 0x4c
 80a0886:	b130      	cbz	r0, 80a0896 <_Z10fuzzy_initv+0x27a>
 80a0888:	4b2e      	ldr	r3, [pc, #184]	; (80a0944 <_Z10fuzzy_initv+0x328>)
 80a088a:	4a2f      	ldr	r2, [pc, #188]	; (80a0948 <_Z10fuzzy_initv+0x32c>)
 80a088c:	9300      	str	r3, [sp, #0]
 80a088e:	492f      	ldr	r1, [pc, #188]	; (80a094c <_Z10fuzzy_initv+0x330>)
 80a0890:	4b2f      	ldr	r3, [pc, #188]	; (80a0950 <_Z10fuzzy_initv+0x334>)
 80a0892:	f002 fa70 	bl	80a2d76 <_ZN8FuzzySetC1Effff>
  drive_state->addFuzzySet(full_left);
 80a0896:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a0898:	4620      	mov	r0, r4
 80a089a:	f002 f80c 	bl	80a28b6 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  drive_state->addFuzzySet(small_left);
 80a089e:	9910      	ldr	r1, [sp, #64]	; 0x40
 80a08a0:	4620      	mov	r0, r4
 80a08a2:	f002 f808 	bl	80a28b6 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  drive_state->addFuzzySet(center);
 80a08a6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a08a8:	4620      	mov	r0, r4
 80a08aa:	f002 f804 	bl	80a28b6 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  drive_state->addFuzzySet(small_right);
 80a08ae:	9912      	ldr	r1, [sp, #72]	; 0x48
 80a08b0:	4620      	mov	r0, r4
 80a08b2:	f002 f800 	bl	80a28b6 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  drive_state->addFuzzySet(full_right);
 80a08b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a08b8:	4620      	mov	r0, r4
 80a08ba:	f001 fffc 	bl	80a28b6 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>
  fuzzy->addFuzzyOutput(drive_state);
 80a08be:	4b11      	ldr	r3, [pc, #68]	; (80a0904 <_Z10fuzzy_initv+0x2e8>)
 80a08c0:	4621      	mov	r1, r4
 80a08c2:	6818      	ldr	r0, [r3, #0]
 80a08c4:	f002 fb3e 	bl	80a2f44 <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput>

  // Building Left FuzzyRuleAntecedents (ALL COMBINATIONS)
  FuzzyRuleAntecedent* left_low_high = new FuzzyRuleAntecedent();
 80a08c8:	2018      	movs	r0, #24
 80a08ca:	f7ff fbe6 	bl	80a009a <_Znwj>
 80a08ce:	900e      	str	r0, [sp, #56]	; 0x38
 80a08d0:	2800      	cmp	r0, #0
 80a08d2:	d03f      	beq.n	80a0954 <_Z10fuzzy_initv+0x338>
 80a08d4:	f002 fbae 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
 80a08d8:	e03c      	b.n	80a0954 <_Z10fuzzy_initv+0x338>
 80a08da:	bf00      	nop
 80a08dc:	447a0000 	.word	0x447a0000
 80a08e0:	448e8000 	.word	0x448e8000
 80a08e4:	44570000 	.word	0x44570000
 80a08e8:	44548000 	.word	0x44548000
 80a08ec:	440e8000 	.word	0x440e8000
 80a08f0:	43d70000 	.word	0x43d70000
 80a08f4:	44318000 	.word	0x44318000
 80a08f8:	43d20000 	.word	0x43d20000
 80a08fc:	430c0000 	.word	0x430c0000
 80a0900:	438c0000 	.word	0x438c0000
 80a0904:	20000368 	.word	0x20000368
 80a0908:	41a00000 	.word	0x41a00000
 80a090c:	40a00000 	.word	0x40a00000
 80a0910:	41700000 	.word	0x41700000
 80a0914:	42200000 	.word	0x42200000
 80a0918:	41f00000 	.word	0x41f00000
 80a091c:	41c80000 	.word	0x41c80000
 80a0920:	420c0000 	.word	0x420c0000
 80a0924:	42700000 	.word	0x42700000
 80a0928:	42480000 	.word	0x42480000
 80a092c:	42340000 	.word	0x42340000
 80a0930:	425c0000 	.word	0x425c0000
 80a0934:	42a00000 	.word	0x42a00000
 80a0938:	428c0000 	.word	0x428c0000
 80a093c:	42820000 	.word	0x42820000
 80a0940:	42960000 	.word	0x42960000
 80a0944:	42c80000 	.word	0x42c80000
 80a0948:	42b40000 	.word	0x42b40000
 80a094c:	42aa0000 	.word	0x42aa0000
 80a0950:	42be0000 	.word	0x42be0000
  left_low_high->joinWithAND(LL_low, LM_high);
 80a0954:	465a      	mov	r2, fp
 80a0956:	4631      	mov	r1, r6
 80a0958:	980e      	ldr	r0, [sp, #56]	; 0x38
 80a095a:	f002 fb73 	bl	80a3044 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_med_high = new FuzzyRuleAntecedent();
 80a095e:	2018      	movs	r0, #24
 80a0960:	f7ff fb9b 	bl	80a009a <_Znwj>
 80a0964:	9004      	str	r0, [sp, #16]
 80a0966:	b108      	cbz	r0, 80a096c <_Z10fuzzy_initv+0x350>
 80a0968:	f002 fb64 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_med_high->joinWithAND(LL_med, LM_high);
 80a096c:	465a      	mov	r2, fp
 80a096e:	4649      	mov	r1, r9
 80a0970:	9804      	ldr	r0, [sp, #16]
 80a0972:	f002 fb67 	bl	80a3044 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_low_med = new FuzzyRuleAntecedent();
 80a0976:	2018      	movs	r0, #24
 80a0978:	f7ff fb8f 	bl	80a009a <_Znwj>
 80a097c:	9005      	str	r0, [sp, #20]
 80a097e:	b108      	cbz	r0, 80a0984 <_Z10fuzzy_initv+0x368>
 80a0980:	f002 fb58 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_low_med->joinWithAND(LL_low, LM_med);
 80a0984:	4652      	mov	r2, sl
 80a0986:	4631      	mov	r1, r6
 80a0988:	9805      	ldr	r0, [sp, #20]
 80a098a:	f002 fb5b 	bl	80a3044 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_med_med = new FuzzyRuleAntecedent();
 80a098e:	2018      	movs	r0, #24
 80a0990:	f7ff fb83 	bl	80a009a <_Znwj>
 80a0994:	9003      	str	r0, [sp, #12]
 80a0996:	b108      	cbz	r0, 80a099c <_Z10fuzzy_initv+0x380>
 80a0998:	f002 fb4c 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_med_med->joinWithAND(LL_med, LM_med);
 80a099c:	4652      	mov	r2, sl
 80a099e:	4649      	mov	r1, r9
 80a09a0:	9803      	ldr	r0, [sp, #12]
 80a09a2:	f002 fb4f 	bl	80a3044 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_high_high = new FuzzyRuleAntecedent();
 80a09a6:	2018      	movs	r0, #24
 80a09a8:	f7ff fb77 	bl	80a009a <_Znwj>
 80a09ac:	900d      	str	r0, [sp, #52]	; 0x34
 80a09ae:	b108      	cbz	r0, 80a09b4 <_Z10fuzzy_initv+0x398>
 80a09b0:	f002 fb40 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_high_high->joinWithAND(LL_high, LM_high);
 80a09b4:	465a      	mov	r2, fp
 80a09b6:	4641      	mov	r1, r8
 80a09b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a09ba:	f002 fb43 	bl	80a3044 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_high_med = new FuzzyRuleAntecedent();
 80a09be:	2018      	movs	r0, #24
 80a09c0:	f7ff fb6b 	bl	80a009a <_Znwj>
 80a09c4:	9014      	str	r0, [sp, #80]	; 0x50
 80a09c6:	b108      	cbz	r0, 80a09cc <_Z10fuzzy_initv+0x3b0>
 80a09c8:	f002 fb34 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_high_med->joinWithAND(LL_high, LM_med);
 80a09cc:	4652      	mov	r2, sl
 80a09ce:	4641      	mov	r1, r8
 80a09d0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80a09d2:	f002 fb37 	bl	80a3044 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_med_low = new FuzzyRuleAntecedent();
 80a09d6:	2018      	movs	r0, #24
 80a09d8:	f7ff fb5f 	bl	80a009a <_Znwj>
 80a09dc:	9015      	str	r0, [sp, #84]	; 0x54
 80a09de:	b108      	cbz	r0, 80a09e4 <_Z10fuzzy_initv+0x3c8>
 80a09e0:	f002 fb28 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_med_low->joinWithAND(LL_med, LM_low);
 80a09e4:	463a      	mov	r2, r7
 80a09e6:	4649      	mov	r1, r9
 80a09e8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80a09ea:	f002 fb2b 	bl	80a3044 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_high_low = new FuzzyRuleAntecedent();
 80a09ee:	2018      	movs	r0, #24
 80a09f0:	f7ff fb53 	bl	80a009a <_Znwj>
 80a09f4:	9016      	str	r0, [sp, #88]	; 0x58
 80a09f6:	b108      	cbz	r0, 80a09fc <_Z10fuzzy_initv+0x3e0>
 80a09f8:	f002 fb1c 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_high_low->joinWithAND(LL_high, LM_low);
 80a09fc:	4641      	mov	r1, r8
 80a09fe:	463a      	mov	r2, r7
 80a0a00:	9816      	ldr	r0, [sp, #88]	; 0x58
 80a0a02:	f002 fb1f 	bl	80a3044 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* left_low_low = new FuzzyRuleAntecedent();
 80a0a06:	2018      	movs	r0, #24
 80a0a08:	f7ff fb47 	bl	80a009a <_Znwj>
 80a0a0c:	4680      	mov	r8, r0
 80a0a0e:	b108      	cbz	r0, 80a0a14 <_Z10fuzzy_initv+0x3f8>
 80a0a10:	f002 fb10 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  left_low_low->joinWithAND(LL_low, LM_low);
 80a0a14:	4631      	mov	r1, r6
 80a0a16:	463a      	mov	r2, r7
 80a0a18:	4640      	mov	r0, r8
 80a0a1a:	f002 fb13 	bl	80a3044 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>

  // Building Right FuzzyRuleAntecedents
  FuzzyRuleAntecedent* right_high_low = new FuzzyRuleAntecedent();
 80a0a1e:	2018      	movs	r0, #24
 80a0a20:	f7ff fb3b 	bl	80a009a <_Znwj>
 80a0a24:	4606      	mov	r6, r0
 80a0a26:	b108      	cbz	r0, 80a0a2c <_Z10fuzzy_initv+0x410>
 80a0a28:	f002 fb04 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_high_low->joinWithAND(RM_high, RR_low);
 80a0a2c:	462a      	mov	r2, r5
 80a0a2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a0a30:	4630      	mov	r0, r6
 80a0a32:	f002 fb07 	bl	80a3044 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_high_med = new FuzzyRuleAntecedent();
 80a0a36:	2018      	movs	r0, #24
 80a0a38:	f7ff fb2f 	bl	80a009a <_Znwj>
 80a0a3c:	9006      	str	r0, [sp, #24]
 80a0a3e:	b108      	cbz	r0, 80a0a44 <_Z10fuzzy_initv+0x428>
 80a0a40:	f002 faf8 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_high_med->joinWithAND(RM_high, RR_med);
 80a0a44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a0a46:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a0a48:	9806      	ldr	r0, [sp, #24]
 80a0a4a:	f002 fafb 	bl	80a3044 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_med_low = new FuzzyRuleAntecedent();
 80a0a4e:	2018      	movs	r0, #24
 80a0a50:	f7ff fb23 	bl	80a009a <_Znwj>
 80a0a54:	9007      	str	r0, [sp, #28]
 80a0a56:	b108      	cbz	r0, 80a0a5c <_Z10fuzzy_initv+0x440>
 80a0a58:	f002 faec 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_med_low->joinWithAND(RM_med, RR_low);
 80a0a5c:	462a      	mov	r2, r5
 80a0a5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0a60:	9807      	ldr	r0, [sp, #28]
 80a0a62:	f002 faef 	bl	80a3044 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_low_med = new FuzzyRuleAntecedent();
 80a0a66:	2018      	movs	r0, #24
 80a0a68:	f7ff fb17 	bl	80a009a <_Znwj>
 80a0a6c:	9017      	str	r0, [sp, #92]	; 0x5c
 80a0a6e:	b108      	cbz	r0, 80a0a74 <_Z10fuzzy_initv+0x458>
 80a0a70:	f002 fae0 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_low_med->joinWithAND(RM_low, RR_med);
 80a0a74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a0a76:	9908      	ldr	r1, [sp, #32]
 80a0a78:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80a0a7a:	f002 fae3 	bl	80a3044 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_low_low = new FuzzyRuleAntecedent();
 80a0a7e:	2018      	movs	r0, #24
 80a0a80:	f7ff fb0b 	bl	80a009a <_Znwj>
 80a0a84:	4604      	mov	r4, r0
 80a0a86:	b108      	cbz	r0, 80a0a8c <_Z10fuzzy_initv+0x470>
 80a0a88:	f002 fad4 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_low_low->joinWithAND(RM_low, RR_low);
 80a0a8c:	462a      	mov	r2, r5
 80a0a8e:	9908      	ldr	r1, [sp, #32]
 80a0a90:	4620      	mov	r0, r4
 80a0a92:	f002 fad7 	bl	80a3044 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_med_med = new FuzzyRuleAntecedent();
 80a0a96:	2018      	movs	r0, #24
 80a0a98:	f7ff faff 	bl	80a009a <_Znwj>
 80a0a9c:	4683      	mov	fp, r0
 80a0a9e:	b108      	cbz	r0, 80a0aa4 <_Z10fuzzy_initv+0x488>
 80a0aa0:	f002 fac8 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_med_med->joinWithAND(RM_med, RR_med);
 80a0aa4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a0aa6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0aa8:	4658      	mov	r0, fp
 80a0aaa:	f002 facb 	bl	80a3044 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_low_high = new FuzzyRuleAntecedent();
 80a0aae:	2018      	movs	r0, #24
 80a0ab0:	f7ff faf3 	bl	80a009a <_Znwj>
 80a0ab4:	900b      	str	r0, [sp, #44]	; 0x2c
 80a0ab6:	b108      	cbz	r0, 80a0abc <_Z10fuzzy_initv+0x4a0>
 80a0ab8:	f002 fabc 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_low_high->joinWithAND(RM_low, RR_high);
 80a0abc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a0abe:	9908      	ldr	r1, [sp, #32]
 80a0ac0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a0ac2:	f002 fabf 	bl	80a3044 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_high_high = new FuzzyRuleAntecedent();
 80a0ac6:	2018      	movs	r0, #24
 80a0ac8:	f7ff fae7 	bl	80a009a <_Znwj>
 80a0acc:	9008      	str	r0, [sp, #32]
 80a0ace:	b108      	cbz	r0, 80a0ad4 <_Z10fuzzy_initv+0x4b8>
 80a0ad0:	f002 fab0 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_high_high->joinWithAND(RM_high, RR_high);
 80a0ad4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a0ad6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a0ad8:	9808      	ldr	r0, [sp, #32]
 80a0ada:	f002 fab3 	bl	80a3044 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>
  FuzzyRuleAntecedent* right_med_high = new FuzzyRuleAntecedent();
 80a0ade:	2018      	movs	r0, #24
 80a0ae0:	f7ff fadb 	bl	80a009a <_Znwj>
 80a0ae4:	900a      	str	r0, [sp, #40]	; 0x28
 80a0ae6:	b108      	cbz	r0, 80a0aec <_Z10fuzzy_initv+0x4d0>
 80a0ae8:	f002 faa4 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  right_med_high->joinWithAND(RM_med, RR_high);
 80a0aec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a0aee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0af0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a0af2:	f002 faa7 	bl	80a3044 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>

  // Building drive FuzzyRuleConsequents (Test 1 *********************************)
  // NOTE: you can add multiple outputs to 1 consequent
  FuzzyRuleConsequent* drive_center = new FuzzyRuleConsequent();
 80a0af6:	2008      	movs	r0, #8
 80a0af8:	f7ff facf 	bl	80a009a <_Znwj>
 80a0afc:	4681      	mov	r9, r0
 80a0afe:	b108      	cbz	r0, 80a0b04 <_Z10fuzzy_initv+0x4e8>
 80a0b00:	f002 f9e2 	bl	80a2ec8 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_center->addOutput(center);
 80a0b04:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a0b06:	4648      	mov	r0, r9
 80a0b08:	f002 f9e2 	bl	80a2ed0 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  FuzzyRuleConsequent* drive_small_left = new FuzzyRuleConsequent();
 80a0b0c:	2008      	movs	r0, #8
 80a0b0e:	f7ff fac4 	bl	80a009a <_Znwj>
 80a0b12:	4607      	mov	r7, r0
 80a0b14:	b108      	cbz	r0, 80a0b1a <_Z10fuzzy_initv+0x4fe>
 80a0b16:	f002 f9d7 	bl	80a2ec8 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_small_left->addOutput(small_left);  
 80a0b1a:	9910      	ldr	r1, [sp, #64]	; 0x40
 80a0b1c:	4638      	mov	r0, r7
 80a0b1e:	f002 f9d7 	bl	80a2ed0 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  FuzzyRuleConsequent* drive_full_left = new FuzzyRuleConsequent();
 80a0b22:	2008      	movs	r0, #8
 80a0b24:	f7ff fab9 	bl	80a009a <_Znwj>
 80a0b28:	9009      	str	r0, [sp, #36]	; 0x24
 80a0b2a:	b108      	cbz	r0, 80a0b30 <_Z10fuzzy_initv+0x514>
 80a0b2c:	f002 f9cc 	bl	80a2ec8 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_full_left->addOutput(full_left);
 80a0b30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a0b32:	9809      	ldr	r0, [sp, #36]	; 0x24
 80a0b34:	f002 f9cc 	bl	80a2ed0 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  FuzzyRuleConsequent* drive_full_right = new FuzzyRuleConsequent();
 80a0b38:	2008      	movs	r0, #8
 80a0b3a:	f7ff faae 	bl	80a009a <_Znwj>
 80a0b3e:	900c      	str	r0, [sp, #48]	; 0x30
 80a0b40:	b108      	cbz	r0, 80a0b46 <_Z10fuzzy_initv+0x52a>
 80a0b42:	f002 f9c1 	bl	80a2ec8 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_full_right->addOutput(full_right);
 80a0b46:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a0b48:	980c      	ldr	r0, [sp, #48]	; 0x30
 80a0b4a:	f002 f9c1 	bl	80a2ed0 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>
  FuzzyRuleConsequent* drive_small_right = new FuzzyRuleConsequent();
 80a0b4e:	2008      	movs	r0, #8
 80a0b50:	f7ff faa3 	bl	80a009a <_Znwj>
 80a0b54:	4605      	mov	r5, r0
 80a0b56:	b108      	cbz	r0, 80a0b5c <_Z10fuzzy_initv+0x540>
 80a0b58:	f002 f9b6 	bl	80a2ec8 <_ZN19FuzzyRuleConsequentC1Ev>
  drive_small_right->addOutput(small_right);
 80a0b5c:	9912      	ldr	r1, [sp, #72]	; 0x48
 80a0b5e:	4628      	mov	r0, r5
 80a0b60:	f002 f9b6 	bl	80a2ed0 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>

  // Building Complete FuzzyRuleAntedecents (Test 1 *********************************)
  // Combining (2) Left and (2) Right antecedents, merging with (1) drive consequent
  // And adding the FuzzyRules
  FuzzyRuleAntecedent* LHHL = new FuzzyRuleAntecedent();
 80a0b64:	2018      	movs	r0, #24
 80a0b66:	f7ff fa98 	bl	80a009a <_Znwj>
 80a0b6a:	4682      	mov	sl, r0
 80a0b6c:	b108      	cbz	r0, 80a0b72 <_Z10fuzzy_initv+0x556>
 80a0b6e:	f002 fa61 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  LHHL->joinWithAND(left_low_high, right_high_low);
 80a0b72:	4632      	mov	r2, r6
 80a0b74:	990e      	ldr	r1, [sp, #56]	; 0x38
 80a0b76:	4650      	mov	r0, sl
 80a0b78:	f002 fa73 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr1 = new FuzzyRule(1, LHHL, drive_center);
 80a0b7c:	2010      	movs	r0, #16
 80a0b7e:	f7ff fa8c 	bl	80a009a <_Znwj>
 80a0b82:	900f      	str	r0, [sp, #60]	; 0x3c
 80a0b84:	b120      	cbz	r0, 80a0b90 <_Z10fuzzy_initv+0x574>
 80a0b86:	464b      	mov	r3, r9
 80a0b88:	4652      	mov	r2, sl
 80a0b8a:	2101      	movs	r1, #1
 80a0b8c:	f001 fc42 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr1);
 80a0b90:	4bb5      	ldr	r3, [pc, #724]	; (80a0e68 <_Z10fuzzy_initv+0x84c>)
 80a0b92:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a0b94:	6818      	ldr	r0, [r3, #0]
 80a0b96:	f002 f9ed 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MHHL = new FuzzyRuleAntecedent();
 80a0b9a:	2018      	movs	r0, #24
 80a0b9c:	f7ff fa7d 	bl	80a009a <_Znwj>
 80a0ba0:	4682      	mov	sl, r0
 80a0ba2:	b108      	cbz	r0, 80a0ba8 <_Z10fuzzy_initv+0x58c>
 80a0ba4:	f002 fa46 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  MHHL->joinWithAND(left_med_high, right_high_low);
 80a0ba8:	4632      	mov	r2, r6
 80a0baa:	9904      	ldr	r1, [sp, #16]
 80a0bac:	4650      	mov	r0, sl
 80a0bae:	f002 fa58 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr2 = new FuzzyRule(2, MHHL, drive_center);
 80a0bb2:	2010      	movs	r0, #16
 80a0bb4:	f7ff fa71 	bl	80a009a <_Znwj>
 80a0bb8:	4606      	mov	r6, r0
 80a0bba:	b120      	cbz	r0, 80a0bc6 <_Z10fuzzy_initv+0x5aa>
 80a0bbc:	464b      	mov	r3, r9
 80a0bbe:	4652      	mov	r2, sl
 80a0bc0:	2102      	movs	r1, #2
 80a0bc2:	f001 fc27 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr2); 
 80a0bc6:	4ba8      	ldr	r3, [pc, #672]	; (80a0e68 <_Z10fuzzy_initv+0x84c>)
 80a0bc8:	4631      	mov	r1, r6
 80a0bca:	6818      	ldr	r0, [r3, #0]
 80a0bcc:	f002 f9d2 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LHHM = new FuzzyRuleAntecedent();
 80a0bd0:	2018      	movs	r0, #24
 80a0bd2:	f7ff fa62 	bl	80a009a <_Znwj>
 80a0bd6:	4606      	mov	r6, r0
 80a0bd8:	b108      	cbz	r0, 80a0bde <_Z10fuzzy_initv+0x5c2>
 80a0bda:	f002 fa2b 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  LHHM->joinWithAND(left_low_high, right_high_med);
 80a0bde:	9a06      	ldr	r2, [sp, #24]
 80a0be0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80a0be2:	4630      	mov	r0, r6
 80a0be4:	f002 fa3d 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr3 = new FuzzyRule(3, LHHM, drive_center);
 80a0be8:	2010      	movs	r0, #16
 80a0bea:	f7ff fa56 	bl	80a009a <_Znwj>
 80a0bee:	4682      	mov	sl, r0
 80a0bf0:	b120      	cbz	r0, 80a0bfc <_Z10fuzzy_initv+0x5e0>
 80a0bf2:	464b      	mov	r3, r9
 80a0bf4:	4632      	mov	r2, r6
 80a0bf6:	2103      	movs	r1, #3
 80a0bf8:	f001 fc0c 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr3);
 80a0bfc:	4b9a      	ldr	r3, [pc, #616]	; (80a0e68 <_Z10fuzzy_initv+0x84c>)
 80a0bfe:	4651      	mov	r1, sl
 80a0c00:	6818      	ldr	r0, [r3, #0]
 80a0c02:	f002 f9b7 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMML = new FuzzyRuleAntecedent();
 80a0c06:	2018      	movs	r0, #24
 80a0c08:	f7ff fa47 	bl	80a009a <_Znwj>
 80a0c0c:	4606      	mov	r6, r0
 80a0c0e:	b108      	cbz	r0, 80a0c14 <_Z10fuzzy_initv+0x5f8>
 80a0c10:	f002 fa10 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  LMML->joinWithAND(left_low_med, right_med_low);
 80a0c14:	9a07      	ldr	r2, [sp, #28]
 80a0c16:	9905      	ldr	r1, [sp, #20]
 80a0c18:	4630      	mov	r0, r6
 80a0c1a:	f002 fa22 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr4 = new FuzzyRule(4, LMML, drive_center);
 80a0c1e:	2010      	movs	r0, #16
 80a0c20:	f7ff fa3b 	bl	80a009a <_Znwj>
 80a0c24:	4682      	mov	sl, r0
 80a0c26:	b120      	cbz	r0, 80a0c32 <_Z10fuzzy_initv+0x616>
 80a0c28:	464b      	mov	r3, r9
 80a0c2a:	4632      	mov	r2, r6
 80a0c2c:	2104      	movs	r1, #4
 80a0c2e:	f001 fbf1 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr4);
 80a0c32:	4b8d      	ldr	r3, [pc, #564]	; (80a0e68 <_Z10fuzzy_initv+0x84c>)
 80a0c34:	4651      	mov	r1, sl
 80a0c36:	6818      	ldr	r0, [r3, #0]
 80a0c38:	f002 f99c 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMMM = new FuzzyRuleAntecedent();
 80a0c3c:	2018      	movs	r0, #24
 80a0c3e:	f7ff fa2c 	bl	80a009a <_Znwj>
 80a0c42:	4606      	mov	r6, r0
 80a0c44:	b108      	cbz	r0, 80a0c4a <_Z10fuzzy_initv+0x62e>
 80a0c46:	f002 f9f5 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  MMMM->joinWithAND(left_med_med, right_med_med);
 80a0c4a:	465a      	mov	r2, fp
 80a0c4c:	9903      	ldr	r1, [sp, #12]
 80a0c4e:	4630      	mov	r0, r6
 80a0c50:	f002 fa07 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr5 = new FuzzyRule(5, MMMM, drive_center);
 80a0c54:	2010      	movs	r0, #16
 80a0c56:	f7ff fa20 	bl	80a009a <_Znwj>
 80a0c5a:	4682      	mov	sl, r0
 80a0c5c:	b120      	cbz	r0, 80a0c68 <_Z10fuzzy_initv+0x64c>
 80a0c5e:	464b      	mov	r3, r9
 80a0c60:	4632      	mov	r2, r6
 80a0c62:	2105      	movs	r1, #5
 80a0c64:	f001 fbd6 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr5);
 80a0c68:	4b7f      	ldr	r3, [pc, #508]	; (80a0e68 <_Z10fuzzy_initv+0x84c>)
 80a0c6a:	4651      	mov	r1, sl
 80a0c6c:	6818      	ldr	r0, [r3, #0]
 80a0c6e:	f002 f981 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HHLL = new FuzzyRuleAntecedent();
 80a0c72:	2018      	movs	r0, #24
 80a0c74:	f7ff fa11 	bl	80a009a <_Znwj>
 80a0c78:	4606      	mov	r6, r0
 80a0c7a:	b108      	cbz	r0, 80a0c80 <_Z10fuzzy_initv+0x664>
 80a0c7c:	f002 f9da 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  HHLL->joinWithAND(left_high_high, right_low_low);
 80a0c80:	4622      	mov	r2, r4
 80a0c82:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a0c84:	4630      	mov	r0, r6
 80a0c86:	f002 f9ec 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr6 = new FuzzyRule(6, HHLL, drive_small_left);
 80a0c8a:	2010      	movs	r0, #16
 80a0c8c:	f7ff fa05 	bl	80a009a <_Znwj>
 80a0c90:	4682      	mov	sl, r0
 80a0c92:	b120      	cbz	r0, 80a0c9e <_Z10fuzzy_initv+0x682>
 80a0c94:	463b      	mov	r3, r7
 80a0c96:	4632      	mov	r2, r6
 80a0c98:	2106      	movs	r1, #6
 80a0c9a:	f001 fbbb 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr6);
 80a0c9e:	4b72      	ldr	r3, [pc, #456]	; (80a0e68 <_Z10fuzzy_initv+0x84c>)
 80a0ca0:	4651      	mov	r1, sl
 80a0ca2:	6818      	ldr	r0, [r3, #0]
 80a0ca4:	f002 f966 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HHML = new FuzzyRuleAntecedent();
 80a0ca8:	2018      	movs	r0, #24
 80a0caa:	f7ff f9f6 	bl	80a009a <_Znwj>
 80a0cae:	4606      	mov	r6, r0
 80a0cb0:	b108      	cbz	r0, 80a0cb6 <_Z10fuzzy_initv+0x69a>
 80a0cb2:	f002 f9bf 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  HHML->joinWithAND(left_high_high, right_med_low);
 80a0cb6:	9a07      	ldr	r2, [sp, #28]
 80a0cb8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a0cba:	4630      	mov	r0, r6
 80a0cbc:	f002 f9d1 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr7 = new FuzzyRule(6, HHML, drive_small_left);
 80a0cc0:	2010      	movs	r0, #16
 80a0cc2:	f7ff f9ea 	bl	80a009a <_Znwj>
 80a0cc6:	4682      	mov	sl, r0
 80a0cc8:	b120      	cbz	r0, 80a0cd4 <_Z10fuzzy_initv+0x6b8>
 80a0cca:	463b      	mov	r3, r7
 80a0ccc:	4632      	mov	r2, r6
 80a0cce:	2106      	movs	r1, #6
 80a0cd0:	f001 fba0 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr7);
 80a0cd4:	4b64      	ldr	r3, [pc, #400]	; (80a0e68 <_Z10fuzzy_initv+0x84c>)
 80a0cd6:	4651      	mov	r1, sl
 80a0cd8:	6818      	ldr	r0, [r3, #0]
 80a0cda:	f002 f94b 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HHMM = new FuzzyRuleAntecedent();
 80a0cde:	2018      	movs	r0, #24
 80a0ce0:	f7ff f9db 	bl	80a009a <_Znwj>
 80a0ce4:	4606      	mov	r6, r0
 80a0ce6:	b108      	cbz	r0, 80a0cec <_Z10fuzzy_initv+0x6d0>
 80a0ce8:	f002 f9a4 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  HHMM->joinWithAND(left_high_high, right_med_med);
 80a0cec:	465a      	mov	r2, fp
 80a0cee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a0cf0:	4630      	mov	r0, r6
 80a0cf2:	f002 f9b6 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr8 = new FuzzyRule(8, HHMM, drive_small_left);
 80a0cf6:	2010      	movs	r0, #16
 80a0cf8:	f7ff f9cf 	bl	80a009a <_Znwj>
 80a0cfc:	4682      	mov	sl, r0
 80a0cfe:	b120      	cbz	r0, 80a0d0a <_Z10fuzzy_initv+0x6ee>
 80a0d00:	463b      	mov	r3, r7
 80a0d02:	4632      	mov	r2, r6
 80a0d04:	2108      	movs	r1, #8
 80a0d06:	f001 fb85 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr8);
 80a0d0a:	4b57      	ldr	r3, [pc, #348]	; (80a0e68 <_Z10fuzzy_initv+0x84c>)
 80a0d0c:	4651      	mov	r1, sl
 80a0d0e:	6818      	ldr	r0, [r3, #0]
 80a0d10:	f002 f930 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MHMM = new FuzzyRuleAntecedent();
 80a0d14:	2018      	movs	r0, #24
 80a0d16:	f7ff f9c0 	bl	80a009a <_Znwj>
 80a0d1a:	4606      	mov	r6, r0
 80a0d1c:	b108      	cbz	r0, 80a0d22 <_Z10fuzzy_initv+0x706>
 80a0d1e:	f002 f989 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  MHMM->joinWithAND(left_med_high, right_med_med);
 80a0d22:	465a      	mov	r2, fp
 80a0d24:	9904      	ldr	r1, [sp, #16]
 80a0d26:	4630      	mov	r0, r6
 80a0d28:	f002 f99b 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr9 = new FuzzyRule(9, MHMM, drive_small_left);
 80a0d2c:	2010      	movs	r0, #16
 80a0d2e:	f7ff f9b4 	bl	80a009a <_Znwj>
 80a0d32:	4682      	mov	sl, r0
 80a0d34:	b120      	cbz	r0, 80a0d40 <_Z10fuzzy_initv+0x724>
 80a0d36:	463b      	mov	r3, r7
 80a0d38:	4632      	mov	r2, r6
 80a0d3a:	2109      	movs	r1, #9
 80a0d3c:	f001 fb6a 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr9);
 80a0d40:	4b49      	ldr	r3, [pc, #292]	; (80a0e68 <_Z10fuzzy_initv+0x84c>)
 80a0d42:	4651      	mov	r1, sl
 80a0d44:	6818      	ldr	r0, [r3, #0]
 80a0d46:	f002 f915 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MHML = new FuzzyRuleAntecedent();
 80a0d4a:	2018      	movs	r0, #24
 80a0d4c:	f7ff f9a5 	bl	80a009a <_Znwj>
 80a0d50:	4606      	mov	r6, r0
 80a0d52:	b108      	cbz	r0, 80a0d58 <_Z10fuzzy_initv+0x73c>
 80a0d54:	f002 f96e 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  MHML->joinWithAND(left_med_high, right_med_low);
 80a0d58:	9a07      	ldr	r2, [sp, #28]
 80a0d5a:	9904      	ldr	r1, [sp, #16]
 80a0d5c:	4630      	mov	r0, r6
 80a0d5e:	f002 f980 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr10 = new FuzzyRule(10, MHML, drive_small_left);
 80a0d62:	2010      	movs	r0, #16
 80a0d64:	f7ff f999 	bl	80a009a <_Znwj>
 80a0d68:	4682      	mov	sl, r0
 80a0d6a:	b120      	cbz	r0, 80a0d76 <_Z10fuzzy_initv+0x75a>
 80a0d6c:	463b      	mov	r3, r7
 80a0d6e:	4632      	mov	r2, r6
 80a0d70:	210a      	movs	r1, #10
 80a0d72:	f001 fb4f 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr10);
 80a0d76:	4b3c      	ldr	r3, [pc, #240]	; (80a0e68 <_Z10fuzzy_initv+0x84c>)
 80a0d78:	4651      	mov	r1, sl
 80a0d7a:	6818      	ldr	r0, [r3, #0]
 80a0d7c:	f002 f8fa 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MHLL = new FuzzyRuleAntecedent();
 80a0d80:	2018      	movs	r0, #24
 80a0d82:	f7ff f98a 	bl	80a009a <_Znwj>
 80a0d86:	4606      	mov	r6, r0
 80a0d88:	b108      	cbz	r0, 80a0d8e <_Z10fuzzy_initv+0x772>
 80a0d8a:	f002 f953 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  MHLL->joinWithAND(left_med_high, right_low_low);
 80a0d8e:	4622      	mov	r2, r4
 80a0d90:	9904      	ldr	r1, [sp, #16]
 80a0d92:	4630      	mov	r0, r6
 80a0d94:	f002 f965 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr11 = new FuzzyRule(11, MHLL, drive_small_left);
 80a0d98:	2010      	movs	r0, #16
 80a0d9a:	f7ff f97e 	bl	80a009a <_Znwj>
 80a0d9e:	4682      	mov	sl, r0
 80a0da0:	b120      	cbz	r0, 80a0dac <_Z10fuzzy_initv+0x790>
 80a0da2:	463b      	mov	r3, r7
 80a0da4:	4632      	mov	r2, r6
 80a0da6:	210b      	movs	r1, #11
 80a0da8:	f001 fb34 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr11);
 80a0dac:	4b2e      	ldr	r3, [pc, #184]	; (80a0e68 <_Z10fuzzy_initv+0x84c>)
 80a0dae:	4651      	mov	r1, sl
 80a0db0:	6818      	ldr	r0, [r3, #0]
 80a0db2:	f002 f8df 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMML = new FuzzyRuleAntecedent();
 80a0db6:	2018      	movs	r0, #24
 80a0db8:	f7ff f96f 	bl	80a009a <_Znwj>
 80a0dbc:	4606      	mov	r6, r0
 80a0dbe:	b108      	cbz	r0, 80a0dc4 <_Z10fuzzy_initv+0x7a8>
 80a0dc0:	f002 f938 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  MMML->joinWithAND(left_med_med, right_med_low);
 80a0dc4:	9a07      	ldr	r2, [sp, #28]
 80a0dc6:	9903      	ldr	r1, [sp, #12]
 80a0dc8:	4630      	mov	r0, r6
 80a0dca:	f002 f94a 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr12 = new FuzzyRule(12, MMML, drive_small_left);
 80a0dce:	2010      	movs	r0, #16
 80a0dd0:	f7ff f963 	bl	80a009a <_Znwj>
 80a0dd4:	4682      	mov	sl, r0
 80a0dd6:	b120      	cbz	r0, 80a0de2 <_Z10fuzzy_initv+0x7c6>
 80a0dd8:	463b      	mov	r3, r7
 80a0dda:	4632      	mov	r2, r6
 80a0ddc:	210c      	movs	r1, #12
 80a0dde:	f001 fb19 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr12);
 80a0de2:	4b21      	ldr	r3, [pc, #132]	; (80a0e68 <_Z10fuzzy_initv+0x84c>)
 80a0de4:	4651      	mov	r1, sl
 80a0de6:	6818      	ldr	r0, [r3, #0]
 80a0de8:	f002 f8c4 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMLL = new FuzzyRuleAntecedent();
 80a0dec:	2018      	movs	r0, #24
 80a0dee:	f7ff f954 	bl	80a009a <_Znwj>
 80a0df2:	4606      	mov	r6, r0
 80a0df4:	b108      	cbz	r0, 80a0dfa <_Z10fuzzy_initv+0x7de>
 80a0df6:	f002 f91d 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  MMLL->joinWithAND(left_med_med, right_low_low);
 80a0dfa:	4622      	mov	r2, r4
 80a0dfc:	9903      	ldr	r1, [sp, #12]
 80a0dfe:	4630      	mov	r0, r6
 80a0e00:	f002 f92f 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr13 = new FuzzyRule(13, MMLL, drive_small_left);
 80a0e04:	2010      	movs	r0, #16
 80a0e06:	f7ff f948 	bl	80a009a <_Znwj>
 80a0e0a:	4682      	mov	sl, r0
 80a0e0c:	b120      	cbz	r0, 80a0e18 <_Z10fuzzy_initv+0x7fc>
 80a0e0e:	463b      	mov	r3, r7
 80a0e10:	4632      	mov	r2, r6
 80a0e12:	210d      	movs	r1, #13
 80a0e14:	f001 fafe 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr13);
 80a0e18:	4b13      	ldr	r3, [pc, #76]	; (80a0e68 <_Z10fuzzy_initv+0x84c>)
 80a0e1a:	4651      	mov	r1, sl
 80a0e1c:	6818      	ldr	r0, [r3, #0]
 80a0e1e:	f002 f8a9 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HMLL = new FuzzyRuleAntecedent();
 80a0e22:	2018      	movs	r0, #24
 80a0e24:	f7ff f939 	bl	80a009a <_Znwj>
 80a0e28:	4606      	mov	r6, r0
 80a0e2a:	b108      	cbz	r0, 80a0e30 <_Z10fuzzy_initv+0x814>
 80a0e2c:	f002 f902 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  HMLL->joinWithAND(left_high_med, right_low_low);
 80a0e30:	4622      	mov	r2, r4
 80a0e32:	9914      	ldr	r1, [sp, #80]	; 0x50
 80a0e34:	4630      	mov	r0, r6
 80a0e36:	f002 f914 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr14 = new FuzzyRule(14, HMLL, drive_small_left);
 80a0e3a:	2010      	movs	r0, #16
 80a0e3c:	f7ff f92d 	bl	80a009a <_Znwj>
 80a0e40:	4682      	mov	sl, r0
 80a0e42:	b120      	cbz	r0, 80a0e4e <_Z10fuzzy_initv+0x832>
 80a0e44:	463b      	mov	r3, r7
 80a0e46:	4632      	mov	r2, r6
 80a0e48:	210e      	movs	r1, #14
 80a0e4a:	f001 fae3 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr14);
 80a0e4e:	4b06      	ldr	r3, [pc, #24]	; (80a0e68 <_Z10fuzzy_initv+0x84c>)
 80a0e50:	4651      	mov	r1, sl
 80a0e52:	6818      	ldr	r0, [r3, #0]
 80a0e54:	f002 f88e 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MLLL = new FuzzyRuleAntecedent();
 80a0e58:	2018      	movs	r0, #24
 80a0e5a:	f7ff f91e 	bl	80a009a <_Znwj>
 80a0e5e:	4606      	mov	r6, r0
 80a0e60:	b120      	cbz	r0, 80a0e6c <_Z10fuzzy_initv+0x850>
 80a0e62:	f002 f8e7 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
 80a0e66:	e001      	b.n	80a0e6c <_Z10fuzzy_initv+0x850>
 80a0e68:	20000368 	.word	0x20000368
  MLLL->joinWithAND(left_med_low, right_low_low);
 80a0e6c:	4622      	mov	r2, r4
 80a0e6e:	9915      	ldr	r1, [sp, #84]	; 0x54
 80a0e70:	4630      	mov	r0, r6
 80a0e72:	f002 f8f6 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr15 = new FuzzyRule(15, MLLL, drive_small_left);
 80a0e76:	2010      	movs	r0, #16
 80a0e78:	f7ff f90f 	bl	80a009a <_Znwj>
 80a0e7c:	4682      	mov	sl, r0
 80a0e7e:	b120      	cbz	r0, 80a0e8a <_Z10fuzzy_initv+0x86e>
 80a0e80:	463b      	mov	r3, r7
 80a0e82:	4632      	mov	r2, r6
 80a0e84:	210f      	movs	r1, #15
 80a0e86:	f001 fac5 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr15);
 80a0e8a:	4bae      	ldr	r3, [pc, #696]	; (80a1144 <_Z10fuzzy_initv+0xb28>)
 80a0e8c:	4651      	mov	r1, sl
 80a0e8e:	6818      	ldr	r0, [r3, #0]
 80a0e90:	f002 f870 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* HLLL = new FuzzyRuleAntecedent();
 80a0e94:	2018      	movs	r0, #24
 80a0e96:	f7ff f900 	bl	80a009a <_Znwj>
 80a0e9a:	4606      	mov	r6, r0
 80a0e9c:	b108      	cbz	r0, 80a0ea2 <_Z10fuzzy_initv+0x886>
 80a0e9e:	f002 f8c9 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  HLLL->joinWithAND(left_high_low, right_low_low);
 80a0ea2:	4622      	mov	r2, r4
 80a0ea4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80a0ea6:	4630      	mov	r0, r6
 80a0ea8:	f002 f8db 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr16 = new FuzzyRule(16, HLLL, drive_full_left);
 80a0eac:	2010      	movs	r0, #16
 80a0eae:	f7ff f8f4 	bl	80a009a <_Znwj>
 80a0eb2:	4607      	mov	r7, r0
 80a0eb4:	b120      	cbz	r0, 80a0ec0 <_Z10fuzzy_initv+0x8a4>
 80a0eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a0eb8:	4632      	mov	r2, r6
 80a0eba:	2110      	movs	r1, #16
 80a0ebc:	f001 faaa 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr16);
 80a0ec0:	4ea0      	ldr	r6, [pc, #640]	; (80a1144 <_Z10fuzzy_initv+0xb28>)
 80a0ec2:	4639      	mov	r1, r7
 80a0ec4:	6830      	ldr	r0, [r6, #0]
 80a0ec6:	f002 f855 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLLH = new FuzzyRuleAntecedent();
 80a0eca:	2018      	movs	r0, #24
 80a0ecc:	f7ff f8e5 	bl	80a009a <_Znwj>
 80a0ed0:	4607      	mov	r7, r0
 80a0ed2:	b108      	cbz	r0, 80a0ed8 <_Z10fuzzy_initv+0x8bc>
 80a0ed4:	f002 f8ae 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLLH->joinWithAND(left_low_low, right_low_high);
 80a0ed8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a0eda:	4641      	mov	r1, r8
 80a0edc:	4638      	mov	r0, r7
 80a0ede:	f002 f8c0 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr17 = new FuzzyRule(17, LLLH, drive_full_right);
 80a0ee2:	2010      	movs	r0, #16
 80a0ee4:	f7ff f8d9 	bl	80a009a <_Znwj>
 80a0ee8:	4682      	mov	sl, r0
 80a0eea:	b120      	cbz	r0, 80a0ef6 <_Z10fuzzy_initv+0x8da>
 80a0eec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a0eee:	463a      	mov	r2, r7
 80a0ef0:	2111      	movs	r1, #17
 80a0ef2:	f001 fa8f 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr17);
 80a0ef6:	4651      	mov	r1, sl
 80a0ef8:	6830      	ldr	r0, [r6, #0]
 80a0efa:	f002 f83b 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLHH = new FuzzyRuleAntecedent();
 80a0efe:	2018      	movs	r0, #24
 80a0f00:	f7ff f8cb 	bl	80a009a <_Znwj>
 80a0f04:	4606      	mov	r6, r0
 80a0f06:	b108      	cbz	r0, 80a0f0c <_Z10fuzzy_initv+0x8f0>
 80a0f08:	f002 f894 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLHH->joinWithAND(left_low_low, right_high_high);
 80a0f0c:	9a08      	ldr	r2, [sp, #32]
 80a0f0e:	4641      	mov	r1, r8
 80a0f10:	4630      	mov	r0, r6
 80a0f12:	f002 f8a6 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr18 = new FuzzyRule(18, LLHH, drive_small_right);
 80a0f16:	2010      	movs	r0, #16
 80a0f18:	f7ff f8bf 	bl	80a009a <_Znwj>
 80a0f1c:	4607      	mov	r7, r0
 80a0f1e:	b120      	cbz	r0, 80a0f2a <_Z10fuzzy_initv+0x90e>
 80a0f20:	462b      	mov	r3, r5
 80a0f22:	4632      	mov	r2, r6
 80a0f24:	2112      	movs	r1, #18
 80a0f26:	f001 fa75 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr18);
 80a0f2a:	4e86      	ldr	r6, [pc, #536]	; (80a1144 <_Z10fuzzy_initv+0xb28>)
 80a0f2c:	4639      	mov	r1, r7
 80a0f2e:	6830      	ldr	r0, [r6, #0]
 80a0f30:	f002 f820 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMHH = new FuzzyRuleAntecedent();
 80a0f34:	2018      	movs	r0, #24
 80a0f36:	f7ff f8b0 	bl	80a009a <_Znwj>
 80a0f3a:	4607      	mov	r7, r0
 80a0f3c:	b108      	cbz	r0, 80a0f42 <_Z10fuzzy_initv+0x926>
 80a0f3e:	f002 f879 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  LMHH->joinWithAND(left_low_med, right_high_high);
 80a0f42:	9a08      	ldr	r2, [sp, #32]
 80a0f44:	9905      	ldr	r1, [sp, #20]
 80a0f46:	4638      	mov	r0, r7
 80a0f48:	f002 f88b 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr19 = new FuzzyRule(19, LMHH, drive_small_right);
 80a0f4c:	2010      	movs	r0, #16
 80a0f4e:	f7ff f8a4 	bl	80a009a <_Znwj>
 80a0f52:	4682      	mov	sl, r0
 80a0f54:	b120      	cbz	r0, 80a0f60 <_Z10fuzzy_initv+0x944>
 80a0f56:	462b      	mov	r3, r5
 80a0f58:	463a      	mov	r2, r7
 80a0f5a:	2113      	movs	r1, #19
 80a0f5c:	f001 fa5a 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr19);
 80a0f60:	4651      	mov	r1, sl
 80a0f62:	6830      	ldr	r0, [r6, #0]
 80a0f64:	f002 f806 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMHH = new FuzzyRuleAntecedent();
 80a0f68:	2018      	movs	r0, #24
 80a0f6a:	f7ff f896 	bl	80a009a <_Znwj>
 80a0f6e:	4606      	mov	r6, r0
 80a0f70:	b108      	cbz	r0, 80a0f76 <_Z10fuzzy_initv+0x95a>
 80a0f72:	f002 f85f 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  MMHH->joinWithAND(left_med_med, right_high_high);
 80a0f76:	9a08      	ldr	r2, [sp, #32]
 80a0f78:	9903      	ldr	r1, [sp, #12]
 80a0f7a:	4630      	mov	r0, r6
 80a0f7c:	f002 f871 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr20 = new FuzzyRule(20, MMHH, drive_small_right);
 80a0f80:	2010      	movs	r0, #16
 80a0f82:	f7ff f88a 	bl	80a009a <_Znwj>
 80a0f86:	4607      	mov	r7, r0
 80a0f88:	b120      	cbz	r0, 80a0f94 <_Z10fuzzy_initv+0x978>
 80a0f8a:	462b      	mov	r3, r5
 80a0f8c:	4632      	mov	r2, r6
 80a0f8e:	2114      	movs	r1, #20
 80a0f90:	f001 fa40 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr20);
 80a0f94:	4e6b      	ldr	r6, [pc, #428]	; (80a1144 <_Z10fuzzy_initv+0xb28>)
 80a0f96:	4639      	mov	r1, r7
 80a0f98:	6830      	ldr	r0, [r6, #0]
 80a0f9a:	f001 ffeb 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* MMHM = new FuzzyRuleAntecedent();
 80a0f9e:	2018      	movs	r0, #24
 80a0fa0:	f7ff f87b 	bl	80a009a <_Znwj>
 80a0fa4:	4607      	mov	r7, r0
 80a0fa6:	b108      	cbz	r0, 80a0fac <_Z10fuzzy_initv+0x990>
 80a0fa8:	f002 f844 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  MMHM->joinWithAND(left_med_med, right_high_med);
 80a0fac:	9a06      	ldr	r2, [sp, #24]
 80a0fae:	9903      	ldr	r1, [sp, #12]
 80a0fb0:	4638      	mov	r0, r7
 80a0fb2:	f002 f856 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr21 = new FuzzyRule(21, MMHM, drive_small_right);
 80a0fb6:	2010      	movs	r0, #16
 80a0fb8:	f7ff f86f 	bl	80a009a <_Znwj>
 80a0fbc:	4682      	mov	sl, r0
 80a0fbe:	b120      	cbz	r0, 80a0fca <_Z10fuzzy_initv+0x9ae>
 80a0fc0:	462b      	mov	r3, r5
 80a0fc2:	463a      	mov	r2, r7
 80a0fc4:	2115      	movs	r1, #21
 80a0fc6:	f001 fa25 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr21);
 80a0fca:	4651      	mov	r1, sl
 80a0fcc:	6830      	ldr	r0, [r6, #0]
 80a0fce:	f001 ffd1 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMHM = new FuzzyRuleAntecedent();
 80a0fd2:	2018      	movs	r0, #24
 80a0fd4:	f7ff f861 	bl	80a009a <_Znwj>
 80a0fd8:	4607      	mov	r7, r0
 80a0fda:	b108      	cbz	r0, 80a0fe0 <_Z10fuzzy_initv+0x9c4>
 80a0fdc:	f002 f82a 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  LMHM->joinWithAND(left_low_med, right_high_med);
 80a0fe0:	9a06      	ldr	r2, [sp, #24]
 80a0fe2:	9905      	ldr	r1, [sp, #20]
 80a0fe4:	4638      	mov	r0, r7
 80a0fe6:	f002 f83c 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr22 = new FuzzyRule(22, LMHM, drive_small_right);
 80a0fea:	2010      	movs	r0, #16
 80a0fec:	f7ff f855 	bl	80a009a <_Znwj>
 80a0ff0:	4682      	mov	sl, r0
 80a0ff2:	b120      	cbz	r0, 80a0ffe <_Z10fuzzy_initv+0x9e2>
 80a0ff4:	462b      	mov	r3, r5
 80a0ff6:	463a      	mov	r2, r7
 80a0ff8:	2116      	movs	r1, #22
 80a0ffa:	f001 fa0b 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr22);
 80a0ffe:	4651      	mov	r1, sl
 80a1000:	6830      	ldr	r0, [r6, #0]
 80a1002:	f001 ffb7 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLHM = new FuzzyRuleAntecedent();
 80a1006:	2018      	movs	r0, #24
 80a1008:	f7ff f847 	bl	80a009a <_Znwj>
 80a100c:	4607      	mov	r7, r0
 80a100e:	b108      	cbz	r0, 80a1014 <_Z10fuzzy_initv+0x9f8>
 80a1010:	f002 f810 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLHM->joinWithAND(left_low_low, right_high_med);
 80a1014:	9a06      	ldr	r2, [sp, #24]
 80a1016:	4641      	mov	r1, r8
 80a1018:	4638      	mov	r0, r7
 80a101a:	f002 f822 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr23 = new FuzzyRule(23, LLHM, drive_small_right);
 80a101e:	2010      	movs	r0, #16
 80a1020:	f7ff f83b 	bl	80a009a <_Znwj>
 80a1024:	4682      	mov	sl, r0
 80a1026:	b120      	cbz	r0, 80a1032 <_Z10fuzzy_initv+0xa16>
 80a1028:	462b      	mov	r3, r5
 80a102a:	463a      	mov	r2, r7
 80a102c:	2117      	movs	r1, #23
 80a102e:	f001 f9f1 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr23);
 80a1032:	4651      	mov	r1, sl
 80a1034:	6830      	ldr	r0, [r6, #0]
 80a1036:	f001 ff9d 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LMMM = new FuzzyRuleAntecedent();
 80a103a:	2018      	movs	r0, #24
 80a103c:	f7ff f82d 	bl	80a009a <_Znwj>
 80a1040:	4607      	mov	r7, r0
 80a1042:	b108      	cbz	r0, 80a1048 <_Z10fuzzy_initv+0xa2c>
 80a1044:	f001 fff6 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  LMMM->joinWithAND(left_low_med, right_med_med);
 80a1048:	465a      	mov	r2, fp
 80a104a:	9905      	ldr	r1, [sp, #20]
 80a104c:	4638      	mov	r0, r7
 80a104e:	f002 f808 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr24 = new FuzzyRule(24, LMMM, drive_small_right);
 80a1052:	2010      	movs	r0, #16
 80a1054:	f7ff f821 	bl	80a009a <_Znwj>
 80a1058:	4682      	mov	sl, r0
 80a105a:	b120      	cbz	r0, 80a1066 <_Z10fuzzy_initv+0xa4a>
 80a105c:	462b      	mov	r3, r5
 80a105e:	463a      	mov	r2, r7
 80a1060:	2118      	movs	r1, #24
 80a1062:	f001 f9d7 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr24);
 80a1066:	4651      	mov	r1, sl
 80a1068:	6830      	ldr	r0, [r6, #0]
 80a106a:	f001 ff83 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLMM = new FuzzyRuleAntecedent();
 80a106e:	2018      	movs	r0, #24
 80a1070:	f7ff f813 	bl	80a009a <_Znwj>
 80a1074:	4607      	mov	r7, r0
 80a1076:	b108      	cbz	r0, 80a107c <_Z10fuzzy_initv+0xa60>
 80a1078:	f001 ffdc 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLMM->joinWithAND(left_low_low, right_med_med);
 80a107c:	465a      	mov	r2, fp
 80a107e:	4641      	mov	r1, r8
 80a1080:	4638      	mov	r0, r7
 80a1082:	f001 ffee 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr25 = new FuzzyRule(25, LLMM, drive_small_right);
 80a1086:	2010      	movs	r0, #16
 80a1088:	f7ff f807 	bl	80a009a <_Znwj>
 80a108c:	4682      	mov	sl, r0
 80a108e:	b120      	cbz	r0, 80a109a <_Z10fuzzy_initv+0xa7e>
 80a1090:	462b      	mov	r3, r5
 80a1092:	463a      	mov	r2, r7
 80a1094:	2119      	movs	r1, #25
 80a1096:	f001 f9bd 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr25);
 80a109a:	4651      	mov	r1, sl
 80a109c:	6830      	ldr	r0, [r6, #0]
 80a109e:	f001 ff69 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLMH = new FuzzyRuleAntecedent();
 80a10a2:	2018      	movs	r0, #24
 80a10a4:	f7fe fff9 	bl	80a009a <_Znwj>
 80a10a8:	4607      	mov	r7, r0
 80a10aa:	b108      	cbz	r0, 80a10b0 <_Z10fuzzy_initv+0xa94>
 80a10ac:	f001 ffc2 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLMH->joinWithAND(left_low_low, right_med_high);
 80a10b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a10b2:	4641      	mov	r1, r8
 80a10b4:	4638      	mov	r0, r7
 80a10b6:	f001 ffd4 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr26 = new FuzzyRule(26, LLMH, drive_small_right);
 80a10ba:	2010      	movs	r0, #16
 80a10bc:	f7fe ffed 	bl	80a009a <_Znwj>
 80a10c0:	4682      	mov	sl, r0
 80a10c2:	b120      	cbz	r0, 80a10ce <_Z10fuzzy_initv+0xab2>
 80a10c4:	462b      	mov	r3, r5
 80a10c6:	463a      	mov	r2, r7
 80a10c8:	211a      	movs	r1, #26
 80a10ca:	f001 f9a3 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr26);
 80a10ce:	4651      	mov	r1, sl
 80a10d0:	6830      	ldr	r0, [r6, #0]
 80a10d2:	f001 ff4f 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLLM = new FuzzyRuleAntecedent();
 80a10d6:	2018      	movs	r0, #24
 80a10d8:	f7fe ffdf 	bl	80a009a <_Znwj>
 80a10dc:	4607      	mov	r7, r0
 80a10de:	b108      	cbz	r0, 80a10e4 <_Z10fuzzy_initv+0xac8>
 80a10e0:	f001 ffa8 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLLM->joinWithAND(left_low_low, right_low_med);
 80a10e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a10e6:	4641      	mov	r1, r8
 80a10e8:	4638      	mov	r0, r7
 80a10ea:	f001 ffba 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr27 = new FuzzyRule(27, LLLM, drive_small_right);
 80a10ee:	2010      	movs	r0, #16
 80a10f0:	f7fe ffd3 	bl	80a009a <_Znwj>
 80a10f4:	4682      	mov	sl, r0
 80a10f6:	b120      	cbz	r0, 80a1102 <_Z10fuzzy_initv+0xae6>
 80a10f8:	462b      	mov	r3, r5
 80a10fa:	463a      	mov	r2, r7
 80a10fc:	211b      	movs	r1, #27
 80a10fe:	f001 f989 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr27);
 80a1102:	4651      	mov	r1, sl
 80a1104:	6830      	ldr	r0, [r6, #0]
 80a1106:	f001 ff35 	bl	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>

  FuzzyRuleAntecedent* LLLL = new FuzzyRuleAntecedent();
 80a110a:	2018      	movs	r0, #24
 80a110c:	f7fe ffc5 	bl	80a009a <_Znwj>
 80a1110:	4605      	mov	r5, r0
 80a1112:	b108      	cbz	r0, 80a1118 <_Z10fuzzy_initv+0xafc>
 80a1114:	f001 ff8e 	bl	80a3034 <_ZN19FuzzyRuleAntecedentC1Ev>
  LLLL->joinWithAND(left_low_low, right_low_low);
 80a1118:	4622      	mov	r2, r4
 80a111a:	4641      	mov	r1, r8
 80a111c:	4628      	mov	r0, r5
 80a111e:	f001 ffa0 	bl	80a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>
  FuzzyRule* fr28 = new FuzzyRule(28, LLLL, drive_center);	// should it be search?
 80a1122:	2010      	movs	r0, #16
 80a1124:	f7fe ffb9 	bl	80a009a <_Znwj>
 80a1128:	4604      	mov	r4, r0
 80a112a:	b120      	cbz	r0, 80a1136 <_Z10fuzzy_initv+0xb1a>
 80a112c:	464b      	mov	r3, r9
 80a112e:	462a      	mov	r2, r5
 80a1130:	211c      	movs	r1, #28
 80a1132:	f001 f96f 	bl	80a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>
  fuzzy->addFuzzyRule(fr28);
 80a1136:	4621      	mov	r1, r4
 80a1138:	6830      	ldr	r0, [r6, #0]
}
 80a113a:	b019      	add	sp, #100	; 0x64
 80a113c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fuzzy->addFuzzyRule(fr27);

  FuzzyRuleAntecedent* LLLL = new FuzzyRuleAntecedent();
  LLLL->joinWithAND(left_low_low, right_low_low);
  FuzzyRule* fr28 = new FuzzyRule(28, LLLL, drive_center);	// should it be search?
  fuzzy->addFuzzyRule(fr28);
 80a1140:	f001 bf18 	b.w	80a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>
 80a1144:	20000368 	.word	0x20000368

080a1148 <setup>:
}

void setup() {
 80a1148:	b508      	push	{r3, lr}
	tof_init();			// ToF and I2C
 80a114a:	f7ff f881 	bl	80a0250 <_Z8tof_initv>
	accel_init();		// accelerometer
 80a114e:	f7ff f933 	bl	80a03b8 <_Z10accel_initv>
	others_init();		// line, remote, esc, ***printing***
 80a1152:	f7ff f943 	bl	80a03dc <_Z11others_initv>
	interrupt_init();	// interrupts for lines and remote
 80a1156:	f7ff f97b 	bl	80a0450 <_Z14interrupt_initv>
	ESC_init();			// Car ESCs
 80a115a:	f7ff fa05 	bl	80a0568 <_Z8ESC_initv>
	fuzzy_init();		// Fuzzy library************
 80a115e:	f7ff fa5d 	bl	80a061c <_Z10fuzzy_initv>

	RGB.control(true); 	// take control of the on-board LED for debugging
 80a1162:	2001      	movs	r0, #1
 80a1164:	f002 fbbf 	bl	80a38e6 <_ZN8RGBClass7controlEb>

	robot_init();
 80a1168:	f7ff fa36 	bl	80a05d8 <_Z10robot_initv>
	line_init();		// initialize line variables
}
 80a116c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	fuzzy_init();		// Fuzzy library************

	RGB.control(true); 	// take control of the on-board LED for debugging

	robot_init();
	line_init();		// initialize line variables
 80a1170:	f7ff ba2a 	b.w	80a05c8 <_Z9line_initv>

080a1174 <_Z4stopv>:

// -----------------------------------------------------------
// ------------------Runtime functions------------------------
// -----------------------------------------------------------

void stop() {
 80a1174:	b508      	push	{r3, lr}
  	LESC.writeMicroseconds(1500);
 80a1176:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a117a:	4805      	ldr	r0, [pc, #20]	; (80a1190 <_Z4stopv+0x1c>)
 80a117c:	f002 fa61 	bl	80a3642 <_ZN5Servo17writeMicrosecondsEt>
  	RESC.writeMicroseconds(1500);
}
 80a1180:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// ------------------Runtime functions------------------------
// -----------------------------------------------------------

void stop() {
  	LESC.writeMicroseconds(1500);
  	RESC.writeMicroseconds(1500);
 80a1184:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a1188:	4802      	ldr	r0, [pc, #8]	; (80a1194 <_Z4stopv+0x20>)
 80a118a:	f002 ba5a 	b.w	80a3642 <_ZN5Servo17writeMicrosecondsEt>
 80a118e:	bf00      	nop
 80a1190:	20000344 	.word	0x20000344
 80a1194:	200003b8 	.word	0x200003b8

080a1198 <_Z6getToFv>:
void getAccel() {
  accel.getSample(sample);
  curAccel = sample.x;
}

void getToF() {
 80a1198:	b508      	push	{r3, lr}
	RR_distance = sensor0.readRangeContinuousMillimeters();
 80a119a:	480a      	ldr	r0, [pc, #40]	; (80a11c4 <_Z6getToFv+0x2c>)
 80a119c:	f000 fba6 	bl	80a18ec <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a11a0:	4b09      	ldr	r3, [pc, #36]	; (80a11c8 <_Z6getToFv+0x30>)
 80a11a2:	8018      	strh	r0, [r3, #0]
	RM_distance = sensor1.readRangeContinuousMillimeters();
 80a11a4:	4809      	ldr	r0, [pc, #36]	; (80a11cc <_Z6getToFv+0x34>)
 80a11a6:	f000 fba1 	bl	80a18ec <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a11aa:	4b09      	ldr	r3, [pc, #36]	; (80a11d0 <_Z6getToFv+0x38>)
 80a11ac:	8018      	strh	r0, [r3, #0]
	LM_distance = sensor2.readRangeContinuousMillimeters();
 80a11ae:	4809      	ldr	r0, [pc, #36]	; (80a11d4 <_Z6getToFv+0x3c>)
 80a11b0:	f000 fb9c 	bl	80a18ec <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a11b4:	4b08      	ldr	r3, [pc, #32]	; (80a11d8 <_Z6getToFv+0x40>)
 80a11b6:	8018      	strh	r0, [r3, #0]
	LL_distance = sensor3.readRangeContinuousMillimeters();
 80a11b8:	4808      	ldr	r0, [pc, #32]	; (80a11dc <_Z6getToFv+0x44>)
 80a11ba:	f000 fb97 	bl	80a18ec <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a11be:	4b08      	ldr	r3, [pc, #32]	; (80a11e0 <_Z6getToFv+0x48>)
 80a11c0:	8018      	strh	r0, [r3, #0]
 80a11c2:	bd08      	pop	{r3, pc}
 80a11c4:	2000036c 	.word	0x2000036c
 80a11c8:	20000340 	.word	0x20000340
 80a11cc:	200003ec 	.word	0x200003ec
 80a11d0:	20000404 	.word	0x20000404
 80a11d4:	20000384 	.word	0x20000384
 80a11d8:	200003d8 	.word	0x200003d8
 80a11dc:	2000039c 	.word	0x2000039c
 80a11e0:	20000406 	.word	0x20000406

080a11e4 <_Z7doFuzzyv>:
	// if (sensor0.timeoutOccurred() || sensor1.timeoutOccurred() || sensor2.timeoutOccurred() || sensor3.timeoutOccurred()) { Serial.print(" SENSOR TIMEOUT"); }
}

void doFuzzy() {
 80a11e4:	b510      	push	{r4, lr}
  	fuzzy->setInput(1, LL_distance);
 80a11e6:	4b55      	ldr	r3, [pc, #340]	; (80a133c <_Z7doFuzzyv+0x158>)
 80a11e8:	4c55      	ldr	r4, [pc, #340]	; (80a1340 <_Z7doFuzzyv+0x15c>)
 80a11ea:	8818      	ldrh	r0, [r3, #0]
 80a11ec:	f003 fd9c 	bl	80a4d28 <__aeabi_ui2f>
 80a11f0:	2101      	movs	r1, #1
 80a11f2:	4602      	mov	r2, r0
 80a11f4:	6820      	ldr	r0, [r4, #0]
 80a11f6:	f001 fed0 	bl	80a2f9a <_ZN5Fuzzy8setInputEif>
  	fuzzy->setInput(2, LM_distance);
 80a11fa:	4b52      	ldr	r3, [pc, #328]	; (80a1344 <_Z7doFuzzyv+0x160>)
 80a11fc:	8818      	ldrh	r0, [r3, #0]
 80a11fe:	f003 fd93 	bl	80a4d28 <__aeabi_ui2f>
 80a1202:	2102      	movs	r1, #2
 80a1204:	4602      	mov	r2, r0
 80a1206:	6820      	ldr	r0, [r4, #0]
 80a1208:	f001 fec7 	bl	80a2f9a <_ZN5Fuzzy8setInputEif>
  	fuzzy->setInput(3, RM_distance);
 80a120c:	4b4e      	ldr	r3, [pc, #312]	; (80a1348 <_Z7doFuzzyv+0x164>)
 80a120e:	8818      	ldrh	r0, [r3, #0]
 80a1210:	f003 fd8a 	bl	80a4d28 <__aeabi_ui2f>
 80a1214:	2103      	movs	r1, #3
 80a1216:	4602      	mov	r2, r0
 80a1218:	6820      	ldr	r0, [r4, #0]
 80a121a:	f001 febe 	bl	80a2f9a <_ZN5Fuzzy8setInputEif>
  	fuzzy->setInput(4, RR_distance);
 80a121e:	4b4b      	ldr	r3, [pc, #300]	; (80a134c <_Z7doFuzzyv+0x168>)
 80a1220:	8818      	ldrh	r0, [r3, #0]
 80a1222:	f003 fd81 	bl	80a4d28 <__aeabi_ui2f>
 80a1226:	2104      	movs	r1, #4
 80a1228:	4602      	mov	r2, r0
 80a122a:	6820      	ldr	r0, [r4, #0]
 80a122c:	f001 feb5 	bl	80a2f9a <_ZN5Fuzzy8setInputEif>
  	fuzzy->fuzzify();
 80a1230:	6820      	ldr	r0, [r4, #0]
 80a1232:	f001 fec6 	bl	80a2fc2 <_ZN5Fuzzy7fuzzifyEv>
  	output = fuzzy->defuzzify(1);
 80a1236:	2101      	movs	r1, #1
 80a1238:	6820      	ldr	r0, [r4, #0]
 80a123a:	f001 fee9 	bl	80a3010 <_ZN5Fuzzy9defuzzifyEi>
 80a123e:	4b44      	ldr	r3, [pc, #272]	; (80a1350 <_Z7doFuzzyv+0x16c>)

  	if((output >= 0) && (output < 20)) {
 80a1240:	2100      	movs	r1, #0
  	fuzzy->setInput(1, LL_distance);
  	fuzzy->setInput(2, LM_distance);
  	fuzzy->setInput(3, RM_distance);
  	fuzzy->setInput(4, RR_distance);
  	fuzzy->fuzzify();
  	output = fuzzy->defuzzify(1);
 80a1242:	6018      	str	r0, [r3, #0]
 80a1244:	4604      	mov	r4, r0

  	if((output >= 0) && (output < 20)) {
 80a1246:	f003 ff79 	bl	80a513c <__aeabi_fcmpge>
 80a124a:	b178      	cbz	r0, 80a126c <_Z7doFuzzyv+0x88>
 80a124c:	4941      	ldr	r1, [pc, #260]	; (80a1354 <_Z7doFuzzyv+0x170>)
 80a124e:	4620      	mov	r0, r4
 80a1250:	f003 ff60 	bl	80a5114 <__aeabi_fcmplt>
 80a1254:	b150      	cbz	r0, 80a126c <_Z7doFuzzyv+0x88>
  		decision = "Full Left";
 80a1256:	4940      	ldr	r1, [pc, #256]	; (80a1358 <_Z7doFuzzyv+0x174>)
 80a1258:	4840      	ldr	r0, [pc, #256]	; (80a135c <_Z7doFuzzyv+0x178>)
 80a125a:	f002 faae 	bl	80a37ba <_ZN6StringaSEPKc>
  		RGB.color(0, 0, 255);
 80a125e:	2100      	movs	r1, #0
 80a1260:	22ff      	movs	r2, #255	; 0xff
 80a1262:	4608      	mov	r0, r1
 80a1264:	f002 fb4f 	bl	80a3906 <_ZN8RGBClass5colorEiii>

  		L_command = 50;
 80a1268:	2232      	movs	r2, #50	; 0x32
 80a126a:	e013      	b.n	80a1294 <_Z7doFuzzyv+0xb0>
  		R_command = 100;
  		L_dir = 1;
  		R_dir = 1;
  	} else if((output >= 20) && (output < 40)) {
 80a126c:	4939      	ldr	r1, [pc, #228]	; (80a1354 <_Z7doFuzzyv+0x170>)
 80a126e:	4620      	mov	r0, r4
 80a1270:	f003 ff64 	bl	80a513c <__aeabi_fcmpge>
 80a1274:	b190      	cbz	r0, 80a129c <_Z7doFuzzyv+0xb8>
 80a1276:	493a      	ldr	r1, [pc, #232]	; (80a1360 <_Z7doFuzzyv+0x17c>)
 80a1278:	4620      	mov	r0, r4
 80a127a:	f003 ff4b 	bl	80a5114 <__aeabi_fcmplt>
 80a127e:	b168      	cbz	r0, 80a129c <_Z7doFuzzyv+0xb8>
  		decision = "Small Left";
 80a1280:	4938      	ldr	r1, [pc, #224]	; (80a1364 <_Z7doFuzzyv+0x180>)
 80a1282:	4836      	ldr	r0, [pc, #216]	; (80a135c <_Z7doFuzzyv+0x178>)
 80a1284:	f002 fa99 	bl	80a37ba <_ZN6StringaSEPKc>
  		RGB.color(0, 128, 128);
 80a1288:	2280      	movs	r2, #128	; 0x80
 80a128a:	4611      	mov	r1, r2
 80a128c:	2000      	movs	r0, #0
 80a128e:	f002 fb3a 	bl	80a3906 <_ZN8RGBClass5colorEiii>

   		L_command = 75;
 80a1292:	224b      	movs	r2, #75	; 0x4b
 80a1294:	4b34      	ldr	r3, [pc, #208]	; (80a1368 <_Z7doFuzzyv+0x184>)
 80a1296:	601a      	str	r2, [r3, #0]
  		R_command = 100;
 80a1298:	2264      	movs	r2, #100	; 0x64
 80a129a:	e047      	b.n	80a132c <_Z7doFuzzyv+0x148>
  		L_dir = 1;
  		R_dir = 1;
	} else if((output >= 40) && (output < 60)) {
 80a129c:	4930      	ldr	r1, [pc, #192]	; (80a1360 <_Z7doFuzzyv+0x17c>)
 80a129e:	4620      	mov	r0, r4
 80a12a0:	f003 ff4c 	bl	80a513c <__aeabi_fcmpge>
 80a12a4:	b198      	cbz	r0, 80a12ce <_Z7doFuzzyv+0xea>
 80a12a6:	4931      	ldr	r1, [pc, #196]	; (80a136c <_Z7doFuzzyv+0x188>)
 80a12a8:	4620      	mov	r0, r4
 80a12aa:	f003 ff33 	bl	80a5114 <__aeabi_fcmplt>
 80a12ae:	b170      	cbz	r0, 80a12ce <_Z7doFuzzyv+0xea>
		decision = "Center";
 80a12b0:	492f      	ldr	r1, [pc, #188]	; (80a1370 <_Z7doFuzzyv+0x18c>)
 80a12b2:	482a      	ldr	r0, [pc, #168]	; (80a135c <_Z7doFuzzyv+0x178>)
 80a12b4:	f002 fa81 	bl	80a37ba <_ZN6StringaSEPKc>
		RGB.color(0, 255, 0);
 80a12b8:	2200      	movs	r2, #0
 80a12ba:	4610      	mov	r0, r2
 80a12bc:	21ff      	movs	r1, #255	; 0xff
 80a12be:	f002 fb22 	bl	80a3906 <_ZN8RGBClass5colorEiii>

  		L_command = 50;
 80a12c2:	4a29      	ldr	r2, [pc, #164]	; (80a1368 <_Z7doFuzzyv+0x184>)
 80a12c4:	2332      	movs	r3, #50	; 0x32
 80a12c6:	6013      	str	r3, [r2, #0]
  		R_command = 50;
 80a12c8:	4a2a      	ldr	r2, [pc, #168]	; (80a1374 <_Z7doFuzzyv+0x190>)
 80a12ca:	6013      	str	r3, [r2, #0]
 80a12cc:	e030      	b.n	80a1330 <_Z7doFuzzyv+0x14c>
  		L_dir = 1;
  		R_dir = 1;
	} else if((output >= 60) && (output < 80)) {
 80a12ce:	4927      	ldr	r1, [pc, #156]	; (80a136c <_Z7doFuzzyv+0x188>)
 80a12d0:	4620      	mov	r0, r4
 80a12d2:	f003 ff33 	bl	80a513c <__aeabi_fcmpge>
 80a12d6:	b190      	cbz	r0, 80a12fe <_Z7doFuzzyv+0x11a>
 80a12d8:	4927      	ldr	r1, [pc, #156]	; (80a1378 <_Z7doFuzzyv+0x194>)
 80a12da:	4620      	mov	r0, r4
 80a12dc:	f003 ff1a 	bl	80a5114 <__aeabi_fcmplt>
 80a12e0:	b168      	cbz	r0, 80a12fe <_Z7doFuzzyv+0x11a>
		decision = "Small Right";
 80a12e2:	4926      	ldr	r1, [pc, #152]	; (80a137c <_Z7doFuzzyv+0x198>)
 80a12e4:	481d      	ldr	r0, [pc, #116]	; (80a135c <_Z7doFuzzyv+0x178>)
 80a12e6:	f002 fa68 	bl	80a37ba <_ZN6StringaSEPKc>
		RGB.color(128, 128, 0);
 80a12ea:	2180      	movs	r1, #128	; 0x80
 80a12ec:	2200      	movs	r2, #0
 80a12ee:	4608      	mov	r0, r1
 80a12f0:	f002 fb09 	bl	80a3906 <_ZN8RGBClass5colorEiii>

  		L_command = 100;
 80a12f4:	4b1c      	ldr	r3, [pc, #112]	; (80a1368 <_Z7doFuzzyv+0x184>)
 80a12f6:	2264      	movs	r2, #100	; 0x64
 80a12f8:	601a      	str	r2, [r3, #0]
  		R_command = 75;
 80a12fa:	224b      	movs	r2, #75	; 0x4b
 80a12fc:	e016      	b.n	80a132c <_Z7doFuzzyv+0x148>
  		L_dir = 1;
  		R_dir = 1;
	} else if((output >= 80) && (output < 100)) {
 80a12fe:	491e      	ldr	r1, [pc, #120]	; (80a1378 <_Z7doFuzzyv+0x194>)
 80a1300:	4620      	mov	r0, r4
 80a1302:	f003 ff1b 	bl	80a513c <__aeabi_fcmpge>
 80a1306:	b1c0      	cbz	r0, 80a133a <_Z7doFuzzyv+0x156>
 80a1308:	491d      	ldr	r1, [pc, #116]	; (80a1380 <_Z7doFuzzyv+0x19c>)
 80a130a:	4620      	mov	r0, r4
 80a130c:	f003 ff02 	bl	80a5114 <__aeabi_fcmplt>
 80a1310:	b198      	cbz	r0, 80a133a <_Z7doFuzzyv+0x156>
		decision = "Full Right";
 80a1312:	491c      	ldr	r1, [pc, #112]	; (80a1384 <_Z7doFuzzyv+0x1a0>)
 80a1314:	4811      	ldr	r0, [pc, #68]	; (80a135c <_Z7doFuzzyv+0x178>)
 80a1316:	f002 fa50 	bl	80a37ba <_ZN6StringaSEPKc>
		RGB.color(255, 0, 0);
 80a131a:	2200      	movs	r2, #0
 80a131c:	4611      	mov	r1, r2
 80a131e:	20ff      	movs	r0, #255	; 0xff
 80a1320:	f002 faf1 	bl	80a3906 <_ZN8RGBClass5colorEiii>

  		L_command = 100;
 80a1324:	4b10      	ldr	r3, [pc, #64]	; (80a1368 <_Z7doFuzzyv+0x184>)
 80a1326:	2264      	movs	r2, #100	; 0x64
 80a1328:	601a      	str	r2, [r3, #0]
  		R_command = 50;
 80a132a:	2232      	movs	r2, #50	; 0x32
 80a132c:	4b11      	ldr	r3, [pc, #68]	; (80a1374 <_Z7doFuzzyv+0x190>)
 80a132e:	601a      	str	r2, [r3, #0]
  		L_dir = 1;
 80a1330:	4a15      	ldr	r2, [pc, #84]	; (80a1388 <_Z7doFuzzyv+0x1a4>)
 80a1332:	2301      	movs	r3, #1
 80a1334:	6013      	str	r3, [r2, #0]
  		R_dir = 1;
 80a1336:	4a15      	ldr	r2, [pc, #84]	; (80a138c <_Z7doFuzzyv+0x1a8>)
 80a1338:	6013      	str	r3, [r2, #0]
 80a133a:	bd10      	pop	{r4, pc}
 80a133c:	20000406 	.word	0x20000406
 80a1340:	20000368 	.word	0x20000368
 80a1344:	200003d8 	.word	0x200003d8
 80a1348:	20000404 	.word	0x20000404
 80a134c:	20000340 	.word	0x20000340
 80a1350:	20000408 	.word	0x20000408
 80a1354:	41a00000 	.word	0x41a00000
 80a1358:	080a524f 	.word	0x080a524f
 80a135c:	200003dc 	.word	0x200003dc
 80a1360:	42200000 	.word	0x42200000
 80a1364:	080a5259 	.word	0x080a5259
 80a1368:	200003d4 	.word	0x200003d4
 80a136c:	42700000 	.word	0x42700000
 80a1370:	080a5264 	.word	0x080a5264
 80a1374:	2000040c 	.word	0x2000040c
 80a1378:	42a00000 	.word	0x42a00000
 80a137c:	080a526b 	.word	0x080a526b
 80a1380:	42c80000 	.word	0x42c80000
 80a1384:	080a5277 	.word	0x080a5277
 80a1388:	2000031c 	.word	0x2000031c
 80a138c:	20000304 	.word	0x20000304

080a1390 <_Z11checkSwitchv>:
	}
}

void checkSwitch() {
 80a1390:	b508      	push	{r3, lr}
  	if(RSflag == LOW) {
 80a1392:	4b06      	ldr	r3, [pc, #24]	; (80a13ac <_Z11checkSwitchv+0x1c>)
 80a1394:	781b      	ldrb	r3, [r3, #0]
 80a1396:	b93b      	cbnz	r3, 80a13a8 <_Z11checkSwitchv+0x18>
  		stop();
 80a1398:	f7ff feec 	bl	80a1174 <_Z4stopv>
  		Serial.print("STOPPED");
 80a139c:	f002 fbf0 	bl	80a3b80 <_Z16_fetch_usbserialv>
 80a13a0:	4903      	ldr	r1, [pc, #12]	; (80a13b0 <_Z11checkSwitchv+0x20>)
 80a13a2:	f002 fa41 	bl	80a3828 <_ZN5Print5printEPKc>
 80a13a6:	e7fe      	b.n	80a13a6 <_Z11checkSwitchv+0x16>
 80a13a8:	bd08      	pop	{r3, pc}
 80a13aa:	bf00      	nop
 80a13ac:	2000033e 	.word	0x2000033e
 80a13b0:	080a5282 	.word	0x080a5282

080a13b4 <_Z4moveiii>:
  // 1100 for maximum reverse, 1800 for maximum forward
  // 30% throttle is 1500 +/- 300*0.3 = 1500 +/- 90

  int pwm = 1500;       // default is ESC stopped

  if(direction == 1) {  // forward
 80a13b4:	2a01      	cmp	r2, #1
    pwm = 1500 + speed;
  } else {              // reverse
    pwm = 1500 - speed;
 80a13b6:	bf16      	itet	ne
 80a13b8:	f5c1 61bb 	rsbne	r1, r1, #1496	; 0x5d8
  // 30% throttle is 1500 +/- 300*0.3 = 1500 +/- 90

  int pwm = 1500;       // default is ESC stopped

  if(direction == 1) {  // forward
    pwm = 1500 + speed;
 80a13bc:	f201 51dc 	addweq	r1, r1, #1500	; 0x5dc
  } else {              // reverse
    pwm = 1500 - speed;
 80a13c0:	3104      	addne	r1, #4
  }
  if(motor == 1) {      // RIGHT ESC
 80a13c2:	2801      	cmp	r0, #1
 80a13c4:	b289      	uxth	r1, r1
    RESC.writeMicroseconds(pwm);
 80a13c6:	bf0c      	ite	eq
 80a13c8:	4801      	ldreq	r0, [pc, #4]	; (80a13d0 <_Z4moveiii+0x1c>)
  } else {              // LEFT ESC
    LESC.writeMicroseconds(pwm);
 80a13ca:	4802      	ldrne	r0, [pc, #8]	; (80a13d4 <_Z4moveiii+0x20>)
 80a13cc:	f002 b939 	b.w	80a3642 <_ZN5Servo17writeMicrosecondsEt>
 80a13d0:	200003b8 	.word	0x200003b8
 80a13d4:	20000344 	.word	0x20000344

080a13d8 <_Z8movementi>:
  }
}

void movement(int state) {
	// right now, there are only states 0, 1, and 10***
	if(state == 0) {			// move forward
 80a13d8:	b930      	cbnz	r0, 80a13e8 <_Z8movementi+0x10>
  		L_command = maxS;
 80a13da:	4a22      	ldr	r2, [pc, #136]	; (80a1464 <_Z8movementi+0x8c>)
 80a13dc:	2332      	movs	r3, #50	; 0x32
 80a13de:	6013      	str	r3, [r2, #0]
  		R_command = maxS;
 80a13e0:	4a21      	ldr	r2, [pc, #132]	; (80a1468 <_Z8movementi+0x90>)
 80a13e2:	6013      	str	r3, [r2, #0]
  		L_dir = 1;
 80a13e4:	2301      	movs	r3, #1
 80a13e6:	e010      	b.n	80a140a <_Z8movementi+0x32>
  		R_dir = 1;
	} else if(state == 10) {
 80a13e8:	280a      	cmp	r0, #10
 80a13ea:	d12f      	bne.n	80a144c <_Z8movementi+0x74>
	    if (cur - prevFlag < nudge) {			// go backwards a 'nudge'
 80a13ec:	4b1f      	ldr	r3, [pc, #124]	; (80a146c <_Z8movementi+0x94>)
 80a13ee:	4a20      	ldr	r2, [pc, #128]	; (80a1470 <_Z8movementi+0x98>)
 80a13f0:	681b      	ldr	r3, [r3, #0]
 80a13f2:	6812      	ldr	r2, [r2, #0]
 80a13f4:	1a9b      	subs	r3, r3, r2
 80a13f6:	f240 22ed 	movw	r2, #749	; 0x2ed
 80a13fa:	4293      	cmp	r3, r2
 80a13fc:	dc09      	bgt.n	80a1412 <_Z8movementi+0x3a>
	  		L_command = maxR;
 80a13fe:	4a19      	ldr	r2, [pc, #100]	; (80a1464 <_Z8movementi+0x8c>)
 80a1400:	234b      	movs	r3, #75	; 0x4b
 80a1402:	6013      	str	r3, [r2, #0]
	  		R_command = maxR;
 80a1404:	4a18      	ldr	r2, [pc, #96]	; (80a1468 <_Z8movementi+0x90>)
 80a1406:	6013      	str	r3, [r2, #0]
	  		L_dir = 0;
 80a1408:	2300      	movs	r3, #0
 80a140a:	4a1a      	ldr	r2, [pc, #104]	; (80a1474 <_Z8movementi+0x9c>)
 80a140c:	6013      	str	r3, [r2, #0]
	  		R_dir = 0;
 80a140e:	4a1a      	ldr	r2, [pc, #104]	; (80a1478 <_Z8movementi+0xa0>)
 80a1410:	e025      	b.n	80a145e <_Z8movementi+0x86>
	    }
	    else if (cur - prevFlag < degrees180) {	// turn 180
 80a1412:	f240 62bc 	movw	r2, #1724	; 0x6bc
 80a1416:	4293      	cmp	r3, r2
 80a1418:	dc0b      	bgt.n	80a1432 <_Z8movementi+0x5a>
	  		L_command = maxR;
 80a141a:	4a12      	ldr	r2, [pc, #72]	; (80a1464 <_Z8movementi+0x8c>)
 80a141c:	234b      	movs	r3, #75	; 0x4b
 80a141e:	6013      	str	r3, [r2, #0]
	  		R_command = maxR;
 80a1420:	4a11      	ldr	r2, [pc, #68]	; (80a1468 <_Z8movementi+0x90>)
 80a1422:	6013      	str	r3, [r2, #0]
	  		R_dir = 0;
 80a1424:	4b14      	ldr	r3, [pc, #80]	; (80a1478 <_Z8movementi+0xa0>)
 80a1426:	2200      	movs	r2, #0
 80a1428:	601a      	str	r2, [r3, #0]
	  		L_dir = 1;
 80a142a:	4b12      	ldr	r3, [pc, #72]	; (80a1474 <_Z8movementi+0x9c>)
 80a142c:	2201      	movs	r2, #1
 80a142e:	601a      	str	r2, [r3, #0]
 80a1430:	4770      	bx	lr
	    }
	    else {									// reset line flags & detection flag
	        FLflag = true;						// only when movement is FINISHED
 80a1432:	4a12      	ldr	r2, [pc, #72]	; (80a147c <_Z8movementi+0xa4>)
 80a1434:	2301      	movs	r3, #1
 80a1436:	7013      	strb	r3, [r2, #0]
	        FRflag = true;
 80a1438:	4a11      	ldr	r2, [pc, #68]	; (80a1480 <_Z8movementi+0xa8>)
 80a143a:	7013      	strb	r3, [r2, #0]
	        BLflag = true;
 80a143c:	4a11      	ldr	r2, [pc, #68]	; (80a1484 <_Z8movementi+0xac>)
 80a143e:	7013      	strb	r3, [r2, #0]
	        BRflag = true;
 80a1440:	4a11      	ldr	r2, [pc, #68]	; (80a1488 <_Z8movementi+0xb0>)
 80a1442:	7013      	strb	r3, [r2, #0]
	        prevFlagSet = false;
 80a1444:	4b11      	ldr	r3, [pc, #68]	; (80a148c <_Z8movementi+0xb4>)
 80a1446:	2200      	movs	r2, #0
 80a1448:	701a      	strb	r2, [r3, #0]
 80a144a:	4770      	bx	lr
	    }
	    // moving = true;
	} else {					// stop
  		L_command = 0;
 80a144c:	4a05      	ldr	r2, [pc, #20]	; (80a1464 <_Z8movementi+0x8c>)
 80a144e:	2300      	movs	r3, #0
 80a1450:	6013      	str	r3, [r2, #0]
  		R_command = 0;
 80a1452:	4a05      	ldr	r2, [pc, #20]	; (80a1468 <_Z8movementi+0x90>)
 80a1454:	6013      	str	r3, [r2, #0]
  		R_dir = 1;
 80a1456:	4a08      	ldr	r2, [pc, #32]	; (80a1478 <_Z8movementi+0xa0>)
 80a1458:	2301      	movs	r3, #1
 80a145a:	6013      	str	r3, [r2, #0]
  		L_dir = 1;
 80a145c:	4a05      	ldr	r2, [pc, #20]	; (80a1474 <_Z8movementi+0x9c>)
 80a145e:	6013      	str	r3, [r2, #0]
 80a1460:	4770      	bx	lr
 80a1462:	bf00      	nop
 80a1464:	200003d4 	.word	0x200003d4
 80a1468:	2000040c 	.word	0x2000040c
 80a146c:	200003cc 	.word	0x200003cc
 80a1470:	200003b4 	.word	0x200003b4
 80a1474:	2000031c 	.word	0x2000031c
 80a1478:	20000304 	.word	0x20000304
 80a147c:	20000324 	.word	0x20000324
 80a1480:	20000325 	.word	0x20000325
 80a1484:	20000308 	.word	0x20000308
 80a1488:	2000032c 	.word	0x2000032c
 80a148c:	200003d0 	.word	0x200003d0

080a1490 <_Z9checkLinev>:
	}
}

void checkLine() {
 80a1490:	b510      	push	{r4, lr}
  if (!FLflag || !FRflag) {				// if front line triggered
 80a1492:	4b10      	ldr	r3, [pc, #64]	; (80a14d4 <_Z9checkLinev+0x44>)
 80a1494:	4c10      	ldr	r4, [pc, #64]	; (80a14d8 <_Z9checkLinev+0x48>)
 80a1496:	781b      	ldrb	r3, [r3, #0]
 80a1498:	b113      	cbz	r3, 80a14a0 <_Z9checkLinev+0x10>
 80a149a:	4b10      	ldr	r3, [pc, #64]	; (80a14dc <_Z9checkLinev+0x4c>)
 80a149c:	781b      	ldrb	r3, [r3, #0]
 80a149e:	b95b      	cbnz	r3, 80a14b8 <_Z9checkLinev+0x28>
    if (!prevFlagSet) {					// and if this is the FIRST detection of the line
 80a14a0:	4b0f      	ldr	r3, [pc, #60]	; (80a14e0 <_Z9checkLinev+0x50>)
 80a14a2:	781a      	ldrb	r2, [r3, #0]
 80a14a4:	b932      	cbnz	r2, 80a14b4 <_Z9checkLinev+0x24>
      prevFlag = cur;					// reset the turn timer
 80a14a6:	6821      	ldr	r1, [r4, #0]
 80a14a8:	4a0e      	ldr	r2, [pc, #56]	; (80a14e4 <_Z9checkLinev+0x54>)
      prevFlagSet = true;				// ensures timer is reset only ONCE
 80a14aa:	2001      	movs	r0, #1
}

void checkLine() {
  if (!FLflag || !FRflag) {				// if front line triggered
    if (!prevFlagSet) {					// and if this is the FIRST detection of the line
      prevFlag = cur;					// reset the turn timer
 80a14ac:	6011      	str	r1, [r2, #0]
      prevFlagSet = true;				// ensures timer is reset only ONCE
 80a14ae:	7018      	strb	r0, [r3, #0]
      movement(1);						// stop before you fall off
 80a14b0:	f7ff ff92 	bl	80a13d8 <_Z8movementi>
    }
    movement(10);						// begin/continue the turn sequence
 80a14b4:	200a      	movs	r0, #10
 80a14b6:	e006      	b.n	80a14c6 <_Z9checkLinev+0x36>
  } else if (!BRflag || !BLflag) {		// if back line triggered, move forward
 80a14b8:	4b0b      	ldr	r3, [pc, #44]	; (80a14e8 <_Z9checkLinev+0x58>)
 80a14ba:	781b      	ldrb	r3, [r3, #0]
 80a14bc:	b113      	cbz	r3, 80a14c4 <_Z9checkLinev+0x34>
 80a14be:	4b0b      	ldr	r3, [pc, #44]	; (80a14ec <_Z9checkLinev+0x5c>)
 80a14c0:	781b      	ldrb	r3, [r3, #0]
 80a14c2:	b913      	cbnz	r3, 80a14ca <_Z9checkLinev+0x3a>
    movement(0);
 80a14c4:	2000      	movs	r0, #0
 80a14c6:	f7ff ff87 	bl	80a13d8 <_Z8movementi>
 80a14ca:	f001 ff09 	bl	80a32e0 <HAL_Timer_Get_Milli_Seconds>
  } else if (!prevFlagSet) {			
  	// if a line hasn't been seen, continue fuzzy
  }

  cur = millis();						// update timer
 80a14ce:	6020      	str	r0, [r4, #0]
 80a14d0:	bd10      	pop	{r4, pc}
 80a14d2:	bf00      	nop
 80a14d4:	20000324 	.word	0x20000324
 80a14d8:	200003cc 	.word	0x200003cc
 80a14dc:	20000325 	.word	0x20000325
 80a14e0:	200003d0 	.word	0x200003d0
 80a14e4:	200003b4 	.word	0x200003b4
 80a14e8:	2000032c 	.word	0x2000032c
 80a14ec:	20000308 	.word	0x20000308

080a14f0 <loop>:
}

void loop(){
 80a14f0:	b508      	push	{r3, lr}
	checkLine();
 80a14f2:	f7ff ffcd 	bl	80a1490 <_Z9checkLinev>

	if (!prevFlagSet) {	// if dealing with line
 80a14f6:	4b0c      	ldr	r3, [pc, #48]	; (80a1528 <loop+0x38>)
 80a14f8:	781b      	ldrb	r3, [r3, #0]
 80a14fa:	b91b      	cbnz	r3, 80a1504 <loop+0x14>
		getToF();
 80a14fc:	f7ff fe4c 	bl	80a1198 <_Z6getToFv>
		doFuzzy();
 80a1500:	f7ff fe70 	bl	80a11e4 <_Z7doFuzzyv>
	}

	checkSwitch();
 80a1504:	f7ff ff44 	bl	80a1390 <_Z11checkSwitchv>

  	move(1, R_command, R_dir);
 80a1508:	4b08      	ldr	r3, [pc, #32]	; (80a152c <loop+0x3c>)
 80a150a:	2001      	movs	r0, #1
 80a150c:	681a      	ldr	r2, [r3, #0]
 80a150e:	4b08      	ldr	r3, [pc, #32]	; (80a1530 <loop+0x40>)
 80a1510:	6819      	ldr	r1, [r3, #0]
 80a1512:	f7ff ff4f 	bl	80a13b4 <_Z4moveiii>
  	move(2, L_command, L_dir);
 80a1516:	4b07      	ldr	r3, [pc, #28]	; (80a1534 <loop+0x44>)
 80a1518:	2002      	movs	r0, #2
 80a151a:	681a      	ldr	r2, [r3, #0]
 80a151c:	4b06      	ldr	r3, [pc, #24]	; (80a1538 <loop+0x48>)
 80a151e:	6819      	ldr	r1, [r3, #0]
 80a1520:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	checkSwitch();

  	move(1, R_command, R_dir);
  	move(2, L_command, L_dir);
 80a1524:	f7ff bf46 	b.w	80a13b4 <_Z4moveiii>
 80a1528:	200003d0 	.word	0x200003d0
 80a152c:	20000304 	.word	0x20000304
 80a1530:	2000040c 	.word	0x2000040c
 80a1534:	2000031c 	.word	0x2000031c
 80a1538:	200003d4 	.word	0x200003d4

080a153c <_GLOBAL__sub_I_sensor0>:
 80a153c:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a153e:	f001 fe77 	bl	80a3230 <HAL_Pin_Map>
#if !defined(PARTICLE)
#  include <Wire.h>
#endif

// Time of Flight sensors
VL53L0X sensor0;	// RR
 80a1542:	481d      	ldr	r0, [pc, #116]	; (80a15b8 <_GLOBAL__sub_I_sensor0+0x7c>)
 80a1544:	f000 f85a 	bl	80a15fc <_ZN7VL53L0XC1Ev>
VL53L0X sensor1;	// RM
 80a1548:	481c      	ldr	r0, [pc, #112]	; (80a15bc <_GLOBAL__sub_I_sensor0+0x80>)
 80a154a:	f000 f857 	bl	80a15fc <_ZN7VL53L0XC1Ev>
VL53L0X sensor2;	// LM
 80a154e:	481c      	ldr	r0, [pc, #112]	; (80a15c0 <_GLOBAL__sub_I_sensor0+0x84>)
 80a1550:	f000 f854 	bl	80a15fc <_ZN7VL53L0XC1Ev>
VL53L0X sensor3;	// LL
 80a1554:	481b      	ldr	r0, [pc, #108]	; (80a15c4 <_GLOBAL__sub_I_sensor0+0x88>)
 80a1556:	f000 f851 	bl	80a15fc <_ZN7VL53L0XC1Ev>
// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
int curAccel = 0;
void getAccel();        // ISR prototype
LIS3DHSample sample;
LIS3DHI2C accel(Wire, 0, WKP);
 80a155a:	f002 fd1f 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a155e:	2311      	movs	r3, #17
 80a1560:	4601      	mov	r1, r0
 80a1562:	2200      	movs	r2, #0
 80a1564:	4818      	ldr	r0, [pc, #96]	; (80a15c8 <_GLOBAL__sub_I_sensor0+0x8c>)
 80a1566:	f000 ff49 	bl	80a23fc <_ZN9LIS3DHI2CC1ER7TwoWirehi>
 80a156a:	4a18      	ldr	r2, [pc, #96]	; (80a15cc <_GLOBAL__sub_I_sensor0+0x90>)
 80a156c:	4918      	ldr	r1, [pc, #96]	; (80a15d0 <_GLOBAL__sub_I_sensor0+0x94>)
 80a156e:	4816      	ldr	r0, [pc, #88]	; (80a15c8 <_GLOBAL__sub_I_sensor0+0x8c>)
 80a1570:	f002 fd34 	bl	80a3fdc <__aeabi_atexit>

// Car ESCs
Servo LESC;
 80a1574:	4817      	ldr	r0, [pc, #92]	; (80a15d4 <_GLOBAL__sub_I_sensor0+0x98>)
 80a1576:	f002 f884 	bl	80a3682 <_ZN5ServoC1Ev>
Servo RESC;
 80a157a:	4817      	ldr	r0, [pc, #92]	; (80a15d8 <_GLOBAL__sub_I_sensor0+0x9c>)
 80a157c:	f002 f881 	bl	80a3682 <_ZN5ServoC1Ev>
int R_command = 0;
int L_dir = 1;
int R_dir = 1;

// Fuzzy logic
Fuzzy* fuzzy = new Fuzzy();
 80a1580:	2018      	movs	r0, #24
 80a1582:	f7fe fd8a 	bl	80a009a <_Znwj>
 80a1586:	4604      	mov	r4, r0
 80a1588:	b108      	cbz	r0, 80a158e <_GLOBAL__sub_I_sensor0+0x52>
 80a158a:	f001 fcc0 	bl	80a2f0e <_ZN5FuzzyC1Ev>
 80a158e:	4b13      	ldr	r3, [pc, #76]	; (80a15dc <_GLOBAL__sub_I_sensor0+0xa0>)
float output;
String decision;
 80a1590:	4913      	ldr	r1, [pc, #76]	; (80a15e0 <_GLOBAL__sub_I_sensor0+0xa4>)
 80a1592:	4814      	ldr	r0, [pc, #80]	; (80a15e4 <_GLOBAL__sub_I_sensor0+0xa8>)
int R_command = 0;
int L_dir = 1;
int R_dir = 1;

// Fuzzy logic
Fuzzy* fuzzy = new Fuzzy();
 80a1594:	601c      	str	r4, [r3, #0]
float output;
String decision;
 80a1596:	f002 f8fd 	bl	80a3794 <_ZN6StringC1EPK19__FlashStringHelper>
 80a159a:	4a0c      	ldr	r2, [pc, #48]	; (80a15cc <_GLOBAL__sub_I_sensor0+0x90>)
 80a159c:	4912      	ldr	r1, [pc, #72]	; (80a15e8 <_GLOBAL__sub_I_sensor0+0xac>)
 80a159e:	4811      	ldr	r0, [pc, #68]	; (80a15e4 <_GLOBAL__sub_I_sensor0+0xa8>)
 80a15a0:	f002 fd1c 	bl	80a3fdc <__aeabi_atexit>

// Particle Photon settings
SYSTEM_THREAD(ENABLED);
 80a15a4:	2001      	movs	r0, #1
 80a15a6:	2100      	movs	r1, #0
 80a15a8:	f001 fff4 	bl	80a3594 <system_thread_set_state>

	checkSwitch();

  	move(1, R_command, R_dir);
  	move(2, L_command, L_dir);
 80a15ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a15b0:	2003      	movs	r0, #3
 80a15b2:	f001 bfdf 	b.w	80a3574 <set_system_mode>
 80a15b6:	bf00      	nop
 80a15b8:	2000036c 	.word	0x2000036c
 80a15bc:	200003ec 	.word	0x200003ec
 80a15c0:	20000384 	.word	0x20000384
 80a15c4:	2000039c 	.word	0x2000039c
 80a15c8:	20000354 	.word	0x20000354
 80a15cc:	20000334 	.word	0x20000334
 80a15d0:	080a21c1 	.word	0x080a21c1
 80a15d4:	20000344 	.word	0x20000344
 80a15d8:	200003b8 	.word	0x200003b8
 80a15dc:	20000368 	.word	0x20000368
 80a15e0:	080a530e 	.word	0x080a530e
 80a15e4:	200003dc 	.word	0x200003dc
 80a15e8:	080a3707 	.word	0x080a3707

080a15ec <_ZN7TwoWire5writeEm>:
  virtual int peek(void);
  virtual void flush(void);
  void onReceive(void (*)(int));
  void onRequest(void (*)(void));

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
 80a15ec:	6803      	ldr	r3, [r0, #0]
 80a15ee:	b2c9      	uxtb	r1, r1
 80a15f0:	689b      	ldr	r3, [r3, #8]
 80a15f2:	4718      	bx	r3

080a15f4 <_ZN7TwoWire5writeEi>:
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a15f4:	6803      	ldr	r3, [r0, #0]
 80a15f6:	b2c9      	uxtb	r1, r1
 80a15f8:	689b      	ldr	r3, [r3, #8]
 80a15fa:	4718      	bx	r3

080a15fc <_ZN7VL53L0XC1Ev>:
// Constructors ////////////////////////////////////////////////////////////////

VL53L0X::VL53L0X(void)
  : address(ADDRESS_DEFAULT)
  , io_timeout(0) // no timeout
  , did_timeout(false)
 80a15fc:	2229      	movs	r2, #41	; 0x29
 80a15fe:	7042      	strb	r2, [r0, #1]
 80a1600:	2200      	movs	r2, #0
 80a1602:	6042      	str	r2, [r0, #4]
 80a1604:	7202      	strb	r2, [r0, #8]
{
}
 80a1606:	4770      	bx	lr

080a1608 <_ZN7VL53L0X8writeRegEhh>:
  return true;
}

// Write an 8-bit register
void VL53L0X::writeReg(uint8_t reg, uint8_t value)
{
 80a1608:	b570      	push	{r4, r5, r6, lr}
 80a160a:	4604      	mov	r4, r0
 80a160c:	4615      	mov	r5, r2
 80a160e:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a1610:	f002 fcc4 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a1614:	7861      	ldrb	r1, [r4, #1]
 80a1616:	f002 fc00 	bl	80a3e1a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a161a:	f002 fcbf 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a161e:	6803      	ldr	r3, [r0, #0]
 80a1620:	4631      	mov	r1, r6
 80a1622:	689b      	ldr	r3, [r3, #8]
 80a1624:	4798      	blx	r3
  Wire.write(value);
 80a1626:	f002 fcb9 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a162a:	6803      	ldr	r3, [r0, #0]
 80a162c:	4629      	mov	r1, r5
 80a162e:	689b      	ldr	r3, [r3, #8]
 80a1630:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a1632:	f002 fcb3 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a1636:	f002 fbf8 	bl	80a3e2a <_ZN7TwoWire15endTransmissionEv>
 80a163a:	7020      	strb	r0, [r4, #0]
 80a163c:	bd70      	pop	{r4, r5, r6, pc}

080a163e <_ZN7VL53L0X10setAddressEh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void VL53L0X::setAddress(uint8_t new_addr)
{
 80a163e:	b538      	push	{r3, r4, r5, lr}
 80a1640:	4605      	mov	r5, r0
 80a1642:	460c      	mov	r4, r1
  writeReg(I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 80a1644:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80a1648:	218a      	movs	r1, #138	; 0x8a
 80a164a:	f7ff ffdd 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  address = new_addr;
 80a164e:	706c      	strb	r4, [r5, #1]
 80a1650:	bd38      	pop	{r3, r4, r5, pc}

080a1652 <_ZN7VL53L0X13writeReg16BitEht>:
  last_status = Wire.endTransmission();
}

// Write a 16-bit register
void VL53L0X::writeReg16Bit(uint8_t reg, uint16_t value)
{
 80a1652:	b570      	push	{r4, r5, r6, lr}
 80a1654:	4604      	mov	r4, r0
 80a1656:	4615      	mov	r5, r2
 80a1658:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a165a:	f002 fc9f 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a165e:	7861      	ldrb	r1, [r4, #1]
 80a1660:	f002 fbdb 	bl	80a3e1a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a1664:	f002 fc9a 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a1668:	6803      	ldr	r3, [r0, #0]
 80a166a:	4631      	mov	r1, r6
 80a166c:	689b      	ldr	r3, [r3, #8]
 80a166e:	4798      	blx	r3
  Wire.write((value >> 8) & 0xFF); // value high byte
 80a1670:	f002 fc94 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a1674:	0a29      	lsrs	r1, r5, #8
 80a1676:	f7ff ffbd 	bl	80a15f4 <_ZN7TwoWire5writeEi>
  Wire.write( value       & 0xFF); // value low byte
 80a167a:	f002 fc8f 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a167e:	b2e9      	uxtb	r1, r5
 80a1680:	f7ff ffb8 	bl	80a15f4 <_ZN7TwoWire5writeEi>
  last_status = Wire.endTransmission();
 80a1684:	f002 fc8a 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a1688:	f002 fbcf 	bl	80a3e2a <_ZN7TwoWire15endTransmissionEv>
 80a168c:	7020      	strb	r0, [r4, #0]
 80a168e:	bd70      	pop	{r4, r5, r6, pc}

080a1690 <_ZN7VL53L0X13writeReg32BitEhm>:
}

// Write a 32-bit register
void VL53L0X::writeReg32Bit(uint8_t reg, uint32_t value)
{
 80a1690:	b570      	push	{r4, r5, r6, lr}
 80a1692:	4605      	mov	r5, r0
 80a1694:	4614      	mov	r4, r2
 80a1696:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a1698:	f002 fc80 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a169c:	7869      	ldrb	r1, [r5, #1]
 80a169e:	f002 fbbc 	bl	80a3e1a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a16a2:	f002 fc7b 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a16a6:	6803      	ldr	r3, [r0, #0]
 80a16a8:	4631      	mov	r1, r6
 80a16aa:	689b      	ldr	r3, [r3, #8]
 80a16ac:	4798      	blx	r3
  Wire.write((value >> 24) & 0xFF); // value highest byte
 80a16ae:	f002 fc75 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a16b2:	0e21      	lsrs	r1, r4, #24
 80a16b4:	f7ff ff9a 	bl	80a15ec <_ZN7TwoWire5writeEm>
  Wire.write((value >> 16) & 0xFF);
 80a16b8:	f002 fc70 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a16bc:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80a16c0:	f7ff ff94 	bl	80a15ec <_ZN7TwoWire5writeEm>
  Wire.write((value >>  8) & 0xFF);
 80a16c4:	f002 fc6a 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a16c8:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80a16cc:	f7ff ff8e 	bl	80a15ec <_ZN7TwoWire5writeEm>
  Wire.write( value        & 0xFF); // value lowest byte
 80a16d0:	f002 fc64 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a16d4:	b2e1      	uxtb	r1, r4
 80a16d6:	f7ff ff89 	bl	80a15ec <_ZN7TwoWire5writeEm>
  last_status = Wire.endTransmission();
 80a16da:	f002 fc5f 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a16de:	f002 fba4 	bl	80a3e2a <_ZN7TwoWire15endTransmissionEv>
 80a16e2:	7028      	strb	r0, [r5, #0]
 80a16e4:	bd70      	pop	{r4, r5, r6, pc}

080a16e6 <_ZN7VL53L0X7readRegEh>:
}

// Read an 8-bit register
uint8_t VL53L0X::readReg(uint8_t reg)
{
 80a16e6:	b538      	push	{r3, r4, r5, lr}
 80a16e8:	4604      	mov	r4, r0
 80a16ea:	460d      	mov	r5, r1
  uint8_t value;

  Wire.beginTransmission(address);
 80a16ec:	f002 fc56 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a16f0:	7861      	ldrb	r1, [r4, #1]
 80a16f2:	f002 fb92 	bl	80a3e1a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a16f6:	f002 fc51 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a16fa:	6803      	ldr	r3, [r0, #0]
 80a16fc:	4629      	mov	r1, r5
 80a16fe:	689b      	ldr	r3, [r3, #8]
 80a1700:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a1702:	f002 fc4b 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a1706:	f002 fb90 	bl	80a3e2a <_ZN7TwoWire15endTransmissionEv>
 80a170a:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)1);
 80a170c:	f002 fc46 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a1710:	2201      	movs	r2, #1
 80a1712:	7861      	ldrb	r1, [r4, #1]
 80a1714:	f002 fb79 	bl	80a3e0a <_ZN7TwoWire11requestFromEhh>
  value = Wire.read();
 80a1718:	f002 fc40 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a171c:	6803      	ldr	r3, [r0, #0]
 80a171e:	695b      	ldr	r3, [r3, #20]
 80a1720:	4798      	blx	r3

  return value;
}
 80a1722:	b2c0      	uxtb	r0, r0
 80a1724:	bd38      	pop	{r3, r4, r5, pc}

080a1726 <_ZN7VL53L0X12readReg16BitEh>:

// Read a 16-bit register
uint16_t VL53L0X::readReg16Bit(uint8_t reg)
{
 80a1726:	b538      	push	{r3, r4, r5, lr}
 80a1728:	4604      	mov	r4, r0
 80a172a:	460d      	mov	r5, r1
  uint16_t value;

  Wire.beginTransmission(address);
 80a172c:	f002 fc36 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a1730:	7861      	ldrb	r1, [r4, #1]
 80a1732:	f002 fb72 	bl	80a3e1a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a1736:	f002 fc31 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a173a:	6803      	ldr	r3, [r0, #0]
 80a173c:	4629      	mov	r1, r5
 80a173e:	689b      	ldr	r3, [r3, #8]
 80a1740:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a1742:	f002 fc2b 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a1746:	f002 fb70 	bl	80a3e2a <_ZN7TwoWire15endTransmissionEv>
 80a174a:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)2);
 80a174c:	f002 fc26 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a1750:	7861      	ldrb	r1, [r4, #1]
 80a1752:	2202      	movs	r2, #2
 80a1754:	f002 fb59 	bl	80a3e0a <_ZN7TwoWire11requestFromEhh>
  value  = (uint16_t)Wire.read() << 8; // value high byte
 80a1758:	f002 fc20 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a175c:	6803      	ldr	r3, [r0, #0]
 80a175e:	695b      	ldr	r3, [r3, #20]
 80a1760:	4798      	blx	r3
 80a1762:	4604      	mov	r4, r0
  value |=           Wire.read();      // value low byte
 80a1764:	f002 fc1a 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a1768:	6803      	ldr	r3, [r0, #0]
 80a176a:	695b      	ldr	r3, [r3, #20]
 80a176c:	4798      	blx	r3
 80a176e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8

  return value;
}
 80a1772:	b280      	uxth	r0, r0
 80a1774:	bd38      	pop	{r3, r4, r5, pc}

080a1776 <_ZN7VL53L0X10writeMultiEhPKhh>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
 80a1776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1778:	4606      	mov	r6, r0
 80a177a:	4614      	mov	r4, r2
 80a177c:	461d      	mov	r5, r3
 80a177e:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a1780:	f002 fc0c 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a1784:	7871      	ldrb	r1, [r6, #1]
 80a1786:	f002 fb48 	bl	80a3e1a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a178a:	f002 fc07 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a178e:	6803      	ldr	r3, [r0, #0]
 80a1790:	4639      	mov	r1, r7
 80a1792:	689b      	ldr	r3, [r3, #8]
 80a1794:	4798      	blx	r3
 80a1796:	4425      	add	r5, r4

  while (count-- > 0)
 80a1798:	42ac      	cmp	r4, r5
 80a179a:	d007      	beq.n	80a17ac <_ZN7VL53L0X10writeMultiEhPKhh+0x36>
  {
    Wire.write(*(src++));
 80a179c:	f002 fbfe 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a17a0:	6803      	ldr	r3, [r0, #0]
 80a17a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a17a6:	689b      	ldr	r3, [r3, #8]
 80a17a8:	4798      	blx	r3
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
  Wire.beginTransmission(address);
  Wire.write(reg);

  while (count-- > 0)
 80a17aa:	e7f5      	b.n	80a1798 <_ZN7VL53L0X10writeMultiEhPKhh+0x22>
  {
    Wire.write(*(src++));
  }

  last_status = Wire.endTransmission();
 80a17ac:	f002 fbf6 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a17b0:	f002 fb3b 	bl	80a3e2a <_ZN7TwoWire15endTransmissionEv>
 80a17b4:	7030      	strb	r0, [r6, #0]
 80a17b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a17b8 <_ZN7VL53L0X9readMultiEhPhh>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void VL53L0X::readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 80a17b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a17ba:	4606      	mov	r6, r0
 80a17bc:	4614      	mov	r4, r2
 80a17be:	461d      	mov	r5, r3
 80a17c0:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a17c2:	f002 fbeb 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a17c6:	7871      	ldrb	r1, [r6, #1]
 80a17c8:	f002 fb27 	bl	80a3e1a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a17cc:	f002 fbe6 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a17d0:	6803      	ldr	r3, [r0, #0]
 80a17d2:	4639      	mov	r1, r7
 80a17d4:	689b      	ldr	r3, [r3, #8]
 80a17d6:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a17d8:	f002 fbe0 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a17dc:	f002 fb25 	bl	80a3e2a <_ZN7TwoWire15endTransmissionEv>
 80a17e0:	7030      	strb	r0, [r6, #0]

  Wire.requestFrom(address, count);
 80a17e2:	f002 fbdb 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a17e6:	462a      	mov	r2, r5
 80a17e8:	7871      	ldrb	r1, [r6, #1]
 80a17ea:	f002 fb0e 	bl	80a3e0a <_ZN7TwoWire11requestFromEhh>
 80a17ee:	4425      	add	r5, r4

  while (count-- > 0)
 80a17f0:	42ac      	cmp	r4, r5
 80a17f2:	d007      	beq.n	80a1804 <_ZN7VL53L0X9readMultiEhPhh+0x4c>
  {
    *(dst++) = Wire.read();
 80a17f4:	f002 fbd2 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a17f8:	6803      	ldr	r3, [r0, #0]
 80a17fa:	695b      	ldr	r3, [r3, #20]
 80a17fc:	4798      	blx	r3
 80a17fe:	f804 0b01 	strb.w	r0, [r4], #1
  Wire.write(reg);
  last_status = Wire.endTransmission();

  Wire.requestFrom(address, count);

  while (count-- > 0)
 80a1802:	e7f5      	b.n	80a17f0 <_ZN7VL53L0X9readMultiEhPhh+0x38>
 80a1804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1808 <_ZN7VL53L0X18setSignalRateLimitEf>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
 80a1808:	b570      	push	{r4, r5, r6, lr}
 80a180a:	460d      	mov	r5, r1
 80a180c:	4606      	mov	r6, r0
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a180e:	2100      	movs	r1, #0
 80a1810:	4628      	mov	r0, r5
 80a1812:	f003 fc7f 	bl	80a5114 <__aeabi_fcmplt>
 80a1816:	b9b0      	cbnz	r0, 80a1846 <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>
 80a1818:	4628      	mov	r0, r5
 80a181a:	f002 fe91 	bl	80a4540 <__aeabi_f2d>
 80a181e:	a30c      	add	r3, pc, #48	; (adr r3, 80a1850 <_ZN7VL53L0X18setSignalRateLimitEf+0x48>)
 80a1820:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1824:	f003 f970 	bl	80a4b08 <__aeabi_dcmpgt>
 80a1828:	b968      	cbnz	r0, 80a1846 <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80a182a:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80a182e:	4628      	mov	r0, r5
 80a1830:	f003 fad2 	bl	80a4dd8 <__aeabi_fmul>
 80a1834:	f003 fc96 	bl	80a5164 <__aeabi_f2uiz>
 80a1838:	2144      	movs	r1, #68	; 0x44
 80a183a:	b282      	uxth	r2, r0
 80a183c:	4630      	mov	r0, r6
 80a183e:	f7ff ff08 	bl	80a1652 <_ZN7VL53L0X13writeReg16BitEht>
 80a1842:	2001      	movs	r0, #1
 80a1844:	bd70      	pop	{r4, r5, r6, pc}
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a1846:	2000      	movs	r0, #0
 80a1848:	bd70      	pop	{r4, r5, r6, pc}
 80a184a:	bf00      	nop
 80a184c:	f3af 8000 	nop.w
 80a1850:	0a3d70a4 	.word	0x0a3d70a4
 80a1854:	407fffd7 	.word	0x407fffd7

080a1858 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>:
}

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t VL53L0X::getVcselPulsePeriod(vcselPeriodType type)
{
 80a1858:	b508      	push	{r3, lr}
  if (type == VcselPeriodPreRange)
 80a185a:	b909      	cbnz	r1, 80a1860 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x8>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80a185c:	2150      	movs	r1, #80	; 0x50
 80a185e:	e002      	b.n	80a1866 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0xe>
  }
  else if (type == VcselPeriodFinalRange)
 80a1860:	2901      	cmp	r1, #1
 80a1862:	d106      	bne.n	80a1872 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x1a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a1864:	2170      	movs	r1, #112	; 0x70
 80a1866:	f7ff ff3e 	bl	80a16e6 <_ZN7VL53L0X7readRegEh>
 80a186a:	3001      	adds	r0, #1
 80a186c:	0040      	lsls	r0, r0, #1
 80a186e:	b2c0      	uxtb	r0, r0
 80a1870:	bd08      	pop	{r3, pc}
  }
  else { return 255; }
 80a1872:	20ff      	movs	r0, #255	; 0xff
}
 80a1874:	bd08      	pop	{r3, pc}

080a1876 <_ZN7VL53L0X15startContinuousEm>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X::startContinuous(uint32_t period_ms)
{
 80a1876:	b538      	push	{r3, r4, r5, lr}
 80a1878:	4604      	mov	r4, r0
 80a187a:	460d      	mov	r5, r1
  writeReg(0x80, 0x01);
 80a187c:	2201      	movs	r2, #1
 80a187e:	2180      	movs	r1, #128	; 0x80
 80a1880:	f7ff fec2 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a1884:	2201      	movs	r2, #1
 80a1886:	21ff      	movs	r1, #255	; 0xff
 80a1888:	4620      	mov	r0, r4
 80a188a:	f7ff febd 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a188e:	2200      	movs	r2, #0
 80a1890:	4611      	mov	r1, r2
 80a1892:	4620      	mov	r0, r4
 80a1894:	f7ff feb8 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x91, stop_variable);
 80a1898:	7c22      	ldrb	r2, [r4, #16]
 80a189a:	2191      	movs	r1, #145	; 0x91
 80a189c:	4620      	mov	r0, r4
 80a189e:	f7ff feb3 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a18a2:	2201      	movs	r2, #1
 80a18a4:	2100      	movs	r1, #0
 80a18a6:	4620      	mov	r0, r4
 80a18a8:	f7ff feae 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a18ac:	2200      	movs	r2, #0
 80a18ae:	21ff      	movs	r1, #255	; 0xff
 80a18b0:	4620      	mov	r0, r4
 80a18b2:	f7ff fea9 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a18b6:	2200      	movs	r2, #0
 80a18b8:	2180      	movs	r1, #128	; 0x80
 80a18ba:	4620      	mov	r0, r4
 80a18bc:	f7ff fea4 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  if (period_ms != 0)
 80a18c0:	b16d      	cbz	r5, 80a18de <_ZN7VL53L0X15startContinuousEm+0x68>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 80a18c2:	21f8      	movs	r1, #248	; 0xf8
 80a18c4:	4620      	mov	r0, r4
 80a18c6:	f7ff ff2e 	bl	80a1726 <_ZN7VL53L0X12readReg16BitEh>

    if (osc_calibrate_val != 0)
 80a18ca:	b100      	cbz	r0, 80a18ce <_ZN7VL53L0X15startContinuousEm+0x58>
    {
      period_ms *= osc_calibrate_val;
 80a18cc:	4345      	muls	r5, r0
    }

    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 80a18ce:	462a      	mov	r2, r5
 80a18d0:	2104      	movs	r1, #4
 80a18d2:	4620      	mov	r0, r4
 80a18d4:	f7ff fedc 	bl	80a1690 <_ZN7VL53L0X13writeReg32BitEhm>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 80a18d8:	2204      	movs	r2, #4
 80a18da:	2100      	movs	r1, #0
 80a18dc:	e001      	b.n	80a18e2 <_ZN7VL53L0X15startContinuousEm+0x6c>
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a18de:	4629      	mov	r1, r5
 80a18e0:	2202      	movs	r2, #2
 80a18e2:	4620      	mov	r0, r4
  }
}
 80a18e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a18e8:	f7ff be8e 	b.w	80a1608 <_ZN7VL53L0X8writeRegEhh>

080a18ec <_ZN7VL53L0X30readRangeContinuousMillimetersEv>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t VL53L0X::readRangeContinuousMillimeters(void)
{
 80a18ec:	b538      	push	{r3, r4, r5, lr}
 80a18ee:	4604      	mov	r4, r0
 80a18f0:	f001 fcf6 	bl	80a32e0 <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a18f4:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a18f6:	2113      	movs	r1, #19
 80a18f8:	4620      	mov	r0, r4
 80a18fa:	f7ff fef4 	bl	80a16e6 <_ZN7VL53L0X7readRegEh>
 80a18fe:	0743      	lsls	r3, r0, #29
 80a1900:	d10e      	bne.n	80a1920 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0x34>
  {
    if (checkTimeoutExpired())
 80a1902:	6863      	ldr	r3, [r4, #4]
 80a1904:	2b00      	cmp	r3, #0
 80a1906:	d0f6      	beq.n	80a18f6 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
 80a1908:	f001 fcea 	bl	80a32e0 <HAL_Timer_Get_Milli_Seconds>
 80a190c:	68e3      	ldr	r3, [r4, #12]
 80a190e:	1ac0      	subs	r0, r0, r3
 80a1910:	6863      	ldr	r3, [r4, #4]
 80a1912:	4298      	cmp	r0, r3
 80a1914:	d9ef      	bls.n	80a18f6 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
    {
      did_timeout = true;
 80a1916:	2301      	movs	r3, #1
 80a1918:	7223      	strb	r3, [r4, #8]
      return 65535;
 80a191a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  return range;
}
 80a191e:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);
 80a1920:	211e      	movs	r1, #30
 80a1922:	4620      	mov	r0, r4
 80a1924:	f7ff feff 	bl	80a1726 <_ZN7VL53L0X12readReg16BitEh>
 80a1928:	4605      	mov	r5, r0

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a192a:	2201      	movs	r2, #1
 80a192c:	4620      	mov	r0, r4
 80a192e:	210b      	movs	r1, #11
 80a1930:	f7ff fe6a 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
 80a1934:	4628      	mov	r0, r5
 80a1936:	bd38      	pop	{r3, r4, r5, pc}

080a1938 <_ZN7VL53L0X11getSpadInfoEPhPb>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X::getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80a1938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a193a:	4604      	mov	r4, r0
 80a193c:	460f      	mov	r7, r1
 80a193e:	4616      	mov	r6, r2
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80a1940:	2180      	movs	r1, #128	; 0x80
 80a1942:	2201      	movs	r2, #1
 80a1944:	f7ff fe60 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a1948:	2201      	movs	r2, #1
 80a194a:	21ff      	movs	r1, #255	; 0xff
 80a194c:	4620      	mov	r0, r4
 80a194e:	f7ff fe5b 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a1952:	2200      	movs	r2, #0
 80a1954:	4611      	mov	r1, r2
 80a1956:	4620      	mov	r0, r4
 80a1958:	f7ff fe56 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x06);
 80a195c:	2206      	movs	r2, #6
 80a195e:	21ff      	movs	r1, #255	; 0xff
 80a1960:	4620      	mov	r0, r4
 80a1962:	f7ff fe51 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg(0x83) | 0x04);
 80a1966:	2183      	movs	r1, #131	; 0x83
 80a1968:	4620      	mov	r0, r4
 80a196a:	f7ff febc 	bl	80a16e6 <_ZN7VL53L0X7readRegEh>
 80a196e:	f040 0204 	orr.w	r2, r0, #4
 80a1972:	b2d2      	uxtb	r2, r2
 80a1974:	2183      	movs	r1, #131	; 0x83
 80a1976:	4620      	mov	r0, r4
 80a1978:	f7ff fe46 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x07);
 80a197c:	2207      	movs	r2, #7
 80a197e:	21ff      	movs	r1, #255	; 0xff
 80a1980:	4620      	mov	r0, r4
 80a1982:	f7ff fe41 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x81, 0x01);
 80a1986:	2201      	movs	r2, #1
 80a1988:	2181      	movs	r1, #129	; 0x81
 80a198a:	4620      	mov	r0, r4
 80a198c:	f7ff fe3c 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a1990:	2201      	movs	r2, #1
 80a1992:	2180      	movs	r1, #128	; 0x80
 80a1994:	4620      	mov	r0, r4
 80a1996:	f7ff fe37 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x94, 0x6b);
 80a199a:	226b      	movs	r2, #107	; 0x6b
 80a199c:	2194      	movs	r1, #148	; 0x94
 80a199e:	4620      	mov	r0, r4
 80a19a0:	f7ff fe32 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, 0x00);
 80a19a4:	2200      	movs	r2, #0
 80a19a6:	2183      	movs	r1, #131	; 0x83
 80a19a8:	4620      	mov	r0, r4
 80a19aa:	f7ff fe2d 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
 80a19ae:	f001 fc97 	bl	80a32e0 <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a19b2:	60e0      	str	r0, [r4, #12]
  while (readReg(0x83) == 0x00)
 80a19b4:	2183      	movs	r1, #131	; 0x83
 80a19b6:	4620      	mov	r0, r4
 80a19b8:	f7ff fe95 	bl	80a16e6 <_ZN7VL53L0X7readRegEh>
 80a19bc:	4605      	mov	r5, r0
 80a19be:	b958      	cbnz	r0, 80a19d8 <_ZN7VL53L0X11getSpadInfoEPhPb+0xa0>
  {
    if (checkTimeoutExpired()) { return false; }
 80a19c0:	6863      	ldr	r3, [r4, #4]
 80a19c2:	2b00      	cmp	r3, #0
 80a19c4:	d0f6      	beq.n	80a19b4 <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a19c6:	f001 fc8b 	bl	80a32e0 <HAL_Timer_Get_Milli_Seconds>
 80a19ca:	68e3      	ldr	r3, [r4, #12]
 80a19cc:	1ac0      	subs	r0, r0, r3
 80a19ce:	6863      	ldr	r3, [r4, #4]
 80a19d0:	4298      	cmp	r0, r3
 80a19d2:	d9ef      	bls.n	80a19b4 <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a19d4:	4628      	mov	r0, r5

  writeReg(0xFF, 0x00);
  writeReg(0x80, 0x00);

  return true;
}
 80a19d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  startTimeout();
  while (readReg(0x83) == 0x00)
  {
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
 80a19d8:	2201      	movs	r2, #1
 80a19da:	4620      	mov	r0, r4
 80a19dc:	2183      	movs	r1, #131	; 0x83
 80a19de:	f7ff fe13 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  tmp = readReg(0x92);
 80a19e2:	2192      	movs	r1, #146	; 0x92
 80a19e4:	4620      	mov	r0, r4
 80a19e6:	f7ff fe7e 	bl	80a16e6 <_ZN7VL53L0X7readRegEh>

  *count = tmp & 0x7f;
 80a19ea:	f000 037f 	and.w	r3, r0, #127	; 0x7f
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a19ee:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
 80a19f2:	703b      	strb	r3, [r7, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;

  writeReg(0x81, 0x00);
 80a19f4:	2200      	movs	r2, #0
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a19f6:	7030      	strb	r0, [r6, #0]

  writeReg(0x81, 0x00);
 80a19f8:	2181      	movs	r1, #129	; 0x81
 80a19fa:	4620      	mov	r0, r4
 80a19fc:	f7ff fe04 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x06);
 80a1a00:	2206      	movs	r2, #6
 80a1a02:	4620      	mov	r0, r4
 80a1a04:	21ff      	movs	r1, #255	; 0xff
 80a1a06:	f7ff fdff 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg( 0x83  & ~0x04));
 80a1a0a:	2183      	movs	r1, #131	; 0x83
 80a1a0c:	4620      	mov	r0, r4
 80a1a0e:	f7ff fe6a 	bl	80a16e6 <_ZN7VL53L0X7readRegEh>
 80a1a12:	2183      	movs	r1, #131	; 0x83
 80a1a14:	4602      	mov	r2, r0
 80a1a16:	4620      	mov	r0, r4
 80a1a18:	f7ff fdf6 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a1a1c:	4620      	mov	r0, r4
 80a1a1e:	2201      	movs	r2, #1
 80a1a20:	21ff      	movs	r1, #255	; 0xff
 80a1a22:	f7ff fdf1 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a1a26:	4620      	mov	r0, r4
 80a1a28:	2201      	movs	r2, #1
 80a1a2a:	2100      	movs	r1, #0
 80a1a2c:	f7ff fdec 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1a30:	4620      	mov	r0, r4
 80a1a32:	2200      	movs	r2, #0
 80a1a34:	21ff      	movs	r1, #255	; 0xff
 80a1a36:	f7ff fde7 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a1a3a:	4620      	mov	r0, r4
 80a1a3c:	2200      	movs	r2, #0
 80a1a3e:	2180      	movs	r1, #128	; 0x80
 80a1a40:	f7ff fde2 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  return true;
 80a1a44:	2001      	movs	r0, #1
 80a1a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1a48 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>:
}

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X::getSequenceStepEnables(SequenceStepEnables * enables)
{
 80a1a48:	b510      	push	{r4, lr}
 80a1a4a:	460c      	mov	r4, r1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 80a1a4c:	2101      	movs	r1, #1
 80a1a4e:	f7ff fe4a 	bl	80a16e6 <_ZN7VL53L0X7readRegEh>

  enables->tcc          = (sequence_config >> 4) & 0x1;
 80a1a52:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80a1a56:	7023      	strb	r3, [r4, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 80a1a58:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80a1a5c:	70a3      	strb	r3, [r4, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 80a1a5e:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80a1a62:	7063      	strb	r3, [r4, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a1a64:	f3c0 1380 	ubfx	r3, r0, #6, #1
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a1a68:	f3c0 10c0 	ubfx	r0, r0, #7, #1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);

  enables->tcc          = (sequence_config >> 4) & 0x1;
  enables->dss          = (sequence_config >> 3) & 0x1;
  enables->msrc         = (sequence_config >> 2) & 0x1;
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a1a6c:	70e3      	strb	r3, [r4, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a1a6e:	7120      	strb	r0, [r4, #4]
 80a1a70:	bd10      	pop	{r4, pc}

080a1a72 <_ZN7VL53L0X13decodeTimeoutEm>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X::decodeTimeout(uint32_t reg_val)
{
 80a1a72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a1a76:	4298      	cmp	r0, r3
 80a1a78:	bf28      	it	cs
 80a1a7a:	4618      	movcs	r0, r3
  if (reg_val > 0xFFFF) reg_val = 0xFFFF;
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80a1a7c:	b2c3      	uxtb	r3, r0
 80a1a7e:	0a00      	lsrs	r0, r0, #8
 80a1a80:	fa03 f000 	lsl.w	r0, r3, r0
 80a1a84:	3001      	adds	r0, #1
}
 80a1a86:	b280      	uxth	r0, r0
 80a1a88:	4770      	bx	lr

080a1a8a <_ZN7VL53L0X13encodeTimeoutEm>:
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a1a8a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80a1a8e:	d201      	bcs.n	80a1a94 <_ZN7VL53L0X13encodeTimeoutEm+0xa>

  // format: "(LSByte * 2^MSByte) + 1"
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
 80a1a90:	b178      	cbz	r0, 80a1ab2 <_ZN7VL53L0X13encodeTimeoutEm+0x28>
 80a1a92:	e001      	b.n	80a1a98 <_ZN7VL53L0X13encodeTimeoutEm+0xe>
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a1a94:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;
 80a1a98:	3801      	subs	r0, #1
 80a1a9a:	2300      	movs	r3, #0

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a1a9c:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 80a1aa0:	b29a      	uxth	r2, r3
 80a1aa2:	f103 0301 	add.w	r3, r3, #1
 80a1aa6:	d001      	beq.n	80a1aac <_ZN7VL53L0X13encodeTimeoutEm+0x22>
    {
      ls_byte >>= 1;
 80a1aa8:	0840      	lsrs	r0, r0, #1

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a1aaa:	e7f7      	b.n	80a1a9c <_ZN7VL53L0X13encodeTimeoutEm+0x12>
    {
      ls_byte >>= 1;
      ms_byte++;
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 80a1aac:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80a1ab0:	b280      	uxth	r0, r0
  }
  else { return 0; }
}
 80a1ab2:	4770      	bx	lr

080a1ab4 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1ab4:	4b08      	ldr	r3, [pc, #32]	; (80a1ad8 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh+0x24>)

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a1ab6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1aba:	4359      	muls	r1, r3
}

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80a1abc:	b510      	push	{r4, lr}
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1abe:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a1ac2:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 80a1ac6:	fbb1 f3f2 	udiv	r3, r1, r2
 80a1aca:	fbb1 f1f4 	udiv	r1, r1, r4
 80a1ace:	fb00 1003 	mla	r0, r0, r3, r1
}
 80a1ad2:	fbb0 f0f2 	udiv	r0, r0, r2
 80a1ad6:	bd10      	pop	{r4, pc}
 80a1ad8:	003a2f00 	.word	0x003a2f00

080a1adc <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a1adc:	b570      	push	{r4, r5, r6, lr}
 80a1ade:	460e      	mov	r6, r1
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a1ae0:	2100      	movs	r1, #0
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a1ae2:	4614      	mov	r4, r2
 80a1ae4:	4605      	mov	r5, r0
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a1ae6:	f7ff feb7 	bl	80a1858 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a1aea:	2146      	movs	r1, #70	; 0x46
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a1aec:	8020      	strh	r0, [r4, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a1aee:	4628      	mov	r0, r5
 80a1af0:	f7ff fdf9 	bl	80a16e6 <_ZN7VL53L0X7readRegEh>
 80a1af4:	3001      	adds	r0, #1
 80a1af6:	b280      	uxth	r0, r0
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a1af8:	7821      	ldrb	r1, [r4, #0]
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a1afa:	80a0      	strh	r0, [r4, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a1afc:	f7ff ffda 	bl	80a1ab4 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a1b00:	2151      	movs	r1, #81	; 0x51
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a1b02:	60e0      	str	r0, [r4, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a1b04:	4628      	mov	r0, r5
 80a1b06:	f7ff fe0e 	bl	80a1726 <_ZN7VL53L0X12readReg16BitEh>
 80a1b0a:	f7ff ffb2 	bl	80a1a72 <_ZN7VL53L0X13decodeTimeoutEm>
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a1b0e:	7821      	ldrb	r1, [r4, #0]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a1b10:	80e0      	strh	r0, [r4, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a1b12:	f7ff ffcf 	bl	80a1ab4 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a1b16:	2170      	movs	r1, #112	; 0x70

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a1b18:	6120      	str	r0, [r4, #16]
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a1b1a:	4628      	mov	r0, r5
 80a1b1c:	f7ff fde3 	bl	80a16e6 <_ZN7VL53L0X7readRegEh>
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 80a1b20:	3001      	adds	r0, #1
 80a1b22:	0040      	lsls	r0, r0, #1
 80a1b24:	b2c0      	uxtb	r0, r0
 80a1b26:	8060      	strh	r0, [r4, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a1b28:	2171      	movs	r1, #113	; 0x71
 80a1b2a:	4628      	mov	r0, r5
 80a1b2c:	f7ff fdfb 	bl	80a1726 <_ZN7VL53L0X12readReg16BitEh>
 80a1b30:	f7ff ff9f 	bl	80a1a72 <_ZN7VL53L0X13decodeTimeoutEm>
 80a1b34:	8120      	strh	r0, [r4, #8]

  if (enables->pre_range)
 80a1b36:	78f3      	ldrb	r3, [r6, #3]
 80a1b38:	b113      	cbz	r3, 80a1b40 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE+0x64>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 80a1b3a:	88e3      	ldrh	r3, [r4, #6]
 80a1b3c:	1ac0      	subs	r0, r0, r3
 80a1b3e:	8120      	strh	r0, [r4, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 80a1b40:	78a1      	ldrb	r1, [r4, #2]
 80a1b42:	8920      	ldrh	r0, [r4, #8]
 80a1b44:	f7ff ffb6 	bl	80a1ab4 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->final_range_vcsel_period_pclks);
 80a1b48:	6160      	str	r0, [r4, #20]
 80a1b4a:	bd70      	pop	{r4, r5, r6, pc}

080a1b4c <_ZN7VL53L0X26getMeasurementTimingBudgetEv>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t VL53L0X::getMeasurementTimingBudget(void)
{
 80a1b4c:	b510      	push	{r4, lr}
 80a1b4e:	4604      	mov	r4, r0
 80a1b50:	b088      	sub	sp, #32
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a1b52:	4669      	mov	r1, sp
 80a1b54:	f7ff ff78 	bl	80a1a48 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a1b58:	aa02      	add	r2, sp, #8
 80a1b5a:	4669      	mov	r1, sp
 80a1b5c:	4620      	mov	r0, r4
 80a1b5e:	f7ff ffbd 	bl	80a1adc <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a1b62:	f89d 3000 	ldrb.w	r3, [sp]
 80a1b66:	b11b      	cbz	r3, 80a1b70 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x24>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a1b68:	9805      	ldr	r0, [sp, #20]
 80a1b6a:	f600 5084 	addw	r0, r0, #3460	; 0xd84
 80a1b6e:	e001      	b.n	80a1b74 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x28>
  uint16_t const DssOverhead        = 690;
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80a1b70:	f640 3036 	movw	r0, #2870	; 0xb36
  if (enables.tcc)
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a1b74:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a1b78:	b12b      	cbz	r3, 80a1b86 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x3a>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a1b7a:	9b05      	ldr	r3, [sp, #20]
 80a1b7c:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a1b80:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a1b84:	e006      	b.n	80a1b94 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  }
  else if (enables.msrc)
 80a1b86:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a1b8a:	b11b      	cbz	r3, 80a1b94 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a1b8c:	9b05      	ldr	r3, [sp, #20]
 80a1b8e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a1b92:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a1b94:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80a1b98:	b11b      	cbz	r3, 80a1ba2 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x56>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a1b9a:	9b06      	ldr	r3, [sp, #24]
 80a1b9c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a1ba0:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a1ba2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a1ba6:	b11b      	cbz	r3, 80a1bb0 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x64>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80a1ba8:	9b07      	ldr	r3, [sp, #28]
 80a1baa:	f203 2326 	addw	r3, r3, #550	; 0x226
 80a1bae:	4418      	add	r0, r3
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 80a1bb0:	6160      	str	r0, [r4, #20]
  return budget_us;
}
 80a1bb2:	b008      	add	sp, #32
 80a1bb4:	bd10      	pop	{r4, pc}
	...

080a1bb8 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1bb8:	4b08      	ldr	r3, [pc, #32]	; (80a1bdc <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh+0x24>)

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a1bba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1bbe:	4359      	muls	r1, r3

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a1bc0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a1bc4:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a1bc8:	fbb1 f3f3 	udiv	r3, r1, r3
 80a1bcc:	fbb1 f1f2 	udiv	r1, r1, r2
 80a1bd0:	fb02 3000 	mla	r0, r2, r0, r3
}
 80a1bd4:	fbb0 f0f1 	udiv	r0, r0, r1
 80a1bd8:	4770      	bx	lr
 80a1bda:	bf00      	nop
 80a1bdc:	003a2f00 	.word	0x003a2f00

080a1be0 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>:
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a1be0:	f644 631f 	movw	r3, #19999	; 0x4e1f
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a1be4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a1be6:	4299      	cmp	r1, r3
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a1be8:	b089      	sub	sp, #36	; 0x24
 80a1bea:	4606      	mov	r6, r0
 80a1bec:	460d      	mov	r5, r1
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a1bee:	d942      	bls.n	80a1c76 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>

  uint32_t used_budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a1bf0:	4669      	mov	r1, sp
 80a1bf2:	f7ff ff29 	bl	80a1a48 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a1bf6:	aa02      	add	r2, sp, #8
 80a1bf8:	4669      	mov	r1, sp
 80a1bfa:	4630      	mov	r0, r6
 80a1bfc:	f7ff ff6e 	bl	80a1adc <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a1c00:	f89d 3000 	ldrb.w	r3, [sp]
 80a1c04:	b11b      	cbz	r3, 80a1c0e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x2e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a1c06:	9805      	ldr	r0, [sp, #20]
 80a1c08:	f600 3036 	addw	r0, r0, #2870	; 0xb36
 80a1c0c:	e001      	b.n	80a1c12 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x32>

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80a1c0e:	f640 00e8 	movw	r0, #2280	; 0x8e8
  if (enables.tcc)
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a1c12:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a1c16:	b12b      	cbz	r3, 80a1c24 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x44>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a1c18:	9b05      	ldr	r3, [sp, #20]
 80a1c1a:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a1c1e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a1c22:	e006      	b.n	80a1c32 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  }
  else if (enables.msrc)
 80a1c24:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a1c28:	b11b      	cbz	r3, 80a1c32 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a1c2a:	9b05      	ldr	r3, [sp, #20]
 80a1c2c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a1c30:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a1c32:	f89d 7003 	ldrb.w	r7, [sp, #3]
 80a1c36:	b11f      	cbz	r7, 80a1c40 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x60>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a1c38:	9b06      	ldr	r3, [sp, #24]
 80a1c3a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a1c3e:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a1c40:	f89d 4004 	ldrb.w	r4, [sp, #4]
 80a1c44:	b1ac      	cbz	r4, 80a1c72 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x92>
  {
    used_budget_us += FinalRangeOverhead;
 80a1c46:	f200 2026 	addw	r0, r0, #550	; 0x226
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80a1c4a:	4285      	cmp	r5, r0
 80a1c4c:	d313      	bcc.n	80a1c76 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint32_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80a1c4e:	f89d 100a 	ldrb.w	r1, [sp, #10]
 80a1c52:	1a28      	subs	r0, r5, r0
 80a1c54:	f7ff ffb0 	bl	80a1bb8 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>

    if (enables.pre_range)
 80a1c58:	b117      	cbz	r7, 80a1c60 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x80>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80a1c5a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80a1c5e:	4418      	add	r0, r3
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80a1c60:	f7ff ff13 	bl	80a1a8a <_ZN7VL53L0X13encodeTimeoutEm>
      encodeTimeout(final_range_timeout_mclks));
 80a1c64:	2171      	movs	r1, #113	; 0x71
 80a1c66:	4602      	mov	r2, r0
 80a1c68:	4630      	mov	r0, r6
 80a1c6a:	f7ff fcf2 	bl	80a1652 <_ZN7VL53L0X13writeReg16BitEht>

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 80a1c6e:	6175      	str	r5, [r6, #20]
 80a1c70:	e002      	b.n	80a1c78 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  }
  return true;
 80a1c72:	2401      	movs	r4, #1
 80a1c74:	e000      	b.n	80a1c78 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a1c76:	2400      	movs	r4, #0
    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
  }
  return true;
}
 80a1c78:	4620      	mov	r0, r4
 80a1c7a:	b009      	add	sp, #36	; 0x24
 80a1c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1c7e <_ZN7VL53L0X27performSingleRefCalibrationEh>:
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a1c7e:	b538      	push	{r3, r4, r5, lr}
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a1c80:	f041 0201 	orr.w	r2, r1, #1
 80a1c84:	2100      	movs	r1, #0
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a1c86:	4604      	mov	r4, r0
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a1c88:	f7ff fcbe 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
 80a1c8c:	f001 fb28 	bl	80a32e0 <HAL_Timer_Get_Milli_Seconds>

  startTimeout();
 80a1c90:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a1c92:	2113      	movs	r1, #19
 80a1c94:	4620      	mov	r0, r4
 80a1c96:	f7ff fd26 	bl	80a16e6 <_ZN7VL53L0X7readRegEh>
 80a1c9a:	f010 0507 	ands.w	r5, r0, #7
 80a1c9e:	d10b      	bne.n	80a1cb8 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x3a>
  {
    if (checkTimeoutExpired()) { return false; }
 80a1ca0:	6863      	ldr	r3, [r4, #4]
 80a1ca2:	2b00      	cmp	r3, #0
 80a1ca4:	d0f5      	beq.n	80a1c92 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a1ca6:	f001 fb1b 	bl	80a32e0 <HAL_Timer_Get_Milli_Seconds>
 80a1caa:	68e3      	ldr	r3, [r4, #12]
 80a1cac:	1ac0      	subs	r0, r0, r3
 80a1cae:	6863      	ldr	r3, [r4, #4]
 80a1cb0:	4298      	cmp	r0, r3
 80a1cb2:	d9ee      	bls.n	80a1c92 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a1cb4:	4628      	mov	r0, r5
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  writeReg(SYSRANGE_START, 0x00);

  return true;
}
 80a1cb6:	bd38      	pop	{r3, r4, r5, pc}
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
  {
    if (checkTimeoutExpired()) { return false; }
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a1cb8:	4620      	mov	r0, r4
 80a1cba:	2201      	movs	r2, #1
 80a1cbc:	210b      	movs	r1, #11
 80a1cbe:	f7ff fca3 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  writeReg(SYSRANGE_START, 0x00);
 80a1cc2:	2200      	movs	r2, #0
 80a1cc4:	4620      	mov	r0, r4
 80a1cc6:	4611      	mov	r1, r2
 80a1cc8:	f7ff fc9e 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
 80a1ccc:	2001      	movs	r0, #1
 80a1cce:	bd38      	pop	{r3, r4, r5, pc}

080a1cd0 <_ZN7VL53L0X4initEb>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool VL53L0X::init(bool io_2v8)
{
 80a1cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1cd2:	4604      	mov	r4, r0
 80a1cd4:	b085      	sub	sp, #20
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 80a1cd6:	b149      	cbz	r1, 80a1cec <_ZN7VL53L0X4initEb+0x1c>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 80a1cd8:	2189      	movs	r1, #137	; 0x89
 80a1cda:	f7ff fd04 	bl	80a16e6 <_ZN7VL53L0X7readRegEh>
 80a1cde:	f040 0201 	orr.w	r2, r0, #1
 80a1ce2:	b2d2      	uxtb	r2, r2
 80a1ce4:	2189      	movs	r1, #137	; 0x89
 80a1ce6:	4620      	mov	r0, r4
 80a1ce8:	f7ff fc8e 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 80a1cec:	2200      	movs	r2, #0
 80a1cee:	2188      	movs	r1, #136	; 0x88
 80a1cf0:	4620      	mov	r0, r4
 80a1cf2:	f7ff fc89 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a1cf6:	2201      	movs	r2, #1
 80a1cf8:	2180      	movs	r1, #128	; 0x80
 80a1cfa:	4620      	mov	r0, r4
 80a1cfc:	f7ff fc84 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a1d00:	2201      	movs	r2, #1
 80a1d02:	21ff      	movs	r1, #255	; 0xff
 80a1d04:	4620      	mov	r0, r4
 80a1d06:	f7ff fc7f 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a1d0a:	2200      	movs	r2, #0
 80a1d0c:	4611      	mov	r1, r2
 80a1d0e:	4620      	mov	r0, r4
 80a1d10:	f7ff fc7a 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  stop_variable = readReg(0x91);
 80a1d14:	2191      	movs	r1, #145	; 0x91
 80a1d16:	4620      	mov	r0, r4
 80a1d18:	f7ff fce5 	bl	80a16e6 <_ZN7VL53L0X7readRegEh>
  writeReg(0x00, 0x01);
 80a1d1c:	2201      	movs	r2, #1
  writeReg(0x88, 0x00);

  writeReg(0x80, 0x01);
  writeReg(0xFF, 0x01);
  writeReg(0x00, 0x00);
  stop_variable = readReg(0x91);
 80a1d1e:	7420      	strb	r0, [r4, #16]
  writeReg(0x00, 0x01);
 80a1d20:	2100      	movs	r1, #0
 80a1d22:	4620      	mov	r0, r4
 80a1d24:	f7ff fc70 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1d28:	2200      	movs	r2, #0
 80a1d2a:	21ff      	movs	r1, #255	; 0xff
 80a1d2c:	4620      	mov	r0, r4
 80a1d2e:	f7ff fc6b 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a1d32:	2200      	movs	r2, #0
 80a1d34:	2180      	movs	r1, #128	; 0x80
 80a1d36:	4620      	mov	r0, r4
 80a1d38:	f7ff fc66 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80a1d3c:	2160      	movs	r1, #96	; 0x60
 80a1d3e:	4620      	mov	r0, r4
 80a1d40:	f7ff fcd1 	bl	80a16e6 <_ZN7VL53L0X7readRegEh>
 80a1d44:	f040 0212 	orr.w	r2, r0, #18
 80a1d48:	b2d2      	uxtb	r2, r2
 80a1d4a:	2160      	movs	r1, #96	; 0x60
 80a1d4c:	4620      	mov	r0, r4
 80a1d4e:	f7ff fc5b 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80a1d52:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a1d56:	4620      	mov	r0, r4
 80a1d58:	f7ff fd56 	bl	80a1808 <_ZN7VL53L0X18setSignalRateLimitEf>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80a1d5c:	22ff      	movs	r2, #255	; 0xff
 80a1d5e:	2101      	movs	r1, #1
 80a1d60:	4620      	mov	r0, r4
 80a1d62:	f7ff fc51 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80a1d66:	f10d 0207 	add.w	r2, sp, #7
 80a1d6a:	f10d 0106 	add.w	r1, sp, #6
 80a1d6e:	4620      	mov	r0, r4
 80a1d70:	f7ff fde2 	bl	80a1938 <_ZN7VL53L0X11getSpadInfoEPhPb>
 80a1d74:	b908      	cbnz	r0, 80a1d7a <_ZN7VL53L0X4initEb+0xaa>
 80a1d76:	2500      	movs	r5, #0
 80a1d78:	e21d      	b.n	80a21b6 <_ZN7VL53L0X4initEb+0x4e6>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a1d7a:	2306      	movs	r3, #6
 80a1d7c:	aa02      	add	r2, sp, #8
 80a1d7e:	21b0      	movs	r1, #176	; 0xb0
 80a1d80:	4620      	mov	r0, r4
 80a1d82:	f7ff fd19 	bl	80a17b8 <_ZN7VL53L0X9readMultiEhPhh>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 80a1d86:	2201      	movs	r2, #1
 80a1d88:	21ff      	movs	r1, #255	; 0xff
 80a1d8a:	4620      	mov	r0, r4
 80a1d8c:	f7ff fc3c 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80a1d90:	2200      	movs	r2, #0
 80a1d92:	214f      	movs	r1, #79	; 0x4f
 80a1d94:	4620      	mov	r0, r4
 80a1d96:	f7ff fc37 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80a1d9a:	222c      	movs	r2, #44	; 0x2c
 80a1d9c:	214e      	movs	r1, #78	; 0x4e
 80a1d9e:	4620      	mov	r0, r4
 80a1da0:	f7ff fc32 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1da4:	2200      	movs	r2, #0
 80a1da6:	21ff      	movs	r1, #255	; 0xff
 80a1da8:	4620      	mov	r0, r4
 80a1daa:	f7ff fc2d 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1dae:	2500      	movs	r5, #0

  writeReg(0xFF, 0x01);
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80a1db0:	4620      	mov	r0, r4
 80a1db2:	21b6      	movs	r1, #182	; 0xb6
 80a1db4:	22b4      	movs	r2, #180	; 0xb4
 80a1db6:	f7ff fc27 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;
 80a1dba:	4629      	mov	r1, r5
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a1dbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1dc0:	f89d 6006 	ldrb.w	r6, [sp, #6]
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a1dc4:	2b00      	cmp	r3, #0
 80a1dc6:	bf14      	ite	ne
 80a1dc8:	200c      	movne	r0, #12
 80a1dca:	2000      	moveq	r0, #0
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1dcc:	2701      	movs	r7, #1
 80a1dce:	b2eb      	uxtb	r3, r5
 80a1dd0:	08da      	lsrs	r2, r3, #3
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1dd2:	4298      	cmp	r0, r3
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1dd4:	f10d 0e10 	add.w	lr, sp, #16
 80a1dd8:	f003 0307 	and.w	r3, r3, #7
 80a1ddc:	4472      	add	r2, lr
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a1dde:	d801      	bhi.n	80a1de4 <_ZN7VL53L0X4initEb+0x114>
 80a1de0:	428e      	cmp	r6, r1
 80a1de2:	d108      	bne.n	80a1df6 <_ZN7VL53L0X4initEb+0x126>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1de4:	f812 ec08 	ldrb.w	lr, [r2, #-8]
 80a1de8:	fa07 f303 	lsl.w	r3, r7, r3
 80a1dec:	ea2e 0303 	bic.w	r3, lr, r3
 80a1df0:	f802 3c08 	strb.w	r3, [r2, #-8]
 80a1df4:	e007      	b.n	80a1e06 <_ZN7VL53L0X4initEb+0x136>
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 80a1df6:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80a1dfa:	fa42 f303 	asr.w	r3, r2, r3
 80a1dfe:	07db      	lsls	r3, r3, #31
    {
      spads_enabled++;
 80a1e00:	bf44      	itt	mi
 80a1e02:	3101      	addmi	r1, #1
 80a1e04:	b2c9      	uxtbmi	r1, r1
 80a1e06:	3501      	adds	r5, #1
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
 80a1e08:	2d30      	cmp	r5, #48	; 0x30
 80a1e0a:	d1e0      	bne.n	80a1dce <_ZN7VL53L0X4initEb+0xfe>
    {
      spads_enabled++;
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a1e0c:	2306      	movs	r3, #6
 80a1e0e:	aa02      	add	r2, sp, #8
 80a1e10:	21b0      	movs	r1, #176	; 0xb0
 80a1e12:	4620      	mov	r0, r4
 80a1e14:	f7ff fcaf 	bl	80a1776 <_ZN7VL53L0X10writeMultiEhPKhh>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 80a1e18:	2201      	movs	r2, #1
 80a1e1a:	21ff      	movs	r1, #255	; 0xff
 80a1e1c:	4620      	mov	r0, r4
 80a1e1e:	f7ff fbf3 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a1e22:	2200      	movs	r2, #0
 80a1e24:	4611      	mov	r1, r2
 80a1e26:	4620      	mov	r0, r4
 80a1e28:	f7ff fbee 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1e2c:	2200      	movs	r2, #0
 80a1e2e:	21ff      	movs	r1, #255	; 0xff
 80a1e30:	4620      	mov	r0, r4
 80a1e32:	f7ff fbe9 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x09, 0x00);
 80a1e36:	2200      	movs	r2, #0
 80a1e38:	2109      	movs	r1, #9
 80a1e3a:	4620      	mov	r0, r4
 80a1e3c:	f7ff fbe4 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x10, 0x00);
 80a1e40:	2200      	movs	r2, #0
 80a1e42:	2110      	movs	r1, #16
 80a1e44:	4620      	mov	r0, r4
 80a1e46:	f7ff fbdf 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x11, 0x00);
 80a1e4a:	2200      	movs	r2, #0
 80a1e4c:	2111      	movs	r1, #17
 80a1e4e:	4620      	mov	r0, r4
 80a1e50:	f7ff fbda 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x24, 0x01);
 80a1e54:	2201      	movs	r2, #1
 80a1e56:	2124      	movs	r1, #36	; 0x24
 80a1e58:	4620      	mov	r0, r4
 80a1e5a:	f7ff fbd5 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x25, 0xFF);
 80a1e5e:	22ff      	movs	r2, #255	; 0xff
 80a1e60:	2125      	movs	r1, #37	; 0x25
 80a1e62:	4620      	mov	r0, r4
 80a1e64:	f7ff fbd0 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x75, 0x00);
 80a1e68:	2200      	movs	r2, #0
 80a1e6a:	2175      	movs	r1, #117	; 0x75
 80a1e6c:	4620      	mov	r0, r4
 80a1e6e:	f7ff fbcb 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1e72:	2201      	movs	r2, #1
 80a1e74:	21ff      	movs	r1, #255	; 0xff
 80a1e76:	4620      	mov	r0, r4
 80a1e78:	f7ff fbc6 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4E, 0x2C);
 80a1e7c:	222c      	movs	r2, #44	; 0x2c
 80a1e7e:	214e      	movs	r1, #78	; 0x4e
 80a1e80:	4620      	mov	r0, r4
 80a1e82:	f7ff fbc1 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x00);
 80a1e86:	2200      	movs	r2, #0
 80a1e88:	2148      	movs	r1, #72	; 0x48
 80a1e8a:	4620      	mov	r0, r4
 80a1e8c:	f7ff fbbc 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x20);
 80a1e90:	2220      	movs	r2, #32
 80a1e92:	4629      	mov	r1, r5
 80a1e94:	4620      	mov	r0, r4
 80a1e96:	f7ff fbb7 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1e9a:	2200      	movs	r2, #0
 80a1e9c:	21ff      	movs	r1, #255	; 0xff
 80a1e9e:	4620      	mov	r0, r4
 80a1ea0:	f7ff fbb2 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x09);
 80a1ea4:	2209      	movs	r2, #9
 80a1ea6:	4629      	mov	r1, r5
 80a1ea8:	4620      	mov	r0, r4
 80a1eaa:	f7ff fbad 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x54, 0x00);
 80a1eae:	2200      	movs	r2, #0
 80a1eb0:	2154      	movs	r1, #84	; 0x54
 80a1eb2:	4620      	mov	r0, r4
 80a1eb4:	f7ff fba8 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a1eb8:	2204      	movs	r2, #4
 80a1eba:	2131      	movs	r1, #49	; 0x31
 80a1ebc:	4620      	mov	r0, r4
 80a1ebe:	f7ff fba3 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x32, 0x03);
 80a1ec2:	2203      	movs	r2, #3
 80a1ec4:	2132      	movs	r1, #50	; 0x32
 80a1ec6:	4620      	mov	r0, r4
 80a1ec8:	f7ff fb9e 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x83);
 80a1ecc:	2283      	movs	r2, #131	; 0x83
 80a1ece:	2140      	movs	r1, #64	; 0x40
 80a1ed0:	4620      	mov	r0, r4
 80a1ed2:	f7ff fb99 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x25);
 80a1ed6:	2225      	movs	r2, #37	; 0x25
 80a1ed8:	2146      	movs	r1, #70	; 0x46
 80a1eda:	4620      	mov	r0, r4
 80a1edc:	f7ff fb94 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x60, 0x00);
 80a1ee0:	2200      	movs	r2, #0
 80a1ee2:	2160      	movs	r1, #96	; 0x60
 80a1ee4:	4620      	mov	r0, r4
 80a1ee6:	f7ff fb8f 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x27, 0x00);
 80a1eea:	2200      	movs	r2, #0
 80a1eec:	2127      	movs	r1, #39	; 0x27
 80a1eee:	4620      	mov	r0, r4
 80a1ef0:	f7ff fb8a 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x50, 0x06);
 80a1ef4:	2206      	movs	r2, #6
 80a1ef6:	2150      	movs	r1, #80	; 0x50
 80a1ef8:	4620      	mov	r0, r4
 80a1efa:	f7ff fb85 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x51, 0x00);
 80a1efe:	2200      	movs	r2, #0
 80a1f00:	2151      	movs	r1, #81	; 0x51
 80a1f02:	4620      	mov	r0, r4
 80a1f04:	f7ff fb80 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x52, 0x96);
 80a1f08:	2296      	movs	r2, #150	; 0x96
 80a1f0a:	2152      	movs	r1, #82	; 0x52
 80a1f0c:	4620      	mov	r0, r4
 80a1f0e:	f7ff fb7b 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x56, 0x08);
 80a1f12:	2208      	movs	r2, #8
 80a1f14:	2156      	movs	r1, #86	; 0x56
 80a1f16:	4620      	mov	r0, r4
 80a1f18:	f7ff fb76 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x57, 0x30);
 80a1f1c:	462a      	mov	r2, r5
 80a1f1e:	2157      	movs	r1, #87	; 0x57
 80a1f20:	4620      	mov	r0, r4
 80a1f22:	f7ff fb71 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x61, 0x00);
 80a1f26:	2200      	movs	r2, #0
 80a1f28:	2161      	movs	r1, #97	; 0x61
 80a1f2a:	4620      	mov	r0, r4
 80a1f2c:	f7ff fb6c 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x62, 0x00);
 80a1f30:	2200      	movs	r2, #0
 80a1f32:	2162      	movs	r1, #98	; 0x62
 80a1f34:	4620      	mov	r0, r4
 80a1f36:	f7ff fb67 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x64, 0x00);
 80a1f3a:	2200      	movs	r2, #0
 80a1f3c:	2164      	movs	r1, #100	; 0x64
 80a1f3e:	4620      	mov	r0, r4
 80a1f40:	f7ff fb62 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x65, 0x00);
 80a1f44:	2200      	movs	r2, #0
 80a1f46:	2165      	movs	r1, #101	; 0x65
 80a1f48:	4620      	mov	r0, r4
 80a1f4a:	f7ff fb5d 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x66, 0xA0);
 80a1f4e:	22a0      	movs	r2, #160	; 0xa0
 80a1f50:	2166      	movs	r1, #102	; 0x66
 80a1f52:	4620      	mov	r0, r4
 80a1f54:	f7ff fb58 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1f58:	2201      	movs	r2, #1
 80a1f5a:	21ff      	movs	r1, #255	; 0xff
 80a1f5c:	4620      	mov	r0, r4
 80a1f5e:	f7ff fb53 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x22, 0x32);
 80a1f62:	2232      	movs	r2, #50	; 0x32
 80a1f64:	2122      	movs	r1, #34	; 0x22
 80a1f66:	4620      	mov	r0, r4
 80a1f68:	f7ff fb4e 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x14);
 80a1f6c:	2214      	movs	r2, #20
 80a1f6e:	2147      	movs	r1, #71	; 0x47
 80a1f70:	4620      	mov	r0, r4
 80a1f72:	f7ff fb49 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x49, 0xFF);
 80a1f76:	22ff      	movs	r2, #255	; 0xff
 80a1f78:	2149      	movs	r1, #73	; 0x49
 80a1f7a:	4620      	mov	r0, r4
 80a1f7c:	f7ff fb44 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4A, 0x00);
 80a1f80:	2200      	movs	r2, #0
 80a1f82:	214a      	movs	r1, #74	; 0x4a
 80a1f84:	4620      	mov	r0, r4
 80a1f86:	f7ff fb3f 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1f8a:	2200      	movs	r2, #0
 80a1f8c:	21ff      	movs	r1, #255	; 0xff
 80a1f8e:	4620      	mov	r0, r4
 80a1f90:	f7ff fb3a 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7A, 0x0A);
 80a1f94:	220a      	movs	r2, #10
 80a1f96:	217a      	movs	r1, #122	; 0x7a
 80a1f98:	4620      	mov	r0, r4
 80a1f9a:	f7ff fb35 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7B, 0x00);
 80a1f9e:	2200      	movs	r2, #0
 80a1fa0:	217b      	movs	r1, #123	; 0x7b
 80a1fa2:	4620      	mov	r0, r4
 80a1fa4:	f7ff fb30 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x78, 0x21);
 80a1fa8:	2221      	movs	r2, #33	; 0x21
 80a1faa:	2178      	movs	r1, #120	; 0x78
 80a1fac:	4620      	mov	r0, r4
 80a1fae:	f7ff fb2b 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1fb2:	2201      	movs	r2, #1
 80a1fb4:	21ff      	movs	r1, #255	; 0xff
 80a1fb6:	4620      	mov	r0, r4
 80a1fb8:	f7ff fb26 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x23, 0x34);
 80a1fbc:	2234      	movs	r2, #52	; 0x34
 80a1fbe:	2123      	movs	r1, #35	; 0x23
 80a1fc0:	4620      	mov	r0, r4
 80a1fc2:	f7ff fb21 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x42, 0x00);
 80a1fc6:	2200      	movs	r2, #0
 80a1fc8:	2142      	movs	r1, #66	; 0x42
 80a1fca:	4620      	mov	r0, r4
 80a1fcc:	f7ff fb1c 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0xFF);
 80a1fd0:	22ff      	movs	r2, #255	; 0xff
 80a1fd2:	2144      	movs	r1, #68	; 0x44
 80a1fd4:	4620      	mov	r0, r4
 80a1fd6:	f7ff fb17 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x26);
 80a1fda:	2226      	movs	r2, #38	; 0x26
 80a1fdc:	2145      	movs	r1, #69	; 0x45
 80a1fde:	4620      	mov	r0, r4
 80a1fe0:	f7ff fb12 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x05);
 80a1fe4:	2205      	movs	r2, #5
 80a1fe6:	2146      	movs	r1, #70	; 0x46
 80a1fe8:	4620      	mov	r0, r4
 80a1fea:	f7ff fb0d 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x40);
 80a1fee:	2240      	movs	r2, #64	; 0x40
 80a1ff0:	4611      	mov	r1, r2
 80a1ff2:	4620      	mov	r0, r4
 80a1ff4:	f7ff fb08 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0E, 0x06);
 80a1ff8:	2206      	movs	r2, #6
 80a1ffa:	210e      	movs	r1, #14
 80a1ffc:	4620      	mov	r0, r4
 80a1ffe:	f7ff fb03 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x20, 0x1A);
 80a2002:	221a      	movs	r2, #26
 80a2004:	2120      	movs	r1, #32
 80a2006:	4620      	mov	r0, r4
 80a2008:	f7ff fafe 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x43, 0x40);
 80a200c:	2240      	movs	r2, #64	; 0x40
 80a200e:	2143      	movs	r1, #67	; 0x43
 80a2010:	4620      	mov	r0, r4
 80a2012:	f7ff faf9 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a2016:	2200      	movs	r2, #0
 80a2018:	21ff      	movs	r1, #255	; 0xff
 80a201a:	4620      	mov	r0, r4
 80a201c:	f7ff faf4 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x34, 0x03);
 80a2020:	2203      	movs	r2, #3
 80a2022:	2134      	movs	r1, #52	; 0x34
 80a2024:	4620      	mov	r0, r4
 80a2026:	f7ff faef 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x35, 0x44);
 80a202a:	2244      	movs	r2, #68	; 0x44
 80a202c:	2135      	movs	r1, #53	; 0x35
 80a202e:	4620      	mov	r0, r4
 80a2030:	f7ff faea 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a2034:	2201      	movs	r2, #1
 80a2036:	21ff      	movs	r1, #255	; 0xff
 80a2038:	4620      	mov	r0, r4
 80a203a:	f7ff fae5 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a203e:	2204      	movs	r2, #4
 80a2040:	2131      	movs	r1, #49	; 0x31
 80a2042:	4620      	mov	r0, r4
 80a2044:	f7ff fae0 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4B, 0x09);
 80a2048:	2209      	movs	r2, #9
 80a204a:	214b      	movs	r1, #75	; 0x4b
 80a204c:	4620      	mov	r0, r4
 80a204e:	f7ff fadb 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4C, 0x05);
 80a2052:	2205      	movs	r2, #5
 80a2054:	214c      	movs	r1, #76	; 0x4c
 80a2056:	4620      	mov	r0, r4
 80a2058:	f7ff fad6 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4D, 0x04);
 80a205c:	2204      	movs	r2, #4
 80a205e:	214d      	movs	r1, #77	; 0x4d
 80a2060:	4620      	mov	r0, r4
 80a2062:	f7ff fad1 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a2066:	2200      	movs	r2, #0
 80a2068:	21ff      	movs	r1, #255	; 0xff
 80a206a:	4620      	mov	r0, r4
 80a206c:	f7ff facc 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0x00);
 80a2070:	2200      	movs	r2, #0
 80a2072:	2144      	movs	r1, #68	; 0x44
 80a2074:	4620      	mov	r0, r4
 80a2076:	f7ff fac7 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x20);
 80a207a:	2220      	movs	r2, #32
 80a207c:	2145      	movs	r1, #69	; 0x45
 80a207e:	4620      	mov	r0, r4
 80a2080:	f7ff fac2 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x08);
 80a2084:	2208      	movs	r2, #8
 80a2086:	2147      	movs	r1, #71	; 0x47
 80a2088:	4620      	mov	r0, r4
 80a208a:	f7ff fabd 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x28);
 80a208e:	2228      	movs	r2, #40	; 0x28
 80a2090:	2148      	movs	r1, #72	; 0x48
 80a2092:	4620      	mov	r0, r4
 80a2094:	f7ff fab8 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x67, 0x00);
 80a2098:	2200      	movs	r2, #0
 80a209a:	2167      	movs	r1, #103	; 0x67
 80a209c:	4620      	mov	r0, r4
 80a209e:	f7ff fab3 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x70, 0x04);
 80a20a2:	2204      	movs	r2, #4
 80a20a4:	2170      	movs	r1, #112	; 0x70
 80a20a6:	4620      	mov	r0, r4
 80a20a8:	f7ff faae 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x71, 0x01);
 80a20ac:	2201      	movs	r2, #1
 80a20ae:	2171      	movs	r1, #113	; 0x71
 80a20b0:	4620      	mov	r0, r4
 80a20b2:	f7ff faa9 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x72, 0xFE);
 80a20b6:	22fe      	movs	r2, #254	; 0xfe
 80a20b8:	2172      	movs	r1, #114	; 0x72
 80a20ba:	4620      	mov	r0, r4
 80a20bc:	f7ff faa4 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x76, 0x00);
 80a20c0:	2200      	movs	r2, #0
 80a20c2:	2176      	movs	r1, #118	; 0x76
 80a20c4:	4620      	mov	r0, r4
 80a20c6:	f7ff fa9f 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x77, 0x00);
 80a20ca:	2200      	movs	r2, #0
 80a20cc:	2177      	movs	r1, #119	; 0x77
 80a20ce:	4620      	mov	r0, r4
 80a20d0:	f7ff fa9a 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a20d4:	2201      	movs	r2, #1
 80a20d6:	21ff      	movs	r1, #255	; 0xff
 80a20d8:	4620      	mov	r0, r4
 80a20da:	f7ff fa95 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0D, 0x01);
 80a20de:	2201      	movs	r2, #1
 80a20e0:	210d      	movs	r1, #13
 80a20e2:	4620      	mov	r0, r4
 80a20e4:	f7ff fa90 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a20e8:	2200      	movs	r2, #0
 80a20ea:	21ff      	movs	r1, #255	; 0xff
 80a20ec:	4620      	mov	r0, r4
 80a20ee:	f7ff fa8b 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x01);
 80a20f2:	2201      	movs	r2, #1
 80a20f4:	2180      	movs	r1, #128	; 0x80
 80a20f6:	4620      	mov	r0, r4
 80a20f8:	f7ff fa86 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x01, 0xF8);
 80a20fc:	22f8      	movs	r2, #248	; 0xf8
 80a20fe:	2101      	movs	r1, #1
 80a2100:	4620      	mov	r0, r4
 80a2102:	f7ff fa81 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a2106:	2201      	movs	r2, #1
 80a2108:	21ff      	movs	r1, #255	; 0xff
 80a210a:	4620      	mov	r0, r4
 80a210c:	f7ff fa7c 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x8E, 0x01);
 80a2110:	2201      	movs	r2, #1
 80a2112:	218e      	movs	r1, #142	; 0x8e
 80a2114:	4620      	mov	r0, r4
 80a2116:	f7ff fa77 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a211a:	2201      	movs	r2, #1
 80a211c:	2100      	movs	r1, #0
 80a211e:	4620      	mov	r0, r4
 80a2120:	f7ff fa72 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a2124:	2200      	movs	r2, #0
 80a2126:	21ff      	movs	r1, #255	; 0xff
 80a2128:	4620      	mov	r0, r4
 80a212a:	f7ff fa6d 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a212e:	2200      	movs	r2, #0
 80a2130:	2180      	movs	r1, #128	; 0x80
 80a2132:	4620      	mov	r0, r4
 80a2134:	f7ff fa68 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80a2138:	2204      	movs	r2, #4
 80a213a:	210a      	movs	r1, #10
 80a213c:	4620      	mov	r0, r4
 80a213e:	f7ff fa63 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80a2142:	2184      	movs	r1, #132	; 0x84
 80a2144:	4620      	mov	r0, r4
 80a2146:	f7ff face 	bl	80a16e6 <_ZN7VL53L0X7readRegEh>
 80a214a:	2184      	movs	r1, #132	; 0x84
 80a214c:	f000 02ef 	and.w	r2, r0, #239	; 0xef
 80a2150:	4620      	mov	r0, r4
 80a2152:	f7ff fa59 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a2156:	2201      	movs	r2, #1
 80a2158:	210b      	movs	r1, #11
 80a215a:	4620      	mov	r0, r4
 80a215c:	f7ff fa54 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a2160:	4620      	mov	r0, r4
 80a2162:	f7ff fcf3 	bl	80a1b4c <_ZN7VL53L0X26getMeasurementTimingBudgetEv>
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a2166:	22e8      	movs	r2, #232	; 0xe8
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a2168:	6160      	str	r0, [r4, #20]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a216a:	2101      	movs	r1, #1
 80a216c:	4620      	mov	r0, r4
 80a216e:	f7ff fa4b 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(measurement_timing_budget_us);
 80a2172:	6961      	ldr	r1, [r4, #20]
 80a2174:	4620      	mov	r0, r4
 80a2176:	f7ff fd33 	bl	80a1be0 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80a217a:	2201      	movs	r2, #1
 80a217c:	4611      	mov	r1, r2
 80a217e:	4620      	mov	r0, r4
 80a2180:	f7ff fa42 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x40)) { return false; }
 80a2184:	2140      	movs	r1, #64	; 0x40
 80a2186:	4620      	mov	r0, r4
 80a2188:	f7ff fd79 	bl	80a1c7e <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a218c:	2800      	cmp	r0, #0
 80a218e:	f43f adf2 	beq.w	80a1d76 <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80a2192:	2202      	movs	r2, #2
 80a2194:	2101      	movs	r1, #1
 80a2196:	4620      	mov	r0, r4
 80a2198:	f7ff fa36 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x00)) { return false; }
 80a219c:	2100      	movs	r1, #0
 80a219e:	4620      	mov	r0, r4
 80a21a0:	f7ff fd6d 	bl	80a1c7e <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a21a4:	4605      	mov	r5, r0
 80a21a6:	2800      	cmp	r0, #0
 80a21a8:	f43f ade5 	beq.w	80a1d76 <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a21ac:	22e8      	movs	r2, #232	; 0xe8
 80a21ae:	2101      	movs	r1, #1
 80a21b0:	4620      	mov	r0, r4
 80a21b2:	f7ff fa29 	bl	80a1608 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_PerformRefCalibration() end

  return true;
}
 80a21b6:	4628      	mov	r0, r5
 80a21b8:	b005      	add	sp, #20
 80a21ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a21bc <_GLOBAL__sub_I__ZN7VL53L0XC2Ev>:
 80a21bc:	f001 b838 	b.w	80a3230 <HAL_Pin_Map>

080a21c0 <_ZN9LIS3DHI2CD1Ev>:

}

LIS3DHI2C::~LIS3DHI2C() {

}
 80a21c0:	4770      	bx	lr

080a21c2 <_ZN9LIS3DHI2CD0Ev>:

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {

}

LIS3DHI2C::~LIS3DHI2C() {
 80a21c2:	b510      	push	{r4, lr}
 80a21c4:	4604      	mov	r4, r0

}
 80a21c6:	f7fd ff6a 	bl	80a009e <_ZdlPv>
 80a21ca:	4620      	mov	r0, r4
 80a21cc:	bd10      	pop	{r4, pc}

080a21ce <_ZN9LIS3DHI2C9writeDataEhPKhj>:
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a21ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a21d0:	4605      	mov	r5, r0
 80a21d2:	461e      	mov	r6, r3
 80a21d4:	460f      	mov	r7, r1

	wire.beginTransmission(getI2CAddr());
 80a21d6:	7c01      	ldrb	r1, [r0, #16]
 80a21d8:	68c0      	ldr	r0, [r0, #12]
 80a21da:	f041 0118 	orr.w	r1, r1, #24
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a21de:	4614      	mov	r4, r2

	wire.beginTransmission(getI2CAddr());
 80a21e0:	f001 fe1b 	bl	80a3e1a <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a21e4:	68e8      	ldr	r0, [r5, #12]

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a21e6:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a21e8:	6803      	ldr	r3, [r0, #0]
bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a21ea:	bf88      	it	hi
 80a21ec:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a21f0:	689b      	ldr	r3, [r3, #8]
 80a21f2:	4639      	mov	r1, r7
 80a21f4:	4798      	blx	r3
 80a21f6:	4426      	add	r6, r4
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a21f8:	42a6      	cmp	r6, r4
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a21fa:	68e8      	ldr	r0, [r5, #12]

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a21fc:	d005      	beq.n	80a220a <_ZN9LIS3DHI2C9writeDataEhPKhj+0x3c>
		wire.write(buf[ii]);
 80a21fe:	6803      	ldr	r3, [r0, #0]
 80a2200:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2204:	689b      	ldr	r3, [r3, #8]
 80a2206:	4798      	blx	r3

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a2208:	e7f6      	b.n	80a21f8 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x2a>
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a220a:	f001 fe0e 	bl	80a3e2a <_ZN7TwoWire15endTransmissionEv>

	return (res == 0);
}
 80a220e:	fab0 f080 	clz	r0, r0
 80a2212:	0940      	lsrs	r0, r0, #5
 80a2214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2216 <_ZN9LIS3DHI2C8readDataEhPhj>:

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a2216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2218:	4604      	mov	r4, r0
 80a221a:	461e      	mov	r6, r3
 80a221c:	460f      	mov	r7, r1
	wire.beginTransmission(getI2CAddr());
 80a221e:	7c01      	ldrb	r1, [r0, #16]
 80a2220:	68c0      	ldr	r0, [r0, #12]
 80a2222:	f041 0118 	orr.w	r1, r1, #24

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a2226:	4615      	mov	r5, r2
	wire.beginTransmission(getI2CAddr());
 80a2228:	f001 fdf7 	bl	80a3e1a <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a222c:	68e0      	ldr	r0, [r4, #12]
}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a222e:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a2230:	6803      	ldr	r3, [r0, #0]

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a2232:	bf88      	it	hi
 80a2234:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a2238:	689b      	ldr	r3, [r3, #8]
 80a223a:	4639      	mov	r1, r7
 80a223c:	4798      	blx	r3

	uint8_t res = wire.endTransmission();
 80a223e:	68e0      	ldr	r0, [r4, #12]
 80a2240:	f001 fdf3 	bl	80a3e2a <_ZN7TwoWire15endTransmissionEv>
	if (res != 0) {
 80a2244:	b9a8      	cbnz	r0, 80a2272 <_ZN9LIS3DHI2C8readDataEhPhj+0x5c>
		return false;
	}

	wire.requestFrom((int)getI2CAddr(), numBytes);
 80a2246:	7c21      	ldrb	r1, [r4, #16]
 80a2248:	4632      	mov	r2, r6
 80a224a:	f041 0118 	orr.w	r1, r1, #24
 80a224e:	68e0      	ldr	r0, [r4, #12]
 80a2250:	f001 fdde 	bl	80a3e10 <_ZN7TwoWire11requestFromEii>
 80a2254:	442e      	add	r6, r5
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
 80a2256:	42ae      	cmp	r6, r5
 80a2258:	d00d      	beq.n	80a2276 <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
 80a225a:	68e0      	ldr	r0, [r4, #12]
 80a225c:	6803      	ldr	r3, [r0, #0]
 80a225e:	691b      	ldr	r3, [r3, #16]
 80a2260:	4798      	blx	r3
 80a2262:	b140      	cbz	r0, 80a2276 <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
		buf[ii] = wire.read();
 80a2264:	68e0      	ldr	r0, [r4, #12]
 80a2266:	6803      	ldr	r3, [r0, #0]
 80a2268:	695b      	ldr	r3, [r3, #20]
 80a226a:	4798      	blx	r3
 80a226c:	f805 0b01 	strb.w	r0, [r5], #1
 80a2270:	e7f1      	b.n	80a2256 <_ZN9LIS3DHI2C8readDataEhPhj+0x40>
	}
	wire.write(addr);

	uint8_t res = wire.endTransmission();
	if (res != 0) {
		return false;
 80a2272:	2000      	movs	r0, #0
 80a2274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2276:	2001      	movs	r0, #1
	wire.requestFrom((int)getI2CAddr(), numBytes);
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
		buf[ii] = wire.read();
	}
	return true;
}
 80a2278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a227a <_ZN12LIS3DHConfigC1Ev>:
#include "LIS3DH.h"

// Official project location:
// https://github.com/rickkas7/LIS3DH

LIS3DHConfig::LIS3DHConfig() {
 80a227a:	2200      	movs	r2, #0
 80a227c:	7002      	strb	r2, [r0, #0]
 80a227e:	7042      	strb	r2, [r0, #1]
 80a2280:	7082      	strb	r2, [r0, #2]
 80a2282:	70c2      	strb	r2, [r0, #3]
 80a2284:	7102      	strb	r2, [r0, #4]
 80a2286:	7142      	strb	r2, [r0, #5]
 80a2288:	7182      	strb	r2, [r0, #6]
 80a228a:	71c2      	strb	r2, [r0, #7]
 80a228c:	7202      	strb	r2, [r0, #8]
 80a228e:	7242      	strb	r2, [r0, #9]
 80a2290:	7282      	strb	r2, [r0, #10]
}
 80a2292:	4770      	bx	lr

080a2294 <_ZN12LIS3DHConfig12setAccelModeEh>:
}

LIS3DHConfig &LIS3DHConfig::setAccelMode(uint8_t rate) {

	// Enable specified rate, with XYZ detection enabled
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
 80a2294:	f041 0107 	orr.w	r1, r1, #7
 80a2298:	7001      	strb	r1, [r0, #0]

	return *this;
}
 80a229a:	4770      	bx	lr

080a229c <_ZN6LIS3DH13readRegister8Eh>:

	return pos;
}


uint8_t LIS3DH::readRegister8(uint8_t addr) {
 80a229c:	b513      	push	{r0, r1, r4, lr}

	uint8_t resp[1];
	readData(addr, resp, sizeof(resp));
 80a229e:	6803      	ldr	r3, [r0, #0]
 80a22a0:	aa01      	add	r2, sp, #4
 80a22a2:	689c      	ldr	r4, [r3, #8]
 80a22a4:	2301      	movs	r3, #1
 80a22a6:	47a0      	blx	r4

	return resp[0];
}
 80a22a8:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80a22ac:	b002      	add	sp, #8
 80a22ae:	bd10      	pop	{r4, pc}

080a22b0 <_ZN6LIS3DH9hasDeviceEv>:
LIS3DH::~LIS3DH() {

}


bool LIS3DH::hasDevice() {
 80a22b0:	b538      	push	{r3, r4, r5, lr}
 80a22b2:	4605      	mov	r5, r0
 80a22b4:	240a      	movs	r4, #10
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
 80a22b6:	210f      	movs	r1, #15
 80a22b8:	4628      	mov	r0, r5
 80a22ba:	f7ff ffef 	bl	80a229c <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
 80a22be:	2833      	cmp	r0, #51	; 0x33
			found = true;
 80a22c0:	f04f 0001 	mov.w	r0, #1

bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
		if (whoami == WHO_AM_I) {
 80a22c4:	d005      	beq.n	80a22d2 <_ZN6LIS3DH9hasDeviceEv+0x22>
			found = true;
			break;
		}
		delay(1);
 80a22c6:	f001 fb0b 	bl	80a38e0 <delay>
}


bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
 80a22ca:	3c01      	subs	r4, #1
 80a22cc:	d1f3      	bne.n	80a22b6 <_ZN6LIS3DH9hasDeviceEv+0x6>

}


bool LIS3DH::hasDevice() {
	bool found = false;
 80a22ce:	4620      	mov	r0, r4
 80a22d0:	bd38      	pop	{r3, r4, r5, pc}
			break;
		}
		delay(1);
	}
	return found;
}
 80a22d2:	bd38      	pop	{r3, r4, r5, pc}

080a22d4 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a22d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a22d6:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a22d8:	2107      	movs	r1, #7

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a22da:	4606      	mov	r6, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a22dc:	f7ff ffde 	bl	80a229c <_ZN6LIS3DH13readRegister8Eh>
 80a22e0:	f000 0008 	and.w	r0, r0, #8

	bool hasData = ((statusAuxReg & STATUS_AUX_321DA) != 0);
 80a22e4:	2800      	cmp	r0, #0
 80a22e6:	bf14      	ite	ne
 80a22e8:	2501      	movne	r5, #1
 80a22ea:	2500      	moveq	r5, #0

	//Serial.printlnf("fifoSrcReg=0x%02x", fifoSrcReg);

	if (hasData) {
 80a22ec:	d01b      	beq.n	80a2326 <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x52>
		uint8_t resp[6];
		readData(REG_OUT_X_L, resp, sizeof(resp));
 80a22ee:	6833      	ldr	r3, [r6, #0]
 80a22f0:	466a      	mov	r2, sp
 80a22f2:	689f      	ldr	r7, [r3, #8]
 80a22f4:	2128      	movs	r1, #40	; 0x28
 80a22f6:	2306      	movs	r3, #6
 80a22f8:	4630      	mov	r0, r6
 80a22fa:	47b8      	blx	r7

		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
 80a22fc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a2300:	f89d 3000 	ldrb.w	r3, [sp]
 80a2304:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a2308:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
 80a230a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a230e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a2312:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a2316:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
 80a2318:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a231c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a2320:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a2324:	80a3      	strh	r3, [r4, #4]
	}
	return hasData;
}
 80a2326:	4628      	mov	r0, r5
 80a2328:	b003      	add	sp, #12
 80a232a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a232c <_ZN6LIS3DH14writeRegister8Ehh>:

	return resp[0] | (((uint16_t)resp[1]) << 8);
}


void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
 80a232c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a232e:	ac02      	add	r4, sp, #8

	writeData(addr, req, sizeof(req));
 80a2330:	6803      	ldr	r3, [r0, #0]

void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a2332:	f804 2d04 	strb.w	r2, [r4, #-4]!

	writeData(addr, req, sizeof(req));
 80a2336:	68dd      	ldr	r5, [r3, #12]
 80a2338:	4622      	mov	r2, r4
 80a233a:	2301      	movs	r3, #1
 80a233c:	47a8      	blx	r5
}
 80a233e:	b003      	add	sp, #12
 80a2340:	bd30      	pop	{r4, r5, pc}
	...

080a2344 <_ZN6LIS3DH5setupER12LIS3DHConfig>:
		delay(1);
	}
	return found;
}

bool LIS3DH::setup(LIS3DHConfig &config) {
 80a2344:	b570      	push	{r4, r5, r6, lr}
 80a2346:	4604      	mov	r4, r0
 80a2348:	460d      	mov	r5, r1

	if (!hasDevice()) {
 80a234a:	f7ff ffb1 	bl	80a22b0 <_ZN6LIS3DH9hasDeviceEv>
 80a234e:	4606      	mov	r6, r0
 80a2350:	b928      	cbnz	r0, 80a235e <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		Serial.println("device not found");
 80a2352:	f001 fc15 	bl	80a3b80 <_Z16_fetch_usbserialv>
 80a2356:	4928      	ldr	r1, [pc, #160]	; (80a23f8 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
 80a2358:	f001 fa79 	bl	80a384e <_ZN5Print7printlnEPKc>
		return false;
 80a235c:	e049      	b.n	80a23f2 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
	}

	writeRegister8(REG_CTRL_REG1, config.reg1);
 80a235e:	782a      	ldrb	r2, [r5, #0]
 80a2360:	2120      	movs	r1, #32
 80a2362:	4620      	mov	r0, r4
 80a2364:	f7ff ffe2 	bl	80a232c <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
 80a2368:	786a      	ldrb	r2, [r5, #1]
 80a236a:	2121      	movs	r1, #33	; 0x21
 80a236c:	4620      	mov	r0, r4
 80a236e:	f7ff ffdd 	bl	80a232c <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
 80a2372:	78aa      	ldrb	r2, [r5, #2]
 80a2374:	2122      	movs	r1, #34	; 0x22
 80a2376:	4620      	mov	r0, r4
 80a2378:	f7ff ffd8 	bl	80a232c <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
 80a237c:	78ea      	ldrb	r2, [r5, #3]
 80a237e:	2123      	movs	r1, #35	; 0x23
 80a2380:	4620      	mov	r0, r4
 80a2382:	f7ff ffd3 	bl	80a232c <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
 80a2386:	792a      	ldrb	r2, [r5, #4]
 80a2388:	2124      	movs	r1, #36	; 0x24
 80a238a:	4620      	mov	r0, r4
 80a238c:	f7ff ffce 	bl	80a232c <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
 80a2390:	796a      	ldrb	r2, [r5, #5]
 80a2392:	2125      	movs	r1, #37	; 0x25
 80a2394:	4620      	mov	r0, r4
 80a2396:	f7ff ffc9 	bl	80a232c <_ZN6LIS3DH14writeRegister8Ehh>

	if (config.setReference) {
 80a239a:	79ab      	ldrb	r3, [r5, #6]
 80a239c:	b11b      	cbz	r3, 80a23a6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x62>
		// In normal mode, reading the reference register sets it for the current normal force
		// (the normal force of gravity acting on the device)
		readRegister8(REG_REFERENCE);
 80a239e:	2126      	movs	r1, #38	; 0x26
 80a23a0:	4620      	mov	r0, r4
 80a23a2:	f7ff ff7b 	bl	80a229c <_ZN6LIS3DH13readRegister8Eh>
	}
	// Set FIFO mode
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
 80a23a6:	7aaa      	ldrb	r2, [r5, #10]
 80a23a8:	212e      	movs	r1, #46	; 0x2e
 80a23aa:	4620      	mov	r0, r4
 80a23ac:	f7ff ffbe 	bl	80a232c <_ZN6LIS3DH14writeRegister8Ehh>



	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
 80a23b0:	78ab      	ldrb	r3, [r5, #2]
 80a23b2:	065b      	lsls	r3, r3, #25
 80a23b4:	d51d      	bpl.n	80a23f2 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>

		writeRegister8(REG_INT1_THS, config.int1_ths);
 80a23b6:	79ea      	ldrb	r2, [r5, #7]
 80a23b8:	2132      	movs	r1, #50	; 0x32
 80a23ba:	4620      	mov	r0, r4
 80a23bc:	f7ff ffb6 	bl	80a232c <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
 80a23c0:	7a2a      	ldrb	r2, [r5, #8]
 80a23c2:	2133      	movs	r1, #51	; 0x33
 80a23c4:	4620      	mov	r0, r4
 80a23c6:	f7ff ffb1 	bl	80a232c <_ZN6LIS3DH14writeRegister8Ehh>

		if (intPin >= 0) {
 80a23ca:	6863      	ldr	r3, [r4, #4]
 80a23cc:	2b00      	cmp	r3, #0
 80a23ce:	db0a      	blt.n	80a23e6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa2>
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a23d0:	7a6a      	ldrb	r2, [r5, #9]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a23d2:	4620      	mov	r0, r4
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a23d4:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a23d6:	2130      	movs	r1, #48	; 0x30
 80a23d8:	f7ff ffa8 	bl	80a232c <_ZN6LIS3DH14writeRegister8Ehh>

			// Clear the interrupt just in case
			readRegister8(REG_INT1_SRC);
 80a23dc:	2131      	movs	r1, #49	; 0x31
 80a23de:	4620      	mov	r0, r4
 80a23e0:	f7ff ff5c 	bl	80a229c <_ZN6LIS3DH13readRegister8Eh>
 80a23e4:	e005      	b.n	80a23f2 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
		}
		else {
			int1_cfg = 0;
 80a23e6:	2200      	movs	r2, #0
 80a23e8:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
 80a23ea:	2130      	movs	r1, #48	; 0x30
 80a23ec:	4620      	mov	r0, r4
 80a23ee:	f7ff ff9d 	bl	80a232c <_ZN6LIS3DH14writeRegister8Ehh>




	return true;
}
 80a23f2:	4630      	mov	r0, r6
 80a23f4:	bd70      	pop	{r4, r5, r6, pc}
 80a23f6:	bf00      	nop
 80a23f8:	080a52a4 	.word	0x080a52a4

080a23fc <_ZN9LIS3DHI2CC1ER7TwoWirehi>:

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a23fc:	b510      	push	{r4, lr}

	return *this;
}


LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
 80a23fe:	6043      	str	r3, [r0, #4]

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a2400:	4b02      	ldr	r3, [pc, #8]	; (80a240c <_ZN9LIS3DHI2CC1ER7TwoWirehi+0x10>)
 80a2402:	60c1      	str	r1, [r0, #12]
 80a2404:	6003      	str	r3, [r0, #0]
 80a2406:	7402      	strb	r2, [r0, #16]

}
 80a2408:	bd10      	pop	{r4, pc}
 80a240a:	bf00      	nop
 80a240c:	080a5294 	.word	0x080a5294

080a2410 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:
 80a2410:	f000 bf0e 	b.w	80a3230 <HAL_Pin_Map>

080a2414 <_ZN9FuzzyRuleC1EiP19FuzzyRuleAntecedentP19FuzzyRuleConsequent>:
#include "FuzzyRule.h"

FuzzyRule::FuzzyRule(){
}

FuzzyRule::FuzzyRule(int index, FuzzyRuleAntecedent* fuzzyRuleAntecedent, FuzzyRuleConsequent* fuzzyRuleConsequent){
 80a2414:	b510      	push	{r4, lr}
    this->index = index;
    this->fuzzyRuleAntecedent = fuzzyRuleAntecedent;
    this->fuzzyRuleConsequent = fuzzyRuleConsequent;
 80a2416:	60c3      	str	r3, [r0, #12]
    this->fired = false;
 80a2418:	2300      	movs	r3, #0

FuzzyRule::FuzzyRule(){
}

FuzzyRule::FuzzyRule(int index, FuzzyRuleAntecedent* fuzzyRuleAntecedent, FuzzyRuleConsequent* fuzzyRuleConsequent){
    this->index = index;
 80a241a:	6001      	str	r1, [r0, #0]
    this->fuzzyRuleAntecedent = fuzzyRuleAntecedent;
 80a241c:	6082      	str	r2, [r0, #8]
    this->fuzzyRuleConsequent = fuzzyRuleConsequent;
    this->fired = false;
 80a241e:	7103      	strb	r3, [r0, #4]
}
 80a2420:	bd10      	pop	{r4, pc}

080a2422 <_ZN9FuzzyRule18evaluateExpressionEv>:

int FuzzyRule::getIndex(){
    return this->index;
}

bool FuzzyRule::evaluateExpression(){
 80a2422:	b538      	push	{r3, r4, r5, lr}
 80a2424:	4604      	mov	r4, r0
    if (this->fuzzyRuleAntecedent != NULL){
 80a2426:	6880      	ldr	r0, [r0, #8]
 80a2428:	b170      	cbz	r0, 80a2448 <_ZN9FuzzyRule18evaluateExpressionEv+0x26>
        float powerOfAntecedent = this->fuzzyRuleAntecedent->evaluate();
 80a242a:	f000 fe29 	bl	80a3080 <_ZN19FuzzyRuleAntecedent8evaluateEv>

        (powerOfAntecedent > 0.0) ?    (this->fired = true) : (this->fired = false);
 80a242e:	2100      	movs	r1, #0
    return this->index;
}

bool FuzzyRule::evaluateExpression(){
    if (this->fuzzyRuleAntecedent != NULL){
        float powerOfAntecedent = this->fuzzyRuleAntecedent->evaluate();
 80a2430:	4605      	mov	r5, r0

        (powerOfAntecedent > 0.0) ?    (this->fired = true) : (this->fired = false);
 80a2432:	f002 fe8d 	bl	80a5150 <__aeabi_fcmpgt>
 80a2436:	b110      	cbz	r0, 80a243e <_ZN9FuzzyRule18evaluateExpressionEv+0x1c>
 80a2438:	2301      	movs	r3, #1
 80a243a:	7123      	strb	r3, [r4, #4]
 80a243c:	e000      	b.n	80a2440 <_ZN9FuzzyRule18evaluateExpressionEv+0x1e>
 80a243e:	7120      	strb	r0, [r4, #4]
        
        this->fuzzyRuleConsequent->evaluate(powerOfAntecedent);
 80a2440:	4629      	mov	r1, r5
 80a2442:	68e0      	ldr	r0, [r4, #12]
 80a2444:	f000 fd57 	bl	80a2ef6 <_ZN19FuzzyRuleConsequent8evaluateEf>
    }
    return this->fired;
}
 80a2448:	7920      	ldrb	r0, [r4, #4]
 80a244a:	bd38      	pop	{r3, r4, r5, pc}

080a244c <_ZN16FuzzyCompositionC1Ev>:
#include "FuzzyComposition.h"
#include <math.h>

// CONSTRUTORES
FuzzyComposition::FuzzyComposition(){
    this->pointsCursor     = NULL;
 80a244c:	2200      	movs	r2, #0
 80a244e:	6002      	str	r2, [r0, #0]
    this->points         = NULL;
 80a2450:	6042      	str	r2, [r0, #4]
}
 80a2452:	4770      	bx	lr

080a2454 <_ZN16FuzzyComposition8addPointEff>:
// DESTRUTOR
FuzzyComposition::~FuzzyComposition(){
    this->cleanPoints(this->points);
}

bool FuzzyComposition::addPoint(float point, float pertinence){
 80a2454:	b570      	push	{r4, r5, r6, lr}
 80a2456:	4604      	mov	r4, r0
    pointsArray* aux;
    // Alocando espaço na memória
    if((aux = (pointsArray* ) malloc(sizeof(pointsArray))) == NULL){
 80a2458:	2010      	movs	r0, #16
// DESTRUTOR
FuzzyComposition::~FuzzyComposition(){
    this->cleanPoints(this->points);
}

bool FuzzyComposition::addPoint(float point, float pertinence){
 80a245a:	460e      	mov	r6, r1
 80a245c:	4615      	mov	r5, r2
    pointsArray* aux;
    // Alocando espaço na memória
    if((aux = (pointsArray* ) malloc(sizeof(pointsArray))) == NULL){
 80a245e:	f001 f8b9 	bl	80a35d4 <malloc>
 80a2462:	2300      	movs	r3, #0
 80a2464:	b170      	cbz	r0, 80a2484 <_ZN16FuzzyComposition8addPointEff+0x30>
        return false;
    }
    aux->previous = NULL;
 80a2466:	6003      	str	r3, [r0, #0]
    aux->point = point;
 80a2468:	6046      	str	r6, [r0, #4]
    aux->pertinence = pertinence;
 80a246a:	6085      	str	r5, [r0, #8]
    aux->next = NULL;
 80a246c:	60c3      	str	r3, [r0, #12]

    if(this->points == NULL){
 80a246e:	6863      	ldr	r3, [r4, #4]
 80a2470:	b913      	cbnz	r3, 80a2478 <_ZN16FuzzyComposition8addPointEff+0x24>
        this->points = aux;
 80a2472:	6060      	str	r0, [r4, #4]
        this->pointsCursor  = aux;
 80a2474:	6020      	str	r0, [r4, #0]
 80a2476:	e004      	b.n	80a2482 <_ZN16FuzzyComposition8addPointEff+0x2e>
    }else{
        aux->previous = this->pointsCursor;
 80a2478:	6823      	ldr	r3, [r4, #0]
 80a247a:	6003      	str	r3, [r0, #0]
        this->pointsCursor = aux;
 80a247c:	6020      	str	r0, [r4, #0]
        aux->previous->next = this->pointsCursor;
 80a247e:	6803      	ldr	r3, [r0, #0]
 80a2480:	60d8      	str	r0, [r3, #12]
    }
    return true;
 80a2482:	2001      	movs	r0, #1
}
 80a2484:	bd70      	pop	{r4, r5, r6, pc}

080a2486 <_ZN16FuzzyComposition10checkPointEff>:

bool FuzzyComposition::checkPoint(float point, float pertinence){
 80a2486:	b570      	push	{r4, r5, r6, lr}
 80a2488:	460d      	mov	r5, r1
 80a248a:	4616      	mov	r6, r2
    pointsArray* aux;
    aux = this->pointsCursor;
 80a248c:	6804      	ldr	r4, [r0, #0]
    while(aux != NULL){
 80a248e:	b15c      	cbz	r4, 80a24a8 <_ZN16FuzzyComposition10checkPointEff+0x22>
        if(aux->point == point && aux->pertinence == pertinence){
 80a2490:	4629      	mov	r1, r5
 80a2492:	6860      	ldr	r0, [r4, #4]
 80a2494:	f002 fe34 	bl	80a5100 <__aeabi_fcmpeq>
 80a2498:	b120      	cbz	r0, 80a24a4 <_ZN16FuzzyComposition10checkPointEff+0x1e>
 80a249a:	4631      	mov	r1, r6
 80a249c:	68a0      	ldr	r0, [r4, #8]
 80a249e:	f002 fe2f 	bl	80a5100 <__aeabi_fcmpeq>
 80a24a2:	b918      	cbnz	r0, 80a24ac <_ZN16FuzzyComposition10checkPointEff+0x26>
            return true;
        }
        aux = aux->previous;
 80a24a4:	6824      	ldr	r4, [r4, #0]
}

bool FuzzyComposition::checkPoint(float point, float pertinence){
    pointsArray* aux;
    aux = this->pointsCursor;
    while(aux != NULL){
 80a24a6:	e7f2      	b.n	80a248e <_ZN16FuzzyComposition10checkPointEff+0x8>
        if(aux->point == point && aux->pertinence == pertinence){
            return true;
        }
        aux = aux->previous;
    }
    return false;
 80a24a8:	4620      	mov	r0, r4
 80a24aa:	bd70      	pop	{r4, r5, r6, pc}
bool FuzzyComposition::checkPoint(float point, float pertinence){
    pointsArray* aux;
    aux = this->pointsCursor;
    while(aux != NULL){
        if(aux->point == point && aux->pertinence == pertinence){
            return true;
 80a24ac:	2001      	movs	r0, #1
        }
        aux = aux->previous;
    }
    return false;
}
 80a24ae:	bd70      	pop	{r4, r5, r6, pc}

080a24b0 <_ZN16FuzzyComposition8avaliateEv>:
        aux = aux->next;
    }
    return true;
}

float FuzzyComposition::avaliate(){
 80a24b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pointsArray* aux;
    float numerator     = 0.0;
    float denominator   = 0.0;
 80a24b4:	2700      	movs	r7, #0
    return true;
}

float FuzzyComposition::avaliate(){
    pointsArray* aux;
    float numerator     = 0.0;
 80a24b6:	46ba      	mov	sl, r7
    float denominator   = 0.0;

    aux = this->points;
 80a24b8:	6845      	ldr	r5, [r0, #4]
    while(aux != NULL){
 80a24ba:	2d00      	cmp	r5, #0
 80a24bc:	f000 80b1 	beq.w	80a2622 <_ZN16FuzzyComposition8avaliateEv+0x172>
        if(aux->next != NULL){
 80a24c0:	68ee      	ldr	r6, [r5, #12]
 80a24c2:	b90e      	cbnz	r6, 80a24c8 <_ZN16FuzzyComposition8avaliateEv+0x18>
        aux = aux->next;
    }
    return true;
}

float FuzzyComposition::avaliate(){
 80a24c4:	4635      	mov	r5, r6
 80a24c6:	e7f8      	b.n	80a24ba <_ZN16FuzzyComposition8avaliateEv+0xa>
    aux = this->points;
    while(aux != NULL){
        if(aux->next != NULL){
            float area = 0.0;
            float middle = 0.0;
            if(aux->point == aux->next->point){
 80a24c8:	686c      	ldr	r4, [r5, #4]
 80a24ca:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80a24ce:	4620      	mov	r0, r4
 80a24d0:	4641      	mov	r1, r8
 80a24d2:	f002 fe15 	bl	80a5100 <__aeabi_fcmpeq>
 80a24d6:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80a24da:	b108      	cbz	r0, 80a24e0 <_ZN16FuzzyComposition8avaliateEv+0x30>
                // Se Singleton
                area     = aux->pertinence;
 80a24dc:	465d      	mov	r5, fp
 80a24de:	e091      	b.n	80a2604 <_ZN16FuzzyComposition8avaliateEv+0x154>
                middle   = aux->point;
            }else if(aux->pertinence == 0.0 || aux->next->pertinence == 0.0){
 80a24e0:	2100      	movs	r1, #0
 80a24e2:	4658      	mov	r0, fp
 80a24e4:	f002 fe0c 	bl	80a5100 <__aeabi_fcmpeq>
 80a24e8:	b930      	cbnz	r0, 80a24f8 <_ZN16FuzzyComposition8avaliateEv+0x48>
 80a24ea:	68b5      	ldr	r5, [r6, #8]
 80a24ec:	2100      	movs	r1, #0
 80a24ee:	4628      	mov	r0, r5
 80a24f0:	f002 fe06 	bl	80a5100 <__aeabi_fcmpeq>
 80a24f4:	2800      	cmp	r0, #0
 80a24f6:	d036      	beq.n	80a2566 <_ZN16FuzzyComposition8avaliateEv+0xb6>
                // Se triangulo
                float pertinence;
                if(aux->pertinence > 0.0){
 80a24f8:	2100      	movs	r1, #0
 80a24fa:	4658      	mov	r0, fp
 80a24fc:	f002 fe28 	bl	80a5150 <__aeabi_fcmpgt>
 80a2500:	b908      	cbnz	r0, 80a2506 <_ZN16FuzzyComposition8avaliateEv+0x56>
                    pertinence = aux->pertinence;
                }else{
                    pertinence = aux->next->pertinence;
 80a2502:	68b5      	ldr	r5, [r6, #8]
 80a2504:	e000      	b.n	80a2508 <_ZN16FuzzyComposition8avaliateEv+0x58>
                middle   = aux->point;
            }else if(aux->pertinence == 0.0 || aux->next->pertinence == 0.0){
                // Se triangulo
                float pertinence;
                if(aux->pertinence > 0.0){
                    pertinence = aux->pertinence;
 80a2506:	465d      	mov	r5, fp
                }else{
                    pertinence = aux->next->pertinence;
                }
                area = ((aux->next->point - aux->point) * pertinence) / 2.0;
 80a2508:	4621      	mov	r1, r4
 80a250a:	4640      	mov	r0, r8
 80a250c:	f002 fb5a 	bl	80a4bc4 <__aeabi_fsub>
 80a2510:	4601      	mov	r1, r0
 80a2512:	4680      	mov	r8, r0
 80a2514:	4628      	mov	r0, r5
 80a2516:	f002 fc5f 	bl	80a4dd8 <__aeabi_fmul>
 80a251a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a251e:	f002 fc5b 	bl	80a4dd8 <__aeabi_fmul>
                if(aux->pertinence < aux->next->pertinence){
 80a2522:	68b1      	ldr	r1, [r6, #8]
                if(aux->pertinence > 0.0){
                    pertinence = aux->pertinence;
                }else{
                    pertinence = aux->next->pertinence;
                }
                area = ((aux->next->point - aux->point) * pertinence) / 2.0;
 80a2524:	4605      	mov	r5, r0
                if(aux->pertinence < aux->next->pertinence){
 80a2526:	4658      	mov	r0, fp
 80a2528:	f002 fdf4 	bl	80a5114 <__aeabi_fcmplt>
 80a252c:	b128      	cbz	r0, 80a253a <_ZN16FuzzyComposition8avaliateEv+0x8a>
                    middle = ((aux->next->point - aux->point) / 1.5) + aux->point;
 80a252e:	4640      	mov	r0, r8
 80a2530:	f002 f806 	bl	80a4540 <__aeabi_f2d>
 80a2534:	2200      	movs	r2, #0
 80a2536:	4b42      	ldr	r3, [pc, #264]	; (80a2640 <_ZN16FuzzyComposition8avaliateEv+0x190>)
 80a2538:	e004      	b.n	80a2544 <_ZN16FuzzyComposition8avaliateEv+0x94>
                }else{
                    middle = ((aux->next->point - aux->point) / 3.0) + aux->point;
 80a253a:	4640      	mov	r0, r8
 80a253c:	f002 f800 	bl	80a4540 <__aeabi_f2d>
 80a2540:	4b40      	ldr	r3, [pc, #256]	; (80a2644 <_ZN16FuzzyComposition8avaliateEv+0x194>)
 80a2542:	2200      	movs	r2, #0
 80a2544:	f002 f97a 	bl	80a483c <__aeabi_ddiv>
 80a2548:	4680      	mov	r8, r0
 80a254a:	4620      	mov	r0, r4
 80a254c:	4689      	mov	r9, r1
 80a254e:	f001 fff7 	bl	80a4540 <__aeabi_f2d>
 80a2552:	4602      	mov	r2, r0
 80a2554:	460b      	mov	r3, r1
 80a2556:	4640      	mov	r0, r8
 80a2558:	4649      	mov	r1, r9
 80a255a:	f001 fe93 	bl	80a4284 <__adddf3>
 80a255e:	f002 fadd 	bl	80a4b1c <__aeabi_d2f>
 80a2562:	4604      	mov	r4, r0
 80a2564:	e04e      	b.n	80a2604 <_ZN16FuzzyComposition8avaliateEv+0x154>
                }
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence == aux->next->pertinence)){
 80a2566:	2100      	movs	r1, #0
 80a2568:	4658      	mov	r0, fp
 80a256a:	f002 fdf1 	bl	80a5150 <__aeabi_fcmpgt>
 80a256e:	2100      	movs	r1, #0
 80a2570:	b1c0      	cbz	r0, 80a25a4 <_ZN16FuzzyComposition8avaliateEv+0xf4>
 80a2572:	4628      	mov	r0, r5
 80a2574:	f002 fdec 	bl	80a5150 <__aeabi_fcmpgt>
 80a2578:	b1c0      	cbz	r0, 80a25ac <_ZN16FuzzyComposition8avaliateEv+0xfc>
 80a257a:	4629      	mov	r1, r5
 80a257c:	4658      	mov	r0, fp
 80a257e:	f002 fdbf 	bl	80a5100 <__aeabi_fcmpeq>
 80a2582:	b1e8      	cbz	r0, 80a25c0 <_ZN16FuzzyComposition8avaliateEv+0x110>
                // Se quadrado
                area = (aux->next->point - aux->point) * aux->pertinence;
 80a2584:	4621      	mov	r1, r4
 80a2586:	4640      	mov	r0, r8
 80a2588:	f002 fb1c 	bl	80a4bc4 <__aeabi_fsub>
 80a258c:	4601      	mov	r1, r0
 80a258e:	4680      	mov	r8, r0
 80a2590:	4658      	mov	r0, fp
 80a2592:	f002 fc21 	bl	80a4dd8 <__aeabi_fmul>
 80a2596:	4605      	mov	r5, r0
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
 80a2598:	4640      	mov	r0, r8
 80a259a:	f001 ffd1 	bl	80a4540 <__aeabi_f2d>
 80a259e:	2200      	movs	r2, #0
 80a25a0:	4b29      	ldr	r3, [pc, #164]	; (80a2648 <_ZN16FuzzyComposition8avaliateEv+0x198>)
 80a25a2:	e02a      	b.n	80a25fa <_ZN16FuzzyComposition8avaliateEv+0x14a>
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence != aux->next->pertinence)){
 80a25a4:	4658      	mov	r0, fp
 80a25a6:	f002 fdd3 	bl	80a5150 <__aeabi_fcmpgt>
 80a25aa:	b348      	cbz	r0, 80a2600 <_ZN16FuzzyComposition8avaliateEv+0x150>
 80a25ac:	2100      	movs	r1, #0
 80a25ae:	4628      	mov	r0, r5
 80a25b0:	f002 fdce 	bl	80a5150 <__aeabi_fcmpgt>
 80a25b4:	b320      	cbz	r0, 80a2600 <_ZN16FuzzyComposition8avaliateEv+0x150>
 80a25b6:	4629      	mov	r1, r5
 80a25b8:	4658      	mov	r0, fp
 80a25ba:	f002 fda1 	bl	80a5100 <__aeabi_fcmpeq>
 80a25be:	b9f8      	cbnz	r0, 80a2600 <_ZN16FuzzyComposition8avaliateEv+0x150>
                // Se trapezio
                area = ((aux->pertinence + aux->next->pertinence) / 2.0) * (aux->next->point - aux->point);
 80a25c0:	4621      	mov	r1, r4
 80a25c2:	4640      	mov	r0, r8
 80a25c4:	f002 fafe 	bl	80a4bc4 <__aeabi_fsub>
 80a25c8:	f001 ffba 	bl	80a4540 <__aeabi_f2d>
 80a25cc:	4680      	mov	r8, r0
 80a25ce:	4689      	mov	r9, r1
 80a25d0:	4658      	mov	r0, fp
 80a25d2:	4629      	mov	r1, r5
 80a25d4:	f002 faf8 	bl	80a4bc8 <__addsf3>
 80a25d8:	f001 ffb2 	bl	80a4540 <__aeabi_f2d>
 80a25dc:	2200      	movs	r2, #0
 80a25de:	4b1a      	ldr	r3, [pc, #104]	; (80a2648 <_ZN16FuzzyComposition8avaliateEv+0x198>)
 80a25e0:	f002 f802 	bl	80a45e8 <__aeabi_dmul>
 80a25e4:	4642      	mov	r2, r8
 80a25e6:	464b      	mov	r3, r9
 80a25e8:	f001 fffe 	bl	80a45e8 <__aeabi_dmul>
 80a25ec:	f002 fa96 	bl	80a4b1c <__aeabi_d2f>
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
 80a25f0:	4649      	mov	r1, r9
                // Se quadrado
                area = (aux->next->point - aux->point) * aux->pertinence;
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence != aux->next->pertinence)){
                // Se trapezio
                area = ((aux->pertinence + aux->next->pertinence) / 2.0) * (aux->next->point - aux->point);
 80a25f2:	4605      	mov	r5, r0
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
 80a25f4:	4640      	mov	r0, r8
 80a25f6:	4b14      	ldr	r3, [pc, #80]	; (80a2648 <_ZN16FuzzyComposition8avaliateEv+0x198>)
 80a25f8:	2200      	movs	r2, #0
 80a25fa:	f001 fff5 	bl	80a45e8 <__aeabi_dmul>
 80a25fe:	e7a3      	b.n	80a2548 <_ZN16FuzzyComposition8avaliateEv+0x98>

    aux = this->points;
    while(aux != NULL){
        if(aux->next != NULL){
            float area = 0.0;
            float middle = 0.0;
 80a2600:	2400      	movs	r4, #0
    float denominator   = 0.0;

    aux = this->points;
    while(aux != NULL){
        if(aux->next != NULL){
            float area = 0.0;
 80a2602:	4625      	mov	r5, r4
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence != aux->next->pertinence)){
                // Se trapezio
                area = ((aux->pertinence + aux->next->pertinence) / 2.0) * (aux->next->point - aux->point);
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
            }
            numerator += middle * area;
 80a2604:	4621      	mov	r1, r4
 80a2606:	4628      	mov	r0, r5
 80a2608:	f002 fbe6 	bl	80a4dd8 <__aeabi_fmul>
 80a260c:	4601      	mov	r1, r0
 80a260e:	4650      	mov	r0, sl
 80a2610:	f002 fada 	bl	80a4bc8 <__addsf3>
            denominator += area;
 80a2614:	4629      	mov	r1, r5
            }else if((aux->pertinence > 0.0 && aux->next->pertinence > 0.0) && (aux->pertinence != aux->next->pertinence)){
                // Se trapezio
                area = ((aux->pertinence + aux->next->pertinence) / 2.0) * (aux->next->point - aux->point);
                middle = ((aux->next->point - aux->point) / 2.0) + aux->point;
            }
            numerator += middle * area;
 80a2616:	4682      	mov	sl, r0
            denominator += area;
 80a2618:	4638      	mov	r0, r7
 80a261a:	f002 fad5 	bl	80a4bc8 <__addsf3>
 80a261e:	4607      	mov	r7, r0
 80a2620:	e750      	b.n	80a24c4 <_ZN16FuzzyComposition8avaliateEv+0x14>
        }
        aux = aux->next;
    }

    if(denominator == 0.0){
 80a2622:	2100      	movs	r1, #0
 80a2624:	4638      	mov	r0, r7
 80a2626:	f002 fd6b 	bl	80a5100 <__aeabi_fcmpeq>
 80a262a:	b928      	cbnz	r0, 80a2638 <_ZN16FuzzyComposition8avaliateEv+0x188>
        return 0.0;
    }else{
        return numerator / denominator;
 80a262c:	4639      	mov	r1, r7
 80a262e:	4650      	mov	r0, sl
 80a2630:	f002 fc86 	bl	80a4f40 <__aeabi_fdiv>
 80a2634:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }
        aux = aux->next;
    }

    if(denominator == 0.0){
        return 0.0;
 80a2638:	2000      	movs	r0, #0
    }else{
        return numerator / denominator;
    }
}
 80a263a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a263e:	bf00      	nop
 80a2640:	3ff80000 	.word	0x3ff80000
 80a2644:	40080000 	.word	0x40080000
 80a2648:	3fe00000 	.word	0x3fe00000

080a264c <_ZN16FuzzyComposition11cleanPointsEP11pointsArray>:
    this->pointsCursor = NULL;
    return true;
}

// MÉTODOS PRIVADOS
void FuzzyComposition::cleanPoints(pointsArray* aux){
 80a264c:	b510      	push	{r4, lr}
    if(aux != NULL){
 80a264e:	460c      	mov	r4, r1
 80a2650:	b139      	cbz	r1, 80a2662 <_ZN16FuzzyComposition11cleanPointsEP11pointsArray+0x16>
        // Esvaziando a memória alocada
        this->cleanPoints(aux->next);
 80a2652:	68c9      	ldr	r1, [r1, #12]
 80a2654:	f7ff fffa 	bl	80a264c <_ZN16FuzzyComposition11cleanPointsEP11pointsArray>
        free(aux);
 80a2658:	4620      	mov	r0, r4
    }
}
 80a265a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// MÉTODOS PRIVADOS
void FuzzyComposition::cleanPoints(pointsArray* aux){
    if(aux != NULL){
        // Esvaziando a memória alocada
        this->cleanPoints(aux->next);
        free(aux);
 80a265e:	f000 bfc1 	b.w	80a35e4 <free>
 80a2662:	bd10      	pop	{r4, pc}

080a2664 <_ZN16FuzzyComposition5emptyEv>:
    }else{
        return numerator / denominator;
    }
}

bool FuzzyComposition::empty(){
 80a2664:	b510      	push	{r4, lr}
 80a2666:	4604      	mov	r4, r0
    // limpando a memória
    this->cleanPoints(this->points);
 80a2668:	6841      	ldr	r1, [r0, #4]
 80a266a:	f7ff ffef 	bl	80a264c <_ZN16FuzzyComposition11cleanPointsEP11pointsArray>
    // resetando os ponteiros
    this->points = NULL;
 80a266e:	2300      	movs	r3, #0
 80a2670:	6063      	str	r3, [r4, #4]
    this->pointsCursor = NULL;
 80a2672:	6023      	str	r3, [r4, #0]
    return true;
}
 80a2674:	2001      	movs	r0, #1
 80a2676:	bd10      	pop	{r4, pc}

080a2678 <_ZN16FuzzyComposition8rmvPointEP11pointsArray>:

        return true;
    }
}

bool FuzzyComposition::rmvPoint(pointsArray* point){
 80a2678:	b508      	push	{r3, lr}
    if(point != NULL){
 80a267a:	b111      	cbz	r1, 80a2682 <_ZN16FuzzyComposition8rmvPointEP11pointsArray+0xa>
        free(point);
 80a267c:	4608      	mov	r0, r1
 80a267e:	f000 ffb1 	bl	80a35e4 <free>
    }
    return true;
}
 80a2682:	2001      	movs	r0, #1
 80a2684:	bd08      	pop	{r3, pc}
	...

080a2688 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_>:
        this->cleanPoints(aux->next);
        free(aux);
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
 80a2688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a268c:	461e      	mov	r6, r3
    float x1 = aSegmentBegin->point;
 80a268e:	684b      	ldr	r3, [r1, #4]
        this->cleanPoints(aux->next);
        free(aux);
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
 80a2690:	b087      	sub	sp, #28
    float x1 = aSegmentBegin->point;
 80a2692:	9301      	str	r3, [sp, #4]
    float y1 = aSegmentBegin->pertinence;
 80a2694:	688b      	ldr	r3, [r1, #8]
    float x2 = aSegmentEnd->point;
    float y2 = aSegmentEnd->pertinence;
    float x3 = bSegmentBegin->point;
    float y3 = bSegmentBegin->pertinence;
 80a2696:	f8d6 9008 	ldr.w	r9, [r6, #8]
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
    float x1 = aSegmentBegin->point;
    float y1 = aSegmentBegin->pertinence;
 80a269a:	9302      	str	r3, [sp, #8]
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a269c:	9b10      	ldr	r3, [sp, #64]	; 0x40
        this->cleanPoints(aux->next);
        free(aux);
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
 80a269e:	9005      	str	r0, [sp, #20]
 80a26a0:	460c      	mov	r4, r1
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a26a2:	6898      	ldr	r0, [r3, #8]
 80a26a4:	4649      	mov	r1, r9
        this->cleanPoints(aux->next);
        free(aux);
    }
}

bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
 80a26a6:	4617      	mov	r7, r2
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a26a8:	f002 fa8c 	bl	80a4bc4 <__aeabi_fsub>
 80a26ac:	9901      	ldr	r1, [sp, #4]
 80a26ae:	4682      	mov	sl, r0
 80a26b0:	6878      	ldr	r0, [r7, #4]
 80a26b2:	f002 fa87 	bl	80a4bc4 <__aeabi_fsub>
bool FuzzyComposition::rebuild(pointsArray* aSegmentBegin, pointsArray* aSegmentEnd, pointsArray* bSegmentBegin, pointsArray* bSegmentEnd){
    float x1 = aSegmentBegin->point;
    float y1 = aSegmentBegin->pertinence;
    float x2 = aSegmentEnd->point;
    float y2 = aSegmentEnd->pertinence;
    float x3 = bSegmentBegin->point;
 80a26b6:	f8d6 8004 	ldr.w	r8, [r6, #4]
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a26ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a26bc:	4641      	mov	r1, r8
 80a26be:	9003      	str	r0, [sp, #12]
 80a26c0:	6858      	ldr	r0, [r3, #4]
 80a26c2:	f002 fa7f 	bl	80a4bc4 <__aeabi_fsub>
 80a26c6:	9902      	ldr	r1, [sp, #8]
 80a26c8:	4683      	mov	fp, r0
 80a26ca:	68b8      	ldr	r0, [r7, #8]
 80a26cc:	f002 fa7a 	bl	80a4bc4 <__aeabi_fsub>
 80a26d0:	9903      	ldr	r1, [sp, #12]
 80a26d2:	9004      	str	r0, [sp, #16]
 80a26d4:	4650      	mov	r0, sl
 80a26d6:	f002 fb7f 	bl	80a4dd8 <__aeabi_fmul>
 80a26da:	9904      	ldr	r1, [sp, #16]
 80a26dc:	4605      	mov	r5, r0
 80a26de:	4658      	mov	r0, fp
 80a26e0:	f002 fb7a 	bl	80a4dd8 <__aeabi_fmul>
 80a26e4:	4601      	mov	r1, r0
 80a26e6:	4628      	mov	r0, r5
 80a26e8:	f002 fa6c 	bl	80a4bc4 <__aeabi_fsub>
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a26ec:	4649      	mov	r1, r9
    float y4 = bSegmentEnd->pertinence;
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a26ee:	4605      	mov	r5, r0
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a26f0:	9802      	ldr	r0, [sp, #8]
 80a26f2:	f002 fa67 	bl	80a4bc4 <__aeabi_fsub>
 80a26f6:	4641      	mov	r1, r8
 80a26f8:	4681      	mov	r9, r0
 80a26fa:	9801      	ldr	r0, [sp, #4]
 80a26fc:	f002 fa62 	bl	80a4bc4 <__aeabi_fsub>
 80a2700:	4649      	mov	r1, r9
 80a2702:	4680      	mov	r8, r0
 80a2704:	4658      	mov	r0, fp
 80a2706:	f002 fb67 	bl	80a4dd8 <__aeabi_fmul>
 80a270a:	4641      	mov	r1, r8
 80a270c:	4683      	mov	fp, r0
 80a270e:	4650      	mov	r0, sl
 80a2710:	f002 fb62 	bl	80a4dd8 <__aeabi_fmul>
 80a2714:	4601      	mov	r1, r0
 80a2716:	4658      	mov	r0, fp
 80a2718:	f002 fa54 	bl	80a4bc4 <__aeabi_fsub>
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a271c:	4649      	mov	r1, r9
    float point, pertinence;
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a271e:	4682      	mov	sl, r0
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a2720:	9803      	ldr	r0, [sp, #12]
 80a2722:	f002 fb59 	bl	80a4dd8 <__aeabi_fmul>
 80a2726:	4641      	mov	r1, r8
 80a2728:	4681      	mov	r9, r0
 80a272a:	9804      	ldr	r0, [sp, #16]
 80a272c:	f002 fb54 	bl	80a4dd8 <__aeabi_fmul>
 80a2730:	4601      	mov	r1, r0
 80a2732:	4648      	mov	r0, r9
 80a2734:	f002 fa46 	bl	80a4bc4 <__aeabi_fsub>

    if(denom < 0.0){
 80a2738:	2100      	movs	r1, #0
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a273a:	4680      	mov	r8, r0

    if(denom < 0.0){
 80a273c:	4628      	mov	r0, r5
 80a273e:	f002 fce9 	bl	80a5114 <__aeabi_fcmplt>
 80a2742:	b108      	cbz	r0, 80a2748 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xc0>
        denom *= -1.0;
 80a2744:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    }
    if(numera < 0.0){
 80a2748:	2100      	movs	r1, #0
 80a274a:	4650      	mov	r0, sl
 80a274c:	f002 fce2 	bl	80a5114 <__aeabi_fcmplt>
 80a2750:	b108      	cbz	r0, 80a2756 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xce>
        numera *= -1.0;
 80a2752:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
    }
    if(numerb < 0.0){
 80a2756:	2100      	movs	r1, #0
 80a2758:	4640      	mov	r0, r8
 80a275a:	f002 fcdb 	bl	80a5114 <__aeabi_fcmplt>
 80a275e:	b108      	cbz	r0, 80a2764 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xdc>
        numerb *= -1.0;
 80a2760:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
    }

    // Se os seguimentos forem paralelos, retornar falso
    if(denom < EPS){
 80a2764:	4628      	mov	r0, r5
 80a2766:	f001 feeb 	bl	80a4540 <__aeabi_f2d>
 80a276a:	a331      	add	r3, pc, #196	; (adr r3, 80a2830 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x1a8>)
 80a276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2770:	f002 f9ac 	bl	80a4acc <__aeabi_dcmplt>
 80a2774:	b108      	cbz	r0, 80a277a <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xf2>
        return false;
 80a2776:	2000      	movs	r0, #0
 80a2778:	e057      	b.n	80a282a <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x1a2>
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
 80a277a:	4629      	mov	r1, r5
 80a277c:	4650      	mov	r0, sl
 80a277e:	f002 fbdf 	bl	80a4f40 <__aeabi_fdiv>
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a2782:	2100      	movs	r1, #0
    if(denom < EPS){
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
 80a2784:	4681      	mov	r9, r0
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a2786:	f002 fcc5 	bl	80a5114 <__aeabi_fcmplt>
 80a278a:	2800      	cmp	r0, #0
 80a278c:	d1f3      	bne.n	80a2776 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
 80a278e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2792:	4648      	mov	r0, r9
 80a2794:	f002 fcdc 	bl	80a5150 <__aeabi_fcmpgt>
 80a2798:	2800      	cmp	r0, #0
 80a279a:	d1ec      	bne.n	80a2776 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
    mub = numerb / denom;
 80a279c:	4629      	mov	r1, r5
 80a279e:	4640      	mov	r0, r8
 80a27a0:	f002 fbce 	bl	80a4f40 <__aeabi_fdiv>
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a27a4:	2100      	movs	r1, #0
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
    mub = numerb / denom;
 80a27a6:	4605      	mov	r5, r0
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a27a8:	f002 fcb4 	bl	80a5114 <__aeabi_fcmplt>
 80a27ac:	2800      	cmp	r0, #0
 80a27ae:	d1e2      	bne.n	80a2776 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
 80a27b0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a27b4:	4628      	mov	r0, r5
 80a27b6:	f002 fccb 	bl	80a5150 <__aeabi_fcmpgt>
 80a27ba:	2800      	cmp	r0, #0
 80a27bc:	d1db      	bne.n	80a2776 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
        return false;
    }else{
        // Calculando o ponto e a pertinencia do novo elemento
        point         = x1 + mua * (x2 - x1);
 80a27be:	4649      	mov	r1, r9
 80a27c0:	9803      	ldr	r0, [sp, #12]
 80a27c2:	f002 fb09 	bl	80a4dd8 <__aeabi_fmul>
 80a27c6:	9901      	ldr	r1, [sp, #4]
 80a27c8:	f002 f9fe 	bl	80a4bc8 <__addsf3>
        pertinence     = y1 + mua * (y2 - y1);
 80a27cc:	4649      	mov	r1, r9
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
        return false;
    }else{
        // Calculando o ponto e a pertinencia do novo elemento
        point         = x1 + mua * (x2 - x1);
 80a27ce:	4605      	mov	r5, r0
        pertinence     = y1 + mua * (y2 - y1);
 80a27d0:	9804      	ldr	r0, [sp, #16]
 80a27d2:	f002 fb01 	bl	80a4dd8 <__aeabi_fmul>
 80a27d6:	9902      	ldr	r1, [sp, #8]
 80a27d8:	f002 f9f6 	bl	80a4bc8 <__addsf3>
 80a27dc:	4680      	mov	r8, r0

        // Adicionando um novo ponto
        pointsArray* aux;
        // Alocando espaço na memória
        if((aux = (pointsArray *) malloc(sizeof(pointsArray))) == NULL){
 80a27de:	2010      	movs	r0, #16
 80a27e0:	f000 fef8 	bl	80a35d4 <malloc>
 80a27e4:	2800      	cmp	r0, #0
 80a27e6:	d0c6      	beq.n	80a2776 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0xee>
            return false;
        }

        aux->previous = bSegmentEnd;
 80a27e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
        aux->point = point;
 80a27ea:	6045      	str	r5, [r0, #4]
        // Alocando espaço na memória
        if((aux = (pointsArray *) malloc(sizeof(pointsArray))) == NULL){
            return false;
        }

        aux->previous = bSegmentEnd;
 80a27ec:	6003      	str	r3, [r0, #0]
        aux->point = point;
        aux->pertinence = pertinence;
 80a27ee:	f8c0 8008 	str.w	r8, [r0, #8]
        aux->next = aSegmentEnd;
 80a27f2:	60c7      	str	r7, [r0, #12]

        bSegmentEnd->next = aux;
 80a27f4:	60d8      	str	r0, [r3, #12]
        aSegmentEnd->previous = aux;
 80a27f6:	6038      	str	r0, [r7, #0]

        float stopPoint = bSegmentBegin->point;
 80a27f8:	6877      	ldr	r7, [r6, #4]
        float stopPertinence = bSegmentBegin->pertinence;
 80a27fa:	68b6      	ldr	r6, [r6, #8]

        pointsArray* temp = aSegmentBegin;
        pointsArray* excl;

        do{
            float pointToCompare = temp->point;
 80a27fc:	f8d4 9004 	ldr.w	r9, [r4, #4]
            float pertinenceToCompare = temp->pertinence;

            excl = temp->previous;

            this->rmvPoint(temp);
 80a2800:	4621      	mov	r1, r4
 80a2802:	9805      	ldr	r0, [sp, #20]
        pointsArray* temp = aSegmentBegin;
        pointsArray* excl;

        do{
            float pointToCompare = temp->point;
            float pertinenceToCompare = temp->pertinence;
 80a2804:	f8d4 8008 	ldr.w	r8, [r4, #8]

            excl = temp->previous;
 80a2808:	6825      	ldr	r5, [r4, #0]

            this->rmvPoint(temp);
 80a280a:	f7ff ff35 	bl	80a2678 <_ZN16FuzzyComposition8rmvPointEP11pointsArray>

            temp = excl;

            if(stopPoint == pointToCompare && stopPertinence == pertinenceToCompare){
 80a280e:	4649      	mov	r1, r9
 80a2810:	4638      	mov	r0, r7
 80a2812:	f002 fc75 	bl	80a5100 <__aeabi_fcmpeq>
 80a2816:	b120      	cbz	r0, 80a2822 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x19a>
 80a2818:	4641      	mov	r1, r8
 80a281a:	4630      	mov	r0, r6
 80a281c:	f002 fc70 	bl	80a5100 <__aeabi_fcmpeq>
 80a2820:	b910      	cbnz	r0, 80a2828 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x1a0>
 80a2822:	462c      	mov	r4, r5
                break;
            }
        }while(temp != NULL);
 80a2824:	2d00      	cmp	r5, #0
 80a2826:	d1e9      	bne.n	80a27fc <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_+0x174>

        return true;
 80a2828:	2001      	movs	r0, #1
    }
}
 80a282a:	b007      	add	sp, #28
 80a282c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2830:	d2f1a9fc 	.word	0xd2f1a9fc
 80a2834:	3f50624d 	.word	0x3f50624d

080a2838 <_ZN16FuzzyComposition5buildEv>:
        aux = aux->previous;
    }
    return false;
}

bool FuzzyComposition::build(){
 80a2838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a283a:	4606      	mov	r6, r0
    pointsArray* aux;

    aux = this->points;
 80a283c:	6845      	ldr	r5, [r0, #4]
    while(aux != NULL){
 80a283e:	b1dd      	cbz	r5, 80a2878 <_ZN16FuzzyComposition5buildEv+0x40>
 80a2840:	462c      	mov	r4, r5
        pointsArray* temp = aux;
        while(temp->previous != NULL){
 80a2842:	6827      	ldr	r7, [r4, #0]
 80a2844:	b1b7      	cbz	r7, 80a2874 <_ZN16FuzzyComposition5buildEv+0x3c>
            if(temp->point < temp->previous->point){
 80a2846:	6879      	ldr	r1, [r7, #4]
 80a2848:	6860      	ldr	r0, [r4, #4]
 80a284a:	f002 fc63 	bl	80a5114 <__aeabi_fcmplt>
 80a284e:	b908      	cbnz	r0, 80a2854 <_ZN16FuzzyComposition5buildEv+0x1c>
 80a2850:	463c      	mov	r4, r7
 80a2852:	e7f6      	b.n	80a2842 <_ZN16FuzzyComposition5buildEv+0xa>
 80a2854:	4627      	mov	r7, r4
            temp = temp->previous;
        }
        pointsArray* zPoint;
        if(temp != NULL){
            zPoint = temp;
            while(temp->previous != NULL){
 80a2856:	683b      	ldr	r3, [r7, #0]
 80a2858:	b163      	cbz	r3, 80a2874 <_ZN16FuzzyComposition5buildEv+0x3c>
                bool result = false;
                if(temp->previous->previous != NULL){
 80a285a:	681a      	ldr	r2, [r3, #0]
 80a285c:	b142      	cbz	r2, 80a2870 <_ZN16FuzzyComposition5buildEv+0x38>
                    result = rebuild(zPoint, zPoint->next, temp->previous, temp->previous->previous);
 80a285e:	9200      	str	r2, [sp, #0]
 80a2860:	68e2      	ldr	r2, [r4, #12]
 80a2862:	4621      	mov	r1, r4
 80a2864:	4630      	mov	r0, r6
 80a2866:	f7ff ff0f 	bl	80a2688 <_ZN16FuzzyComposition7rebuildEP11pointsArrayS1_S1_S1_>
                }
                if(result == true){
 80a286a:	b108      	cbz	r0, 80a2870 <_ZN16FuzzyComposition5buildEv+0x38>
                    aux = this->points;
 80a286c:	6875      	ldr	r5, [r6, #4]
                    break;
 80a286e:	e001      	b.n	80a2874 <_ZN16FuzzyComposition5buildEv+0x3c>
                }
                temp = temp->previous;
 80a2870:	683f      	ldr	r7, [r7, #0]
            temp = temp->previous;
        }
        pointsArray* zPoint;
        if(temp != NULL){
            zPoint = temp;
            while(temp->previous != NULL){
 80a2872:	e7f0      	b.n	80a2856 <_ZN16FuzzyComposition5buildEv+0x1e>
                    break;
                }
                temp = temp->previous;
            }
        }
        aux = aux->next;
 80a2874:	68ed      	ldr	r5, [r5, #12]

bool FuzzyComposition::build(){
    pointsArray* aux;

    aux = this->points;
    while(aux != NULL){
 80a2876:	e7e2      	b.n	80a283e <_ZN16FuzzyComposition5buildEv+0x6>
            }
        }
        aux = aux->next;
    }
    return true;
}
 80a2878:	2001      	movs	r0, #1
 80a287a:	b003      	add	sp, #12
 80a287c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a287e <_ZN10FuzzyInputC1Ei>:

// CONSTRUTORES
FuzzyInput::FuzzyInput() : FuzzyIO(){
}

FuzzyInput::FuzzyInput(int index) : FuzzyIO(index){
 80a287e:	b510      	push	{r4, lr}
 80a2880:	4604      	mov	r4, r0
 80a2882:	f000 f80f 	bl	80a28a4 <_ZN7FuzzyIOC1Ei>
}
 80a2886:	4620      	mov	r0, r4
 80a2888:	bd10      	pop	{r4, pc}

080a288a <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv>:
// DESTRUTOR
FuzzyInput::~FuzzyInput(){
}

// MÉTODOS PÚBLICOS
bool FuzzyInput::calculateFuzzySetPertinences(){
 80a288a:	b538      	push	{r3, r4, r5, lr}
 80a288c:	4605      	mov	r5, r0
    fuzzySetArray *aux;
    aux = this->fuzzySets;
 80a288e:	6884      	ldr	r4, [r0, #8]

    while(aux != NULL){
 80a2890:	b134      	cbz	r4, 80a28a0 <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv+0x16>
        if (aux->fuzzySet != NULL){
 80a2892:	6820      	ldr	r0, [r4, #0]
 80a2894:	b110      	cbz	r0, 80a289c <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv+0x12>
            aux->fuzzySet->calculatePertinence(this->crispInput);
 80a2896:	6869      	ldr	r1, [r5, #4]
 80a2898:	f000 fa7e 	bl	80a2d98 <_ZN8FuzzySet19calculatePertinenceEf>
        }
        aux = aux->next;
 80a289c:	6864      	ldr	r4, [r4, #4]
// MÉTODOS PÚBLICOS
bool FuzzyInput::calculateFuzzySetPertinences(){
    fuzzySetArray *aux;
    aux = this->fuzzySets;

    while(aux != NULL){
 80a289e:	e7f7      	b.n	80a2890 <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv+0x6>
        }
        aux = aux->next;
    }
    
    return true;
 80a28a0:	2001      	movs	r0, #1
 80a28a2:	bd38      	pop	{r3, r4, r5, pc}

080a28a4 <_ZN7FuzzyIOC1Ei>:
}

FuzzyIO::FuzzyIO(int index){
    this->index = index;
    // Iniciando os ponteiros como nulo
    this->fuzzySets          = NULL;
 80a28a4:	2200      	movs	r2, #0
// CONSTRUTORES
FuzzyIO::FuzzyIO(){
}

FuzzyIO::FuzzyIO(int index){
    this->index = index;
 80a28a6:	6001      	str	r1, [r0, #0]
    // Iniciando os ponteiros como nulo
    this->fuzzySets          = NULL;
 80a28a8:	6082      	str	r2, [r0, #8]
    this->fuzzySetsCursor    = NULL;
 80a28aa:	60c2      	str	r2, [r0, #12]
}
 80a28ac:	4770      	bx	lr

080a28ae <_ZN7FuzzyIO8getIndexEv>:
}

// MÉTODOS PÚBLICOS
int FuzzyIO::getIndex(){
    return this->index;
}
 80a28ae:	6800      	ldr	r0, [r0, #0]
 80a28b0:	4770      	bx	lr

080a28b2 <_ZN7FuzzyIO13setCrispInputEf>:

void FuzzyIO::setCrispInput(float crispInput){
    this->crispInput = crispInput;
 80a28b2:	6041      	str	r1, [r0, #4]
 80a28b4:	4770      	bx	lr

080a28b6 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet>:

float FuzzyIO::getCrispInput(){
    return this->crispInput;
}

bool FuzzyIO::addFuzzySet(FuzzySet* fuzzySet){
 80a28b6:	b538      	push	{r3, r4, r5, lr}
 80a28b8:	4604      	mov	r4, r0
    fuzzySetArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetArray *) malloc(sizeof(fuzzySetArray))) == NULL){
 80a28ba:	2008      	movs	r0, #8

float FuzzyIO::getCrispInput(){
    return this->crispInput;
}

bool FuzzyIO::addFuzzySet(FuzzySet* fuzzySet){
 80a28bc:	460d      	mov	r5, r1
    fuzzySetArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetArray *) malloc(sizeof(fuzzySetArray))) == NULL){
 80a28be:	f000 fe89 	bl	80a35d4 <malloc>
 80a28c2:	b150      	cbz	r0, 80a28da <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet+0x24>
        return false;
    }
    aux->fuzzySet     = fuzzySet;
    aux->next         = NULL;
 80a28c4:	2300      	movs	r3, #0
    fuzzySetArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetArray *) malloc(sizeof(fuzzySetArray))) == NULL){
        return false;
    }
    aux->fuzzySet     = fuzzySet;
 80a28c6:	6005      	str	r5, [r0, #0]
    aux->next         = NULL;
 80a28c8:	6043      	str	r3, [r0, #4]

    if(this->fuzzySets == NULL){
 80a28ca:	68a3      	ldr	r3, [r4, #8]
 80a28cc:	b90b      	cbnz	r3, 80a28d2 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet+0x1c>
        this->fuzzySets = aux;
 80a28ce:	60a0      	str	r0, [r4, #8]
 80a28d0:	e001      	b.n	80a28d6 <_ZN7FuzzyIO11addFuzzySetEP8FuzzySet+0x20>
        this->fuzzySetsCursor = aux;
    }else{
        this->fuzzySetsCursor->next = aux;
 80a28d2:	68e3      	ldr	r3, [r4, #12]
 80a28d4:	6058      	str	r0, [r3, #4]
        this->fuzzySetsCursor = aux;
 80a28d6:	60e0      	str	r0, [r4, #12]
    }
    return true;
 80a28d8:	2001      	movs	r0, #1
}
 80a28da:	bd38      	pop	{r3, r4, r5, pc}

080a28dc <_ZN7FuzzyIO14resetFuzzySetsEv>:

void FuzzyIO::resetFuzzySets(){
 80a28dc:	b510      	push	{r4, lr}
    fuzzySetArray* fuzzySetsAux;
    fuzzySetsAux = this->fuzzySets;
 80a28de:	6884      	ldr	r4, [r0, #8]
    // Calculando as pertinências de totos os FuzzyInputs
    while(fuzzySetsAux != NULL){
 80a28e0:	b124      	cbz	r4, 80a28ec <_ZN7FuzzyIO14resetFuzzySetsEv+0x10>
        fuzzySetsAux->fuzzySet->reset();
 80a28e2:	6820      	ldr	r0, [r4, #0]
 80a28e4:	f000 faed 	bl	80a2ec2 <_ZN8FuzzySet5resetEv>
        fuzzySetsAux = fuzzySetsAux->next;
 80a28e8:	6864      	ldr	r4, [r4, #4]

void FuzzyIO::resetFuzzySets(){
    fuzzySetArray* fuzzySetsAux;
    fuzzySetsAux = this->fuzzySets;
    // Calculando as pertinências de totos os FuzzyInputs
    while(fuzzySetsAux != NULL){
 80a28ea:	e7f9      	b.n	80a28e0 <_ZN7FuzzyIO14resetFuzzySetsEv+0x4>
 80a28ec:	bd10      	pop	{r4, pc}

080a28ee <_ZN11FuzzyOutputC1Ei>:

// CONSTRUTORES
FuzzyOutput::FuzzyOutput() : FuzzyIO(){
}

FuzzyOutput::FuzzyOutput(int index) : FuzzyIO(index){
 80a28ee:	b510      	push	{r4, lr}
 80a28f0:	4604      	mov	r4, r0
 80a28f2:	f7ff ffd7 	bl	80a28a4 <_ZN7FuzzyIOC1Ei>
 80a28f6:	f104 0010 	add.w	r0, r4, #16
 80a28fa:	f7ff fda7 	bl	80a244c <_ZN16FuzzyCompositionC1Ev>
}
 80a28fe:	4620      	mov	r0, r4
 80a2900:	bd10      	pop	{r4, pc}

080a2902 <_ZN11FuzzyOutput14getCrispOutputEv>:

    return true;
}

float FuzzyOutput::getCrispOutput(){
    return this->fuzzyComposition.avaliate();
 80a2902:	3010      	adds	r0, #16
 80a2904:	f7ff bdd4 	b.w	80a24b0 <_ZN16FuzzyComposition8avaliateEv>

080a2908 <_ZN11FuzzyOutput5orderEv>:
}

// Um simples Bubble Sort
bool FuzzyOutput::order(){
 80a2908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fuzzySetArray *aux1;
    fuzzySetArray *aux2;

    aux1 = this->fuzzySets;
 80a290a:	6884      	ldr	r4, [r0, #8]
float FuzzyOutput::getCrispOutput(){
    return this->fuzzyComposition.avaliate();
}

// Um simples Bubble Sort
bool FuzzyOutput::order(){
 80a290c:	4606      	mov	r6, r0
    fuzzySetArray *aux1;
    fuzzySetArray *aux2;

    aux1 = this->fuzzySets;
 80a290e:	4625      	mov	r5, r4
    aux2 = this->fuzzySets;

    while(aux1 != NULL){
 80a2910:	b1cd      	cbz	r5, 80a2946 <_ZN11FuzzyOutput5orderEv+0x3e>
        while(aux2 != NULL){
 80a2912:	b1ac      	cbz	r4, 80a2940 <_ZN11FuzzyOutput5orderEv+0x38>
            if(aux2->next != NULL){
 80a2914:	6863      	ldr	r3, [r4, #4]
 80a2916:	b18b      	cbz	r3, 80a293c <_ZN11FuzzyOutput5orderEv+0x34>
                if(aux2->fuzzySet->getPointA() > aux2->next->fuzzySet->getPointA()){
 80a2918:	6820      	ldr	r0, [r4, #0]
 80a291a:	f000 fa35 	bl	80a2d88 <_ZN8FuzzySet9getPointAEv>
 80a291e:	6863      	ldr	r3, [r4, #4]
 80a2920:	4607      	mov	r7, r0
 80a2922:	6818      	ldr	r0, [r3, #0]
 80a2924:	f000 fa30 	bl	80a2d88 <_ZN8FuzzySet9getPointAEv>
 80a2928:	4601      	mov	r1, r0
 80a292a:	4638      	mov	r0, r7
 80a292c:	f002 fc10 	bl	80a5150 <__aeabi_fcmpgt>
 80a2930:	b120      	cbz	r0, 80a293c <_ZN11FuzzyOutput5orderEv+0x34>

// MÉTODOS PRIVADOS
bool FuzzyOutput::swap(fuzzySetArray* fuzzySetA, fuzzySetArray* fuzzySetB){
    FuzzySet* aux;
    
    aux = fuzzySetA->fuzzySet;
 80a2932:	e894 000c 	ldmia.w	r4, {r2, r3}
    fuzzySetA->fuzzySet = fuzzySetB->fuzzySet;
 80a2936:	6819      	ldr	r1, [r3, #0]
 80a2938:	6021      	str	r1, [r4, #0]
    fuzzySetB->fuzzySet = aux;
 80a293a:	601a      	str	r2, [r3, #0]
            if(aux2->next != NULL){
                if(aux2->fuzzySet->getPointA() > aux2->next->fuzzySet->getPointA()){
                    this->swap(aux2, aux2->next);
                }
            }
            aux2 = aux2->next;
 80a293c:	6864      	ldr	r4, [r4, #4]

    aux1 = this->fuzzySets;
    aux2 = this->fuzzySets;

    while(aux1 != NULL){
        while(aux2 != NULL){
 80a293e:	e7e8      	b.n	80a2912 <_ZN11FuzzyOutput5orderEv+0xa>
                    this->swap(aux2, aux2->next);
                }
            }
            aux2 = aux2->next;
        }
        aux2 = this->fuzzySets;
 80a2940:	68b4      	ldr	r4, [r6, #8]
        aux1 = aux1->next;
 80a2942:	686d      	ldr	r5, [r5, #4]
    fuzzySetArray *aux2;

    aux1 = this->fuzzySets;
    aux2 = this->fuzzySets;

    while(aux1 != NULL){
 80a2944:	e7e4      	b.n	80a2910 <_ZN11FuzzyOutput5orderEv+0x8>
        }
        aux2 = this->fuzzySets;
        aux1 = aux1->next;
    }
    return true;
}
 80a2946:	2001      	movs	r0, #1
 80a2948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a294a:	0000      	movs	r0, r0
 80a294c:	0000      	movs	r0, r0
	...

080a2950 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_>:
    fuzzySetB->fuzzySet = aux;

    return true;
}

bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
 80a2950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2954:	9810      	ldr	r0, [sp, #64]	; 0x40
    fuzzySetB->fuzzySet = aux;

    return true;
}

bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
 80a2956:	460f      	mov	r7, r1
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a2958:	990e      	ldr	r1, [sp, #56]	; 0x38
    fuzzySetB->fuzzySet = aux;

    return true;
}

bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
 80a295a:	4615      	mov	r5, r2
 80a295c:	461c      	mov	r4, r3
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a295e:	f002 f931 	bl	80a4bc4 <__aeabi_fsub>
 80a2962:	4639      	mov	r1, r7
 80a2964:	4682      	mov	sl, r0
 80a2966:	4620      	mov	r0, r4
 80a2968:	f002 f92c 	bl	80a4bc4 <__aeabi_fsub>
 80a296c:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a296e:	4680      	mov	r8, r0
 80a2970:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80a2972:	f002 f927 	bl	80a4bc4 <__aeabi_fsub>
 80a2976:	4629      	mov	r1, r5
 80a2978:	4683      	mov	fp, r0
 80a297a:	980c      	ldr	r0, [sp, #48]	; 0x30
 80a297c:	f002 f922 	bl	80a4bc4 <__aeabi_fsub>
 80a2980:	4641      	mov	r1, r8
 80a2982:	4606      	mov	r6, r0
 80a2984:	4650      	mov	r0, sl
 80a2986:	f002 fa27 	bl	80a4dd8 <__aeabi_fmul>
 80a298a:	4631      	mov	r1, r6
 80a298c:	4604      	mov	r4, r0
 80a298e:	4658      	mov	r0, fp
 80a2990:	f002 fa22 	bl	80a4dd8 <__aeabi_fmul>
 80a2994:	4601      	mov	r1, r0
 80a2996:	4620      	mov	r0, r4
 80a2998:	f002 f914 	bl	80a4bc4 <__aeabi_fsub>
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a299c:	990e      	ldr	r1, [sp, #56]	; 0x38

bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
 80a299e:	4604      	mov	r4, r0
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a29a0:	4628      	mov	r0, r5
 80a29a2:	f002 f90f 	bl	80a4bc4 <__aeabi_fsub>
 80a29a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a29a8:	4681      	mov	r9, r0
 80a29aa:	4638      	mov	r0, r7
 80a29ac:	f002 f90a 	bl	80a4bc4 <__aeabi_fsub>
 80a29b0:	4649      	mov	r1, r9
 80a29b2:	9001      	str	r0, [sp, #4]
 80a29b4:	4658      	mov	r0, fp
 80a29b6:	f002 fa0f 	bl	80a4dd8 <__aeabi_fmul>
 80a29ba:	9901      	ldr	r1, [sp, #4]
 80a29bc:	4683      	mov	fp, r0
 80a29be:	4650      	mov	r0, sl
 80a29c0:	f002 fa0a 	bl	80a4dd8 <__aeabi_fmul>
 80a29c4:	4601      	mov	r1, r0
 80a29c6:	4658      	mov	r0, fp
 80a29c8:	f002 f8fc 	bl	80a4bc4 <__aeabi_fsub>
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a29cc:	4649      	mov	r1, r9
bool FuzzyOutput::rebuild(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float* point, float* pertinence){
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
 80a29ce:	4682      	mov	sl, r0
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a29d0:	4640      	mov	r0, r8
 80a29d2:	f002 fa01 	bl	80a4dd8 <__aeabi_fmul>
 80a29d6:	9901      	ldr	r1, [sp, #4]
 80a29d8:	4681      	mov	r9, r0
 80a29da:	4630      	mov	r0, r6
 80a29dc:	f002 f9fc 	bl	80a4dd8 <__aeabi_fmul>
 80a29e0:	4601      	mov	r1, r0
 80a29e2:	4648      	mov	r0, r9
 80a29e4:	f002 f8ee 	bl	80a4bc4 <__aeabi_fsub>

    if(denom < 0.0){
 80a29e8:	2100      	movs	r1, #0
    float denom, numera, numerb;
    float mua, mub;

    denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
    numerb = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
 80a29ea:	4681      	mov	r9, r0

    if(denom < 0.0){
 80a29ec:	4620      	mov	r0, r4
 80a29ee:	f002 fb91 	bl	80a5114 <__aeabi_fcmplt>
 80a29f2:	b108      	cbz	r0, 80a29f8 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0xa8>
        denom *= -1.0;
 80a29f4:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    }
    if(numera < 0.0){
 80a29f8:	2100      	movs	r1, #0
 80a29fa:	4650      	mov	r0, sl
 80a29fc:	f002 fb8a 	bl	80a5114 <__aeabi_fcmplt>
 80a2a00:	b108      	cbz	r0, 80a2a06 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0xb6>
        numera *= -1.0;
 80a2a02:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
    }
    if(numerb < 0.0){
 80a2a06:	2100      	movs	r1, #0
 80a2a08:	4648      	mov	r0, r9
 80a2a0a:	f002 fb83 	bl	80a5114 <__aeabi_fcmplt>
 80a2a0e:	b108      	cbz	r0, 80a2a14 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0xc4>
        numerb *= -1.0;
 80a2a10:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
    }

    // Se os seguimentos forem paralelos, retornar falso
    if(denom < EPS){
 80a2a14:	4620      	mov	r0, r4
 80a2a16:	f001 fd93 	bl	80a4540 <__aeabi_f2d>
 80a2a1a:	a321      	add	r3, pc, #132	; (adr r3, 80a2aa0 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x150>)
 80a2a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2a20:	f002 f854 	bl	80a4acc <__aeabi_dcmplt>
 80a2a24:	9001      	str	r0, [sp, #4]
 80a2a26:	2800      	cmp	r0, #0
 80a2a28:	d133      	bne.n	80a2a92 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x142>
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
 80a2a2a:	4621      	mov	r1, r4
 80a2a2c:	4650      	mov	r0, sl
 80a2a2e:	f002 fa87 	bl	80a4f40 <__aeabi_fdiv>
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a2a32:	2100      	movs	r1, #0
    if(denom < EPS){
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
 80a2a34:	4682      	mov	sl, r0
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a2a36:	f002 fb6d 	bl	80a5114 <__aeabi_fcmplt>
 80a2a3a:	bb50      	cbnz	r0, 80a2a92 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x142>
 80a2a3c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2a40:	4650      	mov	r0, sl
 80a2a42:	f002 fb85 	bl	80a5150 <__aeabi_fcmpgt>
 80a2a46:	bb20      	cbnz	r0, 80a2a92 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x142>
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
    mub = numerb / denom;
 80a2a48:	4621      	mov	r1, r4
 80a2a4a:	9001      	str	r0, [sp, #4]
 80a2a4c:	4648      	mov	r0, r9
 80a2a4e:	f002 fa77 	bl	80a4f40 <__aeabi_fdiv>
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a2a52:	2100      	movs	r1, #0
        return false;
    }

    // Verificar se há interseção ao longo do seguimento
    mua = numera / denom;
    mub = numerb / denom;
 80a2a54:	4681      	mov	r9, r0
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
 80a2a56:	f002 fb5d 	bl	80a5114 <__aeabi_fcmplt>
 80a2a5a:	4604      	mov	r4, r0
 80a2a5c:	b9c8      	cbnz	r0, 80a2a92 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x142>
 80a2a5e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2a62:	4648      	mov	r0, r9
 80a2a64:	f002 fb74 	bl	80a5150 <__aeabi_fcmpgt>
 80a2a68:	b9a8      	cbnz	r0, 80a2a96 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x146>
        return false;
    }else{
        // Calculando o ponto e a pertinencia do novo elemento
        *point      = x1 + mua * (x2 - x1);
 80a2a6a:	4651      	mov	r1, sl
 80a2a6c:	4640      	mov	r0, r8
 80a2a6e:	f002 f9b3 	bl	80a4dd8 <__aeabi_fmul>
 80a2a72:	4639      	mov	r1, r7
 80a2a74:	f002 f8a8 	bl	80a4bc8 <__addsf3>
 80a2a78:	9b11      	ldr	r3, [sp, #68]	; 0x44
        *pertinence = y1 + mua * (y2 - y1);
 80a2a7a:	4651      	mov	r1, sl
    mub = numerb / denom;
    if(mua < 0.0 || mua > 1.0 || mub < 0.0 || mub > 1.0){
        return false;
    }else{
        // Calculando o ponto e a pertinencia do novo elemento
        *point      = x1 + mua * (x2 - x1);
 80a2a7c:	6018      	str	r0, [r3, #0]
        *pertinence = y1 + mua * (y2 - y1);
 80a2a7e:	4630      	mov	r0, r6
 80a2a80:	f002 f9aa 	bl	80a4dd8 <__aeabi_fmul>
 80a2a84:	4629      	mov	r1, r5
 80a2a86:	f002 f89f 	bl	80a4bc8 <__addsf3>
 80a2a8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a2a8c:	6018      	str	r0, [r3, #0]

        return true;
 80a2a8e:	2001      	movs	r0, #1
 80a2a90:	e002      	b.n	80a2a98 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x148>
        numerb *= -1.0;
    }

    // Se os seguimentos forem paralelos, retornar falso
    if(denom < EPS){
        return false;
 80a2a92:	2000      	movs	r0, #0
 80a2a94:	e000      	b.n	80a2a98 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_+0x148>
 80a2a96:	4620      	mov	r0, r4
        *point      = x1 + mua * (x2 - x1);
        *pertinence = y1 + mua * (y2 - y1);

        return true;
    }
 80a2a98:	b003      	add	sp, #12
 80a2a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2a9e:	bf00      	nop
 80a2aa0:	d2f1a9fc 	.word	0xd2f1a9fc
 80a2aa4:	3f50624d 	.word	0x3f50624d

080a2aa8 <_ZN11FuzzyOutput8truncateEv>:
FuzzyOutput::~FuzzyOutput(){
    this->fuzzyComposition.empty();
}

// MÉTODOS PÚBLICOS
bool FuzzyOutput::truncate(){
 80a2aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2aac:	4606      	mov	r6, r0
    // esvaziando a composição
    this->fuzzyComposition.empty();
 80a2aae:	f100 0510 	add.w	r5, r0, #16
FuzzyOutput::~FuzzyOutput(){
    this->fuzzyComposition.empty();
}

// MÉTODOS PÚBLICOS
bool FuzzyOutput::truncate(){
 80a2ab2:	b091      	sub	sp, #68	; 0x44
    // esvaziando a composição
    this->fuzzyComposition.empty();
 80a2ab4:	4628      	mov	r0, r5
 80a2ab6:	f7ff fdd5 	bl	80a2664 <_ZN16FuzzyComposition5emptyEv>

    fuzzySetArray *aux;
    aux = this->fuzzySets;
 80a2aba:	68b4      	ldr	r4, [r6, #8]
                        this->fuzzyComposition.addPoint(newPointC, newPertinenceC);
                    }
                }
            }else if(aux->fuzzySet->getPointB() != aux->fuzzySet->getPointC()){
                // se trapezio
                if(aux->fuzzySet->getPertinence() == 1.0){
 80a2abc:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
                    }
                }else{
                    float newPointB         = aux->fuzzySet->getPointB();
                    float newPertinenceB    = aux->fuzzySet->getPertinence();

                    rebuild(aux->fuzzySet->getPointA(), 0.0, aux->fuzzySet->getPointB(), 1.0, aux->fuzzySet->getPointA(), aux->fuzzySet->getPertinence(), aux->fuzzySet->getPointD(), aux->fuzzySet->getPertinence(), &newPointB, &newPertinenceB);
 80a2ac0:	af0d      	add	r7, sp, #52	; 0x34
    // esvaziando a composição
    this->fuzzyComposition.empty();

    fuzzySetArray *aux;
    aux = this->fuzzySets;
    while(aux != NULL){
 80a2ac2:	2c00      	cmp	r4, #0
 80a2ac4:	f000 8150 	beq.w	80a2d68 <_ZN11FuzzyOutput8truncateEv+0x2c0>
        if(aux->fuzzySet->getPertinence() > 0.0){
 80a2ac8:	6820      	ldr	r0, [r4, #0]
 80a2aca:	f000 f9f8 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a2ace:	2100      	movs	r1, #0
 80a2ad0:	f002 fb3e 	bl	80a5150 <__aeabi_fcmpgt>
 80a2ad4:	2800      	cmp	r0, #0
 80a2ad6:	f000 80d8 	beq.w	80a2c8a <_ZN11FuzzyOutput8truncateEv+0x1e2>
            // Se não for trapezio iniciado com pertinencia 1 (sem o triangulo esquerdo)
            if(aux->fuzzySet->getPointA() != aux->fuzzySet->getPointB()){
 80a2ada:	6820      	ldr	r0, [r4, #0]
 80a2adc:	f000 f954 	bl	80a2d88 <_ZN8FuzzySet9getPointAEv>
 80a2ae0:	4680      	mov	r8, r0
 80a2ae2:	6820      	ldr	r0, [r4, #0]
 80a2ae4:	f000 f952 	bl	80a2d8c <_ZN8FuzzySet9getPointBEv>
 80a2ae8:	4601      	mov	r1, r0
 80a2aea:	4640      	mov	r0, r8
 80a2aec:	f002 fb08 	bl	80a5100 <__aeabi_fcmpeq>
 80a2af0:	b980      	cbnz	r0, 80a2b14 <_ZN11FuzzyOutput8truncateEv+0x6c>
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointA(), 0.0) == false){
 80a2af2:	6820      	ldr	r0, [r4, #0]
 80a2af4:	f000 f948 	bl	80a2d88 <_ZN8FuzzySet9getPointAEv>
 80a2af8:	2200      	movs	r2, #0
 80a2afa:	4601      	mov	r1, r0
 80a2afc:	4628      	mov	r0, r5
 80a2afe:	f7ff fcc2 	bl	80a2486 <_ZN16FuzzyComposition10checkPointEff>
 80a2b02:	b938      	cbnz	r0, 80a2b14 <_ZN11FuzzyOutput8truncateEv+0x6c>
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointA(), 0.0);
 80a2b04:	6820      	ldr	r0, [r4, #0]
 80a2b06:	f000 f93f 	bl	80a2d88 <_ZN8FuzzySet9getPointAEv>
 80a2b0a:	2200      	movs	r2, #0
 80a2b0c:	4601      	mov	r1, r0
 80a2b0e:	4628      	mov	r0, r5
 80a2b10:	f7ff fca0 	bl	80a2454 <_ZN16FuzzyComposition8addPointEff>
                }
            }

            if(aux->fuzzySet->getPointB() == aux->fuzzySet->getPointC() && aux->fuzzySet->getPointA() != aux->fuzzySet->getPointD()){
 80a2b14:	6820      	ldr	r0, [r4, #0]
 80a2b16:	f000 f939 	bl	80a2d8c <_ZN8FuzzySet9getPointBEv>
 80a2b1a:	4680      	mov	r8, r0
 80a2b1c:	6820      	ldr	r0, [r4, #0]
 80a2b1e:	f000 f937 	bl	80a2d90 <_ZN8FuzzySet9getPointCEv>
 80a2b22:	4601      	mov	r1, r0
 80a2b24:	4640      	mov	r0, r8
 80a2b26:	f002 faeb 	bl	80a5100 <__aeabi_fcmpeq>
 80a2b2a:	b168      	cbz	r0, 80a2b48 <_ZN11FuzzyOutput8truncateEv+0xa0>
 80a2b2c:	6820      	ldr	r0, [r4, #0]
 80a2b2e:	f000 f92b 	bl	80a2d88 <_ZN8FuzzySet9getPointAEv>
 80a2b32:	4680      	mov	r8, r0
 80a2b34:	6820      	ldr	r0, [r4, #0]
 80a2b36:	f000 f92d 	bl	80a2d94 <_ZN8FuzzySet9getPointDEv>
 80a2b3a:	4601      	mov	r1, r0
 80a2b3c:	4640      	mov	r0, r8
 80a2b3e:	f002 fadf 	bl	80a5100 <__aeabi_fcmpeq>
 80a2b42:	2800      	cmp	r0, #0
 80a2b44:	f000 80a3 	beq.w	80a2c8e <_ZN11FuzzyOutput8truncateEv+0x1e6>

                    if(this->fuzzyComposition.checkPoint(newPointC, newPertinenceC) == false){
                        this->fuzzyComposition.addPoint(newPointC, newPertinenceC);
                    }
                }
            }else if(aux->fuzzySet->getPointB() != aux->fuzzySet->getPointC()){
 80a2b48:	6820      	ldr	r0, [r4, #0]
 80a2b4a:	f000 f91f 	bl	80a2d8c <_ZN8FuzzySet9getPointBEv>
 80a2b4e:	4680      	mov	r8, r0
 80a2b50:	6820      	ldr	r0, [r4, #0]
 80a2b52:	f000 f91d 	bl	80a2d90 <_ZN8FuzzySet9getPointCEv>
 80a2b56:	4601      	mov	r1, r0
 80a2b58:	4640      	mov	r0, r8
 80a2b5a:	f002 fad1 	bl	80a5100 <__aeabi_fcmpeq>
 80a2b5e:	2800      	cmp	r0, #0
 80a2b60:	f040 809f 	bne.w	80a2ca2 <_ZN11FuzzyOutput8truncateEv+0x1fa>
                // se trapezio
                if(aux->fuzzySet->getPertinence() == 1.0){
 80a2b64:	6820      	ldr	r0, [r4, #0]
 80a2b66:	f000 f9aa 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a2b6a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2b6e:	f002 fac7 	bl	80a5100 <__aeabi_fcmpeq>
 80a2b72:	2800      	cmp	r0, #0
 80a2b74:	f040 80c4 	bne.w	80a2d00 <_ZN11FuzzyOutput8truncateEv+0x258>

                    if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointC(), aux->fuzzySet->getPertinence()) == false){
                        this->fuzzyComposition.addPoint(aux->fuzzySet->getPointC(), aux->fuzzySet->getPertinence());
                    }
                }else{
                    float newPointB         = aux->fuzzySet->getPointB();
 80a2b78:	6820      	ldr	r0, [r4, #0]
 80a2b7a:	f000 f907 	bl	80a2d8c <_ZN8FuzzySet9getPointBEv>
 80a2b7e:	900c      	str	r0, [sp, #48]	; 0x30
                    float newPertinenceB    = aux->fuzzySet->getPertinence();
 80a2b80:	6820      	ldr	r0, [r4, #0]
 80a2b82:	f000 f99c 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a2b86:	900d      	str	r0, [sp, #52]	; 0x34

                    rebuild(aux->fuzzySet->getPointA(), 0.0, aux->fuzzySet->getPointB(), 1.0, aux->fuzzySet->getPointA(), aux->fuzzySet->getPertinence(), aux->fuzzySet->getPointD(), aux->fuzzySet->getPertinence(), &newPointB, &newPertinenceB);
 80a2b88:	6820      	ldr	r0, [r4, #0]
 80a2b8a:	f000 f8fd 	bl	80a2d88 <_ZN8FuzzySet9getPointAEv>
 80a2b8e:	4680      	mov	r8, r0
 80a2b90:	6820      	ldr	r0, [r4, #0]
 80a2b92:	f000 f8fb 	bl	80a2d8c <_ZN8FuzzySet9getPointBEv>
 80a2b96:	4682      	mov	sl, r0
 80a2b98:	6820      	ldr	r0, [r4, #0]
 80a2b9a:	f000 f8f5 	bl	80a2d88 <_ZN8FuzzySet9getPointAEv>
 80a2b9e:	4683      	mov	fp, r0
 80a2ba0:	6820      	ldr	r0, [r4, #0]
 80a2ba2:	f000 f98c 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a2ba6:	900a      	str	r0, [sp, #40]	; 0x28
 80a2ba8:	6820      	ldr	r0, [r4, #0]
 80a2baa:	f000 f8f3 	bl	80a2d94 <_ZN8FuzzySet9getPointDEv>
 80a2bae:	9009      	str	r0, [sp, #36]	; 0x24
 80a2bb0:	6820      	ldr	r0, [r4, #0]
 80a2bb2:	f000 f984 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a2bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a2bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a2bba:	a90c      	add	r1, sp, #48	; 0x30
 80a2bbc:	9105      	str	r1, [sp, #20]
 80a2bbe:	9004      	str	r0, [sp, #16]
 80a2bc0:	9203      	str	r2, [sp, #12]
 80a2bc2:	9302      	str	r3, [sp, #8]
 80a2bc4:	2200      	movs	r2, #0
 80a2bc6:	4641      	mov	r1, r8
 80a2bc8:	9706      	str	r7, [sp, #24]
 80a2bca:	f8cd b004 	str.w	fp, [sp, #4]
 80a2bce:	f8cd 9000 	str.w	r9, [sp]
 80a2bd2:	4653      	mov	r3, sl
 80a2bd4:	4630      	mov	r0, r6
 80a2bd6:	f7ff febb 	bl	80a2950 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_>

                    if(this->fuzzyComposition.checkPoint(newPointB, newPertinenceB) == false){
 80a2bda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a2bdc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a2bde:	4628      	mov	r0, r5
 80a2be0:	f7ff fc51 	bl	80a2486 <_ZN16FuzzyComposition10checkPointEff>
 80a2be4:	b920      	cbnz	r0, 80a2bf0 <_ZN11FuzzyOutput8truncateEv+0x148>
                        this->fuzzyComposition.addPoint(newPointB, newPertinenceB);
 80a2be6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a2be8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a2bea:	4628      	mov	r0, r5
 80a2bec:	f7ff fc32 	bl	80a2454 <_ZN16FuzzyComposition8addPointEff>
                    }

                    float newPointC         = aux->fuzzySet->getPointB();
 80a2bf0:	6820      	ldr	r0, [r4, #0]
 80a2bf2:	f000 f8cb 	bl	80a2d8c <_ZN8FuzzySet9getPointBEv>
 80a2bf6:	900e      	str	r0, [sp, #56]	; 0x38
                    float newPertinenceC    = aux->fuzzySet->getPertinence();
 80a2bf8:	6820      	ldr	r0, [r4, #0]
 80a2bfa:	f000 f960 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a2bfe:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 80a2c02:	f848 0d04 	str.w	r0, [r8, #-4]!

                    rebuild(aux->fuzzySet->getPointC(), 1.0, aux->fuzzySet->getPointD(), 0.0, aux->fuzzySet->getPointA(), aux->fuzzySet->getPertinence(), aux->fuzzySet->getPointD(), aux->fuzzySet->getPertinence(), &newPointC, &newPertinenceC);
 80a2c06:	6820      	ldr	r0, [r4, #0]
 80a2c08:	f000 f8c2 	bl	80a2d90 <_ZN8FuzzySet9getPointCEv>
 80a2c0c:	4682      	mov	sl, r0
 80a2c0e:	6820      	ldr	r0, [r4, #0]
 80a2c10:	f000 f8c0 	bl	80a2d94 <_ZN8FuzzySet9getPointDEv>
 80a2c14:	4683      	mov	fp, r0
 80a2c16:	6820      	ldr	r0, [r4, #0]
 80a2c18:	f000 f8b6 	bl	80a2d88 <_ZN8FuzzySet9getPointAEv>
 80a2c1c:	9009      	str	r0, [sp, #36]	; 0x24
 80a2c1e:	6820      	ldr	r0, [r4, #0]
 80a2c20:	f000 f94d 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a2c24:	900b      	str	r0, [sp, #44]	; 0x2c
 80a2c26:	6820      	ldr	r0, [r4, #0]
 80a2c28:	f000 f8b4 	bl	80a2d94 <_ZN8FuzzySet9getPointDEv>
 80a2c2c:	900a      	str	r0, [sp, #40]	; 0x28
 80a2c2e:	6820      	ldr	r0, [r4, #0]
 80a2c30:	f000 f945 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a2c34:	ab0e      	add	r3, sp, #56	; 0x38
 80a2c36:	9305      	str	r3, [sp, #20]
 80a2c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a2c3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a2c3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a2c3e:	9301      	str	r3, [sp, #4]
 80a2c40:	2300      	movs	r3, #0
 80a2c42:	9004      	str	r0, [sp, #16]
 80a2c44:	9103      	str	r1, [sp, #12]
 80a2c46:	9202      	str	r2, [sp, #8]
 80a2c48:	9300      	str	r3, [sp, #0]
 80a2c4a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80a2c4e:	4651      	mov	r1, sl
 80a2c50:	f8cd 8018 	str.w	r8, [sp, #24]
 80a2c54:	465b      	mov	r3, fp
 80a2c56:	4630      	mov	r0, r6
 80a2c58:	f7ff fe7a 	bl	80a2950 <_ZN11FuzzyOutput7rebuildEffffffffPfS0_>

                    if(this->fuzzyComposition.checkPoint(newPointC, newPertinenceC) == false){
 80a2c5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a2c5e:	990e      	ldr	r1, [sp, #56]	; 0x38
 80a2c60:	4628      	mov	r0, r5
 80a2c62:	f7ff fc10 	bl	80a2486 <_ZN16FuzzyComposition10checkPointEff>
 80a2c66:	b920      	cbnz	r0, 80a2c72 <_ZN11FuzzyOutput8truncateEv+0x1ca>
                        this->fuzzyComposition.addPoint(newPointC, newPertinenceC);
 80a2c68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a2c6a:	990e      	ldr	r1, [sp, #56]	; 0x38
                    }
                }
            }else{
                //senao singleton
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence()) == false){
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence());
 80a2c6c:	4628      	mov	r0, r5
 80a2c6e:	f7ff fbf1 	bl	80a2454 <_ZN16FuzzyComposition8addPointEff>
                }
            }
            
            //Se não for trapezio iniciado com pertinencia 1 (sem o triangulo direito)
            if(aux->fuzzySet->getPointC() != aux->fuzzySet->getPointD()){
 80a2c72:	6820      	ldr	r0, [r4, #0]
 80a2c74:	f000 f88c 	bl	80a2d90 <_ZN8FuzzySet9getPointCEv>
 80a2c78:	4680      	mov	r8, r0
 80a2c7a:	6820      	ldr	r0, [r4, #0]
 80a2c7c:	f000 f88a 	bl	80a2d94 <_ZN8FuzzySet9getPointDEv>
 80a2c80:	4601      	mov	r1, r0
 80a2c82:	4640      	mov	r0, r8
 80a2c84:	f002 fa3c 	bl	80a5100 <__aeabi_fcmpeq>
 80a2c88:	b318      	cbz	r0, 80a2cd2 <_ZN11FuzzyOutput8truncateEv+0x22a>
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointD(), 0.0) == false || aux->fuzzySet->getPointD() == aux->fuzzySet->getPointA()){
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointD(), 0.0);
                }
            }
        }
        aux = aux->next;
 80a2c8a:	6864      	ldr	r4, [r4, #4]
    // esvaziando a composição
    this->fuzzyComposition.empty();

    fuzzySetArray *aux;
    aux = this->fuzzySets;
    while(aux != NULL){
 80a2c8c:	e719      	b.n	80a2ac2 <_ZN11FuzzyOutput8truncateEv+0x1a>
                }
            }

            if(aux->fuzzySet->getPointB() == aux->fuzzySet->getPointC() && aux->fuzzySet->getPointA() != aux->fuzzySet->getPointD()){
                // se trinagulo
                if(aux->fuzzySet->getPertinence() == 1.0){
 80a2c8e:	6820      	ldr	r0, [r4, #0]
 80a2c90:	f000 f915 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a2c94:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2c98:	f002 fa32 	bl	80a5100 <__aeabi_fcmpeq>
 80a2c9c:	2800      	cmp	r0, #0
 80a2c9e:	f43f af6b 	beq.w	80a2b78 <_ZN11FuzzyOutput8truncateEv+0xd0>
                        this->fuzzyComposition.addPoint(newPointC, newPertinenceC);
                    }
                }
            }else{
                //senao singleton
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence()) == false){
 80a2ca2:	6820      	ldr	r0, [r4, #0]
 80a2ca4:	f000 f872 	bl	80a2d8c <_ZN8FuzzySet9getPointBEv>
 80a2ca8:	4680      	mov	r8, r0
 80a2caa:	6820      	ldr	r0, [r4, #0]
 80a2cac:	f000 f907 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a2cb0:	4641      	mov	r1, r8
 80a2cb2:	4602      	mov	r2, r0
 80a2cb4:	4628      	mov	r0, r5
 80a2cb6:	f7ff fbe6 	bl	80a2486 <_ZN16FuzzyComposition10checkPointEff>
 80a2cba:	2800      	cmp	r0, #0
 80a2cbc:	d1d9      	bne.n	80a2c72 <_ZN11FuzzyOutput8truncateEv+0x1ca>
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence());
 80a2cbe:	6820      	ldr	r0, [r4, #0]
 80a2cc0:	f000 f864 	bl	80a2d8c <_ZN8FuzzySet9getPointBEv>
 80a2cc4:	4680      	mov	r8, r0
 80a2cc6:	6820      	ldr	r0, [r4, #0]
 80a2cc8:	f000 f8f9 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a2ccc:	4641      	mov	r1, r8
 80a2cce:	4602      	mov	r2, r0
 80a2cd0:	e7cc      	b.n	80a2c6c <_ZN11FuzzyOutput8truncateEv+0x1c4>
                }
            }
            
            //Se não for trapezio iniciado com pertinencia 1 (sem o triangulo direito)
            if(aux->fuzzySet->getPointC() != aux->fuzzySet->getPointD()){
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointD(), 0.0) == false || aux->fuzzySet->getPointD() == aux->fuzzySet->getPointA()){
 80a2cd2:	6820      	ldr	r0, [r4, #0]
 80a2cd4:	f000 f85e 	bl	80a2d94 <_ZN8FuzzySet9getPointDEv>
 80a2cd8:	2200      	movs	r2, #0
 80a2cda:	4601      	mov	r1, r0
 80a2cdc:	4628      	mov	r0, r5
 80a2cde:	f7ff fbd2 	bl	80a2486 <_ZN16FuzzyComposition10checkPointEff>
 80a2ce2:	2800      	cmp	r0, #0
 80a2ce4:	d037      	beq.n	80a2d56 <_ZN11FuzzyOutput8truncateEv+0x2ae>
 80a2ce6:	6820      	ldr	r0, [r4, #0]
 80a2ce8:	f000 f854 	bl	80a2d94 <_ZN8FuzzySet9getPointDEv>
 80a2cec:	4680      	mov	r8, r0
 80a2cee:	6820      	ldr	r0, [r4, #0]
 80a2cf0:	f000 f84a 	bl	80a2d88 <_ZN8FuzzySet9getPointAEv>
 80a2cf4:	4601      	mov	r1, r0
 80a2cf6:	4640      	mov	r0, r8
 80a2cf8:	f002 fa02 	bl	80a5100 <__aeabi_fcmpeq>
 80a2cfc:	bb58      	cbnz	r0, 80a2d56 <_ZN11FuzzyOutput8truncateEv+0x2ae>
 80a2cfe:	e7c4      	b.n	80a2c8a <_ZN11FuzzyOutput8truncateEv+0x1e2>
                    }
                }
            }else if(aux->fuzzySet->getPointB() != aux->fuzzySet->getPointC()){
                // se trapezio
                if(aux->fuzzySet->getPertinence() == 1.0){
                    if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence()) == false){
 80a2d00:	6820      	ldr	r0, [r4, #0]
 80a2d02:	f000 f843 	bl	80a2d8c <_ZN8FuzzySet9getPointBEv>
 80a2d06:	4680      	mov	r8, r0
 80a2d08:	6820      	ldr	r0, [r4, #0]
 80a2d0a:	f000 f8d8 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a2d0e:	4641      	mov	r1, r8
 80a2d10:	4602      	mov	r2, r0
 80a2d12:	4628      	mov	r0, r5
 80a2d14:	f7ff fbb7 	bl	80a2486 <_ZN16FuzzyComposition10checkPointEff>
 80a2d18:	b958      	cbnz	r0, 80a2d32 <_ZN11FuzzyOutput8truncateEv+0x28a>
                        this->fuzzyComposition.addPoint(aux->fuzzySet->getPointB(), aux->fuzzySet->getPertinence());
 80a2d1a:	6820      	ldr	r0, [r4, #0]
 80a2d1c:	f000 f836 	bl	80a2d8c <_ZN8FuzzySet9getPointBEv>
 80a2d20:	4680      	mov	r8, r0
 80a2d22:	6820      	ldr	r0, [r4, #0]
 80a2d24:	f000 f8cb 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a2d28:	4641      	mov	r1, r8
 80a2d2a:	4602      	mov	r2, r0
 80a2d2c:	4628      	mov	r0, r5
 80a2d2e:	f7ff fb91 	bl	80a2454 <_ZN16FuzzyComposition8addPointEff>
                    }

                    if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointC(), aux->fuzzySet->getPertinence()) == false){
 80a2d32:	6820      	ldr	r0, [r4, #0]
 80a2d34:	f000 f82c 	bl	80a2d90 <_ZN8FuzzySet9getPointCEv>
 80a2d38:	4680      	mov	r8, r0
 80a2d3a:	6820      	ldr	r0, [r4, #0]
 80a2d3c:	f000 f8bf 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a2d40:	4641      	mov	r1, r8
 80a2d42:	4602      	mov	r2, r0
 80a2d44:	4628      	mov	r0, r5
 80a2d46:	f7ff fb9e 	bl	80a2486 <_ZN16FuzzyComposition10checkPointEff>
 80a2d4a:	2800      	cmp	r0, #0
 80a2d4c:	d191      	bne.n	80a2c72 <_ZN11FuzzyOutput8truncateEv+0x1ca>
                        this->fuzzyComposition.addPoint(aux->fuzzySet->getPointC(), aux->fuzzySet->getPertinence());
 80a2d4e:	6820      	ldr	r0, [r4, #0]
 80a2d50:	f000 f81e 	bl	80a2d90 <_ZN8FuzzySet9getPointCEv>
 80a2d54:	e7b6      	b.n	80a2cc4 <_ZN11FuzzyOutput8truncateEv+0x21c>
            }
            
            //Se não for trapezio iniciado com pertinencia 1 (sem o triangulo direito)
            if(aux->fuzzySet->getPointC() != aux->fuzzySet->getPointD()){
                if(this->fuzzyComposition.checkPoint(aux->fuzzySet->getPointD(), 0.0) == false || aux->fuzzySet->getPointD() == aux->fuzzySet->getPointA()){
                    this->fuzzyComposition.addPoint(aux->fuzzySet->getPointD(), 0.0);
 80a2d56:	6820      	ldr	r0, [r4, #0]
 80a2d58:	f000 f81c 	bl	80a2d94 <_ZN8FuzzySet9getPointDEv>
 80a2d5c:	2200      	movs	r2, #0
 80a2d5e:	4601      	mov	r1, r0
 80a2d60:	4628      	mov	r0, r5
 80a2d62:	f7ff fb77 	bl	80a2454 <_ZN16FuzzyComposition8addPointEff>
 80a2d66:	e790      	b.n	80a2c8a <_ZN11FuzzyOutput8truncateEv+0x1e2>
            }
        }
        aux = aux->next;
    }

    this->fuzzyComposition.build();
 80a2d68:	4628      	mov	r0, r5
 80a2d6a:	f7ff fd65 	bl	80a2838 <_ZN16FuzzyComposition5buildEv>

    return true;
}
 80a2d6e:	2001      	movs	r0, #1
 80a2d70:	b011      	add	sp, #68	; 0x44
 80a2d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2d76 <_ZN8FuzzySetC1Effff>:
#include "FuzzySet.h"

FuzzySet::FuzzySet(){
}

FuzzySet::FuzzySet(float a, float b, float c, float d){
 80a2d76:	b510      	push	{r4, lr}
    this->a = a;
    this->b = b;
    this->c = c;
 80a2d78:	6083      	str	r3, [r0, #8]
    this->d = d;
 80a2d7a:	9b02      	ldr	r3, [sp, #8]

FuzzySet::FuzzySet(){
}

FuzzySet::FuzzySet(float a, float b, float c, float d){
    this->a = a;
 80a2d7c:	6001      	str	r1, [r0, #0]
    this->b = b;
    this->c = c;
    this->d = d;
 80a2d7e:	60c3      	str	r3, [r0, #12]
    this->pertinence = 0.0;
 80a2d80:	2300      	movs	r3, #0
FuzzySet::FuzzySet(){
}

FuzzySet::FuzzySet(float a, float b, float c, float d){
    this->a = a;
    this->b = b;
 80a2d82:	6042      	str	r2, [r0, #4]
    this->c = c;
    this->d = d;
    this->pertinence = 0.0;
 80a2d84:	6103      	str	r3, [r0, #16]
}
 80a2d86:	bd10      	pop	{r4, pc}

080a2d88 <_ZN8FuzzySet9getPointAEv>:

float FuzzySet::getPointA(){
    return this->a;
}
 80a2d88:	6800      	ldr	r0, [r0, #0]
 80a2d8a:	4770      	bx	lr

080a2d8c <_ZN8FuzzySet9getPointBEv>:

float FuzzySet::getPointB(){
    return this->b;
}
 80a2d8c:	6840      	ldr	r0, [r0, #4]
 80a2d8e:	4770      	bx	lr

080a2d90 <_ZN8FuzzySet9getPointCEv>:

float FuzzySet::getPointC(){
    return this->c;
}
 80a2d90:	6880      	ldr	r0, [r0, #8]
 80a2d92:	4770      	bx	lr

080a2d94 <_ZN8FuzzySet9getPointDEv>:

float FuzzySet::getPointD(){
    return this->d;
}
 80a2d94:	68c0      	ldr	r0, [r0, #12]
 80a2d96:	4770      	bx	lr

080a2d98 <_ZN8FuzzySet19calculatePertinenceEf>:

bool FuzzySet::calculatePertinence(float crispValue){
 80a2d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    float slope;

    if (crispValue < this->a){
 80a2d9c:	6807      	ldr	r7, [r0, #0]

float FuzzySet::getPointD(){
    return this->d;
}

bool FuzzySet::calculatePertinence(float crispValue){
 80a2d9e:	4604      	mov	r4, r0
    float slope;

    if (crispValue < this->a){
 80a2da0:	4638      	mov	r0, r7

float FuzzySet::getPointD(){
    return this->d;
}

bool FuzzySet::calculatePertinence(float crispValue){
 80a2da2:	460d      	mov	r5, r1
    float slope;

    if (crispValue < this->a){
 80a2da4:	f002 f9d4 	bl	80a5150 <__aeabi_fcmpgt>
 80a2da8:	6866      	ldr	r6, [r4, #4]
 80a2daa:	b198      	cbz	r0, 80a2dd4 <_ZN8FuzzySet19calculatePertinenceEf+0x3c>
        if (this->a == this->b && this->b != this->c && this->c != this->d){
 80a2dac:	4631      	mov	r1, r6
 80a2dae:	4638      	mov	r0, r7
 80a2db0:	f002 f9a6 	bl	80a5100 <__aeabi_fcmpeq>
 80a2db4:	2800      	cmp	r0, #0
 80a2db6:	d02e      	beq.n	80a2e16 <_ZN8FuzzySet19calculatePertinenceEf+0x7e>
 80a2db8:	68a5      	ldr	r5, [r4, #8]
 80a2dba:	4630      	mov	r0, r6
 80a2dbc:	4629      	mov	r1, r5
 80a2dbe:	f002 f99f 	bl	80a5100 <__aeabi_fcmpeq>
 80a2dc2:	bb40      	cbnz	r0, 80a2e16 <_ZN8FuzzySet19calculatePertinenceEf+0x7e>
 80a2dc4:	4628      	mov	r0, r5
 80a2dc6:	68e1      	ldr	r1, [r4, #12]
 80a2dc8:	f002 f99a 	bl	80a5100 <__aeabi_fcmpeq>
 80a2dcc:	bb18      	cbnz	r0, 80a2e16 <_ZN8FuzzySet19calculatePertinenceEf+0x7e>
            this->pertinence = 1.0;
 80a2dce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80a2dd2:	e021      	b.n	80a2e18 <_ZN8FuzzySet19calculatePertinenceEf+0x80>
        }else{
            this->pertinence = 0.0;
        }
    }else if (crispValue >= this->a && crispValue < this->b){
 80a2dd4:	4629      	mov	r1, r5
 80a2dd6:	4638      	mov	r0, r7
 80a2dd8:	f002 f9a6 	bl	80a5128 <__aeabi_fcmple>
 80a2ddc:	b9f0      	cbnz	r0, 80a2e1c <_ZN8FuzzySet19calculatePertinenceEf+0x84>
        slope = 1.0 / (this->b - this->a);
        this->pertinence = slope * (crispValue - this->b) + 1.0;
    }else if (crispValue >= this->b && crispValue <= this->c){
 80a2dde:	4631      	mov	r1, r6
 80a2de0:	4628      	mov	r0, r5
 80a2de2:	f002 f9ab 	bl	80a513c <__aeabi_fcmpge>
 80a2de6:	2800      	cmp	r0, #0
 80a2de8:	d12f      	bne.n	80a2e4a <_ZN8FuzzySet19calculatePertinenceEf+0xb2>
        this->pertinence = 1.0;
    }else if (crispValue > this->c && crispValue <= this->d){
 80a2dea:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80a2dee:	4628      	mov	r0, r5
 80a2df0:	4641      	mov	r1, r8
 80a2df2:	f002 f9ad 	bl	80a5150 <__aeabi_fcmpgt>
 80a2df6:	f8d4 900c 	ldr.w	r9, [r4, #12]
 80a2dfa:	2800      	cmp	r0, #0
 80a2dfc:	d12c      	bne.n	80a2e58 <_ZN8FuzzySet19calculatePertinenceEf+0xc0>
        slope = 1.0 / (this->c - this->d);
        this->pertinence = slope * (crispValue - this->c) + 1.0;
    }else if (crispValue > this->d){
 80a2dfe:	4649      	mov	r1, r9
 80a2e00:	4628      	mov	r0, r5
 80a2e02:	f002 f9a5 	bl	80a5150 <__aeabi_fcmpgt>
 80a2e06:	2800      	cmp	r0, #0
 80a2e08:	d04d      	beq.n	80a2ea6 <_ZN8FuzzySet19calculatePertinenceEf+0x10e>
        if (this->c == this->d && this->c != this->b && this->b != this->a){
 80a2e0a:	4649      	mov	r1, r9
 80a2e0c:	4640      	mov	r0, r8
 80a2e0e:	f002 f977 	bl	80a5100 <__aeabi_fcmpeq>
 80a2e12:	2800      	cmp	r0, #0
 80a2e14:	d13e      	bne.n	80a2e94 <_ZN8FuzzySet19calculatePertinenceEf+0xfc>

    if (crispValue < this->a){
        if (this->a == this->b && this->b != this->c && this->c != this->d){
            this->pertinence = 1.0;
        }else{
            this->pertinence = 0.0;
 80a2e16:	2300      	movs	r3, #0
 80a2e18:	6123      	str	r3, [r4, #16]
 80a2e1a:	e044      	b.n	80a2ea6 <_ZN8FuzzySet19calculatePertinenceEf+0x10e>
        }
    }else if (crispValue >= this->a && crispValue < this->b){
 80a2e1c:	4631      	mov	r1, r6
 80a2e1e:	4628      	mov	r0, r5
 80a2e20:	f002 f978 	bl	80a5114 <__aeabi_fcmplt>
 80a2e24:	2800      	cmp	r0, #0
 80a2e26:	d0da      	beq.n	80a2dde <_ZN8FuzzySet19calculatePertinenceEf+0x46>
        slope = 1.0 / (this->b - this->a);
        this->pertinence = slope * (crispValue - this->b) + 1.0;
 80a2e28:	4639      	mov	r1, r7
 80a2e2a:	4630      	mov	r0, r6
 80a2e2c:	f001 feca 	bl	80a4bc4 <__aeabi_fsub>
 80a2e30:	4601      	mov	r1, r0
 80a2e32:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a2e36:	f002 f883 	bl	80a4f40 <__aeabi_fdiv>
 80a2e3a:	4631      	mov	r1, r6
 80a2e3c:	4607      	mov	r7, r0
 80a2e3e:	4628      	mov	r0, r5
 80a2e40:	f001 fec0 	bl	80a4bc4 <__aeabi_fsub>
 80a2e44:	4601      	mov	r1, r0
 80a2e46:	4638      	mov	r0, r7
 80a2e48:	e01c      	b.n	80a2e84 <_ZN8FuzzySet19calculatePertinenceEf+0xec>
    }else if (crispValue >= this->b && crispValue <= this->c){
 80a2e4a:	68a1      	ldr	r1, [r4, #8]
 80a2e4c:	4628      	mov	r0, r5
 80a2e4e:	f002 f96b 	bl	80a5128 <__aeabi_fcmple>
 80a2e52:	2800      	cmp	r0, #0
 80a2e54:	d0c9      	beq.n	80a2dea <_ZN8FuzzySet19calculatePertinenceEf+0x52>
 80a2e56:	e7ba      	b.n	80a2dce <_ZN8FuzzySet19calculatePertinenceEf+0x36>
        this->pertinence = 1.0;
    }else if (crispValue > this->c && crispValue <= this->d){
 80a2e58:	4649      	mov	r1, r9
 80a2e5a:	4628      	mov	r0, r5
 80a2e5c:	f002 f964 	bl	80a5128 <__aeabi_fcmple>
 80a2e60:	2800      	cmp	r0, #0
 80a2e62:	d0cc      	beq.n	80a2dfe <_ZN8FuzzySet19calculatePertinenceEf+0x66>
        slope = 1.0 / (this->c - this->d);
        this->pertinence = slope * (crispValue - this->c) + 1.0;
 80a2e64:	4649      	mov	r1, r9
 80a2e66:	4640      	mov	r0, r8
 80a2e68:	f001 feac 	bl	80a4bc4 <__aeabi_fsub>
 80a2e6c:	4601      	mov	r1, r0
 80a2e6e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a2e72:	f002 f865 	bl	80a4f40 <__aeabi_fdiv>
 80a2e76:	4641      	mov	r1, r8
 80a2e78:	4606      	mov	r6, r0
 80a2e7a:	4628      	mov	r0, r5
 80a2e7c:	f001 fea2 	bl	80a4bc4 <__aeabi_fsub>
 80a2e80:	4601      	mov	r1, r0
 80a2e82:	4630      	mov	r0, r6
 80a2e84:	f001 ffa8 	bl	80a4dd8 <__aeabi_fmul>
 80a2e88:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a2e8c:	f001 fe9c 	bl	80a4bc8 <__addsf3>
 80a2e90:	6120      	str	r0, [r4, #16]
 80a2e92:	e008      	b.n	80a2ea6 <_ZN8FuzzySet19calculatePertinenceEf+0x10e>
    }else if (crispValue > this->d){
        if (this->c == this->d && this->c != this->b && this->b != this->a){
 80a2e94:	4641      	mov	r1, r8
 80a2e96:	4630      	mov	r0, r6
 80a2e98:	f002 f932 	bl	80a5100 <__aeabi_fcmpeq>
 80a2e9c:	2800      	cmp	r0, #0
 80a2e9e:	d1ba      	bne.n	80a2e16 <_ZN8FuzzySet19calculatePertinenceEf+0x7e>
 80a2ea0:	4631      	mov	r1, r6
 80a2ea2:	4638      	mov	r0, r7
 80a2ea4:	e790      	b.n	80a2dc8 <_ZN8FuzzySet19calculatePertinenceEf+0x30>
        }else{
            this->pertinence = 0.0;
        }
    }
    return true;
}
 80a2ea6:	2001      	movs	r0, #1
 80a2ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a2eac <_ZN8FuzzySet13setPertinenceEf>:

void FuzzySet::setPertinence(float pertinence){
 80a2eac:	b538      	push	{r3, r4, r5, lr}
 80a2eae:	4604      	mov	r4, r0
    if(this->pertinence < pertinence){
 80a2eb0:	6900      	ldr	r0, [r0, #16]
        }
    }
    return true;
}

void FuzzySet::setPertinence(float pertinence){
 80a2eb2:	460d      	mov	r5, r1
    if(this->pertinence < pertinence){
 80a2eb4:	f002 f92e 	bl	80a5114 <__aeabi_fcmplt>
 80a2eb8:	b100      	cbz	r0, 80a2ebc <_ZN8FuzzySet13setPertinenceEf+0x10>
        this->pertinence = pertinence;
 80a2eba:	6125      	str	r5, [r4, #16]
 80a2ebc:	bd38      	pop	{r3, r4, r5, pc}

080a2ebe <_ZN8FuzzySet13getPertinenceEv>:
    }
}

float FuzzySet::getPertinence(){
    return this->pertinence;
}
 80a2ebe:	6900      	ldr	r0, [r0, #16]
 80a2ec0:	4770      	bx	lr

080a2ec2 <_ZN8FuzzySet5resetEv>:

void FuzzySet::reset(){
    this->pertinence = 0.0;
 80a2ec2:	2300      	movs	r3, #0
 80a2ec4:	6103      	str	r3, [r0, #16]
 80a2ec6:	4770      	bx	lr

080a2ec8 <_ZN19FuzzyRuleConsequentC1Ev>:
 */
#include "FuzzyRuleConsequent.h"

// CONSTRUTORES
FuzzyRuleConsequent::FuzzyRuleConsequent(){
    this->fuzzySetOutputs = NULL;
 80a2ec8:	2200      	movs	r2, #0
 80a2eca:	6042      	str	r2, [r0, #4]
    this->fuzzySetOutputsCursor = NULL;
 80a2ecc:	6002      	str	r2, [r0, #0]
}
 80a2ece:	4770      	bx	lr

080a2ed0 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet>:
FuzzyRuleConsequent::~FuzzyRuleConsequent(){
    this->cleanFuzzySets(this->fuzzySetOutputs);
}

// MÉTODOS PÚBLICOS
bool FuzzyRuleConsequent::addOutput(FuzzySet* fuzzySet){
 80a2ed0:	b538      	push	{r3, r4, r5, lr}
 80a2ed2:	4604      	mov	r4, r0
    fuzzySetOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetOutputArray *) malloc(sizeof(fuzzySetOutputArray))) == NULL){
 80a2ed4:	2008      	movs	r0, #8
FuzzyRuleConsequent::~FuzzyRuleConsequent(){
    this->cleanFuzzySets(this->fuzzySetOutputs);
}

// MÉTODOS PÚBLICOS
bool FuzzyRuleConsequent::addOutput(FuzzySet* fuzzySet){
 80a2ed6:	460d      	mov	r5, r1
    fuzzySetOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetOutputArray *) malloc(sizeof(fuzzySetOutputArray))) == NULL){
 80a2ed8:	f000 fb7c 	bl	80a35d4 <malloc>
 80a2edc:	b150      	cbz	r0, 80a2ef4 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet+0x24>
        return false;
    }
    aux->fuzzySet     = fuzzySet;
    aux->next         = NULL;
 80a2ede:	2300      	movs	r3, #0
    fuzzySetOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzySetOutputArray *) malloc(sizeof(fuzzySetOutputArray))) == NULL){
        return false;
    }
    aux->fuzzySet     = fuzzySet;
 80a2ee0:	6005      	str	r5, [r0, #0]
    aux->next         = NULL;
 80a2ee2:	6043      	str	r3, [r0, #4]

    if(this->fuzzySetOutputs == NULL){
 80a2ee4:	6863      	ldr	r3, [r4, #4]
 80a2ee6:	b90b      	cbnz	r3, 80a2eec <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet+0x1c>
        this->fuzzySetOutputs = aux;
 80a2ee8:	6060      	str	r0, [r4, #4]
 80a2eea:	e001      	b.n	80a2ef0 <_ZN19FuzzyRuleConsequent9addOutputEP8FuzzySet+0x20>
        this->fuzzySetOutputsCursor    = aux;
    }else{
        this->fuzzySetOutputsCursor->next = aux;
 80a2eec:	6823      	ldr	r3, [r4, #0]
 80a2eee:	6058      	str	r0, [r3, #4]
        this->fuzzySetOutputsCursor = aux;
 80a2ef0:	6020      	str	r0, [r4, #0]
    }
    return true;
 80a2ef2:	2001      	movs	r0, #1
}
 80a2ef4:	bd38      	pop	{r3, r4, r5, pc}

080a2ef6 <_ZN19FuzzyRuleConsequent8evaluateEf>:

bool FuzzyRuleConsequent::evaluate(float power){
 80a2ef6:	b538      	push	{r3, r4, r5, lr}
 80a2ef8:	460d      	mov	r5, r1
    fuzzySetOutputArray *aux;
    aux = this->fuzzySetOutputs;
 80a2efa:	6844      	ldr	r4, [r0, #4]
    while(aux != NULL){
 80a2efc:	b12c      	cbz	r4, 80a2f0a <_ZN19FuzzyRuleConsequent8evaluateEf+0x14>
        aux->fuzzySet->setPertinence(power);
 80a2efe:	6820      	ldr	r0, [r4, #0]
 80a2f00:	4629      	mov	r1, r5
 80a2f02:	f7ff ffd3 	bl	80a2eac <_ZN8FuzzySet13setPertinenceEf>
        aux = aux->next;
 80a2f06:	6864      	ldr	r4, [r4, #4]
}

bool FuzzyRuleConsequent::evaluate(float power){
    fuzzySetOutputArray *aux;
    aux = this->fuzzySetOutputs;
    while(aux != NULL){
 80a2f08:	e7f8      	b.n	80a2efc <_ZN19FuzzyRuleConsequent8evaluateEf+0x6>
        aux->fuzzySet->setPertinence(power);
        aux = aux->next;
    }
    return true;
}
 80a2f0a:	2001      	movs	r0, #1
 80a2f0c:	bd38      	pop	{r3, r4, r5, pc}

080a2f0e <_ZN5FuzzyC1Ev>:

// CONSTRUTORES
Fuzzy::Fuzzy(){
    // Iniciando os ponteiros como nulo
    // FuzzyInput
    this->fuzzyInputs       = NULL;
 80a2f0e:	2200      	movs	r2, #0
 80a2f10:	6042      	str	r2, [r0, #4]
    this->fuzzyInputsCursor = NULL;
 80a2f12:	6002      	str	r2, [r0, #0]
    // FuzzyOutput
    this->fuzzyOutputs          = NULL;
 80a2f14:	60c2      	str	r2, [r0, #12]
    this->fuzzyOutputsCursor    = NULL;
 80a2f16:	6082      	str	r2, [r0, #8]
    // FuzzyRule
    this->fuzzyRules        = NULL;
 80a2f18:	6142      	str	r2, [r0, #20]
    this->fuzzyRulesCursor  = NULL;
 80a2f1a:	6102      	str	r2, [r0, #16]
}
 80a2f1c:	4770      	bx	lr

080a2f1e <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput>:
    this->cleanFuzzyOutputs(this->fuzzyOutputs);
    this->cleanFuzzyRules(this->fuzzyRules);
}

// MÉTODOS PÚBLICOS
bool Fuzzy::addFuzzyInput(FuzzyInput* fuzzyInput){
 80a2f1e:	b538      	push	{r3, r4, r5, lr}
 80a2f20:	4604      	mov	r4, r0
    fuzzyInputArray* aux;
    
    // Alocando espaço na memória
    if((aux = (fuzzyInputArray *) malloc(sizeof(fuzzyInputArray))) == NULL){
 80a2f22:	2008      	movs	r0, #8
    this->cleanFuzzyOutputs(this->fuzzyOutputs);
    this->cleanFuzzyRules(this->fuzzyRules);
}

// MÉTODOS PÚBLICOS
bool Fuzzy::addFuzzyInput(FuzzyInput* fuzzyInput){
 80a2f24:	460d      	mov	r5, r1
    fuzzyInputArray* aux;
    
    // Alocando espaço na memória
    if((aux = (fuzzyInputArray *) malloc(sizeof(fuzzyInputArray))) == NULL){
 80a2f26:	f000 fb55 	bl	80a35d4 <malloc>
 80a2f2a:	b150      	cbz	r0, 80a2f42 <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput+0x24>
        return false;
    }

    aux->fuzzyInput = fuzzyInput;
    aux->next = NULL;
 80a2f2c:	2300      	movs	r3, #0
    // Alocando espaço na memória
    if((aux = (fuzzyInputArray *) malloc(sizeof(fuzzyInputArray))) == NULL){
        return false;
    }

    aux->fuzzyInput = fuzzyInput;
 80a2f2e:	6005      	str	r5, [r0, #0]
    aux->next = NULL;
 80a2f30:	6043      	str	r3, [r0, #4]

    if(this->fuzzyInputs == NULL){
 80a2f32:	6863      	ldr	r3, [r4, #4]
 80a2f34:	b90b      	cbnz	r3, 80a2f3a <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput+0x1c>
        this->fuzzyInputs = aux;
 80a2f36:	6060      	str	r0, [r4, #4]
 80a2f38:	e001      	b.n	80a2f3e <_ZN5Fuzzy13addFuzzyInputEP10FuzzyInput+0x20>
        this->fuzzyInputsCursor  = aux;
    }else{
        this->fuzzyInputsCursor->next = aux;
 80a2f3a:	6823      	ldr	r3, [r4, #0]
 80a2f3c:	6058      	str	r0, [r3, #4]
        this->fuzzyInputsCursor = aux;
 80a2f3e:	6020      	str	r0, [r4, #0]
    }

    return true;
 80a2f40:	2001      	movs	r0, #1
}
 80a2f42:	bd38      	pop	{r3, r4, r5, pc}

080a2f44 <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput>:

bool Fuzzy::addFuzzyOutput(FuzzyOutput* fuzzyOutput){
 80a2f44:	b570      	push	{r4, r5, r6, lr}
 80a2f46:	4605      	mov	r5, r0
    fuzzyOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzyOutputArray *) malloc(sizeof(fuzzyOutputArray))) == NULL){
 80a2f48:	2008      	movs	r0, #8
    }

    return true;
}

bool Fuzzy::addFuzzyOutput(FuzzyOutput* fuzzyOutput){
 80a2f4a:	460e      	mov	r6, r1
    fuzzyOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzyOutputArray *) malloc(sizeof(fuzzyOutputArray))) == NULL){
 80a2f4c:	f000 fb42 	bl	80a35d4 <malloc>
 80a2f50:	4604      	mov	r4, r0
 80a2f52:	b170      	cbz	r0, 80a2f72 <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput+0x2e>
        return false;
    }
    aux->fuzzyOutput = fuzzyOutput;
    aux->next = NULL;
 80a2f54:	2300      	movs	r3, #0
 80a2f56:	6043      	str	r3, [r0, #4]
    fuzzyOutputArray *aux;
    // Alocando espaço na memória
    if((aux = (fuzzyOutputArray *) malloc(sizeof(fuzzyOutputArray))) == NULL){
        return false;
    }
    aux->fuzzyOutput = fuzzyOutput;
 80a2f58:	6006      	str	r6, [r0, #0]
    aux->next = NULL;

    // Ordenando o fuzzyOutput
    fuzzyOutput->order();
 80a2f5a:	4630      	mov	r0, r6
 80a2f5c:	f7ff fcd4 	bl	80a2908 <_ZN11FuzzyOutput5orderEv>

    if(this->fuzzyOutputs == NULL){
 80a2f60:	68eb      	ldr	r3, [r5, #12]
 80a2f62:	b90b      	cbnz	r3, 80a2f68 <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput+0x24>
        this->fuzzyOutputs = aux;
 80a2f64:	60ec      	str	r4, [r5, #12]
 80a2f66:	e001      	b.n	80a2f6c <_ZN5Fuzzy14addFuzzyOutputEP11FuzzyOutput+0x28>
        this->fuzzyOutputsCursor  = aux;
    }else{
        this->fuzzyOutputsCursor->next = aux;
 80a2f68:	68ab      	ldr	r3, [r5, #8]
 80a2f6a:	605c      	str	r4, [r3, #4]
        this->fuzzyOutputsCursor = aux;
 80a2f6c:	60ac      	str	r4, [r5, #8]
    }
    return true;
 80a2f6e:	2001      	movs	r0, #1
 80a2f70:	bd70      	pop	{r4, r5, r6, pc}
}
 80a2f72:	bd70      	pop	{r4, r5, r6, pc}

080a2f74 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule>:

bool Fuzzy::addFuzzyRule(FuzzyRule* fuzzyRule){
 80a2f74:	b538      	push	{r3, r4, r5, lr}
 80a2f76:	4604      	mov	r4, r0
    fuzzyRuleArray* aux;
    // Alocando espaço na memória
    if((aux = (fuzzyRuleArray *) malloc(sizeof(fuzzyRuleArray))) == NULL){
 80a2f78:	2008      	movs	r0, #8
        this->fuzzyOutputsCursor = aux;
    }
    return true;
}

bool Fuzzy::addFuzzyRule(FuzzyRule* fuzzyRule){
 80a2f7a:	460d      	mov	r5, r1
    fuzzyRuleArray* aux;
    // Alocando espaço na memória
    if((aux = (fuzzyRuleArray *) malloc(sizeof(fuzzyRuleArray))) == NULL){
 80a2f7c:	f000 fb2a 	bl	80a35d4 <malloc>
 80a2f80:	b150      	cbz	r0, 80a2f98 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule+0x24>
        return false;
    }
    aux->fuzzyRule = fuzzyRule;
    aux->next = NULL;
 80a2f82:	2300      	movs	r3, #0
    fuzzyRuleArray* aux;
    // Alocando espaço na memória
    if((aux = (fuzzyRuleArray *) malloc(sizeof(fuzzyRuleArray))) == NULL){
        return false;
    }
    aux->fuzzyRule = fuzzyRule;
 80a2f84:	6005      	str	r5, [r0, #0]
    aux->next = NULL;
 80a2f86:	6043      	str	r3, [r0, #4]

    if(this->fuzzyRules == NULL){
 80a2f88:	6963      	ldr	r3, [r4, #20]
 80a2f8a:	b90b      	cbnz	r3, 80a2f90 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule+0x1c>
        this->fuzzyRules = aux;
 80a2f8c:	6160      	str	r0, [r4, #20]
 80a2f8e:	e001      	b.n	80a2f94 <_ZN5Fuzzy12addFuzzyRuleEP9FuzzyRule+0x20>
        this->fuzzyRulesCursor  = aux;
    }else{
        this->fuzzyRulesCursor->next = aux;
 80a2f90:	6923      	ldr	r3, [r4, #16]
 80a2f92:	6058      	str	r0, [r3, #4]
        this->fuzzyRulesCursor = aux;
 80a2f94:	6120      	str	r0, [r4, #16]
    }
    return true;
 80a2f96:	2001      	movs	r0, #1
}
 80a2f98:	bd38      	pop	{r3, r4, r5, pc}

080a2f9a <_ZN5Fuzzy8setInputEif>:

bool Fuzzy::setInput(int fuzzyInputIndex, float crispValue){
 80a2f9a:	b570      	push	{r4, r5, r6, lr}
 80a2f9c:	460d      	mov	r5, r1
 80a2f9e:	4616      	mov	r6, r2
    fuzzyInputArray *aux;
    aux = this->fuzzyInputs;
 80a2fa0:	6844      	ldr	r4, [r0, #4]

    while(aux != NULL){
 80a2fa2:	b164      	cbz	r4, 80a2fbe <_ZN5Fuzzy8setInputEif+0x24>
        if(aux->fuzzyInput->getIndex() == fuzzyInputIndex){
 80a2fa4:	6820      	ldr	r0, [r4, #0]
 80a2fa6:	f7ff fc82 	bl	80a28ae <_ZN7FuzzyIO8getIndexEv>
 80a2faa:	42a8      	cmp	r0, r5
 80a2fac:	d105      	bne.n	80a2fba <_ZN5Fuzzy8setInputEif+0x20>
            aux->fuzzyInput->setCrispInput(crispValue);
 80a2fae:	6820      	ldr	r0, [r4, #0]
 80a2fb0:	4631      	mov	r1, r6
 80a2fb2:	f7ff fc7e 	bl	80a28b2 <_ZN7FuzzyIO13setCrispInputEf>
            return true;
 80a2fb6:	2001      	movs	r0, #1
 80a2fb8:	bd70      	pop	{r4, r5, r6, pc}
        }
        aux = aux->next;
 80a2fba:	6864      	ldr	r4, [r4, #4]

bool Fuzzy::setInput(int fuzzyInputIndex, float crispValue){
    fuzzyInputArray *aux;
    aux = this->fuzzyInputs;

    while(aux != NULL){
 80a2fbc:	e7f1      	b.n	80a2fa2 <_ZN5Fuzzy8setInputEif+0x8>
            aux->fuzzyInput->setCrispInput(crispValue);
            return true;
        }
        aux = aux->next;
    }
    return false;
 80a2fbe:	4620      	mov	r0, r4
}
 80a2fc0:	bd70      	pop	{r4, r5, r6, pc}

080a2fc2 <_ZN5Fuzzy7fuzzifyEv>:

bool Fuzzy::fuzzify(){
 80a2fc2:	b538      	push	{r3, r4, r5, lr}
 80a2fc4:	4604      	mov	r4, r0
    fuzzyInputArray* fuzzyInputAux;

    fuzzyOutputArray *fuzzyOutputAux;

    fuzzyInputAux = this->fuzzyInputs;
 80a2fc6:	6845      	ldr	r5, [r0, #4]
    while(fuzzyInputAux != NULL){
 80a2fc8:	b125      	cbz	r5, 80a2fd4 <_ZN5Fuzzy7fuzzifyEv+0x12>
        fuzzyInputAux->fuzzyInput->resetFuzzySets();
 80a2fca:	6828      	ldr	r0, [r5, #0]
 80a2fcc:	f7ff fc86 	bl	80a28dc <_ZN7FuzzyIO14resetFuzzySetsEv>
        fuzzyInputAux = fuzzyInputAux->next;
 80a2fd0:	686d      	ldr	r5, [r5, #4]
    fuzzyInputArray* fuzzyInputAux;

    fuzzyOutputArray *fuzzyOutputAux;

    fuzzyInputAux = this->fuzzyInputs;
    while(fuzzyInputAux != NULL){
 80a2fd2:	e7f9      	b.n	80a2fc8 <_ZN5Fuzzy7fuzzifyEv+0x6>
        fuzzyInputAux->fuzzyInput->resetFuzzySets();
        fuzzyInputAux = fuzzyInputAux->next;
    }

    fuzzyOutputAux = this->fuzzyOutputs;
 80a2fd4:	68e5      	ldr	r5, [r4, #12]
    while(fuzzyOutputAux != NULL){
 80a2fd6:	b125      	cbz	r5, 80a2fe2 <_ZN5Fuzzy7fuzzifyEv+0x20>
        fuzzyOutputAux->fuzzyOutput->resetFuzzySets();
 80a2fd8:	6828      	ldr	r0, [r5, #0]
 80a2fda:	f7ff fc7f 	bl	80a28dc <_ZN7FuzzyIO14resetFuzzySetsEv>
        fuzzyOutputAux = fuzzyOutputAux->next;
 80a2fde:	686d      	ldr	r5, [r5, #4]
        fuzzyInputAux->fuzzyInput->resetFuzzySets();
        fuzzyInputAux = fuzzyInputAux->next;
    }

    fuzzyOutputAux = this->fuzzyOutputs;
    while(fuzzyOutputAux != NULL){
 80a2fe0:	e7f9      	b.n	80a2fd6 <_ZN5Fuzzy7fuzzifyEv+0x14>
        fuzzyOutputAux->fuzzyOutput->resetFuzzySets();
        fuzzyOutputAux = fuzzyOutputAux->next;
    }

    // Calculando a pertinência de todos os FuzzyInputs
    fuzzyInputAux = this->fuzzyInputs;
 80a2fe2:	6865      	ldr	r5, [r4, #4]
    while(fuzzyInputAux != NULL){
 80a2fe4:	b125      	cbz	r5, 80a2ff0 <_ZN5Fuzzy7fuzzifyEv+0x2e>
        fuzzyInputAux->fuzzyInput->calculateFuzzySetPertinences();
 80a2fe6:	6828      	ldr	r0, [r5, #0]
 80a2fe8:	f7ff fc4f 	bl	80a288a <_ZN10FuzzyInput28calculateFuzzySetPertinencesEv>
        fuzzyInputAux = fuzzyInputAux->next;
 80a2fec:	686d      	ldr	r5, [r5, #4]
        fuzzyOutputAux = fuzzyOutputAux->next;
    }

    // Calculando a pertinência de todos os FuzzyInputs
    fuzzyInputAux = this->fuzzyInputs;
    while(fuzzyInputAux != NULL){
 80a2fee:	e7f9      	b.n	80a2fe4 <_ZN5Fuzzy7fuzzifyEv+0x22>
        fuzzyInputAux = fuzzyInputAux->next;
    }

    // Avaliando quais regras foram disparadas
    fuzzyRuleArray* fuzzyRuleAux;
    fuzzyRuleAux = this->fuzzyRules;
 80a2ff0:	6965      	ldr	r5, [r4, #20]
    // Calculando as pertinências de totos os FuzzyInputs
    while(fuzzyRuleAux != NULL){
 80a2ff2:	b125      	cbz	r5, 80a2ffe <_ZN5Fuzzy7fuzzifyEv+0x3c>
        fuzzyRuleAux->fuzzyRule->evaluateExpression();
 80a2ff4:	6828      	ldr	r0, [r5, #0]
 80a2ff6:	f7ff fa14 	bl	80a2422 <_ZN9FuzzyRule18evaluateExpressionEv>
        fuzzyRuleAux = fuzzyRuleAux->next;
 80a2ffa:	686d      	ldr	r5, [r5, #4]

    // Avaliando quais regras foram disparadas
    fuzzyRuleArray* fuzzyRuleAux;
    fuzzyRuleAux = this->fuzzyRules;
    // Calculando as pertinências de totos os FuzzyInputs
    while(fuzzyRuleAux != NULL){
 80a2ffc:	e7f9      	b.n	80a2ff2 <_ZN5Fuzzy7fuzzifyEv+0x30>
        fuzzyRuleAux->fuzzyRule->evaluateExpression();
        fuzzyRuleAux = fuzzyRuleAux->next;
    }

    // Truncado os conjuntos de saída
    fuzzyOutputAux = this->fuzzyOutputs;
 80a2ffe:	68e4      	ldr	r4, [r4, #12]
    while(fuzzyOutputAux != NULL){
 80a3000:	b124      	cbz	r4, 80a300c <_ZN5Fuzzy7fuzzifyEv+0x4a>
        fuzzyOutputAux->fuzzyOutput->truncate();
 80a3002:	6820      	ldr	r0, [r4, #0]
 80a3004:	f7ff fd50 	bl	80a2aa8 <_ZN11FuzzyOutput8truncateEv>
        fuzzyOutputAux = fuzzyOutputAux->next;
 80a3008:	6864      	ldr	r4, [r4, #4]
        fuzzyRuleAux = fuzzyRuleAux->next;
    }

    // Truncado os conjuntos de saída
    fuzzyOutputAux = this->fuzzyOutputs;
    while(fuzzyOutputAux != NULL){
 80a300a:	e7f9      	b.n	80a3000 <_ZN5Fuzzy7fuzzifyEv+0x3e>
        fuzzyOutputAux->fuzzyOutput->truncate();
        fuzzyOutputAux = fuzzyOutputAux->next;
    }

    return true;
}
 80a300c:	2001      	movs	r0, #1
 80a300e:	bd38      	pop	{r3, r4, r5, pc}

080a3010 <_ZN5Fuzzy9defuzzifyEi>:
        aux = aux->next;
    }
    return false;
}

float Fuzzy::defuzzify(int fuzzyOutputIndex){
 80a3010:	b538      	push	{r3, r4, r5, lr}
 80a3012:	460d      	mov	r5, r1
    fuzzyOutputArray *aux;
    aux = this->fuzzyOutputs;
 80a3014:	68c4      	ldr	r4, [r0, #12]
    while(aux != NULL){
 80a3016:	b15c      	cbz	r4, 80a3030 <_ZN5Fuzzy9defuzzifyEi+0x20>
        if(aux->fuzzyOutput->getIndex() == fuzzyOutputIndex){
 80a3018:	6820      	ldr	r0, [r4, #0]
 80a301a:	f7ff fc48 	bl	80a28ae <_ZN7FuzzyIO8getIndexEv>
 80a301e:	42a8      	cmp	r0, r5
 80a3020:	d104      	bne.n	80a302c <_ZN5Fuzzy9defuzzifyEi+0x1c>
            return aux->fuzzyOutput->getCrispOutput();
 80a3022:	6820      	ldr	r0, [r4, #0]
        }
        aux = aux->next;
    }
    return 0;
}
 80a3024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
float Fuzzy::defuzzify(int fuzzyOutputIndex){
    fuzzyOutputArray *aux;
    aux = this->fuzzyOutputs;
    while(aux != NULL){
        if(aux->fuzzyOutput->getIndex() == fuzzyOutputIndex){
            return aux->fuzzyOutput->getCrispOutput();
 80a3028:	f7ff bc6b 	b.w	80a2902 <_ZN11FuzzyOutput14getCrispOutputEv>
        }
        aux = aux->next;
 80a302c:	6864      	ldr	r4, [r4, #4]
}

float Fuzzy::defuzzify(int fuzzyOutputIndex){
    fuzzyOutputArray *aux;
    aux = this->fuzzyOutputs;
    while(aux != NULL){
 80a302e:	e7f2      	b.n	80a3016 <_ZN5Fuzzy9defuzzifyEi+0x6>
            return aux->fuzzyOutput->getCrispOutput();
        }
        aux = aux->next;
    }
    return 0;
}
 80a3030:	2000      	movs	r0, #0
 80a3032:	bd38      	pop	{r3, r4, r5, pc}

080a3034 <_ZN19FuzzyRuleAntecedentC1Ev>:
 */
#include "FuzzyRuleAntecedent.h"

// CONSTRUTORES
FuzzyRuleAntecedent::FuzzyRuleAntecedent(){
    this->op = 0;
 80a3034:	2200      	movs	r2, #0
 80a3036:	6002      	str	r2, [r0, #0]
    this->mode = 0;
 80a3038:	6042      	str	r2, [r0, #4]
    this->fuzzySet1 = NULL;
 80a303a:	6082      	str	r2, [r0, #8]
    this->fuzzySet2 = NULL;
 80a303c:	60c2      	str	r2, [r0, #12]
    this->fuzzyRuleAntecedent1 = NULL;
 80a303e:	6102      	str	r2, [r0, #16]
    this->fuzzyRuleAntecedent2 = NULL;
 80a3040:	6142      	str	r2, [r0, #20]
}
 80a3042:	4770      	bx	lr

080a3044 <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_>:
        return true;
    }
    return false;
}

bool FuzzyRuleAntecedent::joinWithAND(FuzzySet* fuzzySet1, FuzzySet* fuzzySet2){
 80a3044:	b510      	push	{r4, lr}
 80a3046:	4603      	mov	r3, r0
    if(fuzzySet1 != NULL && fuzzySet2 != NULL){
 80a3048:	b139      	cbz	r1, 80a305a <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_+0x16>
 80a304a:	b142      	cbz	r2, 80a305e <_ZN19FuzzyRuleAntecedent11joinWithANDEP8FuzzySetS1_+0x1a>
        this->op = OP_AND;
        this->mode = MODE_FS_FS;
 80a304c:	2001      	movs	r0, #1
 80a304e:	2402      	movs	r4, #2
 80a3050:	e883 0011 	stmia.w	r3, {r0, r4}
        this->fuzzySet1 = fuzzySet1;
 80a3054:	6099      	str	r1, [r3, #8]
        this->fuzzySet2 = fuzzySet2;
 80a3056:	60da      	str	r2, [r3, #12]
        return true;
 80a3058:	bd10      	pop	{r4, pc}
    }
    return false;
 80a305a:	4608      	mov	r0, r1
 80a305c:	bd10      	pop	{r4, pc}
 80a305e:	4610      	mov	r0, r2
}
 80a3060:	bd10      	pop	{r4, pc}

080a3062 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_>:
        return true;
    }
    return false;
}

bool FuzzyRuleAntecedent::joinWithAND(FuzzyRuleAntecedent* fuzzyRuleAntecedent1, FuzzyRuleAntecedent* fuzzyRuleAntecedent2){
 80a3062:	b510      	push	{r4, lr}
 80a3064:	4603      	mov	r3, r0
    if(fuzzyRuleAntecedent1 != NULL && fuzzyRuleAntecedent2 != NULL){
 80a3066:	b139      	cbz	r1, 80a3078 <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_+0x16>
 80a3068:	b142      	cbz	r2, 80a307c <_ZN19FuzzyRuleAntecedent11joinWithANDEPS_S0_+0x1a>
        this->op = OP_AND;
        this->mode = MODE_FRA_FRA;
 80a306a:	2001      	movs	r0, #1
 80a306c:	2404      	movs	r4, #4
 80a306e:	e883 0011 	stmia.w	r3, {r0, r4}
        this->fuzzyRuleAntecedent1 = fuzzyRuleAntecedent1;
 80a3072:	6119      	str	r1, [r3, #16]
        this->fuzzyRuleAntecedent2 = fuzzyRuleAntecedent2;
 80a3074:	615a      	str	r2, [r3, #20]
        return true;
 80a3076:	bd10      	pop	{r4, pc}
    }
    return false;
 80a3078:	4608      	mov	r0, r1
 80a307a:	bd10      	pop	{r4, pc}
 80a307c:	4610      	mov	r0, r2
}
 80a307e:	bd10      	pop	{r4, pc}

080a3080 <_ZN19FuzzyRuleAntecedent8evaluateEv>:
        return true;
    }
    return false;
}

float FuzzyRuleAntecedent::evaluate(){
 80a3080:	b538      	push	{r3, r4, r5, lr}
 80a3082:	4604      	mov	r4, r0
    switch(this->mode){
 80a3084:	6863      	ldr	r3, [r4, #4]
 80a3086:	3b01      	subs	r3, #1
 80a3088:	2b03      	cmp	r3, #3
 80a308a:	f200 80ce 	bhi.w	80a322a <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
 80a308e:	e8df f003 	tbb	[pc, r3]
 80a3092:	0276      	.short	0x0276
 80a3094:	7b37      	.short	0x7b37
        case MODE_FS:
            return this->fuzzySet1->getPertinence();
            break;
        case MODE_FS_FS:
            switch(this->op){
 80a3096:	6823      	ldr	r3, [r4, #0]
 80a3098:	2b01      	cmp	r3, #1
 80a309a:	d002      	beq.n	80a30a2 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x22>
 80a309c:	2b02      	cmp	r3, #2
 80a309e:	d01e      	beq.n	80a30de <_ZN19FuzzyRuleAntecedent8evaluateEv+0x5e>
 80a30a0:	e0c3      	b.n	80a322a <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                case OP_AND:
                    if(this->fuzzySet1->getPertinence() > 0.0 && this->fuzzySet2->getPertinence() > 0.0){
 80a30a2:	68a0      	ldr	r0, [r4, #8]
 80a30a4:	f7ff ff0b 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a30a8:	2100      	movs	r1, #0
 80a30aa:	f002 f851 	bl	80a5150 <__aeabi_fcmpgt>
 80a30ae:	2800      	cmp	r0, #0
 80a30b0:	f000 80bb 	beq.w	80a322a <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
 80a30b4:	68e0      	ldr	r0, [r4, #12]
 80a30b6:	f7ff ff02 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a30ba:	2100      	movs	r1, #0
 80a30bc:	f002 f848 	bl	80a5150 <__aeabi_fcmpgt>
 80a30c0:	2800      	cmp	r0, #0
 80a30c2:	f000 80b2 	beq.w	80a322a <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        if(this->fuzzySet1->getPertinence() < this->fuzzySet2->getPertinence()){
 80a30c6:	68a0      	ldr	r0, [r4, #8]
 80a30c8:	f7ff fef9 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a30cc:	4605      	mov	r5, r0
 80a30ce:	68e0      	ldr	r0, [r4, #12]
 80a30d0:	f7ff fef5 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a30d4:	4601      	mov	r1, r0
 80a30d6:	4628      	mov	r0, r5
 80a30d8:	f002 f81c 	bl	80a5114 <__aeabi_fcmplt>
 80a30dc:	e090      	b.n	80a3200 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x180>
                    }else{
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(this->fuzzySet1->getPertinence() > 0.0 || this->fuzzySet2->getPertinence() > 0.0){
 80a30de:	68a0      	ldr	r0, [r4, #8]
 80a30e0:	f7ff feed 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a30e4:	2100      	movs	r1, #0
 80a30e6:	f002 f833 	bl	80a5150 <__aeabi_fcmpgt>
 80a30ea:	2800      	cmp	r0, #0
 80a30ec:	d17d      	bne.n	80a31ea <_ZN19FuzzyRuleAntecedent8evaluateEv+0x16a>
 80a30ee:	68e0      	ldr	r0, [r4, #12]
 80a30f0:	f7ff fee5 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a30f4:	2100      	movs	r1, #0
 80a30f6:	f002 f82b 	bl	80a5150 <__aeabi_fcmpgt>
 80a30fa:	2800      	cmp	r0, #0
 80a30fc:	d175      	bne.n	80a31ea <_ZN19FuzzyRuleAntecedent8evaluateEv+0x16a>
 80a30fe:	e094      	b.n	80a322a <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                default:
                    return 0.0;
            }
            break;
        case MODE_FS_FRA:
            switch(this->op){
 80a3100:	6823      	ldr	r3, [r4, #0]
 80a3102:	2b01      	cmp	r3, #1
 80a3104:	d002      	beq.n	80a310c <_ZN19FuzzyRuleAntecedent8evaluateEv+0x8c>
 80a3106:	2b02      	cmp	r3, #2
 80a3108:	d01d      	beq.n	80a3146 <_ZN19FuzzyRuleAntecedent8evaluateEv+0xc6>
 80a310a:	e08e      	b.n	80a322a <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                case OP_AND:
                    if(this->fuzzySet1->getPertinence() > 0.0 && fuzzyRuleAntecedent1->evaluate() > 0.0){
 80a310c:	68a0      	ldr	r0, [r4, #8]
 80a310e:	f7ff fed6 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a3112:	2100      	movs	r1, #0
 80a3114:	f002 f81c 	bl	80a5150 <__aeabi_fcmpgt>
 80a3118:	2800      	cmp	r0, #0
 80a311a:	f000 8086 	beq.w	80a322a <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
 80a311e:	6920      	ldr	r0, [r4, #16]
 80a3120:	f7ff ffae 	bl	80a3080 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3124:	2100      	movs	r1, #0
 80a3126:	f002 f813 	bl	80a5150 <__aeabi_fcmpgt>
 80a312a:	2800      	cmp	r0, #0
 80a312c:	d07d      	beq.n	80a322a <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        if(this->fuzzySet1->getPertinence() < fuzzyRuleAntecedent1->evaluate()){
 80a312e:	68a0      	ldr	r0, [r4, #8]
 80a3130:	f7ff fec5 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a3134:	4605      	mov	r5, r0
 80a3136:	6920      	ldr	r0, [r4, #16]
 80a3138:	f7ff ffa2 	bl	80a3080 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a313c:	4601      	mov	r1, r0
 80a313e:	4628      	mov	r0, r5
 80a3140:	f001 ffe8 	bl	80a5114 <__aeabi_fcmplt>
 80a3144:	e019      	b.n	80a317a <_ZN19FuzzyRuleAntecedent8evaluateEv+0xfa>
                    }else{
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(this->fuzzySet1->getPertinence() > 0.0 || fuzzyRuleAntecedent1->evaluate() > 0.0){
 80a3146:	68a0      	ldr	r0, [r4, #8]
 80a3148:	f7ff feb9 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a314c:	2100      	movs	r1, #0
 80a314e:	f001 ffff 	bl	80a5150 <__aeabi_fcmpgt>
 80a3152:	b938      	cbnz	r0, 80a3164 <_ZN19FuzzyRuleAntecedent8evaluateEv+0xe4>
 80a3154:	6920      	ldr	r0, [r4, #16]
 80a3156:	f7ff ff93 	bl	80a3080 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a315a:	2100      	movs	r1, #0
 80a315c:	f001 fff8 	bl	80a5150 <__aeabi_fcmpgt>
 80a3160:	2800      	cmp	r0, #0
 80a3162:	d062      	beq.n	80a322a <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        if(this->fuzzySet1->getPertinence() > fuzzyRuleAntecedent1->evaluate()){
 80a3164:	68a0      	ldr	r0, [r4, #8]
 80a3166:	f7ff feaa 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a316a:	4605      	mov	r5, r0
 80a316c:	6920      	ldr	r0, [r4, #16]
 80a316e:	f7ff ff87 	bl	80a3080 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3172:	4601      	mov	r1, r0
 80a3174:	4628      	mov	r0, r5
 80a3176:	f001 ffeb 	bl	80a5150 <__aeabi_fcmpgt>
 80a317a:	2800      	cmp	r0, #0
 80a317c:	d044      	beq.n	80a3208 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x188>
                            return this->fuzzySet1->getPertinence();
 80a317e:	68a0      	ldr	r0, [r4, #8]
            break;
        default:
            return 0.0;
    }
    return 0.0;
 80a3180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                    }
                    break;
                case OP_OR:
                    if(this->fuzzySet1->getPertinence() > 0.0 || fuzzyRuleAntecedent1->evaluate() > 0.0){
                        if(this->fuzzySet1->getPertinence() > fuzzyRuleAntecedent1->evaluate()){
                            return this->fuzzySet1->getPertinence();
 80a3184:	f7ff be9b 	b.w	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
                default:
                    return 0.0;
            }
            break;
        case MODE_FRA_FRA:
            switch(this->op){
 80a3188:	6823      	ldr	r3, [r4, #0]
 80a318a:	2b01      	cmp	r3, #1
 80a318c:	d002      	beq.n	80a3194 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x114>
 80a318e:	2b02      	cmp	r3, #2
 80a3190:	d01c      	beq.n	80a31cc <_ZN19FuzzyRuleAntecedent8evaluateEv+0x14c>
 80a3192:	e04a      	b.n	80a322a <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                case OP_AND:
                    if(fuzzyRuleAntecedent1->evaluate() > 0.0 && fuzzyRuleAntecedent2->evaluate() > 0.0){
 80a3194:	6920      	ldr	r0, [r4, #16]
 80a3196:	f7ff ff73 	bl	80a3080 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a319a:	2100      	movs	r1, #0
 80a319c:	f001 ffd8 	bl	80a5150 <__aeabi_fcmpgt>
 80a31a0:	2800      	cmp	r0, #0
 80a31a2:	d042      	beq.n	80a322a <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
 80a31a4:	6960      	ldr	r0, [r4, #20]
 80a31a6:	f7ff ff6b 	bl	80a3080 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a31aa:	2100      	movs	r1, #0
 80a31ac:	f001 ffd0 	bl	80a5150 <__aeabi_fcmpgt>
 80a31b0:	2800      	cmp	r0, #0
 80a31b2:	d03a      	beq.n	80a322a <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        if(fuzzyRuleAntecedent1->evaluate() < fuzzyRuleAntecedent2->evaluate()){
 80a31b4:	6920      	ldr	r0, [r4, #16]
 80a31b6:	f7ff ff63 	bl	80a3080 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a31ba:	4605      	mov	r5, r0
 80a31bc:	6960      	ldr	r0, [r4, #20]
 80a31be:	f7ff ff5f 	bl	80a3080 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a31c2:	4601      	mov	r1, r0
 80a31c4:	4628      	mov	r0, r5
 80a31c6:	f001 ffa5 	bl	80a5114 <__aeabi_fcmplt>
 80a31ca:	e02a      	b.n	80a3222 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1a2>
                    }else{
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(fuzzyRuleAntecedent1->evaluate() > 0.0 || fuzzyRuleAntecedent2->evaluate() > 0.0){
 80a31cc:	6920      	ldr	r0, [r4, #16]
 80a31ce:	f7ff ff57 	bl	80a3080 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a31d2:	2100      	movs	r1, #0
 80a31d4:	f001 ffbc 	bl	80a5150 <__aeabi_fcmpgt>
 80a31d8:	b9c0      	cbnz	r0, 80a320c <_ZN19FuzzyRuleAntecedent8evaluateEv+0x18c>
 80a31da:	6960      	ldr	r0, [r4, #20]
 80a31dc:	f7ff ff50 	bl	80a3080 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a31e0:	2100      	movs	r1, #0
 80a31e2:	f001 ffb5 	bl	80a5150 <__aeabi_fcmpgt>
 80a31e6:	b988      	cbnz	r0, 80a320c <_ZN19FuzzyRuleAntecedent8evaluateEv+0x18c>
 80a31e8:	e01f      	b.n	80a322a <_ZN19FuzzyRuleAntecedent8evaluateEv+0x1aa>
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(this->fuzzySet1->getPertinence() > 0.0 || this->fuzzySet2->getPertinence() > 0.0){
                        if(this->fuzzySet1->getPertinence() > this->fuzzySet2->getPertinence()){
 80a31ea:	68a0      	ldr	r0, [r4, #8]
 80a31ec:	f7ff fe67 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a31f0:	4605      	mov	r5, r0
 80a31f2:	68e0      	ldr	r0, [r4, #12]
 80a31f4:	f7ff fe63 	bl	80a2ebe <_ZN8FuzzySet13getPertinenceEv>
 80a31f8:	4601      	mov	r1, r0
 80a31fa:	4628      	mov	r0, r5
 80a31fc:	f001 ffa8 	bl	80a5150 <__aeabi_fcmpgt>
 80a3200:	2800      	cmp	r0, #0
 80a3202:	d1bc      	bne.n	80a317e <_ZN19FuzzyRuleAntecedent8evaluateEv+0xfe>
                            return this->fuzzySet1->getPertinence();
                        }else{
                            return this->fuzzySet2->getPertinence();
 80a3204:	68e0      	ldr	r0, [r4, #12]
 80a3206:	e7bb      	b.n	80a3180 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x100>
                    }
                    break;
                case OP_OR:
                    if(fuzzyRuleAntecedent1->evaluate() > 0.0 || fuzzyRuleAntecedent2->evaluate() > 0.0){
                        if(fuzzyRuleAntecedent1->evaluate() > fuzzyRuleAntecedent2->evaluate()){
                            return fuzzyRuleAntecedent1->evaluate();
 80a3208:	6924      	ldr	r4, [r4, #16]
 80a320a:	e73b      	b.n	80a3084 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x4>
                        return 0.0;
                    }
                    break;
                case OP_OR:
                    if(fuzzyRuleAntecedent1->evaluate() > 0.0 || fuzzyRuleAntecedent2->evaluate() > 0.0){
                        if(fuzzyRuleAntecedent1->evaluate() > fuzzyRuleAntecedent2->evaluate()){
 80a320c:	6920      	ldr	r0, [r4, #16]
 80a320e:	f7ff ff37 	bl	80a3080 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a3212:	4605      	mov	r5, r0
 80a3214:	6960      	ldr	r0, [r4, #20]
 80a3216:	f7ff ff33 	bl	80a3080 <_ZN19FuzzyRuleAntecedent8evaluateEv>
 80a321a:	4601      	mov	r1, r0
 80a321c:	4628      	mov	r0, r5
 80a321e:	f001 ff97 	bl	80a5150 <__aeabi_fcmpgt>
 80a3222:	2800      	cmp	r0, #0
 80a3224:	d1f0      	bne.n	80a3208 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x188>
                            return fuzzyRuleAntecedent1->evaluate();
                        }else{
                            return fuzzyRuleAntecedent2->evaluate();
 80a3226:	6964      	ldr	r4, [r4, #20]
 80a3228:	e72c      	b.n	80a3084 <_ZN19FuzzyRuleAntecedent8evaluateEv+0x4>
            break;
        default:
            return 0.0;
    }
    return 0.0;
 80a322a:	2000      	movs	r0, #0
 80a322c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a3230 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a3230:	b508      	push	{r3, lr}
 80a3232:	4b02      	ldr	r3, [pc, #8]	; (80a323c <HAL_Pin_Map+0xc>)
 80a3234:	681b      	ldr	r3, [r3, #0]
 80a3236:	681b      	ldr	r3, [r3, #0]
 80a3238:	9301      	str	r3, [sp, #4]
 80a323a:	bd08      	pop	{r3, pc}
 80a323c:	080601b0 	.word	0x080601b0

080a3240 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a3240:	b508      	push	{r3, lr}
 80a3242:	4b02      	ldr	r3, [pc, #8]	; (80a324c <HAL_Validate_Pin_Function+0xc>)
 80a3244:	681b      	ldr	r3, [r3, #0]
 80a3246:	685b      	ldr	r3, [r3, #4]
 80a3248:	9301      	str	r3, [sp, #4]
 80a324a:	bd08      	pop	{r3, pc}
 80a324c:	080601b0 	.word	0x080601b0

080a3250 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a3250:	b508      	push	{r3, lr}
 80a3252:	4b02      	ldr	r3, [pc, #8]	; (80a325c <HAL_Pin_Mode+0xc>)
 80a3254:	681b      	ldr	r3, [r3, #0]
 80a3256:	689b      	ldr	r3, [r3, #8]
 80a3258:	9301      	str	r3, [sp, #4]
 80a325a:	bd08      	pop	{r3, pc}
 80a325c:	080601b0 	.word	0x080601b0

080a3260 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a3260:	b508      	push	{r3, lr}
 80a3262:	4b02      	ldr	r3, [pc, #8]	; (80a326c <HAL_Get_Pin_Mode+0xc>)
 80a3264:	681b      	ldr	r3, [r3, #0]
 80a3266:	68db      	ldr	r3, [r3, #12]
 80a3268:	9301      	str	r3, [sp, #4]
 80a326a:	bd08      	pop	{r3, pc}
 80a326c:	080601b0 	.word	0x080601b0

080a3270 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a3270:	b508      	push	{r3, lr}
 80a3272:	4b02      	ldr	r3, [pc, #8]	; (80a327c <HAL_GPIO_Write+0xc>)
 80a3274:	681b      	ldr	r3, [r3, #0]
 80a3276:	691b      	ldr	r3, [r3, #16]
 80a3278:	9301      	str	r3, [sp, #4]
 80a327a:	bd08      	pop	{r3, pc}
 80a327c:	080601b0 	.word	0x080601b0

080a3280 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a3280:	b508      	push	{r3, lr}
 80a3282:	4b02      	ldr	r3, [pc, #8]	; (80a328c <HAL_GPIO_Read+0xc>)
 80a3284:	681b      	ldr	r3, [r3, #0]
 80a3286:	695b      	ldr	r3, [r3, #20]
 80a3288:	9301      	str	r3, [sp, #4]
 80a328a:	bd08      	pop	{r3, pc}
 80a328c:	080601b0 	.word	0x080601b0

080a3290 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a3290:	b508      	push	{r3, lr}
 80a3292:	4b02      	ldr	r3, [pc, #8]	; (80a329c <HAL_Interrupts_Attach+0xc>)
 80a3294:	681b      	ldr	r3, [r3, #0]
 80a3296:	699b      	ldr	r3, [r3, #24]
 80a3298:	9301      	str	r3, [sp, #4]
 80a329a:	bd08      	pop	{r3, pc}
 80a329c:	080601b0 	.word	0x080601b0

080a32a0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a32a0:	b508      	push	{r3, lr}
 80a32a2:	4b02      	ldr	r3, [pc, #8]	; (80a32ac <HAL_Interrupts_Detach+0xc>)
 80a32a4:	681b      	ldr	r3, [r3, #0]
 80a32a6:	69db      	ldr	r3, [r3, #28]
 80a32a8:	9301      	str	r3, [sp, #4]
 80a32aa:	bd08      	pop	{r3, pc}
 80a32ac:	080601b0 	.word	0x080601b0

080a32b0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a32b0:	b508      	push	{r3, lr}
 80a32b2:	4b02      	ldr	r3, [pc, #8]	; (80a32bc <HAL_SPI_Init+0xc>)
 80a32b4:	681b      	ldr	r3, [r3, #0]
 80a32b6:	69db      	ldr	r3, [r3, #28]
 80a32b8:	9301      	str	r3, [sp, #4]
 80a32ba:	bd08      	pop	{r3, pc}
 80a32bc:	080601b4 	.word	0x080601b4

080a32c0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a32c0:	b508      	push	{r3, lr}
 80a32c2:	4b02      	ldr	r3, [pc, #8]	; (80a32cc <HAL_SPI_Is_Enabled+0xc>)
 80a32c4:	681b      	ldr	r3, [r3, #0]
 80a32c6:	6a1b      	ldr	r3, [r3, #32]
 80a32c8:	9301      	str	r3, [sp, #4]
 80a32ca:	bd08      	pop	{r3, pc}
 80a32cc:	080601b4 	.word	0x080601b4

080a32d0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a32d0:	b508      	push	{r3, lr}
 80a32d2:	4b02      	ldr	r3, [pc, #8]	; (80a32dc <HAL_RNG_GetRandomNumber+0xc>)
 80a32d4:	681b      	ldr	r3, [r3, #0]
 80a32d6:	685b      	ldr	r3, [r3, #4]
 80a32d8:	9301      	str	r3, [sp, #4]
 80a32da:	bd08      	pop	{r3, pc}
 80a32dc:	0806019c 	.word	0x0806019c

080a32e0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a32e0:	b508      	push	{r3, lr}
 80a32e2:	4b02      	ldr	r3, [pc, #8]	; (80a32ec <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a32e4:	681b      	ldr	r3, [r3, #0]
 80a32e6:	695b      	ldr	r3, [r3, #20]
 80a32e8:	9301      	str	r3, [sp, #4]
 80a32ea:	bd08      	pop	{r3, pc}
 80a32ec:	0806019c 	.word	0x0806019c

080a32f0 <os_timer_create>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 80a32f0:	b508      	push	{r3, lr}
 80a32f2:	4b02      	ldr	r3, [pc, #8]	; (80a32fc <os_timer_create+0xc>)
 80a32f4:	681b      	ldr	r3, [r3, #0]
 80a32f6:	6a1b      	ldr	r3, [r3, #32]
 80a32f8:	9301      	str	r3, [sp, #4]
 80a32fa:	bd08      	pop	{r3, pc}
 80a32fc:	080601d0 	.word	0x080601d0

080a3300 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 80a3300:	b508      	push	{r3, lr}
 80a3302:	4b02      	ldr	r3, [pc, #8]	; (80a330c <os_timer_destroy+0xc>)
 80a3304:	681b      	ldr	r3, [r3, #0]
 80a3306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3308:	9301      	str	r3, [sp, #4]
 80a330a:	bd08      	pop	{r3, pc}
 80a330c:	080601d0 	.word	0x080601d0

080a3310 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 80a3310:	b508      	push	{r3, lr}
 80a3312:	4b02      	ldr	r3, [pc, #8]	; (80a331c <os_timer_get_id+0xc>)
 80a3314:	681b      	ldr	r3, [r3, #0]
 80a3316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3318:	9301      	str	r3, [sp, #4]
 80a331a:	bd08      	pop	{r3, pc}
 80a331c:	080601d0 	.word	0x080601d0

080a3320 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 80a3320:	b508      	push	{r3, lr}
 80a3322:	4b02      	ldr	r3, [pc, #8]	; (80a332c <os_timer_change+0xc>)
 80a3324:	681b      	ldr	r3, [r3, #0]
 80a3326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3328:	9301      	str	r3, [sp, #4]
 80a332a:	bd08      	pop	{r3, pc}
 80a332c:	080601d0 	.word	0x080601d0

080a3330 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a3330:	b508      	push	{r3, lr}
 80a3332:	4b02      	ldr	r3, [pc, #8]	; (80a333c <os_mutex_create+0xc>)
 80a3334:	681b      	ldr	r3, [r3, #0]
 80a3336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3338:	9301      	str	r3, [sp, #4]
 80a333a:	bd08      	pop	{r3, pc}
 80a333c:	080601d0 	.word	0x080601d0

080a3340 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a3340:	b508      	push	{r3, lr}
 80a3342:	4b02      	ldr	r3, [pc, #8]	; (80a334c <HAL_USART_Init+0xc>)
 80a3344:	681b      	ldr	r3, [r3, #0]
 80a3346:	699b      	ldr	r3, [r3, #24]
 80a3348:	9301      	str	r3, [sp, #4]
 80a334a:	bd08      	pop	{r3, pc}
 80a334c:	080601c4 	.word	0x080601c4

080a3350 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a3350:	b508      	push	{r3, lr}
 80a3352:	4b02      	ldr	r3, [pc, #8]	; (80a335c <HAL_USART_Write_Data+0xc>)
 80a3354:	681b      	ldr	r3, [r3, #0]
 80a3356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3358:	9301      	str	r3, [sp, #4]
 80a335a:	bd08      	pop	{r3, pc}
 80a335c:	080601c4 	.word	0x080601c4

080a3360 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a3360:	b508      	push	{r3, lr}
 80a3362:	4b02      	ldr	r3, [pc, #8]	; (80a336c <HAL_USART_Available_Data+0xc>)
 80a3364:	681b      	ldr	r3, [r3, #0]
 80a3366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3368:	9301      	str	r3, [sp, #4]
 80a336a:	bd08      	pop	{r3, pc}
 80a336c:	080601c4 	.word	0x080601c4

080a3370 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a3370:	b508      	push	{r3, lr}
 80a3372:	4b02      	ldr	r3, [pc, #8]	; (80a337c <HAL_USART_Read_Data+0xc>)
 80a3374:	681b      	ldr	r3, [r3, #0]
 80a3376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3378:	9301      	str	r3, [sp, #4]
 80a337a:	bd08      	pop	{r3, pc}
 80a337c:	080601c4 	.word	0x080601c4

080a3380 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a3380:	b508      	push	{r3, lr}
 80a3382:	4b02      	ldr	r3, [pc, #8]	; (80a338c <HAL_USART_Peek_Data+0xc>)
 80a3384:	681b      	ldr	r3, [r3, #0]
 80a3386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3388:	9301      	str	r3, [sp, #4]
 80a338a:	bd08      	pop	{r3, pc}
 80a338c:	080601c4 	.word	0x080601c4

080a3390 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a3390:	b508      	push	{r3, lr}
 80a3392:	4b02      	ldr	r3, [pc, #8]	; (80a339c <HAL_USART_Flush_Data+0xc>)
 80a3394:	681b      	ldr	r3, [r3, #0]
 80a3396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3398:	9301      	str	r3, [sp, #4]
 80a339a:	bd08      	pop	{r3, pc}
 80a339c:	080601c4 	.word	0x080601c4

080a33a0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a33a0:	b508      	push	{r3, lr}
 80a33a2:	4b02      	ldr	r3, [pc, #8]	; (80a33ac <HAL_USART_Is_Enabled+0xc>)
 80a33a4:	681b      	ldr	r3, [r3, #0]
 80a33a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a33a8:	9301      	str	r3, [sp, #4]
 80a33aa:	bd08      	pop	{r3, pc}
 80a33ac:	080601c4 	.word	0x080601c4

080a33b0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a33b0:	b508      	push	{r3, lr}
 80a33b2:	4b02      	ldr	r3, [pc, #8]	; (80a33bc <HAL_USART_Available_Data_For_Write+0xc>)
 80a33b4:	681b      	ldr	r3, [r3, #0]
 80a33b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a33b8:	9301      	str	r3, [sp, #4]
 80a33ba:	bd08      	pop	{r3, pc}
 80a33bc:	080601c4 	.word	0x080601c4

080a33c0 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a33c0:	b508      	push	{r3, lr}
 80a33c2:	4b02      	ldr	r3, [pc, #8]	; (80a33cc <HAL_I2C_Set_Speed+0xc>)
 80a33c4:	681b      	ldr	r3, [r3, #0]
 80a33c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a33c8:	9301      	str	r3, [sp, #4]
 80a33ca:	bd08      	pop	{r3, pc}
 80a33cc:	080601ac 	.word	0x080601ac

080a33d0 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a33d0:	b508      	push	{r3, lr}
 80a33d2:	4b02      	ldr	r3, [pc, #8]	; (80a33dc <HAL_I2C_Begin+0xc>)
 80a33d4:	681b      	ldr	r3, [r3, #0]
 80a33d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a33d8:	9301      	str	r3, [sp, #4]
 80a33da:	bd08      	pop	{r3, pc}
 80a33dc:	080601ac 	.word	0x080601ac

080a33e0 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a33e0:	b508      	push	{r3, lr}
 80a33e2:	4b02      	ldr	r3, [pc, #8]	; (80a33ec <HAL_I2C_Request_Data+0xc>)
 80a33e4:	681b      	ldr	r3, [r3, #0]
 80a33e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a33e8:	9301      	str	r3, [sp, #4]
 80a33ea:	bd08      	pop	{r3, pc}
 80a33ec:	080601ac 	.word	0x080601ac

080a33f0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a33f0:	b508      	push	{r3, lr}
 80a33f2:	4b02      	ldr	r3, [pc, #8]	; (80a33fc <HAL_I2C_Begin_Transmission+0xc>)
 80a33f4:	681b      	ldr	r3, [r3, #0]
 80a33f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a33f8:	9301      	str	r3, [sp, #4]
 80a33fa:	bd08      	pop	{r3, pc}
 80a33fc:	080601ac 	.word	0x080601ac

080a3400 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a3400:	b508      	push	{r3, lr}
 80a3402:	4b02      	ldr	r3, [pc, #8]	; (80a340c <HAL_I2C_End_Transmission+0xc>)
 80a3404:	681b      	ldr	r3, [r3, #0]
 80a3406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a3408:	9301      	str	r3, [sp, #4]
 80a340a:	bd08      	pop	{r3, pc}
 80a340c:	080601ac 	.word	0x080601ac

080a3410 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a3410:	b508      	push	{r3, lr}
 80a3412:	4b02      	ldr	r3, [pc, #8]	; (80a341c <HAL_I2C_Write_Data+0xc>)
 80a3414:	681b      	ldr	r3, [r3, #0]
 80a3416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a3418:	9301      	str	r3, [sp, #4]
 80a341a:	bd08      	pop	{r3, pc}
 80a341c:	080601ac 	.word	0x080601ac

080a3420 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a3420:	b508      	push	{r3, lr}
 80a3422:	4b02      	ldr	r3, [pc, #8]	; (80a342c <HAL_I2C_Available_Data+0xc>)
 80a3424:	681b      	ldr	r3, [r3, #0]
 80a3426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a3428:	9301      	str	r3, [sp, #4]
 80a342a:	bd08      	pop	{r3, pc}
 80a342c:	080601ac 	.word	0x080601ac

080a3430 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a3430:	b508      	push	{r3, lr}
 80a3432:	4b02      	ldr	r3, [pc, #8]	; (80a343c <HAL_I2C_Read_Data+0xc>)
 80a3434:	681b      	ldr	r3, [r3, #0]
 80a3436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a3438:	9301      	str	r3, [sp, #4]
 80a343a:	bd08      	pop	{r3, pc}
 80a343c:	080601ac 	.word	0x080601ac

080a3440 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a3440:	b508      	push	{r3, lr}
 80a3442:	4b02      	ldr	r3, [pc, #8]	; (80a344c <HAL_I2C_Peek_Data+0xc>)
 80a3444:	681b      	ldr	r3, [r3, #0]
 80a3446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a3448:	9301      	str	r3, [sp, #4]
 80a344a:	bd08      	pop	{r3, pc}
 80a344c:	080601ac 	.word	0x080601ac

080a3450 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a3450:	b508      	push	{r3, lr}
 80a3452:	4b02      	ldr	r3, [pc, #8]	; (80a345c <HAL_I2C_Flush_Data+0xc>)
 80a3454:	681b      	ldr	r3, [r3, #0]
 80a3456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a3458:	9301      	str	r3, [sp, #4]
 80a345a:	bd08      	pop	{r3, pc}
 80a345c:	080601ac 	.word	0x080601ac

080a3460 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a3460:	b508      	push	{r3, lr}
 80a3462:	4b02      	ldr	r3, [pc, #8]	; (80a346c <HAL_I2C_Is_Enabled+0xc>)
 80a3464:	681b      	ldr	r3, [r3, #0]
 80a3466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a3468:	9301      	str	r3, [sp, #4]
 80a346a:	bd08      	pop	{r3, pc}
 80a346c:	080601ac 	.word	0x080601ac

080a3470 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a3470:	b508      	push	{r3, lr}
 80a3472:	4b03      	ldr	r3, [pc, #12]	; (80a3480 <HAL_I2C_Init+0x10>)
 80a3474:	681b      	ldr	r3, [r3, #0]
 80a3476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a347a:	9301      	str	r3, [sp, #4]
 80a347c:	bd08      	pop	{r3, pc}
 80a347e:	0000      	.short	0x0000
 80a3480:	080601ac 	.word	0x080601ac

080a3484 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
 80a3484:	b508      	push	{r3, lr}
 80a3486:	4b02      	ldr	r3, [pc, #8]	; (80a3490 <HAL_Servo_Attach+0xc>)
 80a3488:	681b      	ldr	r3, [r3, #0]
 80a348a:	691b      	ldr	r3, [r3, #16]
 80a348c:	9301      	str	r3, [sp, #4]
 80a348e:	bd08      	pop	{r3, pc}
 80a3490:	080601a8 	.word	0x080601a8

080a3494 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
 80a3494:	b508      	push	{r3, lr}
 80a3496:	4b02      	ldr	r3, [pc, #8]	; (80a34a0 <HAL_Servo_Detach+0xc>)
 80a3498:	681b      	ldr	r3, [r3, #0]
 80a349a:	695b      	ldr	r3, [r3, #20]
 80a349c:	9301      	str	r3, [sp, #4]
 80a349e:	bd08      	pop	{r3, pc}
 80a34a0:	080601a8 	.word	0x080601a8

080a34a4 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
 80a34a4:	b508      	push	{r3, lr}
 80a34a6:	4b02      	ldr	r3, [pc, #8]	; (80a34b0 <HAL_Servo_Write_Pulse_Width+0xc>)
 80a34a8:	681b      	ldr	r3, [r3, #0]
 80a34aa:	699b      	ldr	r3, [r3, #24]
 80a34ac:	9301      	str	r3, [sp, #4]
 80a34ae:	bd08      	pop	{r3, pc}
 80a34b0:	080601a8 	.word	0x080601a8

080a34b4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a34b4:	b508      	push	{r3, lr}
 80a34b6:	4b02      	ldr	r3, [pc, #8]	; (80a34c0 <HAL_USB_USART_Init+0xc>)
 80a34b8:	681b      	ldr	r3, [r3, #0]
 80a34ba:	681b      	ldr	r3, [r3, #0]
 80a34bc:	9301      	str	r3, [sp, #4]
 80a34be:	bd08      	pop	{r3, pc}
 80a34c0:	080601d8 	.word	0x080601d8

080a34c4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a34c4:	b508      	push	{r3, lr}
 80a34c6:	4b02      	ldr	r3, [pc, #8]	; (80a34d0 <HAL_USB_USART_Begin+0xc>)
 80a34c8:	681b      	ldr	r3, [r3, #0]
 80a34ca:	685b      	ldr	r3, [r3, #4]
 80a34cc:	9301      	str	r3, [sp, #4]
 80a34ce:	bd08      	pop	{r3, pc}
 80a34d0:	080601d8 	.word	0x080601d8

080a34d4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a34d4:	b508      	push	{r3, lr}
 80a34d6:	4b02      	ldr	r3, [pc, #8]	; (80a34e0 <HAL_USB_USART_Available_Data+0xc>)
 80a34d8:	681b      	ldr	r3, [r3, #0]
 80a34da:	691b      	ldr	r3, [r3, #16]
 80a34dc:	9301      	str	r3, [sp, #4]
 80a34de:	bd08      	pop	{r3, pc}
 80a34e0:	080601d8 	.word	0x080601d8

080a34e4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a34e4:	b508      	push	{r3, lr}
 80a34e6:	4b02      	ldr	r3, [pc, #8]	; (80a34f0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a34e8:	681b      	ldr	r3, [r3, #0]
 80a34ea:	695b      	ldr	r3, [r3, #20]
 80a34ec:	9301      	str	r3, [sp, #4]
 80a34ee:	bd08      	pop	{r3, pc}
 80a34f0:	080601d8 	.word	0x080601d8

080a34f4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a34f4:	b508      	push	{r3, lr}
 80a34f6:	4b02      	ldr	r3, [pc, #8]	; (80a3500 <HAL_USB_USART_Receive_Data+0xc>)
 80a34f8:	681b      	ldr	r3, [r3, #0]
 80a34fa:	699b      	ldr	r3, [r3, #24]
 80a34fc:	9301      	str	r3, [sp, #4]
 80a34fe:	bd08      	pop	{r3, pc}
 80a3500:	080601d8 	.word	0x080601d8

080a3504 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3504:	b508      	push	{r3, lr}
 80a3506:	4b02      	ldr	r3, [pc, #8]	; (80a3510 <HAL_USB_USART_Send_Data+0xc>)
 80a3508:	681b      	ldr	r3, [r3, #0]
 80a350a:	69db      	ldr	r3, [r3, #28]
 80a350c:	9301      	str	r3, [sp, #4]
 80a350e:	bd08      	pop	{r3, pc}
 80a3510:	080601d8 	.word	0x080601d8

080a3514 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a3514:	b508      	push	{r3, lr}
 80a3516:	4b02      	ldr	r3, [pc, #8]	; (80a3520 <HAL_USB_USART_Flush_Data+0xc>)
 80a3518:	681b      	ldr	r3, [r3, #0]
 80a351a:	6a1b      	ldr	r3, [r3, #32]
 80a351c:	9301      	str	r3, [sp, #4]
 80a351e:	bd08      	pop	{r3, pc}
 80a3520:	080601d8 	.word	0x080601d8

080a3524 <LED_SetSignalingColor>:
#include "dynalib.h"

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
 80a3524:	b508      	push	{r3, lr}
 80a3526:	4b02      	ldr	r3, [pc, #8]	; (80a3530 <LED_SetSignalingColor+0xc>)
 80a3528:	681b      	ldr	r3, [r3, #0]
 80a352a:	685b      	ldr	r3, [r3, #4]
 80a352c:	9301      	str	r3, [sp, #4]
 80a352e:	bd08      	pop	{r3, pc}
 80a3530:	080201a8 	.word	0x080201a8

080a3534 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 80a3534:	b508      	push	{r3, lr}
 80a3536:	4b02      	ldr	r3, [pc, #8]	; (80a3540 <LED_Signaling_Start+0xc>)
 80a3538:	681b      	ldr	r3, [r3, #0]
 80a353a:	689b      	ldr	r3, [r3, #8]
 80a353c:	9301      	str	r3, [sp, #4]
 80a353e:	bd08      	pop	{r3, pc}
 80a3540:	080201a8 	.word	0x080201a8

080a3544 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80a3544:	b508      	push	{r3, lr}
 80a3546:	4b02      	ldr	r3, [pc, #8]	; (80a3550 <LED_Signaling_Stop+0xc>)
 80a3548:	681b      	ldr	r3, [r3, #0]
 80a354a:	68db      	ldr	r3, [r3, #12]
 80a354c:	9301      	str	r3, [sp, #4]
 80a354e:	bd08      	pop	{r3, pc}
 80a3550:	080201a8 	.word	0x080201a8

080a3554 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80a3554:	b508      	push	{r3, lr}
 80a3556:	4b02      	ldr	r3, [pc, #8]	; (80a3560 <LED_RGB_IsOverRidden+0xc>)
 80a3558:	681b      	ldr	r3, [r3, #0]
 80a355a:	699b      	ldr	r3, [r3, #24]
 80a355c:	9301      	str	r3, [sp, #4]
 80a355e:	bd08      	pop	{r3, pc}
 80a3560:	080201a8 	.word	0x080201a8

080a3564 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
 80a3564:	b508      	push	{r3, lr}
 80a3566:	4b02      	ldr	r3, [pc, #8]	; (80a3570 <LED_On+0xc>)
 80a3568:	681b      	ldr	r3, [r3, #0]
 80a356a:	69db      	ldr	r3, [r3, #28]
 80a356c:	9301      	str	r3, [sp, #4]
 80a356e:	bd08      	pop	{r3, pc}
 80a3570:	080201a8 	.word	0x080201a8

080a3574 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a3574:	b508      	push	{r3, lr}
 80a3576:	4b02      	ldr	r3, [pc, #8]	; (80a3580 <set_system_mode+0xc>)
 80a3578:	681b      	ldr	r3, [r3, #0]
 80a357a:	685b      	ldr	r3, [r3, #4]
 80a357c:	9301      	str	r3, [sp, #4]
 80a357e:	bd08      	pop	{r3, pc}
 80a3580:	080601a4 	.word	0x080601a4

080a3584 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a3584:	b508      	push	{r3, lr}
 80a3586:	4b02      	ldr	r3, [pc, #8]	; (80a3590 <system_delay_ms+0xc>)
 80a3588:	681b      	ldr	r3, [r3, #0]
 80a358a:	695b      	ldr	r3, [r3, #20]
 80a358c:	9301      	str	r3, [sp, #4]
 80a358e:	bd08      	pop	{r3, pc}
 80a3590:	080601a4 	.word	0x080601a4

080a3594 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a3594:	b508      	push	{r3, lr}
 80a3596:	4b02      	ldr	r3, [pc, #8]	; (80a35a0 <system_thread_set_state+0xc>)
 80a3598:	681b      	ldr	r3, [r3, #0]
 80a359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a359c:	9301      	str	r3, [sp, #4]
 80a359e:	bd08      	pop	{r3, pc}
 80a35a0:	080601a4 	.word	0x080601a4

080a35a4 <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80a35a4:	b508      	push	{r3, lr}
 80a35a6:	4b02      	ldr	r3, [pc, #8]	; (80a35b0 <system_set_usb_request_app_handler+0xc>)
 80a35a8:	681b      	ldr	r3, [r3, #0]
 80a35aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a35ac:	9301      	str	r3, [sp, #4]
 80a35ae:	bd08      	pop	{r3, pc}
 80a35b0:	080601a4 	.word	0x080601a4

080a35b4 <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80a35b4:	b508      	push	{r3, lr}
 80a35b6:	4b02      	ldr	r3, [pc, #8]	; (80a35c0 <system_set_usb_request_result+0xc>)
 80a35b8:	681b      	ldr	r3, [r3, #0]
 80a35ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a35bc:	9301      	str	r3, [sp, #4]
 80a35be:	bd08      	pop	{r3, pc}
 80a35c0:	080601a4 	.word	0x080601a4

080a35c4 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a35c4:	b508      	push	{r3, lr}
 80a35c6:	4b02      	ldr	r3, [pc, #8]	; (80a35d0 <network_ready+0xc>)
 80a35c8:	681b      	ldr	r3, [r3, #0]
 80a35ca:	691b      	ldr	r3, [r3, #16]
 80a35cc:	9301      	str	r3, [sp, #4]
 80a35ce:	bd08      	pop	{r3, pc}
 80a35d0:	080601c8 	.word	0x080601c8

080a35d4 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a35d4:	b508      	push	{r3, lr}
 80a35d6:	4b02      	ldr	r3, [pc, #8]	; (80a35e0 <malloc+0xc>)
 80a35d8:	681b      	ldr	r3, [r3, #0]
 80a35da:	681b      	ldr	r3, [r3, #0]
 80a35dc:	9301      	str	r3, [sp, #4]
 80a35de:	bd08      	pop	{r3, pc}
 80a35e0:	080601a0 	.word	0x080601a0

080a35e4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a35e4:	b508      	push	{r3, lr}
 80a35e6:	4b02      	ldr	r3, [pc, #8]	; (80a35f0 <free+0xc>)
 80a35e8:	681b      	ldr	r3, [r3, #0]
 80a35ea:	685b      	ldr	r3, [r3, #4]
 80a35ec:	9301      	str	r3, [sp, #4]
 80a35ee:	bd08      	pop	{r3, pc}
 80a35f0:	080601a0 	.word	0x080601a0

080a35f4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a35f4:	b508      	push	{r3, lr}
 80a35f6:	4b02      	ldr	r3, [pc, #8]	; (80a3600 <realloc+0xc>)
 80a35f8:	681b      	ldr	r3, [r3, #0]
 80a35fa:	689b      	ldr	r3, [r3, #8]
 80a35fc:	9301      	str	r3, [sp, #4]
 80a35fe:	bd08      	pop	{r3, pc}
 80a3600:	080601a0 	.word	0x080601a0

080a3604 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a3604:	4770      	bx	lr

080a3606 <_ZN8SPIClassD0Ev>:
 80a3606:	b510      	push	{r4, lr}
 80a3608:	4604      	mov	r4, r0
 80a360a:	f7fc fd48 	bl	80a009e <_ZdlPv>
 80a360e:	4620      	mov	r0, r4
 80a3610:	bd10      	pop	{r4, pc}
	...

080a3614 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a3614:	b570      	push	{r4, r5, r6, lr}
 80a3616:	4604      	mov	r4, r0
 80a3618:	460e      	mov	r6, r1
 80a361a:	4b07      	ldr	r3, [pc, #28]	; (80a3638 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
	Mutex(os_mutex_t handle) : handle_(handle) {}

	/**
	 * Creates a new mutex.
	 */
	Mutex() : handle_(nullptr)
 80a361c:	2500      	movs	r5, #0
 80a361e:	6003      	str	r3, [r0, #0]
 80a3620:	f840 5f0c 	str.w	r5, [r0, #12]!
	{
		os_mutex_create(&handle_);
 80a3624:	f7ff fe84 	bl	80a3330 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a3628:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a362a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a362c:	f7ff fe40 	bl	80a32b0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a3630:	60a5      	str	r5, [r4, #8]
}
 80a3632:	4620      	mov	r0, r4
 80a3634:	bd70      	pop	{r4, r5, r6, pc}
 80a3636:	bf00      	nop
 80a3638:	080a52f0 	.word	0x080a52f0

080a363c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a363c:	7900      	ldrb	r0, [r0, #4]
 80a363e:	f7ff be3f 	b.w	80a32c0 <HAL_SPI_Is_Enabled>

080a3642 <_ZN5Servo17writeMicrosecondsEt>:
  // write(179).
  return a == this->minAngle || a == this->maxAngle ? a : a + 1;
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{
 80a3642:	f9b0 2000 	ldrsh.w	r2, [r0]

  if (!this->attached())
 80a3646:	1c53      	adds	r3, r2, #1
 80a3648:	d00b      	beq.n	80a3662 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
 80a364a:	8843      	ldrh	r3, [r0, #2]
 80a364c:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 80a364e:	428b      	cmp	r3, r1
 80a3650:	d803      	bhi.n	80a365a <_ZN5Servo17writeMicrosecondsEt+0x18>
 80a3652:	4288      	cmp	r0, r1
 80a3654:	4603      	mov	r3, r0
 80a3656:	bf28      	it	cs
 80a3658:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
 80a365a:	4619      	mov	r1, r3
 80a365c:	b290      	uxth	r0, r2
 80a365e:	f7ff bf21 	b.w	80a34a4 <HAL_Servo_Write_Pulse_Width>
 80a3662:	4770      	bx	lr

080a3664 <_ZN5Servo11resetFieldsEv>:
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a3664:	f64f 73ff 	movw	r3, #65535	; 0xffff
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
 80a3668:	22b4      	movs	r2, #180	; 0xb4
 80a366a:	8102      	strh	r2, [r0, #8]
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a366c:	f44f 7208 	mov.w	r2, #544	; 0x220
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a3670:	8003      	strh	r3, [r0, #0]
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a3672:	8042      	strh	r2, [r0, #2]
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a3674:	2300      	movs	r3, #0
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a3676:	f44f 6216 	mov.w	r2, #2400	; 0x960
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a367a:	80c3      	strh	r3, [r0, #6]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a367c:	8082      	strh	r2, [r0, #4]
  this->trim = 0;
 80a367e:	60c3      	str	r3, [r0, #12]
 80a3680:	4770      	bx	lr

080a3682 <_ZN5ServoC1Ev>:
#define ANGLE_TO_US(a)    ((uint16_t)(map((a), this->minAngle, this->maxAngle, \
                                        this->minPW, this->maxPW)))
#define US_TO_ANGLE(us)   ((int16_t)(map((us), this->minPW, this->maxPW,  \
                                       this->minAngle, this->maxAngle)))

Servo::Servo()
 80a3682:	b508      	push	{r3, lr}
{
  this->resetFields();
 80a3684:	f7ff ffee 	bl	80a3664 <_ZN5Servo11resetFieldsEv>
}
 80a3688:	bd08      	pop	{r3, pc}

080a368a <_ZN5Servo6detachEv>:

  return true;
}

bool Servo::detach()
{
 80a368a:	b510      	push	{r4, lr}
 80a368c:	4604      	mov	r4, r0
 80a368e:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
 80a3692:	1c43      	adds	r3, r0, #1
 80a3694:	d007      	beq.n	80a36a6 <_ZN5Servo6detachEv+0x1c>
  {
    return false;
  }

  HAL_Servo_Detach(this->pin);
 80a3696:	b280      	uxth	r0, r0
 80a3698:	f7ff fefc 	bl	80a3494 <HAL_Servo_Detach>

  this->resetFields();
 80a369c:	4620      	mov	r0, r4
 80a369e:	f7ff ffe1 	bl	80a3664 <_ZN5Servo11resetFieldsEv>

  return true;
 80a36a2:	2001      	movs	r0, #1
 80a36a4:	bd10      	pop	{r4, pc}

bool Servo::detach()
{
  if (!this->attached())
  {
    return false;
 80a36a6:	2000      	movs	r0, #0
  HAL_Servo_Detach(this->pin);

  this->resetFields();

  return true;
}
 80a36a8:	bd10      	pop	{r4, pc}

080a36aa <_ZN5Servo6attachEtttss>:
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a36aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a36ae:	460d      	mov	r5, r1
 80a36b0:	4604      	mov	r4, r0

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a36b2:	2102      	movs	r1, #2
 80a36b4:	4628      	mov	r0, r5
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a36b6:	4690      	mov	r8, r2
 80a36b8:	461f      	mov	r7, r3

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a36ba:	f7ff fdc1 	bl	80a3240 <HAL_Validate_Pin_Function>
 80a36be:	2802      	cmp	r0, #2
 80a36c0:	d001      	beq.n	80a36c6 <_ZN5Servo6attachEtttss+0x1c>
  {
    return false;
 80a36c2:	2600      	movs	r6, #0
 80a36c4:	e019      	b.n	80a36fa <_ZN5Servo6attachEtttss+0x50>
  }

  // Safety check
  if (!pinAvailable(pin))
 80a36c6:	4628      	mov	r0, r5
 80a36c8:	f000 fbcc 	bl	80a3e64 <pinAvailable>
 80a36cc:	4606      	mov	r6, r0
 80a36ce:	2800      	cmp	r0, #0
 80a36d0:	d0f7      	beq.n	80a36c2 <_ZN5Servo6attachEtttss+0x18>
  {
    return false;
  }

  if (this->attached())
 80a36d2:	f9b4 3000 	ldrsh.w	r3, [r4]
 80a36d6:	3301      	adds	r3, #1
 80a36d8:	d002      	beq.n	80a36e0 <_ZN5Servo6attachEtttss+0x36>
  {
    this->detach();
 80a36da:	4620      	mov	r0, r4
 80a36dc:	f7ff ffd5 	bl	80a368a <_ZN5Servo6detachEv>
  }

  this->pin = pin;
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a36e0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  if (this->attached())
  {
    this->detach();
  }

  this->pin = pin;
 80a36e4:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a36e6:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
 80a36e8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  {
    this->detach();
  }

  this->pin = pin;
  this->minPW = minPW;
 80a36ec:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
 80a36f0:	80a7      	strh	r7, [r4, #4]
  this->minAngle = minAngle;
  this->maxAngle = maxAngle;
 80a36f2:	8123      	strh	r3, [r4, #8]

  HAL_Servo_Attach(this->pin);
 80a36f4:	4628      	mov	r0, r5
 80a36f6:	f7ff fec5 	bl	80a3484 <HAL_Servo_Attach>

  return true;
}
 80a36fa:	4630      	mov	r0, r6
 80a36fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3700 <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a3700:	2000      	movs	r0, #0
 80a3702:	f7ff bf37 	b.w	80a3574 <set_system_mode>

080a3706 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a3706:	b510      	push	{r4, lr}
 80a3708:	4604      	mov	r4, r0
{
	free(buffer);
 80a370a:	6800      	ldr	r0, [r0, #0]
 80a370c:	f7ff ff6a 	bl	80a35e4 <free>
}
 80a3710:	4620      	mov	r0, r4
 80a3712:	bd10      	pop	{r4, pc}

080a3714 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a3714:	b510      	push	{r4, lr}
 80a3716:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a3718:	6800      	ldr	r0, [r0, #0]
 80a371a:	b108      	cbz	r0, 80a3720 <_ZN6String10invalidateEv+0xc>
 80a371c:	f7ff ff62 	bl	80a35e4 <free>
	buffer = NULL;
 80a3720:	2300      	movs	r3, #0
 80a3722:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a3724:	60a3      	str	r3, [r4, #8]
 80a3726:	6063      	str	r3, [r4, #4]
 80a3728:	bd10      	pop	{r4, pc}

080a372a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a372a:	b538      	push	{r3, r4, r5, lr}
 80a372c:	4604      	mov	r4, r0
 80a372e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a3730:	6800      	ldr	r0, [r0, #0]
 80a3732:	3101      	adds	r1, #1
 80a3734:	f7ff ff5e 	bl	80a35f4 <realloc>
	if (newbuffer) {
 80a3738:	b110      	cbz	r0, 80a3740 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a373a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a373e:	2001      	movs	r0, #1
	}
	return 0;
}
 80a3740:	bd38      	pop	{r3, r4, r5, pc}

080a3742 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a3742:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a3744:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a3746:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a3748:	b113      	cbz	r3, 80a3750 <_ZN6String7reserveEj+0xe>
 80a374a:	6843      	ldr	r3, [r0, #4]
 80a374c:	428b      	cmp	r3, r1
 80a374e:	d207      	bcs.n	80a3760 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a3750:	4620      	mov	r0, r4
 80a3752:	f7ff ffea 	bl	80a372a <_ZN6String12changeBufferEj>
 80a3756:	b120      	cbz	r0, 80a3762 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a3758:	68a3      	ldr	r3, [r4, #8]
 80a375a:	b90b      	cbnz	r3, 80a3760 <_ZN6String7reserveEj+0x1e>
 80a375c:	6822      	ldr	r2, [r4, #0]
 80a375e:	7013      	strb	r3, [r2, #0]
 80a3760:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a3762:	bd10      	pop	{r4, pc}

080a3764 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a3764:	b570      	push	{r4, r5, r6, lr}
 80a3766:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a3768:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a376a:	4604      	mov	r4, r0
 80a376c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a376e:	f7ff ffe8 	bl	80a3742 <_ZN6String7reserveEj>
 80a3772:	b918      	cbnz	r0, 80a377c <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a3774:	4620      	mov	r0, r4
 80a3776:	f7ff ffcd 	bl	80a3714 <_ZN6String10invalidateEv>
		return *this;
 80a377a:	e009      	b.n	80a3790 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a377c:	462a      	mov	r2, r5
 80a377e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a3780:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a3782:	6820      	ldr	r0, [r4, #0]
 80a3784:	f001 fd1c 	bl	80a51c0 <memcpy>
	buffer[len] = 0;
 80a3788:	6822      	ldr	r2, [r4, #0]
 80a378a:	68a3      	ldr	r3, [r4, #8]
 80a378c:	2100      	movs	r1, #0
 80a378e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a3790:	4620      	mov	r0, r4
 80a3792:	bd70      	pop	{r4, r5, r6, pc}

080a3794 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3794:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3796:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3798:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a379a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a379c:	6043      	str	r3, [r0, #4]
	len = 0;
 80a379e:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a37a0:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a37a2:	460d      	mov	r5, r1
 80a37a4:	b139      	cbz	r1, 80a37b6 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a37a6:	4608      	mov	r0, r1
 80a37a8:	f001 fd1d 	bl	80a51e6 <strlen>
 80a37ac:	4629      	mov	r1, r5
 80a37ae:	4602      	mov	r2, r0
 80a37b0:	4620      	mov	r0, r4
 80a37b2:	f7ff ffd7 	bl	80a3764 <_ZN6String4copyEPKcj>
}
 80a37b6:	4620      	mov	r0, r4
 80a37b8:	bd38      	pop	{r3, r4, r5, pc}

080a37ba <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a37ba:	b538      	push	{r3, r4, r5, lr}
 80a37bc:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a37be:	460c      	mov	r4, r1
 80a37c0:	b141      	cbz	r1, 80a37d4 <_ZN6StringaSEPKc+0x1a>
 80a37c2:	4608      	mov	r0, r1
 80a37c4:	f001 fd0f 	bl	80a51e6 <strlen>
 80a37c8:	4621      	mov	r1, r4
 80a37ca:	4602      	mov	r2, r0
 80a37cc:	4628      	mov	r0, r5
 80a37ce:	f7ff ffc9 	bl	80a3764 <_ZN6String4copyEPKcj>
 80a37d2:	e001      	b.n	80a37d8 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a37d4:	f7ff ff9e 	bl	80a3714 <_ZN6String10invalidateEv>

	return *this;
}
 80a37d8:	4628      	mov	r0, r5
 80a37da:	bd38      	pop	{r3, r4, r5, pc}

080a37dc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a37dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a37de:	4606      	mov	r6, r0
 80a37e0:	460d      	mov	r5, r1
 80a37e2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a37e4:	2400      	movs	r4, #0
  while (size--) {
 80a37e6:	42bd      	cmp	r5, r7
 80a37e8:	d00c      	beq.n	80a3804 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a37ea:	6833      	ldr	r3, [r6, #0]
 80a37ec:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a37f0:	689b      	ldr	r3, [r3, #8]
 80a37f2:	4630      	mov	r0, r6
 80a37f4:	4798      	blx	r3
     if (chunk>=0)
 80a37f6:	2800      	cmp	r0, #0
 80a37f8:	db01      	blt.n	80a37fe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a37fa:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a37fc:	e7f3      	b.n	80a37e6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a37fe:	2c00      	cmp	r4, #0
 80a3800:	bf08      	it	eq
 80a3802:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a3804:	4620      	mov	r0, r4
 80a3806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3808 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a3808:	b570      	push	{r4, r5, r6, lr}
 80a380a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a380c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a380e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a3810:	b149      	cbz	r1, 80a3826 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a3812:	f001 fce8 	bl	80a51e6 <strlen>
 80a3816:	682b      	ldr	r3, [r5, #0]
 80a3818:	4602      	mov	r2, r0
 80a381a:	4621      	mov	r1, r4
 80a381c:	4628      	mov	r0, r5
    }
 80a381e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a3822:	68db      	ldr	r3, [r3, #12]
 80a3824:	4718      	bx	r3
    }
 80a3826:	bd70      	pop	{r4, r5, r6, pc}

080a3828 <_ZN5Print5printEPKc>:
 80a3828:	b508      	push	{r3, lr}
 80a382a:	f7ff ffed 	bl	80a3808 <_ZN5Print5writeEPKc>
 80a382e:	bd08      	pop	{r3, pc}

080a3830 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a3830:	6803      	ldr	r3, [r0, #0]
 80a3832:	689b      	ldr	r3, [r3, #8]
 80a3834:	4718      	bx	r3

080a3836 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a3836:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a3838:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a383a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a383c:	f7ff fff8 	bl	80a3830 <_ZN5Print5printEc>
  n += print('\n');
 80a3840:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a3842:	4604      	mov	r4, r0
  n += print('\n');
 80a3844:	4628      	mov	r0, r5
 80a3846:	f7ff fff3 	bl	80a3830 <_ZN5Print5printEc>
  return n;
}
 80a384a:	4420      	add	r0, r4
 80a384c:	bd38      	pop	{r3, r4, r5, pc}

080a384e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a384e:	b538      	push	{r3, r4, r5, lr}
 80a3850:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3852:	f7ff ffd9 	bl	80a3808 <_ZN5Print5writeEPKc>
 80a3856:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a3858:	4628      	mov	r0, r5
 80a385a:	f7ff ffec 	bl	80a3836 <_ZN5Print7printlnEv>
  return n;
}
 80a385e:	4420      	add	r0, r4
 80a3860:	bd38      	pop	{r3, r4, r5, pc}

080a3862 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a3862:	2a01      	cmp	r2, #1
 80a3864:	bf98      	it	ls
 80a3866:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a3868:	b530      	push	{r4, r5, lr}
 80a386a:	460b      	mov	r3, r1
 80a386c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a386e:	2100      	movs	r1, #0
 80a3870:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a3874:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a3878:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a387c:	fb05 3312 	mls	r3, r5, r2, r3
 80a3880:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a3882:	2b09      	cmp	r3, #9
 80a3884:	bf94      	ite	ls
 80a3886:	3330      	addls	r3, #48	; 0x30
 80a3888:	3337      	addhi	r3, #55	; 0x37
 80a388a:	b2db      	uxtb	r3, r3
 80a388c:	4621      	mov	r1, r4
 80a388e:	f804 3901 	strb.w	r3, [r4], #-1
 80a3892:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a3894:	2d00      	cmp	r5, #0
 80a3896:	d1ef      	bne.n	80a3878 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a3898:	f7ff ffb6 	bl	80a3808 <_ZN5Print5writeEPKc>
}
 80a389c:	b00b      	add	sp, #44	; 0x2c
 80a389e:	bd30      	pop	{r4, r5, pc}

080a38a0 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a38a0:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a38a2:	b922      	cbnz	r2, 80a38ae <_ZN5Print5printEmi+0xe>
 80a38a4:	6803      	ldr	r3, [r0, #0]
 80a38a6:	b2c9      	uxtb	r1, r1
 80a38a8:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a38aa:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a38ac:	4718      	bx	r3
  else return printNumber(n, base);
 80a38ae:	b2d2      	uxtb	r2, r2
}
 80a38b0:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a38b2:	f7ff bfd6 	b.w	80a3862 <_ZN5Print11printNumberEmh>

080a38b6 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a38b6:	f7ff bff3 	b.w	80a38a0 <_ZN5Print5printEmi>
	...

080a38bc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a38bc:	4a01      	ldr	r2, [pc, #4]	; (80a38c4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a38be:	4b02      	ldr	r3, [pc, #8]	; (80a38c8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a38c0:	601a      	str	r2, [r3, #0]
 80a38c2:	4770      	bx	lr
 80a38c4:	080a53b3 	.word	0x080a53b3
 80a38c8:	20000410 	.word	0x20000410

080a38cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a38cc:	4b02      	ldr	r3, [pc, #8]	; (80a38d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a38ce:	681a      	ldr	r2, [r3, #0]
 80a38d0:	4b02      	ldr	r3, [pc, #8]	; (80a38dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a38d2:	601a      	str	r2, [r3, #0]
 80a38d4:	4770      	bx	lr
 80a38d6:	bf00      	nop
 80a38d8:	20000330 	.word	0x20000330
 80a38dc:	20000414 	.word	0x20000414

080a38e0 <delay>:
  return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a38e0:	2100      	movs	r1, #0
 80a38e2:	f7ff be4f 	b.w	80a3584 <system_delay_ms>

080a38e6 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 80a38e6:	b510      	push	{r4, lr}
 80a38e8:	4604      	mov	r4, r0
#include "core_hal.h"
#include "rgbled.h"

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 80a38ea:	f7ff fe33 	bl	80a3554 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if(override == controlled())
 80a38ee:	4284      	cmp	r4, r0
 80a38f0:	d008      	beq.n	80a3904 <_ZN8RGBClass7controlEb+0x1e>
            return;
    else if (override)
 80a38f2:	b11c      	cbz	r4, 80a38fc <_ZN8RGBClass7controlEb+0x16>
            LED_Signaling_Start();
    else
            LED_Signaling_Stop();
}
 80a38f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if(override == controlled())
            return;
    else if (override)
            LED_Signaling_Start();
 80a38f8:	f7ff be1c 	b.w	80a3534 <LED_Signaling_Start>
    else
            LED_Signaling_Stop();
}
 80a38fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if(override == controlled())
            return;
    else if (override)
            LED_Signaling_Start();
    else
            LED_Signaling_Stop();
 80a3900:	f7ff be20 	b.w	80a3544 <LED_Signaling_Stop>
 80a3904:	bd10      	pop	{r4, pc}

080a3906 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
 80a3906:	b570      	push	{r4, r5, r6, lr}
 80a3908:	4605      	mov	r5, r0
 80a390a:	460e      	mov	r6, r1
 80a390c:	4614      	mov	r4, r2
#include "core_hal.h"
#include "rgbled.h"

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 80a390e:	f7ff fe21 	bl	80a3554 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled())
 80a3912:	b150      	cbz	r0, 80a392a <_ZN8RGBClass5colorEiii+0x24>
            return;

    LED_SetSignalingColor(red << 16 | green << 8 | blue);
 80a3914:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
 80a3918:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80a391c:	f7ff fe02 	bl	80a3524 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
 80a3920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled())
            return;

    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
 80a3924:	20e7      	movs	r0, #231	; 0xe7
 80a3926:	f7ff be1d 	b.w	80a3564 <LED_On>
 80a392a:	bd70      	pop	{r4, r5, r6, pc}

080a392c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a392c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a392e:	4b14      	ldr	r3, [pc, #80]	; (80a3980 <serialEventRun+0x54>)
 80a3930:	b133      	cbz	r3, 80a3940 <serialEventRun+0x14>
 80a3932:	f000 f925 	bl	80a3b80 <_Z16_fetch_usbserialv>
 80a3936:	6803      	ldr	r3, [r0, #0]
 80a3938:	691b      	ldr	r3, [r3, #16]
 80a393a:	4798      	blx	r3
 80a393c:	2800      	cmp	r0, #0
 80a393e:	dc16      	bgt.n	80a396e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a3940:	4b10      	ldr	r3, [pc, #64]	; (80a3984 <serialEventRun+0x58>)
 80a3942:	b133      	cbz	r3, 80a3952 <serialEventRun+0x26>
 80a3944:	f000 f9ea 	bl	80a3d1c <_Z22__fetch_global_Serial1v>
 80a3948:	6803      	ldr	r3, [r0, #0]
 80a394a:	691b      	ldr	r3, [r3, #16]
 80a394c:	4798      	blx	r3
 80a394e:	2800      	cmp	r0, #0
 80a3950:	dc10      	bgt.n	80a3974 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a3952:	4b0d      	ldr	r3, [pc, #52]	; (80a3988 <serialEventRun+0x5c>)
 80a3954:	b10b      	cbz	r3, 80a395a <serialEventRun+0x2e>
 80a3956:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a395a:	4b0c      	ldr	r3, [pc, #48]	; (80a398c <serialEventRun+0x60>)
 80a395c:	b17b      	cbz	r3, 80a397e <serialEventRun+0x52>
 80a395e:	f000 f94b 	bl	80a3bf8 <_Z17_fetch_usbserial1v>
 80a3962:	6803      	ldr	r3, [r0, #0]
 80a3964:	691b      	ldr	r3, [r3, #16]
 80a3966:	4798      	blx	r3
 80a3968:	2800      	cmp	r0, #0
 80a396a:	dc06      	bgt.n	80a397a <serialEventRun+0x4e>
 80a396c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a396e:	f3af 8000 	nop.w
 80a3972:	e7e5      	b.n	80a3940 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a3974:	f3af 8000 	nop.w
 80a3978:	e7eb      	b.n	80a3952 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a397a:	f3af 8000 	nop.w
 80a397e:	bd08      	pop	{r3, pc}
	...

080a3990 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a3990:	b508      	push	{r3, lr}
	serialEventRun();
 80a3992:	f7ff ffcb 	bl	80a392c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a3996:	f7ff fca3 	bl	80a32e0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a399a:	4b01      	ldr	r3, [pc, #4]	; (80a39a0 <_post_loop+0x10>)
 80a399c:	6018      	str	r0, [r3, #0]
 80a399e:	bd08      	pop	{r3, pc}
 80a39a0:	200008a0 	.word	0x200008a0

080a39a4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a39a4:	4802      	ldr	r0, [pc, #8]	; (80a39b0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a39a6:	4a03      	ldr	r2, [pc, #12]	; (80a39b4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a39a8:	4903      	ldr	r1, [pc, #12]	; (80a39b8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a39aa:	1a12      	subs	r2, r2, r0
 80a39ac:	f001 bc08 	b.w	80a51c0 <memcpy>
 80a39b0:	40024000 	.word	0x40024000
 80a39b4:	40024004 	.word	0x40024004
 80a39b8:	080a54f0 	.word	0x080a54f0

080a39bc <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80a39bc:	2000      	movs	r0, #0
 80a39be:	4770      	bx	lr

080a39c0 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a39c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80a39c2:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a39c4:	4604      	mov	r4, r0
    switch (req->type) {
 80a39c6:	2b0a      	cmp	r3, #10
 80a39c8:	d00e      	beq.n	80a39e8 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 80a39ca:	2b50      	cmp	r3, #80	; 0x50
 80a39cc:	d11c      	bne.n	80a3a08 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80a39ce:	4b10      	ldr	r3, [pc, #64]	; (80a3a10 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80a39d0:	681d      	ldr	r5, [r3, #0]
 80a39d2:	b1cd      	cbz	r5, 80a3a08 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 80a39d4:	7d03      	ldrb	r3, [r0, #20]
 80a39d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a39da:	9300      	str	r3, [sp, #0]
 80a39dc:	68c2      	ldr	r2, [r0, #12]
 80a39de:	f100 0310 	add.w	r3, r0, #16
 80a39e2:	6880      	ldr	r0, [r0, #8]
 80a39e4:	47a8      	blx	r5
 80a39e6:	e007      	b.n	80a39f8 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80a39e8:	f100 0310 	add.w	r3, r0, #16
 80a39ec:	68c2      	ldr	r2, [r0, #12]
 80a39ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a39f2:	6880      	ldr	r0, [r0, #8]
 80a39f4:	f7ff ffe2 	bl	80a39bc <_Z26usb_request_custom_handlerPcjjPj>
 80a39f8:	b130      	cbz	r0, 80a3a08 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80a39fa:	2200      	movs	r2, #0
 80a39fc:	4620      	mov	r0, r4
 80a39fe:	4611      	mov	r1, r2
 80a3a00:	f7ff fdd8 	bl	80a35b4 <system_set_usb_request_result>
        return true;
 80a3a04:	2001      	movs	r0, #1
 80a3a06:	e000      	b.n	80a3a0a <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80a3a08:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80a3a0a:	b003      	add	sp, #12
 80a3a0c:	bd30      	pop	{r4, r5, pc}
 80a3a0e:	bf00      	nop
 80a3a10:	20000418 	.word	0x20000418

080a3a14 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80a3a14:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a3a16:	4c0c      	ldr	r4, [pc, #48]	; (80a3a48 <module_user_init_hook+0x34>)
 80a3a18:	4d0c      	ldr	r5, [pc, #48]	; (80a3a4c <module_user_init_hook+0x38>)
 80a3a1a:	6823      	ldr	r3, [r4, #0]
 80a3a1c:	42ab      	cmp	r3, r5
 80a3a1e:	4b0c      	ldr	r3, [pc, #48]	; (80a3a50 <module_user_init_hook+0x3c>)
 80a3a20:	bf0c      	ite	eq
 80a3a22:	2201      	moveq	r2, #1
 80a3a24:	2200      	movne	r2, #0
 80a3a26:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3a28:	d002      	beq.n	80a3a30 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a3a2a:	f7ff ffbb 	bl	80a39a4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a3a2e:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a3a30:	4b08      	ldr	r3, [pc, #32]	; (80a3a54 <module_user_init_hook+0x40>)
 80a3a32:	b11b      	cbz	r3, 80a3a3c <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3a34:	f7ff fc4c 	bl	80a32d0 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a3a38:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80a3a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80a3a40:	2100      	movs	r1, #0
 80a3a42:	4805      	ldr	r0, [pc, #20]	; (80a3a58 <module_user_init_hook+0x44>)
 80a3a44:	f7ff bdae 	b.w	80a35a4 <system_set_usb_request_app_handler>
 80a3a48:	40024000 	.word	0x40024000
 80a3a4c:	9a271c1e 	.word	0x9a271c1e
 80a3a50:	2000041c 	.word	0x2000041c
 80a3a54:	00000000 	.word	0x00000000
 80a3a58:	080a39c1 	.word	0x080a39c1

080a3a5c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a3a5c:	4770      	bx	lr

080a3a5e <_ZN9IPAddressD0Ev>:
 80a3a5e:	b510      	push	{r4, lr}
 80a3a60:	4604      	mov	r4, r0
 80a3a62:	f7fc fb1c 	bl	80a009e <_ZdlPv>
 80a3a66:	4620      	mov	r0, r4
 80a3a68:	bd10      	pop	{r4, pc}

080a3a6a <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a3a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3a6c:	460f      	mov	r7, r1
 80a3a6e:	f100 0608 	add.w	r6, r0, #8
 80a3a72:	1d05      	adds	r5, r0, #4
 80a3a74:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3a76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a3a7a:	220a      	movs	r2, #10
 80a3a7c:	4638      	mov	r0, r7
 80a3a7e:	f7ff ff1a 	bl	80a38b6 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3a82:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3a84:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3a86:	d007      	beq.n	80a3a98 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a3a88:	2c00      	cmp	r4, #0
 80a3a8a:	d0f4      	beq.n	80a3a76 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a3a8c:	212e      	movs	r1, #46	; 0x2e
 80a3a8e:	4638      	mov	r0, r7
 80a3a90:	f7ff fece 	bl	80a3830 <_ZN5Print5printEc>
 80a3a94:	4404      	add	r4, r0
 80a3a96:	e7ee      	b.n	80a3a76 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a3a98:	4620      	mov	r0, r4
 80a3a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3a9c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a3a9c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a3a9e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a3aa2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a3aa6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a3aaa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a3aae:	2304      	movs	r3, #4
 80a3ab0:	6041      	str	r1, [r0, #4]
 80a3ab2:	7503      	strb	r3, [r0, #20]
 80a3ab4:	bd10      	pop	{r4, pc}
	...

080a3ab8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a3ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a3aba:	4d04      	ldr	r5, [pc, #16]	; (80a3acc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a3abc:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a3abe:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a3ac2:	9500      	str	r5, [sp, #0]
 80a3ac4:	f7ff ffea 	bl	80a3a9c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a3ac8:	b003      	add	sp, #12
 80a3aca:	bd30      	pop	{r4, r5, pc}
 80a3acc:	080a5410 	.word	0x080a5410

080a3ad0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3ad0:	7441      	strb	r1, [r0, #17]
 80a3ad2:	4770      	bx	lr

080a3ad4 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a3ad4:	4770      	bx	lr

080a3ad6 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a3ad6:	2100      	movs	r1, #0
 80a3ad8:	7c00      	ldrb	r0, [r0, #16]
 80a3ada:	f7ff bd0b 	b.w	80a34f4 <HAL_USB_USART_Receive_Data>

080a3ade <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a3ade:	2101      	movs	r1, #1
 80a3ae0:	7c00      	ldrb	r0, [r0, #16]
 80a3ae2:	f7ff bd07 	b.w	80a34f4 <HAL_USB_USART_Receive_Data>

080a3ae6 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a3ae6:	7c00      	ldrb	r0, [r0, #16]
 80a3ae8:	f7ff bcfc 	b.w	80a34e4 <HAL_USB_USART_Available_Data_For_Write>

080a3aec <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a3aec:	7c00      	ldrb	r0, [r0, #16]
 80a3aee:	f7ff bcf1 	b.w	80a34d4 <HAL_USB_USART_Available_Data>

080a3af2 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a3af2:	b538      	push	{r3, r4, r5, lr}
 80a3af4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3af6:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a3af8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3afa:	f7ff fcf3 	bl	80a34e4 <HAL_USB_USART_Available_Data_For_Write>
 80a3afe:	2800      	cmp	r0, #0
 80a3b00:	dc01      	bgt.n	80a3b06 <_ZN9USBSerial5writeEh+0x14>
 80a3b02:	7c60      	ldrb	r0, [r4, #17]
 80a3b04:	b120      	cbz	r0, 80a3b10 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a3b06:	4629      	mov	r1, r5
 80a3b08:	7c20      	ldrb	r0, [r4, #16]
 80a3b0a:	f7ff fcfb 	bl	80a3504 <HAL_USB_USART_Send_Data>
    return 1;
 80a3b0e:	2001      	movs	r0, #1
  }
  return 0;
}
 80a3b10:	bd38      	pop	{r3, r4, r5, pc}

080a3b12 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a3b12:	7c00      	ldrb	r0, [r0, #16]
 80a3b14:	f7ff bcfe 	b.w	80a3514 <HAL_USB_USART_Flush_Data>

080a3b18 <_ZN9USBSerialD0Ev>:
 80a3b18:	b510      	push	{r4, lr}
 80a3b1a:	4604      	mov	r4, r0
 80a3b1c:	f7fc fabf 	bl	80a009e <_ZdlPv>
 80a3b20:	4620      	mov	r0, r4
 80a3b22:	bd10      	pop	{r4, pc}

080a3b24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3b24:	b510      	push	{r4, lr}
 80a3b26:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a3b28:	2300      	movs	r3, #0
 80a3b2a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3b30:	60a3      	str	r3, [r4, #8]
 80a3b32:	4b05      	ldr	r3, [pc, #20]	; (80a3b48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a3b34:	4608      	mov	r0, r1
 80a3b36:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a3b38:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a3b3a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a3b3c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a3b3e:	4611      	mov	r1, r2
 80a3b40:	f7ff fcb8 	bl	80a34b4 <HAL_USB_USART_Init>
}
 80a3b44:	4620      	mov	r0, r4
 80a3b46:	bd10      	pop	{r4, pc}
 80a3b48:	080a5424 	.word	0x080a5424

080a3b4c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a3b4c:	2200      	movs	r2, #0
 80a3b4e:	7c00      	ldrb	r0, [r0, #16]
 80a3b50:	f7ff bcb8 	b.w	80a34c4 <HAL_USB_USART_Begin>

080a3b54 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a3b54:	b510      	push	{r4, lr}
 80a3b56:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3b58:	2214      	movs	r2, #20
 80a3b5a:	2100      	movs	r1, #0
 80a3b5c:	f001 fb3b 	bl	80a51d6 <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3b60:	4b05      	ldr	r3, [pc, #20]	; (80a3b78 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3b62:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3b64:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a3b66:	4b05      	ldr	r3, [pc, #20]	; (80a3b7c <_Z19acquireSerialBufferv+0x28>)
 80a3b68:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3b6a:	f240 1301 	movw	r3, #257	; 0x101
 80a3b6e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3b70:	2381      	movs	r3, #129	; 0x81
 80a3b72:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3b74:	bd10      	pop	{r4, pc}
 80a3b76:	bf00      	nop
 80a3b78:	200004a5 	.word	0x200004a5
 80a3b7c:	20000424 	.word	0x20000424

080a3b80 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a3b80:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3b82:	4d0e      	ldr	r5, [pc, #56]	; (80a3bbc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a3b84:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a3b86:	a801      	add	r0, sp, #4
 80a3b88:	f7ff ffe4 	bl	80a3b54 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3b8c:	6829      	ldr	r1, [r5, #0]
 80a3b8e:	f011 0401 	ands.w	r4, r1, #1
 80a3b92:	d110      	bne.n	80a3bb6 <_Z16_fetch_usbserialv+0x36>
 80a3b94:	4628      	mov	r0, r5
 80a3b96:	f7fc fa84 	bl	80a00a2 <__cxa_guard_acquire>
 80a3b9a:	b160      	cbz	r0, 80a3bb6 <_Z16_fetch_usbserialv+0x36>
 80a3b9c:	aa01      	add	r2, sp, #4
 80a3b9e:	4621      	mov	r1, r4
 80a3ba0:	4807      	ldr	r0, [pc, #28]	; (80a3bc0 <_Z16_fetch_usbserialv+0x40>)
 80a3ba2:	f7ff ffbf 	bl	80a3b24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3ba6:	4628      	mov	r0, r5
 80a3ba8:	f7fc fa80 	bl	80a00ac <__cxa_guard_release>
 80a3bac:	4a05      	ldr	r2, [pc, #20]	; (80a3bc4 <_Z16_fetch_usbserialv+0x44>)
 80a3bae:	4906      	ldr	r1, [pc, #24]	; (80a3bc8 <_Z16_fetch_usbserialv+0x48>)
 80a3bb0:	4803      	ldr	r0, [pc, #12]	; (80a3bc0 <_Z16_fetch_usbserialv+0x40>)
 80a3bb2:	f000 fa13 	bl	80a3fdc <__aeabi_atexit>
	return _usbserial;
}
 80a3bb6:	4802      	ldr	r0, [pc, #8]	; (80a3bc0 <_Z16_fetch_usbserialv+0x40>)
 80a3bb8:	b007      	add	sp, #28
 80a3bba:	bd30      	pop	{r4, r5, pc}
 80a3bbc:	20000420 	.word	0x20000420
 80a3bc0:	200005a8 	.word	0x200005a8
 80a3bc4:	20000334 	.word	0x20000334
 80a3bc8:	080a3ad5 	.word	0x080a3ad5

080a3bcc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a3bcc:	b510      	push	{r4, lr}
 80a3bce:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3bd0:	2214      	movs	r2, #20
 80a3bd2:	2100      	movs	r1, #0
 80a3bd4:	f001 faff 	bl	80a51d6 <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3bd8:	4b05      	ldr	r3, [pc, #20]	; (80a3bf0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3bda:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3bdc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a3bde:	4b05      	ldr	r3, [pc, #20]	; (80a3bf4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a3be0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3be2:	f240 1301 	movw	r3, #257	; 0x101
 80a3be6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3be8:	2381      	movs	r3, #129	; 0x81
 80a3bea:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3bec:	bd10      	pop	{r4, pc}
 80a3bee:	bf00      	nop
 80a3bf0:	20000658 	.word	0x20000658
 80a3bf4:	200005c0 	.word	0x200005c0

080a3bf8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3bf8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3bfa:	4c0e      	ldr	r4, [pc, #56]	; (80a3c34 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a3bfc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a3bfe:	a801      	add	r0, sp, #4
 80a3c00:	f7ff ffe4 	bl	80a3bcc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3c04:	6823      	ldr	r3, [r4, #0]
 80a3c06:	07db      	lsls	r3, r3, #31
 80a3c08:	d410      	bmi.n	80a3c2c <_Z17_fetch_usbserial1v+0x34>
 80a3c0a:	4620      	mov	r0, r4
 80a3c0c:	f7fc fa49 	bl	80a00a2 <__cxa_guard_acquire>
 80a3c10:	b160      	cbz	r0, 80a3c2c <_Z17_fetch_usbserial1v+0x34>
 80a3c12:	aa01      	add	r2, sp, #4
 80a3c14:	2101      	movs	r1, #1
 80a3c16:	4808      	ldr	r0, [pc, #32]	; (80a3c38 <_Z17_fetch_usbserial1v+0x40>)
 80a3c18:	f7ff ff84 	bl	80a3b24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3c1c:	4620      	mov	r0, r4
 80a3c1e:	f7fc fa45 	bl	80a00ac <__cxa_guard_release>
 80a3c22:	4a06      	ldr	r2, [pc, #24]	; (80a3c3c <_Z17_fetch_usbserial1v+0x44>)
 80a3c24:	4906      	ldr	r1, [pc, #24]	; (80a3c40 <_Z17_fetch_usbserial1v+0x48>)
 80a3c26:	4804      	ldr	r0, [pc, #16]	; (80a3c38 <_Z17_fetch_usbserial1v+0x40>)
 80a3c28:	f000 f9d8 	bl	80a3fdc <__aeabi_atexit>
  return _usbserial1;
}
 80a3c2c:	4802      	ldr	r0, [pc, #8]	; (80a3c38 <_Z17_fetch_usbserial1v+0x40>)
 80a3c2e:	b006      	add	sp, #24
 80a3c30:	bd10      	pop	{r4, pc}
 80a3c32:	bf00      	nop
 80a3c34:	200005bc 	.word	0x200005bc
 80a3c38:	20000644 	.word	0x20000644
 80a3c3c:	20000334 	.word	0x20000334
 80a3c40:	080a3ad5 	.word	0x080a3ad5

080a3c44 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a3c44:	4700      	bx	r0
	...

080a3c48 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a3c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3c4a:	461c      	mov	r4, r3
 80a3c4c:	b085      	sub	sp, #20
 80a3c4e:	4605      	mov	r5, r0
 80a3c50:	460e      	mov	r6, r1
 80a3c52:	4617      	mov	r7, r2
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a3c54:	f7ff fb24 	bl	80a32a0 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80a3c58:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80a3c5a:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a3c5c:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a3c60:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a3c62:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a3c66:	bfb4      	ite	lt
 80a3c68:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a3c6a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a3c6e:	4628      	mov	r0, r5
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a3c70:	bfa4      	itt	ge
 80a3c72:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a3c76:	ab03      	addge	r3, sp, #12
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a3c78:	9300      	str	r3, [sp, #0]
 80a3c7a:	4632      	mov	r2, r6
 80a3c7c:	463b      	mov	r3, r7
 80a3c7e:	4904      	ldr	r1, [pc, #16]	; (80a3c90 <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a3c80:	bfa8      	it	ge
 80a3c82:	f88d 400d 	strbge.w	r4, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a3c86:	f7ff fb03 	bl	80a3290 <HAL_Interrupts_Attach>
    return true;
}
 80a3c8a:	2001      	movs	r0, #1
 80a3c8c:	b005      	add	sp, #20
 80a3c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3c90:	080a3c45 	.word	0x080a3c45

080a3c94 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a3c94:	4770      	bx	lr

080a3c96 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3c96:	7441      	strb	r1, [r0, #17]
 80a3c98:	4770      	bx	lr

080a3c9a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a3c9a:	7c00      	ldrb	r0, [r0, #16]
 80a3c9c:	f7ff bb88 	b.w	80a33b0 <HAL_USART_Available_Data_For_Write>

080a3ca0 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a3ca0:	7c00      	ldrb	r0, [r0, #16]
 80a3ca2:	f7ff bb5d 	b.w	80a3360 <HAL_USART_Available_Data>

080a3ca6 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a3ca6:	7c00      	ldrb	r0, [r0, #16]
 80a3ca8:	f7ff bb6a 	b.w	80a3380 <HAL_USART_Peek_Data>

080a3cac <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a3cac:	7c00      	ldrb	r0, [r0, #16]
 80a3cae:	f7ff bb5f 	b.w	80a3370 <HAL_USART_Read_Data>

080a3cb2 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a3cb2:	7c00      	ldrb	r0, [r0, #16]
 80a3cb4:	f7ff bb6c 	b.w	80a3390 <HAL_USART_Flush_Data>

080a3cb8 <_ZN11USARTSerialD0Ev>:
 80a3cb8:	b510      	push	{r4, lr}
 80a3cba:	4604      	mov	r4, r0
 80a3cbc:	f7fc f9ef 	bl	80a009e <_ZdlPv>
 80a3cc0:	4620      	mov	r0, r4
 80a3cc2:	bd10      	pop	{r4, pc}

080a3cc4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3cc4:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3cc6:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a3cc8:	4604      	mov	r4, r0
 80a3cca:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3ccc:	b925      	cbnz	r5, 80a3cd8 <_ZN11USARTSerial5writeEh+0x14>
 80a3cce:	7c00      	ldrb	r0, [r0, #16]
 80a3cd0:	f7ff fb6e 	bl	80a33b0 <HAL_USART_Available_Data_For_Write>
 80a3cd4:	2800      	cmp	r0, #0
 80a3cd6:	dd05      	ble.n	80a3ce4 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3cd8:	4631      	mov	r1, r6
 80a3cda:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a3cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3ce0:	f7ff bb36 	b.w	80a3350 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a3ce4:	4628      	mov	r0, r5
 80a3ce6:	bd70      	pop	{r4, r5, r6, pc}

080a3ce8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3ce8:	b510      	push	{r4, lr}
 80a3cea:	4604      	mov	r4, r0
 80a3cec:	4608      	mov	r0, r1
 80a3cee:	4611      	mov	r1, r2
 80a3cf0:	2200      	movs	r2, #0
 80a3cf2:	6062      	str	r2, [r4, #4]
 80a3cf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3cf8:	60a2      	str	r2, [r4, #8]
 80a3cfa:	4a05      	ldr	r2, [pc, #20]	; (80a3d10 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a3cfc:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3cfe:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a3d00:	2201      	movs	r2, #1
 80a3d02:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a3d04:	461a      	mov	r2, r3
 80a3d06:	f7ff fb1b 	bl	80a3340 <HAL_USART_Init>
}
 80a3d0a:	4620      	mov	r0, r4
 80a3d0c:	bd10      	pop	{r4, pc}
 80a3d0e:	bf00      	nop
 80a3d10:	080a5454 	.word	0x080a5454

080a3d14 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a3d14:	7c00      	ldrb	r0, [r0, #16]
 80a3d16:	f7ff bb43 	b.w	80a33a0 <HAL_USART_Is_Enabled>
	...

080a3d1c <_Z22__fetch_global_Serial1v>:
// Preinstantiate Objects //////////////////////////////////////////////////////
static Ring_Buffer serial1_rx_buffer;
static Ring_Buffer serial1_tx_buffer;

USARTSerial& __fetch_global_Serial1()
{
 80a3d1c:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a3d1e:	4d0c      	ldr	r5, [pc, #48]	; (80a3d50 <_Z22__fetch_global_Serial1v+0x34>)
 80a3d20:	6829      	ldr	r1, [r5, #0]
 80a3d22:	f011 0401 	ands.w	r4, r1, #1
 80a3d26:	d111      	bne.n	80a3d4c <_Z22__fetch_global_Serial1v+0x30>
 80a3d28:	4628      	mov	r0, r5
 80a3d2a:	f7fc f9ba 	bl	80a00a2 <__cxa_guard_acquire>
 80a3d2e:	b168      	cbz	r0, 80a3d4c <_Z22__fetch_global_Serial1v+0x30>
 80a3d30:	4a08      	ldr	r2, [pc, #32]	; (80a3d54 <_Z22__fetch_global_Serial1v+0x38>)
 80a3d32:	4621      	mov	r1, r4
 80a3d34:	4b08      	ldr	r3, [pc, #32]	; (80a3d58 <_Z22__fetch_global_Serial1v+0x3c>)
 80a3d36:	4809      	ldr	r0, [pc, #36]	; (80a3d5c <_Z22__fetch_global_Serial1v+0x40>)
 80a3d38:	f7ff ffd6 	bl	80a3ce8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a3d3c:	4628      	mov	r0, r5
 80a3d3e:	f7fc f9b5 	bl	80a00ac <__cxa_guard_release>
 80a3d42:	4a07      	ldr	r2, [pc, #28]	; (80a3d60 <_Z22__fetch_global_Serial1v+0x44>)
 80a3d44:	4907      	ldr	r1, [pc, #28]	; (80a3d64 <_Z22__fetch_global_Serial1v+0x48>)
 80a3d46:	4805      	ldr	r0, [pc, #20]	; (80a3d5c <_Z22__fetch_global_Serial1v+0x40>)
 80a3d48:	f000 f948 	bl	80a3fdc <__aeabi_atexit>
	return serial1;
}
 80a3d4c:	4803      	ldr	r0, [pc, #12]	; (80a3d5c <_Z22__fetch_global_Serial1v+0x40>)
 80a3d4e:	bd38      	pop	{r3, r4, r5, pc}
 80a3d50:	200007f4 	.word	0x200007f4
 80a3d54:	200007f8 	.word	0x200007f8
 80a3d58:	20000770 	.word	0x20000770
 80a3d5c:	2000075c 	.word	0x2000075c
 80a3d60:	20000334 	.word	0x20000334
 80a3d64:	080a3c95 	.word	0x080a3c95

080a3d68 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a3d68:	4770      	bx	lr

080a3d6a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a3d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3d6c:	4606      	mov	r6, r0
 80a3d6e:	4615      	mov	r5, r2
 80a3d70:	460c      	mov	r4, r1
 80a3d72:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3d74:	42bc      	cmp	r4, r7
 80a3d76:	d006      	beq.n	80a3d86 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a3d78:	6833      	ldr	r3, [r6, #0]
 80a3d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a3d7e:	689b      	ldr	r3, [r3, #8]
 80a3d80:	4630      	mov	r0, r6
 80a3d82:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3d84:	e7f6      	b.n	80a3d74 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a3d86:	4628      	mov	r0, r5
 80a3d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3d8a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a3d8a:	2200      	movs	r2, #0
 80a3d8c:	7c00      	ldrb	r0, [r0, #16]
 80a3d8e:	f7ff bb3f 	b.w	80a3410 <HAL_I2C_Write_Data>

080a3d92 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a3d92:	2100      	movs	r1, #0
 80a3d94:	7c00      	ldrb	r0, [r0, #16]
 80a3d96:	f7ff bb43 	b.w	80a3420 <HAL_I2C_Available_Data>

080a3d9a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a3d9a:	2100      	movs	r1, #0
 80a3d9c:	7c00      	ldrb	r0, [r0, #16]
 80a3d9e:	f7ff bb47 	b.w	80a3430 <HAL_I2C_Read_Data>

080a3da2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a3da2:	2100      	movs	r1, #0
 80a3da4:	7c00      	ldrb	r0, [r0, #16]
 80a3da6:	f7ff bb4b 	b.w	80a3440 <HAL_I2C_Peek_Data>

080a3daa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a3daa:	2100      	movs	r1, #0
 80a3dac:	7c00      	ldrb	r0, [r0, #16]
 80a3dae:	f7ff bb4f 	b.w	80a3450 <HAL_I2C_Flush_Data>

080a3db2 <_ZN7TwoWireD0Ev>:
 80a3db2:	b510      	push	{r4, lr}
 80a3db4:	4604      	mov	r4, r0
 80a3db6:	f7fc f972 	bl	80a009e <_ZdlPv>
 80a3dba:	4620      	mov	r0, r4
 80a3dbc:	bd10      	pop	{r4, pc}
	...

080a3dc0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a3dc0:	b510      	push	{r4, lr}
 80a3dc2:	4604      	mov	r4, r0
 80a3dc4:	4608      	mov	r0, r1
 80a3dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3dca:	60a3      	str	r3, [r4, #8]
 80a3dcc:	4b04      	ldr	r3, [pc, #16]	; (80a3de0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a3dce:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a3dd0:	7420      	strb	r0, [r4, #16]
 80a3dd2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a3dd4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a3dd6:	f7ff fb4b 	bl	80a3470 <HAL_I2C_Init>

}
 80a3dda:	4620      	mov	r0, r4
 80a3ddc:	bd10      	pop	{r4, pc}
 80a3dde:	bf00      	nop
 80a3de0:	080a5484 	.word	0x080a5484

080a3de4 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a3de4:	2200      	movs	r2, #0
 80a3de6:	7c00      	ldrb	r0, [r0, #16]
 80a3de8:	f7ff baea 	b.w	80a33c0 <HAL_I2C_Set_Speed>

080a3dec <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a3dec:	2300      	movs	r3, #0
 80a3dee:	461a      	mov	r2, r3
 80a3df0:	4619      	mov	r1, r3
 80a3df2:	7c00      	ldrb	r0, [r0, #16]
 80a3df4:	f7ff baec 	b.w	80a33d0 <HAL_I2C_Begin>

080a3df8 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a3df8:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a3dfa:	2400      	movs	r4, #0
 80a3dfc:	7c00      	ldrb	r0, [r0, #16]
 80a3dfe:	9400      	str	r4, [sp, #0]
 80a3e00:	f7ff faee 	bl	80a33e0 <HAL_I2C_Request_Data>
  return result;
}
 80a3e04:	b2c0      	uxtb	r0, r0
 80a3e06:	b002      	add	sp, #8
 80a3e08:	bd10      	pop	{r4, pc}

080a3e0a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a3e0a:	2301      	movs	r3, #1
 80a3e0c:	f7ff bff4 	b.w	80a3df8 <_ZN7TwoWire11requestFromEhhh>

080a3e10 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a3e10:	2301      	movs	r3, #1
 80a3e12:	b2d2      	uxtb	r2, r2
 80a3e14:	b2c9      	uxtb	r1, r1
 80a3e16:	f7ff bfef 	b.w	80a3df8 <_ZN7TwoWire11requestFromEhhh>

080a3e1a <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a3e1a:	2200      	movs	r2, #0
 80a3e1c:	7c00      	ldrb	r0, [r0, #16]
 80a3e1e:	f7ff bae7 	b.w	80a33f0 <HAL_I2C_Begin_Transmission>

080a3e22 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a3e22:	2200      	movs	r2, #0
 80a3e24:	7c00      	ldrb	r0, [r0, #16]
 80a3e26:	f7ff baeb 	b.w	80a3400 <HAL_I2C_End_Transmission>

080a3e2a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a3e2a:	2101      	movs	r1, #1
 80a3e2c:	f7ff bff9 	b.w	80a3e22 <_ZN7TwoWire15endTransmissionEh>

080a3e30 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a3e30:	2100      	movs	r1, #0
 80a3e32:	7c00      	ldrb	r0, [r0, #16]
 80a3e34:	f7ff bb14 	b.w	80a3460 <HAL_I2C_Is_Enabled>

080a3e38 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a3e38:	4770      	bx	lr

080a3e3a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a3e3a:	2200      	movs	r2, #0
 80a3e3c:	4611      	mov	r1, r2
 80a3e3e:	4610      	mov	r0, r2
 80a3e40:	f7ff bbc0 	b.w	80a35c4 <network_ready>

080a3e44 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a3e44:	4803      	ldr	r0, [pc, #12]	; (80a3e54 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a3e46:	4b04      	ldr	r3, [pc, #16]	; (80a3e58 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a3e48:	4a04      	ldr	r2, [pc, #16]	; (80a3e5c <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a3e4a:	4905      	ldr	r1, [pc, #20]	; (80a3e60 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a3e4c:	6003      	str	r3, [r0, #0]
 80a3e4e:	f000 b8c5 	b.w	80a3fdc <__aeabi_atexit>
 80a3e52:	bf00      	nop
 80a3e54:	2000087c 	.word	0x2000087c
 80a3e58:	080a54ac 	.word	0x080a54ac
 80a3e5c:	20000334 	.word	0x20000334
 80a3e60:	080a3e39 	.word	0x080a3e39

080a3e64 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a3e64:	b510      	push	{r4, lr}
 80a3e66:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a3e68:	480f      	ldr	r0, [pc, #60]	; (80a3ea8 <pinAvailable+0x44>)
 80a3e6a:	f7ff fbe7 	bl	80a363c <_ZN8SPIClass9isEnabledEv>
 80a3e6e:	b128      	cbz	r0, 80a3e7c <pinAvailable+0x18>
 80a3e70:	f1a4 030d 	sub.w	r3, r4, #13
 80a3e74:	2b02      	cmp	r3, #2
 80a3e76:	d801      	bhi.n	80a3e7c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a3e78:	2000      	movs	r0, #0
 80a3e7a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a3e7c:	f000 f88e 	bl	80a3f9c <_Z19__fetch_global_Wirev>
 80a3e80:	f7ff ffd6 	bl	80a3e30 <_ZN7TwoWire9isEnabledEv>
 80a3e84:	b108      	cbz	r0, 80a3e8a <pinAvailable+0x26>
 80a3e86:	2c01      	cmp	r4, #1
 80a3e88:	d9f6      	bls.n	80a3e78 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a3e8a:	f7ff ff47 	bl	80a3d1c <_Z22__fetch_global_Serial1v>
 80a3e8e:	f7ff ff41 	bl	80a3d14 <_ZN11USARTSerial9isEnabledEv>
 80a3e92:	b118      	cbz	r0, 80a3e9c <pinAvailable+0x38>
 80a3e94:	f1a4 0312 	sub.w	r3, r4, #18
 80a3e98:	2b01      	cmp	r3, #1
 80a3e9a:	d9ed      	bls.n	80a3e78 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a3e9c:	2c17      	cmp	r4, #23
 80a3e9e:	bf8c      	ite	hi
 80a3ea0:	2000      	movhi	r0, #0
 80a3ea2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a3ea4:	bd10      	pop	{r4, pc}
 80a3ea6:	bf00      	nop
 80a3ea8:	20000880 	.word	0x20000880

080a3eac <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3eac:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a3eae:	b538      	push	{r3, r4, r5, lr}
 80a3eb0:	4604      	mov	r4, r0
 80a3eb2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3eb4:	d80a      	bhi.n	80a3ecc <pinMode+0x20>
 80a3eb6:	29ff      	cmp	r1, #255	; 0xff
 80a3eb8:	d008      	beq.n	80a3ecc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a3eba:	f7ff ffd3 	bl	80a3e64 <pinAvailable>
 80a3ebe:	b128      	cbz	r0, 80a3ecc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3ec0:	4629      	mov	r1, r5
 80a3ec2:	4620      	mov	r0, r4
}
 80a3ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3ec8:	f7ff b9c2 	b.w	80a3250 <HAL_Pin_Mode>
 80a3ecc:	bd38      	pop	{r3, r4, r5, pc}

080a3ece <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3ece:	b538      	push	{r3, r4, r5, lr}
 80a3ed0:	4604      	mov	r4, r0
 80a3ed2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3ed4:	f7ff f9c4 	bl	80a3260 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3ed8:	28ff      	cmp	r0, #255	; 0xff
 80a3eda:	d010      	beq.n	80a3efe <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a3edc:	2806      	cmp	r0, #6
 80a3ede:	d804      	bhi.n	80a3eea <digitalWrite+0x1c>
 80a3ee0:	234d      	movs	r3, #77	; 0x4d
 80a3ee2:	fa23 f000 	lsr.w	r0, r3, r0
 80a3ee6:	07c3      	lsls	r3, r0, #31
 80a3ee8:	d409      	bmi.n	80a3efe <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a3eea:	4620      	mov	r0, r4
 80a3eec:	f7ff ffba 	bl	80a3e64 <pinAvailable>
 80a3ef0:	b128      	cbz	r0, 80a3efe <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3ef2:	4629      	mov	r1, r5
 80a3ef4:	4620      	mov	r0, r4
}
 80a3ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3efa:	f7ff b9b9 	b.w	80a3270 <HAL_GPIO_Write>
 80a3efe:	bd38      	pop	{r3, r4, r5, pc}

080a3f00 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a3f00:	b510      	push	{r4, lr}
 80a3f02:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3f04:	f7ff f9ac 	bl	80a3260 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a3f08:	3804      	subs	r0, #4
 80a3f0a:	b2c0      	uxtb	r0, r0
 80a3f0c:	2801      	cmp	r0, #1
 80a3f0e:	d908      	bls.n	80a3f22 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a3f10:	4620      	mov	r0, r4
 80a3f12:	f7ff ffa7 	bl	80a3e64 <pinAvailable>
 80a3f16:	b120      	cbz	r0, 80a3f22 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a3f18:	4620      	mov	r0, r4
}
 80a3f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a3f1e:	f7ff b9af 	b.w	80a3280 <HAL_GPIO_Read>
}
 80a3f22:	2000      	movs	r0, #0
 80a3f24:	bd10      	pop	{r4, pc}
	...

080a3f28 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3f28:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3f2a:	4c0c      	ldr	r4, [pc, #48]	; (80a3f5c <_GLOBAL__sub_I_SPI+0x34>)
 80a3f2c:	4e0c      	ldr	r6, [pc, #48]	; (80a3f60 <_GLOBAL__sub_I_SPI+0x38>)
 80a3f2e:	4d0d      	ldr	r5, [pc, #52]	; (80a3f64 <_GLOBAL__sub_I_SPI+0x3c>)
 80a3f30:	2100      	movs	r1, #0
 80a3f32:	4620      	mov	r0, r4
 80a3f34:	f7ff fb6e 	bl	80a3614 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3f38:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3f3a:	4c0b      	ldr	r4, [pc, #44]	; (80a3f68 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3f3c:	4632      	mov	r2, r6
 80a3f3e:	4629      	mov	r1, r5
 80a3f40:	f000 f84c 	bl	80a3fdc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3f44:	2101      	movs	r1, #1
 80a3f46:	4620      	mov	r0, r4
 80a3f48:	f7ff fb64 	bl	80a3614 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3f4c:	4632      	mov	r2, r6
 80a3f4e:	4629      	mov	r1, r5
 80a3f50:	4620      	mov	r0, r4
 80a3f52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a3f56:	f000 b841 	b.w	80a3fdc <__aeabi_atexit>
 80a3f5a:	bf00      	nop
 80a3f5c:	20000880 	.word	0x20000880
 80a3f60:	20000334 	.word	0x20000334
 80a3f64:	080a3605 	.word	0x080a3605
 80a3f68:	20000890 	.word	0x20000890

080a3f6c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3f6c:	b513      	push	{r0, r1, r4, lr}
 80a3f6e:	4c08      	ldr	r4, [pc, #32]	; (80a3f90 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3f70:	2300      	movs	r3, #0
 80a3f72:	461a      	mov	r2, r3
 80a3f74:	4619      	mov	r1, r3
 80a3f76:	9300      	str	r3, [sp, #0]
 80a3f78:	4620      	mov	r0, r4
 80a3f7a:	f7ff fd9d 	bl	80a3ab8 <_ZN9IPAddressC1Ehhhh>
 80a3f7e:	4620      	mov	r0, r4
 80a3f80:	4a04      	ldr	r2, [pc, #16]	; (80a3f94 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3f82:	4905      	ldr	r1, [pc, #20]	; (80a3f98 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3f84:	b002      	add	sp, #8
 80a3f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3f8a:	f000 b827 	b.w	80a3fdc <__aeabi_atexit>
 80a3f8e:	bf00      	nop
 80a3f90:	200008a4 	.word	0x200008a4
 80a3f94:	20000334 	.word	0x20000334
 80a3f98:	080a3a5d 	.word	0x080a3a5d

080a3f9c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a3f9c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a3f9e:	4d0b      	ldr	r5, [pc, #44]	; (80a3fcc <_Z19__fetch_global_Wirev+0x30>)
 80a3fa0:	6829      	ldr	r1, [r5, #0]
 80a3fa2:	f011 0401 	ands.w	r4, r1, #1
 80a3fa6:	d10f      	bne.n	80a3fc8 <_Z19__fetch_global_Wirev+0x2c>
 80a3fa8:	4628      	mov	r0, r5
 80a3faa:	f7fc f87a 	bl	80a00a2 <__cxa_guard_acquire>
 80a3fae:	b158      	cbz	r0, 80a3fc8 <_Z19__fetch_global_Wirev+0x2c>
 80a3fb0:	4621      	mov	r1, r4
 80a3fb2:	4807      	ldr	r0, [pc, #28]	; (80a3fd0 <_Z19__fetch_global_Wirev+0x34>)
 80a3fb4:	f7ff ff04 	bl	80a3dc0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a3fb8:	4628      	mov	r0, r5
 80a3fba:	f7fc f877 	bl	80a00ac <__cxa_guard_release>
 80a3fbe:	4a05      	ldr	r2, [pc, #20]	; (80a3fd4 <_Z19__fetch_global_Wirev+0x38>)
 80a3fc0:	4905      	ldr	r1, [pc, #20]	; (80a3fd8 <_Z19__fetch_global_Wirev+0x3c>)
 80a3fc2:	4803      	ldr	r0, [pc, #12]	; (80a3fd0 <_Z19__fetch_global_Wirev+0x34>)
 80a3fc4:	f000 f80a 	bl	80a3fdc <__aeabi_atexit>
	return wire;
}
 80a3fc8:	4801      	ldr	r0, [pc, #4]	; (80a3fd0 <_Z19__fetch_global_Wirev+0x34>)
 80a3fca:	bd38      	pop	{r3, r4, r5, pc}
 80a3fcc:	200008bc 	.word	0x200008bc
 80a3fd0:	200008c0 	.word	0x200008c0
 80a3fd4:	20000334 	.word	0x20000334
 80a3fd8:	080a3d69 	.word	0x080a3d69

080a3fdc <__aeabi_atexit>:
 80a3fdc:	460b      	mov	r3, r1
 80a3fde:	4601      	mov	r1, r0
 80a3fe0:	4618      	mov	r0, r3
 80a3fe2:	f001 b8df 	b.w	80a51a4 <__cxa_atexit>
	...

080a3fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3fe8:	4b18      	ldr	r3, [pc, #96]	; (80a404c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3fea:	681a      	ldr	r2, [r3, #0]
 80a3fec:	07d1      	lsls	r1, r2, #31
 80a3fee:	bf5c      	itt	pl
 80a3ff0:	2201      	movpl	r2, #1
 80a3ff2:	601a      	strpl	r2, [r3, #0]
 80a3ff4:	4b16      	ldr	r3, [pc, #88]	; (80a4050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3ff6:	681a      	ldr	r2, [r3, #0]
 80a3ff8:	07d2      	lsls	r2, r2, #31
 80a3ffa:	bf5c      	itt	pl
 80a3ffc:	2201      	movpl	r2, #1
 80a3ffe:	601a      	strpl	r2, [r3, #0]
 80a4000:	4b14      	ldr	r3, [pc, #80]	; (80a4054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a4002:	681a      	ldr	r2, [r3, #0]
 80a4004:	07d0      	lsls	r0, r2, #31
 80a4006:	bf5c      	itt	pl
 80a4008:	2201      	movpl	r2, #1
 80a400a:	601a      	strpl	r2, [r3, #0]
 80a400c:	4b12      	ldr	r3, [pc, #72]	; (80a4058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a400e:	681a      	ldr	r2, [r3, #0]
 80a4010:	07d1      	lsls	r1, r2, #31
 80a4012:	bf5c      	itt	pl
 80a4014:	2201      	movpl	r2, #1
 80a4016:	601a      	strpl	r2, [r3, #0]
 80a4018:	4b10      	ldr	r3, [pc, #64]	; (80a405c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a401a:	681a      	ldr	r2, [r3, #0]
 80a401c:	07d2      	lsls	r2, r2, #31
 80a401e:	bf5c      	itt	pl
 80a4020:	2201      	movpl	r2, #1
 80a4022:	601a      	strpl	r2, [r3, #0]
 80a4024:	4b0e      	ldr	r3, [pc, #56]	; (80a4060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a4026:	681a      	ldr	r2, [r3, #0]
 80a4028:	07d0      	lsls	r0, r2, #31
 80a402a:	bf5c      	itt	pl
 80a402c:	2201      	movpl	r2, #1
 80a402e:	601a      	strpl	r2, [r3, #0]
 80a4030:	4b0c      	ldr	r3, [pc, #48]	; (80a4064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a4032:	681a      	ldr	r2, [r3, #0]
 80a4034:	07d1      	lsls	r1, r2, #31
 80a4036:	bf5c      	itt	pl
 80a4038:	2201      	movpl	r2, #1
 80a403a:	601a      	strpl	r2, [r3, #0]
 80a403c:	4b0a      	ldr	r3, [pc, #40]	; (80a4068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a403e:	681a      	ldr	r2, [r3, #0]
 80a4040:	07d2      	lsls	r2, r2, #31
 80a4042:	bf5c      	itt	pl
 80a4044:	2201      	movpl	r2, #1
 80a4046:	601a      	strpl	r2, [r3, #0]
 80a4048:	4770      	bx	lr
 80a404a:	bf00      	nop
 80a404c:	200008f0 	.word	0x200008f0
 80a4050:	200008ec 	.word	0x200008ec
 80a4054:	200008e8 	.word	0x200008e8
 80a4058:	200008e4 	.word	0x200008e4
 80a405c:	200008e0 	.word	0x200008e0
 80a4060:	200008dc 	.word	0x200008dc
 80a4064:	200008d8 	.word	0x200008d8
 80a4068:	200008d4 	.word	0x200008d4

080a406c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a406c:	4b24      	ldr	r3, [pc, #144]	; (80a4100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a406e:	681a      	ldr	r2, [r3, #0]
 80a4070:	07d0      	lsls	r0, r2, #31
 80a4072:	bf5c      	itt	pl
 80a4074:	2201      	movpl	r2, #1
 80a4076:	601a      	strpl	r2, [r3, #0]
 80a4078:	4b22      	ldr	r3, [pc, #136]	; (80a4104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a407a:	681a      	ldr	r2, [r3, #0]
 80a407c:	07d1      	lsls	r1, r2, #31
 80a407e:	bf5c      	itt	pl
 80a4080:	2201      	movpl	r2, #1
 80a4082:	601a      	strpl	r2, [r3, #0]
 80a4084:	4b20      	ldr	r3, [pc, #128]	; (80a4108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a4086:	681a      	ldr	r2, [r3, #0]
 80a4088:	07d2      	lsls	r2, r2, #31
 80a408a:	bf5c      	itt	pl
 80a408c:	2201      	movpl	r2, #1
 80a408e:	601a      	strpl	r2, [r3, #0]
 80a4090:	4b1e      	ldr	r3, [pc, #120]	; (80a410c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a4092:	681a      	ldr	r2, [r3, #0]
 80a4094:	07d0      	lsls	r0, r2, #31
 80a4096:	bf5c      	itt	pl
 80a4098:	2201      	movpl	r2, #1
 80a409a:	601a      	strpl	r2, [r3, #0]
 80a409c:	4b1c      	ldr	r3, [pc, #112]	; (80a4110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a409e:	681a      	ldr	r2, [r3, #0]
 80a40a0:	07d1      	lsls	r1, r2, #31
 80a40a2:	bf5c      	itt	pl
 80a40a4:	2201      	movpl	r2, #1
 80a40a6:	601a      	strpl	r2, [r3, #0]
 80a40a8:	4b1a      	ldr	r3, [pc, #104]	; (80a4114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a40aa:	681a      	ldr	r2, [r3, #0]
 80a40ac:	07d2      	lsls	r2, r2, #31
 80a40ae:	bf5c      	itt	pl
 80a40b0:	2201      	movpl	r2, #1
 80a40b2:	601a      	strpl	r2, [r3, #0]
 80a40b4:	4b18      	ldr	r3, [pc, #96]	; (80a4118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a40b6:	681a      	ldr	r2, [r3, #0]
 80a40b8:	07d0      	lsls	r0, r2, #31
 80a40ba:	bf5c      	itt	pl
 80a40bc:	2201      	movpl	r2, #1
 80a40be:	601a      	strpl	r2, [r3, #0]
 80a40c0:	4b16      	ldr	r3, [pc, #88]	; (80a411c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a40c2:	681a      	ldr	r2, [r3, #0]
 80a40c4:	07d1      	lsls	r1, r2, #31
 80a40c6:	bf5c      	itt	pl
 80a40c8:	2201      	movpl	r2, #1
 80a40ca:	601a      	strpl	r2, [r3, #0]
 80a40cc:	4b14      	ldr	r3, [pc, #80]	; (80a4120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a40ce:	681a      	ldr	r2, [r3, #0]
 80a40d0:	07d2      	lsls	r2, r2, #31
 80a40d2:	bf5c      	itt	pl
 80a40d4:	2201      	movpl	r2, #1
 80a40d6:	601a      	strpl	r2, [r3, #0]
 80a40d8:	4b12      	ldr	r3, [pc, #72]	; (80a4124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a40da:	681a      	ldr	r2, [r3, #0]
 80a40dc:	07d0      	lsls	r0, r2, #31
 80a40de:	bf5c      	itt	pl
 80a40e0:	2201      	movpl	r2, #1
 80a40e2:	601a      	strpl	r2, [r3, #0]
 80a40e4:	4b10      	ldr	r3, [pc, #64]	; (80a4128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a40e6:	681a      	ldr	r2, [r3, #0]
 80a40e8:	07d1      	lsls	r1, r2, #31
 80a40ea:	bf5c      	itt	pl
 80a40ec:	2201      	movpl	r2, #1
 80a40ee:	601a      	strpl	r2, [r3, #0]
 80a40f0:	4b0e      	ldr	r3, [pc, #56]	; (80a412c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a40f2:	681a      	ldr	r2, [r3, #0]
 80a40f4:	07d2      	lsls	r2, r2, #31
 80a40f6:	bf5c      	itt	pl
 80a40f8:	2201      	movpl	r2, #1
 80a40fa:	601a      	strpl	r2, [r3, #0]
 80a40fc:	4770      	bx	lr
 80a40fe:	bf00      	nop
 80a4100:	20000920 	.word	0x20000920
 80a4104:	2000091c 	.word	0x2000091c
 80a4108:	20000918 	.word	0x20000918
 80a410c:	20000914 	.word	0x20000914
 80a4110:	20000910 	.word	0x20000910
 80a4114:	2000090c 	.word	0x2000090c
 80a4118:	20000908 	.word	0x20000908
 80a411c:	20000904 	.word	0x20000904
 80a4120:	20000900 	.word	0x20000900
 80a4124:	200008fc 	.word	0x200008fc
 80a4128:	200008f8 	.word	0x200008f8
 80a412c:	200008f4 	.word	0x200008f4

080a4130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a4130:	4b24      	ldr	r3, [pc, #144]	; (80a41c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a4132:	681a      	ldr	r2, [r3, #0]
 80a4134:	07d0      	lsls	r0, r2, #31
 80a4136:	bf5c      	itt	pl
 80a4138:	2201      	movpl	r2, #1
 80a413a:	601a      	strpl	r2, [r3, #0]
 80a413c:	4b22      	ldr	r3, [pc, #136]	; (80a41c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a413e:	681a      	ldr	r2, [r3, #0]
 80a4140:	07d1      	lsls	r1, r2, #31
 80a4142:	bf5c      	itt	pl
 80a4144:	2201      	movpl	r2, #1
 80a4146:	601a      	strpl	r2, [r3, #0]
 80a4148:	4b20      	ldr	r3, [pc, #128]	; (80a41cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a414a:	681a      	ldr	r2, [r3, #0]
 80a414c:	07d2      	lsls	r2, r2, #31
 80a414e:	bf5c      	itt	pl
 80a4150:	2201      	movpl	r2, #1
 80a4152:	601a      	strpl	r2, [r3, #0]
 80a4154:	4b1e      	ldr	r3, [pc, #120]	; (80a41d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a4156:	681a      	ldr	r2, [r3, #0]
 80a4158:	07d0      	lsls	r0, r2, #31
 80a415a:	bf5c      	itt	pl
 80a415c:	2201      	movpl	r2, #1
 80a415e:	601a      	strpl	r2, [r3, #0]
 80a4160:	4b1c      	ldr	r3, [pc, #112]	; (80a41d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a4162:	681a      	ldr	r2, [r3, #0]
 80a4164:	07d1      	lsls	r1, r2, #31
 80a4166:	bf5c      	itt	pl
 80a4168:	2201      	movpl	r2, #1
 80a416a:	601a      	strpl	r2, [r3, #0]
 80a416c:	4b1a      	ldr	r3, [pc, #104]	; (80a41d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a416e:	681a      	ldr	r2, [r3, #0]
 80a4170:	07d2      	lsls	r2, r2, #31
 80a4172:	bf5c      	itt	pl
 80a4174:	2201      	movpl	r2, #1
 80a4176:	601a      	strpl	r2, [r3, #0]
 80a4178:	4b18      	ldr	r3, [pc, #96]	; (80a41dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a417a:	681a      	ldr	r2, [r3, #0]
 80a417c:	07d0      	lsls	r0, r2, #31
 80a417e:	bf5c      	itt	pl
 80a4180:	2201      	movpl	r2, #1
 80a4182:	601a      	strpl	r2, [r3, #0]
 80a4184:	4b16      	ldr	r3, [pc, #88]	; (80a41e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a4186:	681a      	ldr	r2, [r3, #0]
 80a4188:	07d1      	lsls	r1, r2, #31
 80a418a:	bf5c      	itt	pl
 80a418c:	2201      	movpl	r2, #1
 80a418e:	601a      	strpl	r2, [r3, #0]
 80a4190:	4b14      	ldr	r3, [pc, #80]	; (80a41e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a4192:	681a      	ldr	r2, [r3, #0]
 80a4194:	07d2      	lsls	r2, r2, #31
 80a4196:	bf5c      	itt	pl
 80a4198:	2201      	movpl	r2, #1
 80a419a:	601a      	strpl	r2, [r3, #0]
 80a419c:	4b12      	ldr	r3, [pc, #72]	; (80a41e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a419e:	681a      	ldr	r2, [r3, #0]
 80a41a0:	07d0      	lsls	r0, r2, #31
 80a41a2:	bf5c      	itt	pl
 80a41a4:	2201      	movpl	r2, #1
 80a41a6:	601a      	strpl	r2, [r3, #0]
 80a41a8:	4b10      	ldr	r3, [pc, #64]	; (80a41ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a41aa:	681a      	ldr	r2, [r3, #0]
 80a41ac:	07d1      	lsls	r1, r2, #31
 80a41ae:	bf5c      	itt	pl
 80a41b0:	2201      	movpl	r2, #1
 80a41b2:	601a      	strpl	r2, [r3, #0]
 80a41b4:	4b0e      	ldr	r3, [pc, #56]	; (80a41f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a41b6:	681a      	ldr	r2, [r3, #0]
 80a41b8:	07d2      	lsls	r2, r2, #31
 80a41ba:	bf5c      	itt	pl
 80a41bc:	2201      	movpl	r2, #1
 80a41be:	601a      	strpl	r2, [r3, #0]
 80a41c0:	4770      	bx	lr
 80a41c2:	bf00      	nop
 80a41c4:	20000950 	.word	0x20000950
 80a41c8:	2000094c 	.word	0x2000094c
 80a41cc:	20000948 	.word	0x20000948
 80a41d0:	20000944 	.word	0x20000944
 80a41d4:	20000940 	.word	0x20000940
 80a41d8:	2000093c 	.word	0x2000093c
 80a41dc:	20000938 	.word	0x20000938
 80a41e0:	20000934 	.word	0x20000934
 80a41e4:	20000930 	.word	0x20000930
 80a41e8:	2000092c 	.word	0x2000092c
 80a41ec:	20000928 	.word	0x20000928
 80a41f0:	20000924 	.word	0x20000924

080a41f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a41f4:	4b18      	ldr	r3, [pc, #96]	; (80a4258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a41f6:	681a      	ldr	r2, [r3, #0]
 80a41f8:	07d1      	lsls	r1, r2, #31
 80a41fa:	bf5c      	itt	pl
 80a41fc:	2201      	movpl	r2, #1
 80a41fe:	601a      	strpl	r2, [r3, #0]
 80a4200:	4b16      	ldr	r3, [pc, #88]	; (80a425c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a4202:	681a      	ldr	r2, [r3, #0]
 80a4204:	07d2      	lsls	r2, r2, #31
 80a4206:	bf5c      	itt	pl
 80a4208:	2201      	movpl	r2, #1
 80a420a:	601a      	strpl	r2, [r3, #0]
 80a420c:	4b14      	ldr	r3, [pc, #80]	; (80a4260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a420e:	681a      	ldr	r2, [r3, #0]
 80a4210:	07d0      	lsls	r0, r2, #31
 80a4212:	bf5c      	itt	pl
 80a4214:	2201      	movpl	r2, #1
 80a4216:	601a      	strpl	r2, [r3, #0]
 80a4218:	4b12      	ldr	r3, [pc, #72]	; (80a4264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a421a:	681a      	ldr	r2, [r3, #0]
 80a421c:	07d1      	lsls	r1, r2, #31
 80a421e:	bf5c      	itt	pl
 80a4220:	2201      	movpl	r2, #1
 80a4222:	601a      	strpl	r2, [r3, #0]
 80a4224:	4b10      	ldr	r3, [pc, #64]	; (80a4268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a4226:	681a      	ldr	r2, [r3, #0]
 80a4228:	07d2      	lsls	r2, r2, #31
 80a422a:	bf5c      	itt	pl
 80a422c:	2201      	movpl	r2, #1
 80a422e:	601a      	strpl	r2, [r3, #0]
 80a4230:	4b0e      	ldr	r3, [pc, #56]	; (80a426c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a4232:	681a      	ldr	r2, [r3, #0]
 80a4234:	07d0      	lsls	r0, r2, #31
 80a4236:	bf5c      	itt	pl
 80a4238:	2201      	movpl	r2, #1
 80a423a:	601a      	strpl	r2, [r3, #0]
 80a423c:	4b0c      	ldr	r3, [pc, #48]	; (80a4270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a423e:	681a      	ldr	r2, [r3, #0]
 80a4240:	07d1      	lsls	r1, r2, #31
 80a4242:	bf5c      	itt	pl
 80a4244:	2201      	movpl	r2, #1
 80a4246:	601a      	strpl	r2, [r3, #0]
 80a4248:	4b0a      	ldr	r3, [pc, #40]	; (80a4274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a424a:	681a      	ldr	r2, [r3, #0]
 80a424c:	07d2      	lsls	r2, r2, #31
 80a424e:	bf5c      	itt	pl
 80a4250:	2201      	movpl	r2, #1
 80a4252:	601a      	strpl	r2, [r3, #0]
 80a4254:	4770      	bx	lr
 80a4256:	bf00      	nop
 80a4258:	20000970 	.word	0x20000970
 80a425c:	2000096c 	.word	0x2000096c
 80a4260:	20000968 	.word	0x20000968
 80a4264:	20000964 	.word	0x20000964
 80a4268:	20000960 	.word	0x20000960
 80a426c:	2000095c 	.word	0x2000095c
 80a4270:	20000958 	.word	0x20000958
 80a4274:	20000954 	.word	0x20000954

080a4278 <__aeabi_drsub>:
 80a4278:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a427c:	e002      	b.n	80a4284 <__adddf3>
 80a427e:	bf00      	nop

080a4280 <__aeabi_dsub>:
 80a4280:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a4284 <__adddf3>:
 80a4284:	b530      	push	{r4, r5, lr}
 80a4286:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a428a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a428e:	ea94 0f05 	teq	r4, r5
 80a4292:	bf08      	it	eq
 80a4294:	ea90 0f02 	teqeq	r0, r2
 80a4298:	bf1f      	itttt	ne
 80a429a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a429e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a42a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a42a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a42aa:	f000 80e2 	beq.w	80a4472 <__adddf3+0x1ee>
 80a42ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a42b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a42b6:	bfb8      	it	lt
 80a42b8:	426d      	neglt	r5, r5
 80a42ba:	dd0c      	ble.n	80a42d6 <__adddf3+0x52>
 80a42bc:	442c      	add	r4, r5
 80a42be:	ea80 0202 	eor.w	r2, r0, r2
 80a42c2:	ea81 0303 	eor.w	r3, r1, r3
 80a42c6:	ea82 0000 	eor.w	r0, r2, r0
 80a42ca:	ea83 0101 	eor.w	r1, r3, r1
 80a42ce:	ea80 0202 	eor.w	r2, r0, r2
 80a42d2:	ea81 0303 	eor.w	r3, r1, r3
 80a42d6:	2d36      	cmp	r5, #54	; 0x36
 80a42d8:	bf88      	it	hi
 80a42da:	bd30      	pophi	{r4, r5, pc}
 80a42dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a42e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a42e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a42e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a42ec:	d002      	beq.n	80a42f4 <__adddf3+0x70>
 80a42ee:	4240      	negs	r0, r0
 80a42f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a42f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a42f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a42fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a4300:	d002      	beq.n	80a4308 <__adddf3+0x84>
 80a4302:	4252      	negs	r2, r2
 80a4304:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4308:	ea94 0f05 	teq	r4, r5
 80a430c:	f000 80a7 	beq.w	80a445e <__adddf3+0x1da>
 80a4310:	f1a4 0401 	sub.w	r4, r4, #1
 80a4314:	f1d5 0e20 	rsbs	lr, r5, #32
 80a4318:	db0d      	blt.n	80a4336 <__adddf3+0xb2>
 80a431a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a431e:	fa22 f205 	lsr.w	r2, r2, r5
 80a4322:	1880      	adds	r0, r0, r2
 80a4324:	f141 0100 	adc.w	r1, r1, #0
 80a4328:	fa03 f20e 	lsl.w	r2, r3, lr
 80a432c:	1880      	adds	r0, r0, r2
 80a432e:	fa43 f305 	asr.w	r3, r3, r5
 80a4332:	4159      	adcs	r1, r3
 80a4334:	e00e      	b.n	80a4354 <__adddf3+0xd0>
 80a4336:	f1a5 0520 	sub.w	r5, r5, #32
 80a433a:	f10e 0e20 	add.w	lr, lr, #32
 80a433e:	2a01      	cmp	r2, #1
 80a4340:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a4344:	bf28      	it	cs
 80a4346:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a434a:	fa43 f305 	asr.w	r3, r3, r5
 80a434e:	18c0      	adds	r0, r0, r3
 80a4350:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a4354:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4358:	d507      	bpl.n	80a436a <__adddf3+0xe6>
 80a435a:	f04f 0e00 	mov.w	lr, #0
 80a435e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a4362:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a4366:	eb6e 0101 	sbc.w	r1, lr, r1
 80a436a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a436e:	d31b      	bcc.n	80a43a8 <__adddf3+0x124>
 80a4370:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a4374:	d30c      	bcc.n	80a4390 <__adddf3+0x10c>
 80a4376:	0849      	lsrs	r1, r1, #1
 80a4378:	ea5f 0030 	movs.w	r0, r0, rrx
 80a437c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a4380:	f104 0401 	add.w	r4, r4, #1
 80a4384:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a4388:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a438c:	f080 809a 	bcs.w	80a44c4 <__adddf3+0x240>
 80a4390:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4394:	bf08      	it	eq
 80a4396:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a439a:	f150 0000 	adcs.w	r0, r0, #0
 80a439e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a43a2:	ea41 0105 	orr.w	r1, r1, r5
 80a43a6:	bd30      	pop	{r4, r5, pc}
 80a43a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a43ac:	4140      	adcs	r0, r0
 80a43ae:	eb41 0101 	adc.w	r1, r1, r1
 80a43b2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a43b6:	f1a4 0401 	sub.w	r4, r4, #1
 80a43ba:	d1e9      	bne.n	80a4390 <__adddf3+0x10c>
 80a43bc:	f091 0f00 	teq	r1, #0
 80a43c0:	bf04      	itt	eq
 80a43c2:	4601      	moveq	r1, r0
 80a43c4:	2000      	moveq	r0, #0
 80a43c6:	fab1 f381 	clz	r3, r1
 80a43ca:	bf08      	it	eq
 80a43cc:	3320      	addeq	r3, #32
 80a43ce:	f1a3 030b 	sub.w	r3, r3, #11
 80a43d2:	f1b3 0220 	subs.w	r2, r3, #32
 80a43d6:	da0c      	bge.n	80a43f2 <__adddf3+0x16e>
 80a43d8:	320c      	adds	r2, #12
 80a43da:	dd08      	ble.n	80a43ee <__adddf3+0x16a>
 80a43dc:	f102 0c14 	add.w	ip, r2, #20
 80a43e0:	f1c2 020c 	rsb	r2, r2, #12
 80a43e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80a43e8:	fa21 f102 	lsr.w	r1, r1, r2
 80a43ec:	e00c      	b.n	80a4408 <__adddf3+0x184>
 80a43ee:	f102 0214 	add.w	r2, r2, #20
 80a43f2:	bfd8      	it	le
 80a43f4:	f1c2 0c20 	rsble	ip, r2, #32
 80a43f8:	fa01 f102 	lsl.w	r1, r1, r2
 80a43fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a4400:	bfdc      	itt	le
 80a4402:	ea41 010c 	orrle.w	r1, r1, ip
 80a4406:	4090      	lslle	r0, r2
 80a4408:	1ae4      	subs	r4, r4, r3
 80a440a:	bfa2      	ittt	ge
 80a440c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a4410:	4329      	orrge	r1, r5
 80a4412:	bd30      	popge	{r4, r5, pc}
 80a4414:	ea6f 0404 	mvn.w	r4, r4
 80a4418:	3c1f      	subs	r4, #31
 80a441a:	da1c      	bge.n	80a4456 <__adddf3+0x1d2>
 80a441c:	340c      	adds	r4, #12
 80a441e:	dc0e      	bgt.n	80a443e <__adddf3+0x1ba>
 80a4420:	f104 0414 	add.w	r4, r4, #20
 80a4424:	f1c4 0220 	rsb	r2, r4, #32
 80a4428:	fa20 f004 	lsr.w	r0, r0, r4
 80a442c:	fa01 f302 	lsl.w	r3, r1, r2
 80a4430:	ea40 0003 	orr.w	r0, r0, r3
 80a4434:	fa21 f304 	lsr.w	r3, r1, r4
 80a4438:	ea45 0103 	orr.w	r1, r5, r3
 80a443c:	bd30      	pop	{r4, r5, pc}
 80a443e:	f1c4 040c 	rsb	r4, r4, #12
 80a4442:	f1c4 0220 	rsb	r2, r4, #32
 80a4446:	fa20 f002 	lsr.w	r0, r0, r2
 80a444a:	fa01 f304 	lsl.w	r3, r1, r4
 80a444e:	ea40 0003 	orr.w	r0, r0, r3
 80a4452:	4629      	mov	r1, r5
 80a4454:	bd30      	pop	{r4, r5, pc}
 80a4456:	fa21 f004 	lsr.w	r0, r1, r4
 80a445a:	4629      	mov	r1, r5
 80a445c:	bd30      	pop	{r4, r5, pc}
 80a445e:	f094 0f00 	teq	r4, #0
 80a4462:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a4466:	bf06      	itte	eq
 80a4468:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a446c:	3401      	addeq	r4, #1
 80a446e:	3d01      	subne	r5, #1
 80a4470:	e74e      	b.n	80a4310 <__adddf3+0x8c>
 80a4472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4476:	bf18      	it	ne
 80a4478:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a447c:	d029      	beq.n	80a44d2 <__adddf3+0x24e>
 80a447e:	ea94 0f05 	teq	r4, r5
 80a4482:	bf08      	it	eq
 80a4484:	ea90 0f02 	teqeq	r0, r2
 80a4488:	d005      	beq.n	80a4496 <__adddf3+0x212>
 80a448a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a448e:	bf04      	itt	eq
 80a4490:	4619      	moveq	r1, r3
 80a4492:	4610      	moveq	r0, r2
 80a4494:	bd30      	pop	{r4, r5, pc}
 80a4496:	ea91 0f03 	teq	r1, r3
 80a449a:	bf1e      	ittt	ne
 80a449c:	2100      	movne	r1, #0
 80a449e:	2000      	movne	r0, #0
 80a44a0:	bd30      	popne	{r4, r5, pc}
 80a44a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a44a6:	d105      	bne.n	80a44b4 <__adddf3+0x230>
 80a44a8:	0040      	lsls	r0, r0, #1
 80a44aa:	4149      	adcs	r1, r1
 80a44ac:	bf28      	it	cs
 80a44ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a44b2:	bd30      	pop	{r4, r5, pc}
 80a44b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a44b8:	bf3c      	itt	cc
 80a44ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a44be:	bd30      	popcc	{r4, r5, pc}
 80a44c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a44c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a44c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a44cc:	f04f 0000 	mov.w	r0, #0
 80a44d0:	bd30      	pop	{r4, r5, pc}
 80a44d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a44d6:	bf1a      	itte	ne
 80a44d8:	4619      	movne	r1, r3
 80a44da:	4610      	movne	r0, r2
 80a44dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a44e0:	bf1c      	itt	ne
 80a44e2:	460b      	movne	r3, r1
 80a44e4:	4602      	movne	r2, r0
 80a44e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a44ea:	bf06      	itte	eq
 80a44ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a44f0:	ea91 0f03 	teqeq	r1, r3
 80a44f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a44f8:	bd30      	pop	{r4, r5, pc}
 80a44fa:	bf00      	nop

080a44fc <__aeabi_ui2d>:
 80a44fc:	f090 0f00 	teq	r0, #0
 80a4500:	bf04      	itt	eq
 80a4502:	2100      	moveq	r1, #0
 80a4504:	4770      	bxeq	lr
 80a4506:	b530      	push	{r4, r5, lr}
 80a4508:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a450c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4510:	f04f 0500 	mov.w	r5, #0
 80a4514:	f04f 0100 	mov.w	r1, #0
 80a4518:	e750      	b.n	80a43bc <__adddf3+0x138>
 80a451a:	bf00      	nop

080a451c <__aeabi_i2d>:
 80a451c:	f090 0f00 	teq	r0, #0
 80a4520:	bf04      	itt	eq
 80a4522:	2100      	moveq	r1, #0
 80a4524:	4770      	bxeq	lr
 80a4526:	b530      	push	{r4, r5, lr}
 80a4528:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a452c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4530:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a4534:	bf48      	it	mi
 80a4536:	4240      	negmi	r0, r0
 80a4538:	f04f 0100 	mov.w	r1, #0
 80a453c:	e73e      	b.n	80a43bc <__adddf3+0x138>
 80a453e:	bf00      	nop

080a4540 <__aeabi_f2d>:
 80a4540:	0042      	lsls	r2, r0, #1
 80a4542:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a4546:	ea4f 0131 	mov.w	r1, r1, rrx
 80a454a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a454e:	bf1f      	itttt	ne
 80a4550:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a4554:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4558:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a455c:	4770      	bxne	lr
 80a455e:	f092 0f00 	teq	r2, #0
 80a4562:	bf14      	ite	ne
 80a4564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4568:	4770      	bxeq	lr
 80a456a:	b530      	push	{r4, r5, lr}
 80a456c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a4570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4578:	e720      	b.n	80a43bc <__adddf3+0x138>
 80a457a:	bf00      	nop

080a457c <__aeabi_ul2d>:
 80a457c:	ea50 0201 	orrs.w	r2, r0, r1
 80a4580:	bf08      	it	eq
 80a4582:	4770      	bxeq	lr
 80a4584:	b530      	push	{r4, r5, lr}
 80a4586:	f04f 0500 	mov.w	r5, #0
 80a458a:	e00a      	b.n	80a45a2 <__aeabi_l2d+0x16>

080a458c <__aeabi_l2d>:
 80a458c:	ea50 0201 	orrs.w	r2, r0, r1
 80a4590:	bf08      	it	eq
 80a4592:	4770      	bxeq	lr
 80a4594:	b530      	push	{r4, r5, lr}
 80a4596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a459a:	d502      	bpl.n	80a45a2 <__aeabi_l2d+0x16>
 80a459c:	4240      	negs	r0, r0
 80a459e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a45a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a45a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a45aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a45ae:	f43f aedc 	beq.w	80a436a <__adddf3+0xe6>
 80a45b2:	f04f 0203 	mov.w	r2, #3
 80a45b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a45ba:	bf18      	it	ne
 80a45bc:	3203      	addne	r2, #3
 80a45be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a45c2:	bf18      	it	ne
 80a45c4:	3203      	addne	r2, #3
 80a45c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a45ca:	f1c2 0320 	rsb	r3, r2, #32
 80a45ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80a45d2:	fa20 f002 	lsr.w	r0, r0, r2
 80a45d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80a45da:	ea40 000e 	orr.w	r0, r0, lr
 80a45de:	fa21 f102 	lsr.w	r1, r1, r2
 80a45e2:	4414      	add	r4, r2
 80a45e4:	e6c1      	b.n	80a436a <__adddf3+0xe6>
 80a45e6:	bf00      	nop

080a45e8 <__aeabi_dmul>:
 80a45e8:	b570      	push	{r4, r5, r6, lr}
 80a45ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a45ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a45f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a45f6:	bf1d      	ittte	ne
 80a45f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a45fc:	ea94 0f0c 	teqne	r4, ip
 80a4600:	ea95 0f0c 	teqne	r5, ip
 80a4604:	f000 f8de 	bleq	80a47c4 <__aeabi_dmul+0x1dc>
 80a4608:	442c      	add	r4, r5
 80a460a:	ea81 0603 	eor.w	r6, r1, r3
 80a460e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a4612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a4616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a461a:	bf18      	it	ne
 80a461c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a4620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a4628:	d038      	beq.n	80a469c <__aeabi_dmul+0xb4>
 80a462a:	fba0 ce02 	umull	ip, lr, r0, r2
 80a462e:	f04f 0500 	mov.w	r5, #0
 80a4632:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a4636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a463a:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a463e:	f04f 0600 	mov.w	r6, #0
 80a4642:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a4646:	f09c 0f00 	teq	ip, #0
 80a464a:	bf18      	it	ne
 80a464c:	f04e 0e01 	orrne.w	lr, lr, #1
 80a4650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a4654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a4658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a465c:	d204      	bcs.n	80a4668 <__aeabi_dmul+0x80>
 80a465e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a4662:	416d      	adcs	r5, r5
 80a4664:	eb46 0606 	adc.w	r6, r6, r6
 80a4668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a466c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a4670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a4674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a4678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a467c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4680:	bf88      	it	hi
 80a4682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4686:	d81e      	bhi.n	80a46c6 <__aeabi_dmul+0xde>
 80a4688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a468c:	bf08      	it	eq
 80a468e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a4692:	f150 0000 	adcs.w	r0, r0, #0
 80a4696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a469a:	bd70      	pop	{r4, r5, r6, pc}
 80a469c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a46a0:	ea46 0101 	orr.w	r1, r6, r1
 80a46a4:	ea40 0002 	orr.w	r0, r0, r2
 80a46a8:	ea81 0103 	eor.w	r1, r1, r3
 80a46ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a46b0:	bfc2      	ittt	gt
 80a46b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a46b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a46ba:	bd70      	popgt	{r4, r5, r6, pc}
 80a46bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a46c0:	f04f 0e00 	mov.w	lr, #0
 80a46c4:	3c01      	subs	r4, #1
 80a46c6:	f300 80ab 	bgt.w	80a4820 <__aeabi_dmul+0x238>
 80a46ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a46ce:	bfde      	ittt	le
 80a46d0:	2000      	movle	r0, #0
 80a46d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a46d6:	bd70      	pople	{r4, r5, r6, pc}
 80a46d8:	f1c4 0400 	rsb	r4, r4, #0
 80a46dc:	3c20      	subs	r4, #32
 80a46de:	da35      	bge.n	80a474c <__aeabi_dmul+0x164>
 80a46e0:	340c      	adds	r4, #12
 80a46e2:	dc1b      	bgt.n	80a471c <__aeabi_dmul+0x134>
 80a46e4:	f104 0414 	add.w	r4, r4, #20
 80a46e8:	f1c4 0520 	rsb	r5, r4, #32
 80a46ec:	fa00 f305 	lsl.w	r3, r0, r5
 80a46f0:	fa20 f004 	lsr.w	r0, r0, r4
 80a46f4:	fa01 f205 	lsl.w	r2, r1, r5
 80a46f8:	ea40 0002 	orr.w	r0, r0, r2
 80a46fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a4700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4708:	fa21 f604 	lsr.w	r6, r1, r4
 80a470c:	eb42 0106 	adc.w	r1, r2, r6
 80a4710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4714:	bf08      	it	eq
 80a4716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a471a:	bd70      	pop	{r4, r5, r6, pc}
 80a471c:	f1c4 040c 	rsb	r4, r4, #12
 80a4720:	f1c4 0520 	rsb	r5, r4, #32
 80a4724:	fa00 f304 	lsl.w	r3, r0, r4
 80a4728:	fa20 f005 	lsr.w	r0, r0, r5
 80a472c:	fa01 f204 	lsl.w	r2, r1, r4
 80a4730:	ea40 0002 	orr.w	r0, r0, r2
 80a4734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a473c:	f141 0100 	adc.w	r1, r1, #0
 80a4740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4744:	bf08      	it	eq
 80a4746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a474a:	bd70      	pop	{r4, r5, r6, pc}
 80a474c:	f1c4 0520 	rsb	r5, r4, #32
 80a4750:	fa00 f205 	lsl.w	r2, r0, r5
 80a4754:	ea4e 0e02 	orr.w	lr, lr, r2
 80a4758:	fa20 f304 	lsr.w	r3, r0, r4
 80a475c:	fa01 f205 	lsl.w	r2, r1, r5
 80a4760:	ea43 0302 	orr.w	r3, r3, r2
 80a4764:	fa21 f004 	lsr.w	r0, r1, r4
 80a4768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a476c:	fa21 f204 	lsr.w	r2, r1, r4
 80a4770:	ea20 0002 	bic.w	r0, r0, r2
 80a4774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a4778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a477c:	bf08      	it	eq
 80a477e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4782:	bd70      	pop	{r4, r5, r6, pc}
 80a4784:	f094 0f00 	teq	r4, #0
 80a4788:	d10f      	bne.n	80a47aa <__aeabi_dmul+0x1c2>
 80a478a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a478e:	0040      	lsls	r0, r0, #1
 80a4790:	eb41 0101 	adc.w	r1, r1, r1
 80a4794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4798:	bf08      	it	eq
 80a479a:	3c01      	subeq	r4, #1
 80a479c:	d0f7      	beq.n	80a478e <__aeabi_dmul+0x1a6>
 80a479e:	ea41 0106 	orr.w	r1, r1, r6
 80a47a2:	f095 0f00 	teq	r5, #0
 80a47a6:	bf18      	it	ne
 80a47a8:	4770      	bxne	lr
 80a47aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a47ae:	0052      	lsls	r2, r2, #1
 80a47b0:	eb43 0303 	adc.w	r3, r3, r3
 80a47b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a47b8:	bf08      	it	eq
 80a47ba:	3d01      	subeq	r5, #1
 80a47bc:	d0f7      	beq.n	80a47ae <__aeabi_dmul+0x1c6>
 80a47be:	ea43 0306 	orr.w	r3, r3, r6
 80a47c2:	4770      	bx	lr
 80a47c4:	ea94 0f0c 	teq	r4, ip
 80a47c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a47cc:	bf18      	it	ne
 80a47ce:	ea95 0f0c 	teqne	r5, ip
 80a47d2:	d00c      	beq.n	80a47ee <__aeabi_dmul+0x206>
 80a47d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a47d8:	bf18      	it	ne
 80a47da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a47de:	d1d1      	bne.n	80a4784 <__aeabi_dmul+0x19c>
 80a47e0:	ea81 0103 	eor.w	r1, r1, r3
 80a47e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a47e8:	f04f 0000 	mov.w	r0, #0
 80a47ec:	bd70      	pop	{r4, r5, r6, pc}
 80a47ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a47f2:	bf06      	itte	eq
 80a47f4:	4610      	moveq	r0, r2
 80a47f6:	4619      	moveq	r1, r3
 80a47f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a47fc:	d019      	beq.n	80a4832 <__aeabi_dmul+0x24a>
 80a47fe:	ea94 0f0c 	teq	r4, ip
 80a4802:	d102      	bne.n	80a480a <__aeabi_dmul+0x222>
 80a4804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a4808:	d113      	bne.n	80a4832 <__aeabi_dmul+0x24a>
 80a480a:	ea95 0f0c 	teq	r5, ip
 80a480e:	d105      	bne.n	80a481c <__aeabi_dmul+0x234>
 80a4810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a4814:	bf1c      	itt	ne
 80a4816:	4610      	movne	r0, r2
 80a4818:	4619      	movne	r1, r3
 80a481a:	d10a      	bne.n	80a4832 <__aeabi_dmul+0x24a>
 80a481c:	ea81 0103 	eor.w	r1, r1, r3
 80a4820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a482c:	f04f 0000 	mov.w	r0, #0
 80a4830:	bd70      	pop	{r4, r5, r6, pc}
 80a4832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a483a:	bd70      	pop	{r4, r5, r6, pc}

080a483c <__aeabi_ddiv>:
 80a483c:	b570      	push	{r4, r5, r6, lr}
 80a483e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a484a:	bf1d      	ittte	ne
 80a484c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4850:	ea94 0f0c 	teqne	r4, ip
 80a4854:	ea95 0f0c 	teqne	r5, ip
 80a4858:	f000 f8a7 	bleq	80a49aa <__aeabi_ddiv+0x16e>
 80a485c:	eba4 0405 	sub.w	r4, r4, r5
 80a4860:	ea81 0e03 	eor.w	lr, r1, r3
 80a4864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a486c:	f000 8088 	beq.w	80a4980 <__aeabi_ddiv+0x144>
 80a4870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a487c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a4880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a4888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a488c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a4890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a4894:	429d      	cmp	r5, r3
 80a4896:	bf08      	it	eq
 80a4898:	4296      	cmpeq	r6, r2
 80a489a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a489e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a48a2:	d202      	bcs.n	80a48aa <__aeabi_ddiv+0x6e>
 80a48a4:	085b      	lsrs	r3, r3, #1
 80a48a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a48aa:	1ab6      	subs	r6, r6, r2
 80a48ac:	eb65 0503 	sbc.w	r5, r5, r3
 80a48b0:	085b      	lsrs	r3, r3, #1
 80a48b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a48b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a48ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a48be:	ebb6 0e02 	subs.w	lr, r6, r2
 80a48c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a48c6:	bf22      	ittt	cs
 80a48c8:	1ab6      	subcs	r6, r6, r2
 80a48ca:	4675      	movcs	r5, lr
 80a48cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80a48d0:	085b      	lsrs	r3, r3, #1
 80a48d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a48d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a48da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a48de:	bf22      	ittt	cs
 80a48e0:	1ab6      	subcs	r6, r6, r2
 80a48e2:	4675      	movcs	r5, lr
 80a48e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a48e8:	085b      	lsrs	r3, r3, #1
 80a48ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80a48ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80a48f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a48f6:	bf22      	ittt	cs
 80a48f8:	1ab6      	subcs	r6, r6, r2
 80a48fa:	4675      	movcs	r5, lr
 80a48fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4900:	085b      	lsrs	r3, r3, #1
 80a4902:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4906:	ebb6 0e02 	subs.w	lr, r6, r2
 80a490a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a490e:	bf22      	ittt	cs
 80a4910:	1ab6      	subcs	r6, r6, r2
 80a4912:	4675      	movcs	r5, lr
 80a4914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4918:	ea55 0e06 	orrs.w	lr, r5, r6
 80a491c:	d018      	beq.n	80a4950 <__aeabi_ddiv+0x114>
 80a491e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a4922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a4926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a492a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a492e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a4932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a4936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a493a:	d1c0      	bne.n	80a48be <__aeabi_ddiv+0x82>
 80a493c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4940:	d10b      	bne.n	80a495a <__aeabi_ddiv+0x11e>
 80a4942:	ea41 0100 	orr.w	r1, r1, r0
 80a4946:	f04f 0000 	mov.w	r0, #0
 80a494a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a494e:	e7b6      	b.n	80a48be <__aeabi_ddiv+0x82>
 80a4950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4954:	bf04      	itt	eq
 80a4956:	4301      	orreq	r1, r0
 80a4958:	2000      	moveq	r0, #0
 80a495a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a495e:	bf88      	it	hi
 80a4960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4964:	f63f aeaf 	bhi.w	80a46c6 <__aeabi_dmul+0xde>
 80a4968:	ebb5 0c03 	subs.w	ip, r5, r3
 80a496c:	bf04      	itt	eq
 80a496e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a4972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4976:	f150 0000 	adcs.w	r0, r0, #0
 80a497a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a497e:	bd70      	pop	{r4, r5, r6, pc}
 80a4980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a4984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a4988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a498c:	bfc2      	ittt	gt
 80a498e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4996:	bd70      	popgt	{r4, r5, r6, pc}
 80a4998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a499c:	f04f 0e00 	mov.w	lr, #0
 80a49a0:	3c01      	subs	r4, #1
 80a49a2:	e690      	b.n	80a46c6 <__aeabi_dmul+0xde>
 80a49a4:	ea45 0e06 	orr.w	lr, r5, r6
 80a49a8:	e68d      	b.n	80a46c6 <__aeabi_dmul+0xde>
 80a49aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a49ae:	ea94 0f0c 	teq	r4, ip
 80a49b2:	bf08      	it	eq
 80a49b4:	ea95 0f0c 	teqeq	r5, ip
 80a49b8:	f43f af3b 	beq.w	80a4832 <__aeabi_dmul+0x24a>
 80a49bc:	ea94 0f0c 	teq	r4, ip
 80a49c0:	d10a      	bne.n	80a49d8 <__aeabi_ddiv+0x19c>
 80a49c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a49c6:	f47f af34 	bne.w	80a4832 <__aeabi_dmul+0x24a>
 80a49ca:	ea95 0f0c 	teq	r5, ip
 80a49ce:	f47f af25 	bne.w	80a481c <__aeabi_dmul+0x234>
 80a49d2:	4610      	mov	r0, r2
 80a49d4:	4619      	mov	r1, r3
 80a49d6:	e72c      	b.n	80a4832 <__aeabi_dmul+0x24a>
 80a49d8:	ea95 0f0c 	teq	r5, ip
 80a49dc:	d106      	bne.n	80a49ec <__aeabi_ddiv+0x1b0>
 80a49de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a49e2:	f43f aefd 	beq.w	80a47e0 <__aeabi_dmul+0x1f8>
 80a49e6:	4610      	mov	r0, r2
 80a49e8:	4619      	mov	r1, r3
 80a49ea:	e722      	b.n	80a4832 <__aeabi_dmul+0x24a>
 80a49ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a49f0:	bf18      	it	ne
 80a49f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a49f6:	f47f aec5 	bne.w	80a4784 <__aeabi_dmul+0x19c>
 80a49fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a49fe:	f47f af0d 	bne.w	80a481c <__aeabi_dmul+0x234>
 80a4a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a4a06:	f47f aeeb 	bne.w	80a47e0 <__aeabi_dmul+0x1f8>
 80a4a0a:	e712      	b.n	80a4832 <__aeabi_dmul+0x24a>

080a4a0c <__gedf2>:
 80a4a0c:	f04f 3cff 	mov.w	ip, #4294967295
 80a4a10:	e006      	b.n	80a4a20 <__cmpdf2+0x4>
 80a4a12:	bf00      	nop

080a4a14 <__ledf2>:
 80a4a14:	f04f 0c01 	mov.w	ip, #1
 80a4a18:	e002      	b.n	80a4a20 <__cmpdf2+0x4>
 80a4a1a:	bf00      	nop

080a4a1c <__cmpdf2>:
 80a4a1c:	f04f 0c01 	mov.w	ip, #1
 80a4a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4a30:	bf18      	it	ne
 80a4a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a4a36:	d01b      	beq.n	80a4a70 <__cmpdf2+0x54>
 80a4a38:	b001      	add	sp, #4
 80a4a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a4a3e:	bf0c      	ite	eq
 80a4a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a4a44:	ea91 0f03 	teqne	r1, r3
 80a4a48:	bf02      	ittt	eq
 80a4a4a:	ea90 0f02 	teqeq	r0, r2
 80a4a4e:	2000      	moveq	r0, #0
 80a4a50:	4770      	bxeq	lr
 80a4a52:	f110 0f00 	cmn.w	r0, #0
 80a4a56:	ea91 0f03 	teq	r1, r3
 80a4a5a:	bf58      	it	pl
 80a4a5c:	4299      	cmppl	r1, r3
 80a4a5e:	bf08      	it	eq
 80a4a60:	4290      	cmpeq	r0, r2
 80a4a62:	bf2c      	ite	cs
 80a4a64:	17d8      	asrcs	r0, r3, #31
 80a4a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a4a6a:	f040 0001 	orr.w	r0, r0, #1
 80a4a6e:	4770      	bx	lr
 80a4a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4a78:	d102      	bne.n	80a4a80 <__cmpdf2+0x64>
 80a4a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4a7e:	d107      	bne.n	80a4a90 <__cmpdf2+0x74>
 80a4a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4a88:	d1d6      	bne.n	80a4a38 <__cmpdf2+0x1c>
 80a4a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a4a8e:	d0d3      	beq.n	80a4a38 <__cmpdf2+0x1c>
 80a4a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4a94:	4770      	bx	lr
 80a4a96:	bf00      	nop

080a4a98 <__aeabi_cdrcmple>:
 80a4a98:	4684      	mov	ip, r0
 80a4a9a:	4610      	mov	r0, r2
 80a4a9c:	4662      	mov	r2, ip
 80a4a9e:	468c      	mov	ip, r1
 80a4aa0:	4619      	mov	r1, r3
 80a4aa2:	4663      	mov	r3, ip
 80a4aa4:	e000      	b.n	80a4aa8 <__aeabi_cdcmpeq>
 80a4aa6:	bf00      	nop

080a4aa8 <__aeabi_cdcmpeq>:
 80a4aa8:	b501      	push	{r0, lr}
 80a4aaa:	f7ff ffb7 	bl	80a4a1c <__cmpdf2>
 80a4aae:	2800      	cmp	r0, #0
 80a4ab0:	bf48      	it	mi
 80a4ab2:	f110 0f00 	cmnmi.w	r0, #0
 80a4ab6:	bd01      	pop	{r0, pc}

080a4ab8 <__aeabi_dcmpeq>:
 80a4ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4abc:	f7ff fff4 	bl	80a4aa8 <__aeabi_cdcmpeq>
 80a4ac0:	bf0c      	ite	eq
 80a4ac2:	2001      	moveq	r0, #1
 80a4ac4:	2000      	movne	r0, #0
 80a4ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4aca:	bf00      	nop

080a4acc <__aeabi_dcmplt>:
 80a4acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4ad0:	f7ff ffea 	bl	80a4aa8 <__aeabi_cdcmpeq>
 80a4ad4:	bf34      	ite	cc
 80a4ad6:	2001      	movcc	r0, #1
 80a4ad8:	2000      	movcs	r0, #0
 80a4ada:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4ade:	bf00      	nop

080a4ae0 <__aeabi_dcmple>:
 80a4ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4ae4:	f7ff ffe0 	bl	80a4aa8 <__aeabi_cdcmpeq>
 80a4ae8:	bf94      	ite	ls
 80a4aea:	2001      	movls	r0, #1
 80a4aec:	2000      	movhi	r0, #0
 80a4aee:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4af2:	bf00      	nop

080a4af4 <__aeabi_dcmpge>:
 80a4af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4af8:	f7ff ffce 	bl	80a4a98 <__aeabi_cdrcmple>
 80a4afc:	bf94      	ite	ls
 80a4afe:	2001      	movls	r0, #1
 80a4b00:	2000      	movhi	r0, #0
 80a4b02:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4b06:	bf00      	nop

080a4b08 <__aeabi_dcmpgt>:
 80a4b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4b0c:	f7ff ffc4 	bl	80a4a98 <__aeabi_cdrcmple>
 80a4b10:	bf34      	ite	cc
 80a4b12:	2001      	movcc	r0, #1
 80a4b14:	2000      	movcs	r0, #0
 80a4b16:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4b1a:	bf00      	nop

080a4b1c <__aeabi_d2f>:
 80a4b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a4b24:	bf24      	itt	cs
 80a4b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a4b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a4b2e:	d90d      	bls.n	80a4b4c <__aeabi_d2f+0x30>
 80a4b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a4b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a4b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a4b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a4b44:	bf08      	it	eq
 80a4b46:	f020 0001 	biceq.w	r0, r0, #1
 80a4b4a:	4770      	bx	lr
 80a4b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a4b50:	d121      	bne.n	80a4b96 <__aeabi_d2f+0x7a>
 80a4b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a4b56:	bfbc      	itt	lt
 80a4b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a4b5c:	4770      	bxlt	lr
 80a4b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a4b66:	f1c2 0218 	rsb	r2, r2, #24
 80a4b6a:	f1c2 0c20 	rsb	ip, r2, #32
 80a4b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 80a4b72:	fa20 f002 	lsr.w	r0, r0, r2
 80a4b76:	bf18      	it	ne
 80a4b78:	f040 0001 	orrne.w	r0, r0, #1
 80a4b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a4b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a4b88:	ea40 000c 	orr.w	r0, r0, ip
 80a4b8c:	fa23 f302 	lsr.w	r3, r3, r2
 80a4b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a4b94:	e7cc      	b.n	80a4b30 <__aeabi_d2f+0x14>
 80a4b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a4b9a:	d107      	bne.n	80a4bac <__aeabi_d2f+0x90>
 80a4b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a4ba0:	bf1e      	ittt	ne
 80a4ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a4ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a4baa:	4770      	bxne	lr
 80a4bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a4bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4bb8:	4770      	bx	lr
 80a4bba:	bf00      	nop

080a4bbc <__aeabi_frsub>:
 80a4bbc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a4bc0:	e002      	b.n	80a4bc8 <__addsf3>
 80a4bc2:	bf00      	nop

080a4bc4 <__aeabi_fsub>:
 80a4bc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a4bc8 <__addsf3>:
 80a4bc8:	0042      	lsls	r2, r0, #1
 80a4bca:	bf1f      	itttt	ne
 80a4bcc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a4bd0:	ea92 0f03 	teqne	r2, r3
 80a4bd4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a4bd8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4bdc:	d06a      	beq.n	80a4cb4 <__addsf3+0xec>
 80a4bde:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a4be2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a4be6:	bfc1      	itttt	gt
 80a4be8:	18d2      	addgt	r2, r2, r3
 80a4bea:	4041      	eorgt	r1, r0
 80a4bec:	4048      	eorgt	r0, r1
 80a4bee:	4041      	eorgt	r1, r0
 80a4bf0:	bfb8      	it	lt
 80a4bf2:	425b      	neglt	r3, r3
 80a4bf4:	2b19      	cmp	r3, #25
 80a4bf6:	bf88      	it	hi
 80a4bf8:	4770      	bxhi	lr
 80a4bfa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4bfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4c02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a4c06:	bf18      	it	ne
 80a4c08:	4240      	negne	r0, r0
 80a4c0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4c0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a4c12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a4c16:	bf18      	it	ne
 80a4c18:	4249      	negne	r1, r1
 80a4c1a:	ea92 0f03 	teq	r2, r3
 80a4c1e:	d03f      	beq.n	80a4ca0 <__addsf3+0xd8>
 80a4c20:	f1a2 0201 	sub.w	r2, r2, #1
 80a4c24:	fa41 fc03 	asr.w	ip, r1, r3
 80a4c28:	eb10 000c 	adds.w	r0, r0, ip
 80a4c2c:	f1c3 0320 	rsb	r3, r3, #32
 80a4c30:	fa01 f103 	lsl.w	r1, r1, r3
 80a4c34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4c38:	d502      	bpl.n	80a4c40 <__addsf3+0x78>
 80a4c3a:	4249      	negs	r1, r1
 80a4c3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a4c40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a4c44:	d313      	bcc.n	80a4c6e <__addsf3+0xa6>
 80a4c46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a4c4a:	d306      	bcc.n	80a4c5a <__addsf3+0x92>
 80a4c4c:	0840      	lsrs	r0, r0, #1
 80a4c4e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4c52:	f102 0201 	add.w	r2, r2, #1
 80a4c56:	2afe      	cmp	r2, #254	; 0xfe
 80a4c58:	d251      	bcs.n	80a4cfe <__addsf3+0x136>
 80a4c5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a4c5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4c62:	bf08      	it	eq
 80a4c64:	f020 0001 	biceq.w	r0, r0, #1
 80a4c68:	ea40 0003 	orr.w	r0, r0, r3
 80a4c6c:	4770      	bx	lr
 80a4c6e:	0049      	lsls	r1, r1, #1
 80a4c70:	eb40 0000 	adc.w	r0, r0, r0
 80a4c74:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a4c78:	f1a2 0201 	sub.w	r2, r2, #1
 80a4c7c:	d1ed      	bne.n	80a4c5a <__addsf3+0x92>
 80a4c7e:	fab0 fc80 	clz	ip, r0
 80a4c82:	f1ac 0c08 	sub.w	ip, ip, #8
 80a4c86:	ebb2 020c 	subs.w	r2, r2, ip
 80a4c8a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a4c8e:	bfaa      	itet	ge
 80a4c90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4c94:	4252      	neglt	r2, r2
 80a4c96:	4318      	orrge	r0, r3
 80a4c98:	bfbc      	itt	lt
 80a4c9a:	40d0      	lsrlt	r0, r2
 80a4c9c:	4318      	orrlt	r0, r3
 80a4c9e:	4770      	bx	lr
 80a4ca0:	f092 0f00 	teq	r2, #0
 80a4ca4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a4ca8:	bf06      	itte	eq
 80a4caa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a4cae:	3201      	addeq	r2, #1
 80a4cb0:	3b01      	subne	r3, #1
 80a4cb2:	e7b5      	b.n	80a4c20 <__addsf3+0x58>
 80a4cb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4cb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4cbc:	bf18      	it	ne
 80a4cbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4cc2:	d021      	beq.n	80a4d08 <__addsf3+0x140>
 80a4cc4:	ea92 0f03 	teq	r2, r3
 80a4cc8:	d004      	beq.n	80a4cd4 <__addsf3+0x10c>
 80a4cca:	f092 0f00 	teq	r2, #0
 80a4cce:	bf08      	it	eq
 80a4cd0:	4608      	moveq	r0, r1
 80a4cd2:	4770      	bx	lr
 80a4cd4:	ea90 0f01 	teq	r0, r1
 80a4cd8:	bf1c      	itt	ne
 80a4cda:	2000      	movne	r0, #0
 80a4cdc:	4770      	bxne	lr
 80a4cde:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a4ce2:	d104      	bne.n	80a4cee <__addsf3+0x126>
 80a4ce4:	0040      	lsls	r0, r0, #1
 80a4ce6:	bf28      	it	cs
 80a4ce8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a4cec:	4770      	bx	lr
 80a4cee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a4cf2:	bf3c      	itt	cc
 80a4cf4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a4cf8:	4770      	bxcc	lr
 80a4cfa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4cfe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a4d02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4d06:	4770      	bx	lr
 80a4d08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4d0c:	bf16      	itet	ne
 80a4d0e:	4608      	movne	r0, r1
 80a4d10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a4d14:	4601      	movne	r1, r0
 80a4d16:	0242      	lsls	r2, r0, #9
 80a4d18:	bf06      	itte	eq
 80a4d1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a4d1e:	ea90 0f01 	teqeq	r0, r1
 80a4d22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a4d26:	4770      	bx	lr

080a4d28 <__aeabi_ui2f>:
 80a4d28:	f04f 0300 	mov.w	r3, #0
 80a4d2c:	e004      	b.n	80a4d38 <__aeabi_i2f+0x8>
 80a4d2e:	bf00      	nop

080a4d30 <__aeabi_i2f>:
 80a4d30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a4d34:	bf48      	it	mi
 80a4d36:	4240      	negmi	r0, r0
 80a4d38:	ea5f 0c00 	movs.w	ip, r0
 80a4d3c:	bf08      	it	eq
 80a4d3e:	4770      	bxeq	lr
 80a4d40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a4d44:	4601      	mov	r1, r0
 80a4d46:	f04f 0000 	mov.w	r0, #0
 80a4d4a:	e01c      	b.n	80a4d86 <__aeabi_l2f+0x2a>

080a4d4c <__aeabi_ul2f>:
 80a4d4c:	ea50 0201 	orrs.w	r2, r0, r1
 80a4d50:	bf08      	it	eq
 80a4d52:	4770      	bxeq	lr
 80a4d54:	f04f 0300 	mov.w	r3, #0
 80a4d58:	e00a      	b.n	80a4d70 <__aeabi_l2f+0x14>
 80a4d5a:	bf00      	nop

080a4d5c <__aeabi_l2f>:
 80a4d5c:	ea50 0201 	orrs.w	r2, r0, r1
 80a4d60:	bf08      	it	eq
 80a4d62:	4770      	bxeq	lr
 80a4d64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a4d68:	d502      	bpl.n	80a4d70 <__aeabi_l2f+0x14>
 80a4d6a:	4240      	negs	r0, r0
 80a4d6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4d70:	ea5f 0c01 	movs.w	ip, r1
 80a4d74:	bf02      	ittt	eq
 80a4d76:	4684      	moveq	ip, r0
 80a4d78:	4601      	moveq	r1, r0
 80a4d7a:	2000      	moveq	r0, #0
 80a4d7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a4d80:	bf08      	it	eq
 80a4d82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a4d86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a4d8a:	fabc f28c 	clz	r2, ip
 80a4d8e:	3a08      	subs	r2, #8
 80a4d90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4d94:	db10      	blt.n	80a4db8 <__aeabi_l2f+0x5c>
 80a4d96:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4d9a:	4463      	add	r3, ip
 80a4d9c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4da0:	f1c2 0220 	rsb	r2, r2, #32
 80a4da4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4da8:	fa20 f202 	lsr.w	r2, r0, r2
 80a4dac:	eb43 0002 	adc.w	r0, r3, r2
 80a4db0:	bf08      	it	eq
 80a4db2:	f020 0001 	biceq.w	r0, r0, #1
 80a4db6:	4770      	bx	lr
 80a4db8:	f102 0220 	add.w	r2, r2, #32
 80a4dbc:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4dc0:	f1c2 0220 	rsb	r2, r2, #32
 80a4dc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a4dc8:	fa21 f202 	lsr.w	r2, r1, r2
 80a4dcc:	eb43 0002 	adc.w	r0, r3, r2
 80a4dd0:	bf08      	it	eq
 80a4dd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4dd6:	4770      	bx	lr

080a4dd8 <__aeabi_fmul>:
 80a4dd8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4ddc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4de0:	bf1e      	ittt	ne
 80a4de2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4de6:	ea92 0f0c 	teqne	r2, ip
 80a4dea:	ea93 0f0c 	teqne	r3, ip
 80a4dee:	d06f      	beq.n	80a4ed0 <__aeabi_fmul+0xf8>
 80a4df0:	441a      	add	r2, r3
 80a4df2:	ea80 0c01 	eor.w	ip, r0, r1
 80a4df6:	0240      	lsls	r0, r0, #9
 80a4df8:	bf18      	it	ne
 80a4dfa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a4dfe:	d01e      	beq.n	80a4e3e <__aeabi_fmul+0x66>
 80a4e00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a4e04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a4e08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a4e0c:	fba0 3101 	umull	r3, r1, r0, r1
 80a4e10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4e14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a4e18:	bf3e      	ittt	cc
 80a4e1a:	0049      	lslcc	r1, r1, #1
 80a4e1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a4e20:	005b      	lslcc	r3, r3, #1
 80a4e22:	ea40 0001 	orr.w	r0, r0, r1
 80a4e26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a4e2a:	2afd      	cmp	r2, #253	; 0xfd
 80a4e2c:	d81d      	bhi.n	80a4e6a <__aeabi_fmul+0x92>
 80a4e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a4e32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4e36:	bf08      	it	eq
 80a4e38:	f020 0001 	biceq.w	r0, r0, #1
 80a4e3c:	4770      	bx	lr
 80a4e3e:	f090 0f00 	teq	r0, #0
 80a4e42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4e46:	bf08      	it	eq
 80a4e48:	0249      	lsleq	r1, r1, #9
 80a4e4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4e4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a4e52:	3a7f      	subs	r2, #127	; 0x7f
 80a4e54:	bfc2      	ittt	gt
 80a4e56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4e5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4e5e:	4770      	bxgt	lr
 80a4e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4e64:	f04f 0300 	mov.w	r3, #0
 80a4e68:	3a01      	subs	r2, #1
 80a4e6a:	dc5d      	bgt.n	80a4f28 <__aeabi_fmul+0x150>
 80a4e6c:	f112 0f19 	cmn.w	r2, #25
 80a4e70:	bfdc      	itt	le
 80a4e72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a4e76:	4770      	bxle	lr
 80a4e78:	f1c2 0200 	rsb	r2, r2, #0
 80a4e7c:	0041      	lsls	r1, r0, #1
 80a4e7e:	fa21 f102 	lsr.w	r1, r1, r2
 80a4e82:	f1c2 0220 	rsb	r2, r2, #32
 80a4e86:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4e8a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a4e8e:	f140 0000 	adc.w	r0, r0, #0
 80a4e92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a4e96:	bf08      	it	eq
 80a4e98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4e9c:	4770      	bx	lr
 80a4e9e:	f092 0f00 	teq	r2, #0
 80a4ea2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4ea6:	bf02      	ittt	eq
 80a4ea8:	0040      	lsleq	r0, r0, #1
 80a4eaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4eae:	3a01      	subeq	r2, #1
 80a4eb0:	d0f9      	beq.n	80a4ea6 <__aeabi_fmul+0xce>
 80a4eb2:	ea40 000c 	orr.w	r0, r0, ip
 80a4eb6:	f093 0f00 	teq	r3, #0
 80a4eba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4ebe:	bf02      	ittt	eq
 80a4ec0:	0049      	lsleq	r1, r1, #1
 80a4ec2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4ec6:	3b01      	subeq	r3, #1
 80a4ec8:	d0f9      	beq.n	80a4ebe <__aeabi_fmul+0xe6>
 80a4eca:	ea41 010c 	orr.w	r1, r1, ip
 80a4ece:	e78f      	b.n	80a4df0 <__aeabi_fmul+0x18>
 80a4ed0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4ed4:	ea92 0f0c 	teq	r2, ip
 80a4ed8:	bf18      	it	ne
 80a4eda:	ea93 0f0c 	teqne	r3, ip
 80a4ede:	d00a      	beq.n	80a4ef6 <__aeabi_fmul+0x11e>
 80a4ee0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4ee4:	bf18      	it	ne
 80a4ee6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4eea:	d1d8      	bne.n	80a4e9e <__aeabi_fmul+0xc6>
 80a4eec:	ea80 0001 	eor.w	r0, r0, r1
 80a4ef0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4ef4:	4770      	bx	lr
 80a4ef6:	f090 0f00 	teq	r0, #0
 80a4efa:	bf17      	itett	ne
 80a4efc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a4f00:	4608      	moveq	r0, r1
 80a4f02:	f091 0f00 	teqne	r1, #0
 80a4f06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a4f0a:	d014      	beq.n	80a4f36 <__aeabi_fmul+0x15e>
 80a4f0c:	ea92 0f0c 	teq	r2, ip
 80a4f10:	d101      	bne.n	80a4f16 <__aeabi_fmul+0x13e>
 80a4f12:	0242      	lsls	r2, r0, #9
 80a4f14:	d10f      	bne.n	80a4f36 <__aeabi_fmul+0x15e>
 80a4f16:	ea93 0f0c 	teq	r3, ip
 80a4f1a:	d103      	bne.n	80a4f24 <__aeabi_fmul+0x14c>
 80a4f1c:	024b      	lsls	r3, r1, #9
 80a4f1e:	bf18      	it	ne
 80a4f20:	4608      	movne	r0, r1
 80a4f22:	d108      	bne.n	80a4f36 <__aeabi_fmul+0x15e>
 80a4f24:	ea80 0001 	eor.w	r0, r0, r1
 80a4f28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4f2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4f30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4f34:	4770      	bx	lr
 80a4f36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4f3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a4f3e:	4770      	bx	lr

080a4f40 <__aeabi_fdiv>:
 80a4f40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4f44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4f48:	bf1e      	ittt	ne
 80a4f4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4f4e:	ea92 0f0c 	teqne	r2, ip
 80a4f52:	ea93 0f0c 	teqne	r3, ip
 80a4f56:	d069      	beq.n	80a502c <__aeabi_fdiv+0xec>
 80a4f58:	eba2 0203 	sub.w	r2, r2, r3
 80a4f5c:	ea80 0c01 	eor.w	ip, r0, r1
 80a4f60:	0249      	lsls	r1, r1, #9
 80a4f62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a4f66:	d037      	beq.n	80a4fd8 <__aeabi_fdiv+0x98>
 80a4f68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a4f6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a4f70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a4f74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4f78:	428b      	cmp	r3, r1
 80a4f7a:	bf38      	it	cc
 80a4f7c:	005b      	lslcc	r3, r3, #1
 80a4f7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a4f82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a4f86:	428b      	cmp	r3, r1
 80a4f88:	bf24      	itt	cs
 80a4f8a:	1a5b      	subcs	r3, r3, r1
 80a4f8c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4f90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4f94:	bf24      	itt	cs
 80a4f96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a4f9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4f9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a4fa2:	bf24      	itt	cs
 80a4fa4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a4fa8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4fac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a4fb0:	bf24      	itt	cs
 80a4fb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a4fb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4fba:	011b      	lsls	r3, r3, #4
 80a4fbc:	bf18      	it	ne
 80a4fbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a4fc2:	d1e0      	bne.n	80a4f86 <__aeabi_fdiv+0x46>
 80a4fc4:	2afd      	cmp	r2, #253	; 0xfd
 80a4fc6:	f63f af50 	bhi.w	80a4e6a <__aeabi_fmul+0x92>
 80a4fca:	428b      	cmp	r3, r1
 80a4fcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4fd0:	bf08      	it	eq
 80a4fd2:	f020 0001 	biceq.w	r0, r0, #1
 80a4fd6:	4770      	bx	lr
 80a4fd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4fdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4fe0:	327f      	adds	r2, #127	; 0x7f
 80a4fe2:	bfc2      	ittt	gt
 80a4fe4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4fe8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4fec:	4770      	bxgt	lr
 80a4fee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4ff2:	f04f 0300 	mov.w	r3, #0
 80a4ff6:	3a01      	subs	r2, #1
 80a4ff8:	e737      	b.n	80a4e6a <__aeabi_fmul+0x92>
 80a4ffa:	f092 0f00 	teq	r2, #0
 80a4ffe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a5002:	bf02      	ittt	eq
 80a5004:	0040      	lsleq	r0, r0, #1
 80a5006:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a500a:	3a01      	subeq	r2, #1
 80a500c:	d0f9      	beq.n	80a5002 <__aeabi_fdiv+0xc2>
 80a500e:	ea40 000c 	orr.w	r0, r0, ip
 80a5012:	f093 0f00 	teq	r3, #0
 80a5016:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a501a:	bf02      	ittt	eq
 80a501c:	0049      	lsleq	r1, r1, #1
 80a501e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a5022:	3b01      	subeq	r3, #1
 80a5024:	d0f9      	beq.n	80a501a <__aeabi_fdiv+0xda>
 80a5026:	ea41 010c 	orr.w	r1, r1, ip
 80a502a:	e795      	b.n	80a4f58 <__aeabi_fdiv+0x18>
 80a502c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5030:	ea92 0f0c 	teq	r2, ip
 80a5034:	d108      	bne.n	80a5048 <__aeabi_fdiv+0x108>
 80a5036:	0242      	lsls	r2, r0, #9
 80a5038:	f47f af7d 	bne.w	80a4f36 <__aeabi_fmul+0x15e>
 80a503c:	ea93 0f0c 	teq	r3, ip
 80a5040:	f47f af70 	bne.w	80a4f24 <__aeabi_fmul+0x14c>
 80a5044:	4608      	mov	r0, r1
 80a5046:	e776      	b.n	80a4f36 <__aeabi_fmul+0x15e>
 80a5048:	ea93 0f0c 	teq	r3, ip
 80a504c:	d104      	bne.n	80a5058 <__aeabi_fdiv+0x118>
 80a504e:	024b      	lsls	r3, r1, #9
 80a5050:	f43f af4c 	beq.w	80a4eec <__aeabi_fmul+0x114>
 80a5054:	4608      	mov	r0, r1
 80a5056:	e76e      	b.n	80a4f36 <__aeabi_fmul+0x15e>
 80a5058:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a505c:	bf18      	it	ne
 80a505e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5062:	d1ca      	bne.n	80a4ffa <__aeabi_fdiv+0xba>
 80a5064:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a5068:	f47f af5c 	bne.w	80a4f24 <__aeabi_fmul+0x14c>
 80a506c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a5070:	f47f af3c 	bne.w	80a4eec <__aeabi_fmul+0x114>
 80a5074:	e75f      	b.n	80a4f36 <__aeabi_fmul+0x15e>
 80a5076:	bf00      	nop

080a5078 <__gesf2>:
 80a5078:	f04f 3cff 	mov.w	ip, #4294967295
 80a507c:	e006      	b.n	80a508c <__cmpsf2+0x4>
 80a507e:	bf00      	nop

080a5080 <__lesf2>:
 80a5080:	f04f 0c01 	mov.w	ip, #1
 80a5084:	e002      	b.n	80a508c <__cmpsf2+0x4>
 80a5086:	bf00      	nop

080a5088 <__cmpsf2>:
 80a5088:	f04f 0c01 	mov.w	ip, #1
 80a508c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5090:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a5094:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5098:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a509c:	bf18      	it	ne
 80a509e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a50a2:	d011      	beq.n	80a50c8 <__cmpsf2+0x40>
 80a50a4:	b001      	add	sp, #4
 80a50a6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a50aa:	bf18      	it	ne
 80a50ac:	ea90 0f01 	teqne	r0, r1
 80a50b0:	bf58      	it	pl
 80a50b2:	ebb2 0003 	subspl.w	r0, r2, r3
 80a50b6:	bf88      	it	hi
 80a50b8:	17c8      	asrhi	r0, r1, #31
 80a50ba:	bf38      	it	cc
 80a50bc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a50c0:	bf18      	it	ne
 80a50c2:	f040 0001 	orrne.w	r0, r0, #1
 80a50c6:	4770      	bx	lr
 80a50c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a50cc:	d102      	bne.n	80a50d4 <__cmpsf2+0x4c>
 80a50ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a50d2:	d105      	bne.n	80a50e0 <__cmpsf2+0x58>
 80a50d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a50d8:	d1e4      	bne.n	80a50a4 <__cmpsf2+0x1c>
 80a50da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a50de:	d0e1      	beq.n	80a50a4 <__cmpsf2+0x1c>
 80a50e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a50e4:	4770      	bx	lr
 80a50e6:	bf00      	nop

080a50e8 <__aeabi_cfrcmple>:
 80a50e8:	4684      	mov	ip, r0
 80a50ea:	4608      	mov	r0, r1
 80a50ec:	4661      	mov	r1, ip
 80a50ee:	e7ff      	b.n	80a50f0 <__aeabi_cfcmpeq>

080a50f0 <__aeabi_cfcmpeq>:
 80a50f0:	b50f      	push	{r0, r1, r2, r3, lr}
 80a50f2:	f7ff ffc9 	bl	80a5088 <__cmpsf2>
 80a50f6:	2800      	cmp	r0, #0
 80a50f8:	bf48      	it	mi
 80a50fa:	f110 0f00 	cmnmi.w	r0, #0
 80a50fe:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a5100 <__aeabi_fcmpeq>:
 80a5100:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5104:	f7ff fff4 	bl	80a50f0 <__aeabi_cfcmpeq>
 80a5108:	bf0c      	ite	eq
 80a510a:	2001      	moveq	r0, #1
 80a510c:	2000      	movne	r0, #0
 80a510e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5112:	bf00      	nop

080a5114 <__aeabi_fcmplt>:
 80a5114:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5118:	f7ff ffea 	bl	80a50f0 <__aeabi_cfcmpeq>
 80a511c:	bf34      	ite	cc
 80a511e:	2001      	movcc	r0, #1
 80a5120:	2000      	movcs	r0, #0
 80a5122:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5126:	bf00      	nop

080a5128 <__aeabi_fcmple>:
 80a5128:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a512c:	f7ff ffe0 	bl	80a50f0 <__aeabi_cfcmpeq>
 80a5130:	bf94      	ite	ls
 80a5132:	2001      	movls	r0, #1
 80a5134:	2000      	movhi	r0, #0
 80a5136:	f85d fb08 	ldr.w	pc, [sp], #8
 80a513a:	bf00      	nop

080a513c <__aeabi_fcmpge>:
 80a513c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5140:	f7ff ffd2 	bl	80a50e8 <__aeabi_cfrcmple>
 80a5144:	bf94      	ite	ls
 80a5146:	2001      	movls	r0, #1
 80a5148:	2000      	movhi	r0, #0
 80a514a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a514e:	bf00      	nop

080a5150 <__aeabi_fcmpgt>:
 80a5150:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5154:	f7ff ffc8 	bl	80a50e8 <__aeabi_cfrcmple>
 80a5158:	bf34      	ite	cc
 80a515a:	2001      	movcc	r0, #1
 80a515c:	2000      	movcs	r0, #0
 80a515e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5162:	bf00      	nop

080a5164 <__aeabi_f2uiz>:
 80a5164:	0042      	lsls	r2, r0, #1
 80a5166:	d20e      	bcs.n	80a5186 <__aeabi_f2uiz+0x22>
 80a5168:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a516c:	d30b      	bcc.n	80a5186 <__aeabi_f2uiz+0x22>
 80a516e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a5172:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a5176:	d409      	bmi.n	80a518c <__aeabi_f2uiz+0x28>
 80a5178:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a517c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5180:	fa23 f002 	lsr.w	r0, r3, r2
 80a5184:	4770      	bx	lr
 80a5186:	f04f 0000 	mov.w	r0, #0
 80a518a:	4770      	bx	lr
 80a518c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a5190:	d101      	bne.n	80a5196 <__aeabi_f2uiz+0x32>
 80a5192:	0242      	lsls	r2, r0, #9
 80a5194:	d102      	bne.n	80a519c <__aeabi_f2uiz+0x38>
 80a5196:	f04f 30ff 	mov.w	r0, #4294967295
 80a519a:	4770      	bx	lr
 80a519c:	f04f 0000 	mov.w	r0, #0
 80a51a0:	4770      	bx	lr
 80a51a2:	bf00      	nop

080a51a4 <__cxa_atexit>:
 80a51a4:	b510      	push	{r4, lr}
 80a51a6:	4c05      	ldr	r4, [pc, #20]	; (80a51bc <__cxa_atexit+0x18>)
 80a51a8:	4613      	mov	r3, r2
 80a51aa:	b12c      	cbz	r4, 80a51b8 <__cxa_atexit+0x14>
 80a51ac:	460a      	mov	r2, r1
 80a51ae:	4601      	mov	r1, r0
 80a51b0:	2002      	movs	r0, #2
 80a51b2:	f3af 8000 	nop.w
 80a51b6:	bd10      	pop	{r4, pc}
 80a51b8:	4620      	mov	r0, r4
 80a51ba:	bd10      	pop	{r4, pc}
 80a51bc:	00000000 	.word	0x00000000

080a51c0 <memcpy>:
 80a51c0:	b510      	push	{r4, lr}
 80a51c2:	1e43      	subs	r3, r0, #1
 80a51c4:	440a      	add	r2, r1
 80a51c6:	4291      	cmp	r1, r2
 80a51c8:	d004      	beq.n	80a51d4 <memcpy+0x14>
 80a51ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a51ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a51d2:	e7f8      	b.n	80a51c6 <memcpy+0x6>
 80a51d4:	bd10      	pop	{r4, pc}

080a51d6 <memset>:
 80a51d6:	4603      	mov	r3, r0
 80a51d8:	4402      	add	r2, r0
 80a51da:	4293      	cmp	r3, r2
 80a51dc:	d002      	beq.n	80a51e4 <memset+0xe>
 80a51de:	f803 1b01 	strb.w	r1, [r3], #1
 80a51e2:	e7fa      	b.n	80a51da <memset+0x4>
 80a51e4:	4770      	bx	lr

080a51e6 <strlen>:
 80a51e6:	4603      	mov	r3, r0
 80a51e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a51ec:	2a00      	cmp	r2, #0
 80a51ee:	d1fb      	bne.n	80a51e8 <strlen+0x2>
 80a51f0:	1a18      	subs	r0, r3, r0
 80a51f2:	3801      	subs	r0, #1
 80a51f4:	4770      	bx	lr

080a51f6 <link_code_end>:
	...

080a51f8 <dynalib_user>:
 80a51f8:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a5208:	0000 0000                                   ....

080a520c <_ZTV5Timer>:
	...
 80a5214:	01fd 080a 023d 080a 0191 080a 6157 7469     ....=.......Wait
 80a5224:	6e69 2067 6f66 2072 7453 7261 0074 7453     ing for Start.St
 80a5234:	7261 6974 676e 6920 206e 2035 6573 6f63     arting in 5 seco
 80a5244:	646e 2e73 2e2e 4700 214f 4600 6c75 206c     nds....GO!.Full 
 80a5254:	654c 7466 5300 616d 6c6c 4c20 6665 0074     Left.Small Left.
 80a5264:	6543 746e 7265 5300 616d 6c6c 5220 6769     Center.Small Rig
 80a5274:	7468 4600 6c75 206c 6952 6867 0074 5453     ht.Full Right.ST
 80a5284:	504f 4550 0044 0000                         OPPED...

080a528c <_ZTV9LIS3DHI2C>:
	...
 80a5294:	21c1 080a 21c3 080a 2217 080a 21cf 080a     .!...!..."...!..
 80a52a4:	6564 6976 6563 6e20 746f 6620 756f 646e     device not found
 80a52b4:	7200 7365 7465 6974 676e 6c20 7361 4d74     .resetting lastM
 80a52c4:	766f 6d65 6e65 2074 6e69 3174 735f 6372     ovement int1_src
 80a52d4:	303d 2578 0078 6572 6163 696c 7262 7461     =0x%x.recalibrat
 80a52e4:	6e69 0067                                   ing.

080a52e8 <_ZTV8SPIClass>:
	...
 80a52f0:	3605 080a 3607 080a 0066 6e6c 6600 006e     .6...6..f.ln.fn.
 80a5300:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
 80a5310:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
 80a5320:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 80a5330:	0069 6564 6174 6c69 2073 203d 6200 7561     i.details = .bau
 80a5340:	0064 6553 6972 6c61 5500 4253 6553 6972     d.Serial.USBSeri
 80a5350:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
 80a5360:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
 80a5370:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
 80a5380:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
 80a5390:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
 80a53a0:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
 80a53b0:	7265 6100 7070 6e00 6e6f 0065 7274 6361     er.app.none.trac
 80a53c0:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
 80a53d0:	0072 6170 696e 0063 6c61 006c 005a 2b25     r.panic.all.Z.%+
 80a53e0:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a53f0:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a5400:	6974 656d 0000 0000                         time....

080a5408 <_ZTV9IPAddress>:
	...
 80a5410:	3a6b 080a 3a5d 080a 3a5f 080a               k:..]:.._:..

080a541c <_ZTV9USBSerial>:
	...
 80a5424:	3ad5 080a 3b19 080a 3af3 080a 37dd 080a     .:...;...:...7..
 80a5434:	3aed 080a 3ad7 080a 3adf 080a 3b13 080a     .:...:...:...;..
 80a5444:	3ae7 080a 3ad1 080a                         .:...:..

080a544c <_ZTV11USARTSerial>:
	...
 80a5454:	3c95 080a 3cb9 080a 3cc5 080a 37dd 080a     .<...<...<...7..
 80a5464:	3ca1 080a 3cad 080a 3ca7 080a 3cb3 080a     .<...<...<...<..
 80a5474:	3c97 080a 3c9b 080a                         .<...<..

080a547c <_ZTV7TwoWire>:
	...
 80a5484:	3d69 080a 3db3 080a 3d8b 080a 3d6b 080a     i=...=...=..k=..
 80a5494:	3d93 080a 3d9b 080a 3da3 080a 3dab 080a     .=...=...=...=..

080a54a4 <_ZTVN5spark9WiFiClassE>:
	...
 80a54ac:	3e3b 080a                                   ;>..

080a54b0 <link_const_variable_data_end>:
 80a54b0:	080a153d 	.word	0x080a153d
 80a54b4:	080a21bd 	.word	0x080a21bd
 80a54b8:	080a2411 	.word	0x080a2411
 80a54bc:	080a3701 	.word	0x080a3701
 80a54c0:	080a38bd 	.word	0x080a38bd
 80a54c4:	080a38cd 	.word	0x080a38cd
 80a54c8:	080a3e45 	.word	0x080a3e45
 80a54cc:	080a3f29 	.word	0x080a3f29
 80a54d0:	080a3f6d 	.word	0x080a3f6d
 80a54d4:	080a3fe9 	.word	0x080a3fe9
 80a54d8:	080a406d 	.word	0x080a406d
 80a54dc:	080a4131 	.word	0x080a4131
 80a54e0:	080a41f5 	.word	0x080a41f5

080a54e4 <link_constructors_end>:
	...
