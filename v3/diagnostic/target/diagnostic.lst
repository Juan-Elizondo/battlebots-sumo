
C:/src/auto-sumo/v3/diagnostic/target/diagnostic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff8  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a3010  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000020  20000300  080a3014  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000060c  20000320  20000320  00030320  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a3034  080a3034  00023034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a305c  080a305c  0002305c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00086504  00000000  00000000  00023060  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000e04c  00000000  00000000  000a9564  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000eb85  00000000  00000000  000b75b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001910  00000000  00000000  000c6135  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002560  00000000  00000000  000c7a45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00022dd2  00000000  00000000  000c9fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001f8f5  00000000  00000000  000ecd77  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000846f3  00000000  00000000  0010c66c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000a4dc  00000000  00000000  00190d60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	08 2d 0a 08                                         .-..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fe4f 	bl	80a2cd0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fe54 	bl	80a2ce6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a3014 	.word	0x080a3014
 80a004c:	20000320 	.word	0x20000320
 80a0050:	20000320 	.word	0x20000320
 80a0054:	2000092c 	.word	0x2000092c
 80a0058:	2000092c 	.word	0x2000092c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fdd1 	bl	80a1c04 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2fdc 	.word	0x080a2fdc
 80a0084:	080a3010 	.word	0x080a3010

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b930 	b.w	80a02ec <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f9cf 	bl	80a0430 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bd73 	b.w	80a1b80 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f001 bbcb 	b.w	80a1834 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <_Z5FLISRv>:
// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
unsigned long lastPrintSample = 0;

void FLISR() {
 80a00b0:	b508      	push	{r3, lr}
    FLflag = digitalRead(FL);
 80a00b2:	4b05      	ldr	r3, [pc, #20]	; (80a00c8 <_Z5FLISRv+0x18>)
 80a00b4:	8818      	ldrh	r0, [r3, #0]
 80a00b6:	f002 f81b 	bl	80a20f0 <digitalRead>
 80a00ba:	4b04      	ldr	r3, [pc, #16]	; (80a00cc <_Z5FLISRv+0x1c>)
 80a00bc:	3000      	adds	r0, #0
 80a00be:	bf18      	it	ne
 80a00c0:	2001      	movne	r0, #1
 80a00c2:	7018      	strb	r0, [r3, #0]
 80a00c4:	bd08      	pop	{r3, pc}
 80a00c6:	bf00      	nop
 80a00c8:	20000310 	.word	0x20000310
 80a00cc:	200003c4 	.word	0x200003c4

080a00d0 <_Z5FRISRv>:
}

void FRISR() {
 80a00d0:	b508      	push	{r3, lr}
    FRflag = digitalRead(FR);
 80a00d2:	4b05      	ldr	r3, [pc, #20]	; (80a00e8 <_Z5FRISRv+0x18>)
 80a00d4:	8818      	ldrh	r0, [r3, #0]
 80a00d6:	f002 f80b 	bl	80a20f0 <digitalRead>
 80a00da:	4b04      	ldr	r3, [pc, #16]	; (80a00ec <_Z5FRISRv+0x1c>)
 80a00dc:	3000      	adds	r0, #0
 80a00de:	bf18      	it	ne
 80a00e0:	2001      	movne	r0, #1
 80a00e2:	7018      	strb	r0, [r3, #0]
 80a00e4:	bd08      	pop	{r3, pc}
 80a00e6:	bf00      	nop
 80a00e8:	2000030c 	.word	0x2000030c
 80a00ec:	2000035c 	.word	0x2000035c

080a00f0 <_Z5BLISRv>:
}

void BLISR() {
 80a00f0:	b508      	push	{r3, lr}
    BLflag = digitalRead(BL);
 80a00f2:	4b05      	ldr	r3, [pc, #20]	; (80a0108 <_Z5BLISRv+0x18>)
 80a00f4:	8818      	ldrh	r0, [r3, #0]
 80a00f6:	f001 fffb 	bl	80a20f0 <digitalRead>
 80a00fa:	4b04      	ldr	r3, [pc, #16]	; (80a010c <_Z5BLISRv+0x1c>)
 80a00fc:	3000      	adds	r0, #0
 80a00fe:	bf18      	it	ne
 80a0100:	2001      	movne	r0, #1
 80a0102:	7018      	strb	r0, [r3, #0]
 80a0104:	bd08      	pop	{r3, pc}
 80a0106:	bf00      	nop
 80a0108:	20000318 	.word	0x20000318
 80a010c:	200003c5 	.word	0x200003c5

080a0110 <_Z5BRISRv>:
}

void BRISR() {
 80a0110:	b508      	push	{r3, lr}
    BRflag = digitalRead(BR);
 80a0112:	4b05      	ldr	r3, [pc, #20]	; (80a0128 <_Z5BRISRv+0x18>)
 80a0114:	8818      	ldrh	r0, [r3, #0]
 80a0116:	f001 ffeb 	bl	80a20f0 <digitalRead>
 80a011a:	4b04      	ldr	r3, [pc, #16]	; (80a012c <_Z5BRISRv+0x1c>)
 80a011c:	3000      	adds	r0, #0
 80a011e:	bf18      	it	ne
 80a0120:	2001      	movne	r0, #1
 80a0122:	7018      	strb	r0, [r3, #0]
 80a0124:	bd08      	pop	{r3, pc}
 80a0126:	bf00      	nop
 80a0128:	20000300 	.word	0x20000300
 80a012c:	2000035d 	.word	0x2000035d

080a0130 <_Z5RSISRv>:
}

void RSISR() {
 80a0130:	b508      	push	{r3, lr}
    RSflag = digitalRead(RS);
 80a0132:	4b05      	ldr	r3, [pc, #20]	; (80a0148 <_Z5RSISRv+0x18>)
 80a0134:	8818      	ldrh	r0, [r3, #0]
 80a0136:	f001 ffdb 	bl	80a20f0 <digitalRead>
 80a013a:	4b04      	ldr	r3, [pc, #16]	; (80a014c <_Z5RSISRv+0x1c>)
 80a013c:	3000      	adds	r0, #0
 80a013e:	bf18      	it	ne
 80a0140:	2001      	movne	r0, #1
 80a0142:	7018      	strb	r0, [r3, #0]
 80a0144:	bd08      	pop	{r3, pc}
 80a0146:	bf00      	nop
 80a0148:	20000314 	.word	0x20000314
 80a014c:	20000324 	.word	0x20000324

080a0150 <_Z8tof_initv>:
}

void tof_init() {
 80a0150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pinMode(A0, OUTPUT);
 80a0154:	2101      	movs	r1, #1
 80a0156:	200a      	movs	r0, #10
 80a0158:	f001 ffa0 	bl	80a209c <pinMode>
    pinMode(A1, OUTPUT);
 80a015c:	2101      	movs	r1, #1
 80a015e:	200b      	movs	r0, #11
 80a0160:	f001 ff9c 	bl	80a209c <pinMode>
    pinMode(A2, OUTPUT);
 80a0164:	2101      	movs	r1, #1
 80a0166:	200c      	movs	r0, #12
 80a0168:	f001 ff98 	bl	80a209c <pinMode>
    pinMode(A3, OUTPUT);
 80a016c:	2101      	movs	r1, #1
 80a016e:	200d      	movs	r0, #13
 80a0170:	f001 ff94 	bl	80a209c <pinMode>
    digitalWrite(A0, LOW);
 80a0174:	2100      	movs	r1, #0
 80a0176:	200a      	movs	r0, #10
 80a0178:	f001 ffa1 	bl	80a20be <digitalWrite>
    digitalWrite(A1, LOW);
 80a017c:	2100      	movs	r1, #0
 80a017e:	200b      	movs	r0, #11
 80a0180:	f001 ff9d 	bl	80a20be <digitalWrite>
    digitalWrite(A2, LOW);
 80a0184:	2100      	movs	r1, #0
 80a0186:	200c      	movs	r0, #12
 80a0188:	f001 ff99 	bl	80a20be <digitalWrite>
    digitalWrite(A3, LOW);
 80a018c:	2100      	movs	r1, #0
 80a018e:	200d      	movs	r0, #13
 80a0190:	f001 ff95 	bl	80a20be <digitalWrite>
    delay(500);
 80a0194:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0198:	f001 fcbc 	bl	80a1b14 <delay>

    Wire.setSpeed(CLOCK_SPEED_100KHZ);  // need to initialize i2c protocol after driving shdn pins low
 80a019c:	f001 fff6 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a01a0:	4940      	ldr	r1, [pc, #256]	; (80a02a4 <_Z8tof_initv+0x154>)
 80a01a2:	f001 ff17 	bl	80a1fd4 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();
 80a01a6:	f001 fff1 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a01aa:	f001 ff17 	bl	80a1fdc <_ZN7TwoWire5beginEv>

    delay(10);
 80a01ae:	200a      	movs	r0, #10
 80a01b0:	f001 fcb0 	bl	80a1b14 <delay>
    digitalWrite(A0, HIGH);
 80a01b4:	2101      	movs	r1, #1
 80a01b6:	200a      	movs	r0, #10
 80a01b8:	f001 ff81 	bl	80a20be <digitalWrite>
    digitalWrite(A1, HIGH);
 80a01bc:	2101      	movs	r1, #1
 80a01be:	200b      	movs	r0, #11
 80a01c0:	f001 ff7d 	bl	80a20be <digitalWrite>
    digitalWrite(A2, HIGH);
 80a01c4:	2101      	movs	r1, #1
 80a01c6:	200c      	movs	r0, #12
 80a01c8:	f001 ff79 	bl	80a20be <digitalWrite>
    digitalWrite(A3, HIGH);
 80a01cc:	2101      	movs	r1, #1
 80a01ce:	200d      	movs	r0, #13
 80a01d0:	f001 ff75 	bl	80a20be <digitalWrite>
    delay(10);
 80a01d4:	200a      	movs	r0, #10
 80a01d6:	f001 fc9d 	bl	80a1b14 <delay>
    digitalWrite(A1, LOW);
 80a01da:	2100      	movs	r1, #0
 80a01dc:	200b      	movs	r0, #11
 80a01de:	f001 ff6e 	bl	80a20be <digitalWrite>
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
 80a01e2:	4f31      	ldr	r7, [pc, #196]	; (80a02a8 <_Z8tof_initv+0x158>)
    digitalWrite(A1, HIGH);
    digitalWrite(A2, HIGH);
    digitalWrite(A3, HIGH);
    delay(10);
    digitalWrite(A1, LOW);
    digitalWrite(A2, LOW);
 80a01e4:	2100      	movs	r1, #0
 80a01e6:	200c      	movs	r0, #12
 80a01e8:	f001 ff69 	bl	80a20be <digitalWrite>
    digitalWrite(A3, LOW);
 80a01ec:	2100      	movs	r1, #0
 80a01ee:	200d      	movs	r0, #13
 80a01f0:	f001 ff65 	bl	80a20be <digitalWrite>
    sensor0.init();
 80a01f4:	2101      	movs	r1, #1
 80a01f6:	4638      	mov	r0, r7
 80a01f8:	f000 fdf0 	bl	80a0ddc <_ZN7VL53L0X4initEb>
    void startContinuous(uint32_t period_ms = 0);
    void stopContinuous(void);
    uint16_t readRangeContinuousMillimeters(void);
    uint16_t readRangeSingleMillimeters(void);

    inline void setTimeout(uint16_t timeout) { io_timeout = timeout; }
 80a01fc:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    sensor0.setAddress(0x30);
 80a0200:	2130      	movs	r1, #48	; 0x30
 80a0202:	4638      	mov	r0, r7
 80a0204:	f000 fa99 	bl	80a073a <_ZN7VL53L0X10setAddressEh>
    sensor0.setTimeout(1000);
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
 80a0208:	4e28      	ldr	r6, [pc, #160]	; (80a02ac <_Z8tof_initv+0x15c>)
 80a020a:	f8c7 8004 	str.w	r8, [r7, #4]
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
    sensor0.setAddress(0x30);
    sensor0.setTimeout(1000);
    delay(10);
 80a020e:	200a      	movs	r0, #10
 80a0210:	f001 fc80 	bl	80a1b14 <delay>
    digitalWrite(A1, HIGH);
 80a0214:	2101      	movs	r1, #1
 80a0216:	200b      	movs	r0, #11
 80a0218:	f001 ff51 	bl	80a20be <digitalWrite>
    sensor1.init();
 80a021c:	2101      	movs	r1, #1
 80a021e:	4630      	mov	r0, r6
 80a0220:	f000 fddc 	bl	80a0ddc <_ZN7VL53L0X4initEb>
    sensor1.setAddress(0x31);
 80a0224:	2131      	movs	r1, #49	; 0x31
 80a0226:	4630      	mov	r0, r6
 80a0228:	f000 fa87 	bl	80a073a <_ZN7VL53L0X10setAddressEh>
    sensor1.setTimeout(1000);
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
 80a022c:	4d20      	ldr	r5, [pc, #128]	; (80a02b0 <_Z8tof_initv+0x160>)
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
    sensor1.setAddress(0x31);
    sensor1.setTimeout(1000);
    delay(10);
 80a022e:	200a      	movs	r0, #10
 80a0230:	f8c6 8004 	str.w	r8, [r6, #4]
 80a0234:	f001 fc6e 	bl	80a1b14 <delay>
    digitalWrite(A2, HIGH);
 80a0238:	2101      	movs	r1, #1
 80a023a:	200c      	movs	r0, #12
 80a023c:	f001 ff3f 	bl	80a20be <digitalWrite>
    sensor2.init();
 80a0240:	2101      	movs	r1, #1
 80a0242:	4628      	mov	r0, r5
 80a0244:	f000 fdca 	bl	80a0ddc <_ZN7VL53L0X4initEb>
    sensor2.setAddress(0x32);
 80a0248:	2132      	movs	r1, #50	; 0x32
 80a024a:	4628      	mov	r0, r5
 80a024c:	f000 fa75 	bl	80a073a <_ZN7VL53L0X10setAddressEh>
    sensor2.setTimeout(1000);
    delay(10);
    digitalWrite(A3, HIGH);
    sensor3.init();
 80a0250:	4c18      	ldr	r4, [pc, #96]	; (80a02b4 <_Z8tof_initv+0x164>)
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
    sensor2.setAddress(0x32);
    sensor2.setTimeout(1000);
    delay(10);
 80a0252:	200a      	movs	r0, #10
 80a0254:	f8c5 8004 	str.w	r8, [r5, #4]
 80a0258:	f001 fc5c 	bl	80a1b14 <delay>
    digitalWrite(A3, HIGH);
 80a025c:	2101      	movs	r1, #1
 80a025e:	200d      	movs	r0, #13
 80a0260:	f001 ff2d 	bl	80a20be <digitalWrite>
    sensor3.init();
 80a0264:	2101      	movs	r1, #1
 80a0266:	4620      	mov	r0, r4
 80a0268:	f000 fdb8 	bl	80a0ddc <_ZN7VL53L0X4initEb>
    sensor3.setAddress(0x33);
 80a026c:	2133      	movs	r1, #51	; 0x33
 80a026e:	4620      	mov	r0, r4
 80a0270:	f000 fa63 	bl	80a073a <_ZN7VL53L0X10setAddressEh>
    sensor3.setTimeout(1000);
    delay(10);
 80a0274:	200a      	movs	r0, #10
 80a0276:	f8c4 8004 	str.w	r8, [r4, #4]
 80a027a:	f001 fc4b 	bl	80a1b14 <delay>

    // Start continuous back-to-back mode (take readings as
    // fast as possible).  To use continuous timed mode
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
 80a027e:	4638      	mov	r0, r7
 80a0280:	210a      	movs	r1, #10
 80a0282:	f000 fb78 	bl	80a0976 <_ZN7VL53L0X15startContinuousEm>
    sensor1.startContinuous(10);
 80a0286:	4630      	mov	r0, r6
 80a0288:	210a      	movs	r1, #10
 80a028a:	f000 fb74 	bl	80a0976 <_ZN7VL53L0X15startContinuousEm>
    sensor2.startContinuous(10);
 80a028e:	4628      	mov	r0, r5
 80a0290:	210a      	movs	r1, #10
 80a0292:	f000 fb70 	bl	80a0976 <_ZN7VL53L0X15startContinuousEm>
    sensor3.startContinuous(10);
 80a0296:	4620      	mov	r0, r4
}
 80a0298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
    sensor1.startContinuous(10);
    sensor2.startContinuous(10);
    sensor3.startContinuous(10);
 80a029c:	210a      	movs	r1, #10
 80a029e:	f000 bb6a 	b.w	80a0976 <_ZN7VL53L0X15startContinuousEm>
 80a02a2:	bf00      	nop
 80a02a4:	000186a0 	.word	0x000186a0
 80a02a8:	20000360 	.word	0x20000360
 80a02ac:	20000378 	.word	0x20000378
 80a02b0:	20000390 	.word	0x20000390
 80a02b4:	200003a8 	.word	0x200003a8

080a02b8 <_Z10accel_initv>:
}

void accel_init() {
 80a02b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LIS3DHConfig config;
 80a02ba:	a801      	add	r0, sp, #4
 80a02bc:	f001 f863 	bl	80a1386 <_ZN12LIS3DHConfigC1Ev>
	config.setAccelMode(LIS3DH::RATE_100_HZ);
 80a02c0:	2150      	movs	r1, #80	; 0x50
 80a02c2:	a801      	add	r0, sp, #4
 80a02c4:	f001 f86c 	bl	80a13a0 <_ZN12LIS3DHConfig12setAccelModeEh>

	bool setupSuccess = accel.setup(config);
 80a02c8:	a901      	add	r1, sp, #4
 80a02ca:	4806      	ldr	r0, [pc, #24]	; (80a02e4 <_Z10accel_initv+0x2c>)
 80a02cc:	f001 f8c0 	bl	80a1450 <_ZN6LIS3DH5setupER12LIS3DHConfig>
 80a02d0:	4604      	mov	r4, r0
	Serial.printlnf("setupSuccess=%d", setupSuccess);
 80a02d2:	f001 fd4d 	bl	80a1d70 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a02d6:	4623      	mov	r3, r4
 80a02d8:	4a03      	ldr	r2, [pc, #12]	; (80a02e8 <_Z10accel_initv+0x30>)
 80a02da:	2101      	movs	r1, #1
 80a02dc:	f001 fbce 	bl	80a1a7c <_ZN5Print11printf_implEbPKcz>
}
 80a02e0:	b004      	add	sp, #16
 80a02e2:	bd10      	pop	{r4, pc}
 80a02e4:	20000348 	.word	0x20000348
 80a02e8:	080a2d1c 	.word	0x080a2d1c

080a02ec <setup>:

void setup()
{
 80a02ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  pinMode(FL, INPUT);
 80a02f0:	4c41      	ldr	r4, [pc, #260]	; (80a03f8 <setup+0x10c>)
  pinMode(FR, INPUT);
 80a02f2:	f8df a130 	ldr.w	sl, [pc, #304]	; 80a0424 <setup+0x138>
	Serial.printlnf("setupSuccess=%d", setupSuccess);
}

void setup()
{
  pinMode(FL, INPUT);
 80a02f6:	8820      	ldrh	r0, [r4, #0]
  pinMode(FR, INPUT);
  pinMode(BL, INPUT);
 80a02f8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80a0428 <setup+0x13c>
	Serial.printlnf("setupSuccess=%d", setupSuccess);
}

void setup()
{
  pinMode(FL, INPUT);
 80a02fc:	2100      	movs	r1, #0
 80a02fe:	f001 fecd 	bl	80a209c <pinMode>
  pinMode(FR, INPUT);
  pinMode(BL, INPUT);
  pinMode(BR, INPUT);
 80a0302:	f8df 8128 	ldr.w	r8, [pc, #296]	; 80a042c <setup+0x140>
}

void setup()
{
  pinMode(FL, INPUT);
  pinMode(FR, INPUT);
 80a0306:	f8ba 0000 	ldrh.w	r0, [sl]
 80a030a:	2100      	movs	r1, #0
 80a030c:	f001 fec6 	bl	80a209c <pinMode>
  pinMode(BL, INPUT);
  pinMode(BR, INPUT);

  pinMode(RS, INPUT);
 80a0310:	4f3a      	ldr	r7, [pc, #232]	; (80a03fc <setup+0x110>)

void setup()
{
  pinMode(FL, INPUT);
  pinMode(FR, INPUT);
  pinMode(BL, INPUT);
 80a0312:	f8b9 0000 	ldrh.w	r0, [r9]
 80a0316:	2100      	movs	r1, #0
 80a0318:	f001 fec0 	bl	80a209c <pinMode>
  pinMode(BR, INPUT);

  pinMode(RS, INPUT);

  pinMode(Lmotor, OUTPUT);
 80a031c:	4e38      	ldr	r6, [pc, #224]	; (80a0400 <setup+0x114>)
void setup()
{
  pinMode(FL, INPUT);
  pinMode(FR, INPUT);
  pinMode(BL, INPUT);
  pinMode(BR, INPUT);
 80a031e:	f8b8 0000 	ldrh.w	r0, [r8]
 80a0322:	2100      	movs	r1, #0
 80a0324:	f001 feba 	bl	80a209c <pinMode>

  pinMode(RS, INPUT);

  pinMode(Lmotor, OUTPUT);
  pinMode(Rmotor, OUTPUT);
 80a0328:	4d36      	ldr	r5, [pc, #216]	; (80a0404 <setup+0x118>)
  pinMode(FL, INPUT);
  pinMode(FR, INPUT);
  pinMode(BL, INPUT);
  pinMode(BR, INPUT);

  pinMode(RS, INPUT);
 80a032a:	8838      	ldrh	r0, [r7, #0]
 80a032c:	2100      	movs	r1, #0
 80a032e:	f001 feb5 	bl	80a209c <pinMode>

  pinMode(Lmotor, OUTPUT);
 80a0332:	8830      	ldrh	r0, [r6, #0]
 80a0334:	2101      	movs	r1, #1
 80a0336:	f001 feb1 	bl	80a209c <pinMode>
  pinMode(Rmotor, OUTPUT);
 80a033a:	2101      	movs	r1, #1
 80a033c:	8828      	ldrh	r0, [r5, #0]
 80a033e:	f001 fead 	bl	80a209c <pinMode>

  Serial.begin(9600);
 80a0342:	f001 fd15 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a0346:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a034a:	f001 fcf7 	bl	80a1d3c <_ZN9USBSerial5beginEl>

  tof_init();
 80a034e:	f7ff feff 	bl	80a0150 <_Z8tof_initv>
  accel_init();
 80a0352:	f7ff ffb1 	bl	80a02b8 <_Z10accel_initv>

  attachInterrupt(FL,FLISR,FALLING);
 80a0356:	8820      	ldrh	r0, [r4, #0]
 80a0358:	2400      	movs	r4, #0
 80a035a:	9400      	str	r4, [sp, #0]
 80a035c:	f04f 33ff 	mov.w	r3, #4294967295
 80a0360:	2202      	movs	r2, #2
 80a0362:	4929      	ldr	r1, [pc, #164]	; (80a0408 <setup+0x11c>)
 80a0364:	f001 fd68 	bl	80a1e38 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(FR,FRISR,FALLING);
 80a0368:	f8ba 0000 	ldrh.w	r0, [sl]
 80a036c:	9400      	str	r4, [sp, #0]
 80a036e:	f04f 33ff 	mov.w	r3, #4294967295
 80a0372:	2202      	movs	r2, #2
 80a0374:	4925      	ldr	r1, [pc, #148]	; (80a040c <setup+0x120>)
 80a0376:	f001 fd5f 	bl	80a1e38 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(BL,BLISR,FALLING);
 80a037a:	f8b9 0000 	ldrh.w	r0, [r9]
 80a037e:	9400      	str	r4, [sp, #0]
 80a0380:	f04f 33ff 	mov.w	r3, #4294967295
 80a0384:	2202      	movs	r2, #2
 80a0386:	4922      	ldr	r1, [pc, #136]	; (80a0410 <setup+0x124>)
 80a0388:	f001 fd56 	bl	80a1e38 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(BR,BRISR,FALLING);
 80a038c:	f8b8 0000 	ldrh.w	r0, [r8]
 80a0390:	9400      	str	r4, [sp, #0]
 80a0392:	f04f 33ff 	mov.w	r3, #4294967295
 80a0396:	2202      	movs	r2, #2
 80a0398:	491e      	ldr	r1, [pc, #120]	; (80a0414 <setup+0x128>)
 80a039a:	f001 fd4d 	bl	80a1e38 <_Z15attachInterrupttPFvvE13InterruptModeah>

  attachInterrupt(RS,RSISR,CHANGE);
 80a039e:	8838      	ldrh	r0, [r7, #0]
 80a03a0:	4622      	mov	r2, r4

  LESC.attach(Lmotor);
 80a03a2:	4f1d      	ldr	r7, [pc, #116]	; (80a0418 <setup+0x12c>)
  attachInterrupt(FL,FLISR,FALLING);
  attachInterrupt(FR,FRISR,FALLING);
  attachInterrupt(BL,BLISR,FALLING);
  attachInterrupt(BR,BRISR,FALLING);

  attachInterrupt(RS,RSISR,CHANGE);
 80a03a4:	9400      	str	r4, [sp, #0]
 80a03a6:	f04f 33ff 	mov.w	r3, #4294967295
 80a03aa:	491c      	ldr	r1, [pc, #112]	; (80a041c <setup+0x130>)
 80a03ac:	f001 fd44 	bl	80a1e38 <_Z15attachInterrupttPFvvE13InterruptModeah>

  LESC.attach(Lmotor);
 80a03b0:	8831      	ldrh	r1, [r6, #0]
 80a03b2:	26b4      	movs	r6, #180	; 0xb4
 80a03b4:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a03b8:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a03bc:	e88d 0050 	stmia.w	sp, {r4, r6}
 80a03c0:	4638      	mov	r0, r7
 80a03c2:	f001 fa9a 	bl	80a18fa <_ZN5Servo6attachEtttss>
  LESC.writeMicroseconds(1500);
 80a03c6:	4638      	mov	r0, r7
 80a03c8:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a03cc:	f001 fa61 	bl	80a1892 <_ZN5Servo17writeMicrosecondsEt>
  RESC.attach(Rmotor);
 80a03d0:	8829      	ldrh	r1, [r5, #0]
 80a03d2:	4d13      	ldr	r5, [pc, #76]	; (80a0420 <setup+0x134>)
 80a03d4:	e88d 0050 	stmia.w	sp, {r4, r6}
 80a03d8:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a03dc:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a03e0:	4628      	mov	r0, r5
 80a03e2:	f001 fa8a 	bl	80a18fa <_ZN5Servo6attachEtttss>
  RESC.writeMicroseconds(1500);
 80a03e6:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a03ea:	4628      	mov	r0, r5
}
 80a03ec:	b002      	add	sp, #8
 80a03ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  attachInterrupt(RS,RSISR,CHANGE);

  LESC.attach(Lmotor);
  LESC.writeMicroseconds(1500);
  RESC.attach(Rmotor);
  RESC.writeMicroseconds(1500);
 80a03f2:	f001 ba4e 	b.w	80a1892 <_ZN5Servo17writeMicrosecondsEt>
 80a03f6:	bf00      	nop
 80a03f8:	20000310 	.word	0x20000310
 80a03fc:	20000314 	.word	0x20000314
 80a0400:	20000308 	.word	0x20000308
 80a0404:	20000304 	.word	0x20000304
 80a0408:	080a00b1 	.word	0x080a00b1
 80a040c:	080a00d1 	.word	0x080a00d1
 80a0410:	080a00f1 	.word	0x080a00f1
 80a0414:	080a0111 	.word	0x080a0111
 80a0418:	20000338 	.word	0x20000338
 80a041c:	080a0131 	.word	0x080a0131
 80a0420:	20000328 	.word	0x20000328
 80a0424:	2000030c 	.word	0x2000030c
 80a0428:	20000318 	.word	0x20000318
 80a042c:	20000300 	.word	0x20000300

080a0430 <loop>:
}

void loop()
{
 80a0430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.print("remote status:");
 80a0432:	f001 fc9d 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a0436:	4975      	ldr	r1, [pc, #468]	; (80a060c <loop+0x1dc>)
 80a0438:	f001 fab3 	bl	80a19a2 <_ZN5Print5printEPKc>
  Serial.print(RSflag);
 80a043c:	f001 fc98 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a0440:	4b73      	ldr	r3, [pc, #460]	; (80a0610 <loop+0x1e0>)
 80a0442:	220a      	movs	r2, #10
 80a0444:	7819      	ldrb	r1, [r3, #0]
 80a0446:	f001 fb17 	bl	80a1a78 <_ZN5Print5printEii>
  Serial.print(" | ");
 80a044a:	f001 fc91 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a044e:	4971      	ldr	r1, [pc, #452]	; (80a0614 <loop+0x1e4>)
 80a0450:	f001 faa7 	bl	80a19a2 <_ZN5Print5printEPKc>

  Serial.print("sensor 0:");
 80a0454:	f001 fc8c 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a0458:	496f      	ldr	r1, [pc, #444]	; (80a0618 <loop+0x1e8>)
 80a045a:	f001 faa2 	bl	80a19a2 <_ZN5Print5printEPKc>
  Serial.print(sensor0.readRangeContinuousMillimeters());
 80a045e:	f001 fc87 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a0462:	4604      	mov	r4, r0
 80a0464:	486d      	ldr	r0, [pc, #436]	; (80a061c <loop+0x1ec>)
 80a0466:	f000 fac1 	bl	80a09ec <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a046a:	220a      	movs	r2, #10
 80a046c:	4601      	mov	r1, r0
 80a046e:	4620      	mov	r0, r4
 80a0470:	f001 fb02 	bl	80a1a78 <_ZN5Print5printEii>
  Serial.print(" | ");
 80a0474:	f001 fc7c 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a0478:	4966      	ldr	r1, [pc, #408]	; (80a0614 <loop+0x1e4>)
 80a047a:	f001 fa92 	bl	80a19a2 <_ZN5Print5printEPKc>
  Serial.print("sensor 1:");
 80a047e:	f001 fc77 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a0482:	4967      	ldr	r1, [pc, #412]	; (80a0620 <loop+0x1f0>)
 80a0484:	f001 fa8d 	bl	80a19a2 <_ZN5Print5printEPKc>
  Serial.print(sensor1.readRangeContinuousMillimeters());
 80a0488:	f001 fc72 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a048c:	4604      	mov	r4, r0
 80a048e:	4865      	ldr	r0, [pc, #404]	; (80a0624 <loop+0x1f4>)
 80a0490:	f000 faac 	bl	80a09ec <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a0494:	220a      	movs	r2, #10
 80a0496:	4601      	mov	r1, r0
 80a0498:	4620      	mov	r0, r4
 80a049a:	f001 faed 	bl	80a1a78 <_ZN5Print5printEii>
  Serial.print(" | ");
 80a049e:	f001 fc67 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a04a2:	495c      	ldr	r1, [pc, #368]	; (80a0614 <loop+0x1e4>)
 80a04a4:	f001 fa7d 	bl	80a19a2 <_ZN5Print5printEPKc>
  Serial.print("sensor 2:");
 80a04a8:	f001 fc62 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a04ac:	495e      	ldr	r1, [pc, #376]	; (80a0628 <loop+0x1f8>)
 80a04ae:	f001 fa78 	bl	80a19a2 <_ZN5Print5printEPKc>
  Serial.print(sensor2.readRangeContinuousMillimeters());
 80a04b2:	f001 fc5d 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a04b6:	4604      	mov	r4, r0
 80a04b8:	485c      	ldr	r0, [pc, #368]	; (80a062c <loop+0x1fc>)
 80a04ba:	f000 fa97 	bl	80a09ec <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a04be:	220a      	movs	r2, #10
 80a04c0:	4601      	mov	r1, r0
 80a04c2:	4620      	mov	r0, r4
 80a04c4:	f001 fad8 	bl	80a1a78 <_ZN5Print5printEii>
  Serial.print(" | ");
 80a04c8:	f001 fc52 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a04cc:	4951      	ldr	r1, [pc, #324]	; (80a0614 <loop+0x1e4>)
 80a04ce:	f001 fa68 	bl	80a19a2 <_ZN5Print5printEPKc>
  Serial.print("sensor 3:");
 80a04d2:	f001 fc4d 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a04d6:	4956      	ldr	r1, [pc, #344]	; (80a0630 <loop+0x200>)
 80a04d8:	f001 fa63 	bl	80a19a2 <_ZN5Print5printEPKc>
  Serial.print(sensor3.readRangeContinuousMillimeters());
 80a04dc:	f001 fc48 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a04e0:	4604      	mov	r4, r0
 80a04e2:	4854      	ldr	r0, [pc, #336]	; (80a0634 <loop+0x204>)
 80a04e4:	f000 fa82 	bl	80a09ec <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a04e8:	220a      	movs	r2, #10
 80a04ea:	4601      	mov	r1, r0
 80a04ec:	4620      	mov	r0, r4
 80a04ee:	f001 fac3 	bl	80a1a78 <_ZN5Print5printEii>
  if (sensor0.timeoutOccurred() || sensor1.timeoutOccurred() || sensor2.timeoutOccurred() || sensor3.timeoutOccurred()) { Serial.print(" SENSOR TIMEOUT"); }
 80a04f2:	484a      	ldr	r0, [pc, #296]	; (80a061c <loop+0x1ec>)
 80a04f4:	f000 faa0 	bl	80a0a38 <_ZN7VL53L0X15timeoutOccurredEv>
 80a04f8:	2800      	cmp	r0, #0
 80a04fa:	f040 8081 	bne.w	80a0600 <loop+0x1d0>
 80a04fe:	4849      	ldr	r0, [pc, #292]	; (80a0624 <loop+0x1f4>)
 80a0500:	f000 fa9a 	bl	80a0a38 <_ZN7VL53L0X15timeoutOccurredEv>
 80a0504:	2800      	cmp	r0, #0
 80a0506:	d17b      	bne.n	80a0600 <loop+0x1d0>
 80a0508:	4848      	ldr	r0, [pc, #288]	; (80a062c <loop+0x1fc>)
 80a050a:	f000 fa95 	bl	80a0a38 <_ZN7VL53L0X15timeoutOccurredEv>
 80a050e:	2800      	cmp	r0, #0
 80a0510:	d176      	bne.n	80a0600 <loop+0x1d0>
 80a0512:	4848      	ldr	r0, [pc, #288]	; (80a0634 <loop+0x204>)
 80a0514:	f000 fa90 	bl	80a0a38 <_ZN7VL53L0X15timeoutOccurredEv>
 80a0518:	2800      	cmp	r0, #0
 80a051a:	d171      	bne.n	80a0600 <loop+0x1d0>

  Serial.print(" | ");
 80a051c:	f001 fc28 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a0520:	493c      	ldr	r1, [pc, #240]	; (80a0614 <loop+0x1e4>)
 80a0522:	f001 fa3e 	bl	80a19a2 <_ZN5Print5printEPKc>
  Serial.print("front left:");
 80a0526:	f001 fc23 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a052a:	4943      	ldr	r1, [pc, #268]	; (80a0638 <loop+0x208>)
 80a052c:	f001 fa39 	bl	80a19a2 <_ZN5Print5printEPKc>
  Serial.print(FLflag);
 80a0530:	f001 fc1e 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a0534:	4b41      	ldr	r3, [pc, #260]	; (80a063c <loop+0x20c>)
 80a0536:	220a      	movs	r2, #10
 80a0538:	7819      	ldrb	r1, [r3, #0]
 80a053a:	f001 fa9d 	bl	80a1a78 <_ZN5Print5printEii>

  Serial.print(" | ");
 80a053e:	f001 fc17 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a0542:	4934      	ldr	r1, [pc, #208]	; (80a0614 <loop+0x1e4>)
 80a0544:	f001 fa2d 	bl	80a19a2 <_ZN5Print5printEPKc>
  Serial.print("front right:");
 80a0548:	f001 fc12 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a054c:	493c      	ldr	r1, [pc, #240]	; (80a0640 <loop+0x210>)
 80a054e:	f001 fa28 	bl	80a19a2 <_ZN5Print5printEPKc>
  Serial.print(FRflag);
 80a0552:	f001 fc0d 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a0556:	4b3b      	ldr	r3, [pc, #236]	; (80a0644 <loop+0x214>)
 80a0558:	220a      	movs	r2, #10
 80a055a:	7819      	ldrb	r1, [r3, #0]
 80a055c:	f001 fa8c 	bl	80a1a78 <_ZN5Print5printEii>

  Serial.print(" | ");
 80a0560:	f001 fc06 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a0564:	492b      	ldr	r1, [pc, #172]	; (80a0614 <loop+0x1e4>)
 80a0566:	f001 fa1c 	bl	80a19a2 <_ZN5Print5printEPKc>
  Serial.print("back left:");
 80a056a:	f001 fc01 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a056e:	4936      	ldr	r1, [pc, #216]	; (80a0648 <loop+0x218>)
 80a0570:	f001 fa17 	bl	80a19a2 <_ZN5Print5printEPKc>
  Serial.print(BLflag);
 80a0574:	f001 fbfc 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a0578:	4b34      	ldr	r3, [pc, #208]	; (80a064c <loop+0x21c>)
 80a057a:	220a      	movs	r2, #10
 80a057c:	7819      	ldrb	r1, [r3, #0]
 80a057e:	f001 fa7b 	bl	80a1a78 <_ZN5Print5printEii>

  Serial.print(" | ");
 80a0582:	f001 fbf5 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a0586:	4923      	ldr	r1, [pc, #140]	; (80a0614 <loop+0x1e4>)
 80a0588:	f001 fa0b 	bl	80a19a2 <_ZN5Print5printEPKc>
  Serial.print("back right:");
 80a058c:	f001 fbf0 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a0590:	492f      	ldr	r1, [pc, #188]	; (80a0650 <loop+0x220>)
 80a0592:	f001 fa06 	bl	80a19a2 <_ZN5Print5printEPKc>
  Serial.print(BRflag);
 80a0596:	f001 fbeb 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a059a:	4b2e      	ldr	r3, [pc, #184]	; (80a0654 <loop+0x224>)
 80a059c:	220a      	movs	r2, #10
 80a059e:	7819      	ldrb	r1, [r3, #0]
 80a05a0:	f001 fa6a 	bl	80a1a78 <_ZN5Print5printEii>

  Serial.print(" | ");
 80a05a4:	f001 fbe4 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a05a8:	491a      	ldr	r1, [pc, #104]	; (80a0614 <loop+0x1e4>)
 80a05aa:	f001 f9fa 	bl	80a19a2 <_ZN5Print5printEPKc>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a05ae:	f001 f80f 	bl	80a15d0 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD) {
 80a05b2:	4c29      	ldr	r4, [pc, #164]	; (80a0658 <loop+0x228>)
 80a05b4:	6823      	ldr	r3, [r4, #0]
 80a05b6:	1ac0      	subs	r0, r0, r3
 80a05b8:	2863      	cmp	r0, #99	; 0x63
 80a05ba:	d91b      	bls.n	80a05f4 <loop+0x1c4>
 80a05bc:	f001 f808 	bl	80a15d0 <HAL_Timer_Get_Milli_Seconds>
		lastPrintSample = millis();

		LIS3DHSample sample;
		if (accel.getSample(sample)) {
 80a05c0:	a902      	add	r1, sp, #8
  Serial.print("back right:");
  Serial.print(BRflag);

  Serial.print(" | ");
  if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD) {
		lastPrintSample = millis();
 80a05c2:	6020      	str	r0, [r4, #0]

		LIS3DHSample sample;
		if (accel.getSample(sample)) {
 80a05c4:	4825      	ldr	r0, [pc, #148]	; (80a065c <loop+0x22c>)
 80a05c6:	f000 ff0b 	bl	80a13e0 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
 80a05ca:	b170      	cbz	r0, 80a05ea <loop+0x1ba>
			Serial.printlnf("%d,%d,%d", sample.x, sample.y, sample.z);
 80a05cc:	f001 fbd0 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a05d0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80a05d4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80a05d8:	9201      	str	r2, [sp, #4]
 80a05da:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80a05de:	2101      	movs	r1, #1
 80a05e0:	9200      	str	r2, [sp, #0]
 80a05e2:	4a1f      	ldr	r2, [pc, #124]	; (80a0660 <loop+0x230>)
 80a05e4:	f001 fa4a 	bl	80a1a7c <_ZN5Print11printf_implEbPKcz>
 80a05e8:	e004      	b.n	80a05f4 <loop+0x1c4>
		}
		else {
			Serial.println("no sample");
 80a05ea:	f001 fbc1 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a05ee:	491d      	ldr	r1, [pc, #116]	; (80a0664 <loop+0x234>)
 80a05f0:	f001 f9ea 	bl	80a19c8 <_ZN5Print7printlnEPKc>
		}
	}

  Serial.println();
 80a05f4:	f001 fbbc 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a05f8:	f001 f9da 	bl	80a19b0 <_ZN5Print7printlnEv>

  //LESC.writeMicroseconds(1600);
  //RESC.writeMicroseconds(1600);
}
 80a05fc:	b004      	add	sp, #16
 80a05fe:	bd10      	pop	{r4, pc}
  Serial.print("sensor 2:");
  Serial.print(sensor2.readRangeContinuousMillimeters());
  Serial.print(" | ");
  Serial.print("sensor 3:");
  Serial.print(sensor3.readRangeContinuousMillimeters());
  if (sensor0.timeoutOccurred() || sensor1.timeoutOccurred() || sensor2.timeoutOccurred() || sensor3.timeoutOccurred()) { Serial.print(" SENSOR TIMEOUT"); }
 80a0600:	f001 fbb6 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a0604:	4918      	ldr	r1, [pc, #96]	; (80a0668 <loop+0x238>)
 80a0606:	f001 f9cc 	bl	80a19a2 <_ZN5Print5printEPKc>
 80a060a:	e787      	b.n	80a051c <loop+0xec>
 80a060c:	080a2d2c 	.word	0x080a2d2c
 80a0610:	20000324 	.word	0x20000324
 80a0614:	080a2d3b 	.word	0x080a2d3b
 80a0618:	080a2d3f 	.word	0x080a2d3f
 80a061c:	20000360 	.word	0x20000360
 80a0620:	080a2d49 	.word	0x080a2d49
 80a0624:	20000378 	.word	0x20000378
 80a0628:	080a2d53 	.word	0x080a2d53
 80a062c:	20000390 	.word	0x20000390
 80a0630:	080a2d5d 	.word	0x080a2d5d
 80a0634:	200003a8 	.word	0x200003a8
 80a0638:	080a2d67 	.word	0x080a2d67
 80a063c:	200003c4 	.word	0x200003c4
 80a0640:	080a2d73 	.word	0x080a2d73
 80a0644:	2000035c 	.word	0x2000035c
 80a0648:	080a2d80 	.word	0x080a2d80
 80a064c:	200003c5 	.word	0x200003c5
 80a0650:	080a2d8b 	.word	0x080a2d8b
 80a0654:	2000035d 	.word	0x2000035d
 80a0658:	200003c0 	.word	0x200003c0
 80a065c:	20000348 	.word	0x20000348
 80a0660:	080a2d97 	.word	0x080a2d97
 80a0664:	080a2da0 	.word	0x080a2da0
 80a0668:	080a2daa 	.word	0x080a2daa

080a066c <_GLOBAL__sub_I_sensor0>:

  Serial.println();

  //LESC.writeMicroseconds(1600);
  //RESC.writeMicroseconds(1600);
}
 80a066c:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a066e:	f000 ff57 	bl	80a1520 <HAL_Pin_Map>

#if !defined(PARTICLE)
#  include <Wire.h>
#endif

VL53L0X sensor0;
 80a0672:	4814      	ldr	r0, [pc, #80]	; (80a06c4 <_GLOBAL__sub_I_sensor0+0x58>)
 80a0674:	f000 f840 	bl	80a06f8 <_ZN7VL53L0XC1Ev>
VL53L0X sensor1;
 80a0678:	4813      	ldr	r0, [pc, #76]	; (80a06c8 <_GLOBAL__sub_I_sensor0+0x5c>)
 80a067a:	f000 f83d 	bl	80a06f8 <_ZN7VL53L0XC1Ev>
VL53L0X sensor2;
 80a067e:	4813      	ldr	r0, [pc, #76]	; (80a06cc <_GLOBAL__sub_I_sensor0+0x60>)
 80a0680:	f000 f83a 	bl	80a06f8 <_ZN7VL53L0XC1Ev>
VL53L0X sensor3;
 80a0684:	4812      	ldr	r0, [pc, #72]	; (80a06d0 <_GLOBAL__sub_I_sensor0+0x64>)
 80a0686:	f000 f837 	bl	80a06f8 <_ZN7VL53L0XC1Ev>

Servo LESC;
 80a068a:	4812      	ldr	r0, [pc, #72]	; (80a06d4 <_GLOBAL__sub_I_sensor0+0x68>)
 80a068c:	f001 f921 	bl	80a18d2 <_ZN5ServoC1Ev>
Servo RESC;
 80a0690:	4811      	ldr	r0, [pc, #68]	; (80a06d8 <_GLOBAL__sub_I_sensor0+0x6c>)
 80a0692:	f001 f91e 	bl	80a18d2 <_ZN5ServoC1Ev>
boolean BLflag = false;
boolean BRflag = false;

boolean RSflag = false;

SYSTEM_THREAD(ENABLED);
 80a0696:	2100      	movs	r1, #0
 80a0698:	2001      	movs	r0, #1
 80a069a:	f001 f8ab 	bl	80a17f4 <system_thread_set_state>

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a069e:	2003      	movs	r0, #3
 80a06a0:	f001 f898 	bl	80a17d4 <set_system_mode>
SYSTEM_MODE(MANUAL);	// fully offline

// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
 80a06a4:	f001 fd72 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a06a8:	4c0c      	ldr	r4, [pc, #48]	; (80a06dc <_GLOBAL__sub_I_sensor0+0x70>)
 80a06aa:	4601      	mov	r1, r0
 80a06ac:	2200      	movs	r2, #0
 80a06ae:	4620      	mov	r0, r4
 80a06b0:	2311      	movs	r3, #17
 80a06b2:	f000 ff29 	bl	80a1508 <_ZN9LIS3DHI2CC1ER7TwoWirehi>
 80a06b6:	4620      	mov	r0, r4

  Serial.println();

  //LESC.writeMicroseconds(1600);
  //RESC.writeMicroseconds(1600);
}
 80a06b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(MANUAL);	// fully offline

// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
 80a06bc:	4a08      	ldr	r2, [pc, #32]	; (80a06e0 <_GLOBAL__sub_I_sensor0+0x74>)
 80a06be:	4909      	ldr	r1, [pc, #36]	; (80a06e4 <_GLOBAL__sub_I_sensor0+0x78>)
 80a06c0:	f001 bd84 	b.w	80a21cc <__aeabi_atexit>
 80a06c4:	20000360 	.word	0x20000360
 80a06c8:	20000378 	.word	0x20000378
 80a06cc:	20000390 	.word	0x20000390
 80a06d0:	200003a8 	.word	0x200003a8
 80a06d4:	20000338 	.word	0x20000338
 80a06d8:	20000328 	.word	0x20000328
 80a06dc:	20000348 	.word	0x20000348
 80a06e0:	20000320 	.word	0x20000320
 80a06e4:	080a12cd 	.word	0x080a12cd

080a06e8 <_ZN7TwoWire5writeEm>:
  virtual int peek(void);
  virtual void flush(void);
  void onReceive(void (*)(int));
  void onRequest(void (*)(void));

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
 80a06e8:	6803      	ldr	r3, [r0, #0]
 80a06ea:	b2c9      	uxtb	r1, r1
 80a06ec:	689b      	ldr	r3, [r3, #8]
 80a06ee:	4718      	bx	r3

080a06f0 <_ZN7TwoWire5writeEi>:
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a06f0:	6803      	ldr	r3, [r0, #0]
 80a06f2:	b2c9      	uxtb	r1, r1
 80a06f4:	689b      	ldr	r3, [r3, #8]
 80a06f6:	4718      	bx	r3

080a06f8 <_ZN7VL53L0XC1Ev>:
// Constructors ////////////////////////////////////////////////////////////////

VL53L0X::VL53L0X(void)
  : address(ADDRESS_DEFAULT)
  , io_timeout(0) // no timeout
  , did_timeout(false)
 80a06f8:	2229      	movs	r2, #41	; 0x29
 80a06fa:	7042      	strb	r2, [r0, #1]
 80a06fc:	2200      	movs	r2, #0
 80a06fe:	6042      	str	r2, [r0, #4]
 80a0700:	7202      	strb	r2, [r0, #8]
{
}
 80a0702:	4770      	bx	lr

080a0704 <_ZN7VL53L0X8writeRegEhh>:
  return true;
}

// Write an 8-bit register
void VL53L0X::writeReg(uint8_t reg, uint8_t value)
{
 80a0704:	b570      	push	{r4, r5, r6, lr}
 80a0706:	4604      	mov	r4, r0
 80a0708:	4615      	mov	r5, r2
 80a070a:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a070c:	f001 fd3e 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a0710:	7861      	ldrb	r1, [r4, #1]
 80a0712:	f001 fc7a 	bl	80a200a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0716:	f001 fd39 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a071a:	6803      	ldr	r3, [r0, #0]
 80a071c:	4631      	mov	r1, r6
 80a071e:	689b      	ldr	r3, [r3, #8]
 80a0720:	4798      	blx	r3
  Wire.write(value);
 80a0722:	f001 fd33 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a0726:	6803      	ldr	r3, [r0, #0]
 80a0728:	4629      	mov	r1, r5
 80a072a:	689b      	ldr	r3, [r3, #8]
 80a072c:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a072e:	f001 fd2d 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a0732:	f001 fc72 	bl	80a201a <_ZN7TwoWire15endTransmissionEv>
 80a0736:	7020      	strb	r0, [r4, #0]
 80a0738:	bd70      	pop	{r4, r5, r6, pc}

080a073a <_ZN7VL53L0X10setAddressEh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void VL53L0X::setAddress(uint8_t new_addr)
{
 80a073a:	b538      	push	{r3, r4, r5, lr}
 80a073c:	4605      	mov	r5, r0
 80a073e:	460c      	mov	r4, r1
  writeReg(I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 80a0740:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80a0744:	218a      	movs	r1, #138	; 0x8a
 80a0746:	f7ff ffdd 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  address = new_addr;
 80a074a:	706c      	strb	r4, [r5, #1]
 80a074c:	bd38      	pop	{r3, r4, r5, pc}

080a074e <_ZN7VL53L0X13writeReg16BitEht>:
  last_status = Wire.endTransmission();
}

// Write a 16-bit register
void VL53L0X::writeReg16Bit(uint8_t reg, uint16_t value)
{
 80a074e:	b570      	push	{r4, r5, r6, lr}
 80a0750:	4604      	mov	r4, r0
 80a0752:	4615      	mov	r5, r2
 80a0754:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a0756:	f001 fd19 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a075a:	7861      	ldrb	r1, [r4, #1]
 80a075c:	f001 fc55 	bl	80a200a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0760:	f001 fd14 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a0764:	6803      	ldr	r3, [r0, #0]
 80a0766:	4631      	mov	r1, r6
 80a0768:	689b      	ldr	r3, [r3, #8]
 80a076a:	4798      	blx	r3
  Wire.write((value >> 8) & 0xFF); // value high byte
 80a076c:	f001 fd0e 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a0770:	0a29      	lsrs	r1, r5, #8
 80a0772:	f7ff ffbd 	bl	80a06f0 <_ZN7TwoWire5writeEi>
  Wire.write( value       & 0xFF); // value low byte
 80a0776:	f001 fd09 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a077a:	b2e9      	uxtb	r1, r5
 80a077c:	f7ff ffb8 	bl	80a06f0 <_ZN7TwoWire5writeEi>
  last_status = Wire.endTransmission();
 80a0780:	f001 fd04 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a0784:	f001 fc49 	bl	80a201a <_ZN7TwoWire15endTransmissionEv>
 80a0788:	7020      	strb	r0, [r4, #0]
 80a078a:	bd70      	pop	{r4, r5, r6, pc}

080a078c <_ZN7VL53L0X13writeReg32BitEhm>:
}

// Write a 32-bit register
void VL53L0X::writeReg32Bit(uint8_t reg, uint32_t value)
{
 80a078c:	b570      	push	{r4, r5, r6, lr}
 80a078e:	4605      	mov	r5, r0
 80a0790:	4614      	mov	r4, r2
 80a0792:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a0794:	f001 fcfa 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a0798:	7869      	ldrb	r1, [r5, #1]
 80a079a:	f001 fc36 	bl	80a200a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a079e:	f001 fcf5 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a07a2:	6803      	ldr	r3, [r0, #0]
 80a07a4:	4631      	mov	r1, r6
 80a07a6:	689b      	ldr	r3, [r3, #8]
 80a07a8:	4798      	blx	r3
  Wire.write((value >> 24) & 0xFF); // value highest byte
 80a07aa:	f001 fcef 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a07ae:	0e21      	lsrs	r1, r4, #24
 80a07b0:	f7ff ff9a 	bl	80a06e8 <_ZN7TwoWire5writeEm>
  Wire.write((value >> 16) & 0xFF);
 80a07b4:	f001 fcea 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a07b8:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80a07bc:	f7ff ff94 	bl	80a06e8 <_ZN7TwoWire5writeEm>
  Wire.write((value >>  8) & 0xFF);
 80a07c0:	f001 fce4 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a07c4:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80a07c8:	f7ff ff8e 	bl	80a06e8 <_ZN7TwoWire5writeEm>
  Wire.write( value        & 0xFF); // value lowest byte
 80a07cc:	f001 fcde 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a07d0:	b2e1      	uxtb	r1, r4
 80a07d2:	f7ff ff89 	bl	80a06e8 <_ZN7TwoWire5writeEm>
  last_status = Wire.endTransmission();
 80a07d6:	f001 fcd9 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a07da:	f001 fc1e 	bl	80a201a <_ZN7TwoWire15endTransmissionEv>
 80a07de:	7028      	strb	r0, [r5, #0]
 80a07e0:	bd70      	pop	{r4, r5, r6, pc}

080a07e2 <_ZN7VL53L0X7readRegEh>:
}

// Read an 8-bit register
uint8_t VL53L0X::readReg(uint8_t reg)
{
 80a07e2:	b538      	push	{r3, r4, r5, lr}
 80a07e4:	4604      	mov	r4, r0
 80a07e6:	460d      	mov	r5, r1
  uint8_t value;

  Wire.beginTransmission(address);
 80a07e8:	f001 fcd0 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a07ec:	7861      	ldrb	r1, [r4, #1]
 80a07ee:	f001 fc0c 	bl	80a200a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a07f2:	f001 fccb 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a07f6:	6803      	ldr	r3, [r0, #0]
 80a07f8:	4629      	mov	r1, r5
 80a07fa:	689b      	ldr	r3, [r3, #8]
 80a07fc:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a07fe:	f001 fcc5 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a0802:	f001 fc0a 	bl	80a201a <_ZN7TwoWire15endTransmissionEv>
 80a0806:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)1);
 80a0808:	f001 fcc0 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a080c:	2201      	movs	r2, #1
 80a080e:	7861      	ldrb	r1, [r4, #1]
 80a0810:	f001 fbf3 	bl	80a1ffa <_ZN7TwoWire11requestFromEhh>
  value = Wire.read();
 80a0814:	f001 fcba 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a0818:	6803      	ldr	r3, [r0, #0]
 80a081a:	695b      	ldr	r3, [r3, #20]
 80a081c:	4798      	blx	r3

  return value;
}
 80a081e:	b2c0      	uxtb	r0, r0
 80a0820:	bd38      	pop	{r3, r4, r5, pc}

080a0822 <_ZN7VL53L0X12readReg16BitEh>:

// Read a 16-bit register
uint16_t VL53L0X::readReg16Bit(uint8_t reg)
{
 80a0822:	b538      	push	{r3, r4, r5, lr}
 80a0824:	4604      	mov	r4, r0
 80a0826:	460d      	mov	r5, r1
  uint16_t value;

  Wire.beginTransmission(address);
 80a0828:	f001 fcb0 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a082c:	7861      	ldrb	r1, [r4, #1]
 80a082e:	f001 fbec 	bl	80a200a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0832:	f001 fcab 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a0836:	6803      	ldr	r3, [r0, #0]
 80a0838:	4629      	mov	r1, r5
 80a083a:	689b      	ldr	r3, [r3, #8]
 80a083c:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a083e:	f001 fca5 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a0842:	f001 fbea 	bl	80a201a <_ZN7TwoWire15endTransmissionEv>
 80a0846:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)2);
 80a0848:	f001 fca0 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a084c:	7861      	ldrb	r1, [r4, #1]
 80a084e:	2202      	movs	r2, #2
 80a0850:	f001 fbd3 	bl	80a1ffa <_ZN7TwoWire11requestFromEhh>
  value  = (uint16_t)Wire.read() << 8; // value high byte
 80a0854:	f001 fc9a 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a0858:	6803      	ldr	r3, [r0, #0]
 80a085a:	695b      	ldr	r3, [r3, #20]
 80a085c:	4798      	blx	r3
 80a085e:	4604      	mov	r4, r0
  value |=           Wire.read();      // value low byte
 80a0860:	f001 fc94 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a0864:	6803      	ldr	r3, [r0, #0]
 80a0866:	695b      	ldr	r3, [r3, #20]
 80a0868:	4798      	blx	r3
 80a086a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8

  return value;
}
 80a086e:	b280      	uxth	r0, r0
 80a0870:	bd38      	pop	{r3, r4, r5, pc}

080a0872 <_ZN7VL53L0X10writeMultiEhPKhh>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
 80a0872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0874:	4606      	mov	r6, r0
 80a0876:	4614      	mov	r4, r2
 80a0878:	461d      	mov	r5, r3
 80a087a:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a087c:	f001 fc86 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a0880:	7871      	ldrb	r1, [r6, #1]
 80a0882:	f001 fbc2 	bl	80a200a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0886:	f001 fc81 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a088a:	6803      	ldr	r3, [r0, #0]
 80a088c:	4639      	mov	r1, r7
 80a088e:	689b      	ldr	r3, [r3, #8]
 80a0890:	4798      	blx	r3
 80a0892:	4425      	add	r5, r4

  while (count-- > 0)
 80a0894:	42ac      	cmp	r4, r5
 80a0896:	d007      	beq.n	80a08a8 <_ZN7VL53L0X10writeMultiEhPKhh+0x36>
  {
    Wire.write(*(src++));
 80a0898:	f001 fc78 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a089c:	6803      	ldr	r3, [r0, #0]
 80a089e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a08a2:	689b      	ldr	r3, [r3, #8]
 80a08a4:	4798      	blx	r3
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
  Wire.beginTransmission(address);
  Wire.write(reg);

  while (count-- > 0)
 80a08a6:	e7f5      	b.n	80a0894 <_ZN7VL53L0X10writeMultiEhPKhh+0x22>
  {
    Wire.write(*(src++));
  }

  last_status = Wire.endTransmission();
 80a08a8:	f001 fc70 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a08ac:	f001 fbb5 	bl	80a201a <_ZN7TwoWire15endTransmissionEv>
 80a08b0:	7030      	strb	r0, [r6, #0]
 80a08b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a08b4 <_ZN7VL53L0X9readMultiEhPhh>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void VL53L0X::readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 80a08b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a08b6:	4606      	mov	r6, r0
 80a08b8:	4614      	mov	r4, r2
 80a08ba:	461d      	mov	r5, r3
 80a08bc:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a08be:	f001 fc65 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a08c2:	7871      	ldrb	r1, [r6, #1]
 80a08c4:	f001 fba1 	bl	80a200a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a08c8:	f001 fc60 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a08cc:	6803      	ldr	r3, [r0, #0]
 80a08ce:	4639      	mov	r1, r7
 80a08d0:	689b      	ldr	r3, [r3, #8]
 80a08d2:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a08d4:	f001 fc5a 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a08d8:	f001 fb9f 	bl	80a201a <_ZN7TwoWire15endTransmissionEv>
 80a08dc:	7030      	strb	r0, [r6, #0]

  Wire.requestFrom(address, count);
 80a08de:	f001 fc55 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a08e2:	462a      	mov	r2, r5
 80a08e4:	7871      	ldrb	r1, [r6, #1]
 80a08e6:	f001 fb88 	bl	80a1ffa <_ZN7TwoWire11requestFromEhh>
 80a08ea:	4425      	add	r5, r4

  while (count-- > 0)
 80a08ec:	42ac      	cmp	r4, r5
 80a08ee:	d007      	beq.n	80a0900 <_ZN7VL53L0X9readMultiEhPhh+0x4c>
  {
    *(dst++) = Wire.read();
 80a08f0:	f001 fc4c 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a08f4:	6803      	ldr	r3, [r0, #0]
 80a08f6:	695b      	ldr	r3, [r3, #20]
 80a08f8:	4798      	blx	r3
 80a08fa:	f804 0b01 	strb.w	r0, [r4], #1
  Wire.write(reg);
  last_status = Wire.endTransmission();

  Wire.requestFrom(address, count);

  while (count-- > 0)
 80a08fe:	e7f5      	b.n	80a08ec <_ZN7VL53L0X9readMultiEhPhh+0x38>
 80a0900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0902:	0000      	movs	r0, r0
 80a0904:	0000      	movs	r0, r0
	...

080a0908 <_ZN7VL53L0X18setSignalRateLimitEf>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
 80a0908:	b570      	push	{r4, r5, r6, lr}
 80a090a:	460d      	mov	r5, r1
 80a090c:	4606      	mov	r6, r0
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a090e:	2100      	movs	r1, #0
 80a0910:	4628      	mov	r0, r5
 80a0912:	f002 f987 	bl	80a2c24 <__aeabi_fcmplt>
 80a0916:	b9b0      	cbnz	r0, 80a0946 <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>
 80a0918:	4628      	mov	r0, r5
 80a091a:	f001 ff09 	bl	80a2730 <__aeabi_f2d>
 80a091e:	a30c      	add	r3, pc, #48	; (adr r3, 80a0950 <_ZN7VL53L0X18setSignalRateLimitEf+0x48>)
 80a0920:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0924:	f001 ffd6 	bl	80a28d4 <__aeabi_dcmpgt>
 80a0928:	b968      	cbnz	r0, 80a0946 <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80a092a:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80a092e:	4628      	mov	r0, r5
 80a0930:	f001 ffda 	bl	80a28e8 <__aeabi_fmul>
 80a0934:	f002 f99e 	bl	80a2c74 <__aeabi_f2uiz>
 80a0938:	2144      	movs	r1, #68	; 0x44
 80a093a:	b282      	uxth	r2, r0
 80a093c:	4630      	mov	r0, r6
 80a093e:	f7ff ff06 	bl	80a074e <_ZN7VL53L0X13writeReg16BitEht>
 80a0942:	2001      	movs	r0, #1
 80a0944:	bd70      	pop	{r4, r5, r6, pc}
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a0946:	2000      	movs	r0, #0
 80a0948:	bd70      	pop	{r4, r5, r6, pc}
 80a094a:	bf00      	nop
 80a094c:	f3af 8000 	nop.w
 80a0950:	0a3d70a4 	.word	0x0a3d70a4
 80a0954:	407fffd7 	.word	0x407fffd7

080a0958 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>:
}

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t VL53L0X::getVcselPulsePeriod(vcselPeriodType type)
{
 80a0958:	b508      	push	{r3, lr}
  if (type == VcselPeriodPreRange)
 80a095a:	b909      	cbnz	r1, 80a0960 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x8>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80a095c:	2150      	movs	r1, #80	; 0x50
 80a095e:	e002      	b.n	80a0966 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0xe>
  }
  else if (type == VcselPeriodFinalRange)
 80a0960:	2901      	cmp	r1, #1
 80a0962:	d106      	bne.n	80a0972 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x1a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a0964:	2170      	movs	r1, #112	; 0x70
 80a0966:	f7ff ff3c 	bl	80a07e2 <_ZN7VL53L0X7readRegEh>
 80a096a:	3001      	adds	r0, #1
 80a096c:	0040      	lsls	r0, r0, #1
 80a096e:	b2c0      	uxtb	r0, r0
 80a0970:	bd08      	pop	{r3, pc}
  }
  else { return 255; }
 80a0972:	20ff      	movs	r0, #255	; 0xff
}
 80a0974:	bd08      	pop	{r3, pc}

080a0976 <_ZN7VL53L0X15startContinuousEm>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X::startContinuous(uint32_t period_ms)
{
 80a0976:	b538      	push	{r3, r4, r5, lr}
 80a0978:	4604      	mov	r4, r0
 80a097a:	460d      	mov	r5, r1
  writeReg(0x80, 0x01);
 80a097c:	2201      	movs	r2, #1
 80a097e:	2180      	movs	r1, #128	; 0x80
 80a0980:	f7ff fec0 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0984:	2201      	movs	r2, #1
 80a0986:	21ff      	movs	r1, #255	; 0xff
 80a0988:	4620      	mov	r0, r4
 80a098a:	f7ff febb 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a098e:	2200      	movs	r2, #0
 80a0990:	4611      	mov	r1, r2
 80a0992:	4620      	mov	r0, r4
 80a0994:	f7ff feb6 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x91, stop_variable);
 80a0998:	7c22      	ldrb	r2, [r4, #16]
 80a099a:	2191      	movs	r1, #145	; 0x91
 80a099c:	4620      	mov	r0, r4
 80a099e:	f7ff feb1 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a09a2:	2201      	movs	r2, #1
 80a09a4:	2100      	movs	r1, #0
 80a09a6:	4620      	mov	r0, r4
 80a09a8:	f7ff feac 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a09ac:	2200      	movs	r2, #0
 80a09ae:	21ff      	movs	r1, #255	; 0xff
 80a09b0:	4620      	mov	r0, r4
 80a09b2:	f7ff fea7 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a09b6:	2200      	movs	r2, #0
 80a09b8:	2180      	movs	r1, #128	; 0x80
 80a09ba:	4620      	mov	r0, r4
 80a09bc:	f7ff fea2 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  if (period_ms != 0)
 80a09c0:	b16d      	cbz	r5, 80a09de <_ZN7VL53L0X15startContinuousEm+0x68>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 80a09c2:	21f8      	movs	r1, #248	; 0xf8
 80a09c4:	4620      	mov	r0, r4
 80a09c6:	f7ff ff2c 	bl	80a0822 <_ZN7VL53L0X12readReg16BitEh>

    if (osc_calibrate_val != 0)
 80a09ca:	b100      	cbz	r0, 80a09ce <_ZN7VL53L0X15startContinuousEm+0x58>
    {
      period_ms *= osc_calibrate_val;
 80a09cc:	4345      	muls	r5, r0
    }

    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 80a09ce:	462a      	mov	r2, r5
 80a09d0:	2104      	movs	r1, #4
 80a09d2:	4620      	mov	r0, r4
 80a09d4:	f7ff feda 	bl	80a078c <_ZN7VL53L0X13writeReg32BitEhm>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 80a09d8:	2204      	movs	r2, #4
 80a09da:	2100      	movs	r1, #0
 80a09dc:	e001      	b.n	80a09e2 <_ZN7VL53L0X15startContinuousEm+0x6c>
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a09de:	4629      	mov	r1, r5
 80a09e0:	2202      	movs	r2, #2
 80a09e2:	4620      	mov	r0, r4
  }
}
 80a09e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a09e8:	f7ff be8c 	b.w	80a0704 <_ZN7VL53L0X8writeRegEhh>

080a09ec <_ZN7VL53L0X30readRangeContinuousMillimetersEv>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t VL53L0X::readRangeContinuousMillimeters(void)
{
 80a09ec:	b538      	push	{r3, r4, r5, lr}
 80a09ee:	4604      	mov	r4, r0
 80a09f0:	f000 fdee 	bl	80a15d0 <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a09f4:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a09f6:	2113      	movs	r1, #19
 80a09f8:	4620      	mov	r0, r4
 80a09fa:	f7ff fef2 	bl	80a07e2 <_ZN7VL53L0X7readRegEh>
 80a09fe:	0743      	lsls	r3, r0, #29
 80a0a00:	d10e      	bne.n	80a0a20 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0x34>
  {
    if (checkTimeoutExpired())
 80a0a02:	6863      	ldr	r3, [r4, #4]
 80a0a04:	2b00      	cmp	r3, #0
 80a0a06:	d0f6      	beq.n	80a09f6 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
 80a0a08:	f000 fde2 	bl	80a15d0 <HAL_Timer_Get_Milli_Seconds>
 80a0a0c:	68e3      	ldr	r3, [r4, #12]
 80a0a0e:	1ac0      	subs	r0, r0, r3
 80a0a10:	6863      	ldr	r3, [r4, #4]
 80a0a12:	4298      	cmp	r0, r3
 80a0a14:	d9ef      	bls.n	80a09f6 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
    {
      did_timeout = true;
 80a0a16:	2301      	movs	r3, #1
 80a0a18:	7223      	strb	r3, [r4, #8]
      return 65535;
 80a0a1a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  return range;
}
 80a0a1e:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);
 80a0a20:	211e      	movs	r1, #30
 80a0a22:	4620      	mov	r0, r4
 80a0a24:	f7ff fefd 	bl	80a0822 <_ZN7VL53L0X12readReg16BitEh>
 80a0a28:	4605      	mov	r5, r0

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a0a2a:	2201      	movs	r2, #1
 80a0a2c:	4620      	mov	r0, r4
 80a0a2e:	210b      	movs	r1, #11
 80a0a30:	f7ff fe68 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
 80a0a34:	4628      	mov	r0, r5
 80a0a36:	bd38      	pop	{r3, r4, r5, pc}

080a0a38 <_ZN7VL53L0X15timeoutOccurredEv>:
}

// Did a timeout occur in one of the read functions since the last call to
// timeoutOccurred()?
bool VL53L0X::timeoutOccurred()
{
 80a0a38:	4603      	mov	r3, r0
  bool tmp = did_timeout;
  did_timeout = false;
 80a0a3a:	2200      	movs	r2, #0

// Did a timeout occur in one of the read functions since the last call to
// timeoutOccurred()?
bool VL53L0X::timeoutOccurred()
{
  bool tmp = did_timeout;
 80a0a3c:	7a00      	ldrb	r0, [r0, #8]
  did_timeout = false;
 80a0a3e:	721a      	strb	r2, [r3, #8]
  return tmp;
}
 80a0a40:	4770      	bx	lr

080a0a42 <_ZN7VL53L0X11getSpadInfoEPhPb>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X::getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80a0a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a44:	4604      	mov	r4, r0
 80a0a46:	460f      	mov	r7, r1
 80a0a48:	4616      	mov	r6, r2
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80a0a4a:	2180      	movs	r1, #128	; 0x80
 80a0a4c:	2201      	movs	r2, #1
 80a0a4e:	f7ff fe59 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0a52:	2201      	movs	r2, #1
 80a0a54:	21ff      	movs	r1, #255	; 0xff
 80a0a56:	4620      	mov	r0, r4
 80a0a58:	f7ff fe54 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a0a5c:	2200      	movs	r2, #0
 80a0a5e:	4611      	mov	r1, r2
 80a0a60:	4620      	mov	r0, r4
 80a0a62:	f7ff fe4f 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x06);
 80a0a66:	2206      	movs	r2, #6
 80a0a68:	21ff      	movs	r1, #255	; 0xff
 80a0a6a:	4620      	mov	r0, r4
 80a0a6c:	f7ff fe4a 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg(0x83) | 0x04);
 80a0a70:	2183      	movs	r1, #131	; 0x83
 80a0a72:	4620      	mov	r0, r4
 80a0a74:	f7ff feb5 	bl	80a07e2 <_ZN7VL53L0X7readRegEh>
 80a0a78:	f040 0204 	orr.w	r2, r0, #4
 80a0a7c:	b2d2      	uxtb	r2, r2
 80a0a7e:	2183      	movs	r1, #131	; 0x83
 80a0a80:	4620      	mov	r0, r4
 80a0a82:	f7ff fe3f 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x07);
 80a0a86:	2207      	movs	r2, #7
 80a0a88:	21ff      	movs	r1, #255	; 0xff
 80a0a8a:	4620      	mov	r0, r4
 80a0a8c:	f7ff fe3a 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x81, 0x01);
 80a0a90:	2201      	movs	r2, #1
 80a0a92:	2181      	movs	r1, #129	; 0x81
 80a0a94:	4620      	mov	r0, r4
 80a0a96:	f7ff fe35 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a0a9a:	2201      	movs	r2, #1
 80a0a9c:	2180      	movs	r1, #128	; 0x80
 80a0a9e:	4620      	mov	r0, r4
 80a0aa0:	f7ff fe30 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x94, 0x6b);
 80a0aa4:	226b      	movs	r2, #107	; 0x6b
 80a0aa6:	2194      	movs	r1, #148	; 0x94
 80a0aa8:	4620      	mov	r0, r4
 80a0aaa:	f7ff fe2b 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, 0x00);
 80a0aae:	2200      	movs	r2, #0
 80a0ab0:	2183      	movs	r1, #131	; 0x83
 80a0ab2:	4620      	mov	r0, r4
 80a0ab4:	f7ff fe26 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
 80a0ab8:	f000 fd8a 	bl	80a15d0 <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a0abc:	60e0      	str	r0, [r4, #12]
  while (readReg(0x83) == 0x00)
 80a0abe:	2183      	movs	r1, #131	; 0x83
 80a0ac0:	4620      	mov	r0, r4
 80a0ac2:	f7ff fe8e 	bl	80a07e2 <_ZN7VL53L0X7readRegEh>
 80a0ac6:	4605      	mov	r5, r0
 80a0ac8:	b958      	cbnz	r0, 80a0ae2 <_ZN7VL53L0X11getSpadInfoEPhPb+0xa0>
  {
    if (checkTimeoutExpired()) { return false; }
 80a0aca:	6863      	ldr	r3, [r4, #4]
 80a0acc:	2b00      	cmp	r3, #0
 80a0ace:	d0f6      	beq.n	80a0abe <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a0ad0:	f000 fd7e 	bl	80a15d0 <HAL_Timer_Get_Milli_Seconds>
 80a0ad4:	68e3      	ldr	r3, [r4, #12]
 80a0ad6:	1ac0      	subs	r0, r0, r3
 80a0ad8:	6863      	ldr	r3, [r4, #4]
 80a0ada:	4298      	cmp	r0, r3
 80a0adc:	d9ef      	bls.n	80a0abe <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a0ade:	4628      	mov	r0, r5

  writeReg(0xFF, 0x00);
  writeReg(0x80, 0x00);

  return true;
}
 80a0ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  startTimeout();
  while (readReg(0x83) == 0x00)
  {
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
 80a0ae2:	2201      	movs	r2, #1
 80a0ae4:	4620      	mov	r0, r4
 80a0ae6:	2183      	movs	r1, #131	; 0x83
 80a0ae8:	f7ff fe0c 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  tmp = readReg(0x92);
 80a0aec:	2192      	movs	r1, #146	; 0x92
 80a0aee:	4620      	mov	r0, r4
 80a0af0:	f7ff fe77 	bl	80a07e2 <_ZN7VL53L0X7readRegEh>

  *count = tmp & 0x7f;
 80a0af4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a0af8:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
 80a0afc:	703b      	strb	r3, [r7, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;

  writeReg(0x81, 0x00);
 80a0afe:	2200      	movs	r2, #0
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a0b00:	7030      	strb	r0, [r6, #0]

  writeReg(0x81, 0x00);
 80a0b02:	2181      	movs	r1, #129	; 0x81
 80a0b04:	4620      	mov	r0, r4
 80a0b06:	f7ff fdfd 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x06);
 80a0b0a:	2206      	movs	r2, #6
 80a0b0c:	4620      	mov	r0, r4
 80a0b0e:	21ff      	movs	r1, #255	; 0xff
 80a0b10:	f7ff fdf8 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg( 0x83  & ~0x04));
 80a0b14:	2183      	movs	r1, #131	; 0x83
 80a0b16:	4620      	mov	r0, r4
 80a0b18:	f7ff fe63 	bl	80a07e2 <_ZN7VL53L0X7readRegEh>
 80a0b1c:	2183      	movs	r1, #131	; 0x83
 80a0b1e:	4602      	mov	r2, r0
 80a0b20:	4620      	mov	r0, r4
 80a0b22:	f7ff fdef 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0b26:	4620      	mov	r0, r4
 80a0b28:	2201      	movs	r2, #1
 80a0b2a:	21ff      	movs	r1, #255	; 0xff
 80a0b2c:	f7ff fdea 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a0b30:	4620      	mov	r0, r4
 80a0b32:	2201      	movs	r2, #1
 80a0b34:	2100      	movs	r1, #0
 80a0b36:	f7ff fde5 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0b3a:	4620      	mov	r0, r4
 80a0b3c:	2200      	movs	r2, #0
 80a0b3e:	21ff      	movs	r1, #255	; 0xff
 80a0b40:	f7ff fde0 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a0b44:	4620      	mov	r0, r4
 80a0b46:	2200      	movs	r2, #0
 80a0b48:	2180      	movs	r1, #128	; 0x80
 80a0b4a:	f7ff fddb 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  return true;
 80a0b4e:	2001      	movs	r0, #1
 80a0b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0b52 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>:
}

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X::getSequenceStepEnables(SequenceStepEnables * enables)
{
 80a0b52:	b510      	push	{r4, lr}
 80a0b54:	460c      	mov	r4, r1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 80a0b56:	2101      	movs	r1, #1
 80a0b58:	f7ff fe43 	bl	80a07e2 <_ZN7VL53L0X7readRegEh>

  enables->tcc          = (sequence_config >> 4) & 0x1;
 80a0b5c:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80a0b60:	7023      	strb	r3, [r4, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 80a0b62:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80a0b66:	70a3      	strb	r3, [r4, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 80a0b68:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80a0b6c:	7063      	strb	r3, [r4, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a0b6e:	f3c0 1380 	ubfx	r3, r0, #6, #1
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a0b72:	f3c0 10c0 	ubfx	r0, r0, #7, #1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);

  enables->tcc          = (sequence_config >> 4) & 0x1;
  enables->dss          = (sequence_config >> 3) & 0x1;
  enables->msrc         = (sequence_config >> 2) & 0x1;
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a0b76:	70e3      	strb	r3, [r4, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a0b78:	7120      	strb	r0, [r4, #4]
 80a0b7a:	bd10      	pop	{r4, pc}

080a0b7c <_ZN7VL53L0X13decodeTimeoutEm>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X::decodeTimeout(uint32_t reg_val)
{
 80a0b7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a0b80:	4298      	cmp	r0, r3
 80a0b82:	bf28      	it	cs
 80a0b84:	4618      	movcs	r0, r3
  if (reg_val > 0xFFFF) reg_val = 0xFFFF;
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80a0b86:	b2c3      	uxtb	r3, r0
 80a0b88:	0a00      	lsrs	r0, r0, #8
 80a0b8a:	fa03 f000 	lsl.w	r0, r3, r0
 80a0b8e:	3001      	adds	r0, #1
}
 80a0b90:	b280      	uxth	r0, r0
 80a0b92:	4770      	bx	lr

080a0b94 <_ZN7VL53L0X13encodeTimeoutEm>:
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a0b94:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80a0b98:	d201      	bcs.n	80a0b9e <_ZN7VL53L0X13encodeTimeoutEm+0xa>

  // format: "(LSByte * 2^MSByte) + 1"
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
 80a0b9a:	b178      	cbz	r0, 80a0bbc <_ZN7VL53L0X13encodeTimeoutEm+0x28>
 80a0b9c:	e001      	b.n	80a0ba2 <_ZN7VL53L0X13encodeTimeoutEm+0xe>
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a0b9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;
 80a0ba2:	3801      	subs	r0, #1
 80a0ba4:	2300      	movs	r3, #0

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a0ba6:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 80a0baa:	b29a      	uxth	r2, r3
 80a0bac:	f103 0301 	add.w	r3, r3, #1
 80a0bb0:	d001      	beq.n	80a0bb6 <_ZN7VL53L0X13encodeTimeoutEm+0x22>
    {
      ls_byte >>= 1;
 80a0bb2:	0840      	lsrs	r0, r0, #1

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a0bb4:	e7f7      	b.n	80a0ba6 <_ZN7VL53L0X13encodeTimeoutEm+0x12>
    {
      ls_byte >>= 1;
      ms_byte++;
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 80a0bb6:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80a0bba:	b280      	uxth	r0, r0
  }
  else { return 0; }
}
 80a0bbc:	4770      	bx	lr
	...

080a0bc0 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0bc0:	4b08      	ldr	r3, [pc, #32]	; (80a0be4 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh+0x24>)

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a0bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0bc6:	4359      	muls	r1, r3
}

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80a0bc8:	b510      	push	{r4, lr}
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0bca:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a0bce:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 80a0bd2:	fbb1 f3f2 	udiv	r3, r1, r2
 80a0bd6:	fbb1 f1f4 	udiv	r1, r1, r4
 80a0bda:	fb00 1003 	mla	r0, r0, r3, r1
}
 80a0bde:	fbb0 f0f2 	udiv	r0, r0, r2
 80a0be2:	bd10      	pop	{r4, pc}
 80a0be4:	003a2f00 	.word	0x003a2f00

080a0be8 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a0be8:	b570      	push	{r4, r5, r6, lr}
 80a0bea:	460e      	mov	r6, r1
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0bec:	2100      	movs	r1, #0
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a0bee:	4614      	mov	r4, r2
 80a0bf0:	4605      	mov	r5, r0
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0bf2:	f7ff feb1 	bl	80a0958 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0bf6:	2146      	movs	r1, #70	; 0x46
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0bf8:	8020      	strh	r0, [r4, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0bfa:	4628      	mov	r0, r5
 80a0bfc:	f7ff fdf1 	bl	80a07e2 <_ZN7VL53L0X7readRegEh>
 80a0c00:	3001      	adds	r0, #1
 80a0c02:	b280      	uxth	r0, r0
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a0c04:	7821      	ldrb	r1, [r4, #0]
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0c06:	80a0      	strh	r0, [r4, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a0c08:	f7ff ffda 	bl	80a0bc0 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0c0c:	2151      	movs	r1, #81	; 0x51
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a0c0e:	60e0      	str	r0, [r4, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0c10:	4628      	mov	r0, r5
 80a0c12:	f7ff fe06 	bl	80a0822 <_ZN7VL53L0X12readReg16BitEh>
 80a0c16:	f7ff ffb1 	bl	80a0b7c <_ZN7VL53L0X13decodeTimeoutEm>
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a0c1a:	7821      	ldrb	r1, [r4, #0]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0c1c:	80e0      	strh	r0, [r4, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a0c1e:	f7ff ffcf 	bl	80a0bc0 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a0c22:	2170      	movs	r1, #112	; 0x70

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a0c24:	6120      	str	r0, [r4, #16]
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a0c26:	4628      	mov	r0, r5
 80a0c28:	f7ff fddb 	bl	80a07e2 <_ZN7VL53L0X7readRegEh>
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 80a0c2c:	3001      	adds	r0, #1
 80a0c2e:	0040      	lsls	r0, r0, #1
 80a0c30:	b2c0      	uxtb	r0, r0
 80a0c32:	8060      	strh	r0, [r4, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0c34:	2171      	movs	r1, #113	; 0x71
 80a0c36:	4628      	mov	r0, r5
 80a0c38:	f7ff fdf3 	bl	80a0822 <_ZN7VL53L0X12readReg16BitEh>
 80a0c3c:	f7ff ff9e 	bl	80a0b7c <_ZN7VL53L0X13decodeTimeoutEm>
 80a0c40:	8120      	strh	r0, [r4, #8]

  if (enables->pre_range)
 80a0c42:	78f3      	ldrb	r3, [r6, #3]
 80a0c44:	b113      	cbz	r3, 80a0c4c <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE+0x64>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 80a0c46:	88e3      	ldrh	r3, [r4, #6]
 80a0c48:	1ac0      	subs	r0, r0, r3
 80a0c4a:	8120      	strh	r0, [r4, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 80a0c4c:	78a1      	ldrb	r1, [r4, #2]
 80a0c4e:	8920      	ldrh	r0, [r4, #8]
 80a0c50:	f7ff ffb6 	bl	80a0bc0 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->final_range_vcsel_period_pclks);
 80a0c54:	6160      	str	r0, [r4, #20]
 80a0c56:	bd70      	pop	{r4, r5, r6, pc}

080a0c58 <_ZN7VL53L0X26getMeasurementTimingBudgetEv>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t VL53L0X::getMeasurementTimingBudget(void)
{
 80a0c58:	b510      	push	{r4, lr}
 80a0c5a:	4604      	mov	r4, r0
 80a0c5c:	b088      	sub	sp, #32
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a0c5e:	4669      	mov	r1, sp
 80a0c60:	f7ff ff77 	bl	80a0b52 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a0c64:	aa02      	add	r2, sp, #8
 80a0c66:	4669      	mov	r1, sp
 80a0c68:	4620      	mov	r0, r4
 80a0c6a:	f7ff ffbd 	bl	80a0be8 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a0c6e:	f89d 3000 	ldrb.w	r3, [sp]
 80a0c72:	b11b      	cbz	r3, 80a0c7c <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x24>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a0c74:	9805      	ldr	r0, [sp, #20]
 80a0c76:	f600 5084 	addw	r0, r0, #3460	; 0xd84
 80a0c7a:	e001      	b.n	80a0c80 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x28>
  uint16_t const DssOverhead        = 690;
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80a0c7c:	f640 3036 	movw	r0, #2870	; 0xb36
  if (enables.tcc)
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a0c80:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a0c84:	b12b      	cbz	r3, 80a0c92 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x3a>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a0c86:	9b05      	ldr	r3, [sp, #20]
 80a0c88:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a0c8c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a0c90:	e006      	b.n	80a0ca0 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  }
  else if (enables.msrc)
 80a0c92:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a0c96:	b11b      	cbz	r3, 80a0ca0 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a0c98:	9b05      	ldr	r3, [sp, #20]
 80a0c9a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0c9e:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a0ca0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80a0ca4:	b11b      	cbz	r3, 80a0cae <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x56>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a0ca6:	9b06      	ldr	r3, [sp, #24]
 80a0ca8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0cac:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a0cae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a0cb2:	b11b      	cbz	r3, 80a0cbc <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x64>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80a0cb4:	9b07      	ldr	r3, [sp, #28]
 80a0cb6:	f203 2326 	addw	r3, r3, #550	; 0x226
 80a0cba:	4418      	add	r0, r3
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 80a0cbc:	6160      	str	r0, [r4, #20]
  return budget_us;
}
 80a0cbe:	b008      	add	sp, #32
 80a0cc0:	bd10      	pop	{r4, pc}
	...

080a0cc4 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0cc4:	4b08      	ldr	r3, [pc, #32]	; (80a0ce8 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh+0x24>)

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a0cc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0cca:	4359      	muls	r1, r3

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a0ccc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0cd0:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a0cd4:	fbb1 f3f3 	udiv	r3, r1, r3
 80a0cd8:	fbb1 f1f2 	udiv	r1, r1, r2
 80a0cdc:	fb02 3000 	mla	r0, r2, r0, r3
}
 80a0ce0:	fbb0 f0f1 	udiv	r0, r0, r1
 80a0ce4:	4770      	bx	lr
 80a0ce6:	bf00      	nop
 80a0ce8:	003a2f00 	.word	0x003a2f00

080a0cec <_ZN7VL53L0X26setMeasurementTimingBudgetEm>:
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0cec:	f644 631f 	movw	r3, #19999	; 0x4e1f
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a0cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0cf2:	4299      	cmp	r1, r3
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a0cf4:	b089      	sub	sp, #36	; 0x24
 80a0cf6:	4606      	mov	r6, r0
 80a0cf8:	460d      	mov	r5, r1
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0cfa:	d942      	bls.n	80a0d82 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>

  uint32_t used_budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a0cfc:	4669      	mov	r1, sp
 80a0cfe:	f7ff ff28 	bl	80a0b52 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a0d02:	aa02      	add	r2, sp, #8
 80a0d04:	4669      	mov	r1, sp
 80a0d06:	4630      	mov	r0, r6
 80a0d08:	f7ff ff6e 	bl	80a0be8 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a0d0c:	f89d 3000 	ldrb.w	r3, [sp]
 80a0d10:	b11b      	cbz	r3, 80a0d1a <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x2e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a0d12:	9805      	ldr	r0, [sp, #20]
 80a0d14:	f600 3036 	addw	r0, r0, #2870	; 0xb36
 80a0d18:	e001      	b.n	80a0d1e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x32>

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80a0d1a:	f640 00e8 	movw	r0, #2280	; 0x8e8
  if (enables.tcc)
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a0d1e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a0d22:	b12b      	cbz	r3, 80a0d30 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x44>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a0d24:	9b05      	ldr	r3, [sp, #20]
 80a0d26:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a0d2a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a0d2e:	e006      	b.n	80a0d3e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  }
  else if (enables.msrc)
 80a0d30:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a0d34:	b11b      	cbz	r3, 80a0d3e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a0d36:	9b05      	ldr	r3, [sp, #20]
 80a0d38:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0d3c:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a0d3e:	f89d 7003 	ldrb.w	r7, [sp, #3]
 80a0d42:	b11f      	cbz	r7, 80a0d4c <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x60>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a0d44:	9b06      	ldr	r3, [sp, #24]
 80a0d46:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0d4a:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a0d4c:	f89d 4004 	ldrb.w	r4, [sp, #4]
 80a0d50:	b1ac      	cbz	r4, 80a0d7e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x92>
  {
    used_budget_us += FinalRangeOverhead;
 80a0d52:	f200 2026 	addw	r0, r0, #550	; 0x226
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80a0d56:	4285      	cmp	r5, r0
 80a0d58:	d313      	bcc.n	80a0d82 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint32_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80a0d5a:	f89d 100a 	ldrb.w	r1, [sp, #10]
 80a0d5e:	1a28      	subs	r0, r5, r0
 80a0d60:	f7ff ffb0 	bl	80a0cc4 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>

    if (enables.pre_range)
 80a0d64:	b117      	cbz	r7, 80a0d6c <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x80>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80a0d66:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80a0d6a:	4418      	add	r0, r3
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80a0d6c:	f7ff ff12 	bl	80a0b94 <_ZN7VL53L0X13encodeTimeoutEm>
      encodeTimeout(final_range_timeout_mclks));
 80a0d70:	2171      	movs	r1, #113	; 0x71
 80a0d72:	4602      	mov	r2, r0
 80a0d74:	4630      	mov	r0, r6
 80a0d76:	f7ff fcea 	bl	80a074e <_ZN7VL53L0X13writeReg16BitEht>

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 80a0d7a:	6175      	str	r5, [r6, #20]
 80a0d7c:	e002      	b.n	80a0d84 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  }
  return true;
 80a0d7e:	2401      	movs	r4, #1
 80a0d80:	e000      	b.n	80a0d84 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0d82:	2400      	movs	r4, #0
    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
  }
  return true;
}
 80a0d84:	4620      	mov	r0, r4
 80a0d86:	b009      	add	sp, #36	; 0x24
 80a0d88:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0d8a <_ZN7VL53L0X27performSingleRefCalibrationEh>:
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a0d8a:	b538      	push	{r3, r4, r5, lr}
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a0d8c:	f041 0201 	orr.w	r2, r1, #1
 80a0d90:	2100      	movs	r1, #0
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a0d92:	4604      	mov	r4, r0
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a0d94:	f7ff fcb6 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
 80a0d98:	f000 fc1a 	bl	80a15d0 <HAL_Timer_Get_Milli_Seconds>

  startTimeout();
 80a0d9c:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a0d9e:	2113      	movs	r1, #19
 80a0da0:	4620      	mov	r0, r4
 80a0da2:	f7ff fd1e 	bl	80a07e2 <_ZN7VL53L0X7readRegEh>
 80a0da6:	f010 0507 	ands.w	r5, r0, #7
 80a0daa:	d10b      	bne.n	80a0dc4 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x3a>
  {
    if (checkTimeoutExpired()) { return false; }
 80a0dac:	6863      	ldr	r3, [r4, #4]
 80a0dae:	2b00      	cmp	r3, #0
 80a0db0:	d0f5      	beq.n	80a0d9e <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a0db2:	f000 fc0d 	bl	80a15d0 <HAL_Timer_Get_Milli_Seconds>
 80a0db6:	68e3      	ldr	r3, [r4, #12]
 80a0db8:	1ac0      	subs	r0, r0, r3
 80a0dba:	6863      	ldr	r3, [r4, #4]
 80a0dbc:	4298      	cmp	r0, r3
 80a0dbe:	d9ee      	bls.n	80a0d9e <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a0dc0:	4628      	mov	r0, r5
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  writeReg(SYSRANGE_START, 0x00);

  return true;
}
 80a0dc2:	bd38      	pop	{r3, r4, r5, pc}
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
  {
    if (checkTimeoutExpired()) { return false; }
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a0dc4:	4620      	mov	r0, r4
 80a0dc6:	2201      	movs	r2, #1
 80a0dc8:	210b      	movs	r1, #11
 80a0dca:	f7ff fc9b 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  writeReg(SYSRANGE_START, 0x00);
 80a0dce:	2200      	movs	r2, #0
 80a0dd0:	4620      	mov	r0, r4
 80a0dd2:	4611      	mov	r1, r2
 80a0dd4:	f7ff fc96 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
 80a0dd8:	2001      	movs	r0, #1
 80a0dda:	bd38      	pop	{r3, r4, r5, pc}

080a0ddc <_ZN7VL53L0X4initEb>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool VL53L0X::init(bool io_2v8)
{
 80a0ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0dde:	4604      	mov	r4, r0
 80a0de0:	b085      	sub	sp, #20
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 80a0de2:	b149      	cbz	r1, 80a0df8 <_ZN7VL53L0X4initEb+0x1c>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 80a0de4:	2189      	movs	r1, #137	; 0x89
 80a0de6:	f7ff fcfc 	bl	80a07e2 <_ZN7VL53L0X7readRegEh>
 80a0dea:	f040 0201 	orr.w	r2, r0, #1
 80a0dee:	b2d2      	uxtb	r2, r2
 80a0df0:	2189      	movs	r1, #137	; 0x89
 80a0df2:	4620      	mov	r0, r4
 80a0df4:	f7ff fc86 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 80a0df8:	2200      	movs	r2, #0
 80a0dfa:	2188      	movs	r1, #136	; 0x88
 80a0dfc:	4620      	mov	r0, r4
 80a0dfe:	f7ff fc81 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a0e02:	2201      	movs	r2, #1
 80a0e04:	2180      	movs	r1, #128	; 0x80
 80a0e06:	4620      	mov	r0, r4
 80a0e08:	f7ff fc7c 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0e0c:	2201      	movs	r2, #1
 80a0e0e:	21ff      	movs	r1, #255	; 0xff
 80a0e10:	4620      	mov	r0, r4
 80a0e12:	f7ff fc77 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a0e16:	2200      	movs	r2, #0
 80a0e18:	4611      	mov	r1, r2
 80a0e1a:	4620      	mov	r0, r4
 80a0e1c:	f7ff fc72 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  stop_variable = readReg(0x91);
 80a0e20:	2191      	movs	r1, #145	; 0x91
 80a0e22:	4620      	mov	r0, r4
 80a0e24:	f7ff fcdd 	bl	80a07e2 <_ZN7VL53L0X7readRegEh>
  writeReg(0x00, 0x01);
 80a0e28:	2201      	movs	r2, #1
  writeReg(0x88, 0x00);

  writeReg(0x80, 0x01);
  writeReg(0xFF, 0x01);
  writeReg(0x00, 0x00);
  stop_variable = readReg(0x91);
 80a0e2a:	7420      	strb	r0, [r4, #16]
  writeReg(0x00, 0x01);
 80a0e2c:	2100      	movs	r1, #0
 80a0e2e:	4620      	mov	r0, r4
 80a0e30:	f7ff fc68 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a0e34:	2200      	movs	r2, #0
 80a0e36:	21ff      	movs	r1, #255	; 0xff
 80a0e38:	4620      	mov	r0, r4
 80a0e3a:	f7ff fc63 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a0e3e:	2200      	movs	r2, #0
 80a0e40:	2180      	movs	r1, #128	; 0x80
 80a0e42:	4620      	mov	r0, r4
 80a0e44:	f7ff fc5e 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80a0e48:	2160      	movs	r1, #96	; 0x60
 80a0e4a:	4620      	mov	r0, r4
 80a0e4c:	f7ff fcc9 	bl	80a07e2 <_ZN7VL53L0X7readRegEh>
 80a0e50:	f040 0212 	orr.w	r2, r0, #18
 80a0e54:	b2d2      	uxtb	r2, r2
 80a0e56:	2160      	movs	r1, #96	; 0x60
 80a0e58:	4620      	mov	r0, r4
 80a0e5a:	f7ff fc53 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80a0e5e:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a0e62:	4620      	mov	r0, r4
 80a0e64:	f7ff fd50 	bl	80a0908 <_ZN7VL53L0X18setSignalRateLimitEf>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80a0e68:	22ff      	movs	r2, #255	; 0xff
 80a0e6a:	2101      	movs	r1, #1
 80a0e6c:	4620      	mov	r0, r4
 80a0e6e:	f7ff fc49 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80a0e72:	f10d 0207 	add.w	r2, sp, #7
 80a0e76:	f10d 0106 	add.w	r1, sp, #6
 80a0e7a:	4620      	mov	r0, r4
 80a0e7c:	f7ff fde1 	bl	80a0a42 <_ZN7VL53L0X11getSpadInfoEPhPb>
 80a0e80:	b908      	cbnz	r0, 80a0e86 <_ZN7VL53L0X4initEb+0xaa>
 80a0e82:	2500      	movs	r5, #0
 80a0e84:	e21d      	b.n	80a12c2 <_ZN7VL53L0X4initEb+0x4e6>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a0e86:	2306      	movs	r3, #6
 80a0e88:	aa02      	add	r2, sp, #8
 80a0e8a:	21b0      	movs	r1, #176	; 0xb0
 80a0e8c:	4620      	mov	r0, r4
 80a0e8e:	f7ff fd11 	bl	80a08b4 <_ZN7VL53L0X9readMultiEhPhh>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 80a0e92:	2201      	movs	r2, #1
 80a0e94:	21ff      	movs	r1, #255	; 0xff
 80a0e96:	4620      	mov	r0, r4
 80a0e98:	f7ff fc34 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80a0e9c:	2200      	movs	r2, #0
 80a0e9e:	214f      	movs	r1, #79	; 0x4f
 80a0ea0:	4620      	mov	r0, r4
 80a0ea2:	f7ff fc2f 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80a0ea6:	222c      	movs	r2, #44	; 0x2c
 80a0ea8:	214e      	movs	r1, #78	; 0x4e
 80a0eaa:	4620      	mov	r0, r4
 80a0eac:	f7ff fc2a 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a0eb0:	2200      	movs	r2, #0
 80a0eb2:	21ff      	movs	r1, #255	; 0xff
 80a0eb4:	4620      	mov	r0, r4
 80a0eb6:	f7ff fc25 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0eba:	2500      	movs	r5, #0

  writeReg(0xFF, 0x01);
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80a0ebc:	4620      	mov	r0, r4
 80a0ebe:	21b6      	movs	r1, #182	; 0xb6
 80a0ec0:	22b4      	movs	r2, #180	; 0xb4
 80a0ec2:	f7ff fc1f 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;
 80a0ec6:	4629      	mov	r1, r5
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a0ec8:	f89d 3007 	ldrb.w	r3, [sp, #7]
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0ecc:	f89d 6006 	ldrb.w	r6, [sp, #6]
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a0ed0:	2b00      	cmp	r3, #0
 80a0ed2:	bf14      	ite	ne
 80a0ed4:	200c      	movne	r0, #12
 80a0ed6:	2000      	moveq	r0, #0
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a0ed8:	2701      	movs	r7, #1
 80a0eda:	b2eb      	uxtb	r3, r5
 80a0edc:	08da      	lsrs	r2, r3, #3
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0ede:	4298      	cmp	r0, r3
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a0ee0:	f10d 0e10 	add.w	lr, sp, #16
 80a0ee4:	f003 0307 	and.w	r3, r3, #7
 80a0ee8:	4472      	add	r2, lr
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0eea:	d801      	bhi.n	80a0ef0 <_ZN7VL53L0X4initEb+0x114>
 80a0eec:	428e      	cmp	r6, r1
 80a0eee:	d108      	bne.n	80a0f02 <_ZN7VL53L0X4initEb+0x126>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a0ef0:	f812 ec08 	ldrb.w	lr, [r2, #-8]
 80a0ef4:	fa07 f303 	lsl.w	r3, r7, r3
 80a0ef8:	ea2e 0303 	bic.w	r3, lr, r3
 80a0efc:	f802 3c08 	strb.w	r3, [r2, #-8]
 80a0f00:	e007      	b.n	80a0f12 <_ZN7VL53L0X4initEb+0x136>
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 80a0f02:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80a0f06:	fa42 f303 	asr.w	r3, r2, r3
 80a0f0a:	07db      	lsls	r3, r3, #31
    {
      spads_enabled++;
 80a0f0c:	bf44      	itt	mi
 80a0f0e:	3101      	addmi	r1, #1
 80a0f10:	b2c9      	uxtbmi	r1, r1
 80a0f12:	3501      	adds	r5, #1
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
 80a0f14:	2d30      	cmp	r5, #48	; 0x30
 80a0f16:	d1e0      	bne.n	80a0eda <_ZN7VL53L0X4initEb+0xfe>
    {
      spads_enabled++;
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a0f18:	2306      	movs	r3, #6
 80a0f1a:	aa02      	add	r2, sp, #8
 80a0f1c:	21b0      	movs	r1, #176	; 0xb0
 80a0f1e:	4620      	mov	r0, r4
 80a0f20:	f7ff fca7 	bl	80a0872 <_ZN7VL53L0X10writeMultiEhPKhh>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 80a0f24:	2201      	movs	r2, #1
 80a0f26:	21ff      	movs	r1, #255	; 0xff
 80a0f28:	4620      	mov	r0, r4
 80a0f2a:	f7ff fbeb 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a0f2e:	2200      	movs	r2, #0
 80a0f30:	4611      	mov	r1, r2
 80a0f32:	4620      	mov	r0, r4
 80a0f34:	f7ff fbe6 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0f38:	2200      	movs	r2, #0
 80a0f3a:	21ff      	movs	r1, #255	; 0xff
 80a0f3c:	4620      	mov	r0, r4
 80a0f3e:	f7ff fbe1 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x09, 0x00);
 80a0f42:	2200      	movs	r2, #0
 80a0f44:	2109      	movs	r1, #9
 80a0f46:	4620      	mov	r0, r4
 80a0f48:	f7ff fbdc 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x10, 0x00);
 80a0f4c:	2200      	movs	r2, #0
 80a0f4e:	2110      	movs	r1, #16
 80a0f50:	4620      	mov	r0, r4
 80a0f52:	f7ff fbd7 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x11, 0x00);
 80a0f56:	2200      	movs	r2, #0
 80a0f58:	2111      	movs	r1, #17
 80a0f5a:	4620      	mov	r0, r4
 80a0f5c:	f7ff fbd2 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x24, 0x01);
 80a0f60:	2201      	movs	r2, #1
 80a0f62:	2124      	movs	r1, #36	; 0x24
 80a0f64:	4620      	mov	r0, r4
 80a0f66:	f7ff fbcd 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x25, 0xFF);
 80a0f6a:	22ff      	movs	r2, #255	; 0xff
 80a0f6c:	2125      	movs	r1, #37	; 0x25
 80a0f6e:	4620      	mov	r0, r4
 80a0f70:	f7ff fbc8 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x75, 0x00);
 80a0f74:	2200      	movs	r2, #0
 80a0f76:	2175      	movs	r1, #117	; 0x75
 80a0f78:	4620      	mov	r0, r4
 80a0f7a:	f7ff fbc3 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a0f7e:	2201      	movs	r2, #1
 80a0f80:	21ff      	movs	r1, #255	; 0xff
 80a0f82:	4620      	mov	r0, r4
 80a0f84:	f7ff fbbe 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4E, 0x2C);
 80a0f88:	222c      	movs	r2, #44	; 0x2c
 80a0f8a:	214e      	movs	r1, #78	; 0x4e
 80a0f8c:	4620      	mov	r0, r4
 80a0f8e:	f7ff fbb9 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x00);
 80a0f92:	2200      	movs	r2, #0
 80a0f94:	2148      	movs	r1, #72	; 0x48
 80a0f96:	4620      	mov	r0, r4
 80a0f98:	f7ff fbb4 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x20);
 80a0f9c:	2220      	movs	r2, #32
 80a0f9e:	4629      	mov	r1, r5
 80a0fa0:	4620      	mov	r0, r4
 80a0fa2:	f7ff fbaf 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0fa6:	2200      	movs	r2, #0
 80a0fa8:	21ff      	movs	r1, #255	; 0xff
 80a0faa:	4620      	mov	r0, r4
 80a0fac:	f7ff fbaa 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x09);
 80a0fb0:	2209      	movs	r2, #9
 80a0fb2:	4629      	mov	r1, r5
 80a0fb4:	4620      	mov	r0, r4
 80a0fb6:	f7ff fba5 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x54, 0x00);
 80a0fba:	2200      	movs	r2, #0
 80a0fbc:	2154      	movs	r1, #84	; 0x54
 80a0fbe:	4620      	mov	r0, r4
 80a0fc0:	f7ff fba0 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a0fc4:	2204      	movs	r2, #4
 80a0fc6:	2131      	movs	r1, #49	; 0x31
 80a0fc8:	4620      	mov	r0, r4
 80a0fca:	f7ff fb9b 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x32, 0x03);
 80a0fce:	2203      	movs	r2, #3
 80a0fd0:	2132      	movs	r1, #50	; 0x32
 80a0fd2:	4620      	mov	r0, r4
 80a0fd4:	f7ff fb96 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x83);
 80a0fd8:	2283      	movs	r2, #131	; 0x83
 80a0fda:	2140      	movs	r1, #64	; 0x40
 80a0fdc:	4620      	mov	r0, r4
 80a0fde:	f7ff fb91 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x25);
 80a0fe2:	2225      	movs	r2, #37	; 0x25
 80a0fe4:	2146      	movs	r1, #70	; 0x46
 80a0fe6:	4620      	mov	r0, r4
 80a0fe8:	f7ff fb8c 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x60, 0x00);
 80a0fec:	2200      	movs	r2, #0
 80a0fee:	2160      	movs	r1, #96	; 0x60
 80a0ff0:	4620      	mov	r0, r4
 80a0ff2:	f7ff fb87 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x27, 0x00);
 80a0ff6:	2200      	movs	r2, #0
 80a0ff8:	2127      	movs	r1, #39	; 0x27
 80a0ffa:	4620      	mov	r0, r4
 80a0ffc:	f7ff fb82 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x50, 0x06);
 80a1000:	2206      	movs	r2, #6
 80a1002:	2150      	movs	r1, #80	; 0x50
 80a1004:	4620      	mov	r0, r4
 80a1006:	f7ff fb7d 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x51, 0x00);
 80a100a:	2200      	movs	r2, #0
 80a100c:	2151      	movs	r1, #81	; 0x51
 80a100e:	4620      	mov	r0, r4
 80a1010:	f7ff fb78 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x52, 0x96);
 80a1014:	2296      	movs	r2, #150	; 0x96
 80a1016:	2152      	movs	r1, #82	; 0x52
 80a1018:	4620      	mov	r0, r4
 80a101a:	f7ff fb73 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x56, 0x08);
 80a101e:	2208      	movs	r2, #8
 80a1020:	2156      	movs	r1, #86	; 0x56
 80a1022:	4620      	mov	r0, r4
 80a1024:	f7ff fb6e 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x57, 0x30);
 80a1028:	462a      	mov	r2, r5
 80a102a:	2157      	movs	r1, #87	; 0x57
 80a102c:	4620      	mov	r0, r4
 80a102e:	f7ff fb69 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x61, 0x00);
 80a1032:	2200      	movs	r2, #0
 80a1034:	2161      	movs	r1, #97	; 0x61
 80a1036:	4620      	mov	r0, r4
 80a1038:	f7ff fb64 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x62, 0x00);
 80a103c:	2200      	movs	r2, #0
 80a103e:	2162      	movs	r1, #98	; 0x62
 80a1040:	4620      	mov	r0, r4
 80a1042:	f7ff fb5f 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x64, 0x00);
 80a1046:	2200      	movs	r2, #0
 80a1048:	2164      	movs	r1, #100	; 0x64
 80a104a:	4620      	mov	r0, r4
 80a104c:	f7ff fb5a 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x65, 0x00);
 80a1050:	2200      	movs	r2, #0
 80a1052:	2165      	movs	r1, #101	; 0x65
 80a1054:	4620      	mov	r0, r4
 80a1056:	f7ff fb55 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x66, 0xA0);
 80a105a:	22a0      	movs	r2, #160	; 0xa0
 80a105c:	2166      	movs	r1, #102	; 0x66
 80a105e:	4620      	mov	r0, r4
 80a1060:	f7ff fb50 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1064:	2201      	movs	r2, #1
 80a1066:	21ff      	movs	r1, #255	; 0xff
 80a1068:	4620      	mov	r0, r4
 80a106a:	f7ff fb4b 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x22, 0x32);
 80a106e:	2232      	movs	r2, #50	; 0x32
 80a1070:	2122      	movs	r1, #34	; 0x22
 80a1072:	4620      	mov	r0, r4
 80a1074:	f7ff fb46 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x14);
 80a1078:	2214      	movs	r2, #20
 80a107a:	2147      	movs	r1, #71	; 0x47
 80a107c:	4620      	mov	r0, r4
 80a107e:	f7ff fb41 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x49, 0xFF);
 80a1082:	22ff      	movs	r2, #255	; 0xff
 80a1084:	2149      	movs	r1, #73	; 0x49
 80a1086:	4620      	mov	r0, r4
 80a1088:	f7ff fb3c 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4A, 0x00);
 80a108c:	2200      	movs	r2, #0
 80a108e:	214a      	movs	r1, #74	; 0x4a
 80a1090:	4620      	mov	r0, r4
 80a1092:	f7ff fb37 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1096:	2200      	movs	r2, #0
 80a1098:	21ff      	movs	r1, #255	; 0xff
 80a109a:	4620      	mov	r0, r4
 80a109c:	f7ff fb32 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7A, 0x0A);
 80a10a0:	220a      	movs	r2, #10
 80a10a2:	217a      	movs	r1, #122	; 0x7a
 80a10a4:	4620      	mov	r0, r4
 80a10a6:	f7ff fb2d 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7B, 0x00);
 80a10aa:	2200      	movs	r2, #0
 80a10ac:	217b      	movs	r1, #123	; 0x7b
 80a10ae:	4620      	mov	r0, r4
 80a10b0:	f7ff fb28 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x78, 0x21);
 80a10b4:	2221      	movs	r2, #33	; 0x21
 80a10b6:	2178      	movs	r1, #120	; 0x78
 80a10b8:	4620      	mov	r0, r4
 80a10ba:	f7ff fb23 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a10be:	2201      	movs	r2, #1
 80a10c0:	21ff      	movs	r1, #255	; 0xff
 80a10c2:	4620      	mov	r0, r4
 80a10c4:	f7ff fb1e 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x23, 0x34);
 80a10c8:	2234      	movs	r2, #52	; 0x34
 80a10ca:	2123      	movs	r1, #35	; 0x23
 80a10cc:	4620      	mov	r0, r4
 80a10ce:	f7ff fb19 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x42, 0x00);
 80a10d2:	2200      	movs	r2, #0
 80a10d4:	2142      	movs	r1, #66	; 0x42
 80a10d6:	4620      	mov	r0, r4
 80a10d8:	f7ff fb14 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0xFF);
 80a10dc:	22ff      	movs	r2, #255	; 0xff
 80a10de:	2144      	movs	r1, #68	; 0x44
 80a10e0:	4620      	mov	r0, r4
 80a10e2:	f7ff fb0f 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x26);
 80a10e6:	2226      	movs	r2, #38	; 0x26
 80a10e8:	2145      	movs	r1, #69	; 0x45
 80a10ea:	4620      	mov	r0, r4
 80a10ec:	f7ff fb0a 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x05);
 80a10f0:	2205      	movs	r2, #5
 80a10f2:	2146      	movs	r1, #70	; 0x46
 80a10f4:	4620      	mov	r0, r4
 80a10f6:	f7ff fb05 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x40);
 80a10fa:	2240      	movs	r2, #64	; 0x40
 80a10fc:	4611      	mov	r1, r2
 80a10fe:	4620      	mov	r0, r4
 80a1100:	f7ff fb00 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0E, 0x06);
 80a1104:	2206      	movs	r2, #6
 80a1106:	210e      	movs	r1, #14
 80a1108:	4620      	mov	r0, r4
 80a110a:	f7ff fafb 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x20, 0x1A);
 80a110e:	221a      	movs	r2, #26
 80a1110:	2120      	movs	r1, #32
 80a1112:	4620      	mov	r0, r4
 80a1114:	f7ff faf6 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x43, 0x40);
 80a1118:	2240      	movs	r2, #64	; 0x40
 80a111a:	2143      	movs	r1, #67	; 0x43
 80a111c:	4620      	mov	r0, r4
 80a111e:	f7ff faf1 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1122:	2200      	movs	r2, #0
 80a1124:	21ff      	movs	r1, #255	; 0xff
 80a1126:	4620      	mov	r0, r4
 80a1128:	f7ff faec 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x34, 0x03);
 80a112c:	2203      	movs	r2, #3
 80a112e:	2134      	movs	r1, #52	; 0x34
 80a1130:	4620      	mov	r0, r4
 80a1132:	f7ff fae7 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x35, 0x44);
 80a1136:	2244      	movs	r2, #68	; 0x44
 80a1138:	2135      	movs	r1, #53	; 0x35
 80a113a:	4620      	mov	r0, r4
 80a113c:	f7ff fae2 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1140:	2201      	movs	r2, #1
 80a1142:	21ff      	movs	r1, #255	; 0xff
 80a1144:	4620      	mov	r0, r4
 80a1146:	f7ff fadd 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a114a:	2204      	movs	r2, #4
 80a114c:	2131      	movs	r1, #49	; 0x31
 80a114e:	4620      	mov	r0, r4
 80a1150:	f7ff fad8 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4B, 0x09);
 80a1154:	2209      	movs	r2, #9
 80a1156:	214b      	movs	r1, #75	; 0x4b
 80a1158:	4620      	mov	r0, r4
 80a115a:	f7ff fad3 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4C, 0x05);
 80a115e:	2205      	movs	r2, #5
 80a1160:	214c      	movs	r1, #76	; 0x4c
 80a1162:	4620      	mov	r0, r4
 80a1164:	f7ff face 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4D, 0x04);
 80a1168:	2204      	movs	r2, #4
 80a116a:	214d      	movs	r1, #77	; 0x4d
 80a116c:	4620      	mov	r0, r4
 80a116e:	f7ff fac9 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1172:	2200      	movs	r2, #0
 80a1174:	21ff      	movs	r1, #255	; 0xff
 80a1176:	4620      	mov	r0, r4
 80a1178:	f7ff fac4 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0x00);
 80a117c:	2200      	movs	r2, #0
 80a117e:	2144      	movs	r1, #68	; 0x44
 80a1180:	4620      	mov	r0, r4
 80a1182:	f7ff fabf 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x20);
 80a1186:	2220      	movs	r2, #32
 80a1188:	2145      	movs	r1, #69	; 0x45
 80a118a:	4620      	mov	r0, r4
 80a118c:	f7ff faba 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x08);
 80a1190:	2208      	movs	r2, #8
 80a1192:	2147      	movs	r1, #71	; 0x47
 80a1194:	4620      	mov	r0, r4
 80a1196:	f7ff fab5 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x28);
 80a119a:	2228      	movs	r2, #40	; 0x28
 80a119c:	2148      	movs	r1, #72	; 0x48
 80a119e:	4620      	mov	r0, r4
 80a11a0:	f7ff fab0 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x67, 0x00);
 80a11a4:	2200      	movs	r2, #0
 80a11a6:	2167      	movs	r1, #103	; 0x67
 80a11a8:	4620      	mov	r0, r4
 80a11aa:	f7ff faab 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x70, 0x04);
 80a11ae:	2204      	movs	r2, #4
 80a11b0:	2170      	movs	r1, #112	; 0x70
 80a11b2:	4620      	mov	r0, r4
 80a11b4:	f7ff faa6 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x71, 0x01);
 80a11b8:	2201      	movs	r2, #1
 80a11ba:	2171      	movs	r1, #113	; 0x71
 80a11bc:	4620      	mov	r0, r4
 80a11be:	f7ff faa1 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x72, 0xFE);
 80a11c2:	22fe      	movs	r2, #254	; 0xfe
 80a11c4:	2172      	movs	r1, #114	; 0x72
 80a11c6:	4620      	mov	r0, r4
 80a11c8:	f7ff fa9c 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x76, 0x00);
 80a11cc:	2200      	movs	r2, #0
 80a11ce:	2176      	movs	r1, #118	; 0x76
 80a11d0:	4620      	mov	r0, r4
 80a11d2:	f7ff fa97 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x77, 0x00);
 80a11d6:	2200      	movs	r2, #0
 80a11d8:	2177      	movs	r1, #119	; 0x77
 80a11da:	4620      	mov	r0, r4
 80a11dc:	f7ff fa92 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a11e0:	2201      	movs	r2, #1
 80a11e2:	21ff      	movs	r1, #255	; 0xff
 80a11e4:	4620      	mov	r0, r4
 80a11e6:	f7ff fa8d 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0D, 0x01);
 80a11ea:	2201      	movs	r2, #1
 80a11ec:	210d      	movs	r1, #13
 80a11ee:	4620      	mov	r0, r4
 80a11f0:	f7ff fa88 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a11f4:	2200      	movs	r2, #0
 80a11f6:	21ff      	movs	r1, #255	; 0xff
 80a11f8:	4620      	mov	r0, r4
 80a11fa:	f7ff fa83 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x01);
 80a11fe:	2201      	movs	r2, #1
 80a1200:	2180      	movs	r1, #128	; 0x80
 80a1202:	4620      	mov	r0, r4
 80a1204:	f7ff fa7e 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x01, 0xF8);
 80a1208:	22f8      	movs	r2, #248	; 0xf8
 80a120a:	2101      	movs	r1, #1
 80a120c:	4620      	mov	r0, r4
 80a120e:	f7ff fa79 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1212:	2201      	movs	r2, #1
 80a1214:	21ff      	movs	r1, #255	; 0xff
 80a1216:	4620      	mov	r0, r4
 80a1218:	f7ff fa74 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x8E, 0x01);
 80a121c:	2201      	movs	r2, #1
 80a121e:	218e      	movs	r1, #142	; 0x8e
 80a1220:	4620      	mov	r0, r4
 80a1222:	f7ff fa6f 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a1226:	2201      	movs	r2, #1
 80a1228:	2100      	movs	r1, #0
 80a122a:	4620      	mov	r0, r4
 80a122c:	f7ff fa6a 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1230:	2200      	movs	r2, #0
 80a1232:	21ff      	movs	r1, #255	; 0xff
 80a1234:	4620      	mov	r0, r4
 80a1236:	f7ff fa65 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a123a:	2200      	movs	r2, #0
 80a123c:	2180      	movs	r1, #128	; 0x80
 80a123e:	4620      	mov	r0, r4
 80a1240:	f7ff fa60 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80a1244:	2204      	movs	r2, #4
 80a1246:	210a      	movs	r1, #10
 80a1248:	4620      	mov	r0, r4
 80a124a:	f7ff fa5b 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80a124e:	2184      	movs	r1, #132	; 0x84
 80a1250:	4620      	mov	r0, r4
 80a1252:	f7ff fac6 	bl	80a07e2 <_ZN7VL53L0X7readRegEh>
 80a1256:	2184      	movs	r1, #132	; 0x84
 80a1258:	f000 02ef 	and.w	r2, r0, #239	; 0xef
 80a125c:	4620      	mov	r0, r4
 80a125e:	f7ff fa51 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a1262:	2201      	movs	r2, #1
 80a1264:	210b      	movs	r1, #11
 80a1266:	4620      	mov	r0, r4
 80a1268:	f7ff fa4c 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a126c:	4620      	mov	r0, r4
 80a126e:	f7ff fcf3 	bl	80a0c58 <_ZN7VL53L0X26getMeasurementTimingBudgetEv>
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a1272:	22e8      	movs	r2, #232	; 0xe8
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a1274:	6160      	str	r0, [r4, #20]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a1276:	2101      	movs	r1, #1
 80a1278:	4620      	mov	r0, r4
 80a127a:	f7ff fa43 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(measurement_timing_budget_us);
 80a127e:	6961      	ldr	r1, [r4, #20]
 80a1280:	4620      	mov	r0, r4
 80a1282:	f7ff fd33 	bl	80a0cec <_ZN7VL53L0X26setMeasurementTimingBudgetEm>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80a1286:	2201      	movs	r2, #1
 80a1288:	4611      	mov	r1, r2
 80a128a:	4620      	mov	r0, r4
 80a128c:	f7ff fa3a 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x40)) { return false; }
 80a1290:	2140      	movs	r1, #64	; 0x40
 80a1292:	4620      	mov	r0, r4
 80a1294:	f7ff fd79 	bl	80a0d8a <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a1298:	2800      	cmp	r0, #0
 80a129a:	f43f adf2 	beq.w	80a0e82 <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80a129e:	2202      	movs	r2, #2
 80a12a0:	2101      	movs	r1, #1
 80a12a2:	4620      	mov	r0, r4
 80a12a4:	f7ff fa2e 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x00)) { return false; }
 80a12a8:	2100      	movs	r1, #0
 80a12aa:	4620      	mov	r0, r4
 80a12ac:	f7ff fd6d 	bl	80a0d8a <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a12b0:	4605      	mov	r5, r0
 80a12b2:	2800      	cmp	r0, #0
 80a12b4:	f43f ade5 	beq.w	80a0e82 <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a12b8:	22e8      	movs	r2, #232	; 0xe8
 80a12ba:	2101      	movs	r1, #1
 80a12bc:	4620      	mov	r0, r4
 80a12be:	f7ff fa21 	bl	80a0704 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_PerformRefCalibration() end

  return true;
}
 80a12c2:	4628      	mov	r0, r5
 80a12c4:	b005      	add	sp, #20
 80a12c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a12c8 <_GLOBAL__sub_I__ZN7VL53L0XC2Ev>:
 80a12c8:	f000 b92a 	b.w	80a1520 <HAL_Pin_Map>

080a12cc <_ZN9LIS3DHI2CD1Ev>:

}

LIS3DHI2C::~LIS3DHI2C() {

}
 80a12cc:	4770      	bx	lr

080a12ce <_ZN9LIS3DHI2CD0Ev>:

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {

}

LIS3DHI2C::~LIS3DHI2C() {
 80a12ce:	b510      	push	{r4, lr}
 80a12d0:	4604      	mov	r4, r0

}
 80a12d2:	f7fe fee2 	bl	80a009a <_ZdlPv>
 80a12d6:	4620      	mov	r0, r4
 80a12d8:	bd10      	pop	{r4, pc}

080a12da <_ZN9LIS3DHI2C9writeDataEhPKhj>:
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a12da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a12dc:	4605      	mov	r5, r0
 80a12de:	461e      	mov	r6, r3
 80a12e0:	460f      	mov	r7, r1

	wire.beginTransmission(getI2CAddr());
 80a12e2:	7c01      	ldrb	r1, [r0, #16]
 80a12e4:	68c0      	ldr	r0, [r0, #12]
 80a12e6:	f041 0118 	orr.w	r1, r1, #24
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a12ea:	4614      	mov	r4, r2

	wire.beginTransmission(getI2CAddr());
 80a12ec:	f000 fe8d 	bl	80a200a <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a12f0:	68e8      	ldr	r0, [r5, #12]

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a12f2:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a12f4:	6803      	ldr	r3, [r0, #0]
bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a12f6:	bf88      	it	hi
 80a12f8:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a12fc:	689b      	ldr	r3, [r3, #8]
 80a12fe:	4639      	mov	r1, r7
 80a1300:	4798      	blx	r3
 80a1302:	4426      	add	r6, r4
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a1304:	42a6      	cmp	r6, r4
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a1306:	68e8      	ldr	r0, [r5, #12]

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a1308:	d005      	beq.n	80a1316 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x3c>
		wire.write(buf[ii]);
 80a130a:	6803      	ldr	r3, [r0, #0]
 80a130c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1310:	689b      	ldr	r3, [r3, #8]
 80a1312:	4798      	blx	r3

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a1314:	e7f6      	b.n	80a1304 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x2a>
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a1316:	f000 fe80 	bl	80a201a <_ZN7TwoWire15endTransmissionEv>

	return (res == 0);
}
 80a131a:	fab0 f080 	clz	r0, r0
 80a131e:	0940      	lsrs	r0, r0, #5
 80a1320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1322 <_ZN9LIS3DHI2C8readDataEhPhj>:

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a1322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1324:	4604      	mov	r4, r0
 80a1326:	461e      	mov	r6, r3
 80a1328:	460f      	mov	r7, r1
	wire.beginTransmission(getI2CAddr());
 80a132a:	7c01      	ldrb	r1, [r0, #16]
 80a132c:	68c0      	ldr	r0, [r0, #12]
 80a132e:	f041 0118 	orr.w	r1, r1, #24

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a1332:	4615      	mov	r5, r2
	wire.beginTransmission(getI2CAddr());
 80a1334:	f000 fe69 	bl	80a200a <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a1338:	68e0      	ldr	r0, [r4, #12]
}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a133a:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a133c:	6803      	ldr	r3, [r0, #0]

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a133e:	bf88      	it	hi
 80a1340:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a1344:	689b      	ldr	r3, [r3, #8]
 80a1346:	4639      	mov	r1, r7
 80a1348:	4798      	blx	r3

	uint8_t res = wire.endTransmission();
 80a134a:	68e0      	ldr	r0, [r4, #12]
 80a134c:	f000 fe65 	bl	80a201a <_ZN7TwoWire15endTransmissionEv>
	if (res != 0) {
 80a1350:	b9a8      	cbnz	r0, 80a137e <_ZN9LIS3DHI2C8readDataEhPhj+0x5c>
		return false;
	}

	wire.requestFrom((int)getI2CAddr(), numBytes);
 80a1352:	7c21      	ldrb	r1, [r4, #16]
 80a1354:	4632      	mov	r2, r6
 80a1356:	f041 0118 	orr.w	r1, r1, #24
 80a135a:	68e0      	ldr	r0, [r4, #12]
 80a135c:	f000 fe50 	bl	80a2000 <_ZN7TwoWire11requestFromEii>
 80a1360:	442e      	add	r6, r5
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
 80a1362:	42ae      	cmp	r6, r5
 80a1364:	d00d      	beq.n	80a1382 <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
 80a1366:	68e0      	ldr	r0, [r4, #12]
 80a1368:	6803      	ldr	r3, [r0, #0]
 80a136a:	691b      	ldr	r3, [r3, #16]
 80a136c:	4798      	blx	r3
 80a136e:	b140      	cbz	r0, 80a1382 <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
		buf[ii] = wire.read();
 80a1370:	68e0      	ldr	r0, [r4, #12]
 80a1372:	6803      	ldr	r3, [r0, #0]
 80a1374:	695b      	ldr	r3, [r3, #20]
 80a1376:	4798      	blx	r3
 80a1378:	f805 0b01 	strb.w	r0, [r5], #1
 80a137c:	e7f1      	b.n	80a1362 <_ZN9LIS3DHI2C8readDataEhPhj+0x40>
	}
	wire.write(addr);

	uint8_t res = wire.endTransmission();
	if (res != 0) {
		return false;
 80a137e:	2000      	movs	r0, #0
 80a1380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1382:	2001      	movs	r0, #1
	wire.requestFrom((int)getI2CAddr(), numBytes);
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
		buf[ii] = wire.read();
	}
	return true;
}
 80a1384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1386 <_ZN12LIS3DHConfigC1Ev>:
#include "LIS3DH.h"

// Official project location:
// https://github.com/rickkas7/LIS3DH

LIS3DHConfig::LIS3DHConfig() {
 80a1386:	2200      	movs	r2, #0
 80a1388:	7002      	strb	r2, [r0, #0]
 80a138a:	7042      	strb	r2, [r0, #1]
 80a138c:	7082      	strb	r2, [r0, #2]
 80a138e:	70c2      	strb	r2, [r0, #3]
 80a1390:	7102      	strb	r2, [r0, #4]
 80a1392:	7142      	strb	r2, [r0, #5]
 80a1394:	7182      	strb	r2, [r0, #6]
 80a1396:	71c2      	strb	r2, [r0, #7]
 80a1398:	7202      	strb	r2, [r0, #8]
 80a139a:	7242      	strb	r2, [r0, #9]
 80a139c:	7282      	strb	r2, [r0, #10]
}
 80a139e:	4770      	bx	lr

080a13a0 <_ZN12LIS3DHConfig12setAccelModeEh>:
}

LIS3DHConfig &LIS3DHConfig::setAccelMode(uint8_t rate) {

	// Enable specified rate, with XYZ detection enabled
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
 80a13a0:	f041 0107 	orr.w	r1, r1, #7
 80a13a4:	7001      	strb	r1, [r0, #0]

	return *this;
}
 80a13a6:	4770      	bx	lr

080a13a8 <_ZN6LIS3DH13readRegister8Eh>:

	return pos;
}


uint8_t LIS3DH::readRegister8(uint8_t addr) {
 80a13a8:	b513      	push	{r0, r1, r4, lr}

	uint8_t resp[1];
	readData(addr, resp, sizeof(resp));
 80a13aa:	6803      	ldr	r3, [r0, #0]
 80a13ac:	aa01      	add	r2, sp, #4
 80a13ae:	689c      	ldr	r4, [r3, #8]
 80a13b0:	2301      	movs	r3, #1
 80a13b2:	47a0      	blx	r4

	return resp[0];
}
 80a13b4:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80a13b8:	b002      	add	sp, #8
 80a13ba:	bd10      	pop	{r4, pc}

080a13bc <_ZN6LIS3DH9hasDeviceEv>:
LIS3DH::~LIS3DH() {

}


bool LIS3DH::hasDevice() {
 80a13bc:	b538      	push	{r3, r4, r5, lr}
 80a13be:	4605      	mov	r5, r0
 80a13c0:	240a      	movs	r4, #10
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
 80a13c2:	210f      	movs	r1, #15
 80a13c4:	4628      	mov	r0, r5
 80a13c6:	f7ff ffef 	bl	80a13a8 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
 80a13ca:	2833      	cmp	r0, #51	; 0x33
			found = true;
 80a13cc:	f04f 0001 	mov.w	r0, #1

bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
		if (whoami == WHO_AM_I) {
 80a13d0:	d005      	beq.n	80a13de <_ZN6LIS3DH9hasDeviceEv+0x22>
			found = true;
			break;
		}
		delay(1);
 80a13d2:	f000 fb9f 	bl	80a1b14 <delay>
}


bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
 80a13d6:	3c01      	subs	r4, #1
 80a13d8:	d1f3      	bne.n	80a13c2 <_ZN6LIS3DH9hasDeviceEv+0x6>

}


bool LIS3DH::hasDevice() {
	bool found = false;
 80a13da:	4620      	mov	r0, r4
 80a13dc:	bd38      	pop	{r3, r4, r5, pc}
			break;
		}
		delay(1);
	}
	return found;
}
 80a13de:	bd38      	pop	{r3, r4, r5, pc}

080a13e0 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a13e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a13e2:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a13e4:	2107      	movs	r1, #7

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a13e6:	4606      	mov	r6, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a13e8:	f7ff ffde 	bl	80a13a8 <_ZN6LIS3DH13readRegister8Eh>
 80a13ec:	f000 0008 	and.w	r0, r0, #8

	bool hasData = ((statusAuxReg & STATUS_AUX_321DA) != 0);
 80a13f0:	2800      	cmp	r0, #0
 80a13f2:	bf14      	ite	ne
 80a13f4:	2501      	movne	r5, #1
 80a13f6:	2500      	moveq	r5, #0

	//Serial.printlnf("fifoSrcReg=0x%02x", fifoSrcReg);

	if (hasData) {
 80a13f8:	d01b      	beq.n	80a1432 <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x52>
		uint8_t resp[6];
		readData(REG_OUT_X_L, resp, sizeof(resp));
 80a13fa:	6833      	ldr	r3, [r6, #0]
 80a13fc:	466a      	mov	r2, sp
 80a13fe:	689f      	ldr	r7, [r3, #8]
 80a1400:	2128      	movs	r1, #40	; 0x28
 80a1402:	2306      	movs	r3, #6
 80a1404:	4630      	mov	r0, r6
 80a1406:	47b8      	blx	r7

		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
 80a1408:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a140c:	f89d 3000 	ldrb.w	r3, [sp]
 80a1410:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1414:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
 80a1416:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a141a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a141e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1422:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
 80a1424:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a1428:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a142c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1430:	80a3      	strh	r3, [r4, #4]
	}
	return hasData;
}
 80a1432:	4628      	mov	r0, r5
 80a1434:	b003      	add	sp, #12
 80a1436:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1438 <_ZN6LIS3DH14writeRegister8Ehh>:

	return resp[0] | (((uint16_t)resp[1]) << 8);
}


void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
 80a1438:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a143a:	ac02      	add	r4, sp, #8

	writeData(addr, req, sizeof(req));
 80a143c:	6803      	ldr	r3, [r0, #0]

void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a143e:	f804 2d04 	strb.w	r2, [r4, #-4]!

	writeData(addr, req, sizeof(req));
 80a1442:	68dd      	ldr	r5, [r3, #12]
 80a1444:	4622      	mov	r2, r4
 80a1446:	2301      	movs	r3, #1
 80a1448:	47a8      	blx	r5
}
 80a144a:	b003      	add	sp, #12
 80a144c:	bd30      	pop	{r4, r5, pc}
	...

080a1450 <_ZN6LIS3DH5setupER12LIS3DHConfig>:
		delay(1);
	}
	return found;
}

bool LIS3DH::setup(LIS3DHConfig &config) {
 80a1450:	b570      	push	{r4, r5, r6, lr}
 80a1452:	4604      	mov	r4, r0
 80a1454:	460d      	mov	r5, r1

	if (!hasDevice()) {
 80a1456:	f7ff ffb1 	bl	80a13bc <_ZN6LIS3DH9hasDeviceEv>
 80a145a:	4606      	mov	r6, r0
 80a145c:	b928      	cbnz	r0, 80a146a <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		Serial.println("device not found");
 80a145e:	f000 fc87 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a1462:	4928      	ldr	r1, [pc, #160]	; (80a1504 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
 80a1464:	f000 fab0 	bl	80a19c8 <_ZN5Print7printlnEPKc>
		return false;
 80a1468:	e049      	b.n	80a14fe <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
	}

	writeRegister8(REG_CTRL_REG1, config.reg1);
 80a146a:	782a      	ldrb	r2, [r5, #0]
 80a146c:	2120      	movs	r1, #32
 80a146e:	4620      	mov	r0, r4
 80a1470:	f7ff ffe2 	bl	80a1438 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
 80a1474:	786a      	ldrb	r2, [r5, #1]
 80a1476:	2121      	movs	r1, #33	; 0x21
 80a1478:	4620      	mov	r0, r4
 80a147a:	f7ff ffdd 	bl	80a1438 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
 80a147e:	78aa      	ldrb	r2, [r5, #2]
 80a1480:	2122      	movs	r1, #34	; 0x22
 80a1482:	4620      	mov	r0, r4
 80a1484:	f7ff ffd8 	bl	80a1438 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
 80a1488:	78ea      	ldrb	r2, [r5, #3]
 80a148a:	2123      	movs	r1, #35	; 0x23
 80a148c:	4620      	mov	r0, r4
 80a148e:	f7ff ffd3 	bl	80a1438 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
 80a1492:	792a      	ldrb	r2, [r5, #4]
 80a1494:	2124      	movs	r1, #36	; 0x24
 80a1496:	4620      	mov	r0, r4
 80a1498:	f7ff ffce 	bl	80a1438 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
 80a149c:	796a      	ldrb	r2, [r5, #5]
 80a149e:	2125      	movs	r1, #37	; 0x25
 80a14a0:	4620      	mov	r0, r4
 80a14a2:	f7ff ffc9 	bl	80a1438 <_ZN6LIS3DH14writeRegister8Ehh>

	if (config.setReference) {
 80a14a6:	79ab      	ldrb	r3, [r5, #6]
 80a14a8:	b11b      	cbz	r3, 80a14b2 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x62>
		// In normal mode, reading the reference register sets it for the current normal force
		// (the normal force of gravity acting on the device)
		readRegister8(REG_REFERENCE);
 80a14aa:	2126      	movs	r1, #38	; 0x26
 80a14ac:	4620      	mov	r0, r4
 80a14ae:	f7ff ff7b 	bl	80a13a8 <_ZN6LIS3DH13readRegister8Eh>
	}
	// Set FIFO mode
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
 80a14b2:	7aaa      	ldrb	r2, [r5, #10]
 80a14b4:	212e      	movs	r1, #46	; 0x2e
 80a14b6:	4620      	mov	r0, r4
 80a14b8:	f7ff ffbe 	bl	80a1438 <_ZN6LIS3DH14writeRegister8Ehh>



	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
 80a14bc:	78ab      	ldrb	r3, [r5, #2]
 80a14be:	065b      	lsls	r3, r3, #25
 80a14c0:	d51d      	bpl.n	80a14fe <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>

		writeRegister8(REG_INT1_THS, config.int1_ths);
 80a14c2:	79ea      	ldrb	r2, [r5, #7]
 80a14c4:	2132      	movs	r1, #50	; 0x32
 80a14c6:	4620      	mov	r0, r4
 80a14c8:	f7ff ffb6 	bl	80a1438 <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
 80a14cc:	7a2a      	ldrb	r2, [r5, #8]
 80a14ce:	2133      	movs	r1, #51	; 0x33
 80a14d0:	4620      	mov	r0, r4
 80a14d2:	f7ff ffb1 	bl	80a1438 <_ZN6LIS3DH14writeRegister8Ehh>

		if (intPin >= 0) {
 80a14d6:	6863      	ldr	r3, [r4, #4]
 80a14d8:	2b00      	cmp	r3, #0
 80a14da:	db0a      	blt.n	80a14f2 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa2>
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a14dc:	7a6a      	ldrb	r2, [r5, #9]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a14de:	4620      	mov	r0, r4
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a14e0:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a14e2:	2130      	movs	r1, #48	; 0x30
 80a14e4:	f7ff ffa8 	bl	80a1438 <_ZN6LIS3DH14writeRegister8Ehh>

			// Clear the interrupt just in case
			readRegister8(REG_INT1_SRC);
 80a14e8:	2131      	movs	r1, #49	; 0x31
 80a14ea:	4620      	mov	r0, r4
 80a14ec:	f7ff ff5c 	bl	80a13a8 <_ZN6LIS3DH13readRegister8Eh>
 80a14f0:	e005      	b.n	80a14fe <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
		}
		else {
			int1_cfg = 0;
 80a14f2:	2200      	movs	r2, #0
 80a14f4:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
 80a14f6:	2130      	movs	r1, #48	; 0x30
 80a14f8:	4620      	mov	r0, r4
 80a14fa:	f7ff ff9d 	bl	80a1438 <_ZN6LIS3DH14writeRegister8Ehh>




	return true;
}
 80a14fe:	4630      	mov	r0, r6
 80a1500:	bd70      	pop	{r4, r5, r6, pc}
 80a1502:	bf00      	nop
 80a1504:	080a2dd4 	.word	0x080a2dd4

080a1508 <_ZN9LIS3DHI2CC1ER7TwoWirehi>:

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a1508:	b510      	push	{r4, lr}

	return *this;
}


LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
 80a150a:	6043      	str	r3, [r0, #4]

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a150c:	4b02      	ldr	r3, [pc, #8]	; (80a1518 <_ZN9LIS3DHI2CC1ER7TwoWirehi+0x10>)
 80a150e:	60c1      	str	r1, [r0, #12]
 80a1510:	6003      	str	r3, [r0, #0]
 80a1512:	7402      	strb	r2, [r0, #16]

}
 80a1514:	bd10      	pop	{r4, pc}
 80a1516:	bf00      	nop
 80a1518:	080a2dc4 	.word	0x080a2dc4

080a151c <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:
 80a151c:	f000 b800 	b.w	80a1520 <HAL_Pin_Map>

080a1520 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a1520:	b508      	push	{r3, lr}
 80a1522:	4b02      	ldr	r3, [pc, #8]	; (80a152c <HAL_Pin_Map+0xc>)
 80a1524:	681b      	ldr	r3, [r3, #0]
 80a1526:	681b      	ldr	r3, [r3, #0]
 80a1528:	9301      	str	r3, [sp, #4]
 80a152a:	bd08      	pop	{r3, pc}
 80a152c:	080601b0 	.word	0x080601b0

080a1530 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1530:	b508      	push	{r3, lr}
 80a1532:	4b02      	ldr	r3, [pc, #8]	; (80a153c <HAL_Validate_Pin_Function+0xc>)
 80a1534:	681b      	ldr	r3, [r3, #0]
 80a1536:	685b      	ldr	r3, [r3, #4]
 80a1538:	9301      	str	r3, [sp, #4]
 80a153a:	bd08      	pop	{r3, pc}
 80a153c:	080601b0 	.word	0x080601b0

080a1540 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1540:	b508      	push	{r3, lr}
 80a1542:	4b02      	ldr	r3, [pc, #8]	; (80a154c <HAL_Pin_Mode+0xc>)
 80a1544:	681b      	ldr	r3, [r3, #0]
 80a1546:	689b      	ldr	r3, [r3, #8]
 80a1548:	9301      	str	r3, [sp, #4]
 80a154a:	bd08      	pop	{r3, pc}
 80a154c:	080601b0 	.word	0x080601b0

080a1550 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1550:	b508      	push	{r3, lr}
 80a1552:	4b02      	ldr	r3, [pc, #8]	; (80a155c <HAL_Get_Pin_Mode+0xc>)
 80a1554:	681b      	ldr	r3, [r3, #0]
 80a1556:	68db      	ldr	r3, [r3, #12]
 80a1558:	9301      	str	r3, [sp, #4]
 80a155a:	bd08      	pop	{r3, pc}
 80a155c:	080601b0 	.word	0x080601b0

080a1560 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1560:	b508      	push	{r3, lr}
 80a1562:	4b02      	ldr	r3, [pc, #8]	; (80a156c <HAL_GPIO_Write+0xc>)
 80a1564:	681b      	ldr	r3, [r3, #0]
 80a1566:	691b      	ldr	r3, [r3, #16]
 80a1568:	9301      	str	r3, [sp, #4]
 80a156a:	bd08      	pop	{r3, pc}
 80a156c:	080601b0 	.word	0x080601b0

080a1570 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1570:	b508      	push	{r3, lr}
 80a1572:	4b02      	ldr	r3, [pc, #8]	; (80a157c <HAL_GPIO_Read+0xc>)
 80a1574:	681b      	ldr	r3, [r3, #0]
 80a1576:	695b      	ldr	r3, [r3, #20]
 80a1578:	9301      	str	r3, [sp, #4]
 80a157a:	bd08      	pop	{r3, pc}
 80a157c:	080601b0 	.word	0x080601b0

080a1580 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a1580:	b508      	push	{r3, lr}
 80a1582:	4b02      	ldr	r3, [pc, #8]	; (80a158c <HAL_Interrupts_Attach+0xc>)
 80a1584:	681b      	ldr	r3, [r3, #0]
 80a1586:	699b      	ldr	r3, [r3, #24]
 80a1588:	9301      	str	r3, [sp, #4]
 80a158a:	bd08      	pop	{r3, pc}
 80a158c:	080601b0 	.word	0x080601b0

080a1590 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a1590:	b508      	push	{r3, lr}
 80a1592:	4b02      	ldr	r3, [pc, #8]	; (80a159c <HAL_Interrupts_Detach+0xc>)
 80a1594:	681b      	ldr	r3, [r3, #0]
 80a1596:	69db      	ldr	r3, [r3, #28]
 80a1598:	9301      	str	r3, [sp, #4]
 80a159a:	bd08      	pop	{r3, pc}
 80a159c:	080601b0 	.word	0x080601b0

080a15a0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a15a0:	b508      	push	{r3, lr}
 80a15a2:	4b02      	ldr	r3, [pc, #8]	; (80a15ac <HAL_SPI_Init+0xc>)
 80a15a4:	681b      	ldr	r3, [r3, #0]
 80a15a6:	69db      	ldr	r3, [r3, #28]
 80a15a8:	9301      	str	r3, [sp, #4]
 80a15aa:	bd08      	pop	{r3, pc}
 80a15ac:	080601b4 	.word	0x080601b4

080a15b0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a15b0:	b508      	push	{r3, lr}
 80a15b2:	4b02      	ldr	r3, [pc, #8]	; (80a15bc <HAL_SPI_Is_Enabled+0xc>)
 80a15b4:	681b      	ldr	r3, [r3, #0]
 80a15b6:	6a1b      	ldr	r3, [r3, #32]
 80a15b8:	9301      	str	r3, [sp, #4]
 80a15ba:	bd08      	pop	{r3, pc}
 80a15bc:	080601b4 	.word	0x080601b4

080a15c0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a15c0:	b508      	push	{r3, lr}
 80a15c2:	4b02      	ldr	r3, [pc, #8]	; (80a15cc <HAL_RNG_GetRandomNumber+0xc>)
 80a15c4:	681b      	ldr	r3, [r3, #0]
 80a15c6:	685b      	ldr	r3, [r3, #4]
 80a15c8:	9301      	str	r3, [sp, #4]
 80a15ca:	bd08      	pop	{r3, pc}
 80a15cc:	0806019c 	.word	0x0806019c

080a15d0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a15d0:	b508      	push	{r3, lr}
 80a15d2:	4b02      	ldr	r3, [pc, #8]	; (80a15dc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a15d4:	681b      	ldr	r3, [r3, #0]
 80a15d6:	695b      	ldr	r3, [r3, #20]
 80a15d8:	9301      	str	r3, [sp, #4]
 80a15da:	bd08      	pop	{r3, pc}
 80a15dc:	0806019c 	.word	0x0806019c

080a15e0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a15e0:	b508      	push	{r3, lr}
 80a15e2:	4b02      	ldr	r3, [pc, #8]	; (80a15ec <os_mutex_create+0xc>)
 80a15e4:	681b      	ldr	r3, [r3, #0]
 80a15e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a15e8:	9301      	str	r3, [sp, #4]
 80a15ea:	bd08      	pop	{r3, pc}
 80a15ec:	080601d0 	.word	0x080601d0

080a15f0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a15f0:	b508      	push	{r3, lr}
 80a15f2:	4b02      	ldr	r3, [pc, #8]	; (80a15fc <HAL_USART_Init+0xc>)
 80a15f4:	681b      	ldr	r3, [r3, #0]
 80a15f6:	699b      	ldr	r3, [r3, #24]
 80a15f8:	9301      	str	r3, [sp, #4]
 80a15fa:	bd08      	pop	{r3, pc}
 80a15fc:	080601c4 	.word	0x080601c4

080a1600 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1600:	b508      	push	{r3, lr}
 80a1602:	4b02      	ldr	r3, [pc, #8]	; (80a160c <HAL_USART_Write_Data+0xc>)
 80a1604:	681b      	ldr	r3, [r3, #0]
 80a1606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1608:	9301      	str	r3, [sp, #4]
 80a160a:	bd08      	pop	{r3, pc}
 80a160c:	080601c4 	.word	0x080601c4

080a1610 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1610:	b508      	push	{r3, lr}
 80a1612:	4b02      	ldr	r3, [pc, #8]	; (80a161c <HAL_USART_Available_Data+0xc>)
 80a1614:	681b      	ldr	r3, [r3, #0]
 80a1616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1618:	9301      	str	r3, [sp, #4]
 80a161a:	bd08      	pop	{r3, pc}
 80a161c:	080601c4 	.word	0x080601c4

080a1620 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1620:	b508      	push	{r3, lr}
 80a1622:	4b02      	ldr	r3, [pc, #8]	; (80a162c <HAL_USART_Read_Data+0xc>)
 80a1624:	681b      	ldr	r3, [r3, #0]
 80a1626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1628:	9301      	str	r3, [sp, #4]
 80a162a:	bd08      	pop	{r3, pc}
 80a162c:	080601c4 	.word	0x080601c4

080a1630 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1630:	b508      	push	{r3, lr}
 80a1632:	4b02      	ldr	r3, [pc, #8]	; (80a163c <HAL_USART_Peek_Data+0xc>)
 80a1634:	681b      	ldr	r3, [r3, #0]
 80a1636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1638:	9301      	str	r3, [sp, #4]
 80a163a:	bd08      	pop	{r3, pc}
 80a163c:	080601c4 	.word	0x080601c4

080a1640 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1640:	b508      	push	{r3, lr}
 80a1642:	4b02      	ldr	r3, [pc, #8]	; (80a164c <HAL_USART_Flush_Data+0xc>)
 80a1644:	681b      	ldr	r3, [r3, #0]
 80a1646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1648:	9301      	str	r3, [sp, #4]
 80a164a:	bd08      	pop	{r3, pc}
 80a164c:	080601c4 	.word	0x080601c4

080a1650 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1650:	b508      	push	{r3, lr}
 80a1652:	4b02      	ldr	r3, [pc, #8]	; (80a165c <HAL_USART_Is_Enabled+0xc>)
 80a1654:	681b      	ldr	r3, [r3, #0]
 80a1656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1658:	9301      	str	r3, [sp, #4]
 80a165a:	bd08      	pop	{r3, pc}
 80a165c:	080601c4 	.word	0x080601c4

080a1660 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1660:	b508      	push	{r3, lr}
 80a1662:	4b02      	ldr	r3, [pc, #8]	; (80a166c <HAL_USART_Available_Data_For_Write+0xc>)
 80a1664:	681b      	ldr	r3, [r3, #0]
 80a1666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1668:	9301      	str	r3, [sp, #4]
 80a166a:	bd08      	pop	{r3, pc}
 80a166c:	080601c4 	.word	0x080601c4

080a1670 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a1670:	b508      	push	{r3, lr}
 80a1672:	4b02      	ldr	r3, [pc, #8]	; (80a167c <HAL_I2C_Set_Speed+0xc>)
 80a1674:	681b      	ldr	r3, [r3, #0]
 80a1676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1678:	9301      	str	r3, [sp, #4]
 80a167a:	bd08      	pop	{r3, pc}
 80a167c:	080601ac 	.word	0x080601ac

080a1680 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a1680:	b508      	push	{r3, lr}
 80a1682:	4b02      	ldr	r3, [pc, #8]	; (80a168c <HAL_I2C_Begin+0xc>)
 80a1684:	681b      	ldr	r3, [r3, #0]
 80a1686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1688:	9301      	str	r3, [sp, #4]
 80a168a:	bd08      	pop	{r3, pc}
 80a168c:	080601ac 	.word	0x080601ac

080a1690 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a1690:	b508      	push	{r3, lr}
 80a1692:	4b02      	ldr	r3, [pc, #8]	; (80a169c <HAL_I2C_Request_Data+0xc>)
 80a1694:	681b      	ldr	r3, [r3, #0]
 80a1696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1698:	9301      	str	r3, [sp, #4]
 80a169a:	bd08      	pop	{r3, pc}
 80a169c:	080601ac 	.word	0x080601ac

080a16a0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a16a0:	b508      	push	{r3, lr}
 80a16a2:	4b02      	ldr	r3, [pc, #8]	; (80a16ac <HAL_I2C_Begin_Transmission+0xc>)
 80a16a4:	681b      	ldr	r3, [r3, #0]
 80a16a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a16a8:	9301      	str	r3, [sp, #4]
 80a16aa:	bd08      	pop	{r3, pc}
 80a16ac:	080601ac 	.word	0x080601ac

080a16b0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a16b0:	b508      	push	{r3, lr}
 80a16b2:	4b02      	ldr	r3, [pc, #8]	; (80a16bc <HAL_I2C_End_Transmission+0xc>)
 80a16b4:	681b      	ldr	r3, [r3, #0]
 80a16b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a16b8:	9301      	str	r3, [sp, #4]
 80a16ba:	bd08      	pop	{r3, pc}
 80a16bc:	080601ac 	.word	0x080601ac

080a16c0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a16c0:	b508      	push	{r3, lr}
 80a16c2:	4b02      	ldr	r3, [pc, #8]	; (80a16cc <HAL_I2C_Write_Data+0xc>)
 80a16c4:	681b      	ldr	r3, [r3, #0]
 80a16c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a16c8:	9301      	str	r3, [sp, #4]
 80a16ca:	bd08      	pop	{r3, pc}
 80a16cc:	080601ac 	.word	0x080601ac

080a16d0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a16d0:	b508      	push	{r3, lr}
 80a16d2:	4b02      	ldr	r3, [pc, #8]	; (80a16dc <HAL_I2C_Available_Data+0xc>)
 80a16d4:	681b      	ldr	r3, [r3, #0]
 80a16d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a16d8:	9301      	str	r3, [sp, #4]
 80a16da:	bd08      	pop	{r3, pc}
 80a16dc:	080601ac 	.word	0x080601ac

080a16e0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a16e0:	b508      	push	{r3, lr}
 80a16e2:	4b02      	ldr	r3, [pc, #8]	; (80a16ec <HAL_I2C_Read_Data+0xc>)
 80a16e4:	681b      	ldr	r3, [r3, #0]
 80a16e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a16e8:	9301      	str	r3, [sp, #4]
 80a16ea:	bd08      	pop	{r3, pc}
 80a16ec:	080601ac 	.word	0x080601ac

080a16f0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a16f0:	b508      	push	{r3, lr}
 80a16f2:	4b02      	ldr	r3, [pc, #8]	; (80a16fc <HAL_I2C_Peek_Data+0xc>)
 80a16f4:	681b      	ldr	r3, [r3, #0]
 80a16f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a16f8:	9301      	str	r3, [sp, #4]
 80a16fa:	bd08      	pop	{r3, pc}
 80a16fc:	080601ac 	.word	0x080601ac

080a1700 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1700:	b508      	push	{r3, lr}
 80a1702:	4b02      	ldr	r3, [pc, #8]	; (80a170c <HAL_I2C_Flush_Data+0xc>)
 80a1704:	681b      	ldr	r3, [r3, #0]
 80a1706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1708:	9301      	str	r3, [sp, #4]
 80a170a:	bd08      	pop	{r3, pc}
 80a170c:	080601ac 	.word	0x080601ac

080a1710 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1710:	b508      	push	{r3, lr}
 80a1712:	4b02      	ldr	r3, [pc, #8]	; (80a171c <HAL_I2C_Is_Enabled+0xc>)
 80a1714:	681b      	ldr	r3, [r3, #0]
 80a1716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1718:	9301      	str	r3, [sp, #4]
 80a171a:	bd08      	pop	{r3, pc}
 80a171c:	080601ac 	.word	0x080601ac

080a1720 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1720:	b508      	push	{r3, lr}
 80a1722:	4b03      	ldr	r3, [pc, #12]	; (80a1730 <HAL_I2C_Init+0x10>)
 80a1724:	681b      	ldr	r3, [r3, #0]
 80a1726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a172a:	9301      	str	r3, [sp, #4]
 80a172c:	bd08      	pop	{r3, pc}
 80a172e:	0000      	.short	0x0000
 80a1730:	080601ac 	.word	0x080601ac

080a1734 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
 80a1734:	b508      	push	{r3, lr}
 80a1736:	4b02      	ldr	r3, [pc, #8]	; (80a1740 <HAL_Servo_Attach+0xc>)
 80a1738:	681b      	ldr	r3, [r3, #0]
 80a173a:	691b      	ldr	r3, [r3, #16]
 80a173c:	9301      	str	r3, [sp, #4]
 80a173e:	bd08      	pop	{r3, pc}
 80a1740:	080601a8 	.word	0x080601a8

080a1744 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
 80a1744:	b508      	push	{r3, lr}
 80a1746:	4b02      	ldr	r3, [pc, #8]	; (80a1750 <HAL_Servo_Detach+0xc>)
 80a1748:	681b      	ldr	r3, [r3, #0]
 80a174a:	695b      	ldr	r3, [r3, #20]
 80a174c:	9301      	str	r3, [sp, #4]
 80a174e:	bd08      	pop	{r3, pc}
 80a1750:	080601a8 	.word	0x080601a8

080a1754 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
 80a1754:	b508      	push	{r3, lr}
 80a1756:	4b02      	ldr	r3, [pc, #8]	; (80a1760 <HAL_Servo_Write_Pulse_Width+0xc>)
 80a1758:	681b      	ldr	r3, [r3, #0]
 80a175a:	699b      	ldr	r3, [r3, #24]
 80a175c:	9301      	str	r3, [sp, #4]
 80a175e:	bd08      	pop	{r3, pc}
 80a1760:	080601a8 	.word	0x080601a8

080a1764 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1764:	b508      	push	{r3, lr}
 80a1766:	4b02      	ldr	r3, [pc, #8]	; (80a1770 <HAL_USB_USART_Init+0xc>)
 80a1768:	681b      	ldr	r3, [r3, #0]
 80a176a:	681b      	ldr	r3, [r3, #0]
 80a176c:	9301      	str	r3, [sp, #4]
 80a176e:	bd08      	pop	{r3, pc}
 80a1770:	080601d8 	.word	0x080601d8

080a1774 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1774:	b508      	push	{r3, lr}
 80a1776:	4b02      	ldr	r3, [pc, #8]	; (80a1780 <HAL_USB_USART_Begin+0xc>)
 80a1778:	681b      	ldr	r3, [r3, #0]
 80a177a:	685b      	ldr	r3, [r3, #4]
 80a177c:	9301      	str	r3, [sp, #4]
 80a177e:	bd08      	pop	{r3, pc}
 80a1780:	080601d8 	.word	0x080601d8

080a1784 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1784:	b508      	push	{r3, lr}
 80a1786:	4b02      	ldr	r3, [pc, #8]	; (80a1790 <HAL_USB_USART_Available_Data+0xc>)
 80a1788:	681b      	ldr	r3, [r3, #0]
 80a178a:	691b      	ldr	r3, [r3, #16]
 80a178c:	9301      	str	r3, [sp, #4]
 80a178e:	bd08      	pop	{r3, pc}
 80a1790:	080601d8 	.word	0x080601d8

080a1794 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1794:	b508      	push	{r3, lr}
 80a1796:	4b02      	ldr	r3, [pc, #8]	; (80a17a0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1798:	681b      	ldr	r3, [r3, #0]
 80a179a:	695b      	ldr	r3, [r3, #20]
 80a179c:	9301      	str	r3, [sp, #4]
 80a179e:	bd08      	pop	{r3, pc}
 80a17a0:	080601d8 	.word	0x080601d8

080a17a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a17a4:	b508      	push	{r3, lr}
 80a17a6:	4b02      	ldr	r3, [pc, #8]	; (80a17b0 <HAL_USB_USART_Receive_Data+0xc>)
 80a17a8:	681b      	ldr	r3, [r3, #0]
 80a17aa:	699b      	ldr	r3, [r3, #24]
 80a17ac:	9301      	str	r3, [sp, #4]
 80a17ae:	bd08      	pop	{r3, pc}
 80a17b0:	080601d8 	.word	0x080601d8

080a17b4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a17b4:	b508      	push	{r3, lr}
 80a17b6:	4b02      	ldr	r3, [pc, #8]	; (80a17c0 <HAL_USB_USART_Send_Data+0xc>)
 80a17b8:	681b      	ldr	r3, [r3, #0]
 80a17ba:	69db      	ldr	r3, [r3, #28]
 80a17bc:	9301      	str	r3, [sp, #4]
 80a17be:	bd08      	pop	{r3, pc}
 80a17c0:	080601d8 	.word	0x080601d8

080a17c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a17c4:	b508      	push	{r3, lr}
 80a17c6:	4b02      	ldr	r3, [pc, #8]	; (80a17d0 <HAL_USB_USART_Flush_Data+0xc>)
 80a17c8:	681b      	ldr	r3, [r3, #0]
 80a17ca:	6a1b      	ldr	r3, [r3, #32]
 80a17cc:	9301      	str	r3, [sp, #4]
 80a17ce:	bd08      	pop	{r3, pc}
 80a17d0:	080601d8 	.word	0x080601d8

080a17d4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a17d4:	b508      	push	{r3, lr}
 80a17d6:	4b02      	ldr	r3, [pc, #8]	; (80a17e0 <set_system_mode+0xc>)
 80a17d8:	681b      	ldr	r3, [r3, #0]
 80a17da:	685b      	ldr	r3, [r3, #4]
 80a17dc:	9301      	str	r3, [sp, #4]
 80a17de:	bd08      	pop	{r3, pc}
 80a17e0:	080601a4 	.word	0x080601a4

080a17e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a17e4:	b508      	push	{r3, lr}
 80a17e6:	4b02      	ldr	r3, [pc, #8]	; (80a17f0 <system_delay_ms+0xc>)
 80a17e8:	681b      	ldr	r3, [r3, #0]
 80a17ea:	695b      	ldr	r3, [r3, #20]
 80a17ec:	9301      	str	r3, [sp, #4]
 80a17ee:	bd08      	pop	{r3, pc}
 80a17f0:	080601a4 	.word	0x080601a4

080a17f4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a17f4:	b508      	push	{r3, lr}
 80a17f6:	4b02      	ldr	r3, [pc, #8]	; (80a1800 <system_thread_set_state+0xc>)
 80a17f8:	681b      	ldr	r3, [r3, #0]
 80a17fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a17fc:	9301      	str	r3, [sp, #4]
 80a17fe:	bd08      	pop	{r3, pc}
 80a1800:	080601a4 	.word	0x080601a4

080a1804 <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80a1804:	b508      	push	{r3, lr}
 80a1806:	4b02      	ldr	r3, [pc, #8]	; (80a1810 <system_set_usb_request_app_handler+0xc>)
 80a1808:	681b      	ldr	r3, [r3, #0]
 80a180a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a180c:	9301      	str	r3, [sp, #4]
 80a180e:	bd08      	pop	{r3, pc}
 80a1810:	080601a4 	.word	0x080601a4

080a1814 <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80a1814:	b508      	push	{r3, lr}
 80a1816:	4b02      	ldr	r3, [pc, #8]	; (80a1820 <system_set_usb_request_result+0xc>)
 80a1818:	681b      	ldr	r3, [r3, #0]
 80a181a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a181c:	9301      	str	r3, [sp, #4]
 80a181e:	bd08      	pop	{r3, pc}
 80a1820:	080601a4 	.word	0x080601a4

080a1824 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1824:	b508      	push	{r3, lr}
 80a1826:	4b02      	ldr	r3, [pc, #8]	; (80a1830 <network_ready+0xc>)
 80a1828:	681b      	ldr	r3, [r3, #0]
 80a182a:	691b      	ldr	r3, [r3, #16]
 80a182c:	9301      	str	r3, [sp, #4]
 80a182e:	bd08      	pop	{r3, pc}
 80a1830:	080601c8 	.word	0x080601c8

080a1834 <free>:
#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
DYNALIB_FN(1, rt, free, void(void*))
 80a1834:	b508      	push	{r3, lr}
 80a1836:	4b02      	ldr	r3, [pc, #8]	; (80a1840 <free+0xc>)
 80a1838:	681b      	ldr	r3, [r3, #0]
 80a183a:	685b      	ldr	r3, [r3, #4]
 80a183c:	9301      	str	r3, [sp, #4]
 80a183e:	bd08      	pop	{r3, pc}
 80a1840:	080601a0 	.word	0x080601a0

080a1844 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a1844:	b508      	push	{r3, lr}
 80a1846:	4b02      	ldr	r3, [pc, #8]	; (80a1850 <vsnprintf+0xc>)
 80a1848:	681b      	ldr	r3, [r3, #0]
 80a184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a184c:	9301      	str	r3, [sp, #4]
 80a184e:	bd08      	pop	{r3, pc}
 80a1850:	080601a0 	.word	0x080601a0

080a1854 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1854:	4770      	bx	lr

080a1856 <_ZN8SPIClassD0Ev>:
 80a1856:	b510      	push	{r4, lr}
 80a1858:	4604      	mov	r4, r0
 80a185a:	f7fe fc1e 	bl	80a009a <_ZdlPv>
 80a185e:	4620      	mov	r0, r4
 80a1860:	bd10      	pop	{r4, pc}
	...

080a1864 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1864:	b570      	push	{r4, r5, r6, lr}
 80a1866:	4604      	mov	r4, r0
 80a1868:	460e      	mov	r6, r1
 80a186a:	4b07      	ldr	r3, [pc, #28]	; (80a1888 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
	Mutex(os_mutex_t handle) : handle_(handle) {}

	/**
	 * Creates a new mutex.
	 */
	Mutex() : handle_(nullptr)
 80a186c:	2500      	movs	r5, #0
 80a186e:	6003      	str	r3, [r0, #0]
 80a1870:	f840 5f0c 	str.w	r5, [r0, #12]!
	{
		os_mutex_create(&handle_);
 80a1874:	f7ff feb4 	bl	80a15e0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1878:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a187a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a187c:	f7ff fe90 	bl	80a15a0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1880:	60a5      	str	r5, [r4, #8]
}
 80a1882:	4620      	mov	r0, r4
 80a1884:	bd70      	pop	{r4, r5, r6, pc}
 80a1886:	bf00      	nop
 80a1888:	080a2e20 	.word	0x080a2e20

080a188c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a188c:	7900      	ldrb	r0, [r0, #4]
 80a188e:	f7ff be8f 	b.w	80a15b0 <HAL_SPI_Is_Enabled>

080a1892 <_ZN5Servo17writeMicrosecondsEt>:
  // write(179).
  return a == this->minAngle || a == this->maxAngle ? a : a + 1;
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{
 80a1892:	f9b0 2000 	ldrsh.w	r2, [r0]

  if (!this->attached())
 80a1896:	1c53      	adds	r3, r2, #1
 80a1898:	d00b      	beq.n	80a18b2 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
 80a189a:	8843      	ldrh	r3, [r0, #2]
 80a189c:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 80a189e:	428b      	cmp	r3, r1
 80a18a0:	d803      	bhi.n	80a18aa <_ZN5Servo17writeMicrosecondsEt+0x18>
 80a18a2:	4288      	cmp	r0, r1
 80a18a4:	4603      	mov	r3, r0
 80a18a6:	bf28      	it	cs
 80a18a8:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
 80a18aa:	4619      	mov	r1, r3
 80a18ac:	b290      	uxth	r0, r2
 80a18ae:	f7ff bf51 	b.w	80a1754 <HAL_Servo_Write_Pulse_Width>
 80a18b2:	4770      	bx	lr

080a18b4 <_ZN5Servo11resetFieldsEv>:
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a18b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
 80a18b8:	22b4      	movs	r2, #180	; 0xb4
 80a18ba:	8102      	strh	r2, [r0, #8]
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a18bc:	f44f 7208 	mov.w	r2, #544	; 0x220
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a18c0:	8003      	strh	r3, [r0, #0]
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a18c2:	8042      	strh	r2, [r0, #2]
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a18c4:	2300      	movs	r3, #0
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a18c6:	f44f 6216 	mov.w	r2, #2400	; 0x960
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a18ca:	80c3      	strh	r3, [r0, #6]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a18cc:	8082      	strh	r2, [r0, #4]
  this->trim = 0;
 80a18ce:	60c3      	str	r3, [r0, #12]
 80a18d0:	4770      	bx	lr

080a18d2 <_ZN5ServoC1Ev>:
#define ANGLE_TO_US(a)    ((uint16_t)(map((a), this->minAngle, this->maxAngle, \
                                        this->minPW, this->maxPW)))
#define US_TO_ANGLE(us)   ((int16_t)(map((us), this->minPW, this->maxPW,  \
                                       this->minAngle, this->maxAngle)))

Servo::Servo()
 80a18d2:	b508      	push	{r3, lr}
{
  this->resetFields();
 80a18d4:	f7ff ffee 	bl	80a18b4 <_ZN5Servo11resetFieldsEv>
}
 80a18d8:	bd08      	pop	{r3, pc}

080a18da <_ZN5Servo6detachEv>:

  return true;
}

bool Servo::detach()
{
 80a18da:	b510      	push	{r4, lr}
 80a18dc:	4604      	mov	r4, r0
 80a18de:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
 80a18e2:	1c43      	adds	r3, r0, #1
 80a18e4:	d007      	beq.n	80a18f6 <_ZN5Servo6detachEv+0x1c>
  {
    return false;
  }

  HAL_Servo_Detach(this->pin);
 80a18e6:	b280      	uxth	r0, r0
 80a18e8:	f7ff ff2c 	bl	80a1744 <HAL_Servo_Detach>

  this->resetFields();
 80a18ec:	4620      	mov	r0, r4
 80a18ee:	f7ff ffe1 	bl	80a18b4 <_ZN5Servo11resetFieldsEv>

  return true;
 80a18f2:	2001      	movs	r0, #1
 80a18f4:	bd10      	pop	{r4, pc}

bool Servo::detach()
{
  if (!this->attached())
  {
    return false;
 80a18f6:	2000      	movs	r0, #0
  HAL_Servo_Detach(this->pin);

  this->resetFields();

  return true;
}
 80a18f8:	bd10      	pop	{r4, pc}

080a18fa <_ZN5Servo6attachEtttss>:
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a18fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a18fe:	460d      	mov	r5, r1
 80a1900:	4604      	mov	r4, r0

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a1902:	2102      	movs	r1, #2
 80a1904:	4628      	mov	r0, r5
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a1906:	4690      	mov	r8, r2
 80a1908:	461f      	mov	r7, r3

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a190a:	f7ff fe11 	bl	80a1530 <HAL_Validate_Pin_Function>
 80a190e:	2802      	cmp	r0, #2
 80a1910:	d001      	beq.n	80a1916 <_ZN5Servo6attachEtttss+0x1c>
  {
    return false;
 80a1912:	2600      	movs	r6, #0
 80a1914:	e019      	b.n	80a194a <_ZN5Servo6attachEtttss+0x50>
  }

  // Safety check
  if (!pinAvailable(pin))
 80a1916:	4628      	mov	r0, r5
 80a1918:	f000 fb9c 	bl	80a2054 <pinAvailable>
 80a191c:	4606      	mov	r6, r0
 80a191e:	2800      	cmp	r0, #0
 80a1920:	d0f7      	beq.n	80a1912 <_ZN5Servo6attachEtttss+0x18>
  {
    return false;
  }

  if (this->attached())
 80a1922:	f9b4 3000 	ldrsh.w	r3, [r4]
 80a1926:	3301      	adds	r3, #1
 80a1928:	d002      	beq.n	80a1930 <_ZN5Servo6attachEtttss+0x36>
  {
    this->detach();
 80a192a:	4620      	mov	r0, r4
 80a192c:	f7ff ffd5 	bl	80a18da <_ZN5Servo6detachEv>
  }

  this->pin = pin;
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a1930:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  if (this->attached())
  {
    this->detach();
  }

  this->pin = pin;
 80a1934:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a1936:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
 80a1938:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  {
    this->detach();
  }

  this->pin = pin;
  this->minPW = minPW;
 80a193c:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
 80a1940:	80a7      	strh	r7, [r4, #4]
  this->minAngle = minAngle;
  this->maxAngle = maxAngle;
 80a1942:	8123      	strh	r3, [r4, #8]

  HAL_Servo_Attach(this->pin);
 80a1944:	4628      	mov	r0, r5
 80a1946:	f7ff fef5 	bl	80a1734 <HAL_Servo_Attach>

  return true;
}
 80a194a:	4630      	mov	r0, r6
 80a194c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1950 <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1950:	2000      	movs	r0, #0
 80a1952:	f7ff bf3f 	b.w	80a17d4 <set_system_mode>

080a1956 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1958:	4606      	mov	r6, r0
 80a195a:	460d      	mov	r5, r1
 80a195c:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a195e:	2400      	movs	r4, #0
  while (size--) {
 80a1960:	42bd      	cmp	r5, r7
 80a1962:	d00c      	beq.n	80a197e <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1964:	6833      	ldr	r3, [r6, #0]
 80a1966:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a196a:	689b      	ldr	r3, [r3, #8]
 80a196c:	4630      	mov	r0, r6
 80a196e:	4798      	blx	r3
     if (chunk>=0)
 80a1970:	2800      	cmp	r0, #0
 80a1972:	db01      	blt.n	80a1978 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1974:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1976:	e7f3      	b.n	80a1960 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1978:	2c00      	cmp	r4, #0
 80a197a:	bf08      	it	eq
 80a197c:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a197e:	4620      	mov	r0, r4
 80a1980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1982 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1982:	b570      	push	{r4, r5, r6, lr}
 80a1984:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1986:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1988:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a198a:	b149      	cbz	r1, 80a19a0 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a198c:	f001 f9b3 	bl	80a2cf6 <strlen>
 80a1990:	682b      	ldr	r3, [r5, #0]
 80a1992:	4602      	mov	r2, r0
 80a1994:	4621      	mov	r1, r4
 80a1996:	4628      	mov	r0, r5
    }
 80a1998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a199c:	68db      	ldr	r3, [r3, #12]
 80a199e:	4718      	bx	r3
    }
 80a19a0:	bd70      	pop	{r4, r5, r6, pc}

080a19a2 <_ZN5Print5printEPKc>:
 80a19a2:	b508      	push	{r3, lr}
 80a19a4:	f7ff ffed 	bl	80a1982 <_ZN5Print5writeEPKc>
 80a19a8:	bd08      	pop	{r3, pc}

080a19aa <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a19aa:	6803      	ldr	r3, [r0, #0]
 80a19ac:	689b      	ldr	r3, [r3, #8]
 80a19ae:	4718      	bx	r3

080a19b0 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a19b0:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a19b2:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a19b4:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a19b6:	f7ff fff8 	bl	80a19aa <_ZN5Print5printEc>
  n += print('\n');
 80a19ba:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a19bc:	4604      	mov	r4, r0
  n += print('\n');
 80a19be:	4628      	mov	r0, r5
 80a19c0:	f7ff fff3 	bl	80a19aa <_ZN5Print5printEc>
  return n;
}
 80a19c4:	4420      	add	r0, r4
 80a19c6:	bd38      	pop	{r3, r4, r5, pc}

080a19c8 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a19c8:	b538      	push	{r3, r4, r5, lr}
 80a19ca:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a19cc:	f7ff ffd9 	bl	80a1982 <_ZN5Print5writeEPKc>
 80a19d0:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a19d2:	4628      	mov	r0, r5
 80a19d4:	f7ff ffec 	bl	80a19b0 <_ZN5Print7printlnEv>
  return n;
}
 80a19d8:	4420      	add	r0, r4
 80a19da:	bd38      	pop	{r3, r4, r5, pc}

080a19dc <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a19dc:	2a01      	cmp	r2, #1
 80a19de:	bf98      	it	ls
 80a19e0:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a19e2:	b530      	push	{r4, r5, lr}
 80a19e4:	460b      	mov	r3, r1
 80a19e6:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a19e8:	2100      	movs	r1, #0
 80a19ea:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a19ee:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a19f2:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a19f6:	fb05 3312 	mls	r3, r5, r2, r3
 80a19fa:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a19fc:	2b09      	cmp	r3, #9
 80a19fe:	bf94      	ite	ls
 80a1a00:	3330      	addls	r3, #48	; 0x30
 80a1a02:	3337      	addhi	r3, #55	; 0x37
 80a1a04:	b2db      	uxtb	r3, r3
 80a1a06:	4621      	mov	r1, r4
 80a1a08:	f804 3901 	strb.w	r3, [r4], #-1
 80a1a0c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1a0e:	2d00      	cmp	r5, #0
 80a1a10:	d1ef      	bne.n	80a19f2 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1a12:	f7ff ffb6 	bl	80a1982 <_ZN5Print5writeEPKc>
}
 80a1a16:	b00b      	add	sp, #44	; 0x2c
 80a1a18:	bd30      	pop	{r4, r5, pc}

080a1a1a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1a1a:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1a1c:	b922      	cbnz	r2, 80a1a28 <_ZN5Print5printEmi+0xe>
 80a1a1e:	6803      	ldr	r3, [r0, #0]
 80a1a20:	b2c9      	uxtb	r1, r1
 80a1a22:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1a24:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1a26:	4718      	bx	r3
  else return printNumber(n, base);
 80a1a28:	b2d2      	uxtb	r2, r2
}
 80a1a2a:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1a2c:	f7ff bfd6 	b.w	80a19dc <_ZN5Print11printNumberEmh>

080a1a30 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1a30:	f7ff bff3 	b.w	80a1a1a <_ZN5Print5printEmi>

080a1a34 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a1a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1a38:	4607      	mov	r7, r0
 80a1a3a:	460e      	mov	r6, r1
  if (base == 0) {
 80a1a3c:	4615      	mov	r5, r2
 80a1a3e:	b92a      	cbnz	r2, 80a1a4c <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a1a44:	6803      	ldr	r3, [r0, #0]
 80a1a46:	b2c9      	uxtb	r1, r1
 80a1a48:	689b      	ldr	r3, [r3, #8]
 80a1a4a:	4718      	bx	r3
  } else if (base == 10) {
 80a1a4c:	2a0a      	cmp	r2, #10
 80a1a4e:	d102      	bne.n	80a1a56 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a1a50:	2900      	cmp	r1, #0
 80a1a52:	da01      	bge.n	80a1a58 <_ZN5Print5printEli+0x24>
 80a1a54:	e004      	b.n	80a1a60 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1a56:	b2d2      	uxtb	r2, r2
  }
}
 80a1a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1a5c:	f7ff bfbe 	b.w	80a19dc <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1a60:	212d      	movs	r1, #45	; 0x2d
 80a1a62:	f7ff ffa2 	bl	80a19aa <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a1a66:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1a68:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a1a6a:	4271      	negs	r1, r6
 80a1a6c:	4638      	mov	r0, r7
 80a1a6e:	f7ff ffb5 	bl	80a19dc <_ZN5Print11printNumberEmh>
 80a1a72:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1a78 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1a78:	f7ff bfdc 	b.w	80a1a34 <_ZN5Print5printEli>

080a1a7c <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a1a7c:	b40c      	push	{r2, r3}
 80a1a7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1a82:	b087      	sub	sp, #28
 80a1a84:	af00      	add	r7, sp, #0
 80a1a86:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a1a8a:	f854 9b04 	ldr.w	r9, [r4], #4
 80a1a8e:	4605      	mov	r5, r0
 80a1a90:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1a92:	4623      	mov	r3, r4
 80a1a94:	464a      	mov	r2, r9
 80a1a96:	2114      	movs	r1, #20
 80a1a98:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a1a9a:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1a9c:	f7ff fed2 	bl	80a1844 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a1aa0:	2813      	cmp	r0, #19
 80a1aa2:	d805      	bhi.n	80a1ab0 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1aa4:	1d39      	adds	r1, r7, #4
 80a1aa6:	4628      	mov	r0, r5
 80a1aa8:	f7ff ff6b 	bl	80a1982 <_ZN5Print5writeEPKc>
 80a1aac:	4604      	mov	r4, r0
 80a1aae:	e013      	b.n	80a1ad8 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1ab0:	f100 0308 	add.w	r3, r0, #8
 80a1ab4:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a1ab8:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1aba:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a1abe:	1c41      	adds	r1, r0, #1
 80a1ac0:	4623      	mov	r3, r4
 80a1ac2:	464a      	mov	r2, r9
 80a1ac4:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a1ac6:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a1ac8:	f7ff febc 	bl	80a1844 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1acc:	4669      	mov	r1, sp
 80a1ace:	4628      	mov	r0, r5
 80a1ad0:	f7ff ff57 	bl	80a1982 <_ZN5Print5writeEPKc>
 80a1ad4:	4604      	mov	r4, r0
 80a1ad6:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a1ad8:	b11e      	cbz	r6, 80a1ae2 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a1ada:	4628      	mov	r0, r5
 80a1adc:	f7ff ff68 	bl	80a19b0 <_ZN5Print7printlnEv>
 80a1ae0:	4404      	add	r4, r0
    return n;
}
 80a1ae2:	4620      	mov	r0, r4
 80a1ae4:	371c      	adds	r7, #28
 80a1ae6:	46bd      	mov	sp, r7
 80a1ae8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1aec:	b002      	add	sp, #8
 80a1aee:	4770      	bx	lr

080a1af0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1af0:	4a01      	ldr	r2, [pc, #4]	; (80a1af8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1af2:	4b02      	ldr	r3, [pc, #8]	; (80a1afc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1af4:	601a      	str	r2, [r3, #0]
 80a1af6:	4770      	bx	lr
 80a1af8:	080a2ee0 	.word	0x080a2ee0
 80a1afc:	200003c8 	.word	0x200003c8

080a1b00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1b00:	4b02      	ldr	r3, [pc, #8]	; (80a1b0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1b02:	681a      	ldr	r2, [r3, #0]
 80a1b04:	4b02      	ldr	r3, [pc, #8]	; (80a1b10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1b06:	601a      	str	r2, [r3, #0]
 80a1b08:	4770      	bx	lr
 80a1b0a:	bf00      	nop
 80a1b0c:	2000031c 	.word	0x2000031c
 80a1b10:	200003cc 	.word	0x200003cc

080a1b14 <delay>:
  return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1b14:	2100      	movs	r1, #0
 80a1b16:	f7ff be65 	b.w	80a17e4 <system_delay_ms>
	...

080a1b1c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1b1c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1b1e:	4b14      	ldr	r3, [pc, #80]	; (80a1b70 <serialEventRun+0x54>)
 80a1b20:	b133      	cbz	r3, 80a1b30 <serialEventRun+0x14>
 80a1b22:	f000 f925 	bl	80a1d70 <_Z16_fetch_usbserialv>
 80a1b26:	6803      	ldr	r3, [r0, #0]
 80a1b28:	691b      	ldr	r3, [r3, #16]
 80a1b2a:	4798      	blx	r3
 80a1b2c:	2800      	cmp	r0, #0
 80a1b2e:	dc16      	bgt.n	80a1b5e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1b30:	4b10      	ldr	r3, [pc, #64]	; (80a1b74 <serialEventRun+0x58>)
 80a1b32:	b133      	cbz	r3, 80a1b42 <serialEventRun+0x26>
 80a1b34:	f000 f9ea 	bl	80a1f0c <_Z22__fetch_global_Serial1v>
 80a1b38:	6803      	ldr	r3, [r0, #0]
 80a1b3a:	691b      	ldr	r3, [r3, #16]
 80a1b3c:	4798      	blx	r3
 80a1b3e:	2800      	cmp	r0, #0
 80a1b40:	dc10      	bgt.n	80a1b64 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1b42:	4b0d      	ldr	r3, [pc, #52]	; (80a1b78 <serialEventRun+0x5c>)
 80a1b44:	b10b      	cbz	r3, 80a1b4a <serialEventRun+0x2e>
 80a1b46:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1b4a:	4b0c      	ldr	r3, [pc, #48]	; (80a1b7c <serialEventRun+0x60>)
 80a1b4c:	b17b      	cbz	r3, 80a1b6e <serialEventRun+0x52>
 80a1b4e:	f000 f94b 	bl	80a1de8 <_Z17_fetch_usbserial1v>
 80a1b52:	6803      	ldr	r3, [r0, #0]
 80a1b54:	691b      	ldr	r3, [r3, #16]
 80a1b56:	4798      	blx	r3
 80a1b58:	2800      	cmp	r0, #0
 80a1b5a:	dc06      	bgt.n	80a1b6a <serialEventRun+0x4e>
 80a1b5c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1b5e:	f3af 8000 	nop.w
 80a1b62:	e7e5      	b.n	80a1b30 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1b64:	f3af 8000 	nop.w
 80a1b68:	e7eb      	b.n	80a1b42 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1b6a:	f3af 8000 	nop.w
 80a1b6e:	bd08      	pop	{r3, pc}
	...

080a1b80 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1b80:	b508      	push	{r3, lr}
	serialEventRun();
 80a1b82:	f7ff ffcb 	bl	80a1b1c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1b86:	f7ff fd23 	bl	80a15d0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1b8a:	4b01      	ldr	r3, [pc, #4]	; (80a1b90 <_post_loop+0x10>)
 80a1b8c:	6018      	str	r0, [r3, #0]
 80a1b8e:	bd08      	pop	{r3, pc}
 80a1b90:	20000858 	.word	0x20000858

080a1b94 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1b94:	4802      	ldr	r0, [pc, #8]	; (80a1ba0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1b96:	4a03      	ldr	r2, [pc, #12]	; (80a1ba4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1b98:	4903      	ldr	r1, [pc, #12]	; (80a1ba8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1b9a:	1a12      	subs	r2, r2, r0
 80a1b9c:	f001 b898 	b.w	80a2cd0 <memcpy>
 80a1ba0:	40024000 	.word	0x40024000
 80a1ba4:	40024004 	.word	0x40024004
 80a1ba8:	080a3010 	.word	0x080a3010

080a1bac <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80a1bac:	2000      	movs	r0, #0
 80a1bae:	4770      	bx	lr

080a1bb0 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a1bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80a1bb2:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a1bb4:	4604      	mov	r4, r0
    switch (req->type) {
 80a1bb6:	2b0a      	cmp	r3, #10
 80a1bb8:	d00e      	beq.n	80a1bd8 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 80a1bba:	2b50      	cmp	r3, #80	; 0x50
 80a1bbc:	d11c      	bne.n	80a1bf8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80a1bbe:	4b10      	ldr	r3, [pc, #64]	; (80a1c00 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80a1bc0:	681d      	ldr	r5, [r3, #0]
 80a1bc2:	b1cd      	cbz	r5, 80a1bf8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 80a1bc4:	7d03      	ldrb	r3, [r0, #20]
 80a1bc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a1bca:	9300      	str	r3, [sp, #0]
 80a1bcc:	68c2      	ldr	r2, [r0, #12]
 80a1bce:	f100 0310 	add.w	r3, r0, #16
 80a1bd2:	6880      	ldr	r0, [r0, #8]
 80a1bd4:	47a8      	blx	r5
 80a1bd6:	e007      	b.n	80a1be8 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80a1bd8:	f100 0310 	add.w	r3, r0, #16
 80a1bdc:	68c2      	ldr	r2, [r0, #12]
 80a1bde:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a1be2:	6880      	ldr	r0, [r0, #8]
 80a1be4:	f7ff ffe2 	bl	80a1bac <_Z26usb_request_custom_handlerPcjjPj>
 80a1be8:	b130      	cbz	r0, 80a1bf8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80a1bea:	2200      	movs	r2, #0
 80a1bec:	4620      	mov	r0, r4
 80a1bee:	4611      	mov	r1, r2
 80a1bf0:	f7ff fe10 	bl	80a1814 <system_set_usb_request_result>
        return true;
 80a1bf4:	2001      	movs	r0, #1
 80a1bf6:	e000      	b.n	80a1bfa <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80a1bf8:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80a1bfa:	b003      	add	sp, #12
 80a1bfc:	bd30      	pop	{r4, r5, pc}
 80a1bfe:	bf00      	nop
 80a1c00:	200003d0 	.word	0x200003d0

080a1c04 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80a1c04:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1c06:	4c0c      	ldr	r4, [pc, #48]	; (80a1c38 <module_user_init_hook+0x34>)
 80a1c08:	4d0c      	ldr	r5, [pc, #48]	; (80a1c3c <module_user_init_hook+0x38>)
 80a1c0a:	6823      	ldr	r3, [r4, #0]
 80a1c0c:	42ab      	cmp	r3, r5
 80a1c0e:	4b0c      	ldr	r3, [pc, #48]	; (80a1c40 <module_user_init_hook+0x3c>)
 80a1c10:	bf0c      	ite	eq
 80a1c12:	2201      	moveq	r2, #1
 80a1c14:	2200      	movne	r2, #0
 80a1c16:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1c18:	d002      	beq.n	80a1c20 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1c1a:	f7ff ffbb 	bl	80a1b94 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1c1e:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a1c20:	4b08      	ldr	r3, [pc, #32]	; (80a1c44 <module_user_init_hook+0x40>)
 80a1c22:	b11b      	cbz	r3, 80a1c2c <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1c24:	f7ff fccc 	bl	80a15c0 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a1c28:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80a1c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80a1c30:	2100      	movs	r1, #0
 80a1c32:	4805      	ldr	r0, [pc, #20]	; (80a1c48 <module_user_init_hook+0x44>)
 80a1c34:	f7ff bde6 	b.w	80a1804 <system_set_usb_request_app_handler>
 80a1c38:	40024000 	.word	0x40024000
 80a1c3c:	9a271c1e 	.word	0x9a271c1e
 80a1c40:	200003d4 	.word	0x200003d4
 80a1c44:	00000000 	.word	0x00000000
 80a1c48:	080a1bb1 	.word	0x080a1bb1

080a1c4c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1c4c:	4770      	bx	lr

080a1c4e <_ZN9IPAddressD0Ev>:
 80a1c4e:	b510      	push	{r4, lr}
 80a1c50:	4604      	mov	r4, r0
 80a1c52:	f7fe fa22 	bl	80a009a <_ZdlPv>
 80a1c56:	4620      	mov	r0, r4
 80a1c58:	bd10      	pop	{r4, pc}

080a1c5a <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c5c:	460f      	mov	r7, r1
 80a1c5e:	f100 0608 	add.w	r6, r0, #8
 80a1c62:	1d05      	adds	r5, r0, #4
 80a1c64:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1c66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1c6a:	220a      	movs	r2, #10
 80a1c6c:	4638      	mov	r0, r7
 80a1c6e:	f7ff fedf 	bl	80a1a30 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1c72:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1c74:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1c76:	d007      	beq.n	80a1c88 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1c78:	2c00      	cmp	r4, #0
 80a1c7a:	d0f4      	beq.n	80a1c66 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1c7c:	212e      	movs	r1, #46	; 0x2e
 80a1c7e:	4638      	mov	r0, r7
 80a1c80:	f7ff fe93 	bl	80a19aa <_ZN5Print5printEc>
 80a1c84:	4404      	add	r4, r0
 80a1c86:	e7ee      	b.n	80a1c66 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1c88:	4620      	mov	r0, r4
 80a1c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1c8c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1c8c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1c8e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1c92:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1c96:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1c9a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1c9e:	2304      	movs	r3, #4
 80a1ca0:	6041      	str	r1, [r0, #4]
 80a1ca2:	7503      	strb	r3, [r0, #20]
 80a1ca4:	bd10      	pop	{r4, pc}
	...

080a1ca8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1caa:	4d04      	ldr	r5, [pc, #16]	; (80a1cbc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1cac:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1cae:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1cb2:	9500      	str	r5, [sp, #0]
 80a1cb4:	f7ff ffea 	bl	80a1c8c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1cb8:	b003      	add	sp, #12
 80a1cba:	bd30      	pop	{r4, r5, pc}
 80a1cbc:	080a2f3c 	.word	0x080a2f3c

080a1cc0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1cc0:	7441      	strb	r1, [r0, #17]
 80a1cc2:	4770      	bx	lr

080a1cc4 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a1cc4:	4770      	bx	lr

080a1cc6 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a1cc6:	2100      	movs	r1, #0
 80a1cc8:	7c00      	ldrb	r0, [r0, #16]
 80a1cca:	f7ff bd6b 	b.w	80a17a4 <HAL_USB_USART_Receive_Data>

080a1cce <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a1cce:	2101      	movs	r1, #1
 80a1cd0:	7c00      	ldrb	r0, [r0, #16]
 80a1cd2:	f7ff bd67 	b.w	80a17a4 <HAL_USB_USART_Receive_Data>

080a1cd6 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a1cd6:	7c00      	ldrb	r0, [r0, #16]
 80a1cd8:	f7ff bd5c 	b.w	80a1794 <HAL_USB_USART_Available_Data_For_Write>

080a1cdc <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a1cdc:	7c00      	ldrb	r0, [r0, #16]
 80a1cde:	f7ff bd51 	b.w	80a1784 <HAL_USB_USART_Available_Data>

080a1ce2 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a1ce2:	b538      	push	{r3, r4, r5, lr}
 80a1ce4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1ce6:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a1ce8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1cea:	f7ff fd53 	bl	80a1794 <HAL_USB_USART_Available_Data_For_Write>
 80a1cee:	2800      	cmp	r0, #0
 80a1cf0:	dc01      	bgt.n	80a1cf6 <_ZN9USBSerial5writeEh+0x14>
 80a1cf2:	7c60      	ldrb	r0, [r4, #17]
 80a1cf4:	b120      	cbz	r0, 80a1d00 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a1cf6:	4629      	mov	r1, r5
 80a1cf8:	7c20      	ldrb	r0, [r4, #16]
 80a1cfa:	f7ff fd5b 	bl	80a17b4 <HAL_USB_USART_Send_Data>
    return 1;
 80a1cfe:	2001      	movs	r0, #1
  }
  return 0;
}
 80a1d00:	bd38      	pop	{r3, r4, r5, pc}

080a1d02 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1d02:	7c00      	ldrb	r0, [r0, #16]
 80a1d04:	f7ff bd5e 	b.w	80a17c4 <HAL_USB_USART_Flush_Data>

080a1d08 <_ZN9USBSerialD0Ev>:
 80a1d08:	b510      	push	{r4, lr}
 80a1d0a:	4604      	mov	r4, r0
 80a1d0c:	f7fe f9c5 	bl	80a009a <_ZdlPv>
 80a1d10:	4620      	mov	r0, r4
 80a1d12:	bd10      	pop	{r4, pc}

080a1d14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1d14:	b510      	push	{r4, lr}
 80a1d16:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1d18:	2300      	movs	r3, #0
 80a1d1a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1d1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1d20:	60a3      	str	r3, [r4, #8]
 80a1d22:	4b05      	ldr	r3, [pc, #20]	; (80a1d38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1d24:	4608      	mov	r0, r1
 80a1d26:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1d28:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1d2a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1d2c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1d2e:	4611      	mov	r1, r2
 80a1d30:	f7ff fd18 	bl	80a1764 <HAL_USB_USART_Init>
}
 80a1d34:	4620      	mov	r0, r4
 80a1d36:	bd10      	pop	{r4, pc}
 80a1d38:	080a2f50 	.word	0x080a2f50

080a1d3c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1d3c:	2200      	movs	r2, #0
 80a1d3e:	7c00      	ldrb	r0, [r0, #16]
 80a1d40:	f7ff bd18 	b.w	80a1774 <HAL_USB_USART_Begin>

080a1d44 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1d44:	b510      	push	{r4, lr}
 80a1d46:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1d48:	2214      	movs	r2, #20
 80a1d4a:	2100      	movs	r1, #0
 80a1d4c:	f000 ffcb 	bl	80a2ce6 <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1d50:	4b05      	ldr	r3, [pc, #20]	; (80a1d68 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1d52:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1d54:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1d56:	4b05      	ldr	r3, [pc, #20]	; (80a1d6c <_Z19acquireSerialBufferv+0x28>)
 80a1d58:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1d5a:	f240 1301 	movw	r3, #257	; 0x101
 80a1d5e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1d60:	2381      	movs	r3, #129	; 0x81
 80a1d62:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1d64:	bd10      	pop	{r4, pc}
 80a1d66:	bf00      	nop
 80a1d68:	2000045d 	.word	0x2000045d
 80a1d6c:	200003dc 	.word	0x200003dc

080a1d70 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1d70:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1d72:	4d0e      	ldr	r5, [pc, #56]	; (80a1dac <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1d74:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1d76:	a801      	add	r0, sp, #4
 80a1d78:	f7ff ffe4 	bl	80a1d44 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1d7c:	6829      	ldr	r1, [r5, #0]
 80a1d7e:	f011 0401 	ands.w	r4, r1, #1
 80a1d82:	d110      	bne.n	80a1da6 <_Z16_fetch_usbserialv+0x36>
 80a1d84:	4628      	mov	r0, r5
 80a1d86:	f7fe f98a 	bl	80a009e <__cxa_guard_acquire>
 80a1d8a:	b160      	cbz	r0, 80a1da6 <_Z16_fetch_usbserialv+0x36>
 80a1d8c:	aa01      	add	r2, sp, #4
 80a1d8e:	4621      	mov	r1, r4
 80a1d90:	4807      	ldr	r0, [pc, #28]	; (80a1db0 <_Z16_fetch_usbserialv+0x40>)
 80a1d92:	f7ff ffbf 	bl	80a1d14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1d96:	4628      	mov	r0, r5
 80a1d98:	f7fe f986 	bl	80a00a8 <__cxa_guard_release>
 80a1d9c:	4a05      	ldr	r2, [pc, #20]	; (80a1db4 <_Z16_fetch_usbserialv+0x44>)
 80a1d9e:	4906      	ldr	r1, [pc, #24]	; (80a1db8 <_Z16_fetch_usbserialv+0x48>)
 80a1da0:	4803      	ldr	r0, [pc, #12]	; (80a1db0 <_Z16_fetch_usbserialv+0x40>)
 80a1da2:	f000 fa13 	bl	80a21cc <__aeabi_atexit>
	return _usbserial;
}
 80a1da6:	4802      	ldr	r0, [pc, #8]	; (80a1db0 <_Z16_fetch_usbserialv+0x40>)
 80a1da8:	b007      	add	sp, #28
 80a1daa:	bd30      	pop	{r4, r5, pc}
 80a1dac:	200003d8 	.word	0x200003d8
 80a1db0:	20000560 	.word	0x20000560
 80a1db4:	20000320 	.word	0x20000320
 80a1db8:	080a1cc5 	.word	0x080a1cc5

080a1dbc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1dbc:	b510      	push	{r4, lr}
 80a1dbe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1dc0:	2214      	movs	r2, #20
 80a1dc2:	2100      	movs	r1, #0
 80a1dc4:	f000 ff8f 	bl	80a2ce6 <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1dc8:	4b05      	ldr	r3, [pc, #20]	; (80a1de0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1dca:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1dcc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1dce:	4b05      	ldr	r3, [pc, #20]	; (80a1de4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1dd0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1dd2:	f240 1301 	movw	r3, #257	; 0x101
 80a1dd6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1dd8:	2381      	movs	r3, #129	; 0x81
 80a1dda:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1ddc:	bd10      	pop	{r4, pc}
 80a1dde:	bf00      	nop
 80a1de0:	20000610 	.word	0x20000610
 80a1de4:	20000578 	.word	0x20000578

080a1de8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1de8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1dea:	4c0e      	ldr	r4, [pc, #56]	; (80a1e24 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1dec:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1dee:	a801      	add	r0, sp, #4
 80a1df0:	f7ff ffe4 	bl	80a1dbc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1df4:	6823      	ldr	r3, [r4, #0]
 80a1df6:	07db      	lsls	r3, r3, #31
 80a1df8:	d410      	bmi.n	80a1e1c <_Z17_fetch_usbserial1v+0x34>
 80a1dfa:	4620      	mov	r0, r4
 80a1dfc:	f7fe f94f 	bl	80a009e <__cxa_guard_acquire>
 80a1e00:	b160      	cbz	r0, 80a1e1c <_Z17_fetch_usbserial1v+0x34>
 80a1e02:	aa01      	add	r2, sp, #4
 80a1e04:	2101      	movs	r1, #1
 80a1e06:	4808      	ldr	r0, [pc, #32]	; (80a1e28 <_Z17_fetch_usbserial1v+0x40>)
 80a1e08:	f7ff ff84 	bl	80a1d14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1e0c:	4620      	mov	r0, r4
 80a1e0e:	f7fe f94b 	bl	80a00a8 <__cxa_guard_release>
 80a1e12:	4a06      	ldr	r2, [pc, #24]	; (80a1e2c <_Z17_fetch_usbserial1v+0x44>)
 80a1e14:	4906      	ldr	r1, [pc, #24]	; (80a1e30 <_Z17_fetch_usbserial1v+0x48>)
 80a1e16:	4804      	ldr	r0, [pc, #16]	; (80a1e28 <_Z17_fetch_usbserial1v+0x40>)
 80a1e18:	f000 f9d8 	bl	80a21cc <__aeabi_atexit>
  return _usbserial1;
}
 80a1e1c:	4802      	ldr	r0, [pc, #8]	; (80a1e28 <_Z17_fetch_usbserial1v+0x40>)
 80a1e1e:	b006      	add	sp, #24
 80a1e20:	bd10      	pop	{r4, pc}
 80a1e22:	bf00      	nop
 80a1e24:	20000574 	.word	0x20000574
 80a1e28:	200005fc 	.word	0x200005fc
 80a1e2c:	20000320 	.word	0x20000320
 80a1e30:	080a1cc5 	.word	0x080a1cc5

080a1e34 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a1e34:	4700      	bx	r0
	...

080a1e38 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a1e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1e3a:	461c      	mov	r4, r3
 80a1e3c:	b085      	sub	sp, #20
 80a1e3e:	4605      	mov	r5, r0
 80a1e40:	460e      	mov	r6, r1
 80a1e42:	4617      	mov	r7, r2
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a1e44:	f7ff fba4 	bl	80a1590 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80a1e48:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80a1e4a:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a1e4c:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a1e50:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a1e52:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a1e56:	bfb4      	ite	lt
 80a1e58:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a1e5a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1e5e:	4628      	mov	r0, r5
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a1e60:	bfa4      	itt	ge
 80a1e62:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a1e66:	ab03      	addge	r3, sp, #12
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1e68:	9300      	str	r3, [sp, #0]
 80a1e6a:	4632      	mov	r2, r6
 80a1e6c:	463b      	mov	r3, r7
 80a1e6e:	4904      	ldr	r1, [pc, #16]	; (80a1e80 <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a1e70:	bfa8      	it	ge
 80a1e72:	f88d 400d 	strbge.w	r4, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1e76:	f7ff fb83 	bl	80a1580 <HAL_Interrupts_Attach>
    return true;
}
 80a1e7a:	2001      	movs	r0, #1
 80a1e7c:	b005      	add	sp, #20
 80a1e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1e80:	080a1e35 	.word	0x080a1e35

080a1e84 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1e84:	4770      	bx	lr

080a1e86 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1e86:	7441      	strb	r1, [r0, #17]
 80a1e88:	4770      	bx	lr

080a1e8a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a1e8a:	7c00      	ldrb	r0, [r0, #16]
 80a1e8c:	f7ff bbe8 	b.w	80a1660 <HAL_USART_Available_Data_For_Write>

080a1e90 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a1e90:	7c00      	ldrb	r0, [r0, #16]
 80a1e92:	f7ff bbbd 	b.w	80a1610 <HAL_USART_Available_Data>

080a1e96 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a1e96:	7c00      	ldrb	r0, [r0, #16]
 80a1e98:	f7ff bbca 	b.w	80a1630 <HAL_USART_Peek_Data>

080a1e9c <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a1e9c:	7c00      	ldrb	r0, [r0, #16]
 80a1e9e:	f7ff bbbf 	b.w	80a1620 <HAL_USART_Read_Data>

080a1ea2 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1ea2:	7c00      	ldrb	r0, [r0, #16]
 80a1ea4:	f7ff bbcc 	b.w	80a1640 <HAL_USART_Flush_Data>

080a1ea8 <_ZN11USARTSerialD0Ev>:
 80a1ea8:	b510      	push	{r4, lr}
 80a1eaa:	4604      	mov	r4, r0
 80a1eac:	f7fe f8f5 	bl	80a009a <_ZdlPv>
 80a1eb0:	4620      	mov	r0, r4
 80a1eb2:	bd10      	pop	{r4, pc}

080a1eb4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1eb4:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1eb6:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1eb8:	4604      	mov	r4, r0
 80a1eba:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1ebc:	b925      	cbnz	r5, 80a1ec8 <_ZN11USARTSerial5writeEh+0x14>
 80a1ebe:	7c00      	ldrb	r0, [r0, #16]
 80a1ec0:	f7ff fbce 	bl	80a1660 <HAL_USART_Available_Data_For_Write>
 80a1ec4:	2800      	cmp	r0, #0
 80a1ec6:	dd05      	ble.n	80a1ed4 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1ec8:	4631      	mov	r1, r6
 80a1eca:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1ecc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1ed0:	f7ff bb96 	b.w	80a1600 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1ed4:	4628      	mov	r0, r5
 80a1ed6:	bd70      	pop	{r4, r5, r6, pc}

080a1ed8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1ed8:	b510      	push	{r4, lr}
 80a1eda:	4604      	mov	r4, r0
 80a1edc:	4608      	mov	r0, r1
 80a1ede:	4611      	mov	r1, r2
 80a1ee0:	2200      	movs	r2, #0
 80a1ee2:	6062      	str	r2, [r4, #4]
 80a1ee4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1ee8:	60a2      	str	r2, [r4, #8]
 80a1eea:	4a05      	ldr	r2, [pc, #20]	; (80a1f00 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1eec:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1eee:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1ef0:	2201      	movs	r2, #1
 80a1ef2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1ef4:	461a      	mov	r2, r3
 80a1ef6:	f7ff fb7b 	bl	80a15f0 <HAL_USART_Init>
}
 80a1efa:	4620      	mov	r0, r4
 80a1efc:	bd10      	pop	{r4, pc}
 80a1efe:	bf00      	nop
 80a1f00:	080a2f80 	.word	0x080a2f80

080a1f04 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1f04:	7c00      	ldrb	r0, [r0, #16]
 80a1f06:	f7ff bba3 	b.w	80a1650 <HAL_USART_Is_Enabled>
	...

080a1f0c <_Z22__fetch_global_Serial1v>:
// Preinstantiate Objects //////////////////////////////////////////////////////
static Ring_Buffer serial1_rx_buffer;
static Ring_Buffer serial1_tx_buffer;

USARTSerial& __fetch_global_Serial1()
{
 80a1f0c:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1f0e:	4d0c      	ldr	r5, [pc, #48]	; (80a1f40 <_Z22__fetch_global_Serial1v+0x34>)
 80a1f10:	6829      	ldr	r1, [r5, #0]
 80a1f12:	f011 0401 	ands.w	r4, r1, #1
 80a1f16:	d111      	bne.n	80a1f3c <_Z22__fetch_global_Serial1v+0x30>
 80a1f18:	4628      	mov	r0, r5
 80a1f1a:	f7fe f8c0 	bl	80a009e <__cxa_guard_acquire>
 80a1f1e:	b168      	cbz	r0, 80a1f3c <_Z22__fetch_global_Serial1v+0x30>
 80a1f20:	4a08      	ldr	r2, [pc, #32]	; (80a1f44 <_Z22__fetch_global_Serial1v+0x38>)
 80a1f22:	4621      	mov	r1, r4
 80a1f24:	4b08      	ldr	r3, [pc, #32]	; (80a1f48 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1f26:	4809      	ldr	r0, [pc, #36]	; (80a1f4c <_Z22__fetch_global_Serial1v+0x40>)
 80a1f28:	f7ff ffd6 	bl	80a1ed8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1f2c:	4628      	mov	r0, r5
 80a1f2e:	f7fe f8bb 	bl	80a00a8 <__cxa_guard_release>
 80a1f32:	4a07      	ldr	r2, [pc, #28]	; (80a1f50 <_Z22__fetch_global_Serial1v+0x44>)
 80a1f34:	4907      	ldr	r1, [pc, #28]	; (80a1f54 <_Z22__fetch_global_Serial1v+0x48>)
 80a1f36:	4805      	ldr	r0, [pc, #20]	; (80a1f4c <_Z22__fetch_global_Serial1v+0x40>)
 80a1f38:	f000 f948 	bl	80a21cc <__aeabi_atexit>
	return serial1;
}
 80a1f3c:	4803      	ldr	r0, [pc, #12]	; (80a1f4c <_Z22__fetch_global_Serial1v+0x40>)
 80a1f3e:	bd38      	pop	{r3, r4, r5, pc}
 80a1f40:	200007ac 	.word	0x200007ac
 80a1f44:	200007b0 	.word	0x200007b0
 80a1f48:	20000728 	.word	0x20000728
 80a1f4c:	20000714 	.word	0x20000714
 80a1f50:	20000320 	.word	0x20000320
 80a1f54:	080a1e85 	.word	0x080a1e85

080a1f58 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1f58:	4770      	bx	lr

080a1f5a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1f5c:	4606      	mov	r6, r0
 80a1f5e:	4615      	mov	r5, r2
 80a1f60:	460c      	mov	r4, r1
 80a1f62:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1f64:	42bc      	cmp	r4, r7
 80a1f66:	d006      	beq.n	80a1f76 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1f68:	6833      	ldr	r3, [r6, #0]
 80a1f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1f6e:	689b      	ldr	r3, [r3, #8]
 80a1f70:	4630      	mov	r0, r6
 80a1f72:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1f74:	e7f6      	b.n	80a1f64 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1f76:	4628      	mov	r0, r5
 80a1f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1f7a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1f7a:	2200      	movs	r2, #0
 80a1f7c:	7c00      	ldrb	r0, [r0, #16]
 80a1f7e:	f7ff bb9f 	b.w	80a16c0 <HAL_I2C_Write_Data>

080a1f82 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1f82:	2100      	movs	r1, #0
 80a1f84:	7c00      	ldrb	r0, [r0, #16]
 80a1f86:	f7ff bba3 	b.w	80a16d0 <HAL_I2C_Available_Data>

080a1f8a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1f8a:	2100      	movs	r1, #0
 80a1f8c:	7c00      	ldrb	r0, [r0, #16]
 80a1f8e:	f7ff bba7 	b.w	80a16e0 <HAL_I2C_Read_Data>

080a1f92 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1f92:	2100      	movs	r1, #0
 80a1f94:	7c00      	ldrb	r0, [r0, #16]
 80a1f96:	f7ff bbab 	b.w	80a16f0 <HAL_I2C_Peek_Data>

080a1f9a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1f9a:	2100      	movs	r1, #0
 80a1f9c:	7c00      	ldrb	r0, [r0, #16]
 80a1f9e:	f7ff bbaf 	b.w	80a1700 <HAL_I2C_Flush_Data>

080a1fa2 <_ZN7TwoWireD0Ev>:
 80a1fa2:	b510      	push	{r4, lr}
 80a1fa4:	4604      	mov	r4, r0
 80a1fa6:	f7fe f878 	bl	80a009a <_ZdlPv>
 80a1faa:	4620      	mov	r0, r4
 80a1fac:	bd10      	pop	{r4, pc}
	...

080a1fb0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1fb0:	b510      	push	{r4, lr}
 80a1fb2:	4604      	mov	r4, r0
 80a1fb4:	4608      	mov	r0, r1
 80a1fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1fba:	60a3      	str	r3, [r4, #8]
 80a1fbc:	4b04      	ldr	r3, [pc, #16]	; (80a1fd0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a1fbe:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1fc0:	7420      	strb	r0, [r4, #16]
 80a1fc2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1fc4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1fc6:	f7ff fbab 	bl	80a1720 <HAL_I2C_Init>

}
 80a1fca:	4620      	mov	r0, r4
 80a1fcc:	bd10      	pop	{r4, pc}
 80a1fce:	bf00      	nop
 80a1fd0:	080a2fb0 	.word	0x080a2fb0

080a1fd4 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a1fd4:	2200      	movs	r2, #0
 80a1fd6:	7c00      	ldrb	r0, [r0, #16]
 80a1fd8:	f7ff bb4a 	b.w	80a1670 <HAL_I2C_Set_Speed>

080a1fdc <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1fdc:	2300      	movs	r3, #0
 80a1fde:	461a      	mov	r2, r3
 80a1fe0:	4619      	mov	r1, r3
 80a1fe2:	7c00      	ldrb	r0, [r0, #16]
 80a1fe4:	f7ff bb4c 	b.w	80a1680 <HAL_I2C_Begin>

080a1fe8 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a1fe8:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a1fea:	2400      	movs	r4, #0
 80a1fec:	7c00      	ldrb	r0, [r0, #16]
 80a1fee:	9400      	str	r4, [sp, #0]
 80a1ff0:	f7ff fb4e 	bl	80a1690 <HAL_I2C_Request_Data>
  return result;
}
 80a1ff4:	b2c0      	uxtb	r0, r0
 80a1ff6:	b002      	add	sp, #8
 80a1ff8:	bd10      	pop	{r4, pc}

080a1ffa <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a1ffa:	2301      	movs	r3, #1
 80a1ffc:	f7ff bff4 	b.w	80a1fe8 <_ZN7TwoWire11requestFromEhhh>

080a2000 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a2000:	2301      	movs	r3, #1
 80a2002:	b2d2      	uxtb	r2, r2
 80a2004:	b2c9      	uxtb	r1, r1
 80a2006:	f7ff bfef 	b.w	80a1fe8 <_ZN7TwoWire11requestFromEhhh>

080a200a <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a200a:	2200      	movs	r2, #0
 80a200c:	7c00      	ldrb	r0, [r0, #16]
 80a200e:	f7ff bb47 	b.w	80a16a0 <HAL_I2C_Begin_Transmission>

080a2012 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a2012:	2200      	movs	r2, #0
 80a2014:	7c00      	ldrb	r0, [r0, #16]
 80a2016:	f7ff bb4b 	b.w	80a16b0 <HAL_I2C_End_Transmission>

080a201a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a201a:	2101      	movs	r1, #1
 80a201c:	f7ff bff9 	b.w	80a2012 <_ZN7TwoWire15endTransmissionEh>

080a2020 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a2020:	2100      	movs	r1, #0
 80a2022:	7c00      	ldrb	r0, [r0, #16]
 80a2024:	f7ff bb74 	b.w	80a1710 <HAL_I2C_Is_Enabled>

080a2028 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a2028:	4770      	bx	lr

080a202a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a202a:	2200      	movs	r2, #0
 80a202c:	4611      	mov	r1, r2
 80a202e:	4610      	mov	r0, r2
 80a2030:	f7ff bbf8 	b.w	80a1824 <network_ready>

080a2034 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a2034:	4803      	ldr	r0, [pc, #12]	; (80a2044 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a2036:	4b04      	ldr	r3, [pc, #16]	; (80a2048 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a2038:	4a04      	ldr	r2, [pc, #16]	; (80a204c <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a203a:	4905      	ldr	r1, [pc, #20]	; (80a2050 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a203c:	6003      	str	r3, [r0, #0]
 80a203e:	f000 b8c5 	b.w	80a21cc <__aeabi_atexit>
 80a2042:	bf00      	nop
 80a2044:	20000834 	.word	0x20000834
 80a2048:	080a2fd8 	.word	0x080a2fd8
 80a204c:	20000320 	.word	0x20000320
 80a2050:	080a2029 	.word	0x080a2029

080a2054 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2054:	b510      	push	{r4, lr}
 80a2056:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2058:	480f      	ldr	r0, [pc, #60]	; (80a2098 <pinAvailable+0x44>)
 80a205a:	f7ff fc17 	bl	80a188c <_ZN8SPIClass9isEnabledEv>
 80a205e:	b128      	cbz	r0, 80a206c <pinAvailable+0x18>
 80a2060:	f1a4 030d 	sub.w	r3, r4, #13
 80a2064:	2b02      	cmp	r3, #2
 80a2066:	d801      	bhi.n	80a206c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2068:	2000      	movs	r0, #0
 80a206a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a206c:	f000 f88e 	bl	80a218c <_Z19__fetch_global_Wirev>
 80a2070:	f7ff ffd6 	bl	80a2020 <_ZN7TwoWire9isEnabledEv>
 80a2074:	b108      	cbz	r0, 80a207a <pinAvailable+0x26>
 80a2076:	2c01      	cmp	r4, #1
 80a2078:	d9f6      	bls.n	80a2068 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a207a:	f7ff ff47 	bl	80a1f0c <_Z22__fetch_global_Serial1v>
 80a207e:	f7ff ff41 	bl	80a1f04 <_ZN11USARTSerial9isEnabledEv>
 80a2082:	b118      	cbz	r0, 80a208c <pinAvailable+0x38>
 80a2084:	f1a4 0312 	sub.w	r3, r4, #18
 80a2088:	2b01      	cmp	r3, #1
 80a208a:	d9ed      	bls.n	80a2068 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a208c:	2c17      	cmp	r4, #23
 80a208e:	bf8c      	ite	hi
 80a2090:	2000      	movhi	r0, #0
 80a2092:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2094:	bd10      	pop	{r4, pc}
 80a2096:	bf00      	nop
 80a2098:	20000838 	.word	0x20000838

080a209c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a209c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a209e:	b538      	push	{r3, r4, r5, lr}
 80a20a0:	4604      	mov	r4, r0
 80a20a2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a20a4:	d80a      	bhi.n	80a20bc <pinMode+0x20>
 80a20a6:	29ff      	cmp	r1, #255	; 0xff
 80a20a8:	d008      	beq.n	80a20bc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a20aa:	f7ff ffd3 	bl	80a2054 <pinAvailable>
 80a20ae:	b128      	cbz	r0, 80a20bc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a20b0:	4629      	mov	r1, r5
 80a20b2:	4620      	mov	r0, r4
}
 80a20b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a20b8:	f7ff ba42 	b.w	80a1540 <HAL_Pin_Mode>
 80a20bc:	bd38      	pop	{r3, r4, r5, pc}

080a20be <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a20be:	b538      	push	{r3, r4, r5, lr}
 80a20c0:	4604      	mov	r4, r0
 80a20c2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a20c4:	f7ff fa44 	bl	80a1550 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a20c8:	28ff      	cmp	r0, #255	; 0xff
 80a20ca:	d010      	beq.n	80a20ee <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a20cc:	2806      	cmp	r0, #6
 80a20ce:	d804      	bhi.n	80a20da <digitalWrite+0x1c>
 80a20d0:	234d      	movs	r3, #77	; 0x4d
 80a20d2:	fa23 f000 	lsr.w	r0, r3, r0
 80a20d6:	07c3      	lsls	r3, r0, #31
 80a20d8:	d409      	bmi.n	80a20ee <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a20da:	4620      	mov	r0, r4
 80a20dc:	f7ff ffba 	bl	80a2054 <pinAvailable>
 80a20e0:	b128      	cbz	r0, 80a20ee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a20e2:	4629      	mov	r1, r5
 80a20e4:	4620      	mov	r0, r4
}
 80a20e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a20ea:	f7ff ba39 	b.w	80a1560 <HAL_GPIO_Write>
 80a20ee:	bd38      	pop	{r3, r4, r5, pc}

080a20f0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a20f0:	b510      	push	{r4, lr}
 80a20f2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a20f4:	f7ff fa2c 	bl	80a1550 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a20f8:	3804      	subs	r0, #4
 80a20fa:	b2c0      	uxtb	r0, r0
 80a20fc:	2801      	cmp	r0, #1
 80a20fe:	d908      	bls.n	80a2112 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2100:	4620      	mov	r0, r4
 80a2102:	f7ff ffa7 	bl	80a2054 <pinAvailable>
 80a2106:	b120      	cbz	r0, 80a2112 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2108:	4620      	mov	r0, r4
}
 80a210a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a210e:	f7ff ba2f 	b.w	80a1570 <HAL_GPIO_Read>
}
 80a2112:	2000      	movs	r0, #0
 80a2114:	bd10      	pop	{r4, pc}
	...

080a2118 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2118:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a211a:	4c0c      	ldr	r4, [pc, #48]	; (80a214c <_GLOBAL__sub_I_SPI+0x34>)
 80a211c:	4e0c      	ldr	r6, [pc, #48]	; (80a2150 <_GLOBAL__sub_I_SPI+0x38>)
 80a211e:	4d0d      	ldr	r5, [pc, #52]	; (80a2154 <_GLOBAL__sub_I_SPI+0x3c>)
 80a2120:	2100      	movs	r1, #0
 80a2122:	4620      	mov	r0, r4
 80a2124:	f7ff fb9e 	bl	80a1864 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2128:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a212a:	4c0b      	ldr	r4, [pc, #44]	; (80a2158 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a212c:	4632      	mov	r2, r6
 80a212e:	4629      	mov	r1, r5
 80a2130:	f000 f84c 	bl	80a21cc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2134:	2101      	movs	r1, #1
 80a2136:	4620      	mov	r0, r4
 80a2138:	f7ff fb94 	bl	80a1864 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a213c:	4632      	mov	r2, r6
 80a213e:	4629      	mov	r1, r5
 80a2140:	4620      	mov	r0, r4
 80a2142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2146:	f000 b841 	b.w	80a21cc <__aeabi_atexit>
 80a214a:	bf00      	nop
 80a214c:	20000838 	.word	0x20000838
 80a2150:	20000320 	.word	0x20000320
 80a2154:	080a1855 	.word	0x080a1855
 80a2158:	20000848 	.word	0x20000848

080a215c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a215c:	b513      	push	{r0, r1, r4, lr}
 80a215e:	4c08      	ldr	r4, [pc, #32]	; (80a2180 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2160:	2300      	movs	r3, #0
 80a2162:	461a      	mov	r2, r3
 80a2164:	4619      	mov	r1, r3
 80a2166:	9300      	str	r3, [sp, #0]
 80a2168:	4620      	mov	r0, r4
 80a216a:	f7ff fd9d 	bl	80a1ca8 <_ZN9IPAddressC1Ehhhh>
 80a216e:	4620      	mov	r0, r4
 80a2170:	4a04      	ldr	r2, [pc, #16]	; (80a2184 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2172:	4905      	ldr	r1, [pc, #20]	; (80a2188 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2174:	b002      	add	sp, #8
 80a2176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a217a:	f000 b827 	b.w	80a21cc <__aeabi_atexit>
 80a217e:	bf00      	nop
 80a2180:	2000085c 	.word	0x2000085c
 80a2184:	20000320 	.word	0x20000320
 80a2188:	080a1c4d 	.word	0x080a1c4d

080a218c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a218c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a218e:	4d0b      	ldr	r5, [pc, #44]	; (80a21bc <_Z19__fetch_global_Wirev+0x30>)
 80a2190:	6829      	ldr	r1, [r5, #0]
 80a2192:	f011 0401 	ands.w	r4, r1, #1
 80a2196:	d10f      	bne.n	80a21b8 <_Z19__fetch_global_Wirev+0x2c>
 80a2198:	4628      	mov	r0, r5
 80a219a:	f7fd ff80 	bl	80a009e <__cxa_guard_acquire>
 80a219e:	b158      	cbz	r0, 80a21b8 <_Z19__fetch_global_Wirev+0x2c>
 80a21a0:	4621      	mov	r1, r4
 80a21a2:	4807      	ldr	r0, [pc, #28]	; (80a21c0 <_Z19__fetch_global_Wirev+0x34>)
 80a21a4:	f7ff ff04 	bl	80a1fb0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a21a8:	4628      	mov	r0, r5
 80a21aa:	f7fd ff7d 	bl	80a00a8 <__cxa_guard_release>
 80a21ae:	4a05      	ldr	r2, [pc, #20]	; (80a21c4 <_Z19__fetch_global_Wirev+0x38>)
 80a21b0:	4905      	ldr	r1, [pc, #20]	; (80a21c8 <_Z19__fetch_global_Wirev+0x3c>)
 80a21b2:	4803      	ldr	r0, [pc, #12]	; (80a21c0 <_Z19__fetch_global_Wirev+0x34>)
 80a21b4:	f000 f80a 	bl	80a21cc <__aeabi_atexit>
	return wire;
}
 80a21b8:	4801      	ldr	r0, [pc, #4]	; (80a21c0 <_Z19__fetch_global_Wirev+0x34>)
 80a21ba:	bd38      	pop	{r3, r4, r5, pc}
 80a21bc:	20000874 	.word	0x20000874
 80a21c0:	20000878 	.word	0x20000878
 80a21c4:	20000320 	.word	0x20000320
 80a21c8:	080a1f59 	.word	0x080a1f59

080a21cc <__aeabi_atexit>:
 80a21cc:	460b      	mov	r3, r1
 80a21ce:	4601      	mov	r1, r0
 80a21d0:	4618      	mov	r0, r3
 80a21d2:	f000 bd6f 	b.w	80a2cb4 <__cxa_atexit>
	...

080a21d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a21d8:	4b18      	ldr	r3, [pc, #96]	; (80a223c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a21da:	681a      	ldr	r2, [r3, #0]
 80a21dc:	07d1      	lsls	r1, r2, #31
 80a21de:	bf5c      	itt	pl
 80a21e0:	2201      	movpl	r2, #1
 80a21e2:	601a      	strpl	r2, [r3, #0]
 80a21e4:	4b16      	ldr	r3, [pc, #88]	; (80a2240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a21e6:	681a      	ldr	r2, [r3, #0]
 80a21e8:	07d2      	lsls	r2, r2, #31
 80a21ea:	bf5c      	itt	pl
 80a21ec:	2201      	movpl	r2, #1
 80a21ee:	601a      	strpl	r2, [r3, #0]
 80a21f0:	4b14      	ldr	r3, [pc, #80]	; (80a2244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a21f2:	681a      	ldr	r2, [r3, #0]
 80a21f4:	07d0      	lsls	r0, r2, #31
 80a21f6:	bf5c      	itt	pl
 80a21f8:	2201      	movpl	r2, #1
 80a21fa:	601a      	strpl	r2, [r3, #0]
 80a21fc:	4b12      	ldr	r3, [pc, #72]	; (80a2248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a21fe:	681a      	ldr	r2, [r3, #0]
 80a2200:	07d1      	lsls	r1, r2, #31
 80a2202:	bf5c      	itt	pl
 80a2204:	2201      	movpl	r2, #1
 80a2206:	601a      	strpl	r2, [r3, #0]
 80a2208:	4b10      	ldr	r3, [pc, #64]	; (80a224c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a220a:	681a      	ldr	r2, [r3, #0]
 80a220c:	07d2      	lsls	r2, r2, #31
 80a220e:	bf5c      	itt	pl
 80a2210:	2201      	movpl	r2, #1
 80a2212:	601a      	strpl	r2, [r3, #0]
 80a2214:	4b0e      	ldr	r3, [pc, #56]	; (80a2250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2216:	681a      	ldr	r2, [r3, #0]
 80a2218:	07d0      	lsls	r0, r2, #31
 80a221a:	bf5c      	itt	pl
 80a221c:	2201      	movpl	r2, #1
 80a221e:	601a      	strpl	r2, [r3, #0]
 80a2220:	4b0c      	ldr	r3, [pc, #48]	; (80a2254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2222:	681a      	ldr	r2, [r3, #0]
 80a2224:	07d1      	lsls	r1, r2, #31
 80a2226:	bf5c      	itt	pl
 80a2228:	2201      	movpl	r2, #1
 80a222a:	601a      	strpl	r2, [r3, #0]
 80a222c:	4b0a      	ldr	r3, [pc, #40]	; (80a2258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a222e:	681a      	ldr	r2, [r3, #0]
 80a2230:	07d2      	lsls	r2, r2, #31
 80a2232:	bf5c      	itt	pl
 80a2234:	2201      	movpl	r2, #1
 80a2236:	601a      	strpl	r2, [r3, #0]
 80a2238:	4770      	bx	lr
 80a223a:	bf00      	nop
 80a223c:	200008a8 	.word	0x200008a8
 80a2240:	200008a4 	.word	0x200008a4
 80a2244:	200008a0 	.word	0x200008a0
 80a2248:	2000089c 	.word	0x2000089c
 80a224c:	20000898 	.word	0x20000898
 80a2250:	20000894 	.word	0x20000894
 80a2254:	20000890 	.word	0x20000890
 80a2258:	2000088c 	.word	0x2000088c

080a225c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a225c:	4b24      	ldr	r3, [pc, #144]	; (80a22f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a225e:	681a      	ldr	r2, [r3, #0]
 80a2260:	07d0      	lsls	r0, r2, #31
 80a2262:	bf5c      	itt	pl
 80a2264:	2201      	movpl	r2, #1
 80a2266:	601a      	strpl	r2, [r3, #0]
 80a2268:	4b22      	ldr	r3, [pc, #136]	; (80a22f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a226a:	681a      	ldr	r2, [r3, #0]
 80a226c:	07d1      	lsls	r1, r2, #31
 80a226e:	bf5c      	itt	pl
 80a2270:	2201      	movpl	r2, #1
 80a2272:	601a      	strpl	r2, [r3, #0]
 80a2274:	4b20      	ldr	r3, [pc, #128]	; (80a22f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2276:	681a      	ldr	r2, [r3, #0]
 80a2278:	07d2      	lsls	r2, r2, #31
 80a227a:	bf5c      	itt	pl
 80a227c:	2201      	movpl	r2, #1
 80a227e:	601a      	strpl	r2, [r3, #0]
 80a2280:	4b1e      	ldr	r3, [pc, #120]	; (80a22fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2282:	681a      	ldr	r2, [r3, #0]
 80a2284:	07d0      	lsls	r0, r2, #31
 80a2286:	bf5c      	itt	pl
 80a2288:	2201      	movpl	r2, #1
 80a228a:	601a      	strpl	r2, [r3, #0]
 80a228c:	4b1c      	ldr	r3, [pc, #112]	; (80a2300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a228e:	681a      	ldr	r2, [r3, #0]
 80a2290:	07d1      	lsls	r1, r2, #31
 80a2292:	bf5c      	itt	pl
 80a2294:	2201      	movpl	r2, #1
 80a2296:	601a      	strpl	r2, [r3, #0]
 80a2298:	4b1a      	ldr	r3, [pc, #104]	; (80a2304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a229a:	681a      	ldr	r2, [r3, #0]
 80a229c:	07d2      	lsls	r2, r2, #31
 80a229e:	bf5c      	itt	pl
 80a22a0:	2201      	movpl	r2, #1
 80a22a2:	601a      	strpl	r2, [r3, #0]
 80a22a4:	4b18      	ldr	r3, [pc, #96]	; (80a2308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a22a6:	681a      	ldr	r2, [r3, #0]
 80a22a8:	07d0      	lsls	r0, r2, #31
 80a22aa:	bf5c      	itt	pl
 80a22ac:	2201      	movpl	r2, #1
 80a22ae:	601a      	strpl	r2, [r3, #0]
 80a22b0:	4b16      	ldr	r3, [pc, #88]	; (80a230c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a22b2:	681a      	ldr	r2, [r3, #0]
 80a22b4:	07d1      	lsls	r1, r2, #31
 80a22b6:	bf5c      	itt	pl
 80a22b8:	2201      	movpl	r2, #1
 80a22ba:	601a      	strpl	r2, [r3, #0]
 80a22bc:	4b14      	ldr	r3, [pc, #80]	; (80a2310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a22be:	681a      	ldr	r2, [r3, #0]
 80a22c0:	07d2      	lsls	r2, r2, #31
 80a22c2:	bf5c      	itt	pl
 80a22c4:	2201      	movpl	r2, #1
 80a22c6:	601a      	strpl	r2, [r3, #0]
 80a22c8:	4b12      	ldr	r3, [pc, #72]	; (80a2314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a22ca:	681a      	ldr	r2, [r3, #0]
 80a22cc:	07d0      	lsls	r0, r2, #31
 80a22ce:	bf5c      	itt	pl
 80a22d0:	2201      	movpl	r2, #1
 80a22d2:	601a      	strpl	r2, [r3, #0]
 80a22d4:	4b10      	ldr	r3, [pc, #64]	; (80a2318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a22d6:	681a      	ldr	r2, [r3, #0]
 80a22d8:	07d1      	lsls	r1, r2, #31
 80a22da:	bf5c      	itt	pl
 80a22dc:	2201      	movpl	r2, #1
 80a22de:	601a      	strpl	r2, [r3, #0]
 80a22e0:	4b0e      	ldr	r3, [pc, #56]	; (80a231c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a22e2:	681a      	ldr	r2, [r3, #0]
 80a22e4:	07d2      	lsls	r2, r2, #31
 80a22e6:	bf5c      	itt	pl
 80a22e8:	2201      	movpl	r2, #1
 80a22ea:	601a      	strpl	r2, [r3, #0]
 80a22ec:	4770      	bx	lr
 80a22ee:	bf00      	nop
 80a22f0:	200008d8 	.word	0x200008d8
 80a22f4:	200008d4 	.word	0x200008d4
 80a22f8:	200008d0 	.word	0x200008d0
 80a22fc:	200008cc 	.word	0x200008cc
 80a2300:	200008c8 	.word	0x200008c8
 80a2304:	200008c4 	.word	0x200008c4
 80a2308:	200008c0 	.word	0x200008c0
 80a230c:	200008bc 	.word	0x200008bc
 80a2310:	200008b8 	.word	0x200008b8
 80a2314:	200008b4 	.word	0x200008b4
 80a2318:	200008b0 	.word	0x200008b0
 80a231c:	200008ac 	.word	0x200008ac

080a2320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2320:	4b24      	ldr	r3, [pc, #144]	; (80a23b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2322:	681a      	ldr	r2, [r3, #0]
 80a2324:	07d0      	lsls	r0, r2, #31
 80a2326:	bf5c      	itt	pl
 80a2328:	2201      	movpl	r2, #1
 80a232a:	601a      	strpl	r2, [r3, #0]
 80a232c:	4b22      	ldr	r3, [pc, #136]	; (80a23b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a232e:	681a      	ldr	r2, [r3, #0]
 80a2330:	07d1      	lsls	r1, r2, #31
 80a2332:	bf5c      	itt	pl
 80a2334:	2201      	movpl	r2, #1
 80a2336:	601a      	strpl	r2, [r3, #0]
 80a2338:	4b20      	ldr	r3, [pc, #128]	; (80a23bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a233a:	681a      	ldr	r2, [r3, #0]
 80a233c:	07d2      	lsls	r2, r2, #31
 80a233e:	bf5c      	itt	pl
 80a2340:	2201      	movpl	r2, #1
 80a2342:	601a      	strpl	r2, [r3, #0]
 80a2344:	4b1e      	ldr	r3, [pc, #120]	; (80a23c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2346:	681a      	ldr	r2, [r3, #0]
 80a2348:	07d0      	lsls	r0, r2, #31
 80a234a:	bf5c      	itt	pl
 80a234c:	2201      	movpl	r2, #1
 80a234e:	601a      	strpl	r2, [r3, #0]
 80a2350:	4b1c      	ldr	r3, [pc, #112]	; (80a23c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2352:	681a      	ldr	r2, [r3, #0]
 80a2354:	07d1      	lsls	r1, r2, #31
 80a2356:	bf5c      	itt	pl
 80a2358:	2201      	movpl	r2, #1
 80a235a:	601a      	strpl	r2, [r3, #0]
 80a235c:	4b1a      	ldr	r3, [pc, #104]	; (80a23c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a235e:	681a      	ldr	r2, [r3, #0]
 80a2360:	07d2      	lsls	r2, r2, #31
 80a2362:	bf5c      	itt	pl
 80a2364:	2201      	movpl	r2, #1
 80a2366:	601a      	strpl	r2, [r3, #0]
 80a2368:	4b18      	ldr	r3, [pc, #96]	; (80a23cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a236a:	681a      	ldr	r2, [r3, #0]
 80a236c:	07d0      	lsls	r0, r2, #31
 80a236e:	bf5c      	itt	pl
 80a2370:	2201      	movpl	r2, #1
 80a2372:	601a      	strpl	r2, [r3, #0]
 80a2374:	4b16      	ldr	r3, [pc, #88]	; (80a23d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2376:	681a      	ldr	r2, [r3, #0]
 80a2378:	07d1      	lsls	r1, r2, #31
 80a237a:	bf5c      	itt	pl
 80a237c:	2201      	movpl	r2, #1
 80a237e:	601a      	strpl	r2, [r3, #0]
 80a2380:	4b14      	ldr	r3, [pc, #80]	; (80a23d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2382:	681a      	ldr	r2, [r3, #0]
 80a2384:	07d2      	lsls	r2, r2, #31
 80a2386:	bf5c      	itt	pl
 80a2388:	2201      	movpl	r2, #1
 80a238a:	601a      	strpl	r2, [r3, #0]
 80a238c:	4b12      	ldr	r3, [pc, #72]	; (80a23d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a238e:	681a      	ldr	r2, [r3, #0]
 80a2390:	07d0      	lsls	r0, r2, #31
 80a2392:	bf5c      	itt	pl
 80a2394:	2201      	movpl	r2, #1
 80a2396:	601a      	strpl	r2, [r3, #0]
 80a2398:	4b10      	ldr	r3, [pc, #64]	; (80a23dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a239a:	681a      	ldr	r2, [r3, #0]
 80a239c:	07d1      	lsls	r1, r2, #31
 80a239e:	bf5c      	itt	pl
 80a23a0:	2201      	movpl	r2, #1
 80a23a2:	601a      	strpl	r2, [r3, #0]
 80a23a4:	4b0e      	ldr	r3, [pc, #56]	; (80a23e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a23a6:	681a      	ldr	r2, [r3, #0]
 80a23a8:	07d2      	lsls	r2, r2, #31
 80a23aa:	bf5c      	itt	pl
 80a23ac:	2201      	movpl	r2, #1
 80a23ae:	601a      	strpl	r2, [r3, #0]
 80a23b0:	4770      	bx	lr
 80a23b2:	bf00      	nop
 80a23b4:	20000908 	.word	0x20000908
 80a23b8:	20000904 	.word	0x20000904
 80a23bc:	20000900 	.word	0x20000900
 80a23c0:	200008fc 	.word	0x200008fc
 80a23c4:	200008f8 	.word	0x200008f8
 80a23c8:	200008f4 	.word	0x200008f4
 80a23cc:	200008f0 	.word	0x200008f0
 80a23d0:	200008ec 	.word	0x200008ec
 80a23d4:	200008e8 	.word	0x200008e8
 80a23d8:	200008e4 	.word	0x200008e4
 80a23dc:	200008e0 	.word	0x200008e0
 80a23e0:	200008dc 	.word	0x200008dc

080a23e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a23e4:	4b18      	ldr	r3, [pc, #96]	; (80a2448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a23e6:	681a      	ldr	r2, [r3, #0]
 80a23e8:	07d1      	lsls	r1, r2, #31
 80a23ea:	bf5c      	itt	pl
 80a23ec:	2201      	movpl	r2, #1
 80a23ee:	601a      	strpl	r2, [r3, #0]
 80a23f0:	4b16      	ldr	r3, [pc, #88]	; (80a244c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a23f2:	681a      	ldr	r2, [r3, #0]
 80a23f4:	07d2      	lsls	r2, r2, #31
 80a23f6:	bf5c      	itt	pl
 80a23f8:	2201      	movpl	r2, #1
 80a23fa:	601a      	strpl	r2, [r3, #0]
 80a23fc:	4b14      	ldr	r3, [pc, #80]	; (80a2450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a23fe:	681a      	ldr	r2, [r3, #0]
 80a2400:	07d0      	lsls	r0, r2, #31
 80a2402:	bf5c      	itt	pl
 80a2404:	2201      	movpl	r2, #1
 80a2406:	601a      	strpl	r2, [r3, #0]
 80a2408:	4b12      	ldr	r3, [pc, #72]	; (80a2454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a240a:	681a      	ldr	r2, [r3, #0]
 80a240c:	07d1      	lsls	r1, r2, #31
 80a240e:	bf5c      	itt	pl
 80a2410:	2201      	movpl	r2, #1
 80a2412:	601a      	strpl	r2, [r3, #0]
 80a2414:	4b10      	ldr	r3, [pc, #64]	; (80a2458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2416:	681a      	ldr	r2, [r3, #0]
 80a2418:	07d2      	lsls	r2, r2, #31
 80a241a:	bf5c      	itt	pl
 80a241c:	2201      	movpl	r2, #1
 80a241e:	601a      	strpl	r2, [r3, #0]
 80a2420:	4b0e      	ldr	r3, [pc, #56]	; (80a245c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2422:	681a      	ldr	r2, [r3, #0]
 80a2424:	07d0      	lsls	r0, r2, #31
 80a2426:	bf5c      	itt	pl
 80a2428:	2201      	movpl	r2, #1
 80a242a:	601a      	strpl	r2, [r3, #0]
 80a242c:	4b0c      	ldr	r3, [pc, #48]	; (80a2460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a242e:	681a      	ldr	r2, [r3, #0]
 80a2430:	07d1      	lsls	r1, r2, #31
 80a2432:	bf5c      	itt	pl
 80a2434:	2201      	movpl	r2, #1
 80a2436:	601a      	strpl	r2, [r3, #0]
 80a2438:	4b0a      	ldr	r3, [pc, #40]	; (80a2464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a243a:	681a      	ldr	r2, [r3, #0]
 80a243c:	07d2      	lsls	r2, r2, #31
 80a243e:	bf5c      	itt	pl
 80a2440:	2201      	movpl	r2, #1
 80a2442:	601a      	strpl	r2, [r3, #0]
 80a2444:	4770      	bx	lr
 80a2446:	bf00      	nop
 80a2448:	20000928 	.word	0x20000928
 80a244c:	20000924 	.word	0x20000924
 80a2450:	20000920 	.word	0x20000920
 80a2454:	2000091c 	.word	0x2000091c
 80a2458:	20000918 	.word	0x20000918
 80a245c:	20000914 	.word	0x20000914
 80a2460:	20000910 	.word	0x20000910
 80a2464:	2000090c 	.word	0x2000090c

080a2468 <__aeabi_drsub>:
 80a2468:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a246c:	e002      	b.n	80a2474 <__adddf3>
 80a246e:	bf00      	nop

080a2470 <__aeabi_dsub>:
 80a2470:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2474 <__adddf3>:
 80a2474:	b530      	push	{r4, r5, lr}
 80a2476:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a247a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a247e:	ea94 0f05 	teq	r4, r5
 80a2482:	bf08      	it	eq
 80a2484:	ea90 0f02 	teqeq	r0, r2
 80a2488:	bf1f      	itttt	ne
 80a248a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a248e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2492:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2496:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a249a:	f000 80e2 	beq.w	80a2662 <__adddf3+0x1ee>
 80a249e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a24a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a24a6:	bfb8      	it	lt
 80a24a8:	426d      	neglt	r5, r5
 80a24aa:	dd0c      	ble.n	80a24c6 <__adddf3+0x52>
 80a24ac:	442c      	add	r4, r5
 80a24ae:	ea80 0202 	eor.w	r2, r0, r2
 80a24b2:	ea81 0303 	eor.w	r3, r1, r3
 80a24b6:	ea82 0000 	eor.w	r0, r2, r0
 80a24ba:	ea83 0101 	eor.w	r1, r3, r1
 80a24be:	ea80 0202 	eor.w	r2, r0, r2
 80a24c2:	ea81 0303 	eor.w	r3, r1, r3
 80a24c6:	2d36      	cmp	r5, #54	; 0x36
 80a24c8:	bf88      	it	hi
 80a24ca:	bd30      	pophi	{r4, r5, pc}
 80a24cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a24d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a24d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a24d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a24dc:	d002      	beq.n	80a24e4 <__adddf3+0x70>
 80a24de:	4240      	negs	r0, r0
 80a24e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a24e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a24e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a24ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a24f0:	d002      	beq.n	80a24f8 <__adddf3+0x84>
 80a24f2:	4252      	negs	r2, r2
 80a24f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a24f8:	ea94 0f05 	teq	r4, r5
 80a24fc:	f000 80a7 	beq.w	80a264e <__adddf3+0x1da>
 80a2500:	f1a4 0401 	sub.w	r4, r4, #1
 80a2504:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2508:	db0d      	blt.n	80a2526 <__adddf3+0xb2>
 80a250a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a250e:	fa22 f205 	lsr.w	r2, r2, r5
 80a2512:	1880      	adds	r0, r0, r2
 80a2514:	f141 0100 	adc.w	r1, r1, #0
 80a2518:	fa03 f20e 	lsl.w	r2, r3, lr
 80a251c:	1880      	adds	r0, r0, r2
 80a251e:	fa43 f305 	asr.w	r3, r3, r5
 80a2522:	4159      	adcs	r1, r3
 80a2524:	e00e      	b.n	80a2544 <__adddf3+0xd0>
 80a2526:	f1a5 0520 	sub.w	r5, r5, #32
 80a252a:	f10e 0e20 	add.w	lr, lr, #32
 80a252e:	2a01      	cmp	r2, #1
 80a2530:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2534:	bf28      	it	cs
 80a2536:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a253a:	fa43 f305 	asr.w	r3, r3, r5
 80a253e:	18c0      	adds	r0, r0, r3
 80a2540:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2548:	d507      	bpl.n	80a255a <__adddf3+0xe6>
 80a254a:	f04f 0e00 	mov.w	lr, #0
 80a254e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2552:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2556:	eb6e 0101 	sbc.w	r1, lr, r1
 80a255a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a255e:	d31b      	bcc.n	80a2598 <__adddf3+0x124>
 80a2560:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2564:	d30c      	bcc.n	80a2580 <__adddf3+0x10c>
 80a2566:	0849      	lsrs	r1, r1, #1
 80a2568:	ea5f 0030 	movs.w	r0, r0, rrx
 80a256c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2570:	f104 0401 	add.w	r4, r4, #1
 80a2574:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2578:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a257c:	f080 809a 	bcs.w	80a26b4 <__adddf3+0x240>
 80a2580:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2584:	bf08      	it	eq
 80a2586:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a258a:	f150 0000 	adcs.w	r0, r0, #0
 80a258e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2592:	ea41 0105 	orr.w	r1, r1, r5
 80a2596:	bd30      	pop	{r4, r5, pc}
 80a2598:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a259c:	4140      	adcs	r0, r0
 80a259e:	eb41 0101 	adc.w	r1, r1, r1
 80a25a2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a25a6:	f1a4 0401 	sub.w	r4, r4, #1
 80a25aa:	d1e9      	bne.n	80a2580 <__adddf3+0x10c>
 80a25ac:	f091 0f00 	teq	r1, #0
 80a25b0:	bf04      	itt	eq
 80a25b2:	4601      	moveq	r1, r0
 80a25b4:	2000      	moveq	r0, #0
 80a25b6:	fab1 f381 	clz	r3, r1
 80a25ba:	bf08      	it	eq
 80a25bc:	3320      	addeq	r3, #32
 80a25be:	f1a3 030b 	sub.w	r3, r3, #11
 80a25c2:	f1b3 0220 	subs.w	r2, r3, #32
 80a25c6:	da0c      	bge.n	80a25e2 <__adddf3+0x16e>
 80a25c8:	320c      	adds	r2, #12
 80a25ca:	dd08      	ble.n	80a25de <__adddf3+0x16a>
 80a25cc:	f102 0c14 	add.w	ip, r2, #20
 80a25d0:	f1c2 020c 	rsb	r2, r2, #12
 80a25d4:	fa01 f00c 	lsl.w	r0, r1, ip
 80a25d8:	fa21 f102 	lsr.w	r1, r1, r2
 80a25dc:	e00c      	b.n	80a25f8 <__adddf3+0x184>
 80a25de:	f102 0214 	add.w	r2, r2, #20
 80a25e2:	bfd8      	it	le
 80a25e4:	f1c2 0c20 	rsble	ip, r2, #32
 80a25e8:	fa01 f102 	lsl.w	r1, r1, r2
 80a25ec:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a25f0:	bfdc      	itt	le
 80a25f2:	ea41 010c 	orrle.w	r1, r1, ip
 80a25f6:	4090      	lslle	r0, r2
 80a25f8:	1ae4      	subs	r4, r4, r3
 80a25fa:	bfa2      	ittt	ge
 80a25fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2600:	4329      	orrge	r1, r5
 80a2602:	bd30      	popge	{r4, r5, pc}
 80a2604:	ea6f 0404 	mvn.w	r4, r4
 80a2608:	3c1f      	subs	r4, #31
 80a260a:	da1c      	bge.n	80a2646 <__adddf3+0x1d2>
 80a260c:	340c      	adds	r4, #12
 80a260e:	dc0e      	bgt.n	80a262e <__adddf3+0x1ba>
 80a2610:	f104 0414 	add.w	r4, r4, #20
 80a2614:	f1c4 0220 	rsb	r2, r4, #32
 80a2618:	fa20 f004 	lsr.w	r0, r0, r4
 80a261c:	fa01 f302 	lsl.w	r3, r1, r2
 80a2620:	ea40 0003 	orr.w	r0, r0, r3
 80a2624:	fa21 f304 	lsr.w	r3, r1, r4
 80a2628:	ea45 0103 	orr.w	r1, r5, r3
 80a262c:	bd30      	pop	{r4, r5, pc}
 80a262e:	f1c4 040c 	rsb	r4, r4, #12
 80a2632:	f1c4 0220 	rsb	r2, r4, #32
 80a2636:	fa20 f002 	lsr.w	r0, r0, r2
 80a263a:	fa01 f304 	lsl.w	r3, r1, r4
 80a263e:	ea40 0003 	orr.w	r0, r0, r3
 80a2642:	4629      	mov	r1, r5
 80a2644:	bd30      	pop	{r4, r5, pc}
 80a2646:	fa21 f004 	lsr.w	r0, r1, r4
 80a264a:	4629      	mov	r1, r5
 80a264c:	bd30      	pop	{r4, r5, pc}
 80a264e:	f094 0f00 	teq	r4, #0
 80a2652:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2656:	bf06      	itte	eq
 80a2658:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a265c:	3401      	addeq	r4, #1
 80a265e:	3d01      	subne	r5, #1
 80a2660:	e74e      	b.n	80a2500 <__adddf3+0x8c>
 80a2662:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2666:	bf18      	it	ne
 80a2668:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a266c:	d029      	beq.n	80a26c2 <__adddf3+0x24e>
 80a266e:	ea94 0f05 	teq	r4, r5
 80a2672:	bf08      	it	eq
 80a2674:	ea90 0f02 	teqeq	r0, r2
 80a2678:	d005      	beq.n	80a2686 <__adddf3+0x212>
 80a267a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a267e:	bf04      	itt	eq
 80a2680:	4619      	moveq	r1, r3
 80a2682:	4610      	moveq	r0, r2
 80a2684:	bd30      	pop	{r4, r5, pc}
 80a2686:	ea91 0f03 	teq	r1, r3
 80a268a:	bf1e      	ittt	ne
 80a268c:	2100      	movne	r1, #0
 80a268e:	2000      	movne	r0, #0
 80a2690:	bd30      	popne	{r4, r5, pc}
 80a2692:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2696:	d105      	bne.n	80a26a4 <__adddf3+0x230>
 80a2698:	0040      	lsls	r0, r0, #1
 80a269a:	4149      	adcs	r1, r1
 80a269c:	bf28      	it	cs
 80a269e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a26a2:	bd30      	pop	{r4, r5, pc}
 80a26a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a26a8:	bf3c      	itt	cc
 80a26aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a26ae:	bd30      	popcc	{r4, r5, pc}
 80a26b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a26b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a26b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a26bc:	f04f 0000 	mov.w	r0, #0
 80a26c0:	bd30      	pop	{r4, r5, pc}
 80a26c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a26c6:	bf1a      	itte	ne
 80a26c8:	4619      	movne	r1, r3
 80a26ca:	4610      	movne	r0, r2
 80a26cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a26d0:	bf1c      	itt	ne
 80a26d2:	460b      	movne	r3, r1
 80a26d4:	4602      	movne	r2, r0
 80a26d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a26da:	bf06      	itte	eq
 80a26dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a26e0:	ea91 0f03 	teqeq	r1, r3
 80a26e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a26e8:	bd30      	pop	{r4, r5, pc}
 80a26ea:	bf00      	nop

080a26ec <__aeabi_ui2d>:
 80a26ec:	f090 0f00 	teq	r0, #0
 80a26f0:	bf04      	itt	eq
 80a26f2:	2100      	moveq	r1, #0
 80a26f4:	4770      	bxeq	lr
 80a26f6:	b530      	push	{r4, r5, lr}
 80a26f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a26fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2700:	f04f 0500 	mov.w	r5, #0
 80a2704:	f04f 0100 	mov.w	r1, #0
 80a2708:	e750      	b.n	80a25ac <__adddf3+0x138>
 80a270a:	bf00      	nop

080a270c <__aeabi_i2d>:
 80a270c:	f090 0f00 	teq	r0, #0
 80a2710:	bf04      	itt	eq
 80a2712:	2100      	moveq	r1, #0
 80a2714:	4770      	bxeq	lr
 80a2716:	b530      	push	{r4, r5, lr}
 80a2718:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a271c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2720:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2724:	bf48      	it	mi
 80a2726:	4240      	negmi	r0, r0
 80a2728:	f04f 0100 	mov.w	r1, #0
 80a272c:	e73e      	b.n	80a25ac <__adddf3+0x138>
 80a272e:	bf00      	nop

080a2730 <__aeabi_f2d>:
 80a2730:	0042      	lsls	r2, r0, #1
 80a2732:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2736:	ea4f 0131 	mov.w	r1, r1, rrx
 80a273a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a273e:	bf1f      	itttt	ne
 80a2740:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2744:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2748:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a274c:	4770      	bxne	lr
 80a274e:	f092 0f00 	teq	r2, #0
 80a2752:	bf14      	ite	ne
 80a2754:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2758:	4770      	bxeq	lr
 80a275a:	b530      	push	{r4, r5, lr}
 80a275c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2760:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2768:	e720      	b.n	80a25ac <__adddf3+0x138>
 80a276a:	bf00      	nop

080a276c <__aeabi_ul2d>:
 80a276c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2770:	bf08      	it	eq
 80a2772:	4770      	bxeq	lr
 80a2774:	b530      	push	{r4, r5, lr}
 80a2776:	f04f 0500 	mov.w	r5, #0
 80a277a:	e00a      	b.n	80a2792 <__aeabi_l2d+0x16>

080a277c <__aeabi_l2d>:
 80a277c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2780:	bf08      	it	eq
 80a2782:	4770      	bxeq	lr
 80a2784:	b530      	push	{r4, r5, lr}
 80a2786:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a278a:	d502      	bpl.n	80a2792 <__aeabi_l2d+0x16>
 80a278c:	4240      	negs	r0, r0
 80a278e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2792:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2796:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a279a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a279e:	f43f aedc 	beq.w	80a255a <__adddf3+0xe6>
 80a27a2:	f04f 0203 	mov.w	r2, #3
 80a27a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a27aa:	bf18      	it	ne
 80a27ac:	3203      	addne	r2, #3
 80a27ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a27b2:	bf18      	it	ne
 80a27b4:	3203      	addne	r2, #3
 80a27b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a27ba:	f1c2 0320 	rsb	r3, r2, #32
 80a27be:	fa00 fc03 	lsl.w	ip, r0, r3
 80a27c2:	fa20 f002 	lsr.w	r0, r0, r2
 80a27c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80a27ca:	ea40 000e 	orr.w	r0, r0, lr
 80a27ce:	fa21 f102 	lsr.w	r1, r1, r2
 80a27d2:	4414      	add	r4, r2
 80a27d4:	e6c1      	b.n	80a255a <__adddf3+0xe6>
 80a27d6:	bf00      	nop

080a27d8 <__gedf2>:
 80a27d8:	f04f 3cff 	mov.w	ip, #4294967295
 80a27dc:	e006      	b.n	80a27ec <__cmpdf2+0x4>
 80a27de:	bf00      	nop

080a27e0 <__ledf2>:
 80a27e0:	f04f 0c01 	mov.w	ip, #1
 80a27e4:	e002      	b.n	80a27ec <__cmpdf2+0x4>
 80a27e6:	bf00      	nop

080a27e8 <__cmpdf2>:
 80a27e8:	f04f 0c01 	mov.w	ip, #1
 80a27ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a27f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a27f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a27f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a27fc:	bf18      	it	ne
 80a27fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2802:	d01b      	beq.n	80a283c <__cmpdf2+0x54>
 80a2804:	b001      	add	sp, #4
 80a2806:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a280a:	bf0c      	ite	eq
 80a280c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2810:	ea91 0f03 	teqne	r1, r3
 80a2814:	bf02      	ittt	eq
 80a2816:	ea90 0f02 	teqeq	r0, r2
 80a281a:	2000      	moveq	r0, #0
 80a281c:	4770      	bxeq	lr
 80a281e:	f110 0f00 	cmn.w	r0, #0
 80a2822:	ea91 0f03 	teq	r1, r3
 80a2826:	bf58      	it	pl
 80a2828:	4299      	cmppl	r1, r3
 80a282a:	bf08      	it	eq
 80a282c:	4290      	cmpeq	r0, r2
 80a282e:	bf2c      	ite	cs
 80a2830:	17d8      	asrcs	r0, r3, #31
 80a2832:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2836:	f040 0001 	orr.w	r0, r0, #1
 80a283a:	4770      	bx	lr
 80a283c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2840:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2844:	d102      	bne.n	80a284c <__cmpdf2+0x64>
 80a2846:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a284a:	d107      	bne.n	80a285c <__cmpdf2+0x74>
 80a284c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2850:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2854:	d1d6      	bne.n	80a2804 <__cmpdf2+0x1c>
 80a2856:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a285a:	d0d3      	beq.n	80a2804 <__cmpdf2+0x1c>
 80a285c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2860:	4770      	bx	lr
 80a2862:	bf00      	nop

080a2864 <__aeabi_cdrcmple>:
 80a2864:	4684      	mov	ip, r0
 80a2866:	4610      	mov	r0, r2
 80a2868:	4662      	mov	r2, ip
 80a286a:	468c      	mov	ip, r1
 80a286c:	4619      	mov	r1, r3
 80a286e:	4663      	mov	r3, ip
 80a2870:	e000      	b.n	80a2874 <__aeabi_cdcmpeq>
 80a2872:	bf00      	nop

080a2874 <__aeabi_cdcmpeq>:
 80a2874:	b501      	push	{r0, lr}
 80a2876:	f7ff ffb7 	bl	80a27e8 <__cmpdf2>
 80a287a:	2800      	cmp	r0, #0
 80a287c:	bf48      	it	mi
 80a287e:	f110 0f00 	cmnmi.w	r0, #0
 80a2882:	bd01      	pop	{r0, pc}

080a2884 <__aeabi_dcmpeq>:
 80a2884:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2888:	f7ff fff4 	bl	80a2874 <__aeabi_cdcmpeq>
 80a288c:	bf0c      	ite	eq
 80a288e:	2001      	moveq	r0, #1
 80a2890:	2000      	movne	r0, #0
 80a2892:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2896:	bf00      	nop

080a2898 <__aeabi_dcmplt>:
 80a2898:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a289c:	f7ff ffea 	bl	80a2874 <__aeabi_cdcmpeq>
 80a28a0:	bf34      	ite	cc
 80a28a2:	2001      	movcc	r0, #1
 80a28a4:	2000      	movcs	r0, #0
 80a28a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a28aa:	bf00      	nop

080a28ac <__aeabi_dcmple>:
 80a28ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a28b0:	f7ff ffe0 	bl	80a2874 <__aeabi_cdcmpeq>
 80a28b4:	bf94      	ite	ls
 80a28b6:	2001      	movls	r0, #1
 80a28b8:	2000      	movhi	r0, #0
 80a28ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80a28be:	bf00      	nop

080a28c0 <__aeabi_dcmpge>:
 80a28c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a28c4:	f7ff ffce 	bl	80a2864 <__aeabi_cdrcmple>
 80a28c8:	bf94      	ite	ls
 80a28ca:	2001      	movls	r0, #1
 80a28cc:	2000      	movhi	r0, #0
 80a28ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80a28d2:	bf00      	nop

080a28d4 <__aeabi_dcmpgt>:
 80a28d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a28d8:	f7ff ffc4 	bl	80a2864 <__aeabi_cdrcmple>
 80a28dc:	bf34      	ite	cc
 80a28de:	2001      	movcc	r0, #1
 80a28e0:	2000      	movcs	r0, #0
 80a28e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a28e6:	bf00      	nop

080a28e8 <__aeabi_fmul>:
 80a28e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a28ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a28f0:	bf1e      	ittt	ne
 80a28f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a28f6:	ea92 0f0c 	teqne	r2, ip
 80a28fa:	ea93 0f0c 	teqne	r3, ip
 80a28fe:	d06f      	beq.n	80a29e0 <__aeabi_fmul+0xf8>
 80a2900:	441a      	add	r2, r3
 80a2902:	ea80 0c01 	eor.w	ip, r0, r1
 80a2906:	0240      	lsls	r0, r0, #9
 80a2908:	bf18      	it	ne
 80a290a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a290e:	d01e      	beq.n	80a294e <__aeabi_fmul+0x66>
 80a2910:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2914:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2918:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a291c:	fba0 3101 	umull	r3, r1, r0, r1
 80a2920:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2924:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2928:	bf3e      	ittt	cc
 80a292a:	0049      	lslcc	r1, r1, #1
 80a292c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2930:	005b      	lslcc	r3, r3, #1
 80a2932:	ea40 0001 	orr.w	r0, r0, r1
 80a2936:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a293a:	2afd      	cmp	r2, #253	; 0xfd
 80a293c:	d81d      	bhi.n	80a297a <__aeabi_fmul+0x92>
 80a293e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2942:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2946:	bf08      	it	eq
 80a2948:	f020 0001 	biceq.w	r0, r0, #1
 80a294c:	4770      	bx	lr
 80a294e:	f090 0f00 	teq	r0, #0
 80a2952:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2956:	bf08      	it	eq
 80a2958:	0249      	lsleq	r1, r1, #9
 80a295a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a295e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a2962:	3a7f      	subs	r2, #127	; 0x7f
 80a2964:	bfc2      	ittt	gt
 80a2966:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a296a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a296e:	4770      	bxgt	lr
 80a2970:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2974:	f04f 0300 	mov.w	r3, #0
 80a2978:	3a01      	subs	r2, #1
 80a297a:	dc5d      	bgt.n	80a2a38 <__aeabi_fmul+0x150>
 80a297c:	f112 0f19 	cmn.w	r2, #25
 80a2980:	bfdc      	itt	le
 80a2982:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a2986:	4770      	bxle	lr
 80a2988:	f1c2 0200 	rsb	r2, r2, #0
 80a298c:	0041      	lsls	r1, r0, #1
 80a298e:	fa21 f102 	lsr.w	r1, r1, r2
 80a2992:	f1c2 0220 	rsb	r2, r2, #32
 80a2996:	fa00 fc02 	lsl.w	ip, r0, r2
 80a299a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a299e:	f140 0000 	adc.w	r0, r0, #0
 80a29a2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a29a6:	bf08      	it	eq
 80a29a8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a29ac:	4770      	bx	lr
 80a29ae:	f092 0f00 	teq	r2, #0
 80a29b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a29b6:	bf02      	ittt	eq
 80a29b8:	0040      	lsleq	r0, r0, #1
 80a29ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a29be:	3a01      	subeq	r2, #1
 80a29c0:	d0f9      	beq.n	80a29b6 <__aeabi_fmul+0xce>
 80a29c2:	ea40 000c 	orr.w	r0, r0, ip
 80a29c6:	f093 0f00 	teq	r3, #0
 80a29ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a29ce:	bf02      	ittt	eq
 80a29d0:	0049      	lsleq	r1, r1, #1
 80a29d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a29d6:	3b01      	subeq	r3, #1
 80a29d8:	d0f9      	beq.n	80a29ce <__aeabi_fmul+0xe6>
 80a29da:	ea41 010c 	orr.w	r1, r1, ip
 80a29de:	e78f      	b.n	80a2900 <__aeabi_fmul+0x18>
 80a29e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a29e4:	ea92 0f0c 	teq	r2, ip
 80a29e8:	bf18      	it	ne
 80a29ea:	ea93 0f0c 	teqne	r3, ip
 80a29ee:	d00a      	beq.n	80a2a06 <__aeabi_fmul+0x11e>
 80a29f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a29f4:	bf18      	it	ne
 80a29f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a29fa:	d1d8      	bne.n	80a29ae <__aeabi_fmul+0xc6>
 80a29fc:	ea80 0001 	eor.w	r0, r0, r1
 80a2a00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2a04:	4770      	bx	lr
 80a2a06:	f090 0f00 	teq	r0, #0
 80a2a0a:	bf17      	itett	ne
 80a2a0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2a10:	4608      	moveq	r0, r1
 80a2a12:	f091 0f00 	teqne	r1, #0
 80a2a16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a2a1a:	d014      	beq.n	80a2a46 <__aeabi_fmul+0x15e>
 80a2a1c:	ea92 0f0c 	teq	r2, ip
 80a2a20:	d101      	bne.n	80a2a26 <__aeabi_fmul+0x13e>
 80a2a22:	0242      	lsls	r2, r0, #9
 80a2a24:	d10f      	bne.n	80a2a46 <__aeabi_fmul+0x15e>
 80a2a26:	ea93 0f0c 	teq	r3, ip
 80a2a2a:	d103      	bne.n	80a2a34 <__aeabi_fmul+0x14c>
 80a2a2c:	024b      	lsls	r3, r1, #9
 80a2a2e:	bf18      	it	ne
 80a2a30:	4608      	movne	r0, r1
 80a2a32:	d108      	bne.n	80a2a46 <__aeabi_fmul+0x15e>
 80a2a34:	ea80 0001 	eor.w	r0, r0, r1
 80a2a38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2a3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2a40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2a44:	4770      	bx	lr
 80a2a46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2a4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a2a4e:	4770      	bx	lr

080a2a50 <__aeabi_fdiv>:
 80a2a50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2a54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2a58:	bf1e      	ittt	ne
 80a2a5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2a5e:	ea92 0f0c 	teqne	r2, ip
 80a2a62:	ea93 0f0c 	teqne	r3, ip
 80a2a66:	d069      	beq.n	80a2b3c <__aeabi_fdiv+0xec>
 80a2a68:	eba2 0203 	sub.w	r2, r2, r3
 80a2a6c:	ea80 0c01 	eor.w	ip, r0, r1
 80a2a70:	0249      	lsls	r1, r1, #9
 80a2a72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a2a76:	d037      	beq.n	80a2ae8 <__aeabi_fdiv+0x98>
 80a2a78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a2a7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a2a80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2a84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2a88:	428b      	cmp	r3, r1
 80a2a8a:	bf38      	it	cc
 80a2a8c:	005b      	lslcc	r3, r3, #1
 80a2a8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a2a92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a2a96:	428b      	cmp	r3, r1
 80a2a98:	bf24      	itt	cs
 80a2a9a:	1a5b      	subcs	r3, r3, r1
 80a2a9c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2aa0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2aa4:	bf24      	itt	cs
 80a2aa6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a2aaa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2aae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a2ab2:	bf24      	itt	cs
 80a2ab4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2ab8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2abc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a2ac0:	bf24      	itt	cs
 80a2ac2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a2ac6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2aca:	011b      	lsls	r3, r3, #4
 80a2acc:	bf18      	it	ne
 80a2ace:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a2ad2:	d1e0      	bne.n	80a2a96 <__aeabi_fdiv+0x46>
 80a2ad4:	2afd      	cmp	r2, #253	; 0xfd
 80a2ad6:	f63f af50 	bhi.w	80a297a <__aeabi_fmul+0x92>
 80a2ada:	428b      	cmp	r3, r1
 80a2adc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2ae0:	bf08      	it	eq
 80a2ae2:	f020 0001 	biceq.w	r0, r0, #1
 80a2ae6:	4770      	bx	lr
 80a2ae8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2aec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2af0:	327f      	adds	r2, #127	; 0x7f
 80a2af2:	bfc2      	ittt	gt
 80a2af4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2af8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2afc:	4770      	bxgt	lr
 80a2afe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2b02:	f04f 0300 	mov.w	r3, #0
 80a2b06:	3a01      	subs	r2, #1
 80a2b08:	e737      	b.n	80a297a <__aeabi_fmul+0x92>
 80a2b0a:	f092 0f00 	teq	r2, #0
 80a2b0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2b12:	bf02      	ittt	eq
 80a2b14:	0040      	lsleq	r0, r0, #1
 80a2b16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2b1a:	3a01      	subeq	r2, #1
 80a2b1c:	d0f9      	beq.n	80a2b12 <__aeabi_fdiv+0xc2>
 80a2b1e:	ea40 000c 	orr.w	r0, r0, ip
 80a2b22:	f093 0f00 	teq	r3, #0
 80a2b26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2b2a:	bf02      	ittt	eq
 80a2b2c:	0049      	lsleq	r1, r1, #1
 80a2b2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2b32:	3b01      	subeq	r3, #1
 80a2b34:	d0f9      	beq.n	80a2b2a <__aeabi_fdiv+0xda>
 80a2b36:	ea41 010c 	orr.w	r1, r1, ip
 80a2b3a:	e795      	b.n	80a2a68 <__aeabi_fdiv+0x18>
 80a2b3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2b40:	ea92 0f0c 	teq	r2, ip
 80a2b44:	d108      	bne.n	80a2b58 <__aeabi_fdiv+0x108>
 80a2b46:	0242      	lsls	r2, r0, #9
 80a2b48:	f47f af7d 	bne.w	80a2a46 <__aeabi_fmul+0x15e>
 80a2b4c:	ea93 0f0c 	teq	r3, ip
 80a2b50:	f47f af70 	bne.w	80a2a34 <__aeabi_fmul+0x14c>
 80a2b54:	4608      	mov	r0, r1
 80a2b56:	e776      	b.n	80a2a46 <__aeabi_fmul+0x15e>
 80a2b58:	ea93 0f0c 	teq	r3, ip
 80a2b5c:	d104      	bne.n	80a2b68 <__aeabi_fdiv+0x118>
 80a2b5e:	024b      	lsls	r3, r1, #9
 80a2b60:	f43f af4c 	beq.w	80a29fc <__aeabi_fmul+0x114>
 80a2b64:	4608      	mov	r0, r1
 80a2b66:	e76e      	b.n	80a2a46 <__aeabi_fmul+0x15e>
 80a2b68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2b6c:	bf18      	it	ne
 80a2b6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2b72:	d1ca      	bne.n	80a2b0a <__aeabi_fdiv+0xba>
 80a2b74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a2b78:	f47f af5c 	bne.w	80a2a34 <__aeabi_fmul+0x14c>
 80a2b7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a2b80:	f47f af3c 	bne.w	80a29fc <__aeabi_fmul+0x114>
 80a2b84:	e75f      	b.n	80a2a46 <__aeabi_fmul+0x15e>
 80a2b86:	bf00      	nop

080a2b88 <__gesf2>:
 80a2b88:	f04f 3cff 	mov.w	ip, #4294967295
 80a2b8c:	e006      	b.n	80a2b9c <__cmpsf2+0x4>
 80a2b8e:	bf00      	nop

080a2b90 <__lesf2>:
 80a2b90:	f04f 0c01 	mov.w	ip, #1
 80a2b94:	e002      	b.n	80a2b9c <__cmpsf2+0x4>
 80a2b96:	bf00      	nop

080a2b98 <__cmpsf2>:
 80a2b98:	f04f 0c01 	mov.w	ip, #1
 80a2b9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2ba0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2ba4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2bac:	bf18      	it	ne
 80a2bae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2bb2:	d011      	beq.n	80a2bd8 <__cmpsf2+0x40>
 80a2bb4:	b001      	add	sp, #4
 80a2bb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a2bba:	bf18      	it	ne
 80a2bbc:	ea90 0f01 	teqne	r0, r1
 80a2bc0:	bf58      	it	pl
 80a2bc2:	ebb2 0003 	subspl.w	r0, r2, r3
 80a2bc6:	bf88      	it	hi
 80a2bc8:	17c8      	asrhi	r0, r1, #31
 80a2bca:	bf38      	it	cc
 80a2bcc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a2bd0:	bf18      	it	ne
 80a2bd2:	f040 0001 	orrne.w	r0, r0, #1
 80a2bd6:	4770      	bx	lr
 80a2bd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2bdc:	d102      	bne.n	80a2be4 <__cmpsf2+0x4c>
 80a2bde:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a2be2:	d105      	bne.n	80a2bf0 <__cmpsf2+0x58>
 80a2be4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2be8:	d1e4      	bne.n	80a2bb4 <__cmpsf2+0x1c>
 80a2bea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a2bee:	d0e1      	beq.n	80a2bb4 <__cmpsf2+0x1c>
 80a2bf0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2bf4:	4770      	bx	lr
 80a2bf6:	bf00      	nop

080a2bf8 <__aeabi_cfrcmple>:
 80a2bf8:	4684      	mov	ip, r0
 80a2bfa:	4608      	mov	r0, r1
 80a2bfc:	4661      	mov	r1, ip
 80a2bfe:	e7ff      	b.n	80a2c00 <__aeabi_cfcmpeq>

080a2c00 <__aeabi_cfcmpeq>:
 80a2c00:	b50f      	push	{r0, r1, r2, r3, lr}
 80a2c02:	f7ff ffc9 	bl	80a2b98 <__cmpsf2>
 80a2c06:	2800      	cmp	r0, #0
 80a2c08:	bf48      	it	mi
 80a2c0a:	f110 0f00 	cmnmi.w	r0, #0
 80a2c0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a2c10 <__aeabi_fcmpeq>:
 80a2c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c14:	f7ff fff4 	bl	80a2c00 <__aeabi_cfcmpeq>
 80a2c18:	bf0c      	ite	eq
 80a2c1a:	2001      	moveq	r0, #1
 80a2c1c:	2000      	movne	r0, #0
 80a2c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c22:	bf00      	nop

080a2c24 <__aeabi_fcmplt>:
 80a2c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c28:	f7ff ffea 	bl	80a2c00 <__aeabi_cfcmpeq>
 80a2c2c:	bf34      	ite	cc
 80a2c2e:	2001      	movcc	r0, #1
 80a2c30:	2000      	movcs	r0, #0
 80a2c32:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c36:	bf00      	nop

080a2c38 <__aeabi_fcmple>:
 80a2c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c3c:	f7ff ffe0 	bl	80a2c00 <__aeabi_cfcmpeq>
 80a2c40:	bf94      	ite	ls
 80a2c42:	2001      	movls	r0, #1
 80a2c44:	2000      	movhi	r0, #0
 80a2c46:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c4a:	bf00      	nop

080a2c4c <__aeabi_fcmpge>:
 80a2c4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c50:	f7ff ffd2 	bl	80a2bf8 <__aeabi_cfrcmple>
 80a2c54:	bf94      	ite	ls
 80a2c56:	2001      	movls	r0, #1
 80a2c58:	2000      	movhi	r0, #0
 80a2c5a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c5e:	bf00      	nop

080a2c60 <__aeabi_fcmpgt>:
 80a2c60:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c64:	f7ff ffc8 	bl	80a2bf8 <__aeabi_cfrcmple>
 80a2c68:	bf34      	ite	cc
 80a2c6a:	2001      	movcc	r0, #1
 80a2c6c:	2000      	movcs	r0, #0
 80a2c6e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c72:	bf00      	nop

080a2c74 <__aeabi_f2uiz>:
 80a2c74:	0042      	lsls	r2, r0, #1
 80a2c76:	d20e      	bcs.n	80a2c96 <__aeabi_f2uiz+0x22>
 80a2c78:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a2c7c:	d30b      	bcc.n	80a2c96 <__aeabi_f2uiz+0x22>
 80a2c7e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a2c82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a2c86:	d409      	bmi.n	80a2c9c <__aeabi_f2uiz+0x28>
 80a2c88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a2c8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2c90:	fa23 f002 	lsr.w	r0, r3, r2
 80a2c94:	4770      	bx	lr
 80a2c96:	f04f 0000 	mov.w	r0, #0
 80a2c9a:	4770      	bx	lr
 80a2c9c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a2ca0:	d101      	bne.n	80a2ca6 <__aeabi_f2uiz+0x32>
 80a2ca2:	0242      	lsls	r2, r0, #9
 80a2ca4:	d102      	bne.n	80a2cac <__aeabi_f2uiz+0x38>
 80a2ca6:	f04f 30ff 	mov.w	r0, #4294967295
 80a2caa:	4770      	bx	lr
 80a2cac:	f04f 0000 	mov.w	r0, #0
 80a2cb0:	4770      	bx	lr
 80a2cb2:	bf00      	nop

080a2cb4 <__cxa_atexit>:
 80a2cb4:	b510      	push	{r4, lr}
 80a2cb6:	4c05      	ldr	r4, [pc, #20]	; (80a2ccc <__cxa_atexit+0x18>)
 80a2cb8:	4613      	mov	r3, r2
 80a2cba:	b12c      	cbz	r4, 80a2cc8 <__cxa_atexit+0x14>
 80a2cbc:	460a      	mov	r2, r1
 80a2cbe:	4601      	mov	r1, r0
 80a2cc0:	2002      	movs	r0, #2
 80a2cc2:	f3af 8000 	nop.w
 80a2cc6:	bd10      	pop	{r4, pc}
 80a2cc8:	4620      	mov	r0, r4
 80a2cca:	bd10      	pop	{r4, pc}
 80a2ccc:	00000000 	.word	0x00000000

080a2cd0 <memcpy>:
 80a2cd0:	b510      	push	{r4, lr}
 80a2cd2:	1e43      	subs	r3, r0, #1
 80a2cd4:	440a      	add	r2, r1
 80a2cd6:	4291      	cmp	r1, r2
 80a2cd8:	d004      	beq.n	80a2ce4 <memcpy+0x14>
 80a2cda:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2cde:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2ce2:	e7f8      	b.n	80a2cd6 <memcpy+0x6>
 80a2ce4:	bd10      	pop	{r4, pc}

080a2ce6 <memset>:
 80a2ce6:	4603      	mov	r3, r0
 80a2ce8:	4402      	add	r2, r0
 80a2cea:	4293      	cmp	r3, r2
 80a2cec:	d002      	beq.n	80a2cf4 <memset+0xe>
 80a2cee:	f803 1b01 	strb.w	r1, [r3], #1
 80a2cf2:	e7fa      	b.n	80a2cea <memset+0x4>
 80a2cf4:	4770      	bx	lr

080a2cf6 <strlen>:
 80a2cf6:	4603      	mov	r3, r0
 80a2cf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2cfc:	2a00      	cmp	r2, #0
 80a2cfe:	d1fb      	bne.n	80a2cf8 <strlen+0x2>
 80a2d00:	1a18      	subs	r0, r3, r0
 80a2d02:	3801      	subs	r0, #1
 80a2d04:	4770      	bx	lr

080a2d06 <link_code_end>:
	...

080a2d08 <dynalib_user>:
 80a2d08:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2d18:	0000 0000 6573 7574 5370 6375 6563 7373     ....setupSuccess
 80a2d28:	253d 0064 6572 6f6d 6574 7320 6174 7574     =%d.remote statu
 80a2d38:	3a73 2000 207c 7300 6e65 6f73 2072 3a30     s:. | .sensor 0:
 80a2d48:	7300 6e65 6f73 2072 3a31 7300 6e65 6f73     .sensor 1:.senso
 80a2d58:	2072 3a32 7300 6e65 6f73 2072 3a33 6600     r 2:.sensor 3:.f
 80a2d68:	6f72 746e 6c20 6665 3a74 6600 6f72 746e     ront left:.front
 80a2d78:	7220 6769 7468 003a 6162 6b63 6c20 6665      right:.back lef
 80a2d88:	3a74 6200 6361 206b 6972 6867 3a74 2500     t:.back right:.%
 80a2d98:	2c64 6425 252c 0064 6f6e 7320 6d61 6c70     d,%d,%d.no sampl
 80a2da8:	0065 5320 4e45 4f53 2052 4954 454d 554f     e. SENSOR TIMEOU
 80a2db8:	0054 0000                                   T...

080a2dbc <_ZTV9LIS3DHI2C>:
	...
 80a2dc4:	12cd 080a 12cf 080a 1323 080a 12db 080a     ........#.......
 80a2dd4:	6564 6976 6563 6e20 746f 6620 756f 646e     device not found
 80a2de4:	7200 7365 7465 6974 676e 6c20 7361 4d74     .resetting lastM
 80a2df4:	766f 6d65 6e65 2074 6e69 3174 735f 6372     ovement int1_src
 80a2e04:	303d 2578 0078 6572 6163 696c 7262 7461     =0x%x.recalibrat
 80a2e14:	6e69 0067                                   ing.

080a2e18 <_ZTV8SPIClass>:
	...
 80a2e20:	1855 080a 1857 080a 0066 6e6c 6600 006e     U...W...f.ln.fn.
 80a2e30:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
 80a2e40:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
 80a2e50:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
 80a2e60:	7465 6961 736c 3d20 0020 6162 6475 5300     etails = .baud.S
 80a2e70:	7265 6169 006c 5355 5342 7265 6169 316c     erial.USBSerial1
 80a2e80:	7400 7079 0065 6170 6172 006d 6d63 0064     .type.param.cmd.
 80a2e90:	6469 6800 646e 7300 7274 006d 6966 746c     id.hnd.strm.filt
 80a2ea0:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
 80a2eb0:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
 80a2ec0:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
 80a2ed0:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
 80a2ee0:	7061 0070 6f6e 656e 7400 6172 6563 6900     app.none.trace.i
 80a2ef0:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
 80a2f00:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
 80a2f10:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
 80a2f20:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
 80a2f30:	0065 0000                                   e...

080a2f34 <_ZTV9IPAddress>:
	...
 80a2f3c:	1c5b 080a 1c4d 080a 1c4f 080a               [...M...O...

080a2f48 <_ZTV9USBSerial>:
	...
 80a2f50:	1cc5 080a 1d09 080a 1ce3 080a 1957 080a     ............W...
 80a2f60:	1cdd 080a 1cc7 080a 1ccf 080a 1d03 080a     ................
 80a2f70:	1cd7 080a 1cc1 080a                         ........

080a2f78 <_ZTV11USARTSerial>:
	...
 80a2f80:	1e85 080a 1ea9 080a 1eb5 080a 1957 080a     ............W...
 80a2f90:	1e91 080a 1e9d 080a 1e97 080a 1ea3 080a     ................
 80a2fa0:	1e87 080a 1e8b 080a                         ........

080a2fa8 <_ZTV7TwoWire>:
	...
 80a2fb0:	1f59 080a 1fa3 080a 1f7b 080a 1f5b 080a     Y.......{...[...
 80a2fc0:	1f83 080a 1f8b 080a 1f93 080a 1f9b 080a     ................

080a2fd0 <_ZTVN5spark9WiFiClassE>:
	...
 80a2fd8:	202b 080a                                   + ..

080a2fdc <link_const_variable_data_end>:
 80a2fdc:	080a066d 	.word	0x080a066d
 80a2fe0:	080a12c9 	.word	0x080a12c9
 80a2fe4:	080a151d 	.word	0x080a151d
 80a2fe8:	080a1951 	.word	0x080a1951
 80a2fec:	080a1af1 	.word	0x080a1af1
 80a2ff0:	080a1b01 	.word	0x080a1b01
 80a2ff4:	080a2035 	.word	0x080a2035
 80a2ff8:	080a2119 	.word	0x080a2119
 80a2ffc:	080a215d 	.word	0x080a215d
 80a3000:	080a21d9 	.word	0x080a21d9
 80a3004:	080a225d 	.word	0x080a225d
 80a3008:	080a2321 	.word	0x080a2321
 80a300c:	080a23e5 	.word	0x080a23e5
