
C:/src/battlebots-sumo/v3/diagnostic/target/diagnostic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032e8  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a3300  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000028  20000300  080a3304  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000062c  20000328  20000328  00030328  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a332c  080a332c  0002332c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a3354  080a3354  00023354  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00087899  00000000  00000000  00023358  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000e21d  00000000  00000000  000aabf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000f103  00000000  00000000  000b8e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001970  00000000  00000000  000c7f11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000026f8  00000000  00000000  000c9881  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00022dd2  00000000  00000000  000cbf79  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001fade  00000000  00000000  000eed4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00084dfd  00000000  00000000  0010e829  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000a600  00000000  00000000  00193628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	a8 2f 0a 08                                         ./..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 ff9f 	bl	80a2f70 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 ffa4 	bl	80a2f86 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a3304 	.word	0x080a3304
 80a004c:	20000328 	.word	0x20000328
 80a0050:	20000328 	.word	0x20000328
 80a0054:	20000954 	.word	0x20000954
 80a0058:	20000954 	.word	0x20000954

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 ff21 	bl	80a1ea4 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a32c0 	.word	0x080a32c0
 80a0084:	080a32f4 	.word	0x080a32f4

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 ba72 	b.w	80a0570 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fa9b 	bl	80a05c8 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bec3 	b.w	80a1e20 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f001 bd1b 	b.w	80a1ad4 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00ae:	6803      	ldr	r3, [r0, #0]
 80a00b0:	4718      	bx	r3

080a00b2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a00b2:	2a01      	cmp	r2, #1
 80a00b4:	d002      	beq.n	80a00bc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80a00b6:	2a02      	cmp	r2, #2
 80a00b8:	d002      	beq.n	80a00c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80a00ba:	e004      	b.n	80a00c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00bc:	6001      	str	r1, [r0, #0]
	      break;
 80a00be:	e002      	b.n	80a00c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00c0:	680b      	ldr	r3, [r1, #0]
 80a00c2:	b100      	cbz	r0, 80a00c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80a00c4:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a00c6:	2000      	movs	r0, #0
 80a00c8:	4770      	bx	lr
	...

080a00cc <_Z5FLISRv>:
LIS3DHSample sample;
Timer accelTimer(PRINT_SAMPLE_PERIOD, getAccel);
LIS3DHI2C accel(Wire, 0, WKP);
int lastPrintSample = 0; // remove for main code**********

void FLISR() {
 80a00cc:	b508      	push	{r3, lr}
    FLflag = digitalRead(FL);
 80a00ce:	4b05      	ldr	r3, [pc, #20]	; (80a00e4 <_Z5FLISRv+0x18>)
 80a00d0:	8818      	ldrh	r0, [r3, #0]
 80a00d2:	f002 f95d 	bl	80a2390 <digitalRead>
 80a00d6:	4b04      	ldr	r3, [pc, #16]	; (80a00e8 <_Z5FLISRv+0x1c>)
 80a00d8:	3000      	adds	r0, #0
 80a00da:	bf18      	it	ne
 80a00dc:	2001      	movne	r0, #1
 80a00de:	7018      	strb	r0, [r3, #0]
 80a00e0:	bd08      	pop	{r3, pc}
 80a00e2:	bf00      	nop
 80a00e4:	2000030c 	.word	0x2000030c
 80a00e8:	20000321 	.word	0x20000321

080a00ec <_Z5FRISRv>:
}

void FRISR() {
 80a00ec:	b508      	push	{r3, lr}
    FRflag = digitalRead(FR);
 80a00ee:	4b05      	ldr	r3, [pc, #20]	; (80a0104 <_Z5FRISRv+0x18>)
 80a00f0:	8818      	ldrh	r0, [r3, #0]
 80a00f2:	f002 f94d 	bl	80a2390 <digitalRead>
 80a00f6:	4b04      	ldr	r3, [pc, #16]	; (80a0108 <_Z5FRISRv+0x1c>)
 80a00f8:	3000      	adds	r0, #0
 80a00fa:	bf18      	it	ne
 80a00fc:	2001      	movne	r0, #1
 80a00fe:	7018      	strb	r0, [r3, #0]
 80a0100:	bd08      	pop	{r3, pc}
 80a0102:	bf00      	nop
 80a0104:	20000314 	.word	0x20000314
 80a0108:	20000310 	.word	0x20000310

080a010c <_Z5BLISRv>:
}

void BLISR() {
 80a010c:	b508      	push	{r3, lr}
    BLflag = digitalRead(BL);
 80a010e:	4b05      	ldr	r3, [pc, #20]	; (80a0124 <_Z5BLISRv+0x18>)
 80a0110:	8818      	ldrh	r0, [r3, #0]
 80a0112:	f002 f93d 	bl	80a2390 <digitalRead>
 80a0116:	4b04      	ldr	r3, [pc, #16]	; (80a0128 <_Z5BLISRv+0x1c>)
 80a0118:	3000      	adds	r0, #0
 80a011a:	bf18      	it	ne
 80a011c:	2001      	movne	r0, #1
 80a011e:	7018      	strb	r0, [r3, #0]
 80a0120:	bd08      	pop	{r3, pc}
 80a0122:	bf00      	nop
 80a0124:	20000318 	.word	0x20000318
 80a0128:	20000320 	.word	0x20000320

080a012c <_Z5BRISRv>:
}

void BRISR() {
 80a012c:	b508      	push	{r3, lr}
    BRflag = digitalRead(BR);
 80a012e:	4b05      	ldr	r3, [pc, #20]	; (80a0144 <_Z5BRISRv+0x18>)
 80a0130:	8818      	ldrh	r0, [r3, #0]
 80a0132:	f002 f92d 	bl	80a2390 <digitalRead>
 80a0136:	4b04      	ldr	r3, [pc, #16]	; (80a0148 <_Z5BRISRv+0x1c>)
 80a0138:	3000      	adds	r0, #0
 80a013a:	bf18      	it	ne
 80a013c:	2001      	movne	r0, #1
 80a013e:	7018      	strb	r0, [r3, #0]
 80a0140:	bd08      	pop	{r3, pc}
 80a0142:	bf00      	nop
 80a0144:	20000300 	.word	0x20000300
 80a0148:	20000311 	.word	0x20000311

080a014c <_Z5RSISRv>:
}

void RSISR() {
 80a014c:	b508      	push	{r3, lr}
    RSflag = digitalRead(RS);
 80a014e:	4b05      	ldr	r3, [pc, #20]	; (80a0164 <_Z5RSISRv+0x18>)
 80a0150:	8818      	ldrh	r0, [r3, #0]
 80a0152:	f002 f91d 	bl	80a2390 <digitalRead>
 80a0156:	4b04      	ldr	r3, [pc, #16]	; (80a0168 <_Z5RSISRv+0x1c>)
 80a0158:	3000      	adds	r0, #0
 80a015a:	bf18      	it	ne
 80a015c:	2001      	movne	r0, #1
 80a015e:	7018      	strb	r0, [r3, #0]
 80a0160:	bd08      	pop	{r3, pc}
 80a0162:	bf00      	nop
 80a0164:	2000031c 	.word	0x2000031c
 80a0168:	2000032c 	.word	0x2000032c

080a016c <_Z8getAccelv>:
    // Write stop command
    LESC.writeMicroseconds(1500);
    RESC.writeMicroseconds(1500);
}

void getAccel() {
 80a016c:	b510      	push	{r4, lr}
  accel.getSample(sample);
 80a016e:	4c05      	ldr	r4, [pc, #20]	; (80a0184 <_Z8getAccelv+0x18>)
 80a0170:	4805      	ldr	r0, [pc, #20]	; (80a0188 <_Z8getAccelv+0x1c>)
 80a0172:	4621      	mov	r1, r4
 80a0174:	f001 fa64 	bl	80a1640 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
  curAccel = sample.x;
 80a0178:	f9b4 2000 	ldrsh.w	r2, [r4]
 80a017c:	4b03      	ldr	r3, [pc, #12]	; (80a018c <_Z8getAccelv+0x20>)
 80a017e:	601a      	str	r2, [r3, #0]
 80a0180:	bd10      	pop	{r4, pc}
 80a0182:	bf00      	nop
 80a0184:	200003c4 	.word	0x200003c4
 80a0188:	2000034c 	.word	0x2000034c
 80a018c:	20000360 	.word	0x20000360

080a0190 <_ZN5Timer7timeoutEv>:

    /*
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
 80a0190:	b510      	push	{r4, lr}
    {
		running = true;
 80a0192:	2301      	movs	r3, #1
 80a0194:	7103      	strb	r3, [r0, #4]
        if (callback)
 80a0196:	6943      	ldr	r3, [r0, #20]

    /*
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
 80a0198:	4604      	mov	r4, r0
    {
		running = true;
        if (callback)
 80a019a:	b113      	cbz	r3, 80a01a2 <_ZN5Timer7timeoutEv+0x12>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a019c:	6983      	ldr	r3, [r0, #24]
 80a019e:	300c      	adds	r0, #12
 80a01a0:	4798      	blx	r3
        {
            callback();
        }
        running = false;
 80a01a2:	2300      	movs	r3, #0
 80a01a4:	7123      	strb	r3, [r4, #4]
 80a01a6:	bd10      	pop	{r4, pc}

080a01a8 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 80a01a8:	b507      	push	{r0, r1, r2, lr}
    {
        void* timer_id = NULL;
 80a01aa:	2300      	movs	r3, #0
 80a01ac:	a902      	add	r1, sp, #8
 80a01ae:	f841 3d04 	str.w	r3, [r1, #-4]!
        if (!os_timer_get_id(timer, &timer_id)) {
 80a01b2:	f001 fb55 	bl	80a1860 <os_timer_get_id>
 80a01b6:	b920      	cbnz	r0, 80a01c2 <_ZN5Timer12invoke_timerEPv+0x1a>
            if (timer_id)
 80a01b8:	9801      	ldr	r0, [sp, #4]
 80a01ba:	b110      	cbz	r0, 80a01c2 <_ZN5Timer12invoke_timerEPv+0x1a>
                ((Timer*)timer_id)->timeout();
 80a01bc:	6803      	ldr	r3, [r0, #0]
 80a01be:	689b      	ldr	r3, [r3, #8]
 80a01c0:	4798      	blx	r3
        }
    }
 80a01c2:	b003      	add	sp, #12
 80a01c4:	f85d fb04 	ldr.w	pc, [sp], #4

080a01c8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a01c8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a01ca:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a01cc:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a01ce:	b113      	cbz	r3, 80a01d6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a01d0:	2203      	movs	r2, #3
 80a01d2:	4601      	mov	r1, r0
 80a01d4:	4798      	blx	r3
    }
 80a01d6:	4620      	mov	r0, r4
 80a01d8:	bd10      	pop	{r4, pc}

080a01da <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
 80a01da:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 80a01dc:	6880      	ldr	r0, [r0, #8]
 80a01de:	2300      	movs	r3, #0
 80a01e0:	b138      	cbz	r0, 80a01f2 <_ZN5Timer5_stopEjb+0x18>
 80a01e2:	e88d 000a 	stmia.w	sp, {r1, r3}
 80a01e6:	2102      	movs	r1, #2
 80a01e8:	f001 fb42 	bl	80a1870 <os_timer_change>
 80a01ec:	fab0 f080 	clz	r0, r0
 80a01f0:	0940      	lsrs	r0, r0, #5
    }
 80a01f2:	b003      	add	sp, #12
 80a01f4:	f85d fb04 	ldr.w	pc, [sp], #4

080a01f8 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80a01f8:	b538      	push	{r3, r4, r5, lr}
 80a01fa:	4b0e      	ldr	r3, [pc, #56]	; (80a0234 <_ZN5TimerD1Ev+0x3c>)
 80a01fc:	4604      	mov	r4, r0
 80a01fe:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle)
 80a0200:	6883      	ldr	r3, [r0, #8]
 80a0202:	b18b      	cbz	r3, 80a0228 <_ZN5TimerD1Ev+0x30>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a0204:	2200      	movs	r2, #0
 80a0206:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a020a:	f7ff ffe6 	bl	80a01da <_ZN5Timer5_stopEjb>
    void dispose()
    {
        if (handle)
        	{
        		stop();
        		while (running) {
 80a020e:	7923      	ldrb	r3, [r4, #4]
 80a0210:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a0214:	b11b      	cbz	r3, 80a021e <_ZN5TimerD1Ev+0x26>
				delay(1);
 80a0216:	2001      	movs	r0, #1
 80a0218:	f001 fdcc 	bl	80a1db4 <delay>
 80a021c:	e7f7      	b.n	80a020e <_ZN5TimerD1Ev+0x16>
			}
        		os_timer_destroy(handle, nullptr);
 80a021e:	4629      	mov	r1, r5
 80a0220:	68a0      	ldr	r0, [r4, #8]
 80a0222:	f001 fb15 	bl	80a1850 <os_timer_destroy>
            handle = nullptr;
 80a0226:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0228:	f104 000c 	add.w	r0, r4, #12
 80a022c:	f7ff ffcc 	bl	80a01c8 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80a0230:	4620      	mov	r0, r4
 80a0232:	bd38      	pop	{r3, r4, r5, pc}
 80a0234:	080a2fc4 	.word	0x080a2fc4

080a0238 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80a0238:	b510      	push	{r4, lr}
 80a023a:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80a023c:	f7ff ffdc 	bl	80a01f8 <_ZN5TimerD1Ev>
 80a0240:	4620      	mov	r0, r4
 80a0242:	f7ff ff2a 	bl	80a009a <_ZdlPv>
 80a0246:	4620      	mov	r0, r4
 80a0248:	bd10      	pop	{r4, pc}
	...

080a024c <_Z8tof_initv>:

void RSISR() {
    RSflag = digitalRead(RS);
}

void tof_init() {
 80a024c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pinMode(A0, OUTPUT);
 80a0250:	2101      	movs	r1, #1
 80a0252:	200a      	movs	r0, #10
 80a0254:	f002 f872 	bl	80a233c <pinMode>
    pinMode(A1, OUTPUT);
 80a0258:	2101      	movs	r1, #1
 80a025a:	200b      	movs	r0, #11
 80a025c:	f002 f86e 	bl	80a233c <pinMode>
    pinMode(A2, OUTPUT);
 80a0260:	2101      	movs	r1, #1
 80a0262:	200c      	movs	r0, #12
 80a0264:	f002 f86a 	bl	80a233c <pinMode>
    pinMode(A3, OUTPUT);
 80a0268:	2101      	movs	r1, #1
 80a026a:	200d      	movs	r0, #13
 80a026c:	f002 f866 	bl	80a233c <pinMode>
    digitalWrite(A0, LOW);
 80a0270:	2100      	movs	r1, #0
 80a0272:	200a      	movs	r0, #10
 80a0274:	f002 f873 	bl	80a235e <digitalWrite>
    digitalWrite(A1, LOW);
 80a0278:	2100      	movs	r1, #0
 80a027a:	200b      	movs	r0, #11
 80a027c:	f002 f86f 	bl	80a235e <digitalWrite>
    digitalWrite(A2, LOW);
 80a0280:	2100      	movs	r1, #0
 80a0282:	200c      	movs	r0, #12
 80a0284:	f002 f86b 	bl	80a235e <digitalWrite>
    digitalWrite(A3, LOW);
 80a0288:	2100      	movs	r1, #0
 80a028a:	200d      	movs	r0, #13
 80a028c:	f002 f867 	bl	80a235e <digitalWrite>
    delay(500);
 80a0290:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0294:	f001 fd8e 	bl	80a1db4 <delay>

    Wire.setSpeed(CLOCK_SPEED_100KHZ);  // need to initialize i2c protocol after driving shdn pins low
 80a0298:	f002 f8c8 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a029c:	4940      	ldr	r1, [pc, #256]	; (80a03a0 <_Z8tof_initv+0x154>)
 80a029e:	f001 ffe9 	bl	80a2274 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();
 80a02a2:	f002 f8c3 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a02a6:	f001 ffe9 	bl	80a227c <_ZN7TwoWire5beginEv>

    delay(10);
 80a02aa:	200a      	movs	r0, #10
 80a02ac:	f001 fd82 	bl	80a1db4 <delay>
    digitalWrite(A0, HIGH);
 80a02b0:	2101      	movs	r1, #1
 80a02b2:	200a      	movs	r0, #10
 80a02b4:	f002 f853 	bl	80a235e <digitalWrite>
    digitalWrite(A1, HIGH);
 80a02b8:	2101      	movs	r1, #1
 80a02ba:	200b      	movs	r0, #11
 80a02bc:	f002 f84f 	bl	80a235e <digitalWrite>
    digitalWrite(A2, HIGH);
 80a02c0:	2101      	movs	r1, #1
 80a02c2:	200c      	movs	r0, #12
 80a02c4:	f002 f84b 	bl	80a235e <digitalWrite>
    digitalWrite(A3, HIGH);
 80a02c8:	2101      	movs	r1, #1
 80a02ca:	200d      	movs	r0, #13
 80a02cc:	f002 f847 	bl	80a235e <digitalWrite>
    delay(10);
 80a02d0:	200a      	movs	r0, #10
 80a02d2:	f001 fd6f 	bl	80a1db4 <delay>
    digitalWrite(A1, LOW);
 80a02d6:	2100      	movs	r1, #0
 80a02d8:	200b      	movs	r0, #11
 80a02da:	f002 f840 	bl	80a235e <digitalWrite>
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
 80a02de:	4f31      	ldr	r7, [pc, #196]	; (80a03a4 <_Z8tof_initv+0x158>)
    digitalWrite(A1, HIGH);
    digitalWrite(A2, HIGH);
    digitalWrite(A3, HIGH);
    delay(10);
    digitalWrite(A1, LOW);
    digitalWrite(A2, LOW);
 80a02e0:	2100      	movs	r1, #0
 80a02e2:	200c      	movs	r0, #12
 80a02e4:	f002 f83b 	bl	80a235e <digitalWrite>
    digitalWrite(A3, LOW);
 80a02e8:	2100      	movs	r1, #0
 80a02ea:	200d      	movs	r0, #13
 80a02ec:	f002 f837 	bl	80a235e <digitalWrite>
    sensor0.init();
 80a02f0:	2101      	movs	r1, #1
 80a02f2:	4638      	mov	r0, r7
 80a02f4:	f000 fea2 	bl	80a103c <_ZN7VL53L0X4initEb>
    void startContinuous(uint32_t period_ms = 0);
    void stopContinuous(void);
    uint16_t readRangeContinuousMillimeters(void);
    uint16_t readRangeSingleMillimeters(void);

    inline void setTimeout(uint16_t timeout) { io_timeout = timeout; }
 80a02f8:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    sensor0.setAddress(0x30);
 80a02fc:	2130      	movs	r1, #48	; 0x30
 80a02fe:	4638      	mov	r0, r7
 80a0300:	f000 fb4b 	bl	80a099a <_ZN7VL53L0X10setAddressEh>
    sensor0.setTimeout(1000);
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
 80a0304:	4e28      	ldr	r6, [pc, #160]	; (80a03a8 <_Z8tof_initv+0x15c>)
 80a0306:	f8c7 8004 	str.w	r8, [r7, #4]
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
    sensor0.setAddress(0x30);
    sensor0.setTimeout(1000);
    delay(10);
 80a030a:	200a      	movs	r0, #10
 80a030c:	f001 fd52 	bl	80a1db4 <delay>
    digitalWrite(A1, HIGH);
 80a0310:	2101      	movs	r1, #1
 80a0312:	200b      	movs	r0, #11
 80a0314:	f002 f823 	bl	80a235e <digitalWrite>
    sensor1.init();
 80a0318:	2101      	movs	r1, #1
 80a031a:	4630      	mov	r0, r6
 80a031c:	f000 fe8e 	bl	80a103c <_ZN7VL53L0X4initEb>
    sensor1.setAddress(0x31);
 80a0320:	2131      	movs	r1, #49	; 0x31
 80a0322:	4630      	mov	r0, r6
 80a0324:	f000 fb39 	bl	80a099a <_ZN7VL53L0X10setAddressEh>
    sensor1.setTimeout(1000);
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
 80a0328:	4d20      	ldr	r5, [pc, #128]	; (80a03ac <_Z8tof_initv+0x160>)
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
    sensor1.setAddress(0x31);
    sensor1.setTimeout(1000);
    delay(10);
 80a032a:	200a      	movs	r0, #10
 80a032c:	f8c6 8004 	str.w	r8, [r6, #4]
 80a0330:	f001 fd40 	bl	80a1db4 <delay>
    digitalWrite(A2, HIGH);
 80a0334:	2101      	movs	r1, #1
 80a0336:	200c      	movs	r0, #12
 80a0338:	f002 f811 	bl	80a235e <digitalWrite>
    sensor2.init();
 80a033c:	2101      	movs	r1, #1
 80a033e:	4628      	mov	r0, r5
 80a0340:	f000 fe7c 	bl	80a103c <_ZN7VL53L0X4initEb>
    sensor2.setAddress(0x32);
 80a0344:	2132      	movs	r1, #50	; 0x32
 80a0346:	4628      	mov	r0, r5
 80a0348:	f000 fb27 	bl	80a099a <_ZN7VL53L0X10setAddressEh>
    sensor2.setTimeout(1000);
    delay(10);
    digitalWrite(A3, HIGH);
    sensor3.init();
 80a034c:	4c18      	ldr	r4, [pc, #96]	; (80a03b0 <_Z8tof_initv+0x164>)
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
    sensor2.setAddress(0x32);
    sensor2.setTimeout(1000);
    delay(10);
 80a034e:	200a      	movs	r0, #10
 80a0350:	f8c5 8004 	str.w	r8, [r5, #4]
 80a0354:	f001 fd2e 	bl	80a1db4 <delay>
    digitalWrite(A3, HIGH);
 80a0358:	2101      	movs	r1, #1
 80a035a:	200d      	movs	r0, #13
 80a035c:	f001 ffff 	bl	80a235e <digitalWrite>
    sensor3.init();
 80a0360:	2101      	movs	r1, #1
 80a0362:	4620      	mov	r0, r4
 80a0364:	f000 fe6a 	bl	80a103c <_ZN7VL53L0X4initEb>
    sensor3.setAddress(0x33);
 80a0368:	2133      	movs	r1, #51	; 0x33
 80a036a:	4620      	mov	r0, r4
 80a036c:	f000 fb15 	bl	80a099a <_ZN7VL53L0X10setAddressEh>
    sensor3.setTimeout(1000);
    delay(10);
 80a0370:	200a      	movs	r0, #10
 80a0372:	f8c4 8004 	str.w	r8, [r4, #4]
 80a0376:	f001 fd1d 	bl	80a1db4 <delay>

    // Start continuous back-to-back mode (take readings as
    // fast as possible).  To use continuous timed mode
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
 80a037a:	4638      	mov	r0, r7
 80a037c:	210a      	movs	r1, #10
 80a037e:	f000 fc2a 	bl	80a0bd6 <_ZN7VL53L0X15startContinuousEm>
    sensor1.startContinuous(10);
 80a0382:	4630      	mov	r0, r6
 80a0384:	210a      	movs	r1, #10
 80a0386:	f000 fc26 	bl	80a0bd6 <_ZN7VL53L0X15startContinuousEm>
    sensor2.startContinuous(10);
 80a038a:	4628      	mov	r0, r5
 80a038c:	210a      	movs	r1, #10
 80a038e:	f000 fc22 	bl	80a0bd6 <_ZN7VL53L0X15startContinuousEm>
    sensor3.startContinuous(10);
 80a0392:	4620      	mov	r0, r4
}
 80a0394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous(10);
    sensor1.startContinuous(10);
    sensor2.startContinuous(10);
    sensor3.startContinuous(10);
 80a0398:	210a      	movs	r1, #10
 80a039a:	f000 bc1c 	b.w	80a0bd6 <_ZN7VL53L0X15startContinuousEm>
 80a039e:	bf00      	nop
 80a03a0:	000186a0 	.word	0x000186a0
 80a03a4:	20000364 	.word	0x20000364
 80a03a8:	2000037c 	.word	0x2000037c
 80a03ac:	20000394 	.word	0x20000394
 80a03b0:	200003ac 	.word	0x200003ac

080a03b4 <_Z10accel_initv>:
}

void accel_init() {
 80a03b4:	b510      	push	{r4, lr}
 80a03b6:	b086      	sub	sp, #24
  LIS3DHConfig config;
 80a03b8:	a803      	add	r0, sp, #12
 80a03ba:	f001 f914 	bl	80a15e6 <_ZN12LIS3DHConfigC1Ev>
  config.setAccelMode(LIS3DH::RATE_100_HZ);
 80a03be:	2150      	movs	r1, #80	; 0x50
 80a03c0:	a803      	add	r0, sp, #12
 80a03c2:	f001 f91d 	bl	80a1600 <_ZN12LIS3DHConfig12setAccelModeEh>

  bool setupSuccess = accel.setup(config);
 80a03c6:	a903      	add	r1, sp, #12
 80a03c8:	480e      	ldr	r0, [pc, #56]	; (80a0404 <_Z10accel_initv+0x50>)
 80a03ca:	f001 f971 	bl	80a16b0 <_ZN6LIS3DH5setupER12LIS3DHConfig>
 80a03ce:	4604      	mov	r4, r0
  Serial.printlnf("setupSuccess=%d", setupSuccess);
 80a03d0:	f001 fe1e 	bl	80a2010 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a03d4:	4623      	mov	r3, r4
 80a03d6:	4a0c      	ldr	r2, [pc, #48]	; (80a0408 <_Z10accel_initv+0x54>)
 80a03d8:	2101      	movs	r1, #1
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a03da:	4c0c      	ldr	r4, [pc, #48]	; (80a040c <_Z10accel_initv+0x58>)
 80a03dc:	f001 fc9e 	bl	80a1d1c <_ZN5Print11printf_implEbPKcz>
 80a03e0:	2200      	movs	r2, #0
 80a03e2:	4611      	mov	r1, r2
 80a03e4:	4620      	mov	r0, r4
 80a03e6:	f7ff fef8 	bl	80a01da <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 80a03ea:	68a0      	ldr	r0, [r4, #8]
 80a03ec:	b140      	cbz	r0, 80a0400 <_Z10accel_initv+0x4c>
 80a03ee:	2300      	movs	r3, #0
 80a03f0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80a03f4:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a03f8:	4619      	mov	r1, r3
 80a03fa:	461a      	mov	r2, r3
 80a03fc:	f001 fa38 	bl	80a1870 <os_timer_change>

  accelTimer.start();
}
 80a0400:	b006      	add	sp, #24
 80a0402:	bd10      	pop	{r4, pc}
 80a0404:	2000034c 	.word	0x2000034c
 80a0408:	080a2fd0 	.word	0x080a2fd0
 80a040c:	20000330 	.word	0x20000330

080a0410 <_Z11others_initv>:

void others_init() {
 80a0410:	b508      	push	{r3, lr}
  // Line sensors
  pinMode(FL, INPUT);
 80a0412:	4b15      	ldr	r3, [pc, #84]	; (80a0468 <_Z11others_initv+0x58>)
 80a0414:	2100      	movs	r1, #0
 80a0416:	8818      	ldrh	r0, [r3, #0]
 80a0418:	f001 ff90 	bl	80a233c <pinMode>
  pinMode(FR, INPUT);
 80a041c:	4b13      	ldr	r3, [pc, #76]	; (80a046c <_Z11others_initv+0x5c>)
 80a041e:	2100      	movs	r1, #0
 80a0420:	8818      	ldrh	r0, [r3, #0]
 80a0422:	f001 ff8b 	bl	80a233c <pinMode>
  pinMode(BL, INPUT);
 80a0426:	4b12      	ldr	r3, [pc, #72]	; (80a0470 <_Z11others_initv+0x60>)
 80a0428:	2100      	movs	r1, #0
 80a042a:	8818      	ldrh	r0, [r3, #0]
 80a042c:	f001 ff86 	bl	80a233c <pinMode>
  pinMode(BR, INPUT);
 80a0430:	4b10      	ldr	r3, [pc, #64]	; (80a0474 <_Z11others_initv+0x64>)
 80a0432:	2100      	movs	r1, #0
 80a0434:	8818      	ldrh	r0, [r3, #0]
 80a0436:	f001 ff81 	bl	80a233c <pinMode>
  // Remote switch
  pinMode(RS, INPUT);
 80a043a:	4b0f      	ldr	r3, [pc, #60]	; (80a0478 <_Z11others_initv+0x68>)
 80a043c:	2100      	movs	r1, #0
 80a043e:	8818      	ldrh	r0, [r3, #0]
 80a0440:	f001 ff7c 	bl	80a233c <pinMode>
  // Car ESCs
  pinMode(Lmotor, OUTPUT);
 80a0444:	4b0d      	ldr	r3, [pc, #52]	; (80a047c <_Z11others_initv+0x6c>)
 80a0446:	2101      	movs	r1, #1
 80a0448:	8818      	ldrh	r0, [r3, #0]
 80a044a:	f001 ff77 	bl	80a233c <pinMode>
  pinMode(Rmotor, OUTPUT);
 80a044e:	4b0c      	ldr	r3, [pc, #48]	; (80a0480 <_Z11others_initv+0x70>)
 80a0450:	2101      	movs	r1, #1
 80a0452:	8818      	ldrh	r0, [r3, #0]
 80a0454:	f001 ff72 	bl	80a233c <pinMode>
  // Serial monitor
  Serial.begin(9600);
 80a0458:	f001 fdda 	bl	80a2010 <_Z16_fetch_usbserialv>
} 
 80a045c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(RS, INPUT);
  // Car ESCs
  pinMode(Lmotor, OUTPUT);
  pinMode(Rmotor, OUTPUT);
  // Serial monitor
  Serial.begin(9600);
 80a0460:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0464:	f001 bdba 	b.w	80a1fdc <_ZN9USBSerial5beginEl>
 80a0468:	2000030c 	.word	0x2000030c
 80a046c:	20000314 	.word	0x20000314
 80a0470:	20000318 	.word	0x20000318
 80a0474:	20000300 	.word	0x20000300
 80a0478:	2000031c 	.word	0x2000031c
 80a047c:	20000308 	.word	0x20000308
 80a0480:	20000304 	.word	0x20000304

080a0484 <_Z14interrupt_initv>:
} 

void interrupt_init() {
 80a0484:	b513      	push	{r0, r1, r4, lr}
  // Line sensors
  attachInterrupt(FL,FLISR,CHANGE);
 80a0486:	4b18      	ldr	r3, [pc, #96]	; (80a04e8 <_Z14interrupt_initv+0x64>)
 80a0488:	2400      	movs	r4, #0
 80a048a:	8818      	ldrh	r0, [r3, #0]
 80a048c:	4622      	mov	r2, r4
 80a048e:	9400      	str	r4, [sp, #0]
 80a0490:	f04f 33ff 	mov.w	r3, #4294967295
 80a0494:	4915      	ldr	r1, [pc, #84]	; (80a04ec <_Z14interrupt_initv+0x68>)
 80a0496:	f001 fe1f 	bl	80a20d8 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(FR,FRISR,CHANGE);
 80a049a:	4b15      	ldr	r3, [pc, #84]	; (80a04f0 <_Z14interrupt_initv+0x6c>)
 80a049c:	4622      	mov	r2, r4
 80a049e:	8818      	ldrh	r0, [r3, #0]
 80a04a0:	4914      	ldr	r1, [pc, #80]	; (80a04f4 <_Z14interrupt_initv+0x70>)
 80a04a2:	9400      	str	r4, [sp, #0]
 80a04a4:	f04f 33ff 	mov.w	r3, #4294967295
 80a04a8:	f001 fe16 	bl	80a20d8 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(BL,BLISR,CHANGE);
 80a04ac:	4b12      	ldr	r3, [pc, #72]	; (80a04f8 <_Z14interrupt_initv+0x74>)
 80a04ae:	4622      	mov	r2, r4
 80a04b0:	8818      	ldrh	r0, [r3, #0]
 80a04b2:	4912      	ldr	r1, [pc, #72]	; (80a04fc <_Z14interrupt_initv+0x78>)
 80a04b4:	9400      	str	r4, [sp, #0]
 80a04b6:	f04f 33ff 	mov.w	r3, #4294967295
 80a04ba:	f001 fe0d 	bl	80a20d8 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(BR,BRISR,CHANGE);
 80a04be:	4b10      	ldr	r3, [pc, #64]	; (80a0500 <_Z14interrupt_initv+0x7c>)
 80a04c0:	4622      	mov	r2, r4
 80a04c2:	8818      	ldrh	r0, [r3, #0]
 80a04c4:	490f      	ldr	r1, [pc, #60]	; (80a0504 <_Z14interrupt_initv+0x80>)
 80a04c6:	9400      	str	r4, [sp, #0]
 80a04c8:	f04f 33ff 	mov.w	r3, #4294967295
 80a04cc:	f001 fe04 	bl	80a20d8 <_Z15attachInterrupttPFvvE13InterruptModeah>
  // Remote switch
  attachInterrupt(RS,RSISR,CHANGE);
 80a04d0:	4b0d      	ldr	r3, [pc, #52]	; (80a0508 <_Z14interrupt_initv+0x84>)
 80a04d2:	4622      	mov	r2, r4
 80a04d4:	8818      	ldrh	r0, [r3, #0]
 80a04d6:	490d      	ldr	r1, [pc, #52]	; (80a050c <_Z14interrupt_initv+0x88>)
 80a04d8:	9400      	str	r4, [sp, #0]
 80a04da:	f04f 33ff 	mov.w	r3, #4294967295
 80a04de:	f001 fdfb 	bl	80a20d8 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
 80a04e2:	b002      	add	sp, #8
 80a04e4:	bd10      	pop	{r4, pc}
 80a04e6:	bf00      	nop
 80a04e8:	2000030c 	.word	0x2000030c
 80a04ec:	080a00cd 	.word	0x080a00cd
 80a04f0:	20000314 	.word	0x20000314
 80a04f4:	080a00ed 	.word	0x080a00ed
 80a04f8:	20000318 	.word	0x20000318
 80a04fc:	080a010d 	.word	0x080a010d
 80a0500:	20000300 	.word	0x20000300
 80a0504:	080a012d 	.word	0x080a012d
 80a0508:	2000031c 	.word	0x2000031c
 80a050c:	080a014d 	.word	0x080a014d

080a0510 <_Z8ESC_initv>:

void ESC_init() {
 80a0510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // Necessary for Servo objects
    LESC.attach(Lmotor);
 80a0512:	4b13      	ldr	r3, [pc, #76]	; (80a0560 <_Z8ESC_initv+0x50>)
 80a0514:	4d13      	ldr	r5, [pc, #76]	; (80a0564 <_Z8ESC_initv+0x54>)
 80a0516:	2600      	movs	r6, #0
 80a0518:	27b4      	movs	r7, #180	; 0xb4
 80a051a:	8819      	ldrh	r1, [r3, #0]
 80a051c:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a0520:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80a0524:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a0528:	4628      	mov	r0, r5
 80a052a:	f001 fb36 	bl	80a1b9a <_ZN5Servo6attachEtttss>
    RESC.attach(Rmotor);
 80a052e:	4c0e      	ldr	r4, [pc, #56]	; (80a0568 <_Z8ESC_initv+0x58>)
 80a0530:	4b0e      	ldr	r3, [pc, #56]	; (80a056c <_Z8ESC_initv+0x5c>)
 80a0532:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a0536:	8819      	ldrh	r1, [r3, #0]
 80a0538:	4620      	mov	r0, r4
 80a053a:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a053e:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80a0542:	f001 fb2a 	bl	80a1b9a <_ZN5Servo6attachEtttss>
    // Write stop command
    LESC.writeMicroseconds(1500);
 80a0546:	4628      	mov	r0, r5
 80a0548:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a054c:	f001 faf1 	bl	80a1b32 <_ZN5Servo17writeMicrosecondsEt>
    RESC.writeMicroseconds(1500);
 80a0550:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a0554:	4620      	mov	r0, r4
}
 80a0556:	b003      	add	sp, #12
 80a0558:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  // Necessary for Servo objects
    LESC.attach(Lmotor);
    RESC.attach(Rmotor);
    // Write stop command
    LESC.writeMicroseconds(1500);
    RESC.writeMicroseconds(1500);
 80a055c:	f001 bae9 	b.w	80a1b32 <_ZN5Servo17writeMicrosecondsEt>
 80a0560:	20000308 	.word	0x20000308
 80a0564:	200003d0 	.word	0x200003d0
 80a0568:	200003e0 	.word	0x200003e0
 80a056c:	20000304 	.word	0x20000304

080a0570 <setup>:
  accel.getSample(sample);
  curAccel = sample.x;
}

void setup()
{
 80a0570:	b510      	push	{r4, lr}
  others_init();
 80a0572:	f7ff ff4d 	bl	80a0410 <_Z11others_initv>
  tof_init();
 80a0576:	f7ff fe69 	bl	80a024c <_Z8tof_initv>
  accel_init();
 80a057a:	f7ff ff1b 	bl	80a03b4 <_Z10accel_initv>
  interrupt_init();
 80a057e:	f7ff ff81 	bl	80a0484 <_Z14interrupt_initv>
  ESC_init();
 80a0582:	f7ff ffc5 	bl	80a0510 <_Z8ESC_initv>

  while(!RSflag) {  // initial LOW
 80a0586:	4c0c      	ldr	r4, [pc, #48]	; (80a05b8 <setup+0x48>)
 80a0588:	7823      	ldrb	r3, [r4, #0]
 80a058a:	b92b      	cbnz	r3, 80a0598 <setup+0x28>
    Serial.println("Waiting for Start");
 80a058c:	f001 fd40 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a0590:	490a      	ldr	r1, [pc, #40]	; (80a05bc <setup+0x4c>)
 80a0592:	f001 fb69 	bl	80a1c68 <_ZN5Print7printlnEPKc>
  tof_init();
  accel_init();
  interrupt_init();
  ESC_init();

  while(!RSflag) {  // initial LOW
 80a0596:	e7f7      	b.n	80a0588 <setup+0x18>
    Serial.println("Waiting for Start");
  }
  Serial.println("Starting in 5 seconds...");
 80a0598:	f001 fd3a 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a059c:	4908      	ldr	r1, [pc, #32]	; (80a05c0 <setup+0x50>)
 80a059e:	f001 fb63 	bl	80a1c68 <_ZN5Print7printlnEPKc>
  delay(5000);
 80a05a2:	f241 3088 	movw	r0, #5000	; 0x1388
 80a05a6:	f001 fc05 	bl	80a1db4 <delay>
  Serial.println("GO!");
 80a05aa:	f001 fd31 	bl	80a2010 <_Z16_fetch_usbserialv>
}
 80a05ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  while(!RSflag) {  // initial LOW
    Serial.println("Waiting for Start");
  }
  Serial.println("Starting in 5 seconds...");
  delay(5000);
  Serial.println("GO!");
 80a05b2:	4904      	ldr	r1, [pc, #16]	; (80a05c4 <setup+0x54>)
 80a05b4:	f001 bb58 	b.w	80a1c68 <_ZN5Print7printlnEPKc>
 80a05b8:	2000032c 	.word	0x2000032c
 80a05bc:	080a2fe0 	.word	0x080a2fe0
 80a05c0:	080a2ff2 	.word	0x080a2ff2
 80a05c4:	080a300b 	.word	0x080a300b

080a05c8 <loop>:
}

void loop()
{
 80a05c8:	b530      	push	{r4, r5, lr}
  Serial.print("remote status:");
  Serial.print(RSflag);
 80a05ca:	4c85      	ldr	r4, [pc, #532]	; (80a07e0 <loop+0x218>)
  delay(5000);
  Serial.println("GO!");
}

void loop()
{
 80a05cc:	b085      	sub	sp, #20
  Serial.print("remote status:");
 80a05ce:	f001 fd1f 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a05d2:	4984      	ldr	r1, [pc, #528]	; (80a07e4 <loop+0x21c>)
 80a05d4:	f001 fb35 	bl	80a1c42 <_ZN5Print5printEPKc>
  Serial.print(RSflag);
 80a05d8:	f001 fd1a 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a05dc:	220a      	movs	r2, #10
 80a05de:	7821      	ldrb	r1, [r4, #0]
 80a05e0:	f001 fb9a 	bl	80a1d18 <_ZN5Print5printEii>
  Serial.print(" | ");
 80a05e4:	f001 fd14 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a05e8:	497f      	ldr	r1, [pc, #508]	; (80a07e8 <loop+0x220>)
 80a05ea:	f001 fb2a 	bl	80a1c42 <_ZN5Print5printEPKc>

  Serial.print("sensor 0:");
 80a05ee:	f001 fd0f 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a05f2:	497e      	ldr	r1, [pc, #504]	; (80a07ec <loop+0x224>)
 80a05f4:	f001 fb25 	bl	80a1c42 <_ZN5Print5printEPKc>
  Serial.print(sensor0.readRangeContinuousMillimeters());
 80a05f8:	f001 fd0a 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a05fc:	4605      	mov	r5, r0
 80a05fe:	487c      	ldr	r0, [pc, #496]	; (80a07f0 <loop+0x228>)
 80a0600:	f000 fb24 	bl	80a0c4c <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a0604:	220a      	movs	r2, #10
 80a0606:	4601      	mov	r1, r0
 80a0608:	4628      	mov	r0, r5
 80a060a:	f001 fb85 	bl	80a1d18 <_ZN5Print5printEii>
  Serial.print(" | ");
 80a060e:	f001 fcff 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a0612:	4975      	ldr	r1, [pc, #468]	; (80a07e8 <loop+0x220>)
 80a0614:	f001 fb15 	bl	80a1c42 <_ZN5Print5printEPKc>
  Serial.print("sensor 1:");
 80a0618:	f001 fcfa 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a061c:	4975      	ldr	r1, [pc, #468]	; (80a07f4 <loop+0x22c>)
 80a061e:	f001 fb10 	bl	80a1c42 <_ZN5Print5printEPKc>
  Serial.print(sensor1.readRangeContinuousMillimeters());
 80a0622:	f001 fcf5 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a0626:	4605      	mov	r5, r0
 80a0628:	4873      	ldr	r0, [pc, #460]	; (80a07f8 <loop+0x230>)
 80a062a:	f000 fb0f 	bl	80a0c4c <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a062e:	220a      	movs	r2, #10
 80a0630:	4601      	mov	r1, r0
 80a0632:	4628      	mov	r0, r5
 80a0634:	f001 fb70 	bl	80a1d18 <_ZN5Print5printEii>
  Serial.print(" | ");
 80a0638:	f001 fcea 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a063c:	496a      	ldr	r1, [pc, #424]	; (80a07e8 <loop+0x220>)
 80a063e:	f001 fb00 	bl	80a1c42 <_ZN5Print5printEPKc>
  Serial.print("sensor 2:");
 80a0642:	f001 fce5 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a0646:	496d      	ldr	r1, [pc, #436]	; (80a07fc <loop+0x234>)
 80a0648:	f001 fafb 	bl	80a1c42 <_ZN5Print5printEPKc>
  Serial.print(sensor2.readRangeContinuousMillimeters());
 80a064c:	f001 fce0 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a0650:	4605      	mov	r5, r0
 80a0652:	486b      	ldr	r0, [pc, #428]	; (80a0800 <loop+0x238>)
 80a0654:	f000 fafa 	bl	80a0c4c <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a0658:	220a      	movs	r2, #10
 80a065a:	4601      	mov	r1, r0
 80a065c:	4628      	mov	r0, r5
 80a065e:	f001 fb5b 	bl	80a1d18 <_ZN5Print5printEii>
  Serial.print(" | ");
 80a0662:	f001 fcd5 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a0666:	4960      	ldr	r1, [pc, #384]	; (80a07e8 <loop+0x220>)
 80a0668:	f001 faeb 	bl	80a1c42 <_ZN5Print5printEPKc>
  Serial.print("sensor 3:");
 80a066c:	f001 fcd0 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a0670:	4964      	ldr	r1, [pc, #400]	; (80a0804 <loop+0x23c>)
 80a0672:	f001 fae6 	bl	80a1c42 <_ZN5Print5printEPKc>
  Serial.print(sensor3.readRangeContinuousMillimeters());
 80a0676:	f001 fccb 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a067a:	4605      	mov	r5, r0
 80a067c:	4862      	ldr	r0, [pc, #392]	; (80a0808 <loop+0x240>)
 80a067e:	f000 fae5 	bl	80a0c4c <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a0682:	220a      	movs	r2, #10
 80a0684:	4601      	mov	r1, r0
 80a0686:	4628      	mov	r0, r5
 80a0688:	f001 fb46 	bl	80a1d18 <_ZN5Print5printEii>
  if (sensor0.timeoutOccurred() || sensor1.timeoutOccurred() || sensor2.timeoutOccurred() || sensor3.timeoutOccurred()) { Serial.print(" SENSOR TIMEOUT"); }
 80a068c:	4858      	ldr	r0, [pc, #352]	; (80a07f0 <loop+0x228>)
 80a068e:	f000 fb03 	bl	80a0c98 <_ZN7VL53L0X15timeoutOccurredEv>
 80a0692:	4625      	mov	r5, r4
 80a0694:	2800      	cmp	r0, #0
 80a0696:	f040 809b 	bne.w	80a07d0 <loop+0x208>
 80a069a:	4857      	ldr	r0, [pc, #348]	; (80a07f8 <loop+0x230>)
 80a069c:	f000 fafc 	bl	80a0c98 <_ZN7VL53L0X15timeoutOccurredEv>
 80a06a0:	2800      	cmp	r0, #0
 80a06a2:	f040 8095 	bne.w	80a07d0 <loop+0x208>
 80a06a6:	4856      	ldr	r0, [pc, #344]	; (80a0800 <loop+0x238>)
 80a06a8:	f000 faf6 	bl	80a0c98 <_ZN7VL53L0X15timeoutOccurredEv>
 80a06ac:	2800      	cmp	r0, #0
 80a06ae:	f040 808f 	bne.w	80a07d0 <loop+0x208>
 80a06b2:	4855      	ldr	r0, [pc, #340]	; (80a0808 <loop+0x240>)
 80a06b4:	f000 faf0 	bl	80a0c98 <_ZN7VL53L0X15timeoutOccurredEv>
 80a06b8:	2800      	cmp	r0, #0
 80a06ba:	f040 8089 	bne.w	80a07d0 <loop+0x208>

  Serial.print(" | ");
 80a06be:	f001 fca7 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a06c2:	4949      	ldr	r1, [pc, #292]	; (80a07e8 <loop+0x220>)
 80a06c4:	f001 fabd 	bl	80a1c42 <_ZN5Print5printEPKc>
  Serial.print("front left:");
 80a06c8:	f001 fca2 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a06cc:	494f      	ldr	r1, [pc, #316]	; (80a080c <loop+0x244>)
 80a06ce:	f001 fab8 	bl	80a1c42 <_ZN5Print5printEPKc>
  Serial.print(FLflag);
 80a06d2:	f001 fc9d 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a06d6:	4b4e      	ldr	r3, [pc, #312]	; (80a0810 <loop+0x248>)
 80a06d8:	220a      	movs	r2, #10
 80a06da:	7819      	ldrb	r1, [r3, #0]
 80a06dc:	f001 fb1c 	bl	80a1d18 <_ZN5Print5printEii>

  Serial.print(" | ");
 80a06e0:	f001 fc96 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a06e4:	4940      	ldr	r1, [pc, #256]	; (80a07e8 <loop+0x220>)
 80a06e6:	f001 faac 	bl	80a1c42 <_ZN5Print5printEPKc>
  Serial.print("front right:");
 80a06ea:	f001 fc91 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a06ee:	4949      	ldr	r1, [pc, #292]	; (80a0814 <loop+0x24c>)
 80a06f0:	f001 faa7 	bl	80a1c42 <_ZN5Print5printEPKc>
  Serial.print(FRflag);
 80a06f4:	f001 fc8c 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a06f8:	4b47      	ldr	r3, [pc, #284]	; (80a0818 <loop+0x250>)
 80a06fa:	220a      	movs	r2, #10
 80a06fc:	7819      	ldrb	r1, [r3, #0]
 80a06fe:	f001 fb0b 	bl	80a1d18 <_ZN5Print5printEii>

  Serial.print(" | ");
 80a0702:	f001 fc85 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a0706:	4938      	ldr	r1, [pc, #224]	; (80a07e8 <loop+0x220>)
 80a0708:	f001 fa9b 	bl	80a1c42 <_ZN5Print5printEPKc>
  Serial.print("back left:");
 80a070c:	f001 fc80 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a0710:	4942      	ldr	r1, [pc, #264]	; (80a081c <loop+0x254>)
 80a0712:	f001 fa96 	bl	80a1c42 <_ZN5Print5printEPKc>
  Serial.print(BLflag);
 80a0716:	f001 fc7b 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a071a:	4b41      	ldr	r3, [pc, #260]	; (80a0820 <loop+0x258>)
 80a071c:	220a      	movs	r2, #10
 80a071e:	7819      	ldrb	r1, [r3, #0]
 80a0720:	f001 fafa 	bl	80a1d18 <_ZN5Print5printEii>

  Serial.print(" | ");
 80a0724:	f001 fc74 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a0728:	492f      	ldr	r1, [pc, #188]	; (80a07e8 <loop+0x220>)
 80a072a:	f001 fa8a 	bl	80a1c42 <_ZN5Print5printEPKc>
  Serial.print("back right:");
 80a072e:	f001 fc6f 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a0732:	493c      	ldr	r1, [pc, #240]	; (80a0824 <loop+0x25c>)
 80a0734:	f001 fa85 	bl	80a1c42 <_ZN5Print5printEPKc>
  Serial.print(BRflag);
 80a0738:	f001 fc6a 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a073c:	4b3a      	ldr	r3, [pc, #232]	; (80a0828 <loop+0x260>)
 80a073e:	220a      	movs	r2, #10
 80a0740:	7819      	ldrb	r1, [r3, #0]
 80a0742:	f001 fae9 	bl	80a1d18 <_ZN5Print5printEii>

  Serial.print(" | ");
 80a0746:	f001 fc63 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a074a:	4927      	ldr	r1, [pc, #156]	; (80a07e8 <loop+0x220>)
 80a074c:	f001 fa79 	bl	80a1c42 <_ZN5Print5printEPKc>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0750:	f001 f86e 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD) {
 80a0754:	4c35      	ldr	r4, [pc, #212]	; (80a082c <loop+0x264>)
 80a0756:	6823      	ldr	r3, [r4, #0]
 80a0758:	1ac0      	subs	r0, r0, r3
 80a075a:	2863      	cmp	r0, #99	; 0x63
 80a075c:	d91b      	bls.n	80a0796 <loop+0x1ce>
 80a075e:	f001 f867 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
    lastPrintSample = millis();

    LIS3DHSample sample;
    if (accel.getSample(sample)) {
 80a0762:	a902      	add	r1, sp, #8
  Serial.print("back right:");
  Serial.print(BRflag);

  Serial.print(" | ");
  if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD) {
    lastPrintSample = millis();
 80a0764:	6020      	str	r0, [r4, #0]

    LIS3DHSample sample;
    if (accel.getSample(sample)) {
 80a0766:	4832      	ldr	r0, [pc, #200]	; (80a0830 <loop+0x268>)
 80a0768:	f000 ff6a 	bl	80a1640 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
 80a076c:	b170      	cbz	r0, 80a078c <loop+0x1c4>
      Serial.printlnf("%d,%d,%d", sample.x, sample.y, sample.z);
 80a076e:	f001 fc4f 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a0772:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80a0776:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80a077a:	9201      	str	r2, [sp, #4]
 80a077c:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80a0780:	2101      	movs	r1, #1
 80a0782:	9200      	str	r2, [sp, #0]
 80a0784:	4a2b      	ldr	r2, [pc, #172]	; (80a0834 <loop+0x26c>)
 80a0786:	f001 fac9 	bl	80a1d1c <_ZN5Print11printf_implEbPKcz>
 80a078a:	e004      	b.n	80a0796 <loop+0x1ce>
    }
    else {
      Serial.println("no sample");
 80a078c:	f001 fc40 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a0790:	4929      	ldr	r1, [pc, #164]	; (80a0838 <loop+0x270>)
 80a0792:	f001 fa69 	bl	80a1c68 <_ZN5Print7printlnEPKc>
    }
  }
  // printing just x to confirm functionality of software timer
  Serial.print(" | ");
 80a0796:	f001 fc3b 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a079a:	4913      	ldr	r1, [pc, #76]	; (80a07e8 <loop+0x220>)
 80a079c:	f001 fa51 	bl	80a1c42 <_ZN5Print5printEPKc>
  Serial.print(curAccel);
 80a07a0:	f001 fc36 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a07a4:	4b25      	ldr	r3, [pc, #148]	; (80a083c <loop+0x274>)
 80a07a6:	220a      	movs	r2, #10
 80a07a8:	6819      	ldr	r1, [r3, #0]
 80a07aa:	f001 fab5 	bl	80a1d18 <_ZN5Print5printEii>

  Serial.println();
 80a07ae:	f001 fc2f 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a07b2:	f001 fa4d 	bl	80a1c50 <_ZN5Print7printlnEv>

  if(RSflag == LOW) {
 80a07b6:	782b      	ldrb	r3, [r5, #0]
 80a07b8:	b183      	cbz	r3, 80a07dc <loop+0x214>
    // LESC.writeMicroseconds(1700);
    // RESC.writeMicroseconds(1700);
  } else {
    LESC.writeMicroseconds(1500);
 80a07ba:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a07be:	4820      	ldr	r0, [pc, #128]	; (80a0840 <loop+0x278>)
 80a07c0:	f001 f9b7 	bl	80a1b32 <_ZN5Servo17writeMicrosecondsEt>
    RESC.writeMicroseconds(1500);
 80a07c4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a07c8:	481e      	ldr	r0, [pc, #120]	; (80a0844 <loop+0x27c>)
 80a07ca:	f001 f9b2 	bl	80a1b32 <_ZN5Servo17writeMicrosecondsEt>
  }
  
 80a07ce:	e005      	b.n	80a07dc <loop+0x214>
  Serial.print("sensor 2:");
  Serial.print(sensor2.readRangeContinuousMillimeters());
  Serial.print(" | ");
  Serial.print("sensor 3:");
  Serial.print(sensor3.readRangeContinuousMillimeters());
  if (sensor0.timeoutOccurred() || sensor1.timeoutOccurred() || sensor2.timeoutOccurred() || sensor3.timeoutOccurred()) { Serial.print(" SENSOR TIMEOUT"); }
 80a07d0:	f001 fc1e 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a07d4:	491c      	ldr	r1, [pc, #112]	; (80a0848 <loop+0x280>)
 80a07d6:	f001 fa34 	bl	80a1c42 <_ZN5Print5printEPKc>
 80a07da:	e770      	b.n	80a06be <loop+0xf6>
  } else {
    LESC.writeMicroseconds(1500);
    RESC.writeMicroseconds(1500);
  }
  
 80a07dc:	b005      	add	sp, #20
 80a07de:	bd30      	pop	{r4, r5, pc}
 80a07e0:	2000032c 	.word	0x2000032c
 80a07e4:	080a300f 	.word	0x080a300f
 80a07e8:	080a301e 	.word	0x080a301e
 80a07ec:	080a3022 	.word	0x080a3022
 80a07f0:	20000364 	.word	0x20000364
 80a07f4:	080a302c 	.word	0x080a302c
 80a07f8:	2000037c 	.word	0x2000037c
 80a07fc:	080a3036 	.word	0x080a3036
 80a0800:	20000394 	.word	0x20000394
 80a0804:	080a3040 	.word	0x080a3040
 80a0808:	200003ac 	.word	0x200003ac
 80a080c:	080a304a 	.word	0x080a304a
 80a0810:	20000321 	.word	0x20000321
 80a0814:	080a3056 	.word	0x080a3056
 80a0818:	20000310 	.word	0x20000310
 80a081c:	080a3063 	.word	0x080a3063
 80a0820:	20000320 	.word	0x20000320
 80a0824:	080a306e 	.word	0x080a306e
 80a0828:	20000311 	.word	0x20000311
 80a082c:	200003cc 	.word	0x200003cc
 80a0830:	2000034c 	.word	0x2000034c
 80a0834:	080a307a 	.word	0x080a307a
 80a0838:	080a3083 	.word	0x080a3083
 80a083c:	20000360 	.word	0x20000360
 80a0840:	200003d0 	.word	0x200003d0
 80a0844:	200003e0 	.word	0x200003e0
 80a0848:	080a308d 	.word	0x080a308d

080a084c <_GLOBAL__sub_I_sensor0>:
 80a084c:	b570      	push	{r4, r5, r6, lr}
 80a084e:	b088      	sub	sp, #32
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0850:	f000 ff96 	bl	80a1780 <HAL_Pin_Map>

#if !defined(PARTICLE)
#  include <Wire.h>
#endif

VL53L0X sensor0;
 80a0854:	482c      	ldr	r0, [pc, #176]	; (80a0908 <_GLOBAL__sub_I_sensor0+0xbc>)
 80a0856:	f000 f87f 	bl	80a0958 <_ZN7VL53L0XC1Ev>
VL53L0X sensor1;
 80a085a:	482c      	ldr	r0, [pc, #176]	; (80a090c <_GLOBAL__sub_I_sensor0+0xc0>)
 80a085c:	f000 f87c 	bl	80a0958 <_ZN7VL53L0XC1Ev>
VL53L0X sensor2;
 80a0860:	482b      	ldr	r0, [pc, #172]	; (80a0910 <_GLOBAL__sub_I_sensor0+0xc4>)
 80a0862:	f000 f879 	bl	80a0958 <_ZN7VL53L0XC1Ev>
VL53L0X sensor3;
 80a0866:	482b      	ldr	r0, [pc, #172]	; (80a0914 <_GLOBAL__sub_I_sensor0+0xc8>)
 80a0868:	f000 f876 	bl	80a0958 <_ZN7VL53L0XC1Ev>
int BL = D5;
int BR = D6;

int RS = D4;

Servo LESC;
 80a086c:	482a      	ldr	r0, [pc, #168]	; (80a0918 <_GLOBAL__sub_I_sensor0+0xcc>)
 80a086e:	f001 f980 	bl	80a1b72 <_ZN5ServoC1Ev>
Servo RESC;
 80a0872:	482a      	ldr	r0, [pc, #168]	; (80a091c <_GLOBAL__sub_I_sensor0+0xd0>)
 80a0874:	f001 f97d 	bl	80a1b72 <_ZN5ServoC1Ev>
boolean BLflag = true;
boolean BRflag = true;

boolean RSflag = false;

SYSTEM_THREAD(ENABLED);
 80a0878:	2100      	movs	r1, #0
 80a087a:	2001      	movs	r0, #1
 80a087c:	f001 f90a 	bl	80a1a94 <system_thread_set_state>

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0880:	2003      	movs	r0, #3
 80a0882:	f001 f8f7 	bl	80a1a74 <set_system_mode>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a0886:	4b26      	ldr	r3, [pc, #152]	; (80a0920 <_GLOBAL__sub_I_sensor0+0xd4>)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0888:	ae04      	add	r6, sp, #16
 80a088a:	9304      	str	r3, [sp, #16]
 80a088c:	aa02      	add	r2, sp, #8
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80a088e:	4c25      	ldr	r4, [pc, #148]	; (80a0924 <_GLOBAL__sub_I_sensor0+0xd8>)
 80a0890:	e896 0003 	ldmia.w	r6, {r0, r1}
 80a0894:	4b24      	ldr	r3, [pc, #144]	; (80a0928 <_GLOBAL__sub_I_sensor0+0xdc>)
 80a0896:	e882 0003 	stmia.w	r2, {r0, r1}
 80a089a:	6023      	str	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a089c:	f104 030c 	add.w	r3, r4, #12
 80a08a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a08a4:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a08a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80a08ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80a08b0:	4b1e      	ldr	r3, [pc, #120]	; (80a092c <_GLOBAL__sub_I_sensor0+0xe0>)
 80a08b2:	2500      	movs	r5, #0
 80a08b4:	6163      	str	r3, [r4, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a08b6:	69a3      	ldr	r3, [r4, #24]
 80a08b8:	7125      	strb	r5, [r4, #4]
 80a08ba:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
 80a08bc:	4b1c      	ldr	r3, [pc, #112]	; (80a0930 <_GLOBAL__sub_I_sensor0+0xe4>)
 80a08be:	60a5      	str	r5, [r4, #8]
 80a08c0:	61a3      	str	r3, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 80a08c2:	4a1c      	ldr	r2, [pc, #112]	; (80a0934 <_GLOBAL__sub_I_sensor0+0xe8>)
 80a08c4:	4623      	mov	r3, r4
 80a08c6:	2164      	movs	r1, #100	; 0x64
 80a08c8:	9501      	str	r5, [sp, #4]
 80a08ca:	9500      	str	r5, [sp, #0]
 80a08cc:	f104 0008 	add.w	r0, r4, #8
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a08d0:	9506      	str	r5, [sp, #24]
 80a08d2:	f000 ffb5 	bl	80a1840 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a08d6:	4630      	mov	r0, r6
// Accelerometer
const unsigned long PRINT_SAMPLE_PERIOD = 100;
void getAccel();
int curAccel = 0;
LIS3DHSample sample;
Timer accelTimer(PRINT_SAMPLE_PERIOD, getAccel);
 80a08d8:	4e17      	ldr	r6, [pc, #92]	; (80a0938 <_GLOBAL__sub_I_sensor0+0xec>)
 80a08da:	f7ff fc75 	bl	80a01c8 <_ZNSt14_Function_baseD1Ev>
 80a08de:	4632      	mov	r2, r6
 80a08e0:	4916      	ldr	r1, [pc, #88]	; (80a093c <_GLOBAL__sub_I_sensor0+0xf0>)
 80a08e2:	4620      	mov	r0, r4
 80a08e4:	f001 fdc2 	bl	80a246c <__aeabi_atexit>
LIS3DHI2C accel(Wire, 0, WKP);
 80a08e8:	f001 fda0 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a08ec:	4c14      	ldr	r4, [pc, #80]	; (80a0940 <_GLOBAL__sub_I_sensor0+0xf4>)
 80a08ee:	2311      	movs	r3, #17
 80a08f0:	462a      	mov	r2, r5
 80a08f2:	4601      	mov	r1, r0
 80a08f4:	4620      	mov	r0, r4
 80a08f6:	f000 ff37 	bl	80a1768 <_ZN9LIS3DHI2CC1ER7TwoWirehi>
 80a08fa:	4632      	mov	r2, r6
 80a08fc:	4911      	ldr	r1, [pc, #68]	; (80a0944 <_GLOBAL__sub_I_sensor0+0xf8>)
 80a08fe:	4620      	mov	r0, r4
 80a0900:	f001 fdb4 	bl	80a246c <__aeabi_atexit>
  } else {
    LESC.writeMicroseconds(1500);
    RESC.writeMicroseconds(1500);
  }
  
 80a0904:	b008      	add	sp, #32
 80a0906:	bd70      	pop	{r4, r5, r6, pc}
 80a0908:	20000364 	.word	0x20000364
 80a090c:	2000037c 	.word	0x2000037c
 80a0910:	20000394 	.word	0x20000394
 80a0914:	200003ac 	.word	0x200003ac
 80a0918:	200003d0 	.word	0x200003d0
 80a091c:	200003e0 	.word	0x200003e0
 80a0920:	080a016d 	.word	0x080a016d
 80a0924:	20000330 	.word	0x20000330
 80a0928:	080a2fc4 	.word	0x080a2fc4
 80a092c:	080a00b3 	.word	0x080a00b3
 80a0930:	080a00af 	.word	0x080a00af
 80a0934:	080a01a9 	.word	0x080a01a9
 80a0938:	20000328 	.word	0x20000328
 80a093c:	080a01f9 	.word	0x080a01f9
 80a0940:	2000034c 	.word	0x2000034c
 80a0944:	080a152d 	.word	0x080a152d

080a0948 <_ZN7TwoWire5writeEm>:
  virtual int peek(void);
  virtual void flush(void);
  void onReceive(void (*)(int));
  void onRequest(void (*)(void));

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
 80a0948:	6803      	ldr	r3, [r0, #0]
 80a094a:	b2c9      	uxtb	r1, r1
 80a094c:	689b      	ldr	r3, [r3, #8]
 80a094e:	4718      	bx	r3

080a0950 <_ZN7TwoWire5writeEi>:
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0950:	6803      	ldr	r3, [r0, #0]
 80a0952:	b2c9      	uxtb	r1, r1
 80a0954:	689b      	ldr	r3, [r3, #8]
 80a0956:	4718      	bx	r3

080a0958 <_ZN7VL53L0XC1Ev>:
// Constructors ////////////////////////////////////////////////////////////////

VL53L0X::VL53L0X(void)
  : address(ADDRESS_DEFAULT)
  , io_timeout(0) // no timeout
  , did_timeout(false)
 80a0958:	2229      	movs	r2, #41	; 0x29
 80a095a:	7042      	strb	r2, [r0, #1]
 80a095c:	2200      	movs	r2, #0
 80a095e:	6042      	str	r2, [r0, #4]
 80a0960:	7202      	strb	r2, [r0, #8]
{
}
 80a0962:	4770      	bx	lr

080a0964 <_ZN7VL53L0X8writeRegEhh>:
  return true;
}

// Write an 8-bit register
void VL53L0X::writeReg(uint8_t reg, uint8_t value)
{
 80a0964:	b570      	push	{r4, r5, r6, lr}
 80a0966:	4604      	mov	r4, r0
 80a0968:	4615      	mov	r5, r2
 80a096a:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a096c:	f001 fd5e 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0970:	7861      	ldrb	r1, [r4, #1]
 80a0972:	f001 fc9a 	bl	80a22aa <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0976:	f001 fd59 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a097a:	6803      	ldr	r3, [r0, #0]
 80a097c:	4631      	mov	r1, r6
 80a097e:	689b      	ldr	r3, [r3, #8]
 80a0980:	4798      	blx	r3
  Wire.write(value);
 80a0982:	f001 fd53 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0986:	6803      	ldr	r3, [r0, #0]
 80a0988:	4629      	mov	r1, r5
 80a098a:	689b      	ldr	r3, [r3, #8]
 80a098c:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a098e:	f001 fd4d 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0992:	f001 fc92 	bl	80a22ba <_ZN7TwoWire15endTransmissionEv>
 80a0996:	7020      	strb	r0, [r4, #0]
 80a0998:	bd70      	pop	{r4, r5, r6, pc}

080a099a <_ZN7VL53L0X10setAddressEh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void VL53L0X::setAddress(uint8_t new_addr)
{
 80a099a:	b538      	push	{r3, r4, r5, lr}
 80a099c:	4605      	mov	r5, r0
 80a099e:	460c      	mov	r4, r1
  writeReg(I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 80a09a0:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80a09a4:	218a      	movs	r1, #138	; 0x8a
 80a09a6:	f7ff ffdd 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  address = new_addr;
 80a09aa:	706c      	strb	r4, [r5, #1]
 80a09ac:	bd38      	pop	{r3, r4, r5, pc}

080a09ae <_ZN7VL53L0X13writeReg16BitEht>:
  last_status = Wire.endTransmission();
}

// Write a 16-bit register
void VL53L0X::writeReg16Bit(uint8_t reg, uint16_t value)
{
 80a09ae:	b570      	push	{r4, r5, r6, lr}
 80a09b0:	4604      	mov	r4, r0
 80a09b2:	4615      	mov	r5, r2
 80a09b4:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a09b6:	f001 fd39 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a09ba:	7861      	ldrb	r1, [r4, #1]
 80a09bc:	f001 fc75 	bl	80a22aa <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a09c0:	f001 fd34 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a09c4:	6803      	ldr	r3, [r0, #0]
 80a09c6:	4631      	mov	r1, r6
 80a09c8:	689b      	ldr	r3, [r3, #8]
 80a09ca:	4798      	blx	r3
  Wire.write((value >> 8) & 0xFF); // value high byte
 80a09cc:	f001 fd2e 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a09d0:	0a29      	lsrs	r1, r5, #8
 80a09d2:	f7ff ffbd 	bl	80a0950 <_ZN7TwoWire5writeEi>
  Wire.write( value       & 0xFF); // value low byte
 80a09d6:	f001 fd29 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a09da:	b2e9      	uxtb	r1, r5
 80a09dc:	f7ff ffb8 	bl	80a0950 <_ZN7TwoWire5writeEi>
  last_status = Wire.endTransmission();
 80a09e0:	f001 fd24 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a09e4:	f001 fc69 	bl	80a22ba <_ZN7TwoWire15endTransmissionEv>
 80a09e8:	7020      	strb	r0, [r4, #0]
 80a09ea:	bd70      	pop	{r4, r5, r6, pc}

080a09ec <_ZN7VL53L0X13writeReg32BitEhm>:
}

// Write a 32-bit register
void VL53L0X::writeReg32Bit(uint8_t reg, uint32_t value)
{
 80a09ec:	b570      	push	{r4, r5, r6, lr}
 80a09ee:	4605      	mov	r5, r0
 80a09f0:	4614      	mov	r4, r2
 80a09f2:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a09f4:	f001 fd1a 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a09f8:	7869      	ldrb	r1, [r5, #1]
 80a09fa:	f001 fc56 	bl	80a22aa <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a09fe:	f001 fd15 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0a02:	6803      	ldr	r3, [r0, #0]
 80a0a04:	4631      	mov	r1, r6
 80a0a06:	689b      	ldr	r3, [r3, #8]
 80a0a08:	4798      	blx	r3
  Wire.write((value >> 24) & 0xFF); // value highest byte
 80a0a0a:	f001 fd0f 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0a0e:	0e21      	lsrs	r1, r4, #24
 80a0a10:	f7ff ff9a 	bl	80a0948 <_ZN7TwoWire5writeEm>
  Wire.write((value >> 16) & 0xFF);
 80a0a14:	f001 fd0a 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0a18:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80a0a1c:	f7ff ff94 	bl	80a0948 <_ZN7TwoWire5writeEm>
  Wire.write((value >>  8) & 0xFF);
 80a0a20:	f001 fd04 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0a24:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80a0a28:	f7ff ff8e 	bl	80a0948 <_ZN7TwoWire5writeEm>
  Wire.write( value        & 0xFF); // value lowest byte
 80a0a2c:	f001 fcfe 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0a30:	b2e1      	uxtb	r1, r4
 80a0a32:	f7ff ff89 	bl	80a0948 <_ZN7TwoWire5writeEm>
  last_status = Wire.endTransmission();
 80a0a36:	f001 fcf9 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0a3a:	f001 fc3e 	bl	80a22ba <_ZN7TwoWire15endTransmissionEv>
 80a0a3e:	7028      	strb	r0, [r5, #0]
 80a0a40:	bd70      	pop	{r4, r5, r6, pc}

080a0a42 <_ZN7VL53L0X7readRegEh>:
}

// Read an 8-bit register
uint8_t VL53L0X::readReg(uint8_t reg)
{
 80a0a42:	b538      	push	{r3, r4, r5, lr}
 80a0a44:	4604      	mov	r4, r0
 80a0a46:	460d      	mov	r5, r1
  uint8_t value;

  Wire.beginTransmission(address);
 80a0a48:	f001 fcf0 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0a4c:	7861      	ldrb	r1, [r4, #1]
 80a0a4e:	f001 fc2c 	bl	80a22aa <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0a52:	f001 fceb 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0a56:	6803      	ldr	r3, [r0, #0]
 80a0a58:	4629      	mov	r1, r5
 80a0a5a:	689b      	ldr	r3, [r3, #8]
 80a0a5c:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a0a5e:	f001 fce5 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0a62:	f001 fc2a 	bl	80a22ba <_ZN7TwoWire15endTransmissionEv>
 80a0a66:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)1);
 80a0a68:	f001 fce0 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0a6c:	2201      	movs	r2, #1
 80a0a6e:	7861      	ldrb	r1, [r4, #1]
 80a0a70:	f001 fc13 	bl	80a229a <_ZN7TwoWire11requestFromEhh>
  value = Wire.read();
 80a0a74:	f001 fcda 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0a78:	6803      	ldr	r3, [r0, #0]
 80a0a7a:	695b      	ldr	r3, [r3, #20]
 80a0a7c:	4798      	blx	r3

  return value;
}
 80a0a7e:	b2c0      	uxtb	r0, r0
 80a0a80:	bd38      	pop	{r3, r4, r5, pc}

080a0a82 <_ZN7VL53L0X12readReg16BitEh>:

// Read a 16-bit register
uint16_t VL53L0X::readReg16Bit(uint8_t reg)
{
 80a0a82:	b538      	push	{r3, r4, r5, lr}
 80a0a84:	4604      	mov	r4, r0
 80a0a86:	460d      	mov	r5, r1
  uint16_t value;

  Wire.beginTransmission(address);
 80a0a88:	f001 fcd0 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0a8c:	7861      	ldrb	r1, [r4, #1]
 80a0a8e:	f001 fc0c 	bl	80a22aa <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0a92:	f001 fccb 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0a96:	6803      	ldr	r3, [r0, #0]
 80a0a98:	4629      	mov	r1, r5
 80a0a9a:	689b      	ldr	r3, [r3, #8]
 80a0a9c:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a0a9e:	f001 fcc5 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0aa2:	f001 fc0a 	bl	80a22ba <_ZN7TwoWire15endTransmissionEv>
 80a0aa6:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)2);
 80a0aa8:	f001 fcc0 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0aac:	7861      	ldrb	r1, [r4, #1]
 80a0aae:	2202      	movs	r2, #2
 80a0ab0:	f001 fbf3 	bl	80a229a <_ZN7TwoWire11requestFromEhh>
  value  = (uint16_t)Wire.read() << 8; // value high byte
 80a0ab4:	f001 fcba 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0ab8:	6803      	ldr	r3, [r0, #0]
 80a0aba:	695b      	ldr	r3, [r3, #20]
 80a0abc:	4798      	blx	r3
 80a0abe:	4604      	mov	r4, r0
  value |=           Wire.read();      // value low byte
 80a0ac0:	f001 fcb4 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0ac4:	6803      	ldr	r3, [r0, #0]
 80a0ac6:	695b      	ldr	r3, [r3, #20]
 80a0ac8:	4798      	blx	r3
 80a0aca:	ea40 2004 	orr.w	r0, r0, r4, lsl #8

  return value;
}
 80a0ace:	b280      	uxth	r0, r0
 80a0ad0:	bd38      	pop	{r3, r4, r5, pc}

080a0ad2 <_ZN7VL53L0X10writeMultiEhPKhh>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
 80a0ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0ad4:	4606      	mov	r6, r0
 80a0ad6:	4614      	mov	r4, r2
 80a0ad8:	461d      	mov	r5, r3
 80a0ada:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a0adc:	f001 fca6 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0ae0:	7871      	ldrb	r1, [r6, #1]
 80a0ae2:	f001 fbe2 	bl	80a22aa <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0ae6:	f001 fca1 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0aea:	6803      	ldr	r3, [r0, #0]
 80a0aec:	4639      	mov	r1, r7
 80a0aee:	689b      	ldr	r3, [r3, #8]
 80a0af0:	4798      	blx	r3
 80a0af2:	4425      	add	r5, r4

  while (count-- > 0)
 80a0af4:	42ac      	cmp	r4, r5
 80a0af6:	d007      	beq.n	80a0b08 <_ZN7VL53L0X10writeMultiEhPKhh+0x36>
  {
    Wire.write(*(src++));
 80a0af8:	f001 fc98 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0afc:	6803      	ldr	r3, [r0, #0]
 80a0afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0b02:	689b      	ldr	r3, [r3, #8]
 80a0b04:	4798      	blx	r3
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
  Wire.beginTransmission(address);
  Wire.write(reg);

  while (count-- > 0)
 80a0b06:	e7f5      	b.n	80a0af4 <_ZN7VL53L0X10writeMultiEhPKhh+0x22>
  {
    Wire.write(*(src++));
  }

  last_status = Wire.endTransmission();
 80a0b08:	f001 fc90 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0b0c:	f001 fbd5 	bl	80a22ba <_ZN7TwoWire15endTransmissionEv>
 80a0b10:	7030      	strb	r0, [r6, #0]
 80a0b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0b14 <_ZN7VL53L0X9readMultiEhPhh>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void VL53L0X::readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 80a0b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b16:	4606      	mov	r6, r0
 80a0b18:	4614      	mov	r4, r2
 80a0b1a:	461d      	mov	r5, r3
 80a0b1c:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a0b1e:	f001 fc85 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0b22:	7871      	ldrb	r1, [r6, #1]
 80a0b24:	f001 fbc1 	bl	80a22aa <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0b28:	f001 fc80 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0b2c:	6803      	ldr	r3, [r0, #0]
 80a0b2e:	4639      	mov	r1, r7
 80a0b30:	689b      	ldr	r3, [r3, #8]
 80a0b32:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a0b34:	f001 fc7a 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0b38:	f001 fbbf 	bl	80a22ba <_ZN7TwoWire15endTransmissionEv>
 80a0b3c:	7030      	strb	r0, [r6, #0]

  Wire.requestFrom(address, count);
 80a0b3e:	f001 fc75 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0b42:	462a      	mov	r2, r5
 80a0b44:	7871      	ldrb	r1, [r6, #1]
 80a0b46:	f001 fba8 	bl	80a229a <_ZN7TwoWire11requestFromEhh>
 80a0b4a:	4425      	add	r5, r4

  while (count-- > 0)
 80a0b4c:	42ac      	cmp	r4, r5
 80a0b4e:	d007      	beq.n	80a0b60 <_ZN7VL53L0X9readMultiEhPhh+0x4c>
  {
    *(dst++) = Wire.read();
 80a0b50:	f001 fc6c 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a0b54:	6803      	ldr	r3, [r0, #0]
 80a0b56:	695b      	ldr	r3, [r3, #20]
 80a0b58:	4798      	blx	r3
 80a0b5a:	f804 0b01 	strb.w	r0, [r4], #1
  Wire.write(reg);
  last_status = Wire.endTransmission();

  Wire.requestFrom(address, count);

  while (count-- > 0)
 80a0b5e:	e7f5      	b.n	80a0b4c <_ZN7VL53L0X9readMultiEhPhh+0x38>
 80a0b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0b62:	0000      	movs	r0, r0
 80a0b64:	0000      	movs	r0, r0
	...

080a0b68 <_ZN7VL53L0X18setSignalRateLimitEf>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
 80a0b68:	b570      	push	{r4, r5, r6, lr}
 80a0b6a:	460d      	mov	r5, r1
 80a0b6c:	4606      	mov	r6, r0
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a0b6e:	2100      	movs	r1, #0
 80a0b70:	4628      	mov	r0, r5
 80a0b72:	f002 f9a7 	bl	80a2ec4 <__aeabi_fcmplt>
 80a0b76:	b9b0      	cbnz	r0, 80a0ba6 <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>
 80a0b78:	4628      	mov	r0, r5
 80a0b7a:	f001 ff29 	bl	80a29d0 <__aeabi_f2d>
 80a0b7e:	a30c      	add	r3, pc, #48	; (adr r3, 80a0bb0 <_ZN7VL53L0X18setSignalRateLimitEf+0x48>)
 80a0b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0b84:	f001 fff6 	bl	80a2b74 <__aeabi_dcmpgt>
 80a0b88:	b968      	cbnz	r0, 80a0ba6 <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80a0b8a:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80a0b8e:	4628      	mov	r0, r5
 80a0b90:	f001 fffa 	bl	80a2b88 <__aeabi_fmul>
 80a0b94:	f002 f9be 	bl	80a2f14 <__aeabi_f2uiz>
 80a0b98:	2144      	movs	r1, #68	; 0x44
 80a0b9a:	b282      	uxth	r2, r0
 80a0b9c:	4630      	mov	r0, r6
 80a0b9e:	f7ff ff06 	bl	80a09ae <_ZN7VL53L0X13writeReg16BitEht>
 80a0ba2:	2001      	movs	r0, #1
 80a0ba4:	bd70      	pop	{r4, r5, r6, pc}
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a0ba6:	2000      	movs	r0, #0
 80a0ba8:	bd70      	pop	{r4, r5, r6, pc}
 80a0baa:	bf00      	nop
 80a0bac:	f3af 8000 	nop.w
 80a0bb0:	0a3d70a4 	.word	0x0a3d70a4
 80a0bb4:	407fffd7 	.word	0x407fffd7

080a0bb8 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>:
}

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t VL53L0X::getVcselPulsePeriod(vcselPeriodType type)
{
 80a0bb8:	b508      	push	{r3, lr}
  if (type == VcselPeriodPreRange)
 80a0bba:	b909      	cbnz	r1, 80a0bc0 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x8>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80a0bbc:	2150      	movs	r1, #80	; 0x50
 80a0bbe:	e002      	b.n	80a0bc6 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0xe>
  }
  else if (type == VcselPeriodFinalRange)
 80a0bc0:	2901      	cmp	r1, #1
 80a0bc2:	d106      	bne.n	80a0bd2 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x1a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a0bc4:	2170      	movs	r1, #112	; 0x70
 80a0bc6:	f7ff ff3c 	bl	80a0a42 <_ZN7VL53L0X7readRegEh>
 80a0bca:	3001      	adds	r0, #1
 80a0bcc:	0040      	lsls	r0, r0, #1
 80a0bce:	b2c0      	uxtb	r0, r0
 80a0bd0:	bd08      	pop	{r3, pc}
  }
  else { return 255; }
 80a0bd2:	20ff      	movs	r0, #255	; 0xff
}
 80a0bd4:	bd08      	pop	{r3, pc}

080a0bd6 <_ZN7VL53L0X15startContinuousEm>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X::startContinuous(uint32_t period_ms)
{
 80a0bd6:	b538      	push	{r3, r4, r5, lr}
 80a0bd8:	4604      	mov	r4, r0
 80a0bda:	460d      	mov	r5, r1
  writeReg(0x80, 0x01);
 80a0bdc:	2201      	movs	r2, #1
 80a0bde:	2180      	movs	r1, #128	; 0x80
 80a0be0:	f7ff fec0 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0be4:	2201      	movs	r2, #1
 80a0be6:	21ff      	movs	r1, #255	; 0xff
 80a0be8:	4620      	mov	r0, r4
 80a0bea:	f7ff febb 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a0bee:	2200      	movs	r2, #0
 80a0bf0:	4611      	mov	r1, r2
 80a0bf2:	4620      	mov	r0, r4
 80a0bf4:	f7ff feb6 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x91, stop_variable);
 80a0bf8:	7c22      	ldrb	r2, [r4, #16]
 80a0bfa:	2191      	movs	r1, #145	; 0x91
 80a0bfc:	4620      	mov	r0, r4
 80a0bfe:	f7ff feb1 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a0c02:	2201      	movs	r2, #1
 80a0c04:	2100      	movs	r1, #0
 80a0c06:	4620      	mov	r0, r4
 80a0c08:	f7ff feac 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a0c0c:	2200      	movs	r2, #0
 80a0c0e:	21ff      	movs	r1, #255	; 0xff
 80a0c10:	4620      	mov	r0, r4
 80a0c12:	f7ff fea7 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a0c16:	2200      	movs	r2, #0
 80a0c18:	2180      	movs	r1, #128	; 0x80
 80a0c1a:	4620      	mov	r0, r4
 80a0c1c:	f7ff fea2 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  if (period_ms != 0)
 80a0c20:	b16d      	cbz	r5, 80a0c3e <_ZN7VL53L0X15startContinuousEm+0x68>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 80a0c22:	21f8      	movs	r1, #248	; 0xf8
 80a0c24:	4620      	mov	r0, r4
 80a0c26:	f7ff ff2c 	bl	80a0a82 <_ZN7VL53L0X12readReg16BitEh>

    if (osc_calibrate_val != 0)
 80a0c2a:	b100      	cbz	r0, 80a0c2e <_ZN7VL53L0X15startContinuousEm+0x58>
    {
      period_ms *= osc_calibrate_val;
 80a0c2c:	4345      	muls	r5, r0
    }

    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 80a0c2e:	462a      	mov	r2, r5
 80a0c30:	2104      	movs	r1, #4
 80a0c32:	4620      	mov	r0, r4
 80a0c34:	f7ff feda 	bl	80a09ec <_ZN7VL53L0X13writeReg32BitEhm>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 80a0c38:	2204      	movs	r2, #4
 80a0c3a:	2100      	movs	r1, #0
 80a0c3c:	e001      	b.n	80a0c42 <_ZN7VL53L0X15startContinuousEm+0x6c>
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a0c3e:	4629      	mov	r1, r5
 80a0c40:	2202      	movs	r2, #2
 80a0c42:	4620      	mov	r0, r4
  }
}
 80a0c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a0c48:	f7ff be8c 	b.w	80a0964 <_ZN7VL53L0X8writeRegEhh>

080a0c4c <_ZN7VL53L0X30readRangeContinuousMillimetersEv>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t VL53L0X::readRangeContinuousMillimeters(void)
{
 80a0c4c:	b538      	push	{r3, r4, r5, lr}
 80a0c4e:	4604      	mov	r4, r0
 80a0c50:	f000 fdee 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a0c54:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a0c56:	2113      	movs	r1, #19
 80a0c58:	4620      	mov	r0, r4
 80a0c5a:	f7ff fef2 	bl	80a0a42 <_ZN7VL53L0X7readRegEh>
 80a0c5e:	0743      	lsls	r3, r0, #29
 80a0c60:	d10e      	bne.n	80a0c80 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0x34>
  {
    if (checkTimeoutExpired())
 80a0c62:	6863      	ldr	r3, [r4, #4]
 80a0c64:	2b00      	cmp	r3, #0
 80a0c66:	d0f6      	beq.n	80a0c56 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
 80a0c68:	f000 fde2 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
 80a0c6c:	68e3      	ldr	r3, [r4, #12]
 80a0c6e:	1ac0      	subs	r0, r0, r3
 80a0c70:	6863      	ldr	r3, [r4, #4]
 80a0c72:	4298      	cmp	r0, r3
 80a0c74:	d9ef      	bls.n	80a0c56 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
    {
      did_timeout = true;
 80a0c76:	2301      	movs	r3, #1
 80a0c78:	7223      	strb	r3, [r4, #8]
      return 65535;
 80a0c7a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  return range;
}
 80a0c7e:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);
 80a0c80:	211e      	movs	r1, #30
 80a0c82:	4620      	mov	r0, r4
 80a0c84:	f7ff fefd 	bl	80a0a82 <_ZN7VL53L0X12readReg16BitEh>
 80a0c88:	4605      	mov	r5, r0

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a0c8a:	2201      	movs	r2, #1
 80a0c8c:	4620      	mov	r0, r4
 80a0c8e:	210b      	movs	r1, #11
 80a0c90:	f7ff fe68 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
 80a0c94:	4628      	mov	r0, r5
 80a0c96:	bd38      	pop	{r3, r4, r5, pc}

080a0c98 <_ZN7VL53L0X15timeoutOccurredEv>:
}

// Did a timeout occur in one of the read functions since the last call to
// timeoutOccurred()?
bool VL53L0X::timeoutOccurred()
{
 80a0c98:	4603      	mov	r3, r0
  bool tmp = did_timeout;
  did_timeout = false;
 80a0c9a:	2200      	movs	r2, #0

// Did a timeout occur in one of the read functions since the last call to
// timeoutOccurred()?
bool VL53L0X::timeoutOccurred()
{
  bool tmp = did_timeout;
 80a0c9c:	7a00      	ldrb	r0, [r0, #8]
  did_timeout = false;
 80a0c9e:	721a      	strb	r2, [r3, #8]
  return tmp;
}
 80a0ca0:	4770      	bx	lr

080a0ca2 <_ZN7VL53L0X11getSpadInfoEPhPb>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X::getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80a0ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0ca4:	4604      	mov	r4, r0
 80a0ca6:	460f      	mov	r7, r1
 80a0ca8:	4616      	mov	r6, r2
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80a0caa:	2180      	movs	r1, #128	; 0x80
 80a0cac:	2201      	movs	r2, #1
 80a0cae:	f7ff fe59 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0cb2:	2201      	movs	r2, #1
 80a0cb4:	21ff      	movs	r1, #255	; 0xff
 80a0cb6:	4620      	mov	r0, r4
 80a0cb8:	f7ff fe54 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a0cbc:	2200      	movs	r2, #0
 80a0cbe:	4611      	mov	r1, r2
 80a0cc0:	4620      	mov	r0, r4
 80a0cc2:	f7ff fe4f 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x06);
 80a0cc6:	2206      	movs	r2, #6
 80a0cc8:	21ff      	movs	r1, #255	; 0xff
 80a0cca:	4620      	mov	r0, r4
 80a0ccc:	f7ff fe4a 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg(0x83) | 0x04);
 80a0cd0:	2183      	movs	r1, #131	; 0x83
 80a0cd2:	4620      	mov	r0, r4
 80a0cd4:	f7ff feb5 	bl	80a0a42 <_ZN7VL53L0X7readRegEh>
 80a0cd8:	f040 0204 	orr.w	r2, r0, #4
 80a0cdc:	b2d2      	uxtb	r2, r2
 80a0cde:	2183      	movs	r1, #131	; 0x83
 80a0ce0:	4620      	mov	r0, r4
 80a0ce2:	f7ff fe3f 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x07);
 80a0ce6:	2207      	movs	r2, #7
 80a0ce8:	21ff      	movs	r1, #255	; 0xff
 80a0cea:	4620      	mov	r0, r4
 80a0cec:	f7ff fe3a 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x81, 0x01);
 80a0cf0:	2201      	movs	r2, #1
 80a0cf2:	2181      	movs	r1, #129	; 0x81
 80a0cf4:	4620      	mov	r0, r4
 80a0cf6:	f7ff fe35 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a0cfa:	2201      	movs	r2, #1
 80a0cfc:	2180      	movs	r1, #128	; 0x80
 80a0cfe:	4620      	mov	r0, r4
 80a0d00:	f7ff fe30 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x94, 0x6b);
 80a0d04:	226b      	movs	r2, #107	; 0x6b
 80a0d06:	2194      	movs	r1, #148	; 0x94
 80a0d08:	4620      	mov	r0, r4
 80a0d0a:	f7ff fe2b 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, 0x00);
 80a0d0e:	2200      	movs	r2, #0
 80a0d10:	2183      	movs	r1, #131	; 0x83
 80a0d12:	4620      	mov	r0, r4
 80a0d14:	f7ff fe26 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
 80a0d18:	f000 fd8a 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a0d1c:	60e0      	str	r0, [r4, #12]
  while (readReg(0x83) == 0x00)
 80a0d1e:	2183      	movs	r1, #131	; 0x83
 80a0d20:	4620      	mov	r0, r4
 80a0d22:	f7ff fe8e 	bl	80a0a42 <_ZN7VL53L0X7readRegEh>
 80a0d26:	4605      	mov	r5, r0
 80a0d28:	b958      	cbnz	r0, 80a0d42 <_ZN7VL53L0X11getSpadInfoEPhPb+0xa0>
  {
    if (checkTimeoutExpired()) { return false; }
 80a0d2a:	6863      	ldr	r3, [r4, #4]
 80a0d2c:	2b00      	cmp	r3, #0
 80a0d2e:	d0f6      	beq.n	80a0d1e <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a0d30:	f000 fd7e 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
 80a0d34:	68e3      	ldr	r3, [r4, #12]
 80a0d36:	1ac0      	subs	r0, r0, r3
 80a0d38:	6863      	ldr	r3, [r4, #4]
 80a0d3a:	4298      	cmp	r0, r3
 80a0d3c:	d9ef      	bls.n	80a0d1e <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a0d3e:	4628      	mov	r0, r5

  writeReg(0xFF, 0x00);
  writeReg(0x80, 0x00);

  return true;
}
 80a0d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  startTimeout();
  while (readReg(0x83) == 0x00)
  {
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
 80a0d42:	2201      	movs	r2, #1
 80a0d44:	4620      	mov	r0, r4
 80a0d46:	2183      	movs	r1, #131	; 0x83
 80a0d48:	f7ff fe0c 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  tmp = readReg(0x92);
 80a0d4c:	2192      	movs	r1, #146	; 0x92
 80a0d4e:	4620      	mov	r0, r4
 80a0d50:	f7ff fe77 	bl	80a0a42 <_ZN7VL53L0X7readRegEh>

  *count = tmp & 0x7f;
 80a0d54:	f000 037f 	and.w	r3, r0, #127	; 0x7f
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a0d58:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
 80a0d5c:	703b      	strb	r3, [r7, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;

  writeReg(0x81, 0x00);
 80a0d5e:	2200      	movs	r2, #0
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a0d60:	7030      	strb	r0, [r6, #0]

  writeReg(0x81, 0x00);
 80a0d62:	2181      	movs	r1, #129	; 0x81
 80a0d64:	4620      	mov	r0, r4
 80a0d66:	f7ff fdfd 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x06);
 80a0d6a:	2206      	movs	r2, #6
 80a0d6c:	4620      	mov	r0, r4
 80a0d6e:	21ff      	movs	r1, #255	; 0xff
 80a0d70:	f7ff fdf8 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg( 0x83  & ~0x04));
 80a0d74:	2183      	movs	r1, #131	; 0x83
 80a0d76:	4620      	mov	r0, r4
 80a0d78:	f7ff fe63 	bl	80a0a42 <_ZN7VL53L0X7readRegEh>
 80a0d7c:	2183      	movs	r1, #131	; 0x83
 80a0d7e:	4602      	mov	r2, r0
 80a0d80:	4620      	mov	r0, r4
 80a0d82:	f7ff fdef 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0d86:	4620      	mov	r0, r4
 80a0d88:	2201      	movs	r2, #1
 80a0d8a:	21ff      	movs	r1, #255	; 0xff
 80a0d8c:	f7ff fdea 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a0d90:	4620      	mov	r0, r4
 80a0d92:	2201      	movs	r2, #1
 80a0d94:	2100      	movs	r1, #0
 80a0d96:	f7ff fde5 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0d9a:	4620      	mov	r0, r4
 80a0d9c:	2200      	movs	r2, #0
 80a0d9e:	21ff      	movs	r1, #255	; 0xff
 80a0da0:	f7ff fde0 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a0da4:	4620      	mov	r0, r4
 80a0da6:	2200      	movs	r2, #0
 80a0da8:	2180      	movs	r1, #128	; 0x80
 80a0daa:	f7ff fddb 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  return true;
 80a0dae:	2001      	movs	r0, #1
 80a0db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0db2 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>:
}

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X::getSequenceStepEnables(SequenceStepEnables * enables)
{
 80a0db2:	b510      	push	{r4, lr}
 80a0db4:	460c      	mov	r4, r1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 80a0db6:	2101      	movs	r1, #1
 80a0db8:	f7ff fe43 	bl	80a0a42 <_ZN7VL53L0X7readRegEh>

  enables->tcc          = (sequence_config >> 4) & 0x1;
 80a0dbc:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80a0dc0:	7023      	strb	r3, [r4, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 80a0dc2:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80a0dc6:	70a3      	strb	r3, [r4, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 80a0dc8:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80a0dcc:	7063      	strb	r3, [r4, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a0dce:	f3c0 1380 	ubfx	r3, r0, #6, #1
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a0dd2:	f3c0 10c0 	ubfx	r0, r0, #7, #1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);

  enables->tcc          = (sequence_config >> 4) & 0x1;
  enables->dss          = (sequence_config >> 3) & 0x1;
  enables->msrc         = (sequence_config >> 2) & 0x1;
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a0dd6:	70e3      	strb	r3, [r4, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a0dd8:	7120      	strb	r0, [r4, #4]
 80a0dda:	bd10      	pop	{r4, pc}

080a0ddc <_ZN7VL53L0X13decodeTimeoutEm>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X::decodeTimeout(uint32_t reg_val)
{
 80a0ddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a0de0:	4298      	cmp	r0, r3
 80a0de2:	bf28      	it	cs
 80a0de4:	4618      	movcs	r0, r3
  if (reg_val > 0xFFFF) reg_val = 0xFFFF;
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80a0de6:	b2c3      	uxtb	r3, r0
 80a0de8:	0a00      	lsrs	r0, r0, #8
 80a0dea:	fa03 f000 	lsl.w	r0, r3, r0
 80a0dee:	3001      	adds	r0, #1
}
 80a0df0:	b280      	uxth	r0, r0
 80a0df2:	4770      	bx	lr

080a0df4 <_ZN7VL53L0X13encodeTimeoutEm>:
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a0df4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80a0df8:	d201      	bcs.n	80a0dfe <_ZN7VL53L0X13encodeTimeoutEm+0xa>

  // format: "(LSByte * 2^MSByte) + 1"
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
 80a0dfa:	b178      	cbz	r0, 80a0e1c <_ZN7VL53L0X13encodeTimeoutEm+0x28>
 80a0dfc:	e001      	b.n	80a0e02 <_ZN7VL53L0X13encodeTimeoutEm+0xe>
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a0dfe:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;
 80a0e02:	3801      	subs	r0, #1
 80a0e04:	2300      	movs	r3, #0

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a0e06:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 80a0e0a:	b29a      	uxth	r2, r3
 80a0e0c:	f103 0301 	add.w	r3, r3, #1
 80a0e10:	d001      	beq.n	80a0e16 <_ZN7VL53L0X13encodeTimeoutEm+0x22>
    {
      ls_byte >>= 1;
 80a0e12:	0840      	lsrs	r0, r0, #1

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a0e14:	e7f7      	b.n	80a0e06 <_ZN7VL53L0X13encodeTimeoutEm+0x12>
    {
      ls_byte >>= 1;
      ms_byte++;
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 80a0e16:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80a0e1a:	b280      	uxth	r0, r0
  }
  else { return 0; }
}
 80a0e1c:	4770      	bx	lr
	...

080a0e20 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0e20:	4b08      	ldr	r3, [pc, #32]	; (80a0e44 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh+0x24>)

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a0e22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0e26:	4359      	muls	r1, r3
}

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80a0e28:	b510      	push	{r4, lr}
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0e2a:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a0e2e:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 80a0e32:	fbb1 f3f2 	udiv	r3, r1, r2
 80a0e36:	fbb1 f1f4 	udiv	r1, r1, r4
 80a0e3a:	fb00 1003 	mla	r0, r0, r3, r1
}
 80a0e3e:	fbb0 f0f2 	udiv	r0, r0, r2
 80a0e42:	bd10      	pop	{r4, pc}
 80a0e44:	003a2f00 	.word	0x003a2f00

080a0e48 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a0e48:	b570      	push	{r4, r5, r6, lr}
 80a0e4a:	460e      	mov	r6, r1
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0e4c:	2100      	movs	r1, #0
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a0e4e:	4614      	mov	r4, r2
 80a0e50:	4605      	mov	r5, r0
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0e52:	f7ff feb1 	bl	80a0bb8 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0e56:	2146      	movs	r1, #70	; 0x46
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0e58:	8020      	strh	r0, [r4, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0e5a:	4628      	mov	r0, r5
 80a0e5c:	f7ff fdf1 	bl	80a0a42 <_ZN7VL53L0X7readRegEh>
 80a0e60:	3001      	adds	r0, #1
 80a0e62:	b280      	uxth	r0, r0
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a0e64:	7821      	ldrb	r1, [r4, #0]
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0e66:	80a0      	strh	r0, [r4, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a0e68:	f7ff ffda 	bl	80a0e20 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0e6c:	2151      	movs	r1, #81	; 0x51
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a0e6e:	60e0      	str	r0, [r4, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0e70:	4628      	mov	r0, r5
 80a0e72:	f7ff fe06 	bl	80a0a82 <_ZN7VL53L0X12readReg16BitEh>
 80a0e76:	f7ff ffb1 	bl	80a0ddc <_ZN7VL53L0X13decodeTimeoutEm>
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a0e7a:	7821      	ldrb	r1, [r4, #0]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0e7c:	80e0      	strh	r0, [r4, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a0e7e:	f7ff ffcf 	bl	80a0e20 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a0e82:	2170      	movs	r1, #112	; 0x70

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a0e84:	6120      	str	r0, [r4, #16]
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a0e86:	4628      	mov	r0, r5
 80a0e88:	f7ff fddb 	bl	80a0a42 <_ZN7VL53L0X7readRegEh>
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 80a0e8c:	3001      	adds	r0, #1
 80a0e8e:	0040      	lsls	r0, r0, #1
 80a0e90:	b2c0      	uxtb	r0, r0
 80a0e92:	8060      	strh	r0, [r4, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0e94:	2171      	movs	r1, #113	; 0x71
 80a0e96:	4628      	mov	r0, r5
 80a0e98:	f7ff fdf3 	bl	80a0a82 <_ZN7VL53L0X12readReg16BitEh>
 80a0e9c:	f7ff ff9e 	bl	80a0ddc <_ZN7VL53L0X13decodeTimeoutEm>
 80a0ea0:	8120      	strh	r0, [r4, #8]

  if (enables->pre_range)
 80a0ea2:	78f3      	ldrb	r3, [r6, #3]
 80a0ea4:	b113      	cbz	r3, 80a0eac <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE+0x64>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 80a0ea6:	88e3      	ldrh	r3, [r4, #6]
 80a0ea8:	1ac0      	subs	r0, r0, r3
 80a0eaa:	8120      	strh	r0, [r4, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 80a0eac:	78a1      	ldrb	r1, [r4, #2]
 80a0eae:	8920      	ldrh	r0, [r4, #8]
 80a0eb0:	f7ff ffb6 	bl	80a0e20 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->final_range_vcsel_period_pclks);
 80a0eb4:	6160      	str	r0, [r4, #20]
 80a0eb6:	bd70      	pop	{r4, r5, r6, pc}

080a0eb8 <_ZN7VL53L0X26getMeasurementTimingBudgetEv>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t VL53L0X::getMeasurementTimingBudget(void)
{
 80a0eb8:	b510      	push	{r4, lr}
 80a0eba:	4604      	mov	r4, r0
 80a0ebc:	b088      	sub	sp, #32
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a0ebe:	4669      	mov	r1, sp
 80a0ec0:	f7ff ff77 	bl	80a0db2 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a0ec4:	aa02      	add	r2, sp, #8
 80a0ec6:	4669      	mov	r1, sp
 80a0ec8:	4620      	mov	r0, r4
 80a0eca:	f7ff ffbd 	bl	80a0e48 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a0ece:	f89d 3000 	ldrb.w	r3, [sp]
 80a0ed2:	b11b      	cbz	r3, 80a0edc <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x24>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a0ed4:	9805      	ldr	r0, [sp, #20]
 80a0ed6:	f600 5084 	addw	r0, r0, #3460	; 0xd84
 80a0eda:	e001      	b.n	80a0ee0 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x28>
  uint16_t const DssOverhead        = 690;
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80a0edc:	f640 3036 	movw	r0, #2870	; 0xb36
  if (enables.tcc)
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a0ee0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a0ee4:	b12b      	cbz	r3, 80a0ef2 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x3a>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a0ee6:	9b05      	ldr	r3, [sp, #20]
 80a0ee8:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a0eec:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a0ef0:	e006      	b.n	80a0f00 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  }
  else if (enables.msrc)
 80a0ef2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a0ef6:	b11b      	cbz	r3, 80a0f00 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a0ef8:	9b05      	ldr	r3, [sp, #20]
 80a0efa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0efe:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a0f00:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80a0f04:	b11b      	cbz	r3, 80a0f0e <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x56>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a0f06:	9b06      	ldr	r3, [sp, #24]
 80a0f08:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0f0c:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a0f0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a0f12:	b11b      	cbz	r3, 80a0f1c <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x64>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80a0f14:	9b07      	ldr	r3, [sp, #28]
 80a0f16:	f203 2326 	addw	r3, r3, #550	; 0x226
 80a0f1a:	4418      	add	r0, r3
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 80a0f1c:	6160      	str	r0, [r4, #20]
  return budget_us;
}
 80a0f1e:	b008      	add	sp, #32
 80a0f20:	bd10      	pop	{r4, pc}
	...

080a0f24 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0f24:	4b08      	ldr	r3, [pc, #32]	; (80a0f48 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh+0x24>)

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a0f26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0f2a:	4359      	muls	r1, r3

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a0f2c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a0f30:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a0f34:	fbb1 f3f3 	udiv	r3, r1, r3
 80a0f38:	fbb1 f1f2 	udiv	r1, r1, r2
 80a0f3c:	fb02 3000 	mla	r0, r2, r0, r3
}
 80a0f40:	fbb0 f0f1 	udiv	r0, r0, r1
 80a0f44:	4770      	bx	lr
 80a0f46:	bf00      	nop
 80a0f48:	003a2f00 	.word	0x003a2f00

080a0f4c <_ZN7VL53L0X26setMeasurementTimingBudgetEm>:
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0f4c:	f644 631f 	movw	r3, #19999	; 0x4e1f
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a0f50:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0f52:	4299      	cmp	r1, r3
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a0f54:	b089      	sub	sp, #36	; 0x24
 80a0f56:	4606      	mov	r6, r0
 80a0f58:	460d      	mov	r5, r1
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0f5a:	d942      	bls.n	80a0fe2 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>

  uint32_t used_budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a0f5c:	4669      	mov	r1, sp
 80a0f5e:	f7ff ff28 	bl	80a0db2 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a0f62:	aa02      	add	r2, sp, #8
 80a0f64:	4669      	mov	r1, sp
 80a0f66:	4630      	mov	r0, r6
 80a0f68:	f7ff ff6e 	bl	80a0e48 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a0f6c:	f89d 3000 	ldrb.w	r3, [sp]
 80a0f70:	b11b      	cbz	r3, 80a0f7a <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x2e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a0f72:	9805      	ldr	r0, [sp, #20]
 80a0f74:	f600 3036 	addw	r0, r0, #2870	; 0xb36
 80a0f78:	e001      	b.n	80a0f7e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x32>

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80a0f7a:	f640 00e8 	movw	r0, #2280	; 0x8e8
  if (enables.tcc)
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a0f7e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a0f82:	b12b      	cbz	r3, 80a0f90 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x44>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a0f84:	9b05      	ldr	r3, [sp, #20]
 80a0f86:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a0f8a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a0f8e:	e006      	b.n	80a0f9e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  }
  else if (enables.msrc)
 80a0f90:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a0f94:	b11b      	cbz	r3, 80a0f9e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a0f96:	9b05      	ldr	r3, [sp, #20]
 80a0f98:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0f9c:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a0f9e:	f89d 7003 	ldrb.w	r7, [sp, #3]
 80a0fa2:	b11f      	cbz	r7, 80a0fac <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x60>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a0fa4:	9b06      	ldr	r3, [sp, #24]
 80a0fa6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0faa:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a0fac:	f89d 4004 	ldrb.w	r4, [sp, #4]
 80a0fb0:	b1ac      	cbz	r4, 80a0fde <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x92>
  {
    used_budget_us += FinalRangeOverhead;
 80a0fb2:	f200 2026 	addw	r0, r0, #550	; 0x226
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80a0fb6:	4285      	cmp	r5, r0
 80a0fb8:	d313      	bcc.n	80a0fe2 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint32_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80a0fba:	f89d 100a 	ldrb.w	r1, [sp, #10]
 80a0fbe:	1a28      	subs	r0, r5, r0
 80a0fc0:	f7ff ffb0 	bl	80a0f24 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>

    if (enables.pre_range)
 80a0fc4:	b117      	cbz	r7, 80a0fcc <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x80>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80a0fc6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80a0fca:	4418      	add	r0, r3
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80a0fcc:	f7ff ff12 	bl	80a0df4 <_ZN7VL53L0X13encodeTimeoutEm>
      encodeTimeout(final_range_timeout_mclks));
 80a0fd0:	2171      	movs	r1, #113	; 0x71
 80a0fd2:	4602      	mov	r2, r0
 80a0fd4:	4630      	mov	r0, r6
 80a0fd6:	f7ff fcea 	bl	80a09ae <_ZN7VL53L0X13writeReg16BitEht>

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 80a0fda:	6175      	str	r5, [r6, #20]
 80a0fdc:	e002      	b.n	80a0fe4 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  }
  return true;
 80a0fde:	2401      	movs	r4, #1
 80a0fe0:	e000      	b.n	80a0fe4 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0fe2:	2400      	movs	r4, #0
    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
  }
  return true;
}
 80a0fe4:	4620      	mov	r0, r4
 80a0fe6:	b009      	add	sp, #36	; 0x24
 80a0fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0fea <_ZN7VL53L0X27performSingleRefCalibrationEh>:
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a0fea:	b538      	push	{r3, r4, r5, lr}
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a0fec:	f041 0201 	orr.w	r2, r1, #1
 80a0ff0:	2100      	movs	r1, #0
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a0ff2:	4604      	mov	r4, r0
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a0ff4:	f7ff fcb6 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
 80a0ff8:	f000 fc1a 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>

  startTimeout();
 80a0ffc:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a0ffe:	2113      	movs	r1, #19
 80a1000:	4620      	mov	r0, r4
 80a1002:	f7ff fd1e 	bl	80a0a42 <_ZN7VL53L0X7readRegEh>
 80a1006:	f010 0507 	ands.w	r5, r0, #7
 80a100a:	d10b      	bne.n	80a1024 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x3a>
  {
    if (checkTimeoutExpired()) { return false; }
 80a100c:	6863      	ldr	r3, [r4, #4]
 80a100e:	2b00      	cmp	r3, #0
 80a1010:	d0f5      	beq.n	80a0ffe <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a1012:	f000 fc0d 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
 80a1016:	68e3      	ldr	r3, [r4, #12]
 80a1018:	1ac0      	subs	r0, r0, r3
 80a101a:	6863      	ldr	r3, [r4, #4]
 80a101c:	4298      	cmp	r0, r3
 80a101e:	d9ee      	bls.n	80a0ffe <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a1020:	4628      	mov	r0, r5
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  writeReg(SYSRANGE_START, 0x00);

  return true;
}
 80a1022:	bd38      	pop	{r3, r4, r5, pc}
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
  {
    if (checkTimeoutExpired()) { return false; }
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a1024:	4620      	mov	r0, r4
 80a1026:	2201      	movs	r2, #1
 80a1028:	210b      	movs	r1, #11
 80a102a:	f7ff fc9b 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  writeReg(SYSRANGE_START, 0x00);
 80a102e:	2200      	movs	r2, #0
 80a1030:	4620      	mov	r0, r4
 80a1032:	4611      	mov	r1, r2
 80a1034:	f7ff fc96 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
 80a1038:	2001      	movs	r0, #1
 80a103a:	bd38      	pop	{r3, r4, r5, pc}

080a103c <_ZN7VL53L0X4initEb>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool VL53L0X::init(bool io_2v8)
{
 80a103c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a103e:	4604      	mov	r4, r0
 80a1040:	b085      	sub	sp, #20
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 80a1042:	b149      	cbz	r1, 80a1058 <_ZN7VL53L0X4initEb+0x1c>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 80a1044:	2189      	movs	r1, #137	; 0x89
 80a1046:	f7ff fcfc 	bl	80a0a42 <_ZN7VL53L0X7readRegEh>
 80a104a:	f040 0201 	orr.w	r2, r0, #1
 80a104e:	b2d2      	uxtb	r2, r2
 80a1050:	2189      	movs	r1, #137	; 0x89
 80a1052:	4620      	mov	r0, r4
 80a1054:	f7ff fc86 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 80a1058:	2200      	movs	r2, #0
 80a105a:	2188      	movs	r1, #136	; 0x88
 80a105c:	4620      	mov	r0, r4
 80a105e:	f7ff fc81 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a1062:	2201      	movs	r2, #1
 80a1064:	2180      	movs	r1, #128	; 0x80
 80a1066:	4620      	mov	r0, r4
 80a1068:	f7ff fc7c 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a106c:	2201      	movs	r2, #1
 80a106e:	21ff      	movs	r1, #255	; 0xff
 80a1070:	4620      	mov	r0, r4
 80a1072:	f7ff fc77 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a1076:	2200      	movs	r2, #0
 80a1078:	4611      	mov	r1, r2
 80a107a:	4620      	mov	r0, r4
 80a107c:	f7ff fc72 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  stop_variable = readReg(0x91);
 80a1080:	2191      	movs	r1, #145	; 0x91
 80a1082:	4620      	mov	r0, r4
 80a1084:	f7ff fcdd 	bl	80a0a42 <_ZN7VL53L0X7readRegEh>
  writeReg(0x00, 0x01);
 80a1088:	2201      	movs	r2, #1
  writeReg(0x88, 0x00);

  writeReg(0x80, 0x01);
  writeReg(0xFF, 0x01);
  writeReg(0x00, 0x00);
  stop_variable = readReg(0x91);
 80a108a:	7420      	strb	r0, [r4, #16]
  writeReg(0x00, 0x01);
 80a108c:	2100      	movs	r1, #0
 80a108e:	4620      	mov	r0, r4
 80a1090:	f7ff fc68 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1094:	2200      	movs	r2, #0
 80a1096:	21ff      	movs	r1, #255	; 0xff
 80a1098:	4620      	mov	r0, r4
 80a109a:	f7ff fc63 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a109e:	2200      	movs	r2, #0
 80a10a0:	2180      	movs	r1, #128	; 0x80
 80a10a2:	4620      	mov	r0, r4
 80a10a4:	f7ff fc5e 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80a10a8:	2160      	movs	r1, #96	; 0x60
 80a10aa:	4620      	mov	r0, r4
 80a10ac:	f7ff fcc9 	bl	80a0a42 <_ZN7VL53L0X7readRegEh>
 80a10b0:	f040 0212 	orr.w	r2, r0, #18
 80a10b4:	b2d2      	uxtb	r2, r2
 80a10b6:	2160      	movs	r1, #96	; 0x60
 80a10b8:	4620      	mov	r0, r4
 80a10ba:	f7ff fc53 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80a10be:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a10c2:	4620      	mov	r0, r4
 80a10c4:	f7ff fd50 	bl	80a0b68 <_ZN7VL53L0X18setSignalRateLimitEf>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80a10c8:	22ff      	movs	r2, #255	; 0xff
 80a10ca:	2101      	movs	r1, #1
 80a10cc:	4620      	mov	r0, r4
 80a10ce:	f7ff fc49 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80a10d2:	f10d 0207 	add.w	r2, sp, #7
 80a10d6:	f10d 0106 	add.w	r1, sp, #6
 80a10da:	4620      	mov	r0, r4
 80a10dc:	f7ff fde1 	bl	80a0ca2 <_ZN7VL53L0X11getSpadInfoEPhPb>
 80a10e0:	b908      	cbnz	r0, 80a10e6 <_ZN7VL53L0X4initEb+0xaa>
 80a10e2:	2500      	movs	r5, #0
 80a10e4:	e21d      	b.n	80a1522 <_ZN7VL53L0X4initEb+0x4e6>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a10e6:	2306      	movs	r3, #6
 80a10e8:	aa02      	add	r2, sp, #8
 80a10ea:	21b0      	movs	r1, #176	; 0xb0
 80a10ec:	4620      	mov	r0, r4
 80a10ee:	f7ff fd11 	bl	80a0b14 <_ZN7VL53L0X9readMultiEhPhh>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 80a10f2:	2201      	movs	r2, #1
 80a10f4:	21ff      	movs	r1, #255	; 0xff
 80a10f6:	4620      	mov	r0, r4
 80a10f8:	f7ff fc34 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80a10fc:	2200      	movs	r2, #0
 80a10fe:	214f      	movs	r1, #79	; 0x4f
 80a1100:	4620      	mov	r0, r4
 80a1102:	f7ff fc2f 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80a1106:	222c      	movs	r2, #44	; 0x2c
 80a1108:	214e      	movs	r1, #78	; 0x4e
 80a110a:	4620      	mov	r0, r4
 80a110c:	f7ff fc2a 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1110:	2200      	movs	r2, #0
 80a1112:	21ff      	movs	r1, #255	; 0xff
 80a1114:	4620      	mov	r0, r4
 80a1116:	f7ff fc25 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a111a:	2500      	movs	r5, #0

  writeReg(0xFF, 0x01);
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80a111c:	4620      	mov	r0, r4
 80a111e:	21b6      	movs	r1, #182	; 0xb6
 80a1120:	22b4      	movs	r2, #180	; 0xb4
 80a1122:	f7ff fc1f 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;
 80a1126:	4629      	mov	r1, r5
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a1128:	f89d 3007 	ldrb.w	r3, [sp, #7]
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a112c:	f89d 6006 	ldrb.w	r6, [sp, #6]
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a1130:	2b00      	cmp	r3, #0
 80a1132:	bf14      	ite	ne
 80a1134:	200c      	movne	r0, #12
 80a1136:	2000      	moveq	r0, #0
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1138:	2701      	movs	r7, #1
 80a113a:	b2eb      	uxtb	r3, r5
 80a113c:	08da      	lsrs	r2, r3, #3
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a113e:	4298      	cmp	r0, r3
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1140:	f10d 0e10 	add.w	lr, sp, #16
 80a1144:	f003 0307 	and.w	r3, r3, #7
 80a1148:	4472      	add	r2, lr
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a114a:	d801      	bhi.n	80a1150 <_ZN7VL53L0X4initEb+0x114>
 80a114c:	428e      	cmp	r6, r1
 80a114e:	d108      	bne.n	80a1162 <_ZN7VL53L0X4initEb+0x126>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a1150:	f812 ec08 	ldrb.w	lr, [r2, #-8]
 80a1154:	fa07 f303 	lsl.w	r3, r7, r3
 80a1158:	ea2e 0303 	bic.w	r3, lr, r3
 80a115c:	f802 3c08 	strb.w	r3, [r2, #-8]
 80a1160:	e007      	b.n	80a1172 <_ZN7VL53L0X4initEb+0x136>
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 80a1162:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80a1166:	fa42 f303 	asr.w	r3, r2, r3
 80a116a:	07db      	lsls	r3, r3, #31
    {
      spads_enabled++;
 80a116c:	bf44      	itt	mi
 80a116e:	3101      	addmi	r1, #1
 80a1170:	b2c9      	uxtbmi	r1, r1
 80a1172:	3501      	adds	r5, #1
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
 80a1174:	2d30      	cmp	r5, #48	; 0x30
 80a1176:	d1e0      	bne.n	80a113a <_ZN7VL53L0X4initEb+0xfe>
    {
      spads_enabled++;
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a1178:	2306      	movs	r3, #6
 80a117a:	aa02      	add	r2, sp, #8
 80a117c:	21b0      	movs	r1, #176	; 0xb0
 80a117e:	4620      	mov	r0, r4
 80a1180:	f7ff fca7 	bl	80a0ad2 <_ZN7VL53L0X10writeMultiEhPKhh>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 80a1184:	2201      	movs	r2, #1
 80a1186:	21ff      	movs	r1, #255	; 0xff
 80a1188:	4620      	mov	r0, r4
 80a118a:	f7ff fbeb 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a118e:	2200      	movs	r2, #0
 80a1190:	4611      	mov	r1, r2
 80a1192:	4620      	mov	r0, r4
 80a1194:	f7ff fbe6 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1198:	2200      	movs	r2, #0
 80a119a:	21ff      	movs	r1, #255	; 0xff
 80a119c:	4620      	mov	r0, r4
 80a119e:	f7ff fbe1 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x09, 0x00);
 80a11a2:	2200      	movs	r2, #0
 80a11a4:	2109      	movs	r1, #9
 80a11a6:	4620      	mov	r0, r4
 80a11a8:	f7ff fbdc 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x10, 0x00);
 80a11ac:	2200      	movs	r2, #0
 80a11ae:	2110      	movs	r1, #16
 80a11b0:	4620      	mov	r0, r4
 80a11b2:	f7ff fbd7 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x11, 0x00);
 80a11b6:	2200      	movs	r2, #0
 80a11b8:	2111      	movs	r1, #17
 80a11ba:	4620      	mov	r0, r4
 80a11bc:	f7ff fbd2 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x24, 0x01);
 80a11c0:	2201      	movs	r2, #1
 80a11c2:	2124      	movs	r1, #36	; 0x24
 80a11c4:	4620      	mov	r0, r4
 80a11c6:	f7ff fbcd 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x25, 0xFF);
 80a11ca:	22ff      	movs	r2, #255	; 0xff
 80a11cc:	2125      	movs	r1, #37	; 0x25
 80a11ce:	4620      	mov	r0, r4
 80a11d0:	f7ff fbc8 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x75, 0x00);
 80a11d4:	2200      	movs	r2, #0
 80a11d6:	2175      	movs	r1, #117	; 0x75
 80a11d8:	4620      	mov	r0, r4
 80a11da:	f7ff fbc3 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a11de:	2201      	movs	r2, #1
 80a11e0:	21ff      	movs	r1, #255	; 0xff
 80a11e2:	4620      	mov	r0, r4
 80a11e4:	f7ff fbbe 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4E, 0x2C);
 80a11e8:	222c      	movs	r2, #44	; 0x2c
 80a11ea:	214e      	movs	r1, #78	; 0x4e
 80a11ec:	4620      	mov	r0, r4
 80a11ee:	f7ff fbb9 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x00);
 80a11f2:	2200      	movs	r2, #0
 80a11f4:	2148      	movs	r1, #72	; 0x48
 80a11f6:	4620      	mov	r0, r4
 80a11f8:	f7ff fbb4 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x20);
 80a11fc:	2220      	movs	r2, #32
 80a11fe:	4629      	mov	r1, r5
 80a1200:	4620      	mov	r0, r4
 80a1202:	f7ff fbaf 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1206:	2200      	movs	r2, #0
 80a1208:	21ff      	movs	r1, #255	; 0xff
 80a120a:	4620      	mov	r0, r4
 80a120c:	f7ff fbaa 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x09);
 80a1210:	2209      	movs	r2, #9
 80a1212:	4629      	mov	r1, r5
 80a1214:	4620      	mov	r0, r4
 80a1216:	f7ff fba5 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x54, 0x00);
 80a121a:	2200      	movs	r2, #0
 80a121c:	2154      	movs	r1, #84	; 0x54
 80a121e:	4620      	mov	r0, r4
 80a1220:	f7ff fba0 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a1224:	2204      	movs	r2, #4
 80a1226:	2131      	movs	r1, #49	; 0x31
 80a1228:	4620      	mov	r0, r4
 80a122a:	f7ff fb9b 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x32, 0x03);
 80a122e:	2203      	movs	r2, #3
 80a1230:	2132      	movs	r1, #50	; 0x32
 80a1232:	4620      	mov	r0, r4
 80a1234:	f7ff fb96 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x83);
 80a1238:	2283      	movs	r2, #131	; 0x83
 80a123a:	2140      	movs	r1, #64	; 0x40
 80a123c:	4620      	mov	r0, r4
 80a123e:	f7ff fb91 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x25);
 80a1242:	2225      	movs	r2, #37	; 0x25
 80a1244:	2146      	movs	r1, #70	; 0x46
 80a1246:	4620      	mov	r0, r4
 80a1248:	f7ff fb8c 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x60, 0x00);
 80a124c:	2200      	movs	r2, #0
 80a124e:	2160      	movs	r1, #96	; 0x60
 80a1250:	4620      	mov	r0, r4
 80a1252:	f7ff fb87 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x27, 0x00);
 80a1256:	2200      	movs	r2, #0
 80a1258:	2127      	movs	r1, #39	; 0x27
 80a125a:	4620      	mov	r0, r4
 80a125c:	f7ff fb82 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x50, 0x06);
 80a1260:	2206      	movs	r2, #6
 80a1262:	2150      	movs	r1, #80	; 0x50
 80a1264:	4620      	mov	r0, r4
 80a1266:	f7ff fb7d 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x51, 0x00);
 80a126a:	2200      	movs	r2, #0
 80a126c:	2151      	movs	r1, #81	; 0x51
 80a126e:	4620      	mov	r0, r4
 80a1270:	f7ff fb78 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x52, 0x96);
 80a1274:	2296      	movs	r2, #150	; 0x96
 80a1276:	2152      	movs	r1, #82	; 0x52
 80a1278:	4620      	mov	r0, r4
 80a127a:	f7ff fb73 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x56, 0x08);
 80a127e:	2208      	movs	r2, #8
 80a1280:	2156      	movs	r1, #86	; 0x56
 80a1282:	4620      	mov	r0, r4
 80a1284:	f7ff fb6e 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x57, 0x30);
 80a1288:	462a      	mov	r2, r5
 80a128a:	2157      	movs	r1, #87	; 0x57
 80a128c:	4620      	mov	r0, r4
 80a128e:	f7ff fb69 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x61, 0x00);
 80a1292:	2200      	movs	r2, #0
 80a1294:	2161      	movs	r1, #97	; 0x61
 80a1296:	4620      	mov	r0, r4
 80a1298:	f7ff fb64 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x62, 0x00);
 80a129c:	2200      	movs	r2, #0
 80a129e:	2162      	movs	r1, #98	; 0x62
 80a12a0:	4620      	mov	r0, r4
 80a12a2:	f7ff fb5f 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x64, 0x00);
 80a12a6:	2200      	movs	r2, #0
 80a12a8:	2164      	movs	r1, #100	; 0x64
 80a12aa:	4620      	mov	r0, r4
 80a12ac:	f7ff fb5a 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x65, 0x00);
 80a12b0:	2200      	movs	r2, #0
 80a12b2:	2165      	movs	r1, #101	; 0x65
 80a12b4:	4620      	mov	r0, r4
 80a12b6:	f7ff fb55 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x66, 0xA0);
 80a12ba:	22a0      	movs	r2, #160	; 0xa0
 80a12bc:	2166      	movs	r1, #102	; 0x66
 80a12be:	4620      	mov	r0, r4
 80a12c0:	f7ff fb50 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a12c4:	2201      	movs	r2, #1
 80a12c6:	21ff      	movs	r1, #255	; 0xff
 80a12c8:	4620      	mov	r0, r4
 80a12ca:	f7ff fb4b 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x22, 0x32);
 80a12ce:	2232      	movs	r2, #50	; 0x32
 80a12d0:	2122      	movs	r1, #34	; 0x22
 80a12d2:	4620      	mov	r0, r4
 80a12d4:	f7ff fb46 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x14);
 80a12d8:	2214      	movs	r2, #20
 80a12da:	2147      	movs	r1, #71	; 0x47
 80a12dc:	4620      	mov	r0, r4
 80a12de:	f7ff fb41 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x49, 0xFF);
 80a12e2:	22ff      	movs	r2, #255	; 0xff
 80a12e4:	2149      	movs	r1, #73	; 0x49
 80a12e6:	4620      	mov	r0, r4
 80a12e8:	f7ff fb3c 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4A, 0x00);
 80a12ec:	2200      	movs	r2, #0
 80a12ee:	214a      	movs	r1, #74	; 0x4a
 80a12f0:	4620      	mov	r0, r4
 80a12f2:	f7ff fb37 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a12f6:	2200      	movs	r2, #0
 80a12f8:	21ff      	movs	r1, #255	; 0xff
 80a12fa:	4620      	mov	r0, r4
 80a12fc:	f7ff fb32 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7A, 0x0A);
 80a1300:	220a      	movs	r2, #10
 80a1302:	217a      	movs	r1, #122	; 0x7a
 80a1304:	4620      	mov	r0, r4
 80a1306:	f7ff fb2d 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7B, 0x00);
 80a130a:	2200      	movs	r2, #0
 80a130c:	217b      	movs	r1, #123	; 0x7b
 80a130e:	4620      	mov	r0, r4
 80a1310:	f7ff fb28 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x78, 0x21);
 80a1314:	2221      	movs	r2, #33	; 0x21
 80a1316:	2178      	movs	r1, #120	; 0x78
 80a1318:	4620      	mov	r0, r4
 80a131a:	f7ff fb23 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a131e:	2201      	movs	r2, #1
 80a1320:	21ff      	movs	r1, #255	; 0xff
 80a1322:	4620      	mov	r0, r4
 80a1324:	f7ff fb1e 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x23, 0x34);
 80a1328:	2234      	movs	r2, #52	; 0x34
 80a132a:	2123      	movs	r1, #35	; 0x23
 80a132c:	4620      	mov	r0, r4
 80a132e:	f7ff fb19 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x42, 0x00);
 80a1332:	2200      	movs	r2, #0
 80a1334:	2142      	movs	r1, #66	; 0x42
 80a1336:	4620      	mov	r0, r4
 80a1338:	f7ff fb14 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0xFF);
 80a133c:	22ff      	movs	r2, #255	; 0xff
 80a133e:	2144      	movs	r1, #68	; 0x44
 80a1340:	4620      	mov	r0, r4
 80a1342:	f7ff fb0f 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x26);
 80a1346:	2226      	movs	r2, #38	; 0x26
 80a1348:	2145      	movs	r1, #69	; 0x45
 80a134a:	4620      	mov	r0, r4
 80a134c:	f7ff fb0a 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x05);
 80a1350:	2205      	movs	r2, #5
 80a1352:	2146      	movs	r1, #70	; 0x46
 80a1354:	4620      	mov	r0, r4
 80a1356:	f7ff fb05 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x40);
 80a135a:	2240      	movs	r2, #64	; 0x40
 80a135c:	4611      	mov	r1, r2
 80a135e:	4620      	mov	r0, r4
 80a1360:	f7ff fb00 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0E, 0x06);
 80a1364:	2206      	movs	r2, #6
 80a1366:	210e      	movs	r1, #14
 80a1368:	4620      	mov	r0, r4
 80a136a:	f7ff fafb 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x20, 0x1A);
 80a136e:	221a      	movs	r2, #26
 80a1370:	2120      	movs	r1, #32
 80a1372:	4620      	mov	r0, r4
 80a1374:	f7ff faf6 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x43, 0x40);
 80a1378:	2240      	movs	r2, #64	; 0x40
 80a137a:	2143      	movs	r1, #67	; 0x43
 80a137c:	4620      	mov	r0, r4
 80a137e:	f7ff faf1 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1382:	2200      	movs	r2, #0
 80a1384:	21ff      	movs	r1, #255	; 0xff
 80a1386:	4620      	mov	r0, r4
 80a1388:	f7ff faec 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x34, 0x03);
 80a138c:	2203      	movs	r2, #3
 80a138e:	2134      	movs	r1, #52	; 0x34
 80a1390:	4620      	mov	r0, r4
 80a1392:	f7ff fae7 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x35, 0x44);
 80a1396:	2244      	movs	r2, #68	; 0x44
 80a1398:	2135      	movs	r1, #53	; 0x35
 80a139a:	4620      	mov	r0, r4
 80a139c:	f7ff fae2 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a13a0:	2201      	movs	r2, #1
 80a13a2:	21ff      	movs	r1, #255	; 0xff
 80a13a4:	4620      	mov	r0, r4
 80a13a6:	f7ff fadd 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a13aa:	2204      	movs	r2, #4
 80a13ac:	2131      	movs	r1, #49	; 0x31
 80a13ae:	4620      	mov	r0, r4
 80a13b0:	f7ff fad8 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4B, 0x09);
 80a13b4:	2209      	movs	r2, #9
 80a13b6:	214b      	movs	r1, #75	; 0x4b
 80a13b8:	4620      	mov	r0, r4
 80a13ba:	f7ff fad3 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4C, 0x05);
 80a13be:	2205      	movs	r2, #5
 80a13c0:	214c      	movs	r1, #76	; 0x4c
 80a13c2:	4620      	mov	r0, r4
 80a13c4:	f7ff face 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4D, 0x04);
 80a13c8:	2204      	movs	r2, #4
 80a13ca:	214d      	movs	r1, #77	; 0x4d
 80a13cc:	4620      	mov	r0, r4
 80a13ce:	f7ff fac9 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a13d2:	2200      	movs	r2, #0
 80a13d4:	21ff      	movs	r1, #255	; 0xff
 80a13d6:	4620      	mov	r0, r4
 80a13d8:	f7ff fac4 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0x00);
 80a13dc:	2200      	movs	r2, #0
 80a13de:	2144      	movs	r1, #68	; 0x44
 80a13e0:	4620      	mov	r0, r4
 80a13e2:	f7ff fabf 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x20);
 80a13e6:	2220      	movs	r2, #32
 80a13e8:	2145      	movs	r1, #69	; 0x45
 80a13ea:	4620      	mov	r0, r4
 80a13ec:	f7ff faba 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x08);
 80a13f0:	2208      	movs	r2, #8
 80a13f2:	2147      	movs	r1, #71	; 0x47
 80a13f4:	4620      	mov	r0, r4
 80a13f6:	f7ff fab5 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x28);
 80a13fa:	2228      	movs	r2, #40	; 0x28
 80a13fc:	2148      	movs	r1, #72	; 0x48
 80a13fe:	4620      	mov	r0, r4
 80a1400:	f7ff fab0 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x67, 0x00);
 80a1404:	2200      	movs	r2, #0
 80a1406:	2167      	movs	r1, #103	; 0x67
 80a1408:	4620      	mov	r0, r4
 80a140a:	f7ff faab 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x70, 0x04);
 80a140e:	2204      	movs	r2, #4
 80a1410:	2170      	movs	r1, #112	; 0x70
 80a1412:	4620      	mov	r0, r4
 80a1414:	f7ff faa6 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x71, 0x01);
 80a1418:	2201      	movs	r2, #1
 80a141a:	2171      	movs	r1, #113	; 0x71
 80a141c:	4620      	mov	r0, r4
 80a141e:	f7ff faa1 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x72, 0xFE);
 80a1422:	22fe      	movs	r2, #254	; 0xfe
 80a1424:	2172      	movs	r1, #114	; 0x72
 80a1426:	4620      	mov	r0, r4
 80a1428:	f7ff fa9c 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x76, 0x00);
 80a142c:	2200      	movs	r2, #0
 80a142e:	2176      	movs	r1, #118	; 0x76
 80a1430:	4620      	mov	r0, r4
 80a1432:	f7ff fa97 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x77, 0x00);
 80a1436:	2200      	movs	r2, #0
 80a1438:	2177      	movs	r1, #119	; 0x77
 80a143a:	4620      	mov	r0, r4
 80a143c:	f7ff fa92 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1440:	2201      	movs	r2, #1
 80a1442:	21ff      	movs	r1, #255	; 0xff
 80a1444:	4620      	mov	r0, r4
 80a1446:	f7ff fa8d 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0D, 0x01);
 80a144a:	2201      	movs	r2, #1
 80a144c:	210d      	movs	r1, #13
 80a144e:	4620      	mov	r0, r4
 80a1450:	f7ff fa88 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a1454:	2200      	movs	r2, #0
 80a1456:	21ff      	movs	r1, #255	; 0xff
 80a1458:	4620      	mov	r0, r4
 80a145a:	f7ff fa83 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x01);
 80a145e:	2201      	movs	r2, #1
 80a1460:	2180      	movs	r1, #128	; 0x80
 80a1462:	4620      	mov	r0, r4
 80a1464:	f7ff fa7e 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x01, 0xF8);
 80a1468:	22f8      	movs	r2, #248	; 0xf8
 80a146a:	2101      	movs	r1, #1
 80a146c:	4620      	mov	r0, r4
 80a146e:	f7ff fa79 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a1472:	2201      	movs	r2, #1
 80a1474:	21ff      	movs	r1, #255	; 0xff
 80a1476:	4620      	mov	r0, r4
 80a1478:	f7ff fa74 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x8E, 0x01);
 80a147c:	2201      	movs	r2, #1
 80a147e:	218e      	movs	r1, #142	; 0x8e
 80a1480:	4620      	mov	r0, r4
 80a1482:	f7ff fa6f 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a1486:	2201      	movs	r2, #1
 80a1488:	2100      	movs	r1, #0
 80a148a:	4620      	mov	r0, r4
 80a148c:	f7ff fa6a 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a1490:	2200      	movs	r2, #0
 80a1492:	21ff      	movs	r1, #255	; 0xff
 80a1494:	4620      	mov	r0, r4
 80a1496:	f7ff fa65 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a149a:	2200      	movs	r2, #0
 80a149c:	2180      	movs	r1, #128	; 0x80
 80a149e:	4620      	mov	r0, r4
 80a14a0:	f7ff fa60 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80a14a4:	2204      	movs	r2, #4
 80a14a6:	210a      	movs	r1, #10
 80a14a8:	4620      	mov	r0, r4
 80a14aa:	f7ff fa5b 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80a14ae:	2184      	movs	r1, #132	; 0x84
 80a14b0:	4620      	mov	r0, r4
 80a14b2:	f7ff fac6 	bl	80a0a42 <_ZN7VL53L0X7readRegEh>
 80a14b6:	2184      	movs	r1, #132	; 0x84
 80a14b8:	f000 02ef 	and.w	r2, r0, #239	; 0xef
 80a14bc:	4620      	mov	r0, r4
 80a14be:	f7ff fa51 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a14c2:	2201      	movs	r2, #1
 80a14c4:	210b      	movs	r1, #11
 80a14c6:	4620      	mov	r0, r4
 80a14c8:	f7ff fa4c 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a14cc:	4620      	mov	r0, r4
 80a14ce:	f7ff fcf3 	bl	80a0eb8 <_ZN7VL53L0X26getMeasurementTimingBudgetEv>
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a14d2:	22e8      	movs	r2, #232	; 0xe8
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a14d4:	6160      	str	r0, [r4, #20]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a14d6:	2101      	movs	r1, #1
 80a14d8:	4620      	mov	r0, r4
 80a14da:	f7ff fa43 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(measurement_timing_budget_us);
 80a14de:	6961      	ldr	r1, [r4, #20]
 80a14e0:	4620      	mov	r0, r4
 80a14e2:	f7ff fd33 	bl	80a0f4c <_ZN7VL53L0X26setMeasurementTimingBudgetEm>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80a14e6:	2201      	movs	r2, #1
 80a14e8:	4611      	mov	r1, r2
 80a14ea:	4620      	mov	r0, r4
 80a14ec:	f7ff fa3a 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x40)) { return false; }
 80a14f0:	2140      	movs	r1, #64	; 0x40
 80a14f2:	4620      	mov	r0, r4
 80a14f4:	f7ff fd79 	bl	80a0fea <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a14f8:	2800      	cmp	r0, #0
 80a14fa:	f43f adf2 	beq.w	80a10e2 <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80a14fe:	2202      	movs	r2, #2
 80a1500:	2101      	movs	r1, #1
 80a1502:	4620      	mov	r0, r4
 80a1504:	f7ff fa2e 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x00)) { return false; }
 80a1508:	2100      	movs	r1, #0
 80a150a:	4620      	mov	r0, r4
 80a150c:	f7ff fd6d 	bl	80a0fea <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a1510:	4605      	mov	r5, r0
 80a1512:	2800      	cmp	r0, #0
 80a1514:	f43f ade5 	beq.w	80a10e2 <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a1518:	22e8      	movs	r2, #232	; 0xe8
 80a151a:	2101      	movs	r1, #1
 80a151c:	4620      	mov	r0, r4
 80a151e:	f7ff fa21 	bl	80a0964 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_PerformRefCalibration() end

  return true;
}
 80a1522:	4628      	mov	r0, r5
 80a1524:	b005      	add	sp, #20
 80a1526:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1528 <_GLOBAL__sub_I__ZN7VL53L0XC2Ev>:
 80a1528:	f000 b92a 	b.w	80a1780 <HAL_Pin_Map>

080a152c <_ZN9LIS3DHI2CD1Ev>:

}

LIS3DHI2C::~LIS3DHI2C() {

}
 80a152c:	4770      	bx	lr

080a152e <_ZN9LIS3DHI2CD0Ev>:

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {

}

LIS3DHI2C::~LIS3DHI2C() {
 80a152e:	b510      	push	{r4, lr}
 80a1530:	4604      	mov	r4, r0

}
 80a1532:	f7fe fdb2 	bl	80a009a <_ZdlPv>
 80a1536:	4620      	mov	r0, r4
 80a1538:	bd10      	pop	{r4, pc}

080a153a <_ZN9LIS3DHI2C9writeDataEhPKhj>:
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a153a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a153c:	4605      	mov	r5, r0
 80a153e:	461e      	mov	r6, r3
 80a1540:	460f      	mov	r7, r1

	wire.beginTransmission(getI2CAddr());
 80a1542:	7c01      	ldrb	r1, [r0, #16]
 80a1544:	68c0      	ldr	r0, [r0, #12]
 80a1546:	f041 0118 	orr.w	r1, r1, #24
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a154a:	4614      	mov	r4, r2

	wire.beginTransmission(getI2CAddr());
 80a154c:	f000 fead 	bl	80a22aa <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a1550:	68e8      	ldr	r0, [r5, #12]

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a1552:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a1554:	6803      	ldr	r3, [r0, #0]
bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a1556:	bf88      	it	hi
 80a1558:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a155c:	689b      	ldr	r3, [r3, #8]
 80a155e:	4639      	mov	r1, r7
 80a1560:	4798      	blx	r3
 80a1562:	4426      	add	r6, r4
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a1564:	42a6      	cmp	r6, r4
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a1566:	68e8      	ldr	r0, [r5, #12]

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a1568:	d005      	beq.n	80a1576 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x3c>
		wire.write(buf[ii]);
 80a156a:	6803      	ldr	r3, [r0, #0]
 80a156c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1570:	689b      	ldr	r3, [r3, #8]
 80a1572:	4798      	blx	r3

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a1574:	e7f6      	b.n	80a1564 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x2a>
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a1576:	f000 fea0 	bl	80a22ba <_ZN7TwoWire15endTransmissionEv>

	return (res == 0);
}
 80a157a:	fab0 f080 	clz	r0, r0
 80a157e:	0940      	lsrs	r0, r0, #5
 80a1580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1582 <_ZN9LIS3DHI2C8readDataEhPhj>:

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a1582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1584:	4604      	mov	r4, r0
 80a1586:	461e      	mov	r6, r3
 80a1588:	460f      	mov	r7, r1
	wire.beginTransmission(getI2CAddr());
 80a158a:	7c01      	ldrb	r1, [r0, #16]
 80a158c:	68c0      	ldr	r0, [r0, #12]
 80a158e:	f041 0118 	orr.w	r1, r1, #24

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a1592:	4615      	mov	r5, r2
	wire.beginTransmission(getI2CAddr());
 80a1594:	f000 fe89 	bl	80a22aa <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a1598:	68e0      	ldr	r0, [r4, #12]
}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a159a:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a159c:	6803      	ldr	r3, [r0, #0]

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a159e:	bf88      	it	hi
 80a15a0:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a15a4:	689b      	ldr	r3, [r3, #8]
 80a15a6:	4639      	mov	r1, r7
 80a15a8:	4798      	blx	r3

	uint8_t res = wire.endTransmission();
 80a15aa:	68e0      	ldr	r0, [r4, #12]
 80a15ac:	f000 fe85 	bl	80a22ba <_ZN7TwoWire15endTransmissionEv>
	if (res != 0) {
 80a15b0:	b9a8      	cbnz	r0, 80a15de <_ZN9LIS3DHI2C8readDataEhPhj+0x5c>
		return false;
	}

	wire.requestFrom((int)getI2CAddr(), numBytes);
 80a15b2:	7c21      	ldrb	r1, [r4, #16]
 80a15b4:	4632      	mov	r2, r6
 80a15b6:	f041 0118 	orr.w	r1, r1, #24
 80a15ba:	68e0      	ldr	r0, [r4, #12]
 80a15bc:	f000 fe70 	bl	80a22a0 <_ZN7TwoWire11requestFromEii>
 80a15c0:	442e      	add	r6, r5
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
 80a15c2:	42ae      	cmp	r6, r5
 80a15c4:	d00d      	beq.n	80a15e2 <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
 80a15c6:	68e0      	ldr	r0, [r4, #12]
 80a15c8:	6803      	ldr	r3, [r0, #0]
 80a15ca:	691b      	ldr	r3, [r3, #16]
 80a15cc:	4798      	blx	r3
 80a15ce:	b140      	cbz	r0, 80a15e2 <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
		buf[ii] = wire.read();
 80a15d0:	68e0      	ldr	r0, [r4, #12]
 80a15d2:	6803      	ldr	r3, [r0, #0]
 80a15d4:	695b      	ldr	r3, [r3, #20]
 80a15d6:	4798      	blx	r3
 80a15d8:	f805 0b01 	strb.w	r0, [r5], #1
 80a15dc:	e7f1      	b.n	80a15c2 <_ZN9LIS3DHI2C8readDataEhPhj+0x40>
	}
	wire.write(addr);

	uint8_t res = wire.endTransmission();
	if (res != 0) {
		return false;
 80a15de:	2000      	movs	r0, #0
 80a15e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a15e2:	2001      	movs	r0, #1
	wire.requestFrom((int)getI2CAddr(), numBytes);
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
		buf[ii] = wire.read();
	}
	return true;
}
 80a15e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a15e6 <_ZN12LIS3DHConfigC1Ev>:
#include "LIS3DH.h"

// Official project location:
// https://github.com/rickkas7/LIS3DH

LIS3DHConfig::LIS3DHConfig() {
 80a15e6:	2200      	movs	r2, #0
 80a15e8:	7002      	strb	r2, [r0, #0]
 80a15ea:	7042      	strb	r2, [r0, #1]
 80a15ec:	7082      	strb	r2, [r0, #2]
 80a15ee:	70c2      	strb	r2, [r0, #3]
 80a15f0:	7102      	strb	r2, [r0, #4]
 80a15f2:	7142      	strb	r2, [r0, #5]
 80a15f4:	7182      	strb	r2, [r0, #6]
 80a15f6:	71c2      	strb	r2, [r0, #7]
 80a15f8:	7202      	strb	r2, [r0, #8]
 80a15fa:	7242      	strb	r2, [r0, #9]
 80a15fc:	7282      	strb	r2, [r0, #10]
}
 80a15fe:	4770      	bx	lr

080a1600 <_ZN12LIS3DHConfig12setAccelModeEh>:
}

LIS3DHConfig &LIS3DHConfig::setAccelMode(uint8_t rate) {

	// Enable specified rate, with XYZ detection enabled
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
 80a1600:	f041 0107 	orr.w	r1, r1, #7
 80a1604:	7001      	strb	r1, [r0, #0]

	return *this;
}
 80a1606:	4770      	bx	lr

080a1608 <_ZN6LIS3DH13readRegister8Eh>:

	return pos;
}


uint8_t LIS3DH::readRegister8(uint8_t addr) {
 80a1608:	b513      	push	{r0, r1, r4, lr}

	uint8_t resp[1];
	readData(addr, resp, sizeof(resp));
 80a160a:	6803      	ldr	r3, [r0, #0]
 80a160c:	aa01      	add	r2, sp, #4
 80a160e:	689c      	ldr	r4, [r3, #8]
 80a1610:	2301      	movs	r3, #1
 80a1612:	47a0      	blx	r4

	return resp[0];
}
 80a1614:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80a1618:	b002      	add	sp, #8
 80a161a:	bd10      	pop	{r4, pc}

080a161c <_ZN6LIS3DH9hasDeviceEv>:
LIS3DH::~LIS3DH() {

}


bool LIS3DH::hasDevice() {
 80a161c:	b538      	push	{r3, r4, r5, lr}
 80a161e:	4605      	mov	r5, r0
 80a1620:	240a      	movs	r4, #10
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
 80a1622:	210f      	movs	r1, #15
 80a1624:	4628      	mov	r0, r5
 80a1626:	f7ff ffef 	bl	80a1608 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
 80a162a:	2833      	cmp	r0, #51	; 0x33
			found = true;
 80a162c:	f04f 0001 	mov.w	r0, #1

bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
		if (whoami == WHO_AM_I) {
 80a1630:	d005      	beq.n	80a163e <_ZN6LIS3DH9hasDeviceEv+0x22>
			found = true;
			break;
		}
		delay(1);
 80a1632:	f000 fbbf 	bl	80a1db4 <delay>
}


bool LIS3DH::hasDevice() {
	bool found = false;
	for(int tries = 0; tries < 10; tries++) {
 80a1636:	3c01      	subs	r4, #1
 80a1638:	d1f3      	bne.n	80a1622 <_ZN6LIS3DH9hasDeviceEv+0x6>

}


bool LIS3DH::hasDevice() {
	bool found = false;
 80a163a:	4620      	mov	r0, r4
 80a163c:	bd38      	pop	{r3, r4, r5, pc}
			break;
		}
		delay(1);
	}
	return found;
}
 80a163e:	bd38      	pop	{r3, r4, r5, pc}

080a1640 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a1640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a1642:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a1644:	2107      	movs	r1, #7

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a1646:	4606      	mov	r6, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a1648:	f7ff ffde 	bl	80a1608 <_ZN6LIS3DH13readRegister8Eh>
 80a164c:	f000 0008 	and.w	r0, r0, #8

	bool hasData = ((statusAuxReg & STATUS_AUX_321DA) != 0);
 80a1650:	2800      	cmp	r0, #0
 80a1652:	bf14      	ite	ne
 80a1654:	2501      	movne	r5, #1
 80a1656:	2500      	moveq	r5, #0

	//Serial.printlnf("fifoSrcReg=0x%02x", fifoSrcReg);

	if (hasData) {
 80a1658:	d01b      	beq.n	80a1692 <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x52>
		uint8_t resp[6];
		readData(REG_OUT_X_L, resp, sizeof(resp));
 80a165a:	6833      	ldr	r3, [r6, #0]
 80a165c:	466a      	mov	r2, sp
 80a165e:	689f      	ldr	r7, [r3, #8]
 80a1660:	2128      	movs	r1, #40	; 0x28
 80a1662:	2306      	movs	r3, #6
 80a1664:	4630      	mov	r0, r6
 80a1666:	47b8      	blx	r7

		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
 80a1668:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a166c:	f89d 3000 	ldrb.w	r3, [sp]
 80a1670:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1674:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
 80a1676:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a167a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a167e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1682:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
 80a1684:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a1688:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a168c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1690:	80a3      	strh	r3, [r4, #4]
	}
	return hasData;
}
 80a1692:	4628      	mov	r0, r5
 80a1694:	b003      	add	sp, #12
 80a1696:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1698 <_ZN6LIS3DH14writeRegister8Ehh>:

	return resp[0] | (((uint16_t)resp[1]) << 8);
}


void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
 80a1698:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a169a:	ac02      	add	r4, sp, #8

	writeData(addr, req, sizeof(req));
 80a169c:	6803      	ldr	r3, [r0, #0]

void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
	// Serial.printlnf("writeRegister addr=%02x value=%02x", addr, value);

	uint8_t req[1];
	req[0] = value;
 80a169e:	f804 2d04 	strb.w	r2, [r4, #-4]!

	writeData(addr, req, sizeof(req));
 80a16a2:	68dd      	ldr	r5, [r3, #12]
 80a16a4:	4622      	mov	r2, r4
 80a16a6:	2301      	movs	r3, #1
 80a16a8:	47a8      	blx	r5
}
 80a16aa:	b003      	add	sp, #12
 80a16ac:	bd30      	pop	{r4, r5, pc}
	...

080a16b0 <_ZN6LIS3DH5setupER12LIS3DHConfig>:
		delay(1);
	}
	return found;
}

bool LIS3DH::setup(LIS3DHConfig &config) {
 80a16b0:	b570      	push	{r4, r5, r6, lr}
 80a16b2:	4604      	mov	r4, r0
 80a16b4:	460d      	mov	r5, r1

	if (!hasDevice()) {
 80a16b6:	f7ff ffb1 	bl	80a161c <_ZN6LIS3DH9hasDeviceEv>
 80a16ba:	4606      	mov	r6, r0
 80a16bc:	b928      	cbnz	r0, 80a16ca <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		Serial.println("device not found");
 80a16be:	f000 fca7 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a16c2:	4928      	ldr	r1, [pc, #160]	; (80a1764 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
 80a16c4:	f000 fad0 	bl	80a1c68 <_ZN5Print7printlnEPKc>
		return false;
 80a16c8:	e049      	b.n	80a175e <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
	}

	writeRegister8(REG_CTRL_REG1, config.reg1);
 80a16ca:	782a      	ldrb	r2, [r5, #0]
 80a16cc:	2120      	movs	r1, #32
 80a16ce:	4620      	mov	r0, r4
 80a16d0:	f7ff ffe2 	bl	80a1698 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
 80a16d4:	786a      	ldrb	r2, [r5, #1]
 80a16d6:	2121      	movs	r1, #33	; 0x21
 80a16d8:	4620      	mov	r0, r4
 80a16da:	f7ff ffdd 	bl	80a1698 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
 80a16de:	78aa      	ldrb	r2, [r5, #2]
 80a16e0:	2122      	movs	r1, #34	; 0x22
 80a16e2:	4620      	mov	r0, r4
 80a16e4:	f7ff ffd8 	bl	80a1698 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
 80a16e8:	78ea      	ldrb	r2, [r5, #3]
 80a16ea:	2123      	movs	r1, #35	; 0x23
 80a16ec:	4620      	mov	r0, r4
 80a16ee:	f7ff ffd3 	bl	80a1698 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
 80a16f2:	792a      	ldrb	r2, [r5, #4]
 80a16f4:	2124      	movs	r1, #36	; 0x24
 80a16f6:	4620      	mov	r0, r4
 80a16f8:	f7ff ffce 	bl	80a1698 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
 80a16fc:	796a      	ldrb	r2, [r5, #5]
 80a16fe:	2125      	movs	r1, #37	; 0x25
 80a1700:	4620      	mov	r0, r4
 80a1702:	f7ff ffc9 	bl	80a1698 <_ZN6LIS3DH14writeRegister8Ehh>

	if (config.setReference) {
 80a1706:	79ab      	ldrb	r3, [r5, #6]
 80a1708:	b11b      	cbz	r3, 80a1712 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x62>
		// In normal mode, reading the reference register sets it for the current normal force
		// (the normal force of gravity acting on the device)
		readRegister8(REG_REFERENCE);
 80a170a:	2126      	movs	r1, #38	; 0x26
 80a170c:	4620      	mov	r0, r4
 80a170e:	f7ff ff7b 	bl	80a1608 <_ZN6LIS3DH13readRegister8Eh>
	}
	// Set FIFO mode
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
 80a1712:	7aaa      	ldrb	r2, [r5, #10]
 80a1714:	212e      	movs	r1, #46	; 0x2e
 80a1716:	4620      	mov	r0, r4
 80a1718:	f7ff ffbe 	bl	80a1698 <_ZN6LIS3DH14writeRegister8Ehh>



	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
 80a171c:	78ab      	ldrb	r3, [r5, #2]
 80a171e:	065b      	lsls	r3, r3, #25
 80a1720:	d51d      	bpl.n	80a175e <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>

		writeRegister8(REG_INT1_THS, config.int1_ths);
 80a1722:	79ea      	ldrb	r2, [r5, #7]
 80a1724:	2132      	movs	r1, #50	; 0x32
 80a1726:	4620      	mov	r0, r4
 80a1728:	f7ff ffb6 	bl	80a1698 <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
 80a172c:	7a2a      	ldrb	r2, [r5, #8]
 80a172e:	2133      	movs	r1, #51	; 0x33
 80a1730:	4620      	mov	r0, r4
 80a1732:	f7ff ffb1 	bl	80a1698 <_ZN6LIS3DH14writeRegister8Ehh>

		if (intPin >= 0) {
 80a1736:	6863      	ldr	r3, [r4, #4]
 80a1738:	2b00      	cmp	r3, #0
 80a173a:	db0a      	blt.n	80a1752 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa2>
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a173c:	7a6a      	ldrb	r2, [r5, #9]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a173e:	4620      	mov	r0, r4
			// as I can tell this never works. Merely setting the INT1_CFG does not ever generate an
			// interrupt for me.

			// Remember the INT1_CFG setting because we're apparently supposed to set it again after
			// clearing an interrupt.
			int1_cfg = config.int1_cfg;
 80a1740:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
 80a1742:	2130      	movs	r1, #48	; 0x30
 80a1744:	f7ff ffa8 	bl	80a1698 <_ZN6LIS3DH14writeRegister8Ehh>

			// Clear the interrupt just in case
			readRegister8(REG_INT1_SRC);
 80a1748:	2131      	movs	r1, #49	; 0x31
 80a174a:	4620      	mov	r0, r4
 80a174c:	f7ff ff5c 	bl	80a1608 <_ZN6LIS3DH13readRegister8Eh>
 80a1750:	e005      	b.n	80a175e <_ZN6LIS3DH5setupER12LIS3DHConfig+0xae>
		}
		else {
			int1_cfg = 0;
 80a1752:	2200      	movs	r2, #0
 80a1754:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
 80a1756:	2130      	movs	r1, #48	; 0x30
 80a1758:	4620      	mov	r0, r4
 80a175a:	f7ff ff9d 	bl	80a1698 <_ZN6LIS3DH14writeRegister8Ehh>




	return true;
}
 80a175e:	4630      	mov	r0, r6
 80a1760:	bd70      	pop	{r4, r5, r6, pc}
 80a1762:	bf00      	nop
 80a1764:	080a30b8 	.word	0x080a30b8

080a1768 <_ZN9LIS3DHI2CC1ER7TwoWirehi>:

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a1768:	b510      	push	{r4, lr}

	return *this;
}


LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
 80a176a:	6043      	str	r3, [r0, #4]

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a176c:	4b02      	ldr	r3, [pc, #8]	; (80a1778 <_ZN9LIS3DHI2CC1ER7TwoWirehi+0x10>)
 80a176e:	60c1      	str	r1, [r0, #12]
 80a1770:	6003      	str	r3, [r0, #0]
 80a1772:	7402      	strb	r2, [r0, #16]

}
 80a1774:	bd10      	pop	{r4, pc}
 80a1776:	bf00      	nop
 80a1778:	080a30a8 	.word	0x080a30a8

080a177c <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:
 80a177c:	f000 b800 	b.w	80a1780 <HAL_Pin_Map>

080a1780 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a1780:	b508      	push	{r3, lr}
 80a1782:	4b02      	ldr	r3, [pc, #8]	; (80a178c <HAL_Pin_Map+0xc>)
 80a1784:	681b      	ldr	r3, [r3, #0]
 80a1786:	681b      	ldr	r3, [r3, #0]
 80a1788:	9301      	str	r3, [sp, #4]
 80a178a:	bd08      	pop	{r3, pc}
 80a178c:	080601b0 	.word	0x080601b0

080a1790 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1790:	b508      	push	{r3, lr}
 80a1792:	4b02      	ldr	r3, [pc, #8]	; (80a179c <HAL_Validate_Pin_Function+0xc>)
 80a1794:	681b      	ldr	r3, [r3, #0]
 80a1796:	685b      	ldr	r3, [r3, #4]
 80a1798:	9301      	str	r3, [sp, #4]
 80a179a:	bd08      	pop	{r3, pc}
 80a179c:	080601b0 	.word	0x080601b0

080a17a0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a17a0:	b508      	push	{r3, lr}
 80a17a2:	4b02      	ldr	r3, [pc, #8]	; (80a17ac <HAL_Pin_Mode+0xc>)
 80a17a4:	681b      	ldr	r3, [r3, #0]
 80a17a6:	689b      	ldr	r3, [r3, #8]
 80a17a8:	9301      	str	r3, [sp, #4]
 80a17aa:	bd08      	pop	{r3, pc}
 80a17ac:	080601b0 	.word	0x080601b0

080a17b0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a17b0:	b508      	push	{r3, lr}
 80a17b2:	4b02      	ldr	r3, [pc, #8]	; (80a17bc <HAL_Get_Pin_Mode+0xc>)
 80a17b4:	681b      	ldr	r3, [r3, #0]
 80a17b6:	68db      	ldr	r3, [r3, #12]
 80a17b8:	9301      	str	r3, [sp, #4]
 80a17ba:	bd08      	pop	{r3, pc}
 80a17bc:	080601b0 	.word	0x080601b0

080a17c0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a17c0:	b508      	push	{r3, lr}
 80a17c2:	4b02      	ldr	r3, [pc, #8]	; (80a17cc <HAL_GPIO_Write+0xc>)
 80a17c4:	681b      	ldr	r3, [r3, #0]
 80a17c6:	691b      	ldr	r3, [r3, #16]
 80a17c8:	9301      	str	r3, [sp, #4]
 80a17ca:	bd08      	pop	{r3, pc}
 80a17cc:	080601b0 	.word	0x080601b0

080a17d0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a17d0:	b508      	push	{r3, lr}
 80a17d2:	4b02      	ldr	r3, [pc, #8]	; (80a17dc <HAL_GPIO_Read+0xc>)
 80a17d4:	681b      	ldr	r3, [r3, #0]
 80a17d6:	695b      	ldr	r3, [r3, #20]
 80a17d8:	9301      	str	r3, [sp, #4]
 80a17da:	bd08      	pop	{r3, pc}
 80a17dc:	080601b0 	.word	0x080601b0

080a17e0 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a17e0:	b508      	push	{r3, lr}
 80a17e2:	4b02      	ldr	r3, [pc, #8]	; (80a17ec <HAL_Interrupts_Attach+0xc>)
 80a17e4:	681b      	ldr	r3, [r3, #0]
 80a17e6:	699b      	ldr	r3, [r3, #24]
 80a17e8:	9301      	str	r3, [sp, #4]
 80a17ea:	bd08      	pop	{r3, pc}
 80a17ec:	080601b0 	.word	0x080601b0

080a17f0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a17f0:	b508      	push	{r3, lr}
 80a17f2:	4b02      	ldr	r3, [pc, #8]	; (80a17fc <HAL_Interrupts_Detach+0xc>)
 80a17f4:	681b      	ldr	r3, [r3, #0]
 80a17f6:	69db      	ldr	r3, [r3, #28]
 80a17f8:	9301      	str	r3, [sp, #4]
 80a17fa:	bd08      	pop	{r3, pc}
 80a17fc:	080601b0 	.word	0x080601b0

080a1800 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1800:	b508      	push	{r3, lr}
 80a1802:	4b02      	ldr	r3, [pc, #8]	; (80a180c <HAL_SPI_Init+0xc>)
 80a1804:	681b      	ldr	r3, [r3, #0]
 80a1806:	69db      	ldr	r3, [r3, #28]
 80a1808:	9301      	str	r3, [sp, #4]
 80a180a:	bd08      	pop	{r3, pc}
 80a180c:	080601b4 	.word	0x080601b4

080a1810 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1810:	b508      	push	{r3, lr}
 80a1812:	4b02      	ldr	r3, [pc, #8]	; (80a181c <HAL_SPI_Is_Enabled+0xc>)
 80a1814:	681b      	ldr	r3, [r3, #0]
 80a1816:	6a1b      	ldr	r3, [r3, #32]
 80a1818:	9301      	str	r3, [sp, #4]
 80a181a:	bd08      	pop	{r3, pc}
 80a181c:	080601b4 	.word	0x080601b4

080a1820 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1820:	b508      	push	{r3, lr}
 80a1822:	4b02      	ldr	r3, [pc, #8]	; (80a182c <HAL_RNG_GetRandomNumber+0xc>)
 80a1824:	681b      	ldr	r3, [r3, #0]
 80a1826:	685b      	ldr	r3, [r3, #4]
 80a1828:	9301      	str	r3, [sp, #4]
 80a182a:	bd08      	pop	{r3, pc}
 80a182c:	0806019c 	.word	0x0806019c

080a1830 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1830:	b508      	push	{r3, lr}
 80a1832:	4b02      	ldr	r3, [pc, #8]	; (80a183c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1834:	681b      	ldr	r3, [r3, #0]
 80a1836:	695b      	ldr	r3, [r3, #20]
 80a1838:	9301      	str	r3, [sp, #4]
 80a183a:	bd08      	pop	{r3, pc}
 80a183c:	0806019c 	.word	0x0806019c

080a1840 <os_timer_create>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 80a1840:	b508      	push	{r3, lr}
 80a1842:	4b02      	ldr	r3, [pc, #8]	; (80a184c <os_timer_create+0xc>)
 80a1844:	681b      	ldr	r3, [r3, #0]
 80a1846:	6a1b      	ldr	r3, [r3, #32]
 80a1848:	9301      	str	r3, [sp, #4]
 80a184a:	bd08      	pop	{r3, pc}
 80a184c:	080601d0 	.word	0x080601d0

080a1850 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 80a1850:	b508      	push	{r3, lr}
 80a1852:	4b02      	ldr	r3, [pc, #8]	; (80a185c <os_timer_destroy+0xc>)
 80a1854:	681b      	ldr	r3, [r3, #0]
 80a1856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1858:	9301      	str	r3, [sp, #4]
 80a185a:	bd08      	pop	{r3, pc}
 80a185c:	080601d0 	.word	0x080601d0

080a1860 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 80a1860:	b508      	push	{r3, lr}
 80a1862:	4b02      	ldr	r3, [pc, #8]	; (80a186c <os_timer_get_id+0xc>)
 80a1864:	681b      	ldr	r3, [r3, #0]
 80a1866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1868:	9301      	str	r3, [sp, #4]
 80a186a:	bd08      	pop	{r3, pc}
 80a186c:	080601d0 	.word	0x080601d0

080a1870 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 80a1870:	b508      	push	{r3, lr}
 80a1872:	4b02      	ldr	r3, [pc, #8]	; (80a187c <os_timer_change+0xc>)
 80a1874:	681b      	ldr	r3, [r3, #0]
 80a1876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1878:	9301      	str	r3, [sp, #4]
 80a187a:	bd08      	pop	{r3, pc}
 80a187c:	080601d0 	.word	0x080601d0

080a1880 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1880:	b508      	push	{r3, lr}
 80a1882:	4b02      	ldr	r3, [pc, #8]	; (80a188c <os_mutex_create+0xc>)
 80a1884:	681b      	ldr	r3, [r3, #0]
 80a1886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1888:	9301      	str	r3, [sp, #4]
 80a188a:	bd08      	pop	{r3, pc}
 80a188c:	080601d0 	.word	0x080601d0

080a1890 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1890:	b508      	push	{r3, lr}
 80a1892:	4b02      	ldr	r3, [pc, #8]	; (80a189c <HAL_USART_Init+0xc>)
 80a1894:	681b      	ldr	r3, [r3, #0]
 80a1896:	699b      	ldr	r3, [r3, #24]
 80a1898:	9301      	str	r3, [sp, #4]
 80a189a:	bd08      	pop	{r3, pc}
 80a189c:	080601c4 	.word	0x080601c4

080a18a0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a18a0:	b508      	push	{r3, lr}
 80a18a2:	4b02      	ldr	r3, [pc, #8]	; (80a18ac <HAL_USART_Write_Data+0xc>)
 80a18a4:	681b      	ldr	r3, [r3, #0]
 80a18a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a18a8:	9301      	str	r3, [sp, #4]
 80a18aa:	bd08      	pop	{r3, pc}
 80a18ac:	080601c4 	.word	0x080601c4

080a18b0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a18b0:	b508      	push	{r3, lr}
 80a18b2:	4b02      	ldr	r3, [pc, #8]	; (80a18bc <HAL_USART_Available_Data+0xc>)
 80a18b4:	681b      	ldr	r3, [r3, #0]
 80a18b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a18b8:	9301      	str	r3, [sp, #4]
 80a18ba:	bd08      	pop	{r3, pc}
 80a18bc:	080601c4 	.word	0x080601c4

080a18c0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a18c0:	b508      	push	{r3, lr}
 80a18c2:	4b02      	ldr	r3, [pc, #8]	; (80a18cc <HAL_USART_Read_Data+0xc>)
 80a18c4:	681b      	ldr	r3, [r3, #0]
 80a18c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a18c8:	9301      	str	r3, [sp, #4]
 80a18ca:	bd08      	pop	{r3, pc}
 80a18cc:	080601c4 	.word	0x080601c4

080a18d0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a18d0:	b508      	push	{r3, lr}
 80a18d2:	4b02      	ldr	r3, [pc, #8]	; (80a18dc <HAL_USART_Peek_Data+0xc>)
 80a18d4:	681b      	ldr	r3, [r3, #0]
 80a18d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a18d8:	9301      	str	r3, [sp, #4]
 80a18da:	bd08      	pop	{r3, pc}
 80a18dc:	080601c4 	.word	0x080601c4

080a18e0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a18e0:	b508      	push	{r3, lr}
 80a18e2:	4b02      	ldr	r3, [pc, #8]	; (80a18ec <HAL_USART_Flush_Data+0xc>)
 80a18e4:	681b      	ldr	r3, [r3, #0]
 80a18e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a18e8:	9301      	str	r3, [sp, #4]
 80a18ea:	bd08      	pop	{r3, pc}
 80a18ec:	080601c4 	.word	0x080601c4

080a18f0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a18f0:	b508      	push	{r3, lr}
 80a18f2:	4b02      	ldr	r3, [pc, #8]	; (80a18fc <HAL_USART_Is_Enabled+0xc>)
 80a18f4:	681b      	ldr	r3, [r3, #0]
 80a18f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a18f8:	9301      	str	r3, [sp, #4]
 80a18fa:	bd08      	pop	{r3, pc}
 80a18fc:	080601c4 	.word	0x080601c4

080a1900 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1900:	b508      	push	{r3, lr}
 80a1902:	4b02      	ldr	r3, [pc, #8]	; (80a190c <HAL_USART_Available_Data_For_Write+0xc>)
 80a1904:	681b      	ldr	r3, [r3, #0]
 80a1906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1908:	9301      	str	r3, [sp, #4]
 80a190a:	bd08      	pop	{r3, pc}
 80a190c:	080601c4 	.word	0x080601c4

080a1910 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a1910:	b508      	push	{r3, lr}
 80a1912:	4b02      	ldr	r3, [pc, #8]	; (80a191c <HAL_I2C_Set_Speed+0xc>)
 80a1914:	681b      	ldr	r3, [r3, #0]
 80a1916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1918:	9301      	str	r3, [sp, #4]
 80a191a:	bd08      	pop	{r3, pc}
 80a191c:	080601ac 	.word	0x080601ac

080a1920 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a1920:	b508      	push	{r3, lr}
 80a1922:	4b02      	ldr	r3, [pc, #8]	; (80a192c <HAL_I2C_Begin+0xc>)
 80a1924:	681b      	ldr	r3, [r3, #0]
 80a1926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1928:	9301      	str	r3, [sp, #4]
 80a192a:	bd08      	pop	{r3, pc}
 80a192c:	080601ac 	.word	0x080601ac

080a1930 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a1930:	b508      	push	{r3, lr}
 80a1932:	4b02      	ldr	r3, [pc, #8]	; (80a193c <HAL_I2C_Request_Data+0xc>)
 80a1934:	681b      	ldr	r3, [r3, #0]
 80a1936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1938:	9301      	str	r3, [sp, #4]
 80a193a:	bd08      	pop	{r3, pc}
 80a193c:	080601ac 	.word	0x080601ac

080a1940 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a1940:	b508      	push	{r3, lr}
 80a1942:	4b02      	ldr	r3, [pc, #8]	; (80a194c <HAL_I2C_Begin_Transmission+0xc>)
 80a1944:	681b      	ldr	r3, [r3, #0]
 80a1946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1948:	9301      	str	r3, [sp, #4]
 80a194a:	bd08      	pop	{r3, pc}
 80a194c:	080601ac 	.word	0x080601ac

080a1950 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a1950:	b508      	push	{r3, lr}
 80a1952:	4b02      	ldr	r3, [pc, #8]	; (80a195c <HAL_I2C_End_Transmission+0xc>)
 80a1954:	681b      	ldr	r3, [r3, #0]
 80a1956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1958:	9301      	str	r3, [sp, #4]
 80a195a:	bd08      	pop	{r3, pc}
 80a195c:	080601ac 	.word	0x080601ac

080a1960 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1960:	b508      	push	{r3, lr}
 80a1962:	4b02      	ldr	r3, [pc, #8]	; (80a196c <HAL_I2C_Write_Data+0xc>)
 80a1964:	681b      	ldr	r3, [r3, #0]
 80a1966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1968:	9301      	str	r3, [sp, #4]
 80a196a:	bd08      	pop	{r3, pc}
 80a196c:	080601ac 	.word	0x080601ac

080a1970 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1970:	b508      	push	{r3, lr}
 80a1972:	4b02      	ldr	r3, [pc, #8]	; (80a197c <HAL_I2C_Available_Data+0xc>)
 80a1974:	681b      	ldr	r3, [r3, #0]
 80a1976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1978:	9301      	str	r3, [sp, #4]
 80a197a:	bd08      	pop	{r3, pc}
 80a197c:	080601ac 	.word	0x080601ac

080a1980 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1980:	b508      	push	{r3, lr}
 80a1982:	4b02      	ldr	r3, [pc, #8]	; (80a198c <HAL_I2C_Read_Data+0xc>)
 80a1984:	681b      	ldr	r3, [r3, #0]
 80a1986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1988:	9301      	str	r3, [sp, #4]
 80a198a:	bd08      	pop	{r3, pc}
 80a198c:	080601ac 	.word	0x080601ac

080a1990 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1990:	b508      	push	{r3, lr}
 80a1992:	4b02      	ldr	r3, [pc, #8]	; (80a199c <HAL_I2C_Peek_Data+0xc>)
 80a1994:	681b      	ldr	r3, [r3, #0]
 80a1996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1998:	9301      	str	r3, [sp, #4]
 80a199a:	bd08      	pop	{r3, pc}
 80a199c:	080601ac 	.word	0x080601ac

080a19a0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a19a0:	b508      	push	{r3, lr}
 80a19a2:	4b02      	ldr	r3, [pc, #8]	; (80a19ac <HAL_I2C_Flush_Data+0xc>)
 80a19a4:	681b      	ldr	r3, [r3, #0]
 80a19a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a19a8:	9301      	str	r3, [sp, #4]
 80a19aa:	bd08      	pop	{r3, pc}
 80a19ac:	080601ac 	.word	0x080601ac

080a19b0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a19b0:	b508      	push	{r3, lr}
 80a19b2:	4b02      	ldr	r3, [pc, #8]	; (80a19bc <HAL_I2C_Is_Enabled+0xc>)
 80a19b4:	681b      	ldr	r3, [r3, #0]
 80a19b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a19b8:	9301      	str	r3, [sp, #4]
 80a19ba:	bd08      	pop	{r3, pc}
 80a19bc:	080601ac 	.word	0x080601ac

080a19c0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a19c0:	b508      	push	{r3, lr}
 80a19c2:	4b03      	ldr	r3, [pc, #12]	; (80a19d0 <HAL_I2C_Init+0x10>)
 80a19c4:	681b      	ldr	r3, [r3, #0]
 80a19c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a19ca:	9301      	str	r3, [sp, #4]
 80a19cc:	bd08      	pop	{r3, pc}
 80a19ce:	0000      	.short	0x0000
 80a19d0:	080601ac 	.word	0x080601ac

080a19d4 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
 80a19d4:	b508      	push	{r3, lr}
 80a19d6:	4b02      	ldr	r3, [pc, #8]	; (80a19e0 <HAL_Servo_Attach+0xc>)
 80a19d8:	681b      	ldr	r3, [r3, #0]
 80a19da:	691b      	ldr	r3, [r3, #16]
 80a19dc:	9301      	str	r3, [sp, #4]
 80a19de:	bd08      	pop	{r3, pc}
 80a19e0:	080601a8 	.word	0x080601a8

080a19e4 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
 80a19e4:	b508      	push	{r3, lr}
 80a19e6:	4b02      	ldr	r3, [pc, #8]	; (80a19f0 <HAL_Servo_Detach+0xc>)
 80a19e8:	681b      	ldr	r3, [r3, #0]
 80a19ea:	695b      	ldr	r3, [r3, #20]
 80a19ec:	9301      	str	r3, [sp, #4]
 80a19ee:	bd08      	pop	{r3, pc}
 80a19f0:	080601a8 	.word	0x080601a8

080a19f4 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
 80a19f4:	b508      	push	{r3, lr}
 80a19f6:	4b02      	ldr	r3, [pc, #8]	; (80a1a00 <HAL_Servo_Write_Pulse_Width+0xc>)
 80a19f8:	681b      	ldr	r3, [r3, #0]
 80a19fa:	699b      	ldr	r3, [r3, #24]
 80a19fc:	9301      	str	r3, [sp, #4]
 80a19fe:	bd08      	pop	{r3, pc}
 80a1a00:	080601a8 	.word	0x080601a8

080a1a04 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1a04:	b508      	push	{r3, lr}
 80a1a06:	4b02      	ldr	r3, [pc, #8]	; (80a1a10 <HAL_USB_USART_Init+0xc>)
 80a1a08:	681b      	ldr	r3, [r3, #0]
 80a1a0a:	681b      	ldr	r3, [r3, #0]
 80a1a0c:	9301      	str	r3, [sp, #4]
 80a1a0e:	bd08      	pop	{r3, pc}
 80a1a10:	080601d8 	.word	0x080601d8

080a1a14 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1a14:	b508      	push	{r3, lr}
 80a1a16:	4b02      	ldr	r3, [pc, #8]	; (80a1a20 <HAL_USB_USART_Begin+0xc>)
 80a1a18:	681b      	ldr	r3, [r3, #0]
 80a1a1a:	685b      	ldr	r3, [r3, #4]
 80a1a1c:	9301      	str	r3, [sp, #4]
 80a1a1e:	bd08      	pop	{r3, pc}
 80a1a20:	080601d8 	.word	0x080601d8

080a1a24 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1a24:	b508      	push	{r3, lr}
 80a1a26:	4b02      	ldr	r3, [pc, #8]	; (80a1a30 <HAL_USB_USART_Available_Data+0xc>)
 80a1a28:	681b      	ldr	r3, [r3, #0]
 80a1a2a:	691b      	ldr	r3, [r3, #16]
 80a1a2c:	9301      	str	r3, [sp, #4]
 80a1a2e:	bd08      	pop	{r3, pc}
 80a1a30:	080601d8 	.word	0x080601d8

080a1a34 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1a34:	b508      	push	{r3, lr}
 80a1a36:	4b02      	ldr	r3, [pc, #8]	; (80a1a40 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1a38:	681b      	ldr	r3, [r3, #0]
 80a1a3a:	695b      	ldr	r3, [r3, #20]
 80a1a3c:	9301      	str	r3, [sp, #4]
 80a1a3e:	bd08      	pop	{r3, pc}
 80a1a40:	080601d8 	.word	0x080601d8

080a1a44 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1a44:	b508      	push	{r3, lr}
 80a1a46:	4b02      	ldr	r3, [pc, #8]	; (80a1a50 <HAL_USB_USART_Receive_Data+0xc>)
 80a1a48:	681b      	ldr	r3, [r3, #0]
 80a1a4a:	699b      	ldr	r3, [r3, #24]
 80a1a4c:	9301      	str	r3, [sp, #4]
 80a1a4e:	bd08      	pop	{r3, pc}
 80a1a50:	080601d8 	.word	0x080601d8

080a1a54 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1a54:	b508      	push	{r3, lr}
 80a1a56:	4b02      	ldr	r3, [pc, #8]	; (80a1a60 <HAL_USB_USART_Send_Data+0xc>)
 80a1a58:	681b      	ldr	r3, [r3, #0]
 80a1a5a:	69db      	ldr	r3, [r3, #28]
 80a1a5c:	9301      	str	r3, [sp, #4]
 80a1a5e:	bd08      	pop	{r3, pc}
 80a1a60:	080601d8 	.word	0x080601d8

080a1a64 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1a64:	b508      	push	{r3, lr}
 80a1a66:	4b02      	ldr	r3, [pc, #8]	; (80a1a70 <HAL_USB_USART_Flush_Data+0xc>)
 80a1a68:	681b      	ldr	r3, [r3, #0]
 80a1a6a:	6a1b      	ldr	r3, [r3, #32]
 80a1a6c:	9301      	str	r3, [sp, #4]
 80a1a6e:	bd08      	pop	{r3, pc}
 80a1a70:	080601d8 	.word	0x080601d8

080a1a74 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1a74:	b508      	push	{r3, lr}
 80a1a76:	4b02      	ldr	r3, [pc, #8]	; (80a1a80 <set_system_mode+0xc>)
 80a1a78:	681b      	ldr	r3, [r3, #0]
 80a1a7a:	685b      	ldr	r3, [r3, #4]
 80a1a7c:	9301      	str	r3, [sp, #4]
 80a1a7e:	bd08      	pop	{r3, pc}
 80a1a80:	080601a4 	.word	0x080601a4

080a1a84 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1a84:	b508      	push	{r3, lr}
 80a1a86:	4b02      	ldr	r3, [pc, #8]	; (80a1a90 <system_delay_ms+0xc>)
 80a1a88:	681b      	ldr	r3, [r3, #0]
 80a1a8a:	695b      	ldr	r3, [r3, #20]
 80a1a8c:	9301      	str	r3, [sp, #4]
 80a1a8e:	bd08      	pop	{r3, pc}
 80a1a90:	080601a4 	.word	0x080601a4

080a1a94 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1a94:	b508      	push	{r3, lr}
 80a1a96:	4b02      	ldr	r3, [pc, #8]	; (80a1aa0 <system_thread_set_state+0xc>)
 80a1a98:	681b      	ldr	r3, [r3, #0]
 80a1a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1a9c:	9301      	str	r3, [sp, #4]
 80a1a9e:	bd08      	pop	{r3, pc}
 80a1aa0:	080601a4 	.word	0x080601a4

080a1aa4 <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80a1aa4:	b508      	push	{r3, lr}
 80a1aa6:	4b02      	ldr	r3, [pc, #8]	; (80a1ab0 <system_set_usb_request_app_handler+0xc>)
 80a1aa8:	681b      	ldr	r3, [r3, #0]
 80a1aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1aac:	9301      	str	r3, [sp, #4]
 80a1aae:	bd08      	pop	{r3, pc}
 80a1ab0:	080601a4 	.word	0x080601a4

080a1ab4 <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80a1ab4:	b508      	push	{r3, lr}
 80a1ab6:	4b02      	ldr	r3, [pc, #8]	; (80a1ac0 <system_set_usb_request_result+0xc>)
 80a1ab8:	681b      	ldr	r3, [r3, #0]
 80a1aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1abc:	9301      	str	r3, [sp, #4]
 80a1abe:	bd08      	pop	{r3, pc}
 80a1ac0:	080601a4 	.word	0x080601a4

080a1ac4 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1ac4:	b508      	push	{r3, lr}
 80a1ac6:	4b02      	ldr	r3, [pc, #8]	; (80a1ad0 <network_ready+0xc>)
 80a1ac8:	681b      	ldr	r3, [r3, #0]
 80a1aca:	691b      	ldr	r3, [r3, #16]
 80a1acc:	9301      	str	r3, [sp, #4]
 80a1ace:	bd08      	pop	{r3, pc}
 80a1ad0:	080601c8 	.word	0x080601c8

080a1ad4 <free>:
#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
DYNALIB_FN(1, rt, free, void(void*))
 80a1ad4:	b508      	push	{r3, lr}
 80a1ad6:	4b02      	ldr	r3, [pc, #8]	; (80a1ae0 <free+0xc>)
 80a1ad8:	681b      	ldr	r3, [r3, #0]
 80a1ada:	685b      	ldr	r3, [r3, #4]
 80a1adc:	9301      	str	r3, [sp, #4]
 80a1ade:	bd08      	pop	{r3, pc}
 80a1ae0:	080601a0 	.word	0x080601a0

080a1ae4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a1ae4:	b508      	push	{r3, lr}
 80a1ae6:	4b02      	ldr	r3, [pc, #8]	; (80a1af0 <vsnprintf+0xc>)
 80a1ae8:	681b      	ldr	r3, [r3, #0]
 80a1aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1aec:	9301      	str	r3, [sp, #4]
 80a1aee:	bd08      	pop	{r3, pc}
 80a1af0:	080601a0 	.word	0x080601a0

080a1af4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1af4:	4770      	bx	lr

080a1af6 <_ZN8SPIClassD0Ev>:
 80a1af6:	b510      	push	{r4, lr}
 80a1af8:	4604      	mov	r4, r0
 80a1afa:	f7fe face 	bl	80a009a <_ZdlPv>
 80a1afe:	4620      	mov	r0, r4
 80a1b00:	bd10      	pop	{r4, pc}
	...

080a1b04 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1b04:	b570      	push	{r4, r5, r6, lr}
 80a1b06:	4604      	mov	r4, r0
 80a1b08:	460e      	mov	r6, r1
 80a1b0a:	4b07      	ldr	r3, [pc, #28]	; (80a1b28 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
	Mutex(os_mutex_t handle) : handle_(handle) {}

	/**
	 * Creates a new mutex.
	 */
	Mutex() : handle_(nullptr)
 80a1b0c:	2500      	movs	r5, #0
 80a1b0e:	6003      	str	r3, [r0, #0]
 80a1b10:	f840 5f0c 	str.w	r5, [r0, #12]!
	{
		os_mutex_create(&handle_);
 80a1b14:	f7ff feb4 	bl	80a1880 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1b18:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1b1a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1b1c:	f7ff fe70 	bl	80a1800 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1b20:	60a5      	str	r5, [r4, #8]
}
 80a1b22:	4620      	mov	r0, r4
 80a1b24:	bd70      	pop	{r4, r5, r6, pc}
 80a1b26:	bf00      	nop
 80a1b28:	080a3104 	.word	0x080a3104

080a1b2c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1b2c:	7900      	ldrb	r0, [r0, #4]
 80a1b2e:	f7ff be6f 	b.w	80a1810 <HAL_SPI_Is_Enabled>

080a1b32 <_ZN5Servo17writeMicrosecondsEt>:
  // write(179).
  return a == this->minAngle || a == this->maxAngle ? a : a + 1;
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{
 80a1b32:	f9b0 2000 	ldrsh.w	r2, [r0]

  if (!this->attached())
 80a1b36:	1c53      	adds	r3, r2, #1
 80a1b38:	d00b      	beq.n	80a1b52 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
 80a1b3a:	8843      	ldrh	r3, [r0, #2]
 80a1b3c:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 80a1b3e:	428b      	cmp	r3, r1
 80a1b40:	d803      	bhi.n	80a1b4a <_ZN5Servo17writeMicrosecondsEt+0x18>
 80a1b42:	4288      	cmp	r0, r1
 80a1b44:	4603      	mov	r3, r0
 80a1b46:	bf28      	it	cs
 80a1b48:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
 80a1b4a:	4619      	mov	r1, r3
 80a1b4c:	b290      	uxth	r0, r2
 80a1b4e:	f7ff bf51 	b.w	80a19f4 <HAL_Servo_Write_Pulse_Width>
 80a1b52:	4770      	bx	lr

080a1b54 <_ZN5Servo11resetFieldsEv>:
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a1b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
 80a1b58:	22b4      	movs	r2, #180	; 0xb4
 80a1b5a:	8102      	strh	r2, [r0, #8]
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a1b5c:	f44f 7208 	mov.w	r2, #544	; 0x220
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a1b60:	8003      	strh	r3, [r0, #0]
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a1b62:	8042      	strh	r2, [r0, #2]
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a1b64:	2300      	movs	r3, #0
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a1b66:	f44f 6216 	mov.w	r2, #2400	; 0x960
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a1b6a:	80c3      	strh	r3, [r0, #6]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a1b6c:	8082      	strh	r2, [r0, #4]
  this->trim = 0;
 80a1b6e:	60c3      	str	r3, [r0, #12]
 80a1b70:	4770      	bx	lr

080a1b72 <_ZN5ServoC1Ev>:
#define ANGLE_TO_US(a)    ((uint16_t)(map((a), this->minAngle, this->maxAngle, \
                                        this->minPW, this->maxPW)))
#define US_TO_ANGLE(us)   ((int16_t)(map((us), this->minPW, this->maxPW,  \
                                       this->minAngle, this->maxAngle)))

Servo::Servo()
 80a1b72:	b508      	push	{r3, lr}
{
  this->resetFields();
 80a1b74:	f7ff ffee 	bl	80a1b54 <_ZN5Servo11resetFieldsEv>
}
 80a1b78:	bd08      	pop	{r3, pc}

080a1b7a <_ZN5Servo6detachEv>:

  return true;
}

bool Servo::detach()
{
 80a1b7a:	b510      	push	{r4, lr}
 80a1b7c:	4604      	mov	r4, r0
 80a1b7e:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
 80a1b82:	1c43      	adds	r3, r0, #1
 80a1b84:	d007      	beq.n	80a1b96 <_ZN5Servo6detachEv+0x1c>
  {
    return false;
  }

  HAL_Servo_Detach(this->pin);
 80a1b86:	b280      	uxth	r0, r0
 80a1b88:	f7ff ff2c 	bl	80a19e4 <HAL_Servo_Detach>

  this->resetFields();
 80a1b8c:	4620      	mov	r0, r4
 80a1b8e:	f7ff ffe1 	bl	80a1b54 <_ZN5Servo11resetFieldsEv>

  return true;
 80a1b92:	2001      	movs	r0, #1
 80a1b94:	bd10      	pop	{r4, pc}

bool Servo::detach()
{
  if (!this->attached())
  {
    return false;
 80a1b96:	2000      	movs	r0, #0
  HAL_Servo_Detach(this->pin);

  this->resetFields();

  return true;
}
 80a1b98:	bd10      	pop	{r4, pc}

080a1b9a <_ZN5Servo6attachEtttss>:
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a1b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1b9e:	460d      	mov	r5, r1
 80a1ba0:	4604      	mov	r4, r0

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a1ba2:	2102      	movs	r1, #2
 80a1ba4:	4628      	mov	r0, r5
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a1ba6:	4690      	mov	r8, r2
 80a1ba8:	461f      	mov	r7, r3

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a1baa:	f7ff fdf1 	bl	80a1790 <HAL_Validate_Pin_Function>
 80a1bae:	2802      	cmp	r0, #2
 80a1bb0:	d001      	beq.n	80a1bb6 <_ZN5Servo6attachEtttss+0x1c>
  {
    return false;
 80a1bb2:	2600      	movs	r6, #0
 80a1bb4:	e019      	b.n	80a1bea <_ZN5Servo6attachEtttss+0x50>
  }

  // Safety check
  if (!pinAvailable(pin))
 80a1bb6:	4628      	mov	r0, r5
 80a1bb8:	f000 fb9c 	bl	80a22f4 <pinAvailable>
 80a1bbc:	4606      	mov	r6, r0
 80a1bbe:	2800      	cmp	r0, #0
 80a1bc0:	d0f7      	beq.n	80a1bb2 <_ZN5Servo6attachEtttss+0x18>
  {
    return false;
  }

  if (this->attached())
 80a1bc2:	f9b4 3000 	ldrsh.w	r3, [r4]
 80a1bc6:	3301      	adds	r3, #1
 80a1bc8:	d002      	beq.n	80a1bd0 <_ZN5Servo6attachEtttss+0x36>
  {
    this->detach();
 80a1bca:	4620      	mov	r0, r4
 80a1bcc:	f7ff ffd5 	bl	80a1b7a <_ZN5Servo6detachEv>
  }

  this->pin = pin;
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a1bd0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  if (this->attached())
  {
    this->detach();
  }

  this->pin = pin;
 80a1bd4:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a1bd6:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
 80a1bd8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  {
    this->detach();
  }

  this->pin = pin;
  this->minPW = minPW;
 80a1bdc:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
 80a1be0:	80a7      	strh	r7, [r4, #4]
  this->minAngle = minAngle;
  this->maxAngle = maxAngle;
 80a1be2:	8123      	strh	r3, [r4, #8]

  HAL_Servo_Attach(this->pin);
 80a1be4:	4628      	mov	r0, r5
 80a1be6:	f7ff fef5 	bl	80a19d4 <HAL_Servo_Attach>

  return true;
}
 80a1bea:	4630      	mov	r0, r6
 80a1bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1bf0 <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1bf0:	2000      	movs	r0, #0
 80a1bf2:	f7ff bf3f 	b.w	80a1a74 <set_system_mode>

080a1bf6 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1bf8:	4606      	mov	r6, r0
 80a1bfa:	460d      	mov	r5, r1
 80a1bfc:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1bfe:	2400      	movs	r4, #0
  while (size--) {
 80a1c00:	42bd      	cmp	r5, r7
 80a1c02:	d00c      	beq.n	80a1c1e <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1c04:	6833      	ldr	r3, [r6, #0]
 80a1c06:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1c0a:	689b      	ldr	r3, [r3, #8]
 80a1c0c:	4630      	mov	r0, r6
 80a1c0e:	4798      	blx	r3
     if (chunk>=0)
 80a1c10:	2800      	cmp	r0, #0
 80a1c12:	db01      	blt.n	80a1c18 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1c14:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1c16:	e7f3      	b.n	80a1c00 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1c18:	2c00      	cmp	r4, #0
 80a1c1a:	bf08      	it	eq
 80a1c1c:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1c1e:	4620      	mov	r0, r4
 80a1c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1c22 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1c22:	b570      	push	{r4, r5, r6, lr}
 80a1c24:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1c26:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1c28:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1c2a:	b149      	cbz	r1, 80a1c40 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1c2c:	f001 f9b3 	bl	80a2f96 <strlen>
 80a1c30:	682b      	ldr	r3, [r5, #0]
 80a1c32:	4602      	mov	r2, r0
 80a1c34:	4621      	mov	r1, r4
 80a1c36:	4628      	mov	r0, r5
    }
 80a1c38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1c3c:	68db      	ldr	r3, [r3, #12]
 80a1c3e:	4718      	bx	r3
    }
 80a1c40:	bd70      	pop	{r4, r5, r6, pc}

080a1c42 <_ZN5Print5printEPKc>:
 80a1c42:	b508      	push	{r3, lr}
 80a1c44:	f7ff ffed 	bl	80a1c22 <_ZN5Print5writeEPKc>
 80a1c48:	bd08      	pop	{r3, pc}

080a1c4a <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1c4a:	6803      	ldr	r3, [r0, #0]
 80a1c4c:	689b      	ldr	r3, [r3, #8]
 80a1c4e:	4718      	bx	r3

080a1c50 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1c50:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1c52:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1c54:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1c56:	f7ff fff8 	bl	80a1c4a <_ZN5Print5printEc>
  n += print('\n');
 80a1c5a:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1c5c:	4604      	mov	r4, r0
  n += print('\n');
 80a1c5e:	4628      	mov	r0, r5
 80a1c60:	f7ff fff3 	bl	80a1c4a <_ZN5Print5printEc>
  return n;
}
 80a1c64:	4420      	add	r0, r4
 80a1c66:	bd38      	pop	{r3, r4, r5, pc}

080a1c68 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1c68:	b538      	push	{r3, r4, r5, lr}
 80a1c6a:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1c6c:	f7ff ffd9 	bl	80a1c22 <_ZN5Print5writeEPKc>
 80a1c70:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1c72:	4628      	mov	r0, r5
 80a1c74:	f7ff ffec 	bl	80a1c50 <_ZN5Print7printlnEv>
  return n;
}
 80a1c78:	4420      	add	r0, r4
 80a1c7a:	bd38      	pop	{r3, r4, r5, pc}

080a1c7c <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1c7c:	2a01      	cmp	r2, #1
 80a1c7e:	bf98      	it	ls
 80a1c80:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1c82:	b530      	push	{r4, r5, lr}
 80a1c84:	460b      	mov	r3, r1
 80a1c86:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1c88:	2100      	movs	r1, #0
 80a1c8a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1c8e:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1c92:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1c96:	fb05 3312 	mls	r3, r5, r2, r3
 80a1c9a:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1c9c:	2b09      	cmp	r3, #9
 80a1c9e:	bf94      	ite	ls
 80a1ca0:	3330      	addls	r3, #48	; 0x30
 80a1ca2:	3337      	addhi	r3, #55	; 0x37
 80a1ca4:	b2db      	uxtb	r3, r3
 80a1ca6:	4621      	mov	r1, r4
 80a1ca8:	f804 3901 	strb.w	r3, [r4], #-1
 80a1cac:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1cae:	2d00      	cmp	r5, #0
 80a1cb0:	d1ef      	bne.n	80a1c92 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1cb2:	f7ff ffb6 	bl	80a1c22 <_ZN5Print5writeEPKc>
}
 80a1cb6:	b00b      	add	sp, #44	; 0x2c
 80a1cb8:	bd30      	pop	{r4, r5, pc}

080a1cba <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1cba:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1cbc:	b922      	cbnz	r2, 80a1cc8 <_ZN5Print5printEmi+0xe>
 80a1cbe:	6803      	ldr	r3, [r0, #0]
 80a1cc0:	b2c9      	uxtb	r1, r1
 80a1cc2:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1cc4:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1cc6:	4718      	bx	r3
  else return printNumber(n, base);
 80a1cc8:	b2d2      	uxtb	r2, r2
}
 80a1cca:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1ccc:	f7ff bfd6 	b.w	80a1c7c <_ZN5Print11printNumberEmh>

080a1cd0 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1cd0:	f7ff bff3 	b.w	80a1cba <_ZN5Print5printEmi>

080a1cd4 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a1cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1cd8:	4607      	mov	r7, r0
 80a1cda:	460e      	mov	r6, r1
  if (base == 0) {
 80a1cdc:	4615      	mov	r5, r2
 80a1cde:	b92a      	cbnz	r2, 80a1cec <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1ce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a1ce4:	6803      	ldr	r3, [r0, #0]
 80a1ce6:	b2c9      	uxtb	r1, r1
 80a1ce8:	689b      	ldr	r3, [r3, #8]
 80a1cea:	4718      	bx	r3
  } else if (base == 10) {
 80a1cec:	2a0a      	cmp	r2, #10
 80a1cee:	d102      	bne.n	80a1cf6 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a1cf0:	2900      	cmp	r1, #0
 80a1cf2:	da01      	bge.n	80a1cf8 <_ZN5Print5printEli+0x24>
 80a1cf4:	e004      	b.n	80a1d00 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1cf6:	b2d2      	uxtb	r2, r2
  }
}
 80a1cf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1cfc:	f7ff bfbe 	b.w	80a1c7c <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1d00:	212d      	movs	r1, #45	; 0x2d
 80a1d02:	f7ff ffa2 	bl	80a1c4a <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a1d06:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1d08:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a1d0a:	4271      	negs	r1, r6
 80a1d0c:	4638      	mov	r0, r7
 80a1d0e:	f7ff ffb5 	bl	80a1c7c <_ZN5Print11printNumberEmh>
 80a1d12:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1d18 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1d18:	f7ff bfdc 	b.w	80a1cd4 <_ZN5Print5printEli>

080a1d1c <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a1d1c:	b40c      	push	{r2, r3}
 80a1d1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1d22:	b087      	sub	sp, #28
 80a1d24:	af00      	add	r7, sp, #0
 80a1d26:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a1d2a:	f854 9b04 	ldr.w	r9, [r4], #4
 80a1d2e:	4605      	mov	r5, r0
 80a1d30:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1d32:	4623      	mov	r3, r4
 80a1d34:	464a      	mov	r2, r9
 80a1d36:	2114      	movs	r1, #20
 80a1d38:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a1d3a:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1d3c:	f7ff fed2 	bl	80a1ae4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a1d40:	2813      	cmp	r0, #19
 80a1d42:	d805      	bhi.n	80a1d50 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1d44:	1d39      	adds	r1, r7, #4
 80a1d46:	4628      	mov	r0, r5
 80a1d48:	f7ff ff6b 	bl	80a1c22 <_ZN5Print5writeEPKc>
 80a1d4c:	4604      	mov	r4, r0
 80a1d4e:	e013      	b.n	80a1d78 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1d50:	f100 0308 	add.w	r3, r0, #8
 80a1d54:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a1d58:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1d5a:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a1d5e:	1c41      	adds	r1, r0, #1
 80a1d60:	4623      	mov	r3, r4
 80a1d62:	464a      	mov	r2, r9
 80a1d64:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a1d66:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a1d68:	f7ff febc 	bl	80a1ae4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1d6c:	4669      	mov	r1, sp
 80a1d6e:	4628      	mov	r0, r5
 80a1d70:	f7ff ff57 	bl	80a1c22 <_ZN5Print5writeEPKc>
 80a1d74:	4604      	mov	r4, r0
 80a1d76:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a1d78:	b11e      	cbz	r6, 80a1d82 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a1d7a:	4628      	mov	r0, r5
 80a1d7c:	f7ff ff68 	bl	80a1c50 <_ZN5Print7printlnEv>
 80a1d80:	4404      	add	r4, r0
    return n;
}
 80a1d82:	4620      	mov	r0, r4
 80a1d84:	371c      	adds	r7, #28
 80a1d86:	46bd      	mov	sp, r7
 80a1d88:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1d8c:	b002      	add	sp, #8
 80a1d8e:	4770      	bx	lr

080a1d90 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1d90:	4a01      	ldr	r2, [pc, #4]	; (80a1d98 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1d92:	4b02      	ldr	r3, [pc, #8]	; (80a1d9c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1d94:	601a      	str	r2, [r3, #0]
 80a1d96:	4770      	bx	lr
 80a1d98:	080a31c4 	.word	0x080a31c4
 80a1d9c:	200003f0 	.word	0x200003f0

080a1da0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1da0:	4b02      	ldr	r3, [pc, #8]	; (80a1dac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1da2:	681a      	ldr	r2, [r3, #0]
 80a1da4:	4b02      	ldr	r3, [pc, #8]	; (80a1db0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1da6:	601a      	str	r2, [r3, #0]
 80a1da8:	4770      	bx	lr
 80a1daa:	bf00      	nop
 80a1dac:	20000324 	.word	0x20000324
 80a1db0:	200003f4 	.word	0x200003f4

080a1db4 <delay>:
  return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1db4:	2100      	movs	r1, #0
 80a1db6:	f7ff be65 	b.w	80a1a84 <system_delay_ms>
	...

080a1dbc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1dbc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1dbe:	4b14      	ldr	r3, [pc, #80]	; (80a1e10 <serialEventRun+0x54>)
 80a1dc0:	b133      	cbz	r3, 80a1dd0 <serialEventRun+0x14>
 80a1dc2:	f000 f925 	bl	80a2010 <_Z16_fetch_usbserialv>
 80a1dc6:	6803      	ldr	r3, [r0, #0]
 80a1dc8:	691b      	ldr	r3, [r3, #16]
 80a1dca:	4798      	blx	r3
 80a1dcc:	2800      	cmp	r0, #0
 80a1dce:	dc16      	bgt.n	80a1dfe <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1dd0:	4b10      	ldr	r3, [pc, #64]	; (80a1e14 <serialEventRun+0x58>)
 80a1dd2:	b133      	cbz	r3, 80a1de2 <serialEventRun+0x26>
 80a1dd4:	f000 f9ea 	bl	80a21ac <_Z22__fetch_global_Serial1v>
 80a1dd8:	6803      	ldr	r3, [r0, #0]
 80a1dda:	691b      	ldr	r3, [r3, #16]
 80a1ddc:	4798      	blx	r3
 80a1dde:	2800      	cmp	r0, #0
 80a1de0:	dc10      	bgt.n	80a1e04 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1de2:	4b0d      	ldr	r3, [pc, #52]	; (80a1e18 <serialEventRun+0x5c>)
 80a1de4:	b10b      	cbz	r3, 80a1dea <serialEventRun+0x2e>
 80a1de6:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1dea:	4b0c      	ldr	r3, [pc, #48]	; (80a1e1c <serialEventRun+0x60>)
 80a1dec:	b17b      	cbz	r3, 80a1e0e <serialEventRun+0x52>
 80a1dee:	f000 f94b 	bl	80a2088 <_Z17_fetch_usbserial1v>
 80a1df2:	6803      	ldr	r3, [r0, #0]
 80a1df4:	691b      	ldr	r3, [r3, #16]
 80a1df6:	4798      	blx	r3
 80a1df8:	2800      	cmp	r0, #0
 80a1dfa:	dc06      	bgt.n	80a1e0a <serialEventRun+0x4e>
 80a1dfc:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1dfe:	f3af 8000 	nop.w
 80a1e02:	e7e5      	b.n	80a1dd0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1e04:	f3af 8000 	nop.w
 80a1e08:	e7eb      	b.n	80a1de2 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1e0a:	f3af 8000 	nop.w
 80a1e0e:	bd08      	pop	{r3, pc}
	...

080a1e20 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1e20:	b508      	push	{r3, lr}
	serialEventRun();
 80a1e22:	f7ff ffcb 	bl	80a1dbc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1e26:	f7ff fd03 	bl	80a1830 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1e2a:	4b01      	ldr	r3, [pc, #4]	; (80a1e30 <_post_loop+0x10>)
 80a1e2c:	6018      	str	r0, [r3, #0]
 80a1e2e:	bd08      	pop	{r3, pc}
 80a1e30:	20000880 	.word	0x20000880

080a1e34 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1e34:	4802      	ldr	r0, [pc, #8]	; (80a1e40 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1e36:	4a03      	ldr	r2, [pc, #12]	; (80a1e44 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1e38:	4903      	ldr	r1, [pc, #12]	; (80a1e48 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1e3a:	1a12      	subs	r2, r2, r0
 80a1e3c:	f001 b898 	b.w	80a2f70 <memcpy>
 80a1e40:	40024000 	.word	0x40024000
 80a1e44:	40024004 	.word	0x40024004
 80a1e48:	080a3300 	.word	0x080a3300

080a1e4c <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80a1e4c:	2000      	movs	r0, #0
 80a1e4e:	4770      	bx	lr

080a1e50 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a1e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80a1e52:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a1e54:	4604      	mov	r4, r0
    switch (req->type) {
 80a1e56:	2b0a      	cmp	r3, #10
 80a1e58:	d00e      	beq.n	80a1e78 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 80a1e5a:	2b50      	cmp	r3, #80	; 0x50
 80a1e5c:	d11c      	bne.n	80a1e98 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80a1e5e:	4b10      	ldr	r3, [pc, #64]	; (80a1ea0 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80a1e60:	681d      	ldr	r5, [r3, #0]
 80a1e62:	b1cd      	cbz	r5, 80a1e98 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 80a1e64:	7d03      	ldrb	r3, [r0, #20]
 80a1e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a1e6a:	9300      	str	r3, [sp, #0]
 80a1e6c:	68c2      	ldr	r2, [r0, #12]
 80a1e6e:	f100 0310 	add.w	r3, r0, #16
 80a1e72:	6880      	ldr	r0, [r0, #8]
 80a1e74:	47a8      	blx	r5
 80a1e76:	e007      	b.n	80a1e88 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80a1e78:	f100 0310 	add.w	r3, r0, #16
 80a1e7c:	68c2      	ldr	r2, [r0, #12]
 80a1e7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a1e82:	6880      	ldr	r0, [r0, #8]
 80a1e84:	f7ff ffe2 	bl	80a1e4c <_Z26usb_request_custom_handlerPcjjPj>
 80a1e88:	b130      	cbz	r0, 80a1e98 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80a1e8a:	2200      	movs	r2, #0
 80a1e8c:	4620      	mov	r0, r4
 80a1e8e:	4611      	mov	r1, r2
 80a1e90:	f7ff fe10 	bl	80a1ab4 <system_set_usb_request_result>
        return true;
 80a1e94:	2001      	movs	r0, #1
 80a1e96:	e000      	b.n	80a1e9a <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80a1e98:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80a1e9a:	b003      	add	sp, #12
 80a1e9c:	bd30      	pop	{r4, r5, pc}
 80a1e9e:	bf00      	nop
 80a1ea0:	200003f8 	.word	0x200003f8

080a1ea4 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80a1ea4:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1ea6:	4c0c      	ldr	r4, [pc, #48]	; (80a1ed8 <module_user_init_hook+0x34>)
 80a1ea8:	4d0c      	ldr	r5, [pc, #48]	; (80a1edc <module_user_init_hook+0x38>)
 80a1eaa:	6823      	ldr	r3, [r4, #0]
 80a1eac:	42ab      	cmp	r3, r5
 80a1eae:	4b0c      	ldr	r3, [pc, #48]	; (80a1ee0 <module_user_init_hook+0x3c>)
 80a1eb0:	bf0c      	ite	eq
 80a1eb2:	2201      	moveq	r2, #1
 80a1eb4:	2200      	movne	r2, #0
 80a1eb6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1eb8:	d002      	beq.n	80a1ec0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1eba:	f7ff ffbb 	bl	80a1e34 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1ebe:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a1ec0:	4b08      	ldr	r3, [pc, #32]	; (80a1ee4 <module_user_init_hook+0x40>)
 80a1ec2:	b11b      	cbz	r3, 80a1ecc <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1ec4:	f7ff fcac 	bl	80a1820 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a1ec8:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80a1ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80a1ed0:	2100      	movs	r1, #0
 80a1ed2:	4805      	ldr	r0, [pc, #20]	; (80a1ee8 <module_user_init_hook+0x44>)
 80a1ed4:	f7ff bde6 	b.w	80a1aa4 <system_set_usb_request_app_handler>
 80a1ed8:	40024000 	.word	0x40024000
 80a1edc:	9a271c1e 	.word	0x9a271c1e
 80a1ee0:	200003fc 	.word	0x200003fc
 80a1ee4:	00000000 	.word	0x00000000
 80a1ee8:	080a1e51 	.word	0x080a1e51

080a1eec <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1eec:	4770      	bx	lr

080a1eee <_ZN9IPAddressD0Ev>:
 80a1eee:	b510      	push	{r4, lr}
 80a1ef0:	4604      	mov	r4, r0
 80a1ef2:	f7fe f8d2 	bl	80a009a <_ZdlPv>
 80a1ef6:	4620      	mov	r0, r4
 80a1ef8:	bd10      	pop	{r4, pc}

080a1efa <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1efc:	460f      	mov	r7, r1
 80a1efe:	f100 0608 	add.w	r6, r0, #8
 80a1f02:	1d05      	adds	r5, r0, #4
 80a1f04:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1f06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1f0a:	220a      	movs	r2, #10
 80a1f0c:	4638      	mov	r0, r7
 80a1f0e:	f7ff fedf 	bl	80a1cd0 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1f12:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1f14:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1f16:	d007      	beq.n	80a1f28 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1f18:	2c00      	cmp	r4, #0
 80a1f1a:	d0f4      	beq.n	80a1f06 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1f1c:	212e      	movs	r1, #46	; 0x2e
 80a1f1e:	4638      	mov	r0, r7
 80a1f20:	f7ff fe93 	bl	80a1c4a <_ZN5Print5printEc>
 80a1f24:	4404      	add	r4, r0
 80a1f26:	e7ee      	b.n	80a1f06 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1f28:	4620      	mov	r0, r4
 80a1f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1f2c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1f2c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1f2e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1f32:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1f36:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1f3a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1f3e:	2304      	movs	r3, #4
 80a1f40:	6041      	str	r1, [r0, #4]
 80a1f42:	7503      	strb	r3, [r0, #20]
 80a1f44:	bd10      	pop	{r4, pc}
	...

080a1f48 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1f4a:	4d04      	ldr	r5, [pc, #16]	; (80a1f5c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1f4c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1f4e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1f52:	9500      	str	r5, [sp, #0]
 80a1f54:	f7ff ffea 	bl	80a1f2c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1f58:	b003      	add	sp, #12
 80a1f5a:	bd30      	pop	{r4, r5, pc}
 80a1f5c:	080a3220 	.word	0x080a3220

080a1f60 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1f60:	7441      	strb	r1, [r0, #17]
 80a1f62:	4770      	bx	lr

080a1f64 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a1f64:	4770      	bx	lr

080a1f66 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a1f66:	2100      	movs	r1, #0
 80a1f68:	7c00      	ldrb	r0, [r0, #16]
 80a1f6a:	f7ff bd6b 	b.w	80a1a44 <HAL_USB_USART_Receive_Data>

080a1f6e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a1f6e:	2101      	movs	r1, #1
 80a1f70:	7c00      	ldrb	r0, [r0, #16]
 80a1f72:	f7ff bd67 	b.w	80a1a44 <HAL_USB_USART_Receive_Data>

080a1f76 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a1f76:	7c00      	ldrb	r0, [r0, #16]
 80a1f78:	f7ff bd5c 	b.w	80a1a34 <HAL_USB_USART_Available_Data_For_Write>

080a1f7c <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a1f7c:	7c00      	ldrb	r0, [r0, #16]
 80a1f7e:	f7ff bd51 	b.w	80a1a24 <HAL_USB_USART_Available_Data>

080a1f82 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a1f82:	b538      	push	{r3, r4, r5, lr}
 80a1f84:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1f86:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a1f88:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1f8a:	f7ff fd53 	bl	80a1a34 <HAL_USB_USART_Available_Data_For_Write>
 80a1f8e:	2800      	cmp	r0, #0
 80a1f90:	dc01      	bgt.n	80a1f96 <_ZN9USBSerial5writeEh+0x14>
 80a1f92:	7c60      	ldrb	r0, [r4, #17]
 80a1f94:	b120      	cbz	r0, 80a1fa0 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a1f96:	4629      	mov	r1, r5
 80a1f98:	7c20      	ldrb	r0, [r4, #16]
 80a1f9a:	f7ff fd5b 	bl	80a1a54 <HAL_USB_USART_Send_Data>
    return 1;
 80a1f9e:	2001      	movs	r0, #1
  }
  return 0;
}
 80a1fa0:	bd38      	pop	{r3, r4, r5, pc}

080a1fa2 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1fa2:	7c00      	ldrb	r0, [r0, #16]
 80a1fa4:	f7ff bd5e 	b.w	80a1a64 <HAL_USB_USART_Flush_Data>

080a1fa8 <_ZN9USBSerialD0Ev>:
 80a1fa8:	b510      	push	{r4, lr}
 80a1faa:	4604      	mov	r4, r0
 80a1fac:	f7fe f875 	bl	80a009a <_ZdlPv>
 80a1fb0:	4620      	mov	r0, r4
 80a1fb2:	bd10      	pop	{r4, pc}

080a1fb4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1fb4:	b510      	push	{r4, lr}
 80a1fb6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1fb8:	2300      	movs	r3, #0
 80a1fba:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1fc0:	60a3      	str	r3, [r4, #8]
 80a1fc2:	4b05      	ldr	r3, [pc, #20]	; (80a1fd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1fc4:	4608      	mov	r0, r1
 80a1fc6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1fc8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1fca:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1fcc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1fce:	4611      	mov	r1, r2
 80a1fd0:	f7ff fd18 	bl	80a1a04 <HAL_USB_USART_Init>
}
 80a1fd4:	4620      	mov	r0, r4
 80a1fd6:	bd10      	pop	{r4, pc}
 80a1fd8:	080a3234 	.word	0x080a3234

080a1fdc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1fdc:	2200      	movs	r2, #0
 80a1fde:	7c00      	ldrb	r0, [r0, #16]
 80a1fe0:	f7ff bd18 	b.w	80a1a14 <HAL_USB_USART_Begin>

080a1fe4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1fe4:	b510      	push	{r4, lr}
 80a1fe6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1fe8:	2214      	movs	r2, #20
 80a1fea:	2100      	movs	r1, #0
 80a1fec:	f000 ffcb 	bl	80a2f86 <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1ff0:	4b05      	ldr	r3, [pc, #20]	; (80a2008 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1ff2:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1ff4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1ff6:	4b05      	ldr	r3, [pc, #20]	; (80a200c <_Z19acquireSerialBufferv+0x28>)
 80a1ff8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1ffa:	f240 1301 	movw	r3, #257	; 0x101
 80a1ffe:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2000:	2381      	movs	r3, #129	; 0x81
 80a2002:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2004:	bd10      	pop	{r4, pc}
 80a2006:	bf00      	nop
 80a2008:	20000485 	.word	0x20000485
 80a200c:	20000404 	.word	0x20000404

080a2010 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2010:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2012:	4d0e      	ldr	r5, [pc, #56]	; (80a204c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2014:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2016:	a801      	add	r0, sp, #4
 80a2018:	f7ff ffe4 	bl	80a1fe4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a201c:	6829      	ldr	r1, [r5, #0]
 80a201e:	f011 0401 	ands.w	r4, r1, #1
 80a2022:	d110      	bne.n	80a2046 <_Z16_fetch_usbserialv+0x36>
 80a2024:	4628      	mov	r0, r5
 80a2026:	f7fe f83a 	bl	80a009e <__cxa_guard_acquire>
 80a202a:	b160      	cbz	r0, 80a2046 <_Z16_fetch_usbserialv+0x36>
 80a202c:	aa01      	add	r2, sp, #4
 80a202e:	4621      	mov	r1, r4
 80a2030:	4807      	ldr	r0, [pc, #28]	; (80a2050 <_Z16_fetch_usbserialv+0x40>)
 80a2032:	f7ff ffbf 	bl	80a1fb4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2036:	4628      	mov	r0, r5
 80a2038:	f7fe f836 	bl	80a00a8 <__cxa_guard_release>
 80a203c:	4a05      	ldr	r2, [pc, #20]	; (80a2054 <_Z16_fetch_usbserialv+0x44>)
 80a203e:	4906      	ldr	r1, [pc, #24]	; (80a2058 <_Z16_fetch_usbserialv+0x48>)
 80a2040:	4803      	ldr	r0, [pc, #12]	; (80a2050 <_Z16_fetch_usbserialv+0x40>)
 80a2042:	f000 fa13 	bl	80a246c <__aeabi_atexit>
	return _usbserial;
}
 80a2046:	4802      	ldr	r0, [pc, #8]	; (80a2050 <_Z16_fetch_usbserialv+0x40>)
 80a2048:	b007      	add	sp, #28
 80a204a:	bd30      	pop	{r4, r5, pc}
 80a204c:	20000400 	.word	0x20000400
 80a2050:	20000588 	.word	0x20000588
 80a2054:	20000328 	.word	0x20000328
 80a2058:	080a1f65 	.word	0x080a1f65

080a205c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a205c:	b510      	push	{r4, lr}
 80a205e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2060:	2214      	movs	r2, #20
 80a2062:	2100      	movs	r1, #0
 80a2064:	f000 ff8f 	bl	80a2f86 <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2068:	4b05      	ldr	r3, [pc, #20]	; (80a2080 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a206a:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a206c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a206e:	4b05      	ldr	r3, [pc, #20]	; (80a2084 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2070:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2072:	f240 1301 	movw	r3, #257	; 0x101
 80a2076:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2078:	2381      	movs	r3, #129	; 0x81
 80a207a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a207c:	bd10      	pop	{r4, pc}
 80a207e:	bf00      	nop
 80a2080:	20000638 	.word	0x20000638
 80a2084:	200005a0 	.word	0x200005a0

080a2088 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2088:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a208a:	4c0e      	ldr	r4, [pc, #56]	; (80a20c4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a208c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a208e:	a801      	add	r0, sp, #4
 80a2090:	f7ff ffe4 	bl	80a205c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2094:	6823      	ldr	r3, [r4, #0]
 80a2096:	07db      	lsls	r3, r3, #31
 80a2098:	d410      	bmi.n	80a20bc <_Z17_fetch_usbserial1v+0x34>
 80a209a:	4620      	mov	r0, r4
 80a209c:	f7fd ffff 	bl	80a009e <__cxa_guard_acquire>
 80a20a0:	b160      	cbz	r0, 80a20bc <_Z17_fetch_usbserial1v+0x34>
 80a20a2:	aa01      	add	r2, sp, #4
 80a20a4:	2101      	movs	r1, #1
 80a20a6:	4808      	ldr	r0, [pc, #32]	; (80a20c8 <_Z17_fetch_usbserial1v+0x40>)
 80a20a8:	f7ff ff84 	bl	80a1fb4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a20ac:	4620      	mov	r0, r4
 80a20ae:	f7fd fffb 	bl	80a00a8 <__cxa_guard_release>
 80a20b2:	4a06      	ldr	r2, [pc, #24]	; (80a20cc <_Z17_fetch_usbserial1v+0x44>)
 80a20b4:	4906      	ldr	r1, [pc, #24]	; (80a20d0 <_Z17_fetch_usbserial1v+0x48>)
 80a20b6:	4804      	ldr	r0, [pc, #16]	; (80a20c8 <_Z17_fetch_usbserial1v+0x40>)
 80a20b8:	f000 f9d8 	bl	80a246c <__aeabi_atexit>
  return _usbserial1;
}
 80a20bc:	4802      	ldr	r0, [pc, #8]	; (80a20c8 <_Z17_fetch_usbserial1v+0x40>)
 80a20be:	b006      	add	sp, #24
 80a20c0:	bd10      	pop	{r4, pc}
 80a20c2:	bf00      	nop
 80a20c4:	2000059c 	.word	0x2000059c
 80a20c8:	20000624 	.word	0x20000624
 80a20cc:	20000328 	.word	0x20000328
 80a20d0:	080a1f65 	.word	0x080a1f65

080a20d4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a20d4:	4700      	bx	r0
	...

080a20d8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a20d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a20da:	461c      	mov	r4, r3
 80a20dc:	b085      	sub	sp, #20
 80a20de:	4605      	mov	r5, r0
 80a20e0:	460e      	mov	r6, r1
 80a20e2:	4617      	mov	r7, r2
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a20e4:	f7ff fb84 	bl	80a17f0 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80a20e8:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80a20ea:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a20ec:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a20f0:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a20f2:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a20f6:	bfb4      	ite	lt
 80a20f8:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a20fa:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a20fe:	4628      	mov	r0, r5
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a2100:	bfa4      	itt	ge
 80a2102:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a2106:	ab03      	addge	r3, sp, #12
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a2108:	9300      	str	r3, [sp, #0]
 80a210a:	4632      	mov	r2, r6
 80a210c:	463b      	mov	r3, r7
 80a210e:	4904      	ldr	r1, [pc, #16]	; (80a2120 <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a2110:	bfa8      	it	ge
 80a2112:	f88d 400d 	strbge.w	r4, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a2116:	f7ff fb63 	bl	80a17e0 <HAL_Interrupts_Attach>
    return true;
}
 80a211a:	2001      	movs	r0, #1
 80a211c:	b005      	add	sp, #20
 80a211e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2120:	080a20d5 	.word	0x080a20d5

080a2124 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2124:	4770      	bx	lr

080a2126 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2126:	7441      	strb	r1, [r0, #17]
 80a2128:	4770      	bx	lr

080a212a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a212a:	7c00      	ldrb	r0, [r0, #16]
 80a212c:	f7ff bbe8 	b.w	80a1900 <HAL_USART_Available_Data_For_Write>

080a2130 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a2130:	7c00      	ldrb	r0, [r0, #16]
 80a2132:	f7ff bbbd 	b.w	80a18b0 <HAL_USART_Available_Data>

080a2136 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a2136:	7c00      	ldrb	r0, [r0, #16]
 80a2138:	f7ff bbca 	b.w	80a18d0 <HAL_USART_Peek_Data>

080a213c <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a213c:	7c00      	ldrb	r0, [r0, #16]
 80a213e:	f7ff bbbf 	b.w	80a18c0 <HAL_USART_Read_Data>

080a2142 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2142:	7c00      	ldrb	r0, [r0, #16]
 80a2144:	f7ff bbcc 	b.w	80a18e0 <HAL_USART_Flush_Data>

080a2148 <_ZN11USARTSerialD0Ev>:
 80a2148:	b510      	push	{r4, lr}
 80a214a:	4604      	mov	r4, r0
 80a214c:	f7fd ffa5 	bl	80a009a <_ZdlPv>
 80a2150:	4620      	mov	r0, r4
 80a2152:	bd10      	pop	{r4, pc}

080a2154 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2154:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2156:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2158:	4604      	mov	r4, r0
 80a215a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a215c:	b925      	cbnz	r5, 80a2168 <_ZN11USARTSerial5writeEh+0x14>
 80a215e:	7c00      	ldrb	r0, [r0, #16]
 80a2160:	f7ff fbce 	bl	80a1900 <HAL_USART_Available_Data_For_Write>
 80a2164:	2800      	cmp	r0, #0
 80a2166:	dd05      	ble.n	80a2174 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2168:	4631      	mov	r1, r6
 80a216a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a216c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2170:	f7ff bb96 	b.w	80a18a0 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2174:	4628      	mov	r0, r5
 80a2176:	bd70      	pop	{r4, r5, r6, pc}

080a2178 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2178:	b510      	push	{r4, lr}
 80a217a:	4604      	mov	r4, r0
 80a217c:	4608      	mov	r0, r1
 80a217e:	4611      	mov	r1, r2
 80a2180:	2200      	movs	r2, #0
 80a2182:	6062      	str	r2, [r4, #4]
 80a2184:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2188:	60a2      	str	r2, [r4, #8]
 80a218a:	4a05      	ldr	r2, [pc, #20]	; (80a21a0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a218c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a218e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2190:	2201      	movs	r2, #1
 80a2192:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2194:	461a      	mov	r2, r3
 80a2196:	f7ff fb7b 	bl	80a1890 <HAL_USART_Init>
}
 80a219a:	4620      	mov	r0, r4
 80a219c:	bd10      	pop	{r4, pc}
 80a219e:	bf00      	nop
 80a21a0:	080a3264 	.word	0x080a3264

080a21a4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a21a4:	7c00      	ldrb	r0, [r0, #16]
 80a21a6:	f7ff bba3 	b.w	80a18f0 <HAL_USART_Is_Enabled>
	...

080a21ac <_Z22__fetch_global_Serial1v>:
// Preinstantiate Objects //////////////////////////////////////////////////////
static Ring_Buffer serial1_rx_buffer;
static Ring_Buffer serial1_tx_buffer;

USARTSerial& __fetch_global_Serial1()
{
 80a21ac:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a21ae:	4d0c      	ldr	r5, [pc, #48]	; (80a21e0 <_Z22__fetch_global_Serial1v+0x34>)
 80a21b0:	6829      	ldr	r1, [r5, #0]
 80a21b2:	f011 0401 	ands.w	r4, r1, #1
 80a21b6:	d111      	bne.n	80a21dc <_Z22__fetch_global_Serial1v+0x30>
 80a21b8:	4628      	mov	r0, r5
 80a21ba:	f7fd ff70 	bl	80a009e <__cxa_guard_acquire>
 80a21be:	b168      	cbz	r0, 80a21dc <_Z22__fetch_global_Serial1v+0x30>
 80a21c0:	4a08      	ldr	r2, [pc, #32]	; (80a21e4 <_Z22__fetch_global_Serial1v+0x38>)
 80a21c2:	4621      	mov	r1, r4
 80a21c4:	4b08      	ldr	r3, [pc, #32]	; (80a21e8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a21c6:	4809      	ldr	r0, [pc, #36]	; (80a21ec <_Z22__fetch_global_Serial1v+0x40>)
 80a21c8:	f7ff ffd6 	bl	80a2178 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a21cc:	4628      	mov	r0, r5
 80a21ce:	f7fd ff6b 	bl	80a00a8 <__cxa_guard_release>
 80a21d2:	4a07      	ldr	r2, [pc, #28]	; (80a21f0 <_Z22__fetch_global_Serial1v+0x44>)
 80a21d4:	4907      	ldr	r1, [pc, #28]	; (80a21f4 <_Z22__fetch_global_Serial1v+0x48>)
 80a21d6:	4805      	ldr	r0, [pc, #20]	; (80a21ec <_Z22__fetch_global_Serial1v+0x40>)
 80a21d8:	f000 f948 	bl	80a246c <__aeabi_atexit>
	return serial1;
}
 80a21dc:	4803      	ldr	r0, [pc, #12]	; (80a21ec <_Z22__fetch_global_Serial1v+0x40>)
 80a21de:	bd38      	pop	{r3, r4, r5, pc}
 80a21e0:	200007d4 	.word	0x200007d4
 80a21e4:	200007d8 	.word	0x200007d8
 80a21e8:	20000750 	.word	0x20000750
 80a21ec:	2000073c 	.word	0x2000073c
 80a21f0:	20000328 	.word	0x20000328
 80a21f4:	080a2125 	.word	0x080a2125

080a21f8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a21f8:	4770      	bx	lr

080a21fa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a21fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a21fc:	4606      	mov	r6, r0
 80a21fe:	4615      	mov	r5, r2
 80a2200:	460c      	mov	r4, r1
 80a2202:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2204:	42bc      	cmp	r4, r7
 80a2206:	d006      	beq.n	80a2216 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2208:	6833      	ldr	r3, [r6, #0]
 80a220a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a220e:	689b      	ldr	r3, [r3, #8]
 80a2210:	4630      	mov	r0, r6
 80a2212:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2214:	e7f6      	b.n	80a2204 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a2216:	4628      	mov	r0, r5
 80a2218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a221a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a221a:	2200      	movs	r2, #0
 80a221c:	7c00      	ldrb	r0, [r0, #16]
 80a221e:	f7ff bb9f 	b.w	80a1960 <HAL_I2C_Write_Data>

080a2222 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a2222:	2100      	movs	r1, #0
 80a2224:	7c00      	ldrb	r0, [r0, #16]
 80a2226:	f7ff bba3 	b.w	80a1970 <HAL_I2C_Available_Data>

080a222a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a222a:	2100      	movs	r1, #0
 80a222c:	7c00      	ldrb	r0, [r0, #16]
 80a222e:	f7ff bba7 	b.w	80a1980 <HAL_I2C_Read_Data>

080a2232 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a2232:	2100      	movs	r1, #0
 80a2234:	7c00      	ldrb	r0, [r0, #16]
 80a2236:	f7ff bbab 	b.w	80a1990 <HAL_I2C_Peek_Data>

080a223a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a223a:	2100      	movs	r1, #0
 80a223c:	7c00      	ldrb	r0, [r0, #16]
 80a223e:	f7ff bbaf 	b.w	80a19a0 <HAL_I2C_Flush_Data>

080a2242 <_ZN7TwoWireD0Ev>:
 80a2242:	b510      	push	{r4, lr}
 80a2244:	4604      	mov	r4, r0
 80a2246:	f7fd ff28 	bl	80a009a <_ZdlPv>
 80a224a:	4620      	mov	r0, r4
 80a224c:	bd10      	pop	{r4, pc}
	...

080a2250 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2250:	b510      	push	{r4, lr}
 80a2252:	4604      	mov	r4, r0
 80a2254:	4608      	mov	r0, r1
 80a2256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a225a:	60a3      	str	r3, [r4, #8]
 80a225c:	4b04      	ldr	r3, [pc, #16]	; (80a2270 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a225e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a2260:	7420      	strb	r0, [r4, #16]
 80a2262:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2264:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a2266:	f7ff fbab 	bl	80a19c0 <HAL_I2C_Init>

}
 80a226a:	4620      	mov	r0, r4
 80a226c:	bd10      	pop	{r4, pc}
 80a226e:	bf00      	nop
 80a2270:	080a3294 	.word	0x080a3294

080a2274 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a2274:	2200      	movs	r2, #0
 80a2276:	7c00      	ldrb	r0, [r0, #16]
 80a2278:	f7ff bb4a 	b.w	80a1910 <HAL_I2C_Set_Speed>

080a227c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a227c:	2300      	movs	r3, #0
 80a227e:	461a      	mov	r2, r3
 80a2280:	4619      	mov	r1, r3
 80a2282:	7c00      	ldrb	r0, [r0, #16]
 80a2284:	f7ff bb4c 	b.w	80a1920 <HAL_I2C_Begin>

080a2288 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a2288:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a228a:	2400      	movs	r4, #0
 80a228c:	7c00      	ldrb	r0, [r0, #16]
 80a228e:	9400      	str	r4, [sp, #0]
 80a2290:	f7ff fb4e 	bl	80a1930 <HAL_I2C_Request_Data>
  return result;
}
 80a2294:	b2c0      	uxtb	r0, r0
 80a2296:	b002      	add	sp, #8
 80a2298:	bd10      	pop	{r4, pc}

080a229a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a229a:	2301      	movs	r3, #1
 80a229c:	f7ff bff4 	b.w	80a2288 <_ZN7TwoWire11requestFromEhhh>

080a22a0 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a22a0:	2301      	movs	r3, #1
 80a22a2:	b2d2      	uxtb	r2, r2
 80a22a4:	b2c9      	uxtb	r1, r1
 80a22a6:	f7ff bfef 	b.w	80a2288 <_ZN7TwoWire11requestFromEhhh>

080a22aa <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a22aa:	2200      	movs	r2, #0
 80a22ac:	7c00      	ldrb	r0, [r0, #16]
 80a22ae:	f7ff bb47 	b.w	80a1940 <HAL_I2C_Begin_Transmission>

080a22b2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a22b2:	2200      	movs	r2, #0
 80a22b4:	7c00      	ldrb	r0, [r0, #16]
 80a22b6:	f7ff bb4b 	b.w	80a1950 <HAL_I2C_End_Transmission>

080a22ba <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a22ba:	2101      	movs	r1, #1
 80a22bc:	f7ff bff9 	b.w	80a22b2 <_ZN7TwoWire15endTransmissionEh>

080a22c0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a22c0:	2100      	movs	r1, #0
 80a22c2:	7c00      	ldrb	r0, [r0, #16]
 80a22c4:	f7ff bb74 	b.w	80a19b0 <HAL_I2C_Is_Enabled>

080a22c8 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a22c8:	4770      	bx	lr

080a22ca <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a22ca:	2200      	movs	r2, #0
 80a22cc:	4611      	mov	r1, r2
 80a22ce:	4610      	mov	r0, r2
 80a22d0:	f7ff bbf8 	b.w	80a1ac4 <network_ready>

080a22d4 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a22d4:	4803      	ldr	r0, [pc, #12]	; (80a22e4 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a22d6:	4b04      	ldr	r3, [pc, #16]	; (80a22e8 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a22d8:	4a04      	ldr	r2, [pc, #16]	; (80a22ec <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a22da:	4905      	ldr	r1, [pc, #20]	; (80a22f0 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a22dc:	6003      	str	r3, [r0, #0]
 80a22de:	f000 b8c5 	b.w	80a246c <__aeabi_atexit>
 80a22e2:	bf00      	nop
 80a22e4:	2000085c 	.word	0x2000085c
 80a22e8:	080a32bc 	.word	0x080a32bc
 80a22ec:	20000328 	.word	0x20000328
 80a22f0:	080a22c9 	.word	0x080a22c9

080a22f4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a22f4:	b510      	push	{r4, lr}
 80a22f6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a22f8:	480f      	ldr	r0, [pc, #60]	; (80a2338 <pinAvailable+0x44>)
 80a22fa:	f7ff fc17 	bl	80a1b2c <_ZN8SPIClass9isEnabledEv>
 80a22fe:	b128      	cbz	r0, 80a230c <pinAvailable+0x18>
 80a2300:	f1a4 030d 	sub.w	r3, r4, #13
 80a2304:	2b02      	cmp	r3, #2
 80a2306:	d801      	bhi.n	80a230c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2308:	2000      	movs	r0, #0
 80a230a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a230c:	f000 f88e 	bl	80a242c <_Z19__fetch_global_Wirev>
 80a2310:	f7ff ffd6 	bl	80a22c0 <_ZN7TwoWire9isEnabledEv>
 80a2314:	b108      	cbz	r0, 80a231a <pinAvailable+0x26>
 80a2316:	2c01      	cmp	r4, #1
 80a2318:	d9f6      	bls.n	80a2308 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a231a:	f7ff ff47 	bl	80a21ac <_Z22__fetch_global_Serial1v>
 80a231e:	f7ff ff41 	bl	80a21a4 <_ZN11USARTSerial9isEnabledEv>
 80a2322:	b118      	cbz	r0, 80a232c <pinAvailable+0x38>
 80a2324:	f1a4 0312 	sub.w	r3, r4, #18
 80a2328:	2b01      	cmp	r3, #1
 80a232a:	d9ed      	bls.n	80a2308 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a232c:	2c17      	cmp	r4, #23
 80a232e:	bf8c      	ite	hi
 80a2330:	2000      	movhi	r0, #0
 80a2332:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2334:	bd10      	pop	{r4, pc}
 80a2336:	bf00      	nop
 80a2338:	20000860 	.word	0x20000860

080a233c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a233c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a233e:	b538      	push	{r3, r4, r5, lr}
 80a2340:	4604      	mov	r4, r0
 80a2342:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2344:	d80a      	bhi.n	80a235c <pinMode+0x20>
 80a2346:	29ff      	cmp	r1, #255	; 0xff
 80a2348:	d008      	beq.n	80a235c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a234a:	f7ff ffd3 	bl	80a22f4 <pinAvailable>
 80a234e:	b128      	cbz	r0, 80a235c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2350:	4629      	mov	r1, r5
 80a2352:	4620      	mov	r0, r4
}
 80a2354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2358:	f7ff ba22 	b.w	80a17a0 <HAL_Pin_Mode>
 80a235c:	bd38      	pop	{r3, r4, r5, pc}

080a235e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a235e:	b538      	push	{r3, r4, r5, lr}
 80a2360:	4604      	mov	r4, r0
 80a2362:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2364:	f7ff fa24 	bl	80a17b0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2368:	28ff      	cmp	r0, #255	; 0xff
 80a236a:	d010      	beq.n	80a238e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a236c:	2806      	cmp	r0, #6
 80a236e:	d804      	bhi.n	80a237a <digitalWrite+0x1c>
 80a2370:	234d      	movs	r3, #77	; 0x4d
 80a2372:	fa23 f000 	lsr.w	r0, r3, r0
 80a2376:	07c3      	lsls	r3, r0, #31
 80a2378:	d409      	bmi.n	80a238e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a237a:	4620      	mov	r0, r4
 80a237c:	f7ff ffba 	bl	80a22f4 <pinAvailable>
 80a2380:	b128      	cbz	r0, 80a238e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2382:	4629      	mov	r1, r5
 80a2384:	4620      	mov	r0, r4
}
 80a2386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a238a:	f7ff ba19 	b.w	80a17c0 <HAL_GPIO_Write>
 80a238e:	bd38      	pop	{r3, r4, r5, pc}

080a2390 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2390:	b510      	push	{r4, lr}
 80a2392:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2394:	f7ff fa0c 	bl	80a17b0 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a2398:	3804      	subs	r0, #4
 80a239a:	b2c0      	uxtb	r0, r0
 80a239c:	2801      	cmp	r0, #1
 80a239e:	d908      	bls.n	80a23b2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a23a0:	4620      	mov	r0, r4
 80a23a2:	f7ff ffa7 	bl	80a22f4 <pinAvailable>
 80a23a6:	b120      	cbz	r0, 80a23b2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a23a8:	4620      	mov	r0, r4
}
 80a23aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a23ae:	f7ff ba0f 	b.w	80a17d0 <HAL_GPIO_Read>
}
 80a23b2:	2000      	movs	r0, #0
 80a23b4:	bd10      	pop	{r4, pc}
	...

080a23b8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a23b8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a23ba:	4c0c      	ldr	r4, [pc, #48]	; (80a23ec <_GLOBAL__sub_I_SPI+0x34>)
 80a23bc:	4e0c      	ldr	r6, [pc, #48]	; (80a23f0 <_GLOBAL__sub_I_SPI+0x38>)
 80a23be:	4d0d      	ldr	r5, [pc, #52]	; (80a23f4 <_GLOBAL__sub_I_SPI+0x3c>)
 80a23c0:	2100      	movs	r1, #0
 80a23c2:	4620      	mov	r0, r4
 80a23c4:	f7ff fb9e 	bl	80a1b04 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a23c8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a23ca:	4c0b      	ldr	r4, [pc, #44]	; (80a23f8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a23cc:	4632      	mov	r2, r6
 80a23ce:	4629      	mov	r1, r5
 80a23d0:	f000 f84c 	bl	80a246c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a23d4:	2101      	movs	r1, #1
 80a23d6:	4620      	mov	r0, r4
 80a23d8:	f7ff fb94 	bl	80a1b04 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a23dc:	4632      	mov	r2, r6
 80a23de:	4629      	mov	r1, r5
 80a23e0:	4620      	mov	r0, r4
 80a23e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a23e6:	f000 b841 	b.w	80a246c <__aeabi_atexit>
 80a23ea:	bf00      	nop
 80a23ec:	20000860 	.word	0x20000860
 80a23f0:	20000328 	.word	0x20000328
 80a23f4:	080a1af5 	.word	0x080a1af5
 80a23f8:	20000870 	.word	0x20000870

080a23fc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a23fc:	b513      	push	{r0, r1, r4, lr}
 80a23fe:	4c08      	ldr	r4, [pc, #32]	; (80a2420 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2400:	2300      	movs	r3, #0
 80a2402:	461a      	mov	r2, r3
 80a2404:	4619      	mov	r1, r3
 80a2406:	9300      	str	r3, [sp, #0]
 80a2408:	4620      	mov	r0, r4
 80a240a:	f7ff fd9d 	bl	80a1f48 <_ZN9IPAddressC1Ehhhh>
 80a240e:	4620      	mov	r0, r4
 80a2410:	4a04      	ldr	r2, [pc, #16]	; (80a2424 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2412:	4905      	ldr	r1, [pc, #20]	; (80a2428 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2414:	b002      	add	sp, #8
 80a2416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a241a:	f000 b827 	b.w	80a246c <__aeabi_atexit>
 80a241e:	bf00      	nop
 80a2420:	20000884 	.word	0x20000884
 80a2424:	20000328 	.word	0x20000328
 80a2428:	080a1eed 	.word	0x080a1eed

080a242c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a242c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a242e:	4d0b      	ldr	r5, [pc, #44]	; (80a245c <_Z19__fetch_global_Wirev+0x30>)
 80a2430:	6829      	ldr	r1, [r5, #0]
 80a2432:	f011 0401 	ands.w	r4, r1, #1
 80a2436:	d10f      	bne.n	80a2458 <_Z19__fetch_global_Wirev+0x2c>
 80a2438:	4628      	mov	r0, r5
 80a243a:	f7fd fe30 	bl	80a009e <__cxa_guard_acquire>
 80a243e:	b158      	cbz	r0, 80a2458 <_Z19__fetch_global_Wirev+0x2c>
 80a2440:	4621      	mov	r1, r4
 80a2442:	4807      	ldr	r0, [pc, #28]	; (80a2460 <_Z19__fetch_global_Wirev+0x34>)
 80a2444:	f7ff ff04 	bl	80a2250 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2448:	4628      	mov	r0, r5
 80a244a:	f7fd fe2d 	bl	80a00a8 <__cxa_guard_release>
 80a244e:	4a05      	ldr	r2, [pc, #20]	; (80a2464 <_Z19__fetch_global_Wirev+0x38>)
 80a2450:	4905      	ldr	r1, [pc, #20]	; (80a2468 <_Z19__fetch_global_Wirev+0x3c>)
 80a2452:	4803      	ldr	r0, [pc, #12]	; (80a2460 <_Z19__fetch_global_Wirev+0x34>)
 80a2454:	f000 f80a 	bl	80a246c <__aeabi_atexit>
	return wire;
}
 80a2458:	4801      	ldr	r0, [pc, #4]	; (80a2460 <_Z19__fetch_global_Wirev+0x34>)
 80a245a:	bd38      	pop	{r3, r4, r5, pc}
 80a245c:	2000089c 	.word	0x2000089c
 80a2460:	200008a0 	.word	0x200008a0
 80a2464:	20000328 	.word	0x20000328
 80a2468:	080a21f9 	.word	0x080a21f9

080a246c <__aeabi_atexit>:
 80a246c:	460b      	mov	r3, r1
 80a246e:	4601      	mov	r1, r0
 80a2470:	4618      	mov	r0, r3
 80a2472:	f000 bd6f 	b.w	80a2f54 <__cxa_atexit>
	...

080a2478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2478:	4b18      	ldr	r3, [pc, #96]	; (80a24dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a247a:	681a      	ldr	r2, [r3, #0]
 80a247c:	07d1      	lsls	r1, r2, #31
 80a247e:	bf5c      	itt	pl
 80a2480:	2201      	movpl	r2, #1
 80a2482:	601a      	strpl	r2, [r3, #0]
 80a2484:	4b16      	ldr	r3, [pc, #88]	; (80a24e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2486:	681a      	ldr	r2, [r3, #0]
 80a2488:	07d2      	lsls	r2, r2, #31
 80a248a:	bf5c      	itt	pl
 80a248c:	2201      	movpl	r2, #1
 80a248e:	601a      	strpl	r2, [r3, #0]
 80a2490:	4b14      	ldr	r3, [pc, #80]	; (80a24e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2492:	681a      	ldr	r2, [r3, #0]
 80a2494:	07d0      	lsls	r0, r2, #31
 80a2496:	bf5c      	itt	pl
 80a2498:	2201      	movpl	r2, #1
 80a249a:	601a      	strpl	r2, [r3, #0]
 80a249c:	4b12      	ldr	r3, [pc, #72]	; (80a24e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a249e:	681a      	ldr	r2, [r3, #0]
 80a24a0:	07d1      	lsls	r1, r2, #31
 80a24a2:	bf5c      	itt	pl
 80a24a4:	2201      	movpl	r2, #1
 80a24a6:	601a      	strpl	r2, [r3, #0]
 80a24a8:	4b10      	ldr	r3, [pc, #64]	; (80a24ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a24aa:	681a      	ldr	r2, [r3, #0]
 80a24ac:	07d2      	lsls	r2, r2, #31
 80a24ae:	bf5c      	itt	pl
 80a24b0:	2201      	movpl	r2, #1
 80a24b2:	601a      	strpl	r2, [r3, #0]
 80a24b4:	4b0e      	ldr	r3, [pc, #56]	; (80a24f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a24b6:	681a      	ldr	r2, [r3, #0]
 80a24b8:	07d0      	lsls	r0, r2, #31
 80a24ba:	bf5c      	itt	pl
 80a24bc:	2201      	movpl	r2, #1
 80a24be:	601a      	strpl	r2, [r3, #0]
 80a24c0:	4b0c      	ldr	r3, [pc, #48]	; (80a24f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a24c2:	681a      	ldr	r2, [r3, #0]
 80a24c4:	07d1      	lsls	r1, r2, #31
 80a24c6:	bf5c      	itt	pl
 80a24c8:	2201      	movpl	r2, #1
 80a24ca:	601a      	strpl	r2, [r3, #0]
 80a24cc:	4b0a      	ldr	r3, [pc, #40]	; (80a24f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a24ce:	681a      	ldr	r2, [r3, #0]
 80a24d0:	07d2      	lsls	r2, r2, #31
 80a24d2:	bf5c      	itt	pl
 80a24d4:	2201      	movpl	r2, #1
 80a24d6:	601a      	strpl	r2, [r3, #0]
 80a24d8:	4770      	bx	lr
 80a24da:	bf00      	nop
 80a24dc:	200008d0 	.word	0x200008d0
 80a24e0:	200008cc 	.word	0x200008cc
 80a24e4:	200008c8 	.word	0x200008c8
 80a24e8:	200008c4 	.word	0x200008c4
 80a24ec:	200008c0 	.word	0x200008c0
 80a24f0:	200008bc 	.word	0x200008bc
 80a24f4:	200008b8 	.word	0x200008b8
 80a24f8:	200008b4 	.word	0x200008b4

080a24fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a24fc:	4b24      	ldr	r3, [pc, #144]	; (80a2590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a24fe:	681a      	ldr	r2, [r3, #0]
 80a2500:	07d0      	lsls	r0, r2, #31
 80a2502:	bf5c      	itt	pl
 80a2504:	2201      	movpl	r2, #1
 80a2506:	601a      	strpl	r2, [r3, #0]
 80a2508:	4b22      	ldr	r3, [pc, #136]	; (80a2594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a250a:	681a      	ldr	r2, [r3, #0]
 80a250c:	07d1      	lsls	r1, r2, #31
 80a250e:	bf5c      	itt	pl
 80a2510:	2201      	movpl	r2, #1
 80a2512:	601a      	strpl	r2, [r3, #0]
 80a2514:	4b20      	ldr	r3, [pc, #128]	; (80a2598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2516:	681a      	ldr	r2, [r3, #0]
 80a2518:	07d2      	lsls	r2, r2, #31
 80a251a:	bf5c      	itt	pl
 80a251c:	2201      	movpl	r2, #1
 80a251e:	601a      	strpl	r2, [r3, #0]
 80a2520:	4b1e      	ldr	r3, [pc, #120]	; (80a259c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2522:	681a      	ldr	r2, [r3, #0]
 80a2524:	07d0      	lsls	r0, r2, #31
 80a2526:	bf5c      	itt	pl
 80a2528:	2201      	movpl	r2, #1
 80a252a:	601a      	strpl	r2, [r3, #0]
 80a252c:	4b1c      	ldr	r3, [pc, #112]	; (80a25a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a252e:	681a      	ldr	r2, [r3, #0]
 80a2530:	07d1      	lsls	r1, r2, #31
 80a2532:	bf5c      	itt	pl
 80a2534:	2201      	movpl	r2, #1
 80a2536:	601a      	strpl	r2, [r3, #0]
 80a2538:	4b1a      	ldr	r3, [pc, #104]	; (80a25a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a253a:	681a      	ldr	r2, [r3, #0]
 80a253c:	07d2      	lsls	r2, r2, #31
 80a253e:	bf5c      	itt	pl
 80a2540:	2201      	movpl	r2, #1
 80a2542:	601a      	strpl	r2, [r3, #0]
 80a2544:	4b18      	ldr	r3, [pc, #96]	; (80a25a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2546:	681a      	ldr	r2, [r3, #0]
 80a2548:	07d0      	lsls	r0, r2, #31
 80a254a:	bf5c      	itt	pl
 80a254c:	2201      	movpl	r2, #1
 80a254e:	601a      	strpl	r2, [r3, #0]
 80a2550:	4b16      	ldr	r3, [pc, #88]	; (80a25ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2552:	681a      	ldr	r2, [r3, #0]
 80a2554:	07d1      	lsls	r1, r2, #31
 80a2556:	bf5c      	itt	pl
 80a2558:	2201      	movpl	r2, #1
 80a255a:	601a      	strpl	r2, [r3, #0]
 80a255c:	4b14      	ldr	r3, [pc, #80]	; (80a25b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a255e:	681a      	ldr	r2, [r3, #0]
 80a2560:	07d2      	lsls	r2, r2, #31
 80a2562:	bf5c      	itt	pl
 80a2564:	2201      	movpl	r2, #1
 80a2566:	601a      	strpl	r2, [r3, #0]
 80a2568:	4b12      	ldr	r3, [pc, #72]	; (80a25b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a256a:	681a      	ldr	r2, [r3, #0]
 80a256c:	07d0      	lsls	r0, r2, #31
 80a256e:	bf5c      	itt	pl
 80a2570:	2201      	movpl	r2, #1
 80a2572:	601a      	strpl	r2, [r3, #0]
 80a2574:	4b10      	ldr	r3, [pc, #64]	; (80a25b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2576:	681a      	ldr	r2, [r3, #0]
 80a2578:	07d1      	lsls	r1, r2, #31
 80a257a:	bf5c      	itt	pl
 80a257c:	2201      	movpl	r2, #1
 80a257e:	601a      	strpl	r2, [r3, #0]
 80a2580:	4b0e      	ldr	r3, [pc, #56]	; (80a25bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2582:	681a      	ldr	r2, [r3, #0]
 80a2584:	07d2      	lsls	r2, r2, #31
 80a2586:	bf5c      	itt	pl
 80a2588:	2201      	movpl	r2, #1
 80a258a:	601a      	strpl	r2, [r3, #0]
 80a258c:	4770      	bx	lr
 80a258e:	bf00      	nop
 80a2590:	20000900 	.word	0x20000900
 80a2594:	200008fc 	.word	0x200008fc
 80a2598:	200008f8 	.word	0x200008f8
 80a259c:	200008f4 	.word	0x200008f4
 80a25a0:	200008f0 	.word	0x200008f0
 80a25a4:	200008ec 	.word	0x200008ec
 80a25a8:	200008e8 	.word	0x200008e8
 80a25ac:	200008e4 	.word	0x200008e4
 80a25b0:	200008e0 	.word	0x200008e0
 80a25b4:	200008dc 	.word	0x200008dc
 80a25b8:	200008d8 	.word	0x200008d8
 80a25bc:	200008d4 	.word	0x200008d4

080a25c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a25c0:	4b24      	ldr	r3, [pc, #144]	; (80a2654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a25c2:	681a      	ldr	r2, [r3, #0]
 80a25c4:	07d0      	lsls	r0, r2, #31
 80a25c6:	bf5c      	itt	pl
 80a25c8:	2201      	movpl	r2, #1
 80a25ca:	601a      	strpl	r2, [r3, #0]
 80a25cc:	4b22      	ldr	r3, [pc, #136]	; (80a2658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a25ce:	681a      	ldr	r2, [r3, #0]
 80a25d0:	07d1      	lsls	r1, r2, #31
 80a25d2:	bf5c      	itt	pl
 80a25d4:	2201      	movpl	r2, #1
 80a25d6:	601a      	strpl	r2, [r3, #0]
 80a25d8:	4b20      	ldr	r3, [pc, #128]	; (80a265c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a25da:	681a      	ldr	r2, [r3, #0]
 80a25dc:	07d2      	lsls	r2, r2, #31
 80a25de:	bf5c      	itt	pl
 80a25e0:	2201      	movpl	r2, #1
 80a25e2:	601a      	strpl	r2, [r3, #0]
 80a25e4:	4b1e      	ldr	r3, [pc, #120]	; (80a2660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a25e6:	681a      	ldr	r2, [r3, #0]
 80a25e8:	07d0      	lsls	r0, r2, #31
 80a25ea:	bf5c      	itt	pl
 80a25ec:	2201      	movpl	r2, #1
 80a25ee:	601a      	strpl	r2, [r3, #0]
 80a25f0:	4b1c      	ldr	r3, [pc, #112]	; (80a2664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a25f2:	681a      	ldr	r2, [r3, #0]
 80a25f4:	07d1      	lsls	r1, r2, #31
 80a25f6:	bf5c      	itt	pl
 80a25f8:	2201      	movpl	r2, #1
 80a25fa:	601a      	strpl	r2, [r3, #0]
 80a25fc:	4b1a      	ldr	r3, [pc, #104]	; (80a2668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a25fe:	681a      	ldr	r2, [r3, #0]
 80a2600:	07d2      	lsls	r2, r2, #31
 80a2602:	bf5c      	itt	pl
 80a2604:	2201      	movpl	r2, #1
 80a2606:	601a      	strpl	r2, [r3, #0]
 80a2608:	4b18      	ldr	r3, [pc, #96]	; (80a266c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a260a:	681a      	ldr	r2, [r3, #0]
 80a260c:	07d0      	lsls	r0, r2, #31
 80a260e:	bf5c      	itt	pl
 80a2610:	2201      	movpl	r2, #1
 80a2612:	601a      	strpl	r2, [r3, #0]
 80a2614:	4b16      	ldr	r3, [pc, #88]	; (80a2670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2616:	681a      	ldr	r2, [r3, #0]
 80a2618:	07d1      	lsls	r1, r2, #31
 80a261a:	bf5c      	itt	pl
 80a261c:	2201      	movpl	r2, #1
 80a261e:	601a      	strpl	r2, [r3, #0]
 80a2620:	4b14      	ldr	r3, [pc, #80]	; (80a2674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2622:	681a      	ldr	r2, [r3, #0]
 80a2624:	07d2      	lsls	r2, r2, #31
 80a2626:	bf5c      	itt	pl
 80a2628:	2201      	movpl	r2, #1
 80a262a:	601a      	strpl	r2, [r3, #0]
 80a262c:	4b12      	ldr	r3, [pc, #72]	; (80a2678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a262e:	681a      	ldr	r2, [r3, #0]
 80a2630:	07d0      	lsls	r0, r2, #31
 80a2632:	bf5c      	itt	pl
 80a2634:	2201      	movpl	r2, #1
 80a2636:	601a      	strpl	r2, [r3, #0]
 80a2638:	4b10      	ldr	r3, [pc, #64]	; (80a267c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a263a:	681a      	ldr	r2, [r3, #0]
 80a263c:	07d1      	lsls	r1, r2, #31
 80a263e:	bf5c      	itt	pl
 80a2640:	2201      	movpl	r2, #1
 80a2642:	601a      	strpl	r2, [r3, #0]
 80a2644:	4b0e      	ldr	r3, [pc, #56]	; (80a2680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2646:	681a      	ldr	r2, [r3, #0]
 80a2648:	07d2      	lsls	r2, r2, #31
 80a264a:	bf5c      	itt	pl
 80a264c:	2201      	movpl	r2, #1
 80a264e:	601a      	strpl	r2, [r3, #0]
 80a2650:	4770      	bx	lr
 80a2652:	bf00      	nop
 80a2654:	20000930 	.word	0x20000930
 80a2658:	2000092c 	.word	0x2000092c
 80a265c:	20000928 	.word	0x20000928
 80a2660:	20000924 	.word	0x20000924
 80a2664:	20000920 	.word	0x20000920
 80a2668:	2000091c 	.word	0x2000091c
 80a266c:	20000918 	.word	0x20000918
 80a2670:	20000914 	.word	0x20000914
 80a2674:	20000910 	.word	0x20000910
 80a2678:	2000090c 	.word	0x2000090c
 80a267c:	20000908 	.word	0x20000908
 80a2680:	20000904 	.word	0x20000904

080a2684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2684:	4b18      	ldr	r3, [pc, #96]	; (80a26e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2686:	681a      	ldr	r2, [r3, #0]
 80a2688:	07d1      	lsls	r1, r2, #31
 80a268a:	bf5c      	itt	pl
 80a268c:	2201      	movpl	r2, #1
 80a268e:	601a      	strpl	r2, [r3, #0]
 80a2690:	4b16      	ldr	r3, [pc, #88]	; (80a26ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2692:	681a      	ldr	r2, [r3, #0]
 80a2694:	07d2      	lsls	r2, r2, #31
 80a2696:	bf5c      	itt	pl
 80a2698:	2201      	movpl	r2, #1
 80a269a:	601a      	strpl	r2, [r3, #0]
 80a269c:	4b14      	ldr	r3, [pc, #80]	; (80a26f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a269e:	681a      	ldr	r2, [r3, #0]
 80a26a0:	07d0      	lsls	r0, r2, #31
 80a26a2:	bf5c      	itt	pl
 80a26a4:	2201      	movpl	r2, #1
 80a26a6:	601a      	strpl	r2, [r3, #0]
 80a26a8:	4b12      	ldr	r3, [pc, #72]	; (80a26f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a26aa:	681a      	ldr	r2, [r3, #0]
 80a26ac:	07d1      	lsls	r1, r2, #31
 80a26ae:	bf5c      	itt	pl
 80a26b0:	2201      	movpl	r2, #1
 80a26b2:	601a      	strpl	r2, [r3, #0]
 80a26b4:	4b10      	ldr	r3, [pc, #64]	; (80a26f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a26b6:	681a      	ldr	r2, [r3, #0]
 80a26b8:	07d2      	lsls	r2, r2, #31
 80a26ba:	bf5c      	itt	pl
 80a26bc:	2201      	movpl	r2, #1
 80a26be:	601a      	strpl	r2, [r3, #0]
 80a26c0:	4b0e      	ldr	r3, [pc, #56]	; (80a26fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a26c2:	681a      	ldr	r2, [r3, #0]
 80a26c4:	07d0      	lsls	r0, r2, #31
 80a26c6:	bf5c      	itt	pl
 80a26c8:	2201      	movpl	r2, #1
 80a26ca:	601a      	strpl	r2, [r3, #0]
 80a26cc:	4b0c      	ldr	r3, [pc, #48]	; (80a2700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a26ce:	681a      	ldr	r2, [r3, #0]
 80a26d0:	07d1      	lsls	r1, r2, #31
 80a26d2:	bf5c      	itt	pl
 80a26d4:	2201      	movpl	r2, #1
 80a26d6:	601a      	strpl	r2, [r3, #0]
 80a26d8:	4b0a      	ldr	r3, [pc, #40]	; (80a2704 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a26da:	681a      	ldr	r2, [r3, #0]
 80a26dc:	07d2      	lsls	r2, r2, #31
 80a26de:	bf5c      	itt	pl
 80a26e0:	2201      	movpl	r2, #1
 80a26e2:	601a      	strpl	r2, [r3, #0]
 80a26e4:	4770      	bx	lr
 80a26e6:	bf00      	nop
 80a26e8:	20000950 	.word	0x20000950
 80a26ec:	2000094c 	.word	0x2000094c
 80a26f0:	20000948 	.word	0x20000948
 80a26f4:	20000944 	.word	0x20000944
 80a26f8:	20000940 	.word	0x20000940
 80a26fc:	2000093c 	.word	0x2000093c
 80a2700:	20000938 	.word	0x20000938
 80a2704:	20000934 	.word	0x20000934

080a2708 <__aeabi_drsub>:
 80a2708:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a270c:	e002      	b.n	80a2714 <__adddf3>
 80a270e:	bf00      	nop

080a2710 <__aeabi_dsub>:
 80a2710:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2714 <__adddf3>:
 80a2714:	b530      	push	{r4, r5, lr}
 80a2716:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a271a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a271e:	ea94 0f05 	teq	r4, r5
 80a2722:	bf08      	it	eq
 80a2724:	ea90 0f02 	teqeq	r0, r2
 80a2728:	bf1f      	itttt	ne
 80a272a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a272e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2732:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2736:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a273a:	f000 80e2 	beq.w	80a2902 <__adddf3+0x1ee>
 80a273e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2742:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2746:	bfb8      	it	lt
 80a2748:	426d      	neglt	r5, r5
 80a274a:	dd0c      	ble.n	80a2766 <__adddf3+0x52>
 80a274c:	442c      	add	r4, r5
 80a274e:	ea80 0202 	eor.w	r2, r0, r2
 80a2752:	ea81 0303 	eor.w	r3, r1, r3
 80a2756:	ea82 0000 	eor.w	r0, r2, r0
 80a275a:	ea83 0101 	eor.w	r1, r3, r1
 80a275e:	ea80 0202 	eor.w	r2, r0, r2
 80a2762:	ea81 0303 	eor.w	r3, r1, r3
 80a2766:	2d36      	cmp	r5, #54	; 0x36
 80a2768:	bf88      	it	hi
 80a276a:	bd30      	pophi	{r4, r5, pc}
 80a276c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2774:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2778:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a277c:	d002      	beq.n	80a2784 <__adddf3+0x70>
 80a277e:	4240      	negs	r0, r0
 80a2780:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2784:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a278c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2790:	d002      	beq.n	80a2798 <__adddf3+0x84>
 80a2792:	4252      	negs	r2, r2
 80a2794:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2798:	ea94 0f05 	teq	r4, r5
 80a279c:	f000 80a7 	beq.w	80a28ee <__adddf3+0x1da>
 80a27a0:	f1a4 0401 	sub.w	r4, r4, #1
 80a27a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80a27a8:	db0d      	blt.n	80a27c6 <__adddf3+0xb2>
 80a27aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a27ae:	fa22 f205 	lsr.w	r2, r2, r5
 80a27b2:	1880      	adds	r0, r0, r2
 80a27b4:	f141 0100 	adc.w	r1, r1, #0
 80a27b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80a27bc:	1880      	adds	r0, r0, r2
 80a27be:	fa43 f305 	asr.w	r3, r3, r5
 80a27c2:	4159      	adcs	r1, r3
 80a27c4:	e00e      	b.n	80a27e4 <__adddf3+0xd0>
 80a27c6:	f1a5 0520 	sub.w	r5, r5, #32
 80a27ca:	f10e 0e20 	add.w	lr, lr, #32
 80a27ce:	2a01      	cmp	r2, #1
 80a27d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a27d4:	bf28      	it	cs
 80a27d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a27da:	fa43 f305 	asr.w	r3, r3, r5
 80a27de:	18c0      	adds	r0, r0, r3
 80a27e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a27e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a27e8:	d507      	bpl.n	80a27fa <__adddf3+0xe6>
 80a27ea:	f04f 0e00 	mov.w	lr, #0
 80a27ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80a27f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a27f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80a27fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a27fe:	d31b      	bcc.n	80a2838 <__adddf3+0x124>
 80a2800:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2804:	d30c      	bcc.n	80a2820 <__adddf3+0x10c>
 80a2806:	0849      	lsrs	r1, r1, #1
 80a2808:	ea5f 0030 	movs.w	r0, r0, rrx
 80a280c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2810:	f104 0401 	add.w	r4, r4, #1
 80a2814:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2818:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a281c:	f080 809a 	bcs.w	80a2954 <__adddf3+0x240>
 80a2820:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2824:	bf08      	it	eq
 80a2826:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a282a:	f150 0000 	adcs.w	r0, r0, #0
 80a282e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2832:	ea41 0105 	orr.w	r1, r1, r5
 80a2836:	bd30      	pop	{r4, r5, pc}
 80a2838:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a283c:	4140      	adcs	r0, r0
 80a283e:	eb41 0101 	adc.w	r1, r1, r1
 80a2842:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2846:	f1a4 0401 	sub.w	r4, r4, #1
 80a284a:	d1e9      	bne.n	80a2820 <__adddf3+0x10c>
 80a284c:	f091 0f00 	teq	r1, #0
 80a2850:	bf04      	itt	eq
 80a2852:	4601      	moveq	r1, r0
 80a2854:	2000      	moveq	r0, #0
 80a2856:	fab1 f381 	clz	r3, r1
 80a285a:	bf08      	it	eq
 80a285c:	3320      	addeq	r3, #32
 80a285e:	f1a3 030b 	sub.w	r3, r3, #11
 80a2862:	f1b3 0220 	subs.w	r2, r3, #32
 80a2866:	da0c      	bge.n	80a2882 <__adddf3+0x16e>
 80a2868:	320c      	adds	r2, #12
 80a286a:	dd08      	ble.n	80a287e <__adddf3+0x16a>
 80a286c:	f102 0c14 	add.w	ip, r2, #20
 80a2870:	f1c2 020c 	rsb	r2, r2, #12
 80a2874:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2878:	fa21 f102 	lsr.w	r1, r1, r2
 80a287c:	e00c      	b.n	80a2898 <__adddf3+0x184>
 80a287e:	f102 0214 	add.w	r2, r2, #20
 80a2882:	bfd8      	it	le
 80a2884:	f1c2 0c20 	rsble	ip, r2, #32
 80a2888:	fa01 f102 	lsl.w	r1, r1, r2
 80a288c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2890:	bfdc      	itt	le
 80a2892:	ea41 010c 	orrle.w	r1, r1, ip
 80a2896:	4090      	lslle	r0, r2
 80a2898:	1ae4      	subs	r4, r4, r3
 80a289a:	bfa2      	ittt	ge
 80a289c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a28a0:	4329      	orrge	r1, r5
 80a28a2:	bd30      	popge	{r4, r5, pc}
 80a28a4:	ea6f 0404 	mvn.w	r4, r4
 80a28a8:	3c1f      	subs	r4, #31
 80a28aa:	da1c      	bge.n	80a28e6 <__adddf3+0x1d2>
 80a28ac:	340c      	adds	r4, #12
 80a28ae:	dc0e      	bgt.n	80a28ce <__adddf3+0x1ba>
 80a28b0:	f104 0414 	add.w	r4, r4, #20
 80a28b4:	f1c4 0220 	rsb	r2, r4, #32
 80a28b8:	fa20 f004 	lsr.w	r0, r0, r4
 80a28bc:	fa01 f302 	lsl.w	r3, r1, r2
 80a28c0:	ea40 0003 	orr.w	r0, r0, r3
 80a28c4:	fa21 f304 	lsr.w	r3, r1, r4
 80a28c8:	ea45 0103 	orr.w	r1, r5, r3
 80a28cc:	bd30      	pop	{r4, r5, pc}
 80a28ce:	f1c4 040c 	rsb	r4, r4, #12
 80a28d2:	f1c4 0220 	rsb	r2, r4, #32
 80a28d6:	fa20 f002 	lsr.w	r0, r0, r2
 80a28da:	fa01 f304 	lsl.w	r3, r1, r4
 80a28de:	ea40 0003 	orr.w	r0, r0, r3
 80a28e2:	4629      	mov	r1, r5
 80a28e4:	bd30      	pop	{r4, r5, pc}
 80a28e6:	fa21 f004 	lsr.w	r0, r1, r4
 80a28ea:	4629      	mov	r1, r5
 80a28ec:	bd30      	pop	{r4, r5, pc}
 80a28ee:	f094 0f00 	teq	r4, #0
 80a28f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a28f6:	bf06      	itte	eq
 80a28f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a28fc:	3401      	addeq	r4, #1
 80a28fe:	3d01      	subne	r5, #1
 80a2900:	e74e      	b.n	80a27a0 <__adddf3+0x8c>
 80a2902:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2906:	bf18      	it	ne
 80a2908:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a290c:	d029      	beq.n	80a2962 <__adddf3+0x24e>
 80a290e:	ea94 0f05 	teq	r4, r5
 80a2912:	bf08      	it	eq
 80a2914:	ea90 0f02 	teqeq	r0, r2
 80a2918:	d005      	beq.n	80a2926 <__adddf3+0x212>
 80a291a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a291e:	bf04      	itt	eq
 80a2920:	4619      	moveq	r1, r3
 80a2922:	4610      	moveq	r0, r2
 80a2924:	bd30      	pop	{r4, r5, pc}
 80a2926:	ea91 0f03 	teq	r1, r3
 80a292a:	bf1e      	ittt	ne
 80a292c:	2100      	movne	r1, #0
 80a292e:	2000      	movne	r0, #0
 80a2930:	bd30      	popne	{r4, r5, pc}
 80a2932:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2936:	d105      	bne.n	80a2944 <__adddf3+0x230>
 80a2938:	0040      	lsls	r0, r0, #1
 80a293a:	4149      	adcs	r1, r1
 80a293c:	bf28      	it	cs
 80a293e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2942:	bd30      	pop	{r4, r5, pc}
 80a2944:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2948:	bf3c      	itt	cc
 80a294a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a294e:	bd30      	popcc	{r4, r5, pc}
 80a2950:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2954:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a295c:	f04f 0000 	mov.w	r0, #0
 80a2960:	bd30      	pop	{r4, r5, pc}
 80a2962:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2966:	bf1a      	itte	ne
 80a2968:	4619      	movne	r1, r3
 80a296a:	4610      	movne	r0, r2
 80a296c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2970:	bf1c      	itt	ne
 80a2972:	460b      	movne	r3, r1
 80a2974:	4602      	movne	r2, r0
 80a2976:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a297a:	bf06      	itte	eq
 80a297c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2980:	ea91 0f03 	teqeq	r1, r3
 80a2984:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2988:	bd30      	pop	{r4, r5, pc}
 80a298a:	bf00      	nop

080a298c <__aeabi_ui2d>:
 80a298c:	f090 0f00 	teq	r0, #0
 80a2990:	bf04      	itt	eq
 80a2992:	2100      	moveq	r1, #0
 80a2994:	4770      	bxeq	lr
 80a2996:	b530      	push	{r4, r5, lr}
 80a2998:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a299c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a29a0:	f04f 0500 	mov.w	r5, #0
 80a29a4:	f04f 0100 	mov.w	r1, #0
 80a29a8:	e750      	b.n	80a284c <__adddf3+0x138>
 80a29aa:	bf00      	nop

080a29ac <__aeabi_i2d>:
 80a29ac:	f090 0f00 	teq	r0, #0
 80a29b0:	bf04      	itt	eq
 80a29b2:	2100      	moveq	r1, #0
 80a29b4:	4770      	bxeq	lr
 80a29b6:	b530      	push	{r4, r5, lr}
 80a29b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a29bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a29c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a29c4:	bf48      	it	mi
 80a29c6:	4240      	negmi	r0, r0
 80a29c8:	f04f 0100 	mov.w	r1, #0
 80a29cc:	e73e      	b.n	80a284c <__adddf3+0x138>
 80a29ce:	bf00      	nop

080a29d0 <__aeabi_f2d>:
 80a29d0:	0042      	lsls	r2, r0, #1
 80a29d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a29d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a29da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a29de:	bf1f      	itttt	ne
 80a29e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a29e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a29e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a29ec:	4770      	bxne	lr
 80a29ee:	f092 0f00 	teq	r2, #0
 80a29f2:	bf14      	ite	ne
 80a29f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a29f8:	4770      	bxeq	lr
 80a29fa:	b530      	push	{r4, r5, lr}
 80a29fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2a00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2a04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2a08:	e720      	b.n	80a284c <__adddf3+0x138>
 80a2a0a:	bf00      	nop

080a2a0c <__aeabi_ul2d>:
 80a2a0c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2a10:	bf08      	it	eq
 80a2a12:	4770      	bxeq	lr
 80a2a14:	b530      	push	{r4, r5, lr}
 80a2a16:	f04f 0500 	mov.w	r5, #0
 80a2a1a:	e00a      	b.n	80a2a32 <__aeabi_l2d+0x16>

080a2a1c <__aeabi_l2d>:
 80a2a1c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2a20:	bf08      	it	eq
 80a2a22:	4770      	bxeq	lr
 80a2a24:	b530      	push	{r4, r5, lr}
 80a2a26:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2a2a:	d502      	bpl.n	80a2a32 <__aeabi_l2d+0x16>
 80a2a2c:	4240      	negs	r0, r0
 80a2a2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2a32:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2a36:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2a3a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2a3e:	f43f aedc 	beq.w	80a27fa <__adddf3+0xe6>
 80a2a42:	f04f 0203 	mov.w	r2, #3
 80a2a46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2a4a:	bf18      	it	ne
 80a2a4c:	3203      	addne	r2, #3
 80a2a4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2a52:	bf18      	it	ne
 80a2a54:	3203      	addne	r2, #3
 80a2a56:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2a5a:	f1c2 0320 	rsb	r3, r2, #32
 80a2a5e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2a62:	fa20 f002 	lsr.w	r0, r0, r2
 80a2a66:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2a6a:	ea40 000e 	orr.w	r0, r0, lr
 80a2a6e:	fa21 f102 	lsr.w	r1, r1, r2
 80a2a72:	4414      	add	r4, r2
 80a2a74:	e6c1      	b.n	80a27fa <__adddf3+0xe6>
 80a2a76:	bf00      	nop

080a2a78 <__gedf2>:
 80a2a78:	f04f 3cff 	mov.w	ip, #4294967295
 80a2a7c:	e006      	b.n	80a2a8c <__cmpdf2+0x4>
 80a2a7e:	bf00      	nop

080a2a80 <__ledf2>:
 80a2a80:	f04f 0c01 	mov.w	ip, #1
 80a2a84:	e002      	b.n	80a2a8c <__cmpdf2+0x4>
 80a2a86:	bf00      	nop

080a2a88 <__cmpdf2>:
 80a2a88:	f04f 0c01 	mov.w	ip, #1
 80a2a8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2a9c:	bf18      	it	ne
 80a2a9e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2aa2:	d01b      	beq.n	80a2adc <__cmpdf2+0x54>
 80a2aa4:	b001      	add	sp, #4
 80a2aa6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2aaa:	bf0c      	ite	eq
 80a2aac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2ab0:	ea91 0f03 	teqne	r1, r3
 80a2ab4:	bf02      	ittt	eq
 80a2ab6:	ea90 0f02 	teqeq	r0, r2
 80a2aba:	2000      	moveq	r0, #0
 80a2abc:	4770      	bxeq	lr
 80a2abe:	f110 0f00 	cmn.w	r0, #0
 80a2ac2:	ea91 0f03 	teq	r1, r3
 80a2ac6:	bf58      	it	pl
 80a2ac8:	4299      	cmppl	r1, r3
 80a2aca:	bf08      	it	eq
 80a2acc:	4290      	cmpeq	r0, r2
 80a2ace:	bf2c      	ite	cs
 80a2ad0:	17d8      	asrcs	r0, r3, #31
 80a2ad2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2ad6:	f040 0001 	orr.w	r0, r0, #1
 80a2ada:	4770      	bx	lr
 80a2adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2ae4:	d102      	bne.n	80a2aec <__cmpdf2+0x64>
 80a2ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2aea:	d107      	bne.n	80a2afc <__cmpdf2+0x74>
 80a2aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2af4:	d1d6      	bne.n	80a2aa4 <__cmpdf2+0x1c>
 80a2af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2afa:	d0d3      	beq.n	80a2aa4 <__cmpdf2+0x1c>
 80a2afc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2b00:	4770      	bx	lr
 80a2b02:	bf00      	nop

080a2b04 <__aeabi_cdrcmple>:
 80a2b04:	4684      	mov	ip, r0
 80a2b06:	4610      	mov	r0, r2
 80a2b08:	4662      	mov	r2, ip
 80a2b0a:	468c      	mov	ip, r1
 80a2b0c:	4619      	mov	r1, r3
 80a2b0e:	4663      	mov	r3, ip
 80a2b10:	e000      	b.n	80a2b14 <__aeabi_cdcmpeq>
 80a2b12:	bf00      	nop

080a2b14 <__aeabi_cdcmpeq>:
 80a2b14:	b501      	push	{r0, lr}
 80a2b16:	f7ff ffb7 	bl	80a2a88 <__cmpdf2>
 80a2b1a:	2800      	cmp	r0, #0
 80a2b1c:	bf48      	it	mi
 80a2b1e:	f110 0f00 	cmnmi.w	r0, #0
 80a2b22:	bd01      	pop	{r0, pc}

080a2b24 <__aeabi_dcmpeq>:
 80a2b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2b28:	f7ff fff4 	bl	80a2b14 <__aeabi_cdcmpeq>
 80a2b2c:	bf0c      	ite	eq
 80a2b2e:	2001      	moveq	r0, #1
 80a2b30:	2000      	movne	r0, #0
 80a2b32:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2b36:	bf00      	nop

080a2b38 <__aeabi_dcmplt>:
 80a2b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2b3c:	f7ff ffea 	bl	80a2b14 <__aeabi_cdcmpeq>
 80a2b40:	bf34      	ite	cc
 80a2b42:	2001      	movcc	r0, #1
 80a2b44:	2000      	movcs	r0, #0
 80a2b46:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2b4a:	bf00      	nop

080a2b4c <__aeabi_dcmple>:
 80a2b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2b50:	f7ff ffe0 	bl	80a2b14 <__aeabi_cdcmpeq>
 80a2b54:	bf94      	ite	ls
 80a2b56:	2001      	movls	r0, #1
 80a2b58:	2000      	movhi	r0, #0
 80a2b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2b5e:	bf00      	nop

080a2b60 <__aeabi_dcmpge>:
 80a2b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2b64:	f7ff ffce 	bl	80a2b04 <__aeabi_cdrcmple>
 80a2b68:	bf94      	ite	ls
 80a2b6a:	2001      	movls	r0, #1
 80a2b6c:	2000      	movhi	r0, #0
 80a2b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2b72:	bf00      	nop

080a2b74 <__aeabi_dcmpgt>:
 80a2b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2b78:	f7ff ffc4 	bl	80a2b04 <__aeabi_cdrcmple>
 80a2b7c:	bf34      	ite	cc
 80a2b7e:	2001      	movcc	r0, #1
 80a2b80:	2000      	movcs	r0, #0
 80a2b82:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2b86:	bf00      	nop

080a2b88 <__aeabi_fmul>:
 80a2b88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2b8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2b90:	bf1e      	ittt	ne
 80a2b92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2b96:	ea92 0f0c 	teqne	r2, ip
 80a2b9a:	ea93 0f0c 	teqne	r3, ip
 80a2b9e:	d06f      	beq.n	80a2c80 <__aeabi_fmul+0xf8>
 80a2ba0:	441a      	add	r2, r3
 80a2ba2:	ea80 0c01 	eor.w	ip, r0, r1
 80a2ba6:	0240      	lsls	r0, r0, #9
 80a2ba8:	bf18      	it	ne
 80a2baa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a2bae:	d01e      	beq.n	80a2bee <__aeabi_fmul+0x66>
 80a2bb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2bb4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2bb8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2bbc:	fba0 3101 	umull	r3, r1, r0, r1
 80a2bc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2bc4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2bc8:	bf3e      	ittt	cc
 80a2bca:	0049      	lslcc	r1, r1, #1
 80a2bcc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2bd0:	005b      	lslcc	r3, r3, #1
 80a2bd2:	ea40 0001 	orr.w	r0, r0, r1
 80a2bd6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a2bda:	2afd      	cmp	r2, #253	; 0xfd
 80a2bdc:	d81d      	bhi.n	80a2c1a <__aeabi_fmul+0x92>
 80a2bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2be2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2be6:	bf08      	it	eq
 80a2be8:	f020 0001 	biceq.w	r0, r0, #1
 80a2bec:	4770      	bx	lr
 80a2bee:	f090 0f00 	teq	r0, #0
 80a2bf2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2bf6:	bf08      	it	eq
 80a2bf8:	0249      	lsleq	r1, r1, #9
 80a2bfa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2bfe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a2c02:	3a7f      	subs	r2, #127	; 0x7f
 80a2c04:	bfc2      	ittt	gt
 80a2c06:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2c0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2c0e:	4770      	bxgt	lr
 80a2c10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2c14:	f04f 0300 	mov.w	r3, #0
 80a2c18:	3a01      	subs	r2, #1
 80a2c1a:	dc5d      	bgt.n	80a2cd8 <__aeabi_fmul+0x150>
 80a2c1c:	f112 0f19 	cmn.w	r2, #25
 80a2c20:	bfdc      	itt	le
 80a2c22:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a2c26:	4770      	bxle	lr
 80a2c28:	f1c2 0200 	rsb	r2, r2, #0
 80a2c2c:	0041      	lsls	r1, r0, #1
 80a2c2e:	fa21 f102 	lsr.w	r1, r1, r2
 80a2c32:	f1c2 0220 	rsb	r2, r2, #32
 80a2c36:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2c3a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a2c3e:	f140 0000 	adc.w	r0, r0, #0
 80a2c42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a2c46:	bf08      	it	eq
 80a2c48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2c4c:	4770      	bx	lr
 80a2c4e:	f092 0f00 	teq	r2, #0
 80a2c52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2c56:	bf02      	ittt	eq
 80a2c58:	0040      	lsleq	r0, r0, #1
 80a2c5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2c5e:	3a01      	subeq	r2, #1
 80a2c60:	d0f9      	beq.n	80a2c56 <__aeabi_fmul+0xce>
 80a2c62:	ea40 000c 	orr.w	r0, r0, ip
 80a2c66:	f093 0f00 	teq	r3, #0
 80a2c6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2c6e:	bf02      	ittt	eq
 80a2c70:	0049      	lsleq	r1, r1, #1
 80a2c72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2c76:	3b01      	subeq	r3, #1
 80a2c78:	d0f9      	beq.n	80a2c6e <__aeabi_fmul+0xe6>
 80a2c7a:	ea41 010c 	orr.w	r1, r1, ip
 80a2c7e:	e78f      	b.n	80a2ba0 <__aeabi_fmul+0x18>
 80a2c80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2c84:	ea92 0f0c 	teq	r2, ip
 80a2c88:	bf18      	it	ne
 80a2c8a:	ea93 0f0c 	teqne	r3, ip
 80a2c8e:	d00a      	beq.n	80a2ca6 <__aeabi_fmul+0x11e>
 80a2c90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2c94:	bf18      	it	ne
 80a2c96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2c9a:	d1d8      	bne.n	80a2c4e <__aeabi_fmul+0xc6>
 80a2c9c:	ea80 0001 	eor.w	r0, r0, r1
 80a2ca0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2ca4:	4770      	bx	lr
 80a2ca6:	f090 0f00 	teq	r0, #0
 80a2caa:	bf17      	itett	ne
 80a2cac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2cb0:	4608      	moveq	r0, r1
 80a2cb2:	f091 0f00 	teqne	r1, #0
 80a2cb6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a2cba:	d014      	beq.n	80a2ce6 <__aeabi_fmul+0x15e>
 80a2cbc:	ea92 0f0c 	teq	r2, ip
 80a2cc0:	d101      	bne.n	80a2cc6 <__aeabi_fmul+0x13e>
 80a2cc2:	0242      	lsls	r2, r0, #9
 80a2cc4:	d10f      	bne.n	80a2ce6 <__aeabi_fmul+0x15e>
 80a2cc6:	ea93 0f0c 	teq	r3, ip
 80a2cca:	d103      	bne.n	80a2cd4 <__aeabi_fmul+0x14c>
 80a2ccc:	024b      	lsls	r3, r1, #9
 80a2cce:	bf18      	it	ne
 80a2cd0:	4608      	movne	r0, r1
 80a2cd2:	d108      	bne.n	80a2ce6 <__aeabi_fmul+0x15e>
 80a2cd4:	ea80 0001 	eor.w	r0, r0, r1
 80a2cd8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2ce4:	4770      	bx	lr
 80a2ce6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2cea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a2cee:	4770      	bx	lr

080a2cf0 <__aeabi_fdiv>:
 80a2cf0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2cf4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2cf8:	bf1e      	ittt	ne
 80a2cfa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2cfe:	ea92 0f0c 	teqne	r2, ip
 80a2d02:	ea93 0f0c 	teqne	r3, ip
 80a2d06:	d069      	beq.n	80a2ddc <__aeabi_fdiv+0xec>
 80a2d08:	eba2 0203 	sub.w	r2, r2, r3
 80a2d0c:	ea80 0c01 	eor.w	ip, r0, r1
 80a2d10:	0249      	lsls	r1, r1, #9
 80a2d12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a2d16:	d037      	beq.n	80a2d88 <__aeabi_fdiv+0x98>
 80a2d18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a2d1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a2d20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2d24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2d28:	428b      	cmp	r3, r1
 80a2d2a:	bf38      	it	cc
 80a2d2c:	005b      	lslcc	r3, r3, #1
 80a2d2e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a2d32:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a2d36:	428b      	cmp	r3, r1
 80a2d38:	bf24      	itt	cs
 80a2d3a:	1a5b      	subcs	r3, r3, r1
 80a2d3c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2d40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2d44:	bf24      	itt	cs
 80a2d46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a2d4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2d4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a2d52:	bf24      	itt	cs
 80a2d54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2d58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2d5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a2d60:	bf24      	itt	cs
 80a2d62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a2d66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2d6a:	011b      	lsls	r3, r3, #4
 80a2d6c:	bf18      	it	ne
 80a2d6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a2d72:	d1e0      	bne.n	80a2d36 <__aeabi_fdiv+0x46>
 80a2d74:	2afd      	cmp	r2, #253	; 0xfd
 80a2d76:	f63f af50 	bhi.w	80a2c1a <__aeabi_fmul+0x92>
 80a2d7a:	428b      	cmp	r3, r1
 80a2d7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2d80:	bf08      	it	eq
 80a2d82:	f020 0001 	biceq.w	r0, r0, #1
 80a2d86:	4770      	bx	lr
 80a2d88:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2d8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2d90:	327f      	adds	r2, #127	; 0x7f
 80a2d92:	bfc2      	ittt	gt
 80a2d94:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2d98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2d9c:	4770      	bxgt	lr
 80a2d9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2da2:	f04f 0300 	mov.w	r3, #0
 80a2da6:	3a01      	subs	r2, #1
 80a2da8:	e737      	b.n	80a2c1a <__aeabi_fmul+0x92>
 80a2daa:	f092 0f00 	teq	r2, #0
 80a2dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2db2:	bf02      	ittt	eq
 80a2db4:	0040      	lsleq	r0, r0, #1
 80a2db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2dba:	3a01      	subeq	r2, #1
 80a2dbc:	d0f9      	beq.n	80a2db2 <__aeabi_fdiv+0xc2>
 80a2dbe:	ea40 000c 	orr.w	r0, r0, ip
 80a2dc2:	f093 0f00 	teq	r3, #0
 80a2dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2dca:	bf02      	ittt	eq
 80a2dcc:	0049      	lsleq	r1, r1, #1
 80a2dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2dd2:	3b01      	subeq	r3, #1
 80a2dd4:	d0f9      	beq.n	80a2dca <__aeabi_fdiv+0xda>
 80a2dd6:	ea41 010c 	orr.w	r1, r1, ip
 80a2dda:	e795      	b.n	80a2d08 <__aeabi_fdiv+0x18>
 80a2ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2de0:	ea92 0f0c 	teq	r2, ip
 80a2de4:	d108      	bne.n	80a2df8 <__aeabi_fdiv+0x108>
 80a2de6:	0242      	lsls	r2, r0, #9
 80a2de8:	f47f af7d 	bne.w	80a2ce6 <__aeabi_fmul+0x15e>
 80a2dec:	ea93 0f0c 	teq	r3, ip
 80a2df0:	f47f af70 	bne.w	80a2cd4 <__aeabi_fmul+0x14c>
 80a2df4:	4608      	mov	r0, r1
 80a2df6:	e776      	b.n	80a2ce6 <__aeabi_fmul+0x15e>
 80a2df8:	ea93 0f0c 	teq	r3, ip
 80a2dfc:	d104      	bne.n	80a2e08 <__aeabi_fdiv+0x118>
 80a2dfe:	024b      	lsls	r3, r1, #9
 80a2e00:	f43f af4c 	beq.w	80a2c9c <__aeabi_fmul+0x114>
 80a2e04:	4608      	mov	r0, r1
 80a2e06:	e76e      	b.n	80a2ce6 <__aeabi_fmul+0x15e>
 80a2e08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2e0c:	bf18      	it	ne
 80a2e0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2e12:	d1ca      	bne.n	80a2daa <__aeabi_fdiv+0xba>
 80a2e14:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a2e18:	f47f af5c 	bne.w	80a2cd4 <__aeabi_fmul+0x14c>
 80a2e1c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a2e20:	f47f af3c 	bne.w	80a2c9c <__aeabi_fmul+0x114>
 80a2e24:	e75f      	b.n	80a2ce6 <__aeabi_fmul+0x15e>
 80a2e26:	bf00      	nop

080a2e28 <__gesf2>:
 80a2e28:	f04f 3cff 	mov.w	ip, #4294967295
 80a2e2c:	e006      	b.n	80a2e3c <__cmpsf2+0x4>
 80a2e2e:	bf00      	nop

080a2e30 <__lesf2>:
 80a2e30:	f04f 0c01 	mov.w	ip, #1
 80a2e34:	e002      	b.n	80a2e3c <__cmpsf2+0x4>
 80a2e36:	bf00      	nop

080a2e38 <__cmpsf2>:
 80a2e38:	f04f 0c01 	mov.w	ip, #1
 80a2e3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2e40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2e44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2e48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2e4c:	bf18      	it	ne
 80a2e4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2e52:	d011      	beq.n	80a2e78 <__cmpsf2+0x40>
 80a2e54:	b001      	add	sp, #4
 80a2e56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a2e5a:	bf18      	it	ne
 80a2e5c:	ea90 0f01 	teqne	r0, r1
 80a2e60:	bf58      	it	pl
 80a2e62:	ebb2 0003 	subspl.w	r0, r2, r3
 80a2e66:	bf88      	it	hi
 80a2e68:	17c8      	asrhi	r0, r1, #31
 80a2e6a:	bf38      	it	cc
 80a2e6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a2e70:	bf18      	it	ne
 80a2e72:	f040 0001 	orrne.w	r0, r0, #1
 80a2e76:	4770      	bx	lr
 80a2e78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2e7c:	d102      	bne.n	80a2e84 <__cmpsf2+0x4c>
 80a2e7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a2e82:	d105      	bne.n	80a2e90 <__cmpsf2+0x58>
 80a2e84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2e88:	d1e4      	bne.n	80a2e54 <__cmpsf2+0x1c>
 80a2e8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a2e8e:	d0e1      	beq.n	80a2e54 <__cmpsf2+0x1c>
 80a2e90:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2e94:	4770      	bx	lr
 80a2e96:	bf00      	nop

080a2e98 <__aeabi_cfrcmple>:
 80a2e98:	4684      	mov	ip, r0
 80a2e9a:	4608      	mov	r0, r1
 80a2e9c:	4661      	mov	r1, ip
 80a2e9e:	e7ff      	b.n	80a2ea0 <__aeabi_cfcmpeq>

080a2ea0 <__aeabi_cfcmpeq>:
 80a2ea0:	b50f      	push	{r0, r1, r2, r3, lr}
 80a2ea2:	f7ff ffc9 	bl	80a2e38 <__cmpsf2>
 80a2ea6:	2800      	cmp	r0, #0
 80a2ea8:	bf48      	it	mi
 80a2eaa:	f110 0f00 	cmnmi.w	r0, #0
 80a2eae:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a2eb0 <__aeabi_fcmpeq>:
 80a2eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2eb4:	f7ff fff4 	bl	80a2ea0 <__aeabi_cfcmpeq>
 80a2eb8:	bf0c      	ite	eq
 80a2eba:	2001      	moveq	r0, #1
 80a2ebc:	2000      	movne	r0, #0
 80a2ebe:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2ec2:	bf00      	nop

080a2ec4 <__aeabi_fcmplt>:
 80a2ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2ec8:	f7ff ffea 	bl	80a2ea0 <__aeabi_cfcmpeq>
 80a2ecc:	bf34      	ite	cc
 80a2ece:	2001      	movcc	r0, #1
 80a2ed0:	2000      	movcs	r0, #0
 80a2ed2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2ed6:	bf00      	nop

080a2ed8 <__aeabi_fcmple>:
 80a2ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2edc:	f7ff ffe0 	bl	80a2ea0 <__aeabi_cfcmpeq>
 80a2ee0:	bf94      	ite	ls
 80a2ee2:	2001      	movls	r0, #1
 80a2ee4:	2000      	movhi	r0, #0
 80a2ee6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2eea:	bf00      	nop

080a2eec <__aeabi_fcmpge>:
 80a2eec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2ef0:	f7ff ffd2 	bl	80a2e98 <__aeabi_cfrcmple>
 80a2ef4:	bf94      	ite	ls
 80a2ef6:	2001      	movls	r0, #1
 80a2ef8:	2000      	movhi	r0, #0
 80a2efa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2efe:	bf00      	nop

080a2f00 <__aeabi_fcmpgt>:
 80a2f00:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2f04:	f7ff ffc8 	bl	80a2e98 <__aeabi_cfrcmple>
 80a2f08:	bf34      	ite	cc
 80a2f0a:	2001      	movcc	r0, #1
 80a2f0c:	2000      	movcs	r0, #0
 80a2f0e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2f12:	bf00      	nop

080a2f14 <__aeabi_f2uiz>:
 80a2f14:	0042      	lsls	r2, r0, #1
 80a2f16:	d20e      	bcs.n	80a2f36 <__aeabi_f2uiz+0x22>
 80a2f18:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a2f1c:	d30b      	bcc.n	80a2f36 <__aeabi_f2uiz+0x22>
 80a2f1e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a2f22:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a2f26:	d409      	bmi.n	80a2f3c <__aeabi_f2uiz+0x28>
 80a2f28:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a2f2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2f30:	fa23 f002 	lsr.w	r0, r3, r2
 80a2f34:	4770      	bx	lr
 80a2f36:	f04f 0000 	mov.w	r0, #0
 80a2f3a:	4770      	bx	lr
 80a2f3c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a2f40:	d101      	bne.n	80a2f46 <__aeabi_f2uiz+0x32>
 80a2f42:	0242      	lsls	r2, r0, #9
 80a2f44:	d102      	bne.n	80a2f4c <__aeabi_f2uiz+0x38>
 80a2f46:	f04f 30ff 	mov.w	r0, #4294967295
 80a2f4a:	4770      	bx	lr
 80a2f4c:	f04f 0000 	mov.w	r0, #0
 80a2f50:	4770      	bx	lr
 80a2f52:	bf00      	nop

080a2f54 <__cxa_atexit>:
 80a2f54:	b510      	push	{r4, lr}
 80a2f56:	4c05      	ldr	r4, [pc, #20]	; (80a2f6c <__cxa_atexit+0x18>)
 80a2f58:	4613      	mov	r3, r2
 80a2f5a:	b12c      	cbz	r4, 80a2f68 <__cxa_atexit+0x14>
 80a2f5c:	460a      	mov	r2, r1
 80a2f5e:	4601      	mov	r1, r0
 80a2f60:	2002      	movs	r0, #2
 80a2f62:	f3af 8000 	nop.w
 80a2f66:	bd10      	pop	{r4, pc}
 80a2f68:	4620      	mov	r0, r4
 80a2f6a:	bd10      	pop	{r4, pc}
 80a2f6c:	00000000 	.word	0x00000000

080a2f70 <memcpy>:
 80a2f70:	b510      	push	{r4, lr}
 80a2f72:	1e43      	subs	r3, r0, #1
 80a2f74:	440a      	add	r2, r1
 80a2f76:	4291      	cmp	r1, r2
 80a2f78:	d004      	beq.n	80a2f84 <memcpy+0x14>
 80a2f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2f7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2f82:	e7f8      	b.n	80a2f76 <memcpy+0x6>
 80a2f84:	bd10      	pop	{r4, pc}

080a2f86 <memset>:
 80a2f86:	4603      	mov	r3, r0
 80a2f88:	4402      	add	r2, r0
 80a2f8a:	4293      	cmp	r3, r2
 80a2f8c:	d002      	beq.n	80a2f94 <memset+0xe>
 80a2f8e:	f803 1b01 	strb.w	r1, [r3], #1
 80a2f92:	e7fa      	b.n	80a2f8a <memset+0x4>
 80a2f94:	4770      	bx	lr

080a2f96 <strlen>:
 80a2f96:	4603      	mov	r3, r0
 80a2f98:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2f9c:	2a00      	cmp	r2, #0
 80a2f9e:	d1fb      	bne.n	80a2f98 <strlen+0x2>
 80a2fa0:	1a18      	subs	r0, r3, r0
 80a2fa2:	3801      	subs	r0, #1
 80a2fa4:	4770      	bx	lr

080a2fa6 <link_code_end>:
	...

080a2fa8 <dynalib_user>:
 80a2fa8:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2fb8:	0000 0000                                   ....

080a2fbc <_ZTV5Timer>:
	...
 80a2fc4:	01f9 080a 0239 080a 0191 080a 6573 7574     ....9.......setu
 80a2fd4:	5370 6375 6563 7373 253d 0064 6157 7469     pSuccess=%d.Wait
 80a2fe4:	6e69 2067 6f66 2072 7453 7261 0074 7453     ing for Start.St
 80a2ff4:	7261 6974 676e 6920 206e 2035 6573 6f63     arting in 5 seco
 80a3004:	646e 2e73 2e2e 4700 214f 7200 6d65 746f     nds....GO!.remot
 80a3014:	2065 7473 7461 7375 003a 7c20 0020 6573     e status:. | .se
 80a3024:	736e 726f 3020 003a 6573 736e 726f 3120     nsor 0:.sensor 1
 80a3034:	003a 6573 736e 726f 3220 003a 6573 736e     :.sensor 2:.sens
 80a3044:	726f 3320 003a 7266 6e6f 2074 656c 7466     or 3:.front left
 80a3054:	003a 7266 6e6f 2074 6972 6867 3a74 6200     :.front right:.b
 80a3064:	6361 206b 656c 7466 003a 6162 6b63 7220     ack left:.back r
 80a3074:	6769 7468 003a 6425 252c 2c64 6425 6e00     ight:.%d,%d,%d.n
 80a3084:	206f 6173 706d 656c 2000 4553 534e 524f     o sample. SENSOR
 80a3094:	5420 4d49 4f45 5455 0000 0000                TIMEOUT....

080a30a0 <_ZTV9LIS3DHI2C>:
	...
 80a30a8:	152d 080a 152f 080a 1583 080a 153b 080a     -.../.......;...
 80a30b8:	6564 6976 6563 6e20 746f 6620 756f 646e     device not found
 80a30c8:	7200 7365 7465 6974 676e 6c20 7361 4d74     .resetting lastM
 80a30d8:	766f 6d65 6e65 2074 6e69 3174 735f 6372     ovement int1_src
 80a30e8:	303d 2578 0078 6572 6163 696c 7262 7461     =0x%x.recalibrat
 80a30f8:	6e69 0067                                   ing.

080a30fc <_ZTV8SPIClass>:
	...
 80a3104:	1af5 080a 1af7 080a 0066 6e6c 6600 006e     ........f.ln.fn.
 80a3114:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
 80a3124:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
 80a3134:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
 80a3144:	7465 6961 736c 3d20 0020 6162 6475 5300     etails = .baud.S
 80a3154:	7265 6169 006c 5355 5342 7265 6169 316c     erial.USBSerial1
 80a3164:	7400 7079 0065 6170 6172 006d 6d63 0064     .type.param.cmd.
 80a3174:	6469 6800 646e 7300 7274 006d 6966 746c     id.hnd.strm.filt
 80a3184:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
 80a3194:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
 80a31a4:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
 80a31b4:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
 80a31c4:	7061 0070 6f6e 656e 7400 6172 6563 6900     app.none.trace.i
 80a31d4:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
 80a31e4:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
 80a31f4:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
 80a3204:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
 80a3214:	0065 0000                                   e...

080a3218 <_ZTV9IPAddress>:
	...
 80a3220:	1efb 080a 1eed 080a 1eef 080a               ............

080a322c <_ZTV9USBSerial>:
	...
 80a3234:	1f65 080a 1fa9 080a 1f83 080a 1bf7 080a     e...............
 80a3244:	1f7d 080a 1f67 080a 1f6f 080a 1fa3 080a     }...g...o.......
 80a3254:	1f77 080a 1f61 080a                         w...a...

080a325c <_ZTV11USARTSerial>:
	...
 80a3264:	2125 080a 2149 080a 2155 080a 1bf7 080a     %!..I!..U!......
 80a3274:	2131 080a 213d 080a 2137 080a 2143 080a     1!..=!..7!..C!..
 80a3284:	2127 080a 212b 080a                         '!..+!..

080a328c <_ZTV7TwoWire>:
	...
 80a3294:	21f9 080a 2243 080a 221b 080a 21fb 080a     .!..C"..."...!..
 80a32a4:	2223 080a 222b 080a 2233 080a 223b 080a     #"..+"..3"..;"..

080a32b4 <_ZTVN5spark9WiFiClassE>:
	...
 80a32bc:	22cb 080a                                   ."..

080a32c0 <link_const_variable_data_end>:
 80a32c0:	080a084d 	.word	0x080a084d
 80a32c4:	080a1529 	.word	0x080a1529
 80a32c8:	080a177d 	.word	0x080a177d
 80a32cc:	080a1bf1 	.word	0x080a1bf1
 80a32d0:	080a1d91 	.word	0x080a1d91
 80a32d4:	080a1da1 	.word	0x080a1da1
 80a32d8:	080a22d5 	.word	0x080a22d5
 80a32dc:	080a23b9 	.word	0x080a23b9
 80a32e0:	080a23fd 	.word	0x080a23fd
 80a32e4:	080a2479 	.word	0x080a2479
 80a32e8:	080a24fd 	.word	0x080a24fd
 80a32ec:	080a25c1 	.word	0x080a25c1
 80a32f0:	080a2685 	.word	0x080a2685

080a32f4 <link_constructors_end>:
	...
