
C:/src/auto-sumo/v3/target/v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029c8  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a29e0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000004  20000300  080a29e4  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000005e0  20000304  20000304  00030304  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a29e8  080a29e8  000229e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a2a10  080a2a10  00022a10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0007d231  00000000  00000000  00022a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000ce2e  00000000  00000000  0009fc45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000e0c0  00000000  00000000  000aca73  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000017a0  00000000  00000000  000bab33  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002398  00000000  00000000  000bc2d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000223af  00000000  00000000  000be66b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001cd00  00000000  00000000  000e0a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00083e17  00000000  00000000  000fd71a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000a14c  00000000  00000000  00181534  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	60 27 0a 08                                         `'..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fb7b 	bl	80a2728 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fb80 	bl	80a273e <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a29e4 	.word	0x080a29e4
 80a004c:	20000304 	.word	0x20000304
 80a0050:	20000304 	.word	0x20000304
 80a0054:	200008e4 	.word	0x200008e4
 80a0058:	200008e4 	.word	0x200008e4

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fb39 	bl	80a16d4 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a29a4 	.word	0x080a29a4
 80a0084:	080a29d8 	.word	0x080a29d8

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b8c6 	b.w	80a0218 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8d5 	bl	80a023c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 badb 	b.w	80a1650 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f001 b991 	b.w	80a13c0 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <_Z10accel_initv>:
SYSTEM_MODE(MANUAL);
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
unsigned long lastPrintSample = 0;

void accel_init() {
 80a00b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pinMode(A0, OUTPUT);
 80a00b4:	2101      	movs	r1, #1
 80a00b6:	200a      	movs	r0, #10
 80a00b8:	f001 fd30 	bl	80a1b1c <pinMode>
    pinMode(A1, OUTPUT);
 80a00bc:	2101      	movs	r1, #1
 80a00be:	200b      	movs	r0, #11
 80a00c0:	f001 fd2c 	bl	80a1b1c <pinMode>
    pinMode(A2, OUTPUT);
 80a00c4:	2101      	movs	r1, #1
 80a00c6:	200c      	movs	r0, #12
 80a00c8:	f001 fd28 	bl	80a1b1c <pinMode>
    pinMode(A3, OUTPUT);
 80a00cc:	2101      	movs	r1, #1
 80a00ce:	200d      	movs	r0, #13
 80a00d0:	f001 fd24 	bl	80a1b1c <pinMode>
    digitalWrite(A0, LOW);
 80a00d4:	2100      	movs	r1, #0
 80a00d6:	200a      	movs	r0, #10
 80a00d8:	f001 fd31 	bl	80a1b3e <digitalWrite>
    digitalWrite(A1, LOW);
 80a00dc:	2100      	movs	r1, #0
 80a00de:	200b      	movs	r0, #11
 80a00e0:	f001 fd2d 	bl	80a1b3e <digitalWrite>
    digitalWrite(A2, LOW);
 80a00e4:	2100      	movs	r1, #0
 80a00e6:	200c      	movs	r0, #12
 80a00e8:	f001 fd29 	bl	80a1b3e <digitalWrite>
    digitalWrite(A3, LOW);
 80a00ec:	2100      	movs	r1, #0
 80a00ee:	200d      	movs	r0, #13
 80a00f0:	f001 fd25 	bl	80a1b3e <digitalWrite>
    delay(500);    
 80a00f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a00f8:	f001 fa74 	bl	80a15e4 <delay>
    
    Wire.setSpeed(CLOCK_SPEED_100KHZ);  // need to initialize i2c protocol after driving shdn pins low
 80a00fc:	f001 fd72 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a0100:	4940      	ldr	r1, [pc, #256]	; (80a0204 <_Z10accel_initv+0x154>)
 80a0102:	f001 fca7 	bl	80a1a54 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();
 80a0106:	f001 fd6d 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a010a:	f001 fca7 	bl	80a1a5c <_ZN7TwoWire5beginEv>
    
    delay(10);
 80a010e:	200a      	movs	r0, #10
 80a0110:	f001 fa68 	bl	80a15e4 <delay>
    digitalWrite(A0, HIGH);
 80a0114:	2101      	movs	r1, #1
 80a0116:	200a      	movs	r0, #10
 80a0118:	f001 fd11 	bl	80a1b3e <digitalWrite>
    digitalWrite(A1, HIGH);
 80a011c:	2101      	movs	r1, #1
 80a011e:	200b      	movs	r0, #11
 80a0120:	f001 fd0d 	bl	80a1b3e <digitalWrite>
    digitalWrite(A2, HIGH);
 80a0124:	2101      	movs	r1, #1
 80a0126:	200c      	movs	r0, #12
 80a0128:	f001 fd09 	bl	80a1b3e <digitalWrite>
    digitalWrite(A3, HIGH);
 80a012c:	2101      	movs	r1, #1
 80a012e:	200d      	movs	r0, #13
 80a0130:	f001 fd05 	bl	80a1b3e <digitalWrite>
    delay(10);
 80a0134:	200a      	movs	r0, #10
 80a0136:	f001 fa55 	bl	80a15e4 <delay>
    digitalWrite(A1, LOW);
 80a013a:	2100      	movs	r1, #0
 80a013c:	200b      	movs	r0, #11
 80a013e:	f001 fcfe 	bl	80a1b3e <digitalWrite>
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
 80a0142:	4f31      	ldr	r7, [pc, #196]	; (80a0208 <_Z10accel_initv+0x158>)
    digitalWrite(A1, HIGH);
    digitalWrite(A2, HIGH);
    digitalWrite(A3, HIGH);
    delay(10);
    digitalWrite(A1, LOW);
    digitalWrite(A2, LOW);
 80a0144:	2100      	movs	r1, #0
 80a0146:	200c      	movs	r0, #12
 80a0148:	f001 fcf9 	bl	80a1b3e <digitalWrite>
    digitalWrite(A3, LOW);
 80a014c:	2100      	movs	r1, #0
 80a014e:	200d      	movs	r0, #13
 80a0150:	f001 fcf5 	bl	80a1b3e <digitalWrite>
    sensor0.init();
 80a0154:	2101      	movs	r1, #1
 80a0156:	4638      	mov	r0, r7
 80a0158:	f000 fcc8 	bl	80a0aec <_ZN7VL53L0X4initEb>
    void startContinuous(uint32_t period_ms = 0);
    void stopContinuous(void);
    uint16_t readRangeContinuousMillimeters(void);
    uint16_t readRangeSingleMillimeters(void);

    inline void setTimeout(uint16_t timeout) { io_timeout = timeout; }
 80a015c:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    sensor0.setAddress(0x30);
 80a0160:	2130      	movs	r1, #48	; 0x30
 80a0162:	4638      	mov	r0, r7
 80a0164:	f000 f973 	bl	80a044e <_ZN7VL53L0X10setAddressEh>
    sensor0.setTimeout(1000);
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
 80a0168:	4e28      	ldr	r6, [pc, #160]	; (80a020c <_Z10accel_initv+0x15c>)
 80a016a:	f8c7 8004 	str.w	r8, [r7, #4]
    digitalWrite(A2, LOW);
    digitalWrite(A3, LOW);
    sensor0.init();
    sensor0.setAddress(0x30);
    sensor0.setTimeout(1000);
    delay(10);
 80a016e:	200a      	movs	r0, #10
 80a0170:	f001 fa38 	bl	80a15e4 <delay>
    digitalWrite(A1, HIGH);
 80a0174:	2101      	movs	r1, #1
 80a0176:	200b      	movs	r0, #11
 80a0178:	f001 fce1 	bl	80a1b3e <digitalWrite>
    sensor1.init();
 80a017c:	2101      	movs	r1, #1
 80a017e:	4630      	mov	r0, r6
 80a0180:	f000 fcb4 	bl	80a0aec <_ZN7VL53L0X4initEb>
    sensor1.setAddress(0x31);
 80a0184:	2131      	movs	r1, #49	; 0x31
 80a0186:	4630      	mov	r0, r6
 80a0188:	f000 f961 	bl	80a044e <_ZN7VL53L0X10setAddressEh>
    sensor1.setTimeout(1000);
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
 80a018c:	4d20      	ldr	r5, [pc, #128]	; (80a0210 <_Z10accel_initv+0x160>)
    delay(10);
    digitalWrite(A1, HIGH);
    sensor1.init();
    sensor1.setAddress(0x31);
    sensor1.setTimeout(1000);
    delay(10);
 80a018e:	200a      	movs	r0, #10
 80a0190:	f8c6 8004 	str.w	r8, [r6, #4]
 80a0194:	f001 fa26 	bl	80a15e4 <delay>
    digitalWrite(A2, HIGH);
 80a0198:	2101      	movs	r1, #1
 80a019a:	200c      	movs	r0, #12
 80a019c:	f001 fccf 	bl	80a1b3e <digitalWrite>
    sensor2.init();
 80a01a0:	2101      	movs	r1, #1
 80a01a2:	4628      	mov	r0, r5
 80a01a4:	f000 fca2 	bl	80a0aec <_ZN7VL53L0X4initEb>
    sensor2.setAddress(0x32);
 80a01a8:	2132      	movs	r1, #50	; 0x32
 80a01aa:	4628      	mov	r0, r5
 80a01ac:	f000 f94f 	bl	80a044e <_ZN7VL53L0X10setAddressEh>
    sensor2.setTimeout(1000);
    delay(10);
    digitalWrite(A3, HIGH);
    sensor3.init();
 80a01b0:	4c18      	ldr	r4, [pc, #96]	; (80a0214 <_Z10accel_initv+0x164>)
    delay(10);
    digitalWrite(A2, HIGH);
    sensor2.init();
    sensor2.setAddress(0x32);
    sensor2.setTimeout(1000);
    delay(10);
 80a01b2:	200a      	movs	r0, #10
 80a01b4:	f8c5 8004 	str.w	r8, [r5, #4]
 80a01b8:	f001 fa14 	bl	80a15e4 <delay>
    digitalWrite(A3, HIGH);
 80a01bc:	2101      	movs	r1, #1
 80a01be:	200d      	movs	r0, #13
 80a01c0:	f001 fcbd 	bl	80a1b3e <digitalWrite>
    sensor3.init();
 80a01c4:	2101      	movs	r1, #1
 80a01c6:	4620      	mov	r0, r4
 80a01c8:	f000 fc90 	bl	80a0aec <_ZN7VL53L0X4initEb>
    sensor3.setAddress(0x33);
 80a01cc:	2133      	movs	r1, #51	; 0x33
 80a01ce:	4620      	mov	r0, r4
 80a01d0:	f000 f93d 	bl	80a044e <_ZN7VL53L0X10setAddressEh>
    sensor3.setTimeout(1000);
    delay(10);
 80a01d4:	200a      	movs	r0, #10
 80a01d6:	f8c4 8004 	str.w	r8, [r4, #4]
 80a01da:	f001 fa03 	bl	80a15e4 <delay>

    // Start continuous back-to-back mode (take readings as
    // fast as possible).  To use continuous timed mode
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous();
 80a01de:	4638      	mov	r0, r7
 80a01e0:	2100      	movs	r1, #0
 80a01e2:	f000 fa50 	bl	80a0686 <_ZN7VL53L0X15startContinuousEm>
    sensor1.startContinuous();
 80a01e6:	4630      	mov	r0, r6
 80a01e8:	2100      	movs	r1, #0
 80a01ea:	f000 fa4c 	bl	80a0686 <_ZN7VL53L0X15startContinuousEm>
    sensor2.startContinuous();
 80a01ee:	4628      	mov	r0, r5
 80a01f0:	2100      	movs	r1, #0
 80a01f2:	f000 fa48 	bl	80a0686 <_ZN7VL53L0X15startContinuousEm>
    sensor3.startContinuous();
 80a01f6:	4620      	mov	r0, r4
}
 80a01f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    // instead, provide a desired inter-measurement period in
    // ms (e.g. sensor.startContinuous(100)).
    sensor0.startContinuous();
    sensor1.startContinuous();
    sensor2.startContinuous();
    sensor3.startContinuous();
 80a01fc:	2100      	movs	r1, #0
 80a01fe:	f000 ba42 	b.w	80a0686 <_ZN7VL53L0X15startContinuousEm>
 80a0202:	bf00      	nop
 80a0204:	000186a0 	.word	0x000186a0
 80a0208:	2000030c 	.word	0x2000030c
 80a020c:	20000324 	.word	0x20000324
 80a0210:	2000033c 	.word	0x2000033c
 80a0214:	20000354 	.word	0x20000354

080a0218 <setup>:
}

void setup() {
 80a0218:	b508      	push	{r3, lr}
    Serial.begin(9600);
 80a021a:	f001 fb11 	bl	80a1840 <_Z16_fetch_usbserialv>
 80a021e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0222:	f001 faf3 	bl	80a180c <_ZN9USBSerial5beginEl>
    Serial.println("Starting");
 80a0226:	f001 fb0b 	bl	80a1840 <_Z16_fetch_usbserialv>
 80a022a:	4903      	ldr	r1, [pc, #12]	; (80a0238 <setup+0x20>)
 80a022c:	f001 f933 	bl	80a1496 <_ZN5Print7printlnEPKc>
    accel_init();
}
 80a0230:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void setup() {
    Serial.begin(9600);
    Serial.println("Starting");
    accel_init();
 80a0234:	f7ff bf3c 	b.w	80a00b0 <_Z10accel_initv>
 80a0238:	080a2774 	.word	0x080a2774

080a023c <loop>:
}

void loop() {
 80a023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a023e:	f000 ffa5 	bl	80a118c <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD) {
 80a0242:	4c46      	ldr	r4, [pc, #280]	; (80a035c <loop+0x120>)
 80a0244:	6823      	ldr	r3, [r4, #0]
 80a0246:	1ac0      	subs	r0, r0, r3
 80a0248:	2863      	cmp	r0, #99	; 0x63
 80a024a:	d91b      	bls.n	80a0284 <loop+0x48>
 80a024c:	f000 ff9e 	bl	80a118c <HAL_Timer_Get_Milli_Seconds>
        uint16_t s2;
        uint16_t s3;
        uint16_t s4;

		LIS3DHSample sample;
		if (accel.getSample(sample)) {
 80a0250:	a902      	add	r1, sp, #8
    accel_init();
}

void loop() {
	if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD) {
		lastPrintSample = millis();
 80a0252:	6020      	str	r0, [r4, #0]
        uint16_t s2;
        uint16_t s3;
        uint16_t s4;

		LIS3DHSample sample;
		if (accel.getSample(sample)) {
 80a0254:	4842      	ldr	r0, [pc, #264]	; (80a0360 <loop+0x124>)
 80a0256:	f000 ff28 	bl	80a10aa <_ZN6LIS3DH9getSampleER12LIS3DHSample>
 80a025a:	b170      	cbz	r0, 80a027a <loop+0x3e>
			Serial.printlnf("%d,%d,%d", sample.x, sample.y, sample.z);
 80a025c:	f001 faf0 	bl	80a1840 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a0260:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80a0264:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80a0268:	9201      	str	r2, [sp, #4]
 80a026a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80a026e:	2101      	movs	r1, #1
 80a0270:	9200      	str	r2, [sp, #0]
 80a0272:	4a3c      	ldr	r2, [pc, #240]	; (80a0364 <loop+0x128>)
 80a0274:	f001 f969 	bl	80a154a <_ZN5Print11printf_implEbPKcz>
 80a0278:	e004      	b.n	80a0284 <loop+0x48>
		}
		else {
			Serial.println("no sample");
 80a027a:	f001 fae1 	bl	80a1840 <_Z16_fetch_usbserialv>
 80a027e:	493a      	ldr	r1, [pc, #232]	; (80a0368 <loop+0x12c>)
 80a0280:	f001 f909 	bl	80a1496 <_ZN5Print7printlnEPKc>
		}
	}
    Serial.print("sensor 0:");
 80a0284:	f001 fadc 	bl	80a1840 <_Z16_fetch_usbserialv>
 80a0288:	4938      	ldr	r1, [pc, #224]	; (80a036c <loop+0x130>)
 80a028a:	f001 f8f1 	bl	80a1470 <_ZN5Print5printEPKc>
    Serial.print(sensor0.readRangeContinuousMillimeters());
 80a028e:	f001 fad7 	bl	80a1840 <_Z16_fetch_usbserialv>
 80a0292:	4604      	mov	r4, r0
 80a0294:	4836      	ldr	r0, [pc, #216]	; (80a0370 <loop+0x134>)
 80a0296:	f000 fa31 	bl	80a06fc <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a029a:	220a      	movs	r2, #10
 80a029c:	4601      	mov	r1, r0
 80a029e:	4620      	mov	r0, r4
 80a02a0:	f001 f951 	bl	80a1546 <_ZN5Print5printEii>
    Serial.print(" | ");
 80a02a4:	f001 facc 	bl	80a1840 <_Z16_fetch_usbserialv>
 80a02a8:	4932      	ldr	r1, [pc, #200]	; (80a0374 <loop+0x138>)
 80a02aa:	f001 f8e1 	bl	80a1470 <_ZN5Print5printEPKc>
    Serial.print("sensor 1:");
 80a02ae:	f001 fac7 	bl	80a1840 <_Z16_fetch_usbserialv>
 80a02b2:	4931      	ldr	r1, [pc, #196]	; (80a0378 <loop+0x13c>)
 80a02b4:	f001 f8dc 	bl	80a1470 <_ZN5Print5printEPKc>
    Serial.print(sensor1.readRangeContinuousMillimeters());
 80a02b8:	f001 fac2 	bl	80a1840 <_Z16_fetch_usbserialv>
 80a02bc:	4604      	mov	r4, r0
 80a02be:	482f      	ldr	r0, [pc, #188]	; (80a037c <loop+0x140>)
 80a02c0:	f000 fa1c 	bl	80a06fc <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a02c4:	220a      	movs	r2, #10
 80a02c6:	4601      	mov	r1, r0
 80a02c8:	4620      	mov	r0, r4
 80a02ca:	f001 f93c 	bl	80a1546 <_ZN5Print5printEii>
    Serial.print(" | ");
 80a02ce:	f001 fab7 	bl	80a1840 <_Z16_fetch_usbserialv>
 80a02d2:	4928      	ldr	r1, [pc, #160]	; (80a0374 <loop+0x138>)
 80a02d4:	f001 f8cc 	bl	80a1470 <_ZN5Print5printEPKc>
    Serial.print("sensor 2:");
 80a02d8:	f001 fab2 	bl	80a1840 <_Z16_fetch_usbserialv>
 80a02dc:	4928      	ldr	r1, [pc, #160]	; (80a0380 <loop+0x144>)
 80a02de:	f001 f8c7 	bl	80a1470 <_ZN5Print5printEPKc>
    Serial.print(sensor2.readRangeContinuousMillimeters());
 80a02e2:	f001 faad 	bl	80a1840 <_Z16_fetch_usbserialv>
 80a02e6:	4604      	mov	r4, r0
 80a02e8:	4826      	ldr	r0, [pc, #152]	; (80a0384 <loop+0x148>)
 80a02ea:	f000 fa07 	bl	80a06fc <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a02ee:	220a      	movs	r2, #10
 80a02f0:	4601      	mov	r1, r0
 80a02f2:	4620      	mov	r0, r4
 80a02f4:	f001 f927 	bl	80a1546 <_ZN5Print5printEii>
    Serial.print(" | ");
 80a02f8:	f001 faa2 	bl	80a1840 <_Z16_fetch_usbserialv>
 80a02fc:	491d      	ldr	r1, [pc, #116]	; (80a0374 <loop+0x138>)
 80a02fe:	f001 f8b7 	bl	80a1470 <_ZN5Print5printEPKc>
    Serial.print("sensor 3:");
 80a0302:	f001 fa9d 	bl	80a1840 <_Z16_fetch_usbserialv>
 80a0306:	4920      	ldr	r1, [pc, #128]	; (80a0388 <loop+0x14c>)
 80a0308:	f001 f8b2 	bl	80a1470 <_ZN5Print5printEPKc>
    Serial.print(sensor3.readRangeContinuousMillimeters());
 80a030c:	f001 fa98 	bl	80a1840 <_Z16_fetch_usbserialv>
 80a0310:	4604      	mov	r4, r0
 80a0312:	481e      	ldr	r0, [pc, #120]	; (80a038c <loop+0x150>)
 80a0314:	f000 f9f2 	bl	80a06fc <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
 80a0318:	220a      	movs	r2, #10
 80a031a:	4601      	mov	r1, r0
 80a031c:	4620      	mov	r0, r4
 80a031e:	f001 f912 	bl	80a1546 <_ZN5Print5printEii>
    
    if (sensor0.timeoutOccurred() || sensor1.timeoutOccurred() || sensor2.timeoutOccurred() || sensor3.timeoutOccurred()) { Serial.print(" TIMEOUT"); }
 80a0322:	4813      	ldr	r0, [pc, #76]	; (80a0370 <loop+0x134>)
 80a0324:	f000 fa10 	bl	80a0748 <_ZN7VL53L0X15timeoutOccurredEv>
 80a0328:	b988      	cbnz	r0, 80a034e <loop+0x112>
 80a032a:	4814      	ldr	r0, [pc, #80]	; (80a037c <loop+0x140>)
 80a032c:	f000 fa0c 	bl	80a0748 <_ZN7VL53L0X15timeoutOccurredEv>
 80a0330:	b968      	cbnz	r0, 80a034e <loop+0x112>
 80a0332:	4814      	ldr	r0, [pc, #80]	; (80a0384 <loop+0x148>)
 80a0334:	f000 fa08 	bl	80a0748 <_ZN7VL53L0X15timeoutOccurredEv>
 80a0338:	b948      	cbnz	r0, 80a034e <loop+0x112>
 80a033a:	4814      	ldr	r0, [pc, #80]	; (80a038c <loop+0x150>)
 80a033c:	f000 fa04 	bl	80a0748 <_ZN7VL53L0X15timeoutOccurredEv>
 80a0340:	b928      	cbnz	r0, 80a034e <loop+0x112>
    Serial.println();	
 80a0342:	f001 fa7d 	bl	80a1840 <_Z16_fetch_usbserialv>
 80a0346:	f001 f89a 	bl	80a147e <_ZN5Print7printlnEv>
 80a034a:	b004      	add	sp, #16
 80a034c:	bd10      	pop	{r4, pc}
    Serial.print(sensor2.readRangeContinuousMillimeters());
    Serial.print(" | ");
    Serial.print("sensor 3:");
    Serial.print(sensor3.readRangeContinuousMillimeters());
    
    if (sensor0.timeoutOccurred() || sensor1.timeoutOccurred() || sensor2.timeoutOccurred() || sensor3.timeoutOccurred()) { Serial.print(" TIMEOUT"); }
 80a034e:	f001 fa77 	bl	80a1840 <_Z16_fetch_usbserialv>
 80a0352:	490f      	ldr	r1, [pc, #60]	; (80a0390 <loop+0x154>)
 80a0354:	f001 f88c 	bl	80a1470 <_ZN5Print5printEPKc>
 80a0358:	e7f3      	b.n	80a0342 <loop+0x106>
 80a035a:	bf00      	nop
 80a035c:	20000308 	.word	0x20000308
 80a0360:	2000036c 	.word	0x2000036c
 80a0364:	080a277d 	.word	0x080a277d
 80a0368:	080a2786 	.word	0x080a2786
 80a036c:	080a2790 	.word	0x080a2790
 80a0370:	2000030c 	.word	0x2000030c
 80a0374:	080a279a 	.word	0x080a279a
 80a0378:	080a279e 	.word	0x080a279e
 80a037c:	20000324 	.word	0x20000324
 80a0380:	080a27a8 	.word	0x080a27a8
 80a0384:	2000033c 	.word	0x2000033c
 80a0388:	080a27b2 	.word	0x080a27b2
 80a038c:	20000354 	.word	0x20000354
 80a0390:	080a27bc 	.word	0x080a27bc

080a0394 <_GLOBAL__sub_I_sensor0>:
    Serial.println();	
 80a0394:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0396:	f000 fec1 	bl	80a111c <HAL_Pin_Map>
#if !defined(PARTICLE)
#  include <Wire.h>
#endif

// ToF
VL53L0X sensor0;
 80a039a:	4811      	ldr	r0, [pc, #68]	; (80a03e0 <_GLOBAL__sub_I_sensor0+0x4c>)
 80a039c:	f000 f836 	bl	80a040c <_ZN7VL53L0XC1Ev>
VL53L0X sensor1;
 80a03a0:	4810      	ldr	r0, [pc, #64]	; (80a03e4 <_GLOBAL__sub_I_sensor0+0x50>)
 80a03a2:	f000 f833 	bl	80a040c <_ZN7VL53L0XC1Ev>
VL53L0X sensor2;
 80a03a6:	4810      	ldr	r0, [pc, #64]	; (80a03e8 <_GLOBAL__sub_I_sensor0+0x54>)
 80a03a8:	f000 f830 	bl	80a040c <_ZN7VL53L0XC1Ev>
VL53L0X sensor3;
 80a03ac:	480f      	ldr	r0, [pc, #60]	; (80a03ec <_GLOBAL__sub_I_sensor0+0x58>)
 80a03ae:	f000 f82d 	bl	80a040c <_ZN7VL53L0XC1Ev>

// Accel
SYSTEM_THREAD(ENABLED);
 80a03b2:	2100      	movs	r1, #0
 80a03b4:	2001      	movs	r0, #1
 80a03b6:	f000 ffe3 	bl	80a1380 <system_thread_set_state>

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a03ba:	2003      	movs	r0, #3
 80a03bc:	f000 ffd0 	bl	80a1360 <set_system_mode>
SYSTEM_MODE(MANUAL);
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
 80a03c0:	f001 fc10 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a03c4:	4c0a      	ldr	r4, [pc, #40]	; (80a03f0 <_GLOBAL__sub_I_sensor0+0x5c>)
 80a03c6:	4601      	mov	r1, r0
 80a03c8:	2200      	movs	r2, #0
 80a03ca:	4620      	mov	r0, r4
 80a03cc:	2311      	movs	r3, #17
 80a03ce:	f000 fe99 	bl	80a1104 <_ZN9LIS3DHI2CC1ER7TwoWirehi>
 80a03d2:	4620      	mov	r0, r4
    Serial.print("sensor 3:");
    Serial.print(sensor3.readRangeContinuousMillimeters());
    
    if (sensor0.timeoutOccurred() || sensor1.timeoutOccurred() || sensor2.timeoutOccurred() || sensor3.timeoutOccurred()) { Serial.print(" TIMEOUT"); }
    Serial.println();	
 80a03d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

// Accel
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(MANUAL);
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHI2C accel(Wire, 0, WKP);
 80a03d8:	4a06      	ldr	r2, [pc, #24]	; (80a03f4 <_GLOBAL__sub_I_sensor0+0x60>)
 80a03da:	4907      	ldr	r1, [pc, #28]	; (80a03f8 <_GLOBAL__sub_I_sensor0+0x64>)
 80a03dc:	f001 bc22 	b.w	80a1c24 <__aeabi_atexit>
 80a03e0:	2000030c 	.word	0x2000030c
 80a03e4:	20000324 	.word	0x20000324
 80a03e8:	2000033c 	.word	0x2000033c
 80a03ec:	20000354 	.word	0x20000354
 80a03f0:	2000036c 	.word	0x2000036c
 80a03f4:	20000304 	.word	0x20000304
 80a03f8:	080a0fdd 	.word	0x080a0fdd

080a03fc <_ZN7TwoWire5writeEm>:
  virtual int peek(void);
  virtual void flush(void);
  void onReceive(void (*)(int));
  void onRequest(void (*)(void));

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
 80a03fc:	6803      	ldr	r3, [r0, #0]
 80a03fe:	b2c9      	uxtb	r1, r1
 80a0400:	689b      	ldr	r3, [r3, #8]
 80a0402:	4718      	bx	r3

080a0404 <_ZN7TwoWire5writeEi>:
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0404:	6803      	ldr	r3, [r0, #0]
 80a0406:	b2c9      	uxtb	r1, r1
 80a0408:	689b      	ldr	r3, [r3, #8]
 80a040a:	4718      	bx	r3

080a040c <_ZN7VL53L0XC1Ev>:
// Constructors ////////////////////////////////////////////////////////////////

VL53L0X::VL53L0X(void)
  : address(ADDRESS_DEFAULT)
  , io_timeout(0) // no timeout
  , did_timeout(false)
 80a040c:	2229      	movs	r2, #41	; 0x29
 80a040e:	7042      	strb	r2, [r0, #1]
 80a0410:	2200      	movs	r2, #0
 80a0412:	6042      	str	r2, [r0, #4]
 80a0414:	7202      	strb	r2, [r0, #8]
{
}
 80a0416:	4770      	bx	lr

080a0418 <_ZN7VL53L0X8writeRegEhh>:
  return true;
}

// Write an 8-bit register
void VL53L0X::writeReg(uint8_t reg, uint8_t value)
{
 80a0418:	b570      	push	{r4, r5, r6, lr}
 80a041a:	4604      	mov	r4, r0
 80a041c:	4615      	mov	r5, r2
 80a041e:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a0420:	f001 fbe0 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a0424:	7861      	ldrb	r1, [r4, #1]
 80a0426:	f001 fb30 	bl	80a1a8a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a042a:	f001 fbdb 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a042e:	6803      	ldr	r3, [r0, #0]
 80a0430:	4631      	mov	r1, r6
 80a0432:	689b      	ldr	r3, [r3, #8]
 80a0434:	4798      	blx	r3
  Wire.write(value);
 80a0436:	f001 fbd5 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a043a:	6803      	ldr	r3, [r0, #0]
 80a043c:	4629      	mov	r1, r5
 80a043e:	689b      	ldr	r3, [r3, #8]
 80a0440:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a0442:	f001 fbcf 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a0446:	f001 fb28 	bl	80a1a9a <_ZN7TwoWire15endTransmissionEv>
 80a044a:	7020      	strb	r0, [r4, #0]
 80a044c:	bd70      	pop	{r4, r5, r6, pc}

080a044e <_ZN7VL53L0X10setAddressEh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void VL53L0X::setAddress(uint8_t new_addr)
{
 80a044e:	b538      	push	{r3, r4, r5, lr}
 80a0450:	4605      	mov	r5, r0
 80a0452:	460c      	mov	r4, r1
  writeReg(I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 80a0454:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80a0458:	218a      	movs	r1, #138	; 0x8a
 80a045a:	f7ff ffdd 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  address = new_addr;
 80a045e:	706c      	strb	r4, [r5, #1]
 80a0460:	bd38      	pop	{r3, r4, r5, pc}

080a0462 <_ZN7VL53L0X13writeReg16BitEht>:
  last_status = Wire.endTransmission();
}

// Write a 16-bit register
void VL53L0X::writeReg16Bit(uint8_t reg, uint16_t value)
{
 80a0462:	b570      	push	{r4, r5, r6, lr}
 80a0464:	4604      	mov	r4, r0
 80a0466:	4615      	mov	r5, r2
 80a0468:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a046a:	f001 fbbb 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a046e:	7861      	ldrb	r1, [r4, #1]
 80a0470:	f001 fb0b 	bl	80a1a8a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0474:	f001 fbb6 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a0478:	6803      	ldr	r3, [r0, #0]
 80a047a:	4631      	mov	r1, r6
 80a047c:	689b      	ldr	r3, [r3, #8]
 80a047e:	4798      	blx	r3
  Wire.write((value >> 8) & 0xFF); // value high byte
 80a0480:	f001 fbb0 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a0484:	0a29      	lsrs	r1, r5, #8
 80a0486:	f7ff ffbd 	bl	80a0404 <_ZN7TwoWire5writeEi>
  Wire.write( value       & 0xFF); // value low byte
 80a048a:	f001 fbab 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a048e:	b2e9      	uxtb	r1, r5
 80a0490:	f7ff ffb8 	bl	80a0404 <_ZN7TwoWire5writeEi>
  last_status = Wire.endTransmission();
 80a0494:	f001 fba6 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a0498:	f001 faff 	bl	80a1a9a <_ZN7TwoWire15endTransmissionEv>
 80a049c:	7020      	strb	r0, [r4, #0]
 80a049e:	bd70      	pop	{r4, r5, r6, pc}

080a04a0 <_ZN7VL53L0X13writeReg32BitEhm>:
}

// Write a 32-bit register
void VL53L0X::writeReg32Bit(uint8_t reg, uint32_t value)
{
 80a04a0:	b570      	push	{r4, r5, r6, lr}
 80a04a2:	4605      	mov	r5, r0
 80a04a4:	4614      	mov	r4, r2
 80a04a6:	460e      	mov	r6, r1
  Wire.beginTransmission(address);
 80a04a8:	f001 fb9c 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a04ac:	7869      	ldrb	r1, [r5, #1]
 80a04ae:	f001 faec 	bl	80a1a8a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a04b2:	f001 fb97 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a04b6:	6803      	ldr	r3, [r0, #0]
 80a04b8:	4631      	mov	r1, r6
 80a04ba:	689b      	ldr	r3, [r3, #8]
 80a04bc:	4798      	blx	r3
  Wire.write((value >> 24) & 0xFF); // value highest byte
 80a04be:	f001 fb91 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a04c2:	0e21      	lsrs	r1, r4, #24
 80a04c4:	f7ff ff9a 	bl	80a03fc <_ZN7TwoWire5writeEm>
  Wire.write((value >> 16) & 0xFF);
 80a04c8:	f001 fb8c 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a04cc:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80a04d0:	f7ff ff94 	bl	80a03fc <_ZN7TwoWire5writeEm>
  Wire.write((value >>  8) & 0xFF);
 80a04d4:	f001 fb86 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a04d8:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80a04dc:	f7ff ff8e 	bl	80a03fc <_ZN7TwoWire5writeEm>
  Wire.write( value        & 0xFF); // value lowest byte
 80a04e0:	f001 fb80 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a04e4:	b2e1      	uxtb	r1, r4
 80a04e6:	f7ff ff89 	bl	80a03fc <_ZN7TwoWire5writeEm>
  last_status = Wire.endTransmission();
 80a04ea:	f001 fb7b 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a04ee:	f001 fad4 	bl	80a1a9a <_ZN7TwoWire15endTransmissionEv>
 80a04f2:	7028      	strb	r0, [r5, #0]
 80a04f4:	bd70      	pop	{r4, r5, r6, pc}

080a04f6 <_ZN7VL53L0X7readRegEh>:
}

// Read an 8-bit register
uint8_t VL53L0X::readReg(uint8_t reg)
{
 80a04f6:	b538      	push	{r3, r4, r5, lr}
 80a04f8:	4604      	mov	r4, r0
 80a04fa:	460d      	mov	r5, r1
  uint8_t value;

  Wire.beginTransmission(address);
 80a04fc:	f001 fb72 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a0500:	7861      	ldrb	r1, [r4, #1]
 80a0502:	f001 fac2 	bl	80a1a8a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0506:	f001 fb6d 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a050a:	6803      	ldr	r3, [r0, #0]
 80a050c:	4629      	mov	r1, r5
 80a050e:	689b      	ldr	r3, [r3, #8]
 80a0510:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a0512:	f001 fb67 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a0516:	f001 fac0 	bl	80a1a9a <_ZN7TwoWire15endTransmissionEv>
 80a051a:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)1);
 80a051c:	f001 fb62 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a0520:	2201      	movs	r2, #1
 80a0522:	7861      	ldrb	r1, [r4, #1]
 80a0524:	f001 faa9 	bl	80a1a7a <_ZN7TwoWire11requestFromEhh>
  value = Wire.read();
 80a0528:	f001 fb5c 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a052c:	6803      	ldr	r3, [r0, #0]
 80a052e:	695b      	ldr	r3, [r3, #20]
 80a0530:	4798      	blx	r3

  return value;
}
 80a0532:	b2c0      	uxtb	r0, r0
 80a0534:	bd38      	pop	{r3, r4, r5, pc}

080a0536 <_ZN7VL53L0X12readReg16BitEh>:

// Read a 16-bit register
uint16_t VL53L0X::readReg16Bit(uint8_t reg)
{
 80a0536:	b538      	push	{r3, r4, r5, lr}
 80a0538:	4604      	mov	r4, r0
 80a053a:	460d      	mov	r5, r1
  uint16_t value;

  Wire.beginTransmission(address);
 80a053c:	f001 fb52 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a0540:	7861      	ldrb	r1, [r4, #1]
 80a0542:	f001 faa2 	bl	80a1a8a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a0546:	f001 fb4d 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a054a:	6803      	ldr	r3, [r0, #0]
 80a054c:	4629      	mov	r1, r5
 80a054e:	689b      	ldr	r3, [r3, #8]
 80a0550:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a0552:	f001 fb47 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a0556:	f001 faa0 	bl	80a1a9a <_ZN7TwoWire15endTransmissionEv>
 80a055a:	7020      	strb	r0, [r4, #0]

  Wire.requestFrom(address, (uint8_t)2);
 80a055c:	f001 fb42 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a0560:	7861      	ldrb	r1, [r4, #1]
 80a0562:	2202      	movs	r2, #2
 80a0564:	f001 fa89 	bl	80a1a7a <_ZN7TwoWire11requestFromEhh>
  value  = (uint16_t)Wire.read() << 8; // value high byte
 80a0568:	f001 fb3c 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a056c:	6803      	ldr	r3, [r0, #0]
 80a056e:	695b      	ldr	r3, [r3, #20]
 80a0570:	4798      	blx	r3
 80a0572:	4604      	mov	r4, r0
  value |=           Wire.read();      // value low byte
 80a0574:	f001 fb36 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a0578:	6803      	ldr	r3, [r0, #0]
 80a057a:	695b      	ldr	r3, [r3, #20]
 80a057c:	4798      	blx	r3
 80a057e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8

  return value;
}
 80a0582:	b280      	uxth	r0, r0
 80a0584:	bd38      	pop	{r3, r4, r5, pc}

080a0586 <_ZN7VL53L0X10writeMultiEhPKhh>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
 80a0586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0588:	4606      	mov	r6, r0
 80a058a:	4614      	mov	r4, r2
 80a058c:	461d      	mov	r5, r3
 80a058e:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a0590:	f001 fb28 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a0594:	7871      	ldrb	r1, [r6, #1]
 80a0596:	f001 fa78 	bl	80a1a8a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a059a:	f001 fb23 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a059e:	6803      	ldr	r3, [r0, #0]
 80a05a0:	4639      	mov	r1, r7
 80a05a2:	689b      	ldr	r3, [r3, #8]
 80a05a4:	4798      	blx	r3
 80a05a6:	4425      	add	r5, r4

  while (count-- > 0)
 80a05a8:	42ac      	cmp	r4, r5
 80a05aa:	d007      	beq.n	80a05bc <_ZN7VL53L0X10writeMultiEhPKhh+0x36>
  {
    Wire.write(*(src++));
 80a05ac:	f001 fb1a 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a05b0:	6803      	ldr	r3, [r0, #0]
 80a05b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a05b6:	689b      	ldr	r3, [r3, #8]
 80a05b8:	4798      	blx	r3
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
  Wire.beginTransmission(address);
  Wire.write(reg);

  while (count-- > 0)
 80a05ba:	e7f5      	b.n	80a05a8 <_ZN7VL53L0X10writeMultiEhPKhh+0x22>
  {
    Wire.write(*(src++));
  }

  last_status = Wire.endTransmission();
 80a05bc:	f001 fb12 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a05c0:	f001 fa6b 	bl	80a1a9a <_ZN7TwoWire15endTransmissionEv>
 80a05c4:	7030      	strb	r0, [r6, #0]
 80a05c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a05c8 <_ZN7VL53L0X9readMultiEhPhh>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void VL53L0X::readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 80a05c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a05ca:	4606      	mov	r6, r0
 80a05cc:	4614      	mov	r4, r2
 80a05ce:	461d      	mov	r5, r3
 80a05d0:	460f      	mov	r7, r1
  Wire.beginTransmission(address);
 80a05d2:	f001 fb07 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a05d6:	7871      	ldrb	r1, [r6, #1]
 80a05d8:	f001 fa57 	bl	80a1a8a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(reg);
 80a05dc:	f001 fb02 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a05e0:	6803      	ldr	r3, [r0, #0]
 80a05e2:	4639      	mov	r1, r7
 80a05e4:	689b      	ldr	r3, [r3, #8]
 80a05e6:	4798      	blx	r3
  last_status = Wire.endTransmission();
 80a05e8:	f001 fafc 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a05ec:	f001 fa55 	bl	80a1a9a <_ZN7TwoWire15endTransmissionEv>
 80a05f0:	7030      	strb	r0, [r6, #0]

  Wire.requestFrom(address, count);
 80a05f2:	f001 faf7 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a05f6:	462a      	mov	r2, r5
 80a05f8:	7871      	ldrb	r1, [r6, #1]
 80a05fa:	f001 fa3e 	bl	80a1a7a <_ZN7TwoWire11requestFromEhh>
 80a05fe:	4425      	add	r5, r4

  while (count-- > 0)
 80a0600:	42ac      	cmp	r4, r5
 80a0602:	d007      	beq.n	80a0614 <_ZN7VL53L0X9readMultiEhPhh+0x4c>
  {
    *(dst++) = Wire.read();
 80a0604:	f001 faee 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a0608:	6803      	ldr	r3, [r0, #0]
 80a060a:	695b      	ldr	r3, [r3, #20]
 80a060c:	4798      	blx	r3
 80a060e:	f804 0b01 	strb.w	r0, [r4], #1
  Wire.write(reg);
  last_status = Wire.endTransmission();

  Wire.requestFrom(address, count);

  while (count-- > 0)
 80a0612:	e7f5      	b.n	80a0600 <_ZN7VL53L0X9readMultiEhPhh+0x38>
 80a0614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0618 <_ZN7VL53L0X18setSignalRateLimitEf>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
 80a0618:	b570      	push	{r4, r5, r6, lr}
 80a061a:	460d      	mov	r5, r1
 80a061c:	4606      	mov	r6, r0
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a061e:	2100      	movs	r1, #0
 80a0620:	4628      	mov	r0, r5
 80a0622:	f002 f82b 	bl	80a267c <__aeabi_fcmplt>
 80a0626:	b9b0      	cbnz	r0, 80a0656 <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>
 80a0628:	4628      	mov	r0, r5
 80a062a:	f001 fdad 	bl	80a2188 <__aeabi_f2d>
 80a062e:	a30c      	add	r3, pc, #48	; (adr r3, 80a0660 <_ZN7VL53L0X18setSignalRateLimitEf+0x48>)
 80a0630:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0634:	f001 fe7a 	bl	80a232c <__aeabi_dcmpgt>
 80a0638:	b968      	cbnz	r0, 80a0656 <_ZN7VL53L0X18setSignalRateLimitEf+0x3e>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80a063a:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80a063e:	4628      	mov	r0, r5
 80a0640:	f001 fe7e 	bl	80a2340 <__aeabi_fmul>
 80a0644:	f002 f842 	bl	80a26cc <__aeabi_f2uiz>
 80a0648:	2144      	movs	r1, #68	; 0x44
 80a064a:	b282      	uxth	r2, r0
 80a064c:	4630      	mov	r0, r6
 80a064e:	f7ff ff08 	bl	80a0462 <_ZN7VL53L0X13writeReg16BitEht>
 80a0652:	2001      	movs	r0, #1
 80a0654:	bd70      	pop	{r4, r5, r6, pc}
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80a0656:	2000      	movs	r0, #0
 80a0658:	bd70      	pop	{r4, r5, r6, pc}
 80a065a:	bf00      	nop
 80a065c:	f3af 8000 	nop.w
 80a0660:	0a3d70a4 	.word	0x0a3d70a4
 80a0664:	407fffd7 	.word	0x407fffd7

080a0668 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>:
}

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t VL53L0X::getVcselPulsePeriod(vcselPeriodType type)
{
 80a0668:	b508      	push	{r3, lr}
  if (type == VcselPeriodPreRange)
 80a066a:	b909      	cbnz	r1, 80a0670 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x8>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 80a066c:	2150      	movs	r1, #80	; 0x50
 80a066e:	e002      	b.n	80a0676 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0xe>
  }
  else if (type == VcselPeriodFinalRange)
 80a0670:	2901      	cmp	r1, #1
 80a0672:	d106      	bne.n	80a0682 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x1a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a0674:	2170      	movs	r1, #112	; 0x70
 80a0676:	f7ff ff3e 	bl	80a04f6 <_ZN7VL53L0X7readRegEh>
 80a067a:	3001      	adds	r0, #1
 80a067c:	0040      	lsls	r0, r0, #1
 80a067e:	b2c0      	uxtb	r0, r0
 80a0680:	bd08      	pop	{r3, pc}
  }
  else { return 255; }
 80a0682:	20ff      	movs	r0, #255	; 0xff
}
 80a0684:	bd08      	pop	{r3, pc}

080a0686 <_ZN7VL53L0X15startContinuousEm>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X::startContinuous(uint32_t period_ms)
{
 80a0686:	b538      	push	{r3, r4, r5, lr}
 80a0688:	4604      	mov	r4, r0
 80a068a:	460d      	mov	r5, r1
  writeReg(0x80, 0x01);
 80a068c:	2201      	movs	r2, #1
 80a068e:	2180      	movs	r1, #128	; 0x80
 80a0690:	f7ff fec2 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0694:	2201      	movs	r2, #1
 80a0696:	21ff      	movs	r1, #255	; 0xff
 80a0698:	4620      	mov	r0, r4
 80a069a:	f7ff febd 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a069e:	2200      	movs	r2, #0
 80a06a0:	4611      	mov	r1, r2
 80a06a2:	4620      	mov	r0, r4
 80a06a4:	f7ff feb8 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x91, stop_variable);
 80a06a8:	7c22      	ldrb	r2, [r4, #16]
 80a06aa:	2191      	movs	r1, #145	; 0x91
 80a06ac:	4620      	mov	r0, r4
 80a06ae:	f7ff feb3 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a06b2:	2201      	movs	r2, #1
 80a06b4:	2100      	movs	r1, #0
 80a06b6:	4620      	mov	r0, r4
 80a06b8:	f7ff feae 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a06bc:	2200      	movs	r2, #0
 80a06be:	21ff      	movs	r1, #255	; 0xff
 80a06c0:	4620      	mov	r0, r4
 80a06c2:	f7ff fea9 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a06c6:	2200      	movs	r2, #0
 80a06c8:	2180      	movs	r1, #128	; 0x80
 80a06ca:	4620      	mov	r0, r4
 80a06cc:	f7ff fea4 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  if (period_ms != 0)
 80a06d0:	b16d      	cbz	r5, 80a06ee <_ZN7VL53L0X15startContinuousEm+0x68>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 80a06d2:	21f8      	movs	r1, #248	; 0xf8
 80a06d4:	4620      	mov	r0, r4
 80a06d6:	f7ff ff2e 	bl	80a0536 <_ZN7VL53L0X12readReg16BitEh>

    if (osc_calibrate_val != 0)
 80a06da:	b100      	cbz	r0, 80a06de <_ZN7VL53L0X15startContinuousEm+0x58>
    {
      period_ms *= osc_calibrate_val;
 80a06dc:	4345      	muls	r5, r0
    }

    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 80a06de:	462a      	mov	r2, r5
 80a06e0:	2104      	movs	r1, #4
 80a06e2:	4620      	mov	r0, r4
 80a06e4:	f7ff fedc 	bl	80a04a0 <_ZN7VL53L0X13writeReg32BitEhm>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 80a06e8:	2204      	movs	r2, #4
 80a06ea:	2100      	movs	r1, #0
 80a06ec:	e001      	b.n	80a06f2 <_ZN7VL53L0X15startContinuousEm+0x6c>
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a06ee:	4629      	mov	r1, r5
 80a06f0:	2202      	movs	r2, #2
 80a06f2:	4620      	mov	r0, r4
  }
}
 80a06f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80a06f8:	f7ff be8e 	b.w	80a0418 <_ZN7VL53L0X8writeRegEhh>

080a06fc <_ZN7VL53L0X30readRangeContinuousMillimetersEv>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t VL53L0X::readRangeContinuousMillimeters(void)
{
 80a06fc:	b538      	push	{r3, r4, r5, lr}
 80a06fe:	4604      	mov	r4, r0
 80a0700:	f000 fd44 	bl	80a118c <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a0704:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a0706:	2113      	movs	r1, #19
 80a0708:	4620      	mov	r0, r4
 80a070a:	f7ff fef4 	bl	80a04f6 <_ZN7VL53L0X7readRegEh>
 80a070e:	0743      	lsls	r3, r0, #29
 80a0710:	d10e      	bne.n	80a0730 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0x34>
  {
    if (checkTimeoutExpired())
 80a0712:	6863      	ldr	r3, [r4, #4]
 80a0714:	2b00      	cmp	r3, #0
 80a0716:	d0f6      	beq.n	80a0706 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
 80a0718:	f000 fd38 	bl	80a118c <HAL_Timer_Get_Milli_Seconds>
 80a071c:	68e3      	ldr	r3, [r4, #12]
 80a071e:	1ac0      	subs	r0, r0, r3
 80a0720:	6863      	ldr	r3, [r4, #4]
 80a0722:	4298      	cmp	r0, r3
 80a0724:	d9ef      	bls.n	80a0706 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0xa>
    {
      did_timeout = true;
 80a0726:	2301      	movs	r3, #1
 80a0728:	7223      	strb	r3, [r4, #8]
      return 65535;
 80a072a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  return range;
}
 80a072e:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);
 80a0730:	211e      	movs	r1, #30
 80a0732:	4620      	mov	r0, r4
 80a0734:	f7ff feff 	bl	80a0536 <_ZN7VL53L0X12readReg16BitEh>
 80a0738:	4605      	mov	r5, r0

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a073a:	2201      	movs	r2, #1
 80a073c:	4620      	mov	r0, r4
 80a073e:	210b      	movs	r1, #11
 80a0740:	f7ff fe6a 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
 80a0744:	4628      	mov	r0, r5
 80a0746:	bd38      	pop	{r3, r4, r5, pc}

080a0748 <_ZN7VL53L0X15timeoutOccurredEv>:
}

// Did a timeout occur in one of the read functions since the last call to
// timeoutOccurred()?
bool VL53L0X::timeoutOccurred()
{
 80a0748:	4603      	mov	r3, r0
  bool tmp = did_timeout;
  did_timeout = false;
 80a074a:	2200      	movs	r2, #0

// Did a timeout occur in one of the read functions since the last call to
// timeoutOccurred()?
bool VL53L0X::timeoutOccurred()
{
  bool tmp = did_timeout;
 80a074c:	7a00      	ldrb	r0, [r0, #8]
  did_timeout = false;
 80a074e:	721a      	strb	r2, [r3, #8]
  return tmp;
}
 80a0750:	4770      	bx	lr

080a0752 <_ZN7VL53L0X11getSpadInfoEPhPb>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X::getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80a0752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0754:	4604      	mov	r4, r0
 80a0756:	460f      	mov	r7, r1
 80a0758:	4616      	mov	r6, r2
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80a075a:	2180      	movs	r1, #128	; 0x80
 80a075c:	2201      	movs	r2, #1
 80a075e:	f7ff fe5b 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0762:	2201      	movs	r2, #1
 80a0764:	21ff      	movs	r1, #255	; 0xff
 80a0766:	4620      	mov	r0, r4
 80a0768:	f7ff fe56 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a076c:	2200      	movs	r2, #0
 80a076e:	4611      	mov	r1, r2
 80a0770:	4620      	mov	r0, r4
 80a0772:	f7ff fe51 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x06);
 80a0776:	2206      	movs	r2, #6
 80a0778:	21ff      	movs	r1, #255	; 0xff
 80a077a:	4620      	mov	r0, r4
 80a077c:	f7ff fe4c 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg(0x83) | 0x04);
 80a0780:	2183      	movs	r1, #131	; 0x83
 80a0782:	4620      	mov	r0, r4
 80a0784:	f7ff feb7 	bl	80a04f6 <_ZN7VL53L0X7readRegEh>
 80a0788:	f040 0204 	orr.w	r2, r0, #4
 80a078c:	b2d2      	uxtb	r2, r2
 80a078e:	2183      	movs	r1, #131	; 0x83
 80a0790:	4620      	mov	r0, r4
 80a0792:	f7ff fe41 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x07);
 80a0796:	2207      	movs	r2, #7
 80a0798:	21ff      	movs	r1, #255	; 0xff
 80a079a:	4620      	mov	r0, r4
 80a079c:	f7ff fe3c 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x81, 0x01);
 80a07a0:	2201      	movs	r2, #1
 80a07a2:	2181      	movs	r1, #129	; 0x81
 80a07a4:	4620      	mov	r0, r4
 80a07a6:	f7ff fe37 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a07aa:	2201      	movs	r2, #1
 80a07ac:	2180      	movs	r1, #128	; 0x80
 80a07ae:	4620      	mov	r0, r4
 80a07b0:	f7ff fe32 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x94, 0x6b);
 80a07b4:	226b      	movs	r2, #107	; 0x6b
 80a07b6:	2194      	movs	r1, #148	; 0x94
 80a07b8:	4620      	mov	r0, r4
 80a07ba:	f7ff fe2d 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, 0x00);
 80a07be:	2200      	movs	r2, #0
 80a07c0:	2183      	movs	r1, #131	; 0x83
 80a07c2:	4620      	mov	r0, r4
 80a07c4:	f7ff fe28 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
 80a07c8:	f000 fce0 	bl	80a118c <HAL_Timer_Get_Milli_Seconds>
  startTimeout();
 80a07cc:	60e0      	str	r0, [r4, #12]
  while (readReg(0x83) == 0x00)
 80a07ce:	2183      	movs	r1, #131	; 0x83
 80a07d0:	4620      	mov	r0, r4
 80a07d2:	f7ff fe90 	bl	80a04f6 <_ZN7VL53L0X7readRegEh>
 80a07d6:	4605      	mov	r5, r0
 80a07d8:	b958      	cbnz	r0, 80a07f2 <_ZN7VL53L0X11getSpadInfoEPhPb+0xa0>
  {
    if (checkTimeoutExpired()) { return false; }
 80a07da:	6863      	ldr	r3, [r4, #4]
 80a07dc:	2b00      	cmp	r3, #0
 80a07de:	d0f6      	beq.n	80a07ce <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a07e0:	f000 fcd4 	bl	80a118c <HAL_Timer_Get_Milli_Seconds>
 80a07e4:	68e3      	ldr	r3, [r4, #12]
 80a07e6:	1ac0      	subs	r0, r0, r3
 80a07e8:	6863      	ldr	r3, [r4, #4]
 80a07ea:	4298      	cmp	r0, r3
 80a07ec:	d9ef      	bls.n	80a07ce <_ZN7VL53L0X11getSpadInfoEPhPb+0x7c>
 80a07ee:	4628      	mov	r0, r5

  writeReg(0xFF, 0x00);
  writeReg(0x80, 0x00);

  return true;
}
 80a07f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  startTimeout();
  while (readReg(0x83) == 0x00)
  {
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
 80a07f2:	2201      	movs	r2, #1
 80a07f4:	4620      	mov	r0, r4
 80a07f6:	2183      	movs	r1, #131	; 0x83
 80a07f8:	f7ff fe0e 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  tmp = readReg(0x92);
 80a07fc:	2192      	movs	r1, #146	; 0x92
 80a07fe:	4620      	mov	r0, r4
 80a0800:	f7ff fe79 	bl	80a04f6 <_ZN7VL53L0X7readRegEh>

  *count = tmp & 0x7f;
 80a0804:	f000 037f 	and.w	r3, r0, #127	; 0x7f
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a0808:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
 80a080c:	703b      	strb	r3, [r7, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;

  writeReg(0x81, 0x00);
 80a080e:	2200      	movs	r2, #0
  }
  writeReg(0x83, 0x01);
  tmp = readReg(0x92);

  *count = tmp & 0x7f;
  *type_is_aperture = (tmp >> 7) & 0x01;
 80a0810:	7030      	strb	r0, [r6, #0]

  writeReg(0x81, 0x00);
 80a0812:	2181      	movs	r1, #129	; 0x81
 80a0814:	4620      	mov	r0, r4
 80a0816:	f7ff fdff 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x06);
 80a081a:	2206      	movs	r2, #6
 80a081c:	4620      	mov	r0, r4
 80a081e:	21ff      	movs	r1, #255	; 0xff
 80a0820:	f7ff fdfa 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg( 0x83  & ~0x04));
 80a0824:	2183      	movs	r1, #131	; 0x83
 80a0826:	4620      	mov	r0, r4
 80a0828:	f7ff fe65 	bl	80a04f6 <_ZN7VL53L0X7readRegEh>
 80a082c:	2183      	movs	r1, #131	; 0x83
 80a082e:	4602      	mov	r2, r0
 80a0830:	4620      	mov	r0, r4
 80a0832:	f7ff fdf1 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0836:	4620      	mov	r0, r4
 80a0838:	2201      	movs	r2, #1
 80a083a:	21ff      	movs	r1, #255	; 0xff
 80a083c:	f7ff fdec 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a0840:	4620      	mov	r0, r4
 80a0842:	2201      	movs	r2, #1
 80a0844:	2100      	movs	r1, #0
 80a0846:	f7ff fde7 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a084a:	4620      	mov	r0, r4
 80a084c:	2200      	movs	r2, #0
 80a084e:	21ff      	movs	r1, #255	; 0xff
 80a0850:	f7ff fde2 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a0854:	4620      	mov	r0, r4
 80a0856:	2200      	movs	r2, #0
 80a0858:	2180      	movs	r1, #128	; 0x80
 80a085a:	f7ff fddd 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  return true;
 80a085e:	2001      	movs	r0, #1
 80a0860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0862 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>:
}

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X::getSequenceStepEnables(SequenceStepEnables * enables)
{
 80a0862:	b510      	push	{r4, lr}
 80a0864:	460c      	mov	r4, r1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 80a0866:	2101      	movs	r1, #1
 80a0868:	f7ff fe45 	bl	80a04f6 <_ZN7VL53L0X7readRegEh>

  enables->tcc          = (sequence_config >> 4) & 0x1;
 80a086c:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80a0870:	7023      	strb	r3, [r4, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 80a0872:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80a0876:	70a3      	strb	r3, [r4, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 80a0878:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80a087c:	7063      	strb	r3, [r4, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a087e:	f3c0 1380 	ubfx	r3, r0, #6, #1
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a0882:	f3c0 10c0 	ubfx	r0, r0, #7, #1
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);

  enables->tcc          = (sequence_config >> 4) & 0x1;
  enables->dss          = (sequence_config >> 3) & 0x1;
  enables->msrc         = (sequence_config >> 2) & 0x1;
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 80a0886:	70e3      	strb	r3, [r4, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 80a0888:	7120      	strb	r0, [r4, #4]
 80a088a:	bd10      	pop	{r4, pc}

080a088c <_ZN7VL53L0X13decodeTimeoutEm>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X::decodeTimeout(uint32_t reg_val)
{
 80a088c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a0890:	4298      	cmp	r0, r3
 80a0892:	bf28      	it	cs
 80a0894:	4618      	movcs	r0, r3
  if (reg_val > 0xFFFF) reg_val = 0xFFFF;
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 80a0896:	b2c3      	uxtb	r3, r0
 80a0898:	0a00      	lsrs	r0, r0, #8
 80a089a:	fa03 f000 	lsl.w	r0, r3, r0
 80a089e:	3001      	adds	r0, #1
}
 80a08a0:	b280      	uxth	r0, r0
 80a08a2:	4770      	bx	lr

080a08a4 <_ZN7VL53L0X13encodeTimeoutEm>:
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a08a4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80a08a8:	d201      	bcs.n	80a08ae <_ZN7VL53L0X13encodeTimeoutEm+0xa>

  // format: "(LSByte * 2^MSByte) + 1"
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
 80a08aa:	b178      	cbz	r0, 80a08cc <_ZN7VL53L0X13encodeTimeoutEm+0x28>
 80a08ac:	e001      	b.n	80a08b2 <_ZN7VL53L0X13encodeTimeoutEm+0xe>
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always uint32_t with uint16_t values only.
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  if (timeout_mclks > 0xFFFF) timeout_mclks = 0xFFFF;
 80a08ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;
 80a08b2:	3801      	subs	r0, #1
 80a08b4:	2300      	movs	r3, #0

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a08b6:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 80a08ba:	b29a      	uxth	r2, r3
 80a08bc:	f103 0301 	add.w	r3, r3, #1
 80a08c0:	d001      	beq.n	80a08c6 <_ZN7VL53L0X13encodeTimeoutEm+0x22>
    {
      ls_byte >>= 1;
 80a08c2:	0840      	lsrs	r0, r0, #1

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;

    while ((ls_byte & 0xFFFFFF00) > 0)
 80a08c4:	e7f7      	b.n	80a08b6 <_ZN7VL53L0X13encodeTimeoutEm+0x12>
    {
      ls_byte >>= 1;
      ms_byte++;
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 80a08c6:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80a08ca:	b280      	uxth	r0, r0
  }
  else { return 0; }
}
 80a08cc:	4770      	bx	lr
	...

080a08d0 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a08d0:	4b08      	ldr	r3, [pc, #32]	; (80a08f4 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh+0x24>)

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a08d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a08d6:	4359      	muls	r1, r3
}

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint32_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80a08d8:	b510      	push	{r4, lr}
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a08da:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80a08de:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 80a08e2:	fbb1 f3f2 	udiv	r3, r1, r2
 80a08e6:	fbb1 f1f4 	udiv	r1, r1, r4
 80a08ea:	fb00 1003 	mla	r0, r0, r3, r1
}
 80a08ee:	fbb0 f0f2 	udiv	r0, r0, r2
 80a08f2:	bd10      	pop	{r4, pc}
 80a08f4:	003a2f00 	.word	0x003a2f00

080a08f8 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a08f8:	b570      	push	{r4, r5, r6, lr}
 80a08fa:	460e      	mov	r6, r1
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a08fc:	2100      	movs	r1, #0
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 80a08fe:	4614      	mov	r4, r2
 80a0900:	4605      	mov	r5, r0
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0902:	f7ff feb1 	bl	80a0668 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0906:	2146      	movs	r1, #70	; 0x46
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80a0908:	8020      	strh	r0, [r4, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a090a:	4628      	mov	r0, r5
 80a090c:	f7ff fdf3 	bl	80a04f6 <_ZN7VL53L0X7readRegEh>
 80a0910:	3001      	adds	r0, #1
 80a0912:	b280      	uxth	r0, r0
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a0914:	7821      	ldrb	r1, [r4, #0]
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80a0916:	80a0      	strh	r0, [r4, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80a0918:	f7ff ffda 	bl	80a08d0 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a091c:	2151      	movs	r1, #81	; 0x51
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a091e:	60e0      	str	r0, [r4, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0920:	4628      	mov	r0, r5
 80a0922:	f7ff fe08 	bl	80a0536 <_ZN7VL53L0X12readReg16BitEh>
 80a0926:	f7ff ffb1 	bl	80a088c <_ZN7VL53L0X13decodeTimeoutEm>
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a092a:	7821      	ldrb	r1, [r4, #0]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a092c:	80e0      	strh	r0, [r4, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80a092e:	f7ff ffcf 	bl	80a08d0 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a0932:	2170      	movs	r1, #112	; 0x70

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
 80a0934:	6120      	str	r0, [r4, #16]
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 80a0936:	4628      	mov	r0, r5
 80a0938:	f7ff fddd 	bl	80a04f6 <_ZN7VL53L0X7readRegEh>
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 80a093c:	3001      	adds	r0, #1
 80a093e:	0040      	lsls	r0, r0, #1
 80a0940:	b2c0      	uxtb	r0, r0
 80a0942:	8060      	strh	r0, [r4, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80a0944:	2171      	movs	r1, #113	; 0x71
 80a0946:	4628      	mov	r0, r5
 80a0948:	f7ff fdf5 	bl	80a0536 <_ZN7VL53L0X12readReg16BitEh>
 80a094c:	f7ff ff9e 	bl	80a088c <_ZN7VL53L0X13decodeTimeoutEm>
 80a0950:	8120      	strh	r0, [r4, #8]

  if (enables->pre_range)
 80a0952:	78f3      	ldrb	r3, [r6, #3]
 80a0954:	b113      	cbz	r3, 80a095c <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE+0x64>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 80a0956:	88e3      	ldrh	r3, [r4, #6]
 80a0958:	1ac0      	subs	r0, r0, r3
 80a095a:	8120      	strh	r0, [r4, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 80a095c:	78a1      	ldrb	r1, [r4, #2]
 80a095e:	8920      	ldrh	r0, [r4, #8]
 80a0960:	f7ff ffb6 	bl	80a08d0 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEmh>
                               timeouts->final_range_vcsel_period_pclks);
 80a0964:	6160      	str	r0, [r4, #20]
 80a0966:	bd70      	pop	{r4, r5, r6, pc}

080a0968 <_ZN7VL53L0X26getMeasurementTimingBudgetEv>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t VL53L0X::getMeasurementTimingBudget(void)
{
 80a0968:	b510      	push	{r4, lr}
 80a096a:	4604      	mov	r4, r0
 80a096c:	b088      	sub	sp, #32
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a096e:	4669      	mov	r1, sp
 80a0970:	f7ff ff77 	bl	80a0862 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a0974:	aa02      	add	r2, sp, #8
 80a0976:	4669      	mov	r1, sp
 80a0978:	4620      	mov	r0, r4
 80a097a:	f7ff ffbd 	bl	80a08f8 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a097e:	f89d 3000 	ldrb.w	r3, [sp]
 80a0982:	b11b      	cbz	r3, 80a098c <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x24>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a0984:	9805      	ldr	r0, [sp, #20]
 80a0986:	f600 5084 	addw	r0, r0, #3460	; 0xd84
 80a098a:	e001      	b.n	80a0990 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x28>
  uint16_t const DssOverhead        = 690;
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80a098c:	f640 3036 	movw	r0, #2870	; 0xb36
  if (enables.tcc)
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a0990:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a0994:	b12b      	cbz	r3, 80a09a2 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x3a>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a0996:	9b05      	ldr	r3, [sp, #20]
 80a0998:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a099c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a09a0:	e006      	b.n	80a09b0 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  }
  else if (enables.msrc)
 80a09a2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a09a6:	b11b      	cbz	r3, 80a09b0 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x48>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a09a8:	9b05      	ldr	r3, [sp, #20]
 80a09aa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a09ae:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a09b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80a09b4:	b11b      	cbz	r3, 80a09be <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x56>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a09b6:	9b06      	ldr	r3, [sp, #24]
 80a09b8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a09bc:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a09be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a09c2:	b11b      	cbz	r3, 80a09cc <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x64>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80a09c4:	9b07      	ldr	r3, [sp, #28]
 80a09c6:	f203 2326 	addw	r3, r3, #550	; 0x226
 80a09ca:	4418      	add	r0, r3
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 80a09cc:	6160      	str	r0, [r4, #20]
  return budget_us;
}
 80a09ce:	b008      	add	sp, #32
 80a09d0:	bd10      	pop	{r4, pc}
	...

080a09d4 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a09d4:	4b08      	ldr	r3, [pc, #32]	; (80a09f8 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh+0x24>)

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a09d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a09da:	4359      	muls	r1, r3

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a09dc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80a09e0:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80a09e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80a09e8:	fbb1 f1f2 	udiv	r1, r1, r2
 80a09ec:	fb02 3000 	mla	r0, r2, r0, r3
}
 80a09f0:	fbb0 f0f1 	udiv	r0, r0, r1
 80a09f4:	4770      	bx	lr
 80a09f6:	bf00      	nop
 80a09f8:	003a2f00 	.word	0x003a2f00

080a09fc <_ZN7VL53L0X26setMeasurementTimingBudgetEm>:
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a09fc:	f644 631f 	movw	r3, #19999	; 0x4e1f
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a0a00:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0a02:	4299      	cmp	r1, r3
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 80a0a04:	b089      	sub	sp, #36	; 0x24
 80a0a06:	4606      	mov	r6, r0
 80a0a08:	460d      	mov	r5, r1
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0a0a:	d942      	bls.n	80a0a92 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>

  uint32_t used_budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
 80a0a0c:	4669      	mov	r1, sp
 80a0a0e:	f7ff ff28 	bl	80a0862 <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
 80a0a12:	aa02      	add	r2, sp, #8
 80a0a14:	4669      	mov	r1, sp
 80a0a16:	4630      	mov	r0, r6
 80a0a18:	f7ff ff6e 	bl	80a08f8 <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
 80a0a1c:	f89d 3000 	ldrb.w	r3, [sp]
 80a0a20:	b11b      	cbz	r3, 80a0a2a <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x2e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80a0a22:	9805      	ldr	r0, [sp, #20]
 80a0a24:	f600 3036 	addw	r0, r0, #2870	; 0xb36
 80a0a28:	e001      	b.n	80a0a2e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x32>

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80a0a2a:	f640 00e8 	movw	r0, #2280	; 0x8e8
  if (enables.tcc)
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
 80a0a2e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a0a32:	b12b      	cbz	r3, 80a0a40 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x44>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80a0a34:	9b05      	ldr	r3, [sp, #20]
 80a0a36:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80a0a3a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a0a3e:	e006      	b.n	80a0a4e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  }
  else if (enables.msrc)
 80a0a40:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80a0a44:	b11b      	cbz	r3, 80a0a4e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x52>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80a0a46:	9b05      	ldr	r3, [sp, #20]
 80a0a48:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0a4c:	4418      	add	r0, r3
  }

  if (enables.pre_range)
 80a0a4e:	f89d 7003 	ldrb.w	r7, [sp, #3]
 80a0a52:	b11f      	cbz	r7, 80a0a5c <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x60>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80a0a54:	9b06      	ldr	r3, [sp, #24]
 80a0a56:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80a0a5a:	4418      	add	r0, r3
  }

  if (enables.final_range)
 80a0a5c:	f89d 4004 	ldrb.w	r4, [sp, #4]
 80a0a60:	b1ac      	cbz	r4, 80a0a8e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x92>
  {
    used_budget_us += FinalRangeOverhead;
 80a0a62:	f200 2026 	addw	r0, r0, #550	; 0x226
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80a0a66:	4285      	cmp	r5, r0
 80a0a68:	d313      	bcc.n	80a0a92 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x96>
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint32_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80a0a6a:	f89d 100a 	ldrb.w	r1, [sp, #10]
 80a0a6e:	1a28      	subs	r0, r5, r0
 80a0a70:	f7ff ffb0 	bl	80a09d4 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>

    if (enables.pre_range)
 80a0a74:	b117      	cbz	r7, 80a0a7c <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x80>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80a0a76:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80a0a7a:	4418      	add	r0, r3
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80a0a7c:	f7ff ff12 	bl	80a08a4 <_ZN7VL53L0X13encodeTimeoutEm>
      encodeTimeout(final_range_timeout_mclks));
 80a0a80:	2171      	movs	r1, #113	; 0x71
 80a0a82:	4602      	mov	r2, r0
 80a0a84:	4630      	mov	r0, r6
 80a0a86:	f7ff fcec 	bl	80a0462 <_ZN7VL53L0X13writeReg16BitEht>

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 80a0a8a:	6175      	str	r5, [r6, #20]
 80a0a8c:	e002      	b.n	80a0a94 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  }
  return true;
 80a0a8e:	2401      	movs	r4, #1
 80a0a90:	e000      	b.n	80a0a94 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
 80a0a92:	2400      	movs	r4, #0
    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
  }
  return true;
}
 80a0a94:	4620      	mov	r0, r4
 80a0a96:	b009      	add	sp, #36	; 0x24
 80a0a98:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0a9a <_ZN7VL53L0X27performSingleRefCalibrationEh>:
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a0a9a:	b538      	push	{r3, r4, r5, lr}
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a0a9c:	f041 0201 	orr.w	r2, r1, #1
 80a0aa0:	2100      	movs	r1, #0
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80a0aa2:	4604      	mov	r4, r0
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80a0aa4:	f7ff fcb8 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
 80a0aa8:	f000 fb70 	bl	80a118c <HAL_Timer_Get_Milli_Seconds>

  startTimeout();
 80a0aac:	60e0      	str	r0, [r4, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80a0aae:	2113      	movs	r1, #19
 80a0ab0:	4620      	mov	r0, r4
 80a0ab2:	f7ff fd20 	bl	80a04f6 <_ZN7VL53L0X7readRegEh>
 80a0ab6:	f010 0507 	ands.w	r5, r0, #7
 80a0aba:	d10b      	bne.n	80a0ad4 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x3a>
  {
    if (checkTimeoutExpired()) { return false; }
 80a0abc:	6863      	ldr	r3, [r4, #4]
 80a0abe:	2b00      	cmp	r3, #0
 80a0ac0:	d0f5      	beq.n	80a0aae <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a0ac2:	f000 fb63 	bl	80a118c <HAL_Timer_Get_Milli_Seconds>
 80a0ac6:	68e3      	ldr	r3, [r4, #12]
 80a0ac8:	1ac0      	subs	r0, r0, r3
 80a0aca:	6863      	ldr	r3, [r4, #4]
 80a0acc:	4298      	cmp	r0, r3
 80a0ace:	d9ee      	bls.n	80a0aae <_ZN7VL53L0X27performSingleRefCalibrationEh+0x14>
 80a0ad0:	4628      	mov	r0, r5
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  writeReg(SYSRANGE_START, 0x00);

  return true;
}
 80a0ad2:	bd38      	pop	{r3, r4, r5, pc}
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
  {
    if (checkTimeoutExpired()) { return false; }
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a0ad4:	4620      	mov	r0, r4
 80a0ad6:	2201      	movs	r2, #1
 80a0ad8:	210b      	movs	r1, #11
 80a0ada:	f7ff fc9d 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  writeReg(SYSRANGE_START, 0x00);
 80a0ade:	2200      	movs	r2, #0
 80a0ae0:	4620      	mov	r0, r4
 80a0ae2:	4611      	mov	r1, r2
 80a0ae4:	f7ff fc98 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
 80a0ae8:	2001      	movs	r0, #1
 80a0aea:	bd38      	pop	{r3, r4, r5, pc}

080a0aec <_ZN7VL53L0X4initEb>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool VL53L0X::init(bool io_2v8)
{
 80a0aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0aee:	4604      	mov	r4, r0
 80a0af0:	b085      	sub	sp, #20
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 80a0af2:	b149      	cbz	r1, 80a0b08 <_ZN7VL53L0X4initEb+0x1c>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 80a0af4:	2189      	movs	r1, #137	; 0x89
 80a0af6:	f7ff fcfe 	bl	80a04f6 <_ZN7VL53L0X7readRegEh>
 80a0afa:	f040 0201 	orr.w	r2, r0, #1
 80a0afe:	b2d2      	uxtb	r2, r2
 80a0b00:	2189      	movs	r1, #137	; 0x89
 80a0b02:	4620      	mov	r0, r4
 80a0b04:	f7ff fc88 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 80a0b08:	2200      	movs	r2, #0
 80a0b0a:	2188      	movs	r1, #136	; 0x88
 80a0b0c:	4620      	mov	r0, r4
 80a0b0e:	f7ff fc83 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
 80a0b12:	2201      	movs	r2, #1
 80a0b14:	2180      	movs	r1, #128	; 0x80
 80a0b16:	4620      	mov	r0, r4
 80a0b18:	f7ff fc7e 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
 80a0b1c:	2201      	movs	r2, #1
 80a0b1e:	21ff      	movs	r1, #255	; 0xff
 80a0b20:	4620      	mov	r0, r4
 80a0b22:	f7ff fc79 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a0b26:	2200      	movs	r2, #0
 80a0b28:	4611      	mov	r1, r2
 80a0b2a:	4620      	mov	r0, r4
 80a0b2c:	f7ff fc74 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  stop_variable = readReg(0x91);
 80a0b30:	2191      	movs	r1, #145	; 0x91
 80a0b32:	4620      	mov	r0, r4
 80a0b34:	f7ff fcdf 	bl	80a04f6 <_ZN7VL53L0X7readRegEh>
  writeReg(0x00, 0x01);
 80a0b38:	2201      	movs	r2, #1
  writeReg(0x88, 0x00);

  writeReg(0x80, 0x01);
  writeReg(0xFF, 0x01);
  writeReg(0x00, 0x00);
  stop_variable = readReg(0x91);
 80a0b3a:	7420      	strb	r0, [r4, #16]
  writeReg(0x00, 0x01);
 80a0b3c:	2100      	movs	r1, #0
 80a0b3e:	4620      	mov	r0, r4
 80a0b40:	f7ff fc6a 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a0b44:	2200      	movs	r2, #0
 80a0b46:	21ff      	movs	r1, #255	; 0xff
 80a0b48:	4620      	mov	r0, r4
 80a0b4a:	f7ff fc65 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a0b4e:	2200      	movs	r2, #0
 80a0b50:	2180      	movs	r1, #128	; 0x80
 80a0b52:	4620      	mov	r0, r4
 80a0b54:	f7ff fc60 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80a0b58:	2160      	movs	r1, #96	; 0x60
 80a0b5a:	4620      	mov	r0, r4
 80a0b5c:	f7ff fccb 	bl	80a04f6 <_ZN7VL53L0X7readRegEh>
 80a0b60:	f040 0212 	orr.w	r2, r0, #18
 80a0b64:	b2d2      	uxtb	r2, r2
 80a0b66:	2160      	movs	r1, #96	; 0x60
 80a0b68:	4620      	mov	r0, r4
 80a0b6a:	f7ff fc55 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80a0b6e:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a0b72:	4620      	mov	r0, r4
 80a0b74:	f7ff fd50 	bl	80a0618 <_ZN7VL53L0X18setSignalRateLimitEf>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80a0b78:	22ff      	movs	r2, #255	; 0xff
 80a0b7a:	2101      	movs	r1, #1
 80a0b7c:	4620      	mov	r0, r4
 80a0b7e:	f7ff fc4b 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80a0b82:	f10d 0207 	add.w	r2, sp, #7
 80a0b86:	f10d 0106 	add.w	r1, sp, #6
 80a0b8a:	4620      	mov	r0, r4
 80a0b8c:	f7ff fde1 	bl	80a0752 <_ZN7VL53L0X11getSpadInfoEPhPb>
 80a0b90:	b908      	cbnz	r0, 80a0b96 <_ZN7VL53L0X4initEb+0xaa>
 80a0b92:	2500      	movs	r5, #0
 80a0b94:	e21d      	b.n	80a0fd2 <_ZN7VL53L0X4initEb+0x4e6>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a0b96:	2306      	movs	r3, #6
 80a0b98:	aa02      	add	r2, sp, #8
 80a0b9a:	21b0      	movs	r1, #176	; 0xb0
 80a0b9c:	4620      	mov	r0, r4
 80a0b9e:	f7ff fd13 	bl	80a05c8 <_ZN7VL53L0X9readMultiEhPhh>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 80a0ba2:	2201      	movs	r2, #1
 80a0ba4:	21ff      	movs	r1, #255	; 0xff
 80a0ba6:	4620      	mov	r0, r4
 80a0ba8:	f7ff fc36 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80a0bac:	2200      	movs	r2, #0
 80a0bae:	214f      	movs	r1, #79	; 0x4f
 80a0bb0:	4620      	mov	r0, r4
 80a0bb2:	f7ff fc31 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80a0bb6:	222c      	movs	r2, #44	; 0x2c
 80a0bb8:	214e      	movs	r1, #78	; 0x4e
 80a0bba:	4620      	mov	r0, r4
 80a0bbc:	f7ff fc2c 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a0bc0:	2200      	movs	r2, #0
 80a0bc2:	21ff      	movs	r1, #255	; 0xff
 80a0bc4:	4620      	mov	r0, r4
 80a0bc6:	f7ff fc27 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0bca:	2500      	movs	r5, #0

  writeReg(0xFF, 0x01);
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80a0bcc:	4620      	mov	r0, r4
 80a0bce:	21b6      	movs	r1, #182	; 0xb6
 80a0bd0:	22b4      	movs	r2, #180	; 0xb4
 80a0bd2:	f7ff fc21 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;
 80a0bd6:	4629      	mov	r1, r5
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a0bd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0bdc:	f89d 6006 	ldrb.w	r6, [sp, #6]
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80a0be0:	2b00      	cmp	r3, #0
 80a0be2:	bf14      	ite	ne
 80a0be4:	200c      	movne	r0, #12
 80a0be6:	2000      	moveq	r0, #0
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a0be8:	2701      	movs	r7, #1
 80a0bea:	b2eb      	uxtb	r3, r5
 80a0bec:	08da      	lsrs	r2, r3, #3
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0bee:	4298      	cmp	r0, r3
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a0bf0:	f10d 0e10 	add.w	lr, sp, #16
 80a0bf4:	f003 0307 	and.w	r3, r3, #7
 80a0bf8:	4472      	add	r2, lr
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 80a0bfa:	d801      	bhi.n	80a0c00 <_ZN7VL53L0X4initEb+0x114>
 80a0bfc:	428e      	cmp	r6, r1
 80a0bfe:	d108      	bne.n	80a0c12 <_ZN7VL53L0X4initEb+0x126>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80a0c00:	f812 ec08 	ldrb.w	lr, [r2, #-8]
 80a0c04:	fa07 f303 	lsl.w	r3, r7, r3
 80a0c08:	ea2e 0303 	bic.w	r3, lr, r3
 80a0c0c:	f802 3c08 	strb.w	r3, [r2, #-8]
 80a0c10:	e007      	b.n	80a0c22 <_ZN7VL53L0X4initEb+0x136>
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 80a0c12:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80a0c16:	fa42 f303 	asr.w	r3, r2, r3
 80a0c1a:	07db      	lsls	r3, r3, #31
    {
      spads_enabled++;
 80a0c1c:	bf44      	itt	mi
 80a0c1e:	3101      	addmi	r1, #1
 80a0c20:	b2c9      	uxtbmi	r1, r1
 80a0c22:	3501      	adds	r5, #1
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
 80a0c24:	2d30      	cmp	r5, #48	; 0x30
 80a0c26:	d1e0      	bne.n	80a0bea <_ZN7VL53L0X4initEb+0xfe>
    {
      spads_enabled++;
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80a0c28:	2306      	movs	r3, #6
 80a0c2a:	aa02      	add	r2, sp, #8
 80a0c2c:	21b0      	movs	r1, #176	; 0xb0
 80a0c2e:	4620      	mov	r0, r4
 80a0c30:	f7ff fca9 	bl	80a0586 <_ZN7VL53L0X10writeMultiEhPKhh>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 80a0c34:	2201      	movs	r2, #1
 80a0c36:	21ff      	movs	r1, #255	; 0xff
 80a0c38:	4620      	mov	r0, r4
 80a0c3a:	f7ff fbed 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
 80a0c3e:	2200      	movs	r2, #0
 80a0c40:	4611      	mov	r1, r2
 80a0c42:	4620      	mov	r0, r4
 80a0c44:	f7ff fbe8 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0c48:	2200      	movs	r2, #0
 80a0c4a:	21ff      	movs	r1, #255	; 0xff
 80a0c4c:	4620      	mov	r0, r4
 80a0c4e:	f7ff fbe3 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x09, 0x00);
 80a0c52:	2200      	movs	r2, #0
 80a0c54:	2109      	movs	r1, #9
 80a0c56:	4620      	mov	r0, r4
 80a0c58:	f7ff fbde 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x10, 0x00);
 80a0c5c:	2200      	movs	r2, #0
 80a0c5e:	2110      	movs	r1, #16
 80a0c60:	4620      	mov	r0, r4
 80a0c62:	f7ff fbd9 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x11, 0x00);
 80a0c66:	2200      	movs	r2, #0
 80a0c68:	2111      	movs	r1, #17
 80a0c6a:	4620      	mov	r0, r4
 80a0c6c:	f7ff fbd4 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x24, 0x01);
 80a0c70:	2201      	movs	r2, #1
 80a0c72:	2124      	movs	r1, #36	; 0x24
 80a0c74:	4620      	mov	r0, r4
 80a0c76:	f7ff fbcf 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x25, 0xFF);
 80a0c7a:	22ff      	movs	r2, #255	; 0xff
 80a0c7c:	2125      	movs	r1, #37	; 0x25
 80a0c7e:	4620      	mov	r0, r4
 80a0c80:	f7ff fbca 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x75, 0x00);
 80a0c84:	2200      	movs	r2, #0
 80a0c86:	2175      	movs	r1, #117	; 0x75
 80a0c88:	4620      	mov	r0, r4
 80a0c8a:	f7ff fbc5 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a0c8e:	2201      	movs	r2, #1
 80a0c90:	21ff      	movs	r1, #255	; 0xff
 80a0c92:	4620      	mov	r0, r4
 80a0c94:	f7ff fbc0 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4E, 0x2C);
 80a0c98:	222c      	movs	r2, #44	; 0x2c
 80a0c9a:	214e      	movs	r1, #78	; 0x4e
 80a0c9c:	4620      	mov	r0, r4
 80a0c9e:	f7ff fbbb 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x00);
 80a0ca2:	2200      	movs	r2, #0
 80a0ca4:	2148      	movs	r1, #72	; 0x48
 80a0ca6:	4620      	mov	r0, r4
 80a0ca8:	f7ff fbb6 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x20);
 80a0cac:	2220      	movs	r2, #32
 80a0cae:	4629      	mov	r1, r5
 80a0cb0:	4620      	mov	r0, r4
 80a0cb2:	f7ff fbb1 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0cb6:	2200      	movs	r2, #0
 80a0cb8:	21ff      	movs	r1, #255	; 0xff
 80a0cba:	4620      	mov	r0, r4
 80a0cbc:	f7ff fbac 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x09);
 80a0cc0:	2209      	movs	r2, #9
 80a0cc2:	4629      	mov	r1, r5
 80a0cc4:	4620      	mov	r0, r4
 80a0cc6:	f7ff fba7 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x54, 0x00);
 80a0cca:	2200      	movs	r2, #0
 80a0ccc:	2154      	movs	r1, #84	; 0x54
 80a0cce:	4620      	mov	r0, r4
 80a0cd0:	f7ff fba2 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a0cd4:	2204      	movs	r2, #4
 80a0cd6:	2131      	movs	r1, #49	; 0x31
 80a0cd8:	4620      	mov	r0, r4
 80a0cda:	f7ff fb9d 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x32, 0x03);
 80a0cde:	2203      	movs	r2, #3
 80a0ce0:	2132      	movs	r1, #50	; 0x32
 80a0ce2:	4620      	mov	r0, r4
 80a0ce4:	f7ff fb98 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x83);
 80a0ce8:	2283      	movs	r2, #131	; 0x83
 80a0cea:	2140      	movs	r1, #64	; 0x40
 80a0cec:	4620      	mov	r0, r4
 80a0cee:	f7ff fb93 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x25);
 80a0cf2:	2225      	movs	r2, #37	; 0x25
 80a0cf4:	2146      	movs	r1, #70	; 0x46
 80a0cf6:	4620      	mov	r0, r4
 80a0cf8:	f7ff fb8e 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x60, 0x00);
 80a0cfc:	2200      	movs	r2, #0
 80a0cfe:	2160      	movs	r1, #96	; 0x60
 80a0d00:	4620      	mov	r0, r4
 80a0d02:	f7ff fb89 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x27, 0x00);
 80a0d06:	2200      	movs	r2, #0
 80a0d08:	2127      	movs	r1, #39	; 0x27
 80a0d0a:	4620      	mov	r0, r4
 80a0d0c:	f7ff fb84 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x50, 0x06);
 80a0d10:	2206      	movs	r2, #6
 80a0d12:	2150      	movs	r1, #80	; 0x50
 80a0d14:	4620      	mov	r0, r4
 80a0d16:	f7ff fb7f 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x51, 0x00);
 80a0d1a:	2200      	movs	r2, #0
 80a0d1c:	2151      	movs	r1, #81	; 0x51
 80a0d1e:	4620      	mov	r0, r4
 80a0d20:	f7ff fb7a 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x52, 0x96);
 80a0d24:	2296      	movs	r2, #150	; 0x96
 80a0d26:	2152      	movs	r1, #82	; 0x52
 80a0d28:	4620      	mov	r0, r4
 80a0d2a:	f7ff fb75 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x56, 0x08);
 80a0d2e:	2208      	movs	r2, #8
 80a0d30:	2156      	movs	r1, #86	; 0x56
 80a0d32:	4620      	mov	r0, r4
 80a0d34:	f7ff fb70 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x57, 0x30);
 80a0d38:	462a      	mov	r2, r5
 80a0d3a:	2157      	movs	r1, #87	; 0x57
 80a0d3c:	4620      	mov	r0, r4
 80a0d3e:	f7ff fb6b 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x61, 0x00);
 80a0d42:	2200      	movs	r2, #0
 80a0d44:	2161      	movs	r1, #97	; 0x61
 80a0d46:	4620      	mov	r0, r4
 80a0d48:	f7ff fb66 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x62, 0x00);
 80a0d4c:	2200      	movs	r2, #0
 80a0d4e:	2162      	movs	r1, #98	; 0x62
 80a0d50:	4620      	mov	r0, r4
 80a0d52:	f7ff fb61 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x64, 0x00);
 80a0d56:	2200      	movs	r2, #0
 80a0d58:	2164      	movs	r1, #100	; 0x64
 80a0d5a:	4620      	mov	r0, r4
 80a0d5c:	f7ff fb5c 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x65, 0x00);
 80a0d60:	2200      	movs	r2, #0
 80a0d62:	2165      	movs	r1, #101	; 0x65
 80a0d64:	4620      	mov	r0, r4
 80a0d66:	f7ff fb57 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x66, 0xA0);
 80a0d6a:	22a0      	movs	r2, #160	; 0xa0
 80a0d6c:	2166      	movs	r1, #102	; 0x66
 80a0d6e:	4620      	mov	r0, r4
 80a0d70:	f7ff fb52 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a0d74:	2201      	movs	r2, #1
 80a0d76:	21ff      	movs	r1, #255	; 0xff
 80a0d78:	4620      	mov	r0, r4
 80a0d7a:	f7ff fb4d 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x22, 0x32);
 80a0d7e:	2232      	movs	r2, #50	; 0x32
 80a0d80:	2122      	movs	r1, #34	; 0x22
 80a0d82:	4620      	mov	r0, r4
 80a0d84:	f7ff fb48 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x14);
 80a0d88:	2214      	movs	r2, #20
 80a0d8a:	2147      	movs	r1, #71	; 0x47
 80a0d8c:	4620      	mov	r0, r4
 80a0d8e:	f7ff fb43 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x49, 0xFF);
 80a0d92:	22ff      	movs	r2, #255	; 0xff
 80a0d94:	2149      	movs	r1, #73	; 0x49
 80a0d96:	4620      	mov	r0, r4
 80a0d98:	f7ff fb3e 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4A, 0x00);
 80a0d9c:	2200      	movs	r2, #0
 80a0d9e:	214a      	movs	r1, #74	; 0x4a
 80a0da0:	4620      	mov	r0, r4
 80a0da2:	f7ff fb39 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0da6:	2200      	movs	r2, #0
 80a0da8:	21ff      	movs	r1, #255	; 0xff
 80a0daa:	4620      	mov	r0, r4
 80a0dac:	f7ff fb34 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7A, 0x0A);
 80a0db0:	220a      	movs	r2, #10
 80a0db2:	217a      	movs	r1, #122	; 0x7a
 80a0db4:	4620      	mov	r0, r4
 80a0db6:	f7ff fb2f 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7B, 0x00);
 80a0dba:	2200      	movs	r2, #0
 80a0dbc:	217b      	movs	r1, #123	; 0x7b
 80a0dbe:	4620      	mov	r0, r4
 80a0dc0:	f7ff fb2a 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x78, 0x21);
 80a0dc4:	2221      	movs	r2, #33	; 0x21
 80a0dc6:	2178      	movs	r1, #120	; 0x78
 80a0dc8:	4620      	mov	r0, r4
 80a0dca:	f7ff fb25 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a0dce:	2201      	movs	r2, #1
 80a0dd0:	21ff      	movs	r1, #255	; 0xff
 80a0dd2:	4620      	mov	r0, r4
 80a0dd4:	f7ff fb20 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x23, 0x34);
 80a0dd8:	2234      	movs	r2, #52	; 0x34
 80a0dda:	2123      	movs	r1, #35	; 0x23
 80a0ddc:	4620      	mov	r0, r4
 80a0dde:	f7ff fb1b 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x42, 0x00);
 80a0de2:	2200      	movs	r2, #0
 80a0de4:	2142      	movs	r1, #66	; 0x42
 80a0de6:	4620      	mov	r0, r4
 80a0de8:	f7ff fb16 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0xFF);
 80a0dec:	22ff      	movs	r2, #255	; 0xff
 80a0dee:	2144      	movs	r1, #68	; 0x44
 80a0df0:	4620      	mov	r0, r4
 80a0df2:	f7ff fb11 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x26);
 80a0df6:	2226      	movs	r2, #38	; 0x26
 80a0df8:	2145      	movs	r1, #69	; 0x45
 80a0dfa:	4620      	mov	r0, r4
 80a0dfc:	f7ff fb0c 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x05);
 80a0e00:	2205      	movs	r2, #5
 80a0e02:	2146      	movs	r1, #70	; 0x46
 80a0e04:	4620      	mov	r0, r4
 80a0e06:	f7ff fb07 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x40);
 80a0e0a:	2240      	movs	r2, #64	; 0x40
 80a0e0c:	4611      	mov	r1, r2
 80a0e0e:	4620      	mov	r0, r4
 80a0e10:	f7ff fb02 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0E, 0x06);
 80a0e14:	2206      	movs	r2, #6
 80a0e16:	210e      	movs	r1, #14
 80a0e18:	4620      	mov	r0, r4
 80a0e1a:	f7ff fafd 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x20, 0x1A);
 80a0e1e:	221a      	movs	r2, #26
 80a0e20:	2120      	movs	r1, #32
 80a0e22:	4620      	mov	r0, r4
 80a0e24:	f7ff faf8 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x43, 0x40);
 80a0e28:	2240      	movs	r2, #64	; 0x40
 80a0e2a:	2143      	movs	r1, #67	; 0x43
 80a0e2c:	4620      	mov	r0, r4
 80a0e2e:	f7ff faf3 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0e32:	2200      	movs	r2, #0
 80a0e34:	21ff      	movs	r1, #255	; 0xff
 80a0e36:	4620      	mov	r0, r4
 80a0e38:	f7ff faee 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x34, 0x03);
 80a0e3c:	2203      	movs	r2, #3
 80a0e3e:	2134      	movs	r1, #52	; 0x34
 80a0e40:	4620      	mov	r0, r4
 80a0e42:	f7ff fae9 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x35, 0x44);
 80a0e46:	2244      	movs	r2, #68	; 0x44
 80a0e48:	2135      	movs	r1, #53	; 0x35
 80a0e4a:	4620      	mov	r0, r4
 80a0e4c:	f7ff fae4 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a0e50:	2201      	movs	r2, #1
 80a0e52:	21ff      	movs	r1, #255	; 0xff
 80a0e54:	4620      	mov	r0, r4
 80a0e56:	f7ff fadf 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
 80a0e5a:	2204      	movs	r2, #4
 80a0e5c:	2131      	movs	r1, #49	; 0x31
 80a0e5e:	4620      	mov	r0, r4
 80a0e60:	f7ff fada 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4B, 0x09);
 80a0e64:	2209      	movs	r2, #9
 80a0e66:	214b      	movs	r1, #75	; 0x4b
 80a0e68:	4620      	mov	r0, r4
 80a0e6a:	f7ff fad5 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4C, 0x05);
 80a0e6e:	2205      	movs	r2, #5
 80a0e70:	214c      	movs	r1, #76	; 0x4c
 80a0e72:	4620      	mov	r0, r4
 80a0e74:	f7ff fad0 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4D, 0x04);
 80a0e78:	2204      	movs	r2, #4
 80a0e7a:	214d      	movs	r1, #77	; 0x4d
 80a0e7c:	4620      	mov	r0, r4
 80a0e7e:	f7ff facb 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0e82:	2200      	movs	r2, #0
 80a0e84:	21ff      	movs	r1, #255	; 0xff
 80a0e86:	4620      	mov	r0, r4
 80a0e88:	f7ff fac6 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0x00);
 80a0e8c:	2200      	movs	r2, #0
 80a0e8e:	2144      	movs	r1, #68	; 0x44
 80a0e90:	4620      	mov	r0, r4
 80a0e92:	f7ff fac1 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x20);
 80a0e96:	2220      	movs	r2, #32
 80a0e98:	2145      	movs	r1, #69	; 0x45
 80a0e9a:	4620      	mov	r0, r4
 80a0e9c:	f7ff fabc 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x08);
 80a0ea0:	2208      	movs	r2, #8
 80a0ea2:	2147      	movs	r1, #71	; 0x47
 80a0ea4:	4620      	mov	r0, r4
 80a0ea6:	f7ff fab7 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x28);
 80a0eaa:	2228      	movs	r2, #40	; 0x28
 80a0eac:	2148      	movs	r1, #72	; 0x48
 80a0eae:	4620      	mov	r0, r4
 80a0eb0:	f7ff fab2 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x67, 0x00);
 80a0eb4:	2200      	movs	r2, #0
 80a0eb6:	2167      	movs	r1, #103	; 0x67
 80a0eb8:	4620      	mov	r0, r4
 80a0eba:	f7ff faad 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x70, 0x04);
 80a0ebe:	2204      	movs	r2, #4
 80a0ec0:	2170      	movs	r1, #112	; 0x70
 80a0ec2:	4620      	mov	r0, r4
 80a0ec4:	f7ff faa8 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x71, 0x01);
 80a0ec8:	2201      	movs	r2, #1
 80a0eca:	2171      	movs	r1, #113	; 0x71
 80a0ecc:	4620      	mov	r0, r4
 80a0ece:	f7ff faa3 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x72, 0xFE);
 80a0ed2:	22fe      	movs	r2, #254	; 0xfe
 80a0ed4:	2172      	movs	r1, #114	; 0x72
 80a0ed6:	4620      	mov	r0, r4
 80a0ed8:	f7ff fa9e 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x76, 0x00);
 80a0edc:	2200      	movs	r2, #0
 80a0ede:	2176      	movs	r1, #118	; 0x76
 80a0ee0:	4620      	mov	r0, r4
 80a0ee2:	f7ff fa99 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x77, 0x00);
 80a0ee6:	2200      	movs	r2, #0
 80a0ee8:	2177      	movs	r1, #119	; 0x77
 80a0eea:	4620      	mov	r0, r4
 80a0eec:	f7ff fa94 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a0ef0:	2201      	movs	r2, #1
 80a0ef2:	21ff      	movs	r1, #255	; 0xff
 80a0ef4:	4620      	mov	r0, r4
 80a0ef6:	f7ff fa8f 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0D, 0x01);
 80a0efa:	2201      	movs	r2, #1
 80a0efc:	210d      	movs	r1, #13
 80a0efe:	4620      	mov	r0, r4
 80a0f00:	f7ff fa8a 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
 80a0f04:	2200      	movs	r2, #0
 80a0f06:	21ff      	movs	r1, #255	; 0xff
 80a0f08:	4620      	mov	r0, r4
 80a0f0a:	f7ff fa85 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x01);
 80a0f0e:	2201      	movs	r2, #1
 80a0f10:	2180      	movs	r1, #128	; 0x80
 80a0f12:	4620      	mov	r0, r4
 80a0f14:	f7ff fa80 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x01, 0xF8);
 80a0f18:	22f8      	movs	r2, #248	; 0xf8
 80a0f1a:	2101      	movs	r1, #1
 80a0f1c:	4620      	mov	r0, r4
 80a0f1e:	f7ff fa7b 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
 80a0f22:	2201      	movs	r2, #1
 80a0f24:	21ff      	movs	r1, #255	; 0xff
 80a0f26:	4620      	mov	r0, r4
 80a0f28:	f7ff fa76 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x8E, 0x01);
 80a0f2c:	2201      	movs	r2, #1
 80a0f2e:	218e      	movs	r1, #142	; 0x8e
 80a0f30:	4620      	mov	r0, r4
 80a0f32:	f7ff fa71 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
 80a0f36:	2201      	movs	r2, #1
 80a0f38:	2100      	movs	r1, #0
 80a0f3a:	4620      	mov	r0, r4
 80a0f3c:	f7ff fa6c 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
 80a0f40:	2200      	movs	r2, #0
 80a0f42:	21ff      	movs	r1, #255	; 0xff
 80a0f44:	4620      	mov	r0, r4
 80a0f46:	f7ff fa67 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
 80a0f4a:	2200      	movs	r2, #0
 80a0f4c:	2180      	movs	r1, #128	; 0x80
 80a0f4e:	4620      	mov	r0, r4
 80a0f50:	f7ff fa62 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80a0f54:	2204      	movs	r2, #4
 80a0f56:	210a      	movs	r1, #10
 80a0f58:	4620      	mov	r0, r4
 80a0f5a:	f7ff fa5d 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80a0f5e:	2184      	movs	r1, #132	; 0x84
 80a0f60:	4620      	mov	r0, r4
 80a0f62:	f7ff fac8 	bl	80a04f6 <_ZN7VL53L0X7readRegEh>
 80a0f66:	2184      	movs	r1, #132	; 0x84
 80a0f68:	f000 02ef 	and.w	r2, r0, #239	; 0xef
 80a0f6c:	4620      	mov	r0, r4
 80a0f6e:	f7ff fa53 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80a0f72:	2201      	movs	r2, #1
 80a0f74:	210b      	movs	r1, #11
 80a0f76:	4620      	mov	r0, r4
 80a0f78:	f7ff fa4e 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a0f7c:	4620      	mov	r0, r4
 80a0f7e:	f7ff fcf3 	bl	80a0968 <_ZN7VL53L0X26getMeasurementTimingBudgetEv>
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a0f82:	22e8      	movs	r2, #232	; 0xe8
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
 80a0f84:	6160      	str	r0, [r4, #20]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a0f86:	2101      	movs	r1, #1
 80a0f88:	4620      	mov	r0, r4
 80a0f8a:	f7ff fa45 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(measurement_timing_budget_us);
 80a0f8e:	6961      	ldr	r1, [r4, #20]
 80a0f90:	4620      	mov	r0, r4
 80a0f92:	f7ff fd33 	bl	80a09fc <_ZN7VL53L0X26setMeasurementTimingBudgetEm>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80a0f96:	2201      	movs	r2, #1
 80a0f98:	4611      	mov	r1, r2
 80a0f9a:	4620      	mov	r0, r4
 80a0f9c:	f7ff fa3c 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x40)) { return false; }
 80a0fa0:	2140      	movs	r1, #64	; 0x40
 80a0fa2:	4620      	mov	r0, r4
 80a0fa4:	f7ff fd79 	bl	80a0a9a <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a0fa8:	2800      	cmp	r0, #0
 80a0faa:	f43f adf2 	beq.w	80a0b92 <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80a0fae:	2202      	movs	r2, #2
 80a0fb0:	2101      	movs	r1, #1
 80a0fb2:	4620      	mov	r0, r4
 80a0fb4:	f7ff fa30 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x00)) { return false; }
 80a0fb8:	2100      	movs	r1, #0
 80a0fba:	4620      	mov	r0, r4
 80a0fbc:	f7ff fd6d 	bl	80a0a9a <_ZN7VL53L0X27performSingleRefCalibrationEh>
 80a0fc0:	4605      	mov	r5, r0
 80a0fc2:	2800      	cmp	r0, #0
 80a0fc4:	f43f ade5 	beq.w	80a0b92 <_ZN7VL53L0X4initEb+0xa6>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80a0fc8:	22e8      	movs	r2, #232	; 0xe8
 80a0fca:	2101      	movs	r1, #1
 80a0fcc:	4620      	mov	r0, r4
 80a0fce:	f7ff fa23 	bl	80a0418 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_PerformRefCalibration() end

  return true;
}
 80a0fd2:	4628      	mov	r0, r5
 80a0fd4:	b005      	add	sp, #20
 80a0fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0fd8 <_GLOBAL__sub_I__ZN7VL53L0XC2Ev>:
 80a0fd8:	f000 b8a0 	b.w	80a111c <HAL_Pin_Map>

080a0fdc <_ZN9LIS3DHI2CD1Ev>:

}

LIS3DHI2C::~LIS3DHI2C() {

}
 80a0fdc:	4770      	bx	lr

080a0fde <_ZN9LIS3DHI2CD0Ev>:

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {

}

LIS3DHI2C::~LIS3DHI2C() {
 80a0fde:	b510      	push	{r4, lr}
 80a0fe0:	4604      	mov	r4, r0

}
 80a0fe2:	f7ff f85a 	bl	80a009a <_ZdlPv>
 80a0fe6:	4620      	mov	r0, r4
 80a0fe8:	bd10      	pop	{r4, pc}

080a0fea <_ZN9LIS3DHI2C9writeDataEhPKhj>:
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a0fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0fec:	4605      	mov	r5, r0
 80a0fee:	461e      	mov	r6, r3
 80a0ff0:	460f      	mov	r7, r1

	wire.beginTransmission(getI2CAddr());
 80a0ff2:	7c01      	ldrb	r1, [r0, #16]
 80a0ff4:	68c0      	ldr	r0, [r0, #12]
 80a0ff6:	f041 0118 	orr.w	r1, r1, #24
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
 80a0ffa:	4614      	mov	r4, r2

	wire.beginTransmission(getI2CAddr());
 80a0ffc:	f000 fd45 	bl	80a1a8a <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a1000:	68e8      	ldr	r0, [r5, #12]

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a1002:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a1004:	6803      	ldr	r3, [r0, #0]
bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {

	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a1006:	bf88      	it	hi
 80a1008:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a100c:	689b      	ldr	r3, [r3, #8]
 80a100e:	4639      	mov	r1, r7
 80a1010:	4798      	blx	r3
 80a1012:	4426      	add	r6, r4
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a1014:	42a6      	cmp	r6, r4
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a1016:	68e8      	ldr	r0, [r5, #12]

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a1018:	d005      	beq.n	80a1026 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x3c>
		wire.write(buf[ii]);
 80a101a:	6803      	ldr	r3, [r0, #0]
 80a101c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1020:	689b      	ldr	r3, [r3, #8]
 80a1022:	4798      	blx	r3

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
	for(size_t ii = 0; ii < numBytes; ii++) {
 80a1024:	e7f6      	b.n	80a1014 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x2a>
		wire.write(buf[ii]);
	}

	uint8_t res = wire.endTransmission();
 80a1026:	f000 fd38 	bl	80a1a9a <_ZN7TwoWire15endTransmissionEv>

	return (res == 0);
}
 80a102a:	fab0 f080 	clz	r0, r0
 80a102e:	0940      	lsrs	r0, r0, #5
 80a1030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1032 <_ZN9LIS3DHI2C8readDataEhPhj>:

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a1032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1034:	4604      	mov	r4, r0
 80a1036:	461e      	mov	r6, r3
 80a1038:	460f      	mov	r7, r1
	wire.beginTransmission(getI2CAddr());
 80a103a:	7c01      	ldrb	r1, [r0, #16]
 80a103c:	68c0      	ldr	r0, [r0, #12]
 80a103e:	f041 0118 	orr.w	r1, r1, #24

LIS3DHI2C::LIS3DHI2C(uint8_t sad0, int intPin) : LIS3DH(intPin), wire(Wire), sad0(sad0) {

}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
 80a1042:	4615      	mov	r5, r2
	wire.beginTransmission(getI2CAddr());
 80a1044:	f000 fd21 	bl	80a1a8a <_ZN7TwoWire17beginTransmissionEh>

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a1048:	68e0      	ldr	r0, [r4, #12]
}

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
 80a104a:	2e01      	cmp	r6, #1
		addr |= I2C_INCREMENT;
	}
	wire.write(addr);
 80a104c:	6803      	ldr	r3, [r0, #0]

bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
	wire.beginTransmission(getI2CAddr());

	if (numBytes > 1) {
		addr |= I2C_INCREMENT;
 80a104e:	bf88      	it	hi
 80a1050:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	}
	wire.write(addr);
 80a1054:	689b      	ldr	r3, [r3, #8]
 80a1056:	4639      	mov	r1, r7
 80a1058:	4798      	blx	r3

	uint8_t res = wire.endTransmission();
 80a105a:	68e0      	ldr	r0, [r4, #12]
 80a105c:	f000 fd1d 	bl	80a1a9a <_ZN7TwoWire15endTransmissionEv>
	if (res != 0) {
 80a1060:	b9a8      	cbnz	r0, 80a108e <_ZN9LIS3DHI2C8readDataEhPhj+0x5c>
		return false;
	}

	wire.requestFrom((int)getI2CAddr(), numBytes);
 80a1062:	7c21      	ldrb	r1, [r4, #16]
 80a1064:	4632      	mov	r2, r6
 80a1066:	f041 0118 	orr.w	r1, r1, #24
 80a106a:	68e0      	ldr	r0, [r4, #12]
 80a106c:	f000 fd08 	bl	80a1a80 <_ZN7TwoWire11requestFromEii>
 80a1070:	442e      	add	r6, r5
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
 80a1072:	42ae      	cmp	r6, r5
 80a1074:	d00d      	beq.n	80a1092 <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
 80a1076:	68e0      	ldr	r0, [r4, #12]
 80a1078:	6803      	ldr	r3, [r0, #0]
 80a107a:	691b      	ldr	r3, [r3, #16]
 80a107c:	4798      	blx	r3
 80a107e:	b140      	cbz	r0, 80a1092 <_ZN9LIS3DHI2C8readDataEhPhj+0x60>
		buf[ii] = wire.read();
 80a1080:	68e0      	ldr	r0, [r4, #12]
 80a1082:	6803      	ldr	r3, [r0, #0]
 80a1084:	695b      	ldr	r3, [r3, #20]
 80a1086:	4798      	blx	r3
 80a1088:	f805 0b01 	strb.w	r0, [r5], #1
 80a108c:	e7f1      	b.n	80a1072 <_ZN9LIS3DHI2C8readDataEhPhj+0x40>
	}
	wire.write(addr);

	uint8_t res = wire.endTransmission();
	if (res != 0) {
		return false;
 80a108e:	2000      	movs	r0, #0
 80a1090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1092:	2001      	movs	r0, #1
	wire.requestFrom((int)getI2CAddr(), numBytes);
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
		buf[ii] = wire.read();
	}
	return true;
}
 80a1094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1096 <_ZN6LIS3DH13readRegister8Eh>:

	return pos;
}


uint8_t LIS3DH::readRegister8(uint8_t addr) {
 80a1096:	b513      	push	{r0, r1, r4, lr}

	uint8_t resp[1];
	readData(addr, resp, sizeof(resp));
 80a1098:	6803      	ldr	r3, [r0, #0]
 80a109a:	aa01      	add	r2, sp, #4
 80a109c:	689c      	ldr	r4, [r3, #8]
 80a109e:	2301      	movs	r3, #1
 80a10a0:	47a0      	blx	r4

	return resp[0];
}
 80a10a2:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80a10a6:	b002      	add	sp, #8
 80a10a8:	bd10      	pop	{r4, pc}

080a10aa <_ZN6LIS3DH9getSampleER12LIS3DHSample>:

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a10aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a10ac:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a10ae:	2107      	movs	r1, #7

	return result;
}


bool LIS3DH::getSample(LIS3DHSample &sample) {
 80a10b0:	4606      	mov	r6, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_AUX);
 80a10b2:	f7ff fff0 	bl	80a1096 <_ZN6LIS3DH13readRegister8Eh>
 80a10b6:	f000 0008 	and.w	r0, r0, #8

	bool hasData = ((statusAuxReg & STATUS_AUX_321DA) != 0);
 80a10ba:	2800      	cmp	r0, #0
 80a10bc:	bf14      	ite	ne
 80a10be:	2501      	movne	r5, #1
 80a10c0:	2500      	moveq	r5, #0

	//Serial.printlnf("fifoSrcReg=0x%02x", fifoSrcReg);

	if (hasData) {
 80a10c2:	d01b      	beq.n	80a10fc <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x52>
		uint8_t resp[6];
		readData(REG_OUT_X_L, resp, sizeof(resp));
 80a10c4:	6833      	ldr	r3, [r6, #0]
 80a10c6:	466a      	mov	r2, sp
 80a10c8:	689f      	ldr	r7, [r3, #8]
 80a10ca:	2128      	movs	r1, #40	; 0x28
 80a10cc:	2306      	movs	r3, #6
 80a10ce:	4630      	mov	r0, r6
 80a10d0:	47b8      	blx	r7

		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
 80a10d2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a10d6:	f89d 3000 	ldrb.w	r3, [sp]
 80a10da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a10de:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
 80a10e0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80a10e4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80a10e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a10ec:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
 80a10ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a10f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a10f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a10fa:	80a3      	strh	r3, [r4, #4]
	}
	return hasData;
}
 80a10fc:	4628      	mov	r0, r5
 80a10fe:	b003      	add	sp, #12
 80a1100:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a1104 <_ZN9LIS3DHI2CC1ER7TwoWirehi>:

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a1104:	b510      	push	{r4, lr}

	return *this;
}


LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
 80a1106:	6043      	str	r3, [r0, #4]

//
//
//

LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
 80a1108:	4b02      	ldr	r3, [pc, #8]	; (80a1114 <_ZN9LIS3DHI2CC1ER7TwoWirehi+0x10>)
 80a110a:	60c1      	str	r1, [r0, #12]
 80a110c:	6003      	str	r3, [r0, #0]
 80a110e:	7402      	strb	r2, [r0, #16]

}
 80a1110:	bd10      	pop	{r4, pc}
 80a1112:	bf00      	nop
 80a1114:	080a27d0 	.word	0x080a27d0

080a1118 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:
 80a1118:	f000 b800 	b.w	80a111c <HAL_Pin_Map>

080a111c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a111c:	b508      	push	{r3, lr}
 80a111e:	4b02      	ldr	r3, [pc, #8]	; (80a1128 <HAL_Pin_Map+0xc>)
 80a1120:	681b      	ldr	r3, [r3, #0]
 80a1122:	681b      	ldr	r3, [r3, #0]
 80a1124:	9301      	str	r3, [sp, #4]
 80a1126:	bd08      	pop	{r3, pc}
 80a1128:	080601b0 	.word	0x080601b0

080a112c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a112c:	b508      	push	{r3, lr}
 80a112e:	4b02      	ldr	r3, [pc, #8]	; (80a1138 <HAL_Pin_Mode+0xc>)
 80a1130:	681b      	ldr	r3, [r3, #0]
 80a1132:	689b      	ldr	r3, [r3, #8]
 80a1134:	9301      	str	r3, [sp, #4]
 80a1136:	bd08      	pop	{r3, pc}
 80a1138:	080601b0 	.word	0x080601b0

080a113c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a113c:	b508      	push	{r3, lr}
 80a113e:	4b02      	ldr	r3, [pc, #8]	; (80a1148 <HAL_Get_Pin_Mode+0xc>)
 80a1140:	681b      	ldr	r3, [r3, #0]
 80a1142:	68db      	ldr	r3, [r3, #12]
 80a1144:	9301      	str	r3, [sp, #4]
 80a1146:	bd08      	pop	{r3, pc}
 80a1148:	080601b0 	.word	0x080601b0

080a114c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a114c:	b508      	push	{r3, lr}
 80a114e:	4b02      	ldr	r3, [pc, #8]	; (80a1158 <HAL_GPIO_Write+0xc>)
 80a1150:	681b      	ldr	r3, [r3, #0]
 80a1152:	691b      	ldr	r3, [r3, #16]
 80a1154:	9301      	str	r3, [sp, #4]
 80a1156:	bd08      	pop	{r3, pc}
 80a1158:	080601b0 	.word	0x080601b0

080a115c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a115c:	b508      	push	{r3, lr}
 80a115e:	4b02      	ldr	r3, [pc, #8]	; (80a1168 <HAL_SPI_Init+0xc>)
 80a1160:	681b      	ldr	r3, [r3, #0]
 80a1162:	69db      	ldr	r3, [r3, #28]
 80a1164:	9301      	str	r3, [sp, #4]
 80a1166:	bd08      	pop	{r3, pc}
 80a1168:	080601b4 	.word	0x080601b4

080a116c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a116c:	b508      	push	{r3, lr}
 80a116e:	4b02      	ldr	r3, [pc, #8]	; (80a1178 <HAL_SPI_Is_Enabled+0xc>)
 80a1170:	681b      	ldr	r3, [r3, #0]
 80a1172:	6a1b      	ldr	r3, [r3, #32]
 80a1174:	9301      	str	r3, [sp, #4]
 80a1176:	bd08      	pop	{r3, pc}
 80a1178:	080601b4 	.word	0x080601b4

080a117c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a117c:	b508      	push	{r3, lr}
 80a117e:	4b02      	ldr	r3, [pc, #8]	; (80a1188 <HAL_RNG_GetRandomNumber+0xc>)
 80a1180:	681b      	ldr	r3, [r3, #0]
 80a1182:	685b      	ldr	r3, [r3, #4]
 80a1184:	9301      	str	r3, [sp, #4]
 80a1186:	bd08      	pop	{r3, pc}
 80a1188:	0806019c 	.word	0x0806019c

080a118c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a118c:	b508      	push	{r3, lr}
 80a118e:	4b02      	ldr	r3, [pc, #8]	; (80a1198 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1190:	681b      	ldr	r3, [r3, #0]
 80a1192:	695b      	ldr	r3, [r3, #20]
 80a1194:	9301      	str	r3, [sp, #4]
 80a1196:	bd08      	pop	{r3, pc}
 80a1198:	0806019c 	.word	0x0806019c

080a119c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a119c:	b508      	push	{r3, lr}
 80a119e:	4b02      	ldr	r3, [pc, #8]	; (80a11a8 <os_mutex_create+0xc>)
 80a11a0:	681b      	ldr	r3, [r3, #0]
 80a11a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a11a4:	9301      	str	r3, [sp, #4]
 80a11a6:	bd08      	pop	{r3, pc}
 80a11a8:	080601d0 	.word	0x080601d0

080a11ac <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a11ac:	b508      	push	{r3, lr}
 80a11ae:	4b02      	ldr	r3, [pc, #8]	; (80a11b8 <HAL_USART_Init+0xc>)
 80a11b0:	681b      	ldr	r3, [r3, #0]
 80a11b2:	699b      	ldr	r3, [r3, #24]
 80a11b4:	9301      	str	r3, [sp, #4]
 80a11b6:	bd08      	pop	{r3, pc}
 80a11b8:	080601c4 	.word	0x080601c4

080a11bc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a11bc:	b508      	push	{r3, lr}
 80a11be:	4b02      	ldr	r3, [pc, #8]	; (80a11c8 <HAL_USART_Write_Data+0xc>)
 80a11c0:	681b      	ldr	r3, [r3, #0]
 80a11c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a11c4:	9301      	str	r3, [sp, #4]
 80a11c6:	bd08      	pop	{r3, pc}
 80a11c8:	080601c4 	.word	0x080601c4

080a11cc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a11cc:	b508      	push	{r3, lr}
 80a11ce:	4b02      	ldr	r3, [pc, #8]	; (80a11d8 <HAL_USART_Available_Data+0xc>)
 80a11d0:	681b      	ldr	r3, [r3, #0]
 80a11d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a11d4:	9301      	str	r3, [sp, #4]
 80a11d6:	bd08      	pop	{r3, pc}
 80a11d8:	080601c4 	.word	0x080601c4

080a11dc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a11dc:	b508      	push	{r3, lr}
 80a11de:	4b02      	ldr	r3, [pc, #8]	; (80a11e8 <HAL_USART_Read_Data+0xc>)
 80a11e0:	681b      	ldr	r3, [r3, #0]
 80a11e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a11e4:	9301      	str	r3, [sp, #4]
 80a11e6:	bd08      	pop	{r3, pc}
 80a11e8:	080601c4 	.word	0x080601c4

080a11ec <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a11ec:	b508      	push	{r3, lr}
 80a11ee:	4b02      	ldr	r3, [pc, #8]	; (80a11f8 <HAL_USART_Peek_Data+0xc>)
 80a11f0:	681b      	ldr	r3, [r3, #0]
 80a11f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a11f4:	9301      	str	r3, [sp, #4]
 80a11f6:	bd08      	pop	{r3, pc}
 80a11f8:	080601c4 	.word	0x080601c4

080a11fc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a11fc:	b508      	push	{r3, lr}
 80a11fe:	4b02      	ldr	r3, [pc, #8]	; (80a1208 <HAL_USART_Flush_Data+0xc>)
 80a1200:	681b      	ldr	r3, [r3, #0]
 80a1202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1204:	9301      	str	r3, [sp, #4]
 80a1206:	bd08      	pop	{r3, pc}
 80a1208:	080601c4 	.word	0x080601c4

080a120c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a120c:	b508      	push	{r3, lr}
 80a120e:	4b02      	ldr	r3, [pc, #8]	; (80a1218 <HAL_USART_Is_Enabled+0xc>)
 80a1210:	681b      	ldr	r3, [r3, #0]
 80a1212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1214:	9301      	str	r3, [sp, #4]
 80a1216:	bd08      	pop	{r3, pc}
 80a1218:	080601c4 	.word	0x080601c4

080a121c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a121c:	b508      	push	{r3, lr}
 80a121e:	4b02      	ldr	r3, [pc, #8]	; (80a1228 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1220:	681b      	ldr	r3, [r3, #0]
 80a1222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1224:	9301      	str	r3, [sp, #4]
 80a1226:	bd08      	pop	{r3, pc}
 80a1228:	080601c4 	.word	0x080601c4

080a122c <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a122c:	b508      	push	{r3, lr}
 80a122e:	4b02      	ldr	r3, [pc, #8]	; (80a1238 <HAL_I2C_Set_Speed+0xc>)
 80a1230:	681b      	ldr	r3, [r3, #0]
 80a1232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1234:	9301      	str	r3, [sp, #4]
 80a1236:	bd08      	pop	{r3, pc}
 80a1238:	080601ac 	.word	0x080601ac

080a123c <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a123c:	b508      	push	{r3, lr}
 80a123e:	4b02      	ldr	r3, [pc, #8]	; (80a1248 <HAL_I2C_Begin+0xc>)
 80a1240:	681b      	ldr	r3, [r3, #0]
 80a1242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1244:	9301      	str	r3, [sp, #4]
 80a1246:	bd08      	pop	{r3, pc}
 80a1248:	080601ac 	.word	0x080601ac

080a124c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a124c:	b508      	push	{r3, lr}
 80a124e:	4b02      	ldr	r3, [pc, #8]	; (80a1258 <HAL_I2C_Request_Data+0xc>)
 80a1250:	681b      	ldr	r3, [r3, #0]
 80a1252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1254:	9301      	str	r3, [sp, #4]
 80a1256:	bd08      	pop	{r3, pc}
 80a1258:	080601ac 	.word	0x080601ac

080a125c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a125c:	b508      	push	{r3, lr}
 80a125e:	4b02      	ldr	r3, [pc, #8]	; (80a1268 <HAL_I2C_Begin_Transmission+0xc>)
 80a1260:	681b      	ldr	r3, [r3, #0]
 80a1262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1264:	9301      	str	r3, [sp, #4]
 80a1266:	bd08      	pop	{r3, pc}
 80a1268:	080601ac 	.word	0x080601ac

080a126c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a126c:	b508      	push	{r3, lr}
 80a126e:	4b02      	ldr	r3, [pc, #8]	; (80a1278 <HAL_I2C_End_Transmission+0xc>)
 80a1270:	681b      	ldr	r3, [r3, #0]
 80a1272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1274:	9301      	str	r3, [sp, #4]
 80a1276:	bd08      	pop	{r3, pc}
 80a1278:	080601ac 	.word	0x080601ac

080a127c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a127c:	b508      	push	{r3, lr}
 80a127e:	4b02      	ldr	r3, [pc, #8]	; (80a1288 <HAL_I2C_Write_Data+0xc>)
 80a1280:	681b      	ldr	r3, [r3, #0]
 80a1282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1284:	9301      	str	r3, [sp, #4]
 80a1286:	bd08      	pop	{r3, pc}
 80a1288:	080601ac 	.word	0x080601ac

080a128c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a128c:	b508      	push	{r3, lr}
 80a128e:	4b02      	ldr	r3, [pc, #8]	; (80a1298 <HAL_I2C_Available_Data+0xc>)
 80a1290:	681b      	ldr	r3, [r3, #0]
 80a1292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1294:	9301      	str	r3, [sp, #4]
 80a1296:	bd08      	pop	{r3, pc}
 80a1298:	080601ac 	.word	0x080601ac

080a129c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a129c:	b508      	push	{r3, lr}
 80a129e:	4b02      	ldr	r3, [pc, #8]	; (80a12a8 <HAL_I2C_Read_Data+0xc>)
 80a12a0:	681b      	ldr	r3, [r3, #0]
 80a12a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a12a4:	9301      	str	r3, [sp, #4]
 80a12a6:	bd08      	pop	{r3, pc}
 80a12a8:	080601ac 	.word	0x080601ac

080a12ac <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a12ac:	b508      	push	{r3, lr}
 80a12ae:	4b02      	ldr	r3, [pc, #8]	; (80a12b8 <HAL_I2C_Peek_Data+0xc>)
 80a12b0:	681b      	ldr	r3, [r3, #0]
 80a12b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a12b4:	9301      	str	r3, [sp, #4]
 80a12b6:	bd08      	pop	{r3, pc}
 80a12b8:	080601ac 	.word	0x080601ac

080a12bc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a12bc:	b508      	push	{r3, lr}
 80a12be:	4b02      	ldr	r3, [pc, #8]	; (80a12c8 <HAL_I2C_Flush_Data+0xc>)
 80a12c0:	681b      	ldr	r3, [r3, #0]
 80a12c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a12c4:	9301      	str	r3, [sp, #4]
 80a12c6:	bd08      	pop	{r3, pc}
 80a12c8:	080601ac 	.word	0x080601ac

080a12cc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a12cc:	b508      	push	{r3, lr}
 80a12ce:	4b02      	ldr	r3, [pc, #8]	; (80a12d8 <HAL_I2C_Is_Enabled+0xc>)
 80a12d0:	681b      	ldr	r3, [r3, #0]
 80a12d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a12d4:	9301      	str	r3, [sp, #4]
 80a12d6:	bd08      	pop	{r3, pc}
 80a12d8:	080601ac 	.word	0x080601ac

080a12dc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a12dc:	b508      	push	{r3, lr}
 80a12de:	4b03      	ldr	r3, [pc, #12]	; (80a12ec <HAL_I2C_Init+0x10>)
 80a12e0:	681b      	ldr	r3, [r3, #0]
 80a12e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a12e6:	9301      	str	r3, [sp, #4]
 80a12e8:	bd08      	pop	{r3, pc}
 80a12ea:	0000      	.short	0x0000
 80a12ec:	080601ac 	.word	0x080601ac

080a12f0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a12f0:	b508      	push	{r3, lr}
 80a12f2:	4b02      	ldr	r3, [pc, #8]	; (80a12fc <HAL_USB_USART_Init+0xc>)
 80a12f4:	681b      	ldr	r3, [r3, #0]
 80a12f6:	681b      	ldr	r3, [r3, #0]
 80a12f8:	9301      	str	r3, [sp, #4]
 80a12fa:	bd08      	pop	{r3, pc}
 80a12fc:	080601d8 	.word	0x080601d8

080a1300 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1300:	b508      	push	{r3, lr}
 80a1302:	4b02      	ldr	r3, [pc, #8]	; (80a130c <HAL_USB_USART_Begin+0xc>)
 80a1304:	681b      	ldr	r3, [r3, #0]
 80a1306:	685b      	ldr	r3, [r3, #4]
 80a1308:	9301      	str	r3, [sp, #4]
 80a130a:	bd08      	pop	{r3, pc}
 80a130c:	080601d8 	.word	0x080601d8

080a1310 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1310:	b508      	push	{r3, lr}
 80a1312:	4b02      	ldr	r3, [pc, #8]	; (80a131c <HAL_USB_USART_Available_Data+0xc>)
 80a1314:	681b      	ldr	r3, [r3, #0]
 80a1316:	691b      	ldr	r3, [r3, #16]
 80a1318:	9301      	str	r3, [sp, #4]
 80a131a:	bd08      	pop	{r3, pc}
 80a131c:	080601d8 	.word	0x080601d8

080a1320 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1320:	b508      	push	{r3, lr}
 80a1322:	4b02      	ldr	r3, [pc, #8]	; (80a132c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1324:	681b      	ldr	r3, [r3, #0]
 80a1326:	695b      	ldr	r3, [r3, #20]
 80a1328:	9301      	str	r3, [sp, #4]
 80a132a:	bd08      	pop	{r3, pc}
 80a132c:	080601d8 	.word	0x080601d8

080a1330 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1330:	b508      	push	{r3, lr}
 80a1332:	4b02      	ldr	r3, [pc, #8]	; (80a133c <HAL_USB_USART_Receive_Data+0xc>)
 80a1334:	681b      	ldr	r3, [r3, #0]
 80a1336:	699b      	ldr	r3, [r3, #24]
 80a1338:	9301      	str	r3, [sp, #4]
 80a133a:	bd08      	pop	{r3, pc}
 80a133c:	080601d8 	.word	0x080601d8

080a1340 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1340:	b508      	push	{r3, lr}
 80a1342:	4b02      	ldr	r3, [pc, #8]	; (80a134c <HAL_USB_USART_Send_Data+0xc>)
 80a1344:	681b      	ldr	r3, [r3, #0]
 80a1346:	69db      	ldr	r3, [r3, #28]
 80a1348:	9301      	str	r3, [sp, #4]
 80a134a:	bd08      	pop	{r3, pc}
 80a134c:	080601d8 	.word	0x080601d8

080a1350 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1350:	b508      	push	{r3, lr}
 80a1352:	4b02      	ldr	r3, [pc, #8]	; (80a135c <HAL_USB_USART_Flush_Data+0xc>)
 80a1354:	681b      	ldr	r3, [r3, #0]
 80a1356:	6a1b      	ldr	r3, [r3, #32]
 80a1358:	9301      	str	r3, [sp, #4]
 80a135a:	bd08      	pop	{r3, pc}
 80a135c:	080601d8 	.word	0x080601d8

080a1360 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1360:	b508      	push	{r3, lr}
 80a1362:	4b02      	ldr	r3, [pc, #8]	; (80a136c <set_system_mode+0xc>)
 80a1364:	681b      	ldr	r3, [r3, #0]
 80a1366:	685b      	ldr	r3, [r3, #4]
 80a1368:	9301      	str	r3, [sp, #4]
 80a136a:	bd08      	pop	{r3, pc}
 80a136c:	080601a4 	.word	0x080601a4

080a1370 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1370:	b508      	push	{r3, lr}
 80a1372:	4b02      	ldr	r3, [pc, #8]	; (80a137c <system_delay_ms+0xc>)
 80a1374:	681b      	ldr	r3, [r3, #0]
 80a1376:	695b      	ldr	r3, [r3, #20]
 80a1378:	9301      	str	r3, [sp, #4]
 80a137a:	bd08      	pop	{r3, pc}
 80a137c:	080601a4 	.word	0x080601a4

080a1380 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1380:	b508      	push	{r3, lr}
 80a1382:	4b02      	ldr	r3, [pc, #8]	; (80a138c <system_thread_set_state+0xc>)
 80a1384:	681b      	ldr	r3, [r3, #0]
 80a1386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1388:	9301      	str	r3, [sp, #4]
 80a138a:	bd08      	pop	{r3, pc}
 80a138c:	080601a4 	.word	0x080601a4

080a1390 <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80a1390:	b508      	push	{r3, lr}
 80a1392:	4b02      	ldr	r3, [pc, #8]	; (80a139c <system_set_usb_request_app_handler+0xc>)
 80a1394:	681b      	ldr	r3, [r3, #0]
 80a1396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1398:	9301      	str	r3, [sp, #4]
 80a139a:	bd08      	pop	{r3, pc}
 80a139c:	080601a4 	.word	0x080601a4

080a13a0 <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80a13a0:	b508      	push	{r3, lr}
 80a13a2:	4b02      	ldr	r3, [pc, #8]	; (80a13ac <system_set_usb_request_result+0xc>)
 80a13a4:	681b      	ldr	r3, [r3, #0]
 80a13a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a13a8:	9301      	str	r3, [sp, #4]
 80a13aa:	bd08      	pop	{r3, pc}
 80a13ac:	080601a4 	.word	0x080601a4

080a13b0 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a13b0:	b508      	push	{r3, lr}
 80a13b2:	4b02      	ldr	r3, [pc, #8]	; (80a13bc <network_ready+0xc>)
 80a13b4:	681b      	ldr	r3, [r3, #0]
 80a13b6:	691b      	ldr	r3, [r3, #16]
 80a13b8:	9301      	str	r3, [sp, #4]
 80a13ba:	bd08      	pop	{r3, pc}
 80a13bc:	080601c8 	.word	0x080601c8

080a13c0 <free>:
#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
DYNALIB_FN(1, rt, free, void(void*))
 80a13c0:	b508      	push	{r3, lr}
 80a13c2:	4b02      	ldr	r3, [pc, #8]	; (80a13cc <free+0xc>)
 80a13c4:	681b      	ldr	r3, [r3, #0]
 80a13c6:	685b      	ldr	r3, [r3, #4]
 80a13c8:	9301      	str	r3, [sp, #4]
 80a13ca:	bd08      	pop	{r3, pc}
 80a13cc:	080601a0 	.word	0x080601a0

080a13d0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a13d0:	b508      	push	{r3, lr}
 80a13d2:	4b02      	ldr	r3, [pc, #8]	; (80a13dc <vsnprintf+0xc>)
 80a13d4:	681b      	ldr	r3, [r3, #0]
 80a13d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a13d8:	9301      	str	r3, [sp, #4]
 80a13da:	bd08      	pop	{r3, pc}
 80a13dc:	080601a0 	.word	0x080601a0

080a13e0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a13e0:	4770      	bx	lr

080a13e2 <_ZN8SPIClassD0Ev>:
 80a13e2:	b510      	push	{r4, lr}
 80a13e4:	4604      	mov	r4, r0
 80a13e6:	f7fe fe58 	bl	80a009a <_ZdlPv>
 80a13ea:	4620      	mov	r0, r4
 80a13ec:	bd10      	pop	{r4, pc}
	...

080a13f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a13f0:	b570      	push	{r4, r5, r6, lr}
 80a13f2:	4604      	mov	r4, r0
 80a13f4:	460e      	mov	r6, r1
 80a13f6:	4b07      	ldr	r3, [pc, #28]	; (80a1414 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
	Mutex(os_mutex_t handle) : handle_(handle) {}

	/**
	 * Creates a new mutex.
	 */
	Mutex() : handle_(nullptr)
 80a13f8:	2500      	movs	r5, #0
 80a13fa:	6003      	str	r3, [r0, #0]
 80a13fc:	f840 5f0c 	str.w	r5, [r0, #12]!
	{
		os_mutex_create(&handle_);
 80a1400:	f7ff fecc 	bl	80a119c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1404:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1406:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1408:	f7ff fea8 	bl	80a115c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a140c:	60a5      	str	r5, [r4, #8]
}
 80a140e:	4620      	mov	r0, r4
 80a1410:	bd70      	pop	{r4, r5, r6, pc}
 80a1412:	bf00      	nop
 80a1414:	080a27e8 	.word	0x080a27e8

080a1418 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1418:	7900      	ldrb	r0, [r0, #4]
 80a141a:	f7ff bea7 	b.w	80a116c <HAL_SPI_Is_Enabled>

080a141e <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a141e:	2000      	movs	r0, #0
 80a1420:	f7ff bf9e 	b.w	80a1360 <set_system_mode>

080a1424 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1426:	4606      	mov	r6, r0
 80a1428:	460d      	mov	r5, r1
 80a142a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a142c:	2400      	movs	r4, #0
  while (size--) {
 80a142e:	42bd      	cmp	r5, r7
 80a1430:	d00c      	beq.n	80a144c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1432:	6833      	ldr	r3, [r6, #0]
 80a1434:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1438:	689b      	ldr	r3, [r3, #8]
 80a143a:	4630      	mov	r0, r6
 80a143c:	4798      	blx	r3
     if (chunk>=0)
 80a143e:	2800      	cmp	r0, #0
 80a1440:	db01      	blt.n	80a1446 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1442:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1444:	e7f3      	b.n	80a142e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1446:	2c00      	cmp	r4, #0
 80a1448:	bf08      	it	eq
 80a144a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a144c:	4620      	mov	r0, r4
 80a144e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1450 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1450:	b570      	push	{r4, r5, r6, lr}
 80a1452:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1454:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1456:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1458:	b149      	cbz	r1, 80a146e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a145a:	f001 f978 	bl	80a274e <strlen>
 80a145e:	682b      	ldr	r3, [r5, #0]
 80a1460:	4602      	mov	r2, r0
 80a1462:	4621      	mov	r1, r4
 80a1464:	4628      	mov	r0, r5
    }
 80a1466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a146a:	68db      	ldr	r3, [r3, #12]
 80a146c:	4718      	bx	r3
    }
 80a146e:	bd70      	pop	{r4, r5, r6, pc}

080a1470 <_ZN5Print5printEPKc>:
 80a1470:	b508      	push	{r3, lr}
 80a1472:	f7ff ffed 	bl	80a1450 <_ZN5Print5writeEPKc>
 80a1476:	bd08      	pop	{r3, pc}

080a1478 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1478:	6803      	ldr	r3, [r0, #0]
 80a147a:	689b      	ldr	r3, [r3, #8]
 80a147c:	4718      	bx	r3

080a147e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a147e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1480:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1482:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1484:	f7ff fff8 	bl	80a1478 <_ZN5Print5printEc>
  n += print('\n');
 80a1488:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a148a:	4604      	mov	r4, r0
  n += print('\n');
 80a148c:	4628      	mov	r0, r5
 80a148e:	f7ff fff3 	bl	80a1478 <_ZN5Print5printEc>
  return n;
}
 80a1492:	4420      	add	r0, r4
 80a1494:	bd38      	pop	{r3, r4, r5, pc}

080a1496 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1496:	b538      	push	{r3, r4, r5, lr}
 80a1498:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a149a:	f7ff ffd9 	bl	80a1450 <_ZN5Print5writeEPKc>
 80a149e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a14a0:	4628      	mov	r0, r5
 80a14a2:	f7ff ffec 	bl	80a147e <_ZN5Print7printlnEv>
  return n;
}
 80a14a6:	4420      	add	r0, r4
 80a14a8:	bd38      	pop	{r3, r4, r5, pc}

080a14aa <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a14aa:	2a01      	cmp	r2, #1
 80a14ac:	bf98      	it	ls
 80a14ae:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a14b0:	b530      	push	{r4, r5, lr}
 80a14b2:	460b      	mov	r3, r1
 80a14b4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a14b6:	2100      	movs	r1, #0
 80a14b8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a14bc:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a14c0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a14c4:	fb05 3312 	mls	r3, r5, r2, r3
 80a14c8:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a14ca:	2b09      	cmp	r3, #9
 80a14cc:	bf94      	ite	ls
 80a14ce:	3330      	addls	r3, #48	; 0x30
 80a14d0:	3337      	addhi	r3, #55	; 0x37
 80a14d2:	b2db      	uxtb	r3, r3
 80a14d4:	4621      	mov	r1, r4
 80a14d6:	f804 3901 	strb.w	r3, [r4], #-1
 80a14da:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a14dc:	2d00      	cmp	r5, #0
 80a14de:	d1ef      	bne.n	80a14c0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a14e0:	f7ff ffb6 	bl	80a1450 <_ZN5Print5writeEPKc>
}
 80a14e4:	b00b      	add	sp, #44	; 0x2c
 80a14e6:	bd30      	pop	{r4, r5, pc}

080a14e8 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a14e8:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a14ea:	b922      	cbnz	r2, 80a14f6 <_ZN5Print5printEmi+0xe>
 80a14ec:	6803      	ldr	r3, [r0, #0]
 80a14ee:	b2c9      	uxtb	r1, r1
 80a14f0:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a14f2:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a14f4:	4718      	bx	r3
  else return printNumber(n, base);
 80a14f6:	b2d2      	uxtb	r2, r2
}
 80a14f8:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a14fa:	f7ff bfd6 	b.w	80a14aa <_ZN5Print11printNumberEmh>

080a14fe <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a14fe:	f7ff bff3 	b.w	80a14e8 <_ZN5Print5printEmi>

080a1502 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a1502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1506:	4607      	mov	r7, r0
 80a1508:	460e      	mov	r6, r1
  if (base == 0) {
 80a150a:	4615      	mov	r5, r2
 80a150c:	b92a      	cbnz	r2, 80a151a <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a150e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a1512:	6803      	ldr	r3, [r0, #0]
 80a1514:	b2c9      	uxtb	r1, r1
 80a1516:	689b      	ldr	r3, [r3, #8]
 80a1518:	4718      	bx	r3
  } else if (base == 10) {
 80a151a:	2a0a      	cmp	r2, #10
 80a151c:	d102      	bne.n	80a1524 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a151e:	2900      	cmp	r1, #0
 80a1520:	da01      	bge.n	80a1526 <_ZN5Print5printEli+0x24>
 80a1522:	e004      	b.n	80a152e <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1524:	b2d2      	uxtb	r2, r2
  }
}
 80a1526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a152a:	f7ff bfbe 	b.w	80a14aa <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a152e:	212d      	movs	r1, #45	; 0x2d
 80a1530:	f7ff ffa2 	bl	80a1478 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a1534:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1536:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a1538:	4271      	negs	r1, r6
 80a153a:	4638      	mov	r0, r7
 80a153c:	f7ff ffb5 	bl	80a14aa <_ZN5Print11printNumberEmh>
 80a1540:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1546 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1546:	f7ff bfdc 	b.w	80a1502 <_ZN5Print5printEli>

080a154a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a154a:	b40c      	push	{r2, r3}
 80a154c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1550:	b087      	sub	sp, #28
 80a1552:	af00      	add	r7, sp, #0
 80a1554:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a1558:	f854 9b04 	ldr.w	r9, [r4], #4
 80a155c:	4605      	mov	r5, r0
 80a155e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1560:	4623      	mov	r3, r4
 80a1562:	464a      	mov	r2, r9
 80a1564:	2114      	movs	r1, #20
 80a1566:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a1568:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a156a:	f7ff ff31 	bl	80a13d0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a156e:	2813      	cmp	r0, #19
 80a1570:	d805      	bhi.n	80a157e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1572:	1d39      	adds	r1, r7, #4
 80a1574:	4628      	mov	r0, r5
 80a1576:	f7ff ff6b 	bl	80a1450 <_ZN5Print5writeEPKc>
 80a157a:	4604      	mov	r4, r0
 80a157c:	e013      	b.n	80a15a6 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a157e:	f100 0308 	add.w	r3, r0, #8
 80a1582:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a1586:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1588:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a158c:	1c41      	adds	r1, r0, #1
 80a158e:	4623      	mov	r3, r4
 80a1590:	464a      	mov	r2, r9
 80a1592:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a1594:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a1596:	f7ff ff1b 	bl	80a13d0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a159a:	4669      	mov	r1, sp
 80a159c:	4628      	mov	r0, r5
 80a159e:	f7ff ff57 	bl	80a1450 <_ZN5Print5writeEPKc>
 80a15a2:	4604      	mov	r4, r0
 80a15a4:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a15a6:	b11e      	cbz	r6, 80a15b0 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a15a8:	4628      	mov	r0, r5
 80a15aa:	f7ff ff68 	bl	80a147e <_ZN5Print7printlnEv>
 80a15ae:	4404      	add	r4, r0
    return n;
}
 80a15b0:	4620      	mov	r0, r4
 80a15b2:	371c      	adds	r7, #28
 80a15b4:	46bd      	mov	sp, r7
 80a15b6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a15ba:	b002      	add	sp, #8
 80a15bc:	4770      	bx	lr
	...

080a15c0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a15c0:	4a01      	ldr	r2, [pc, #4]	; (80a15c8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a15c2:	4b02      	ldr	r3, [pc, #8]	; (80a15cc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a15c4:	601a      	str	r2, [r3, #0]
 80a15c6:	4770      	bx	lr
 80a15c8:	080a28a8 	.word	0x080a28a8
 80a15cc:	20000380 	.word	0x20000380

080a15d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a15d0:	4b02      	ldr	r3, [pc, #8]	; (80a15dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a15d2:	681a      	ldr	r2, [r3, #0]
 80a15d4:	4b02      	ldr	r3, [pc, #8]	; (80a15e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a15d6:	601a      	str	r2, [r3, #0]
 80a15d8:	4770      	bx	lr
 80a15da:	bf00      	nop
 80a15dc:	20000300 	.word	0x20000300
 80a15e0:	20000384 	.word	0x20000384

080a15e4 <delay>:
  return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a15e4:	2100      	movs	r1, #0
 80a15e6:	f7ff bec3 	b.w	80a1370 <system_delay_ms>
	...

080a15ec <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a15ec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a15ee:	4b14      	ldr	r3, [pc, #80]	; (80a1640 <serialEventRun+0x54>)
 80a15f0:	b133      	cbz	r3, 80a1600 <serialEventRun+0x14>
 80a15f2:	f000 f925 	bl	80a1840 <_Z16_fetch_usbserialv>
 80a15f6:	6803      	ldr	r3, [r0, #0]
 80a15f8:	691b      	ldr	r3, [r3, #16]
 80a15fa:	4798      	blx	r3
 80a15fc:	2800      	cmp	r0, #0
 80a15fe:	dc16      	bgt.n	80a162e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1600:	4b10      	ldr	r3, [pc, #64]	; (80a1644 <serialEventRun+0x58>)
 80a1602:	b133      	cbz	r3, 80a1612 <serialEventRun+0x26>
 80a1604:	f000 f9c2 	bl	80a198c <_Z22__fetch_global_Serial1v>
 80a1608:	6803      	ldr	r3, [r0, #0]
 80a160a:	691b      	ldr	r3, [r3, #16]
 80a160c:	4798      	blx	r3
 80a160e:	2800      	cmp	r0, #0
 80a1610:	dc10      	bgt.n	80a1634 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1612:	4b0d      	ldr	r3, [pc, #52]	; (80a1648 <serialEventRun+0x5c>)
 80a1614:	b10b      	cbz	r3, 80a161a <serialEventRun+0x2e>
 80a1616:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a161a:	4b0c      	ldr	r3, [pc, #48]	; (80a164c <serialEventRun+0x60>)
 80a161c:	b17b      	cbz	r3, 80a163e <serialEventRun+0x52>
 80a161e:	f000 f94b 	bl	80a18b8 <_Z17_fetch_usbserial1v>
 80a1622:	6803      	ldr	r3, [r0, #0]
 80a1624:	691b      	ldr	r3, [r3, #16]
 80a1626:	4798      	blx	r3
 80a1628:	2800      	cmp	r0, #0
 80a162a:	dc06      	bgt.n	80a163a <serialEventRun+0x4e>
 80a162c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a162e:	f3af 8000 	nop.w
 80a1632:	e7e5      	b.n	80a1600 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1634:	f3af 8000 	nop.w
 80a1638:	e7eb      	b.n	80a1612 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a163a:	f3af 8000 	nop.w
 80a163e:	bd08      	pop	{r3, pc}
	...

080a1650 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1650:	b508      	push	{r3, lr}
	serialEventRun();
 80a1652:	f7ff ffcb 	bl	80a15ec <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1656:	f7ff fd99 	bl	80a118c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a165a:	4b01      	ldr	r3, [pc, #4]	; (80a1660 <_post_loop+0x10>)
 80a165c:	6018      	str	r0, [r3, #0]
 80a165e:	bd08      	pop	{r3, pc}
 80a1660:	20000810 	.word	0x20000810

080a1664 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1664:	4802      	ldr	r0, [pc, #8]	; (80a1670 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1666:	4a03      	ldr	r2, [pc, #12]	; (80a1674 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1668:	4903      	ldr	r1, [pc, #12]	; (80a1678 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a166a:	1a12      	subs	r2, r2, r0
 80a166c:	f001 b85c 	b.w	80a2728 <memcpy>
 80a1670:	40024000 	.word	0x40024000
 80a1674:	40024004 	.word	0x40024004
 80a1678:	080a29e0 	.word	0x080a29e0

080a167c <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80a167c:	2000      	movs	r0, #0
 80a167e:	4770      	bx	lr

080a1680 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a1680:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80a1682:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a1684:	4604      	mov	r4, r0
    switch (req->type) {
 80a1686:	2b0a      	cmp	r3, #10
 80a1688:	d00e      	beq.n	80a16a8 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 80a168a:	2b50      	cmp	r3, #80	; 0x50
 80a168c:	d11c      	bne.n	80a16c8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80a168e:	4b10      	ldr	r3, [pc, #64]	; (80a16d0 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80a1690:	681d      	ldr	r5, [r3, #0]
 80a1692:	b1cd      	cbz	r5, 80a16c8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 80a1694:	7d03      	ldrb	r3, [r0, #20]
 80a1696:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a169a:	9300      	str	r3, [sp, #0]
 80a169c:	68c2      	ldr	r2, [r0, #12]
 80a169e:	f100 0310 	add.w	r3, r0, #16
 80a16a2:	6880      	ldr	r0, [r0, #8]
 80a16a4:	47a8      	blx	r5
 80a16a6:	e007      	b.n	80a16b8 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80a16a8:	f100 0310 	add.w	r3, r0, #16
 80a16ac:	68c2      	ldr	r2, [r0, #12]
 80a16ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a16b2:	6880      	ldr	r0, [r0, #8]
 80a16b4:	f7ff ffe2 	bl	80a167c <_Z26usb_request_custom_handlerPcjjPj>
 80a16b8:	b130      	cbz	r0, 80a16c8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80a16ba:	2200      	movs	r2, #0
 80a16bc:	4620      	mov	r0, r4
 80a16be:	4611      	mov	r1, r2
 80a16c0:	f7ff fe6e 	bl	80a13a0 <system_set_usb_request_result>
        return true;
 80a16c4:	2001      	movs	r0, #1
 80a16c6:	e000      	b.n	80a16ca <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80a16c8:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80a16ca:	b003      	add	sp, #12
 80a16cc:	bd30      	pop	{r4, r5, pc}
 80a16ce:	bf00      	nop
 80a16d0:	20000388 	.word	0x20000388

080a16d4 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80a16d4:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a16d6:	4c0c      	ldr	r4, [pc, #48]	; (80a1708 <module_user_init_hook+0x34>)
 80a16d8:	4d0c      	ldr	r5, [pc, #48]	; (80a170c <module_user_init_hook+0x38>)
 80a16da:	6823      	ldr	r3, [r4, #0]
 80a16dc:	42ab      	cmp	r3, r5
 80a16de:	4b0c      	ldr	r3, [pc, #48]	; (80a1710 <module_user_init_hook+0x3c>)
 80a16e0:	bf0c      	ite	eq
 80a16e2:	2201      	moveq	r2, #1
 80a16e4:	2200      	movne	r2, #0
 80a16e6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a16e8:	d002      	beq.n	80a16f0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a16ea:	f7ff ffbb 	bl	80a1664 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a16ee:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a16f0:	4b08      	ldr	r3, [pc, #32]	; (80a1714 <module_user_init_hook+0x40>)
 80a16f2:	b11b      	cbz	r3, 80a16fc <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a16f4:	f7ff fd42 	bl	80a117c <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a16f8:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80a16fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80a1700:	2100      	movs	r1, #0
 80a1702:	4805      	ldr	r0, [pc, #20]	; (80a1718 <module_user_init_hook+0x44>)
 80a1704:	f7ff be44 	b.w	80a1390 <system_set_usb_request_app_handler>
 80a1708:	40024000 	.word	0x40024000
 80a170c:	9a271c1e 	.word	0x9a271c1e
 80a1710:	2000038c 	.word	0x2000038c
 80a1714:	00000000 	.word	0x00000000
 80a1718:	080a1681 	.word	0x080a1681

080a171c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a171c:	4770      	bx	lr

080a171e <_ZN9IPAddressD0Ev>:
 80a171e:	b510      	push	{r4, lr}
 80a1720:	4604      	mov	r4, r0
 80a1722:	f7fe fcba 	bl	80a009a <_ZdlPv>
 80a1726:	4620      	mov	r0, r4
 80a1728:	bd10      	pop	{r4, pc}

080a172a <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a172a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a172c:	460f      	mov	r7, r1
 80a172e:	f100 0608 	add.w	r6, r0, #8
 80a1732:	1d05      	adds	r5, r0, #4
 80a1734:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1736:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a173a:	220a      	movs	r2, #10
 80a173c:	4638      	mov	r0, r7
 80a173e:	f7ff fede 	bl	80a14fe <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1742:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1744:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1746:	d007      	beq.n	80a1758 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1748:	2c00      	cmp	r4, #0
 80a174a:	d0f4      	beq.n	80a1736 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a174c:	212e      	movs	r1, #46	; 0x2e
 80a174e:	4638      	mov	r0, r7
 80a1750:	f7ff fe92 	bl	80a1478 <_ZN5Print5printEc>
 80a1754:	4404      	add	r4, r0
 80a1756:	e7ee      	b.n	80a1736 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1758:	4620      	mov	r0, r4
 80a175a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a175c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a175c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a175e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1762:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1766:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a176a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a176e:	2304      	movs	r3, #4
 80a1770:	6041      	str	r1, [r0, #4]
 80a1772:	7503      	strb	r3, [r0, #20]
 80a1774:	bd10      	pop	{r4, pc}
	...

080a1778 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a177a:	4d04      	ldr	r5, [pc, #16]	; (80a178c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a177c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a177e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1782:	9500      	str	r5, [sp, #0]
 80a1784:	f7ff ffea 	bl	80a175c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1788:	b003      	add	sp, #12
 80a178a:	bd30      	pop	{r4, r5, pc}
 80a178c:	080a2904 	.word	0x080a2904

080a1790 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1790:	7441      	strb	r1, [r0, #17]
 80a1792:	4770      	bx	lr

080a1794 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a1794:	4770      	bx	lr

080a1796 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a1796:	2100      	movs	r1, #0
 80a1798:	7c00      	ldrb	r0, [r0, #16]
 80a179a:	f7ff bdc9 	b.w	80a1330 <HAL_USB_USART_Receive_Data>

080a179e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a179e:	2101      	movs	r1, #1
 80a17a0:	7c00      	ldrb	r0, [r0, #16]
 80a17a2:	f7ff bdc5 	b.w	80a1330 <HAL_USB_USART_Receive_Data>

080a17a6 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a17a6:	7c00      	ldrb	r0, [r0, #16]
 80a17a8:	f7ff bdba 	b.w	80a1320 <HAL_USB_USART_Available_Data_For_Write>

080a17ac <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a17ac:	7c00      	ldrb	r0, [r0, #16]
 80a17ae:	f7ff bdaf 	b.w	80a1310 <HAL_USB_USART_Available_Data>

080a17b2 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a17b2:	b538      	push	{r3, r4, r5, lr}
 80a17b4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a17b6:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a17b8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a17ba:	f7ff fdb1 	bl	80a1320 <HAL_USB_USART_Available_Data_For_Write>
 80a17be:	2800      	cmp	r0, #0
 80a17c0:	dc01      	bgt.n	80a17c6 <_ZN9USBSerial5writeEh+0x14>
 80a17c2:	7c60      	ldrb	r0, [r4, #17]
 80a17c4:	b120      	cbz	r0, 80a17d0 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a17c6:	4629      	mov	r1, r5
 80a17c8:	7c20      	ldrb	r0, [r4, #16]
 80a17ca:	f7ff fdb9 	bl	80a1340 <HAL_USB_USART_Send_Data>
    return 1;
 80a17ce:	2001      	movs	r0, #1
  }
  return 0;
}
 80a17d0:	bd38      	pop	{r3, r4, r5, pc}

080a17d2 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a17d2:	7c00      	ldrb	r0, [r0, #16]
 80a17d4:	f7ff bdbc 	b.w	80a1350 <HAL_USB_USART_Flush_Data>

080a17d8 <_ZN9USBSerialD0Ev>:
 80a17d8:	b510      	push	{r4, lr}
 80a17da:	4604      	mov	r4, r0
 80a17dc:	f7fe fc5d 	bl	80a009a <_ZdlPv>
 80a17e0:	4620      	mov	r0, r4
 80a17e2:	bd10      	pop	{r4, pc}

080a17e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a17e4:	b510      	push	{r4, lr}
 80a17e6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a17e8:	2300      	movs	r3, #0
 80a17ea:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a17ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a17f0:	60a3      	str	r3, [r4, #8]
 80a17f2:	4b05      	ldr	r3, [pc, #20]	; (80a1808 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a17f4:	4608      	mov	r0, r1
 80a17f6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a17f8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a17fa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a17fc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a17fe:	4611      	mov	r1, r2
 80a1800:	f7ff fd76 	bl	80a12f0 <HAL_USB_USART_Init>
}
 80a1804:	4620      	mov	r0, r4
 80a1806:	bd10      	pop	{r4, pc}
 80a1808:	080a2918 	.word	0x080a2918

080a180c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a180c:	2200      	movs	r2, #0
 80a180e:	7c00      	ldrb	r0, [r0, #16]
 80a1810:	f7ff bd76 	b.w	80a1300 <HAL_USB_USART_Begin>

080a1814 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1814:	b510      	push	{r4, lr}
 80a1816:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1818:	2214      	movs	r2, #20
 80a181a:	2100      	movs	r1, #0
 80a181c:	f000 ff8f 	bl	80a273e <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1820:	4b05      	ldr	r3, [pc, #20]	; (80a1838 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1822:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1824:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1826:	4b05      	ldr	r3, [pc, #20]	; (80a183c <_Z19acquireSerialBufferv+0x28>)
 80a1828:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a182a:	f240 1301 	movw	r3, #257	; 0x101
 80a182e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1830:	2381      	movs	r3, #129	; 0x81
 80a1832:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1834:	bd10      	pop	{r4, pc}
 80a1836:	bf00      	nop
 80a1838:	20000415 	.word	0x20000415
 80a183c:	20000394 	.word	0x20000394

080a1840 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1840:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1842:	4d0e      	ldr	r5, [pc, #56]	; (80a187c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1844:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1846:	a801      	add	r0, sp, #4
 80a1848:	f7ff ffe4 	bl	80a1814 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a184c:	6829      	ldr	r1, [r5, #0]
 80a184e:	f011 0401 	ands.w	r4, r1, #1
 80a1852:	d110      	bne.n	80a1876 <_Z16_fetch_usbserialv+0x36>
 80a1854:	4628      	mov	r0, r5
 80a1856:	f7fe fc22 	bl	80a009e <__cxa_guard_acquire>
 80a185a:	b160      	cbz	r0, 80a1876 <_Z16_fetch_usbserialv+0x36>
 80a185c:	aa01      	add	r2, sp, #4
 80a185e:	4621      	mov	r1, r4
 80a1860:	4807      	ldr	r0, [pc, #28]	; (80a1880 <_Z16_fetch_usbserialv+0x40>)
 80a1862:	f7ff ffbf 	bl	80a17e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1866:	4628      	mov	r0, r5
 80a1868:	f7fe fc1e 	bl	80a00a8 <__cxa_guard_release>
 80a186c:	4a05      	ldr	r2, [pc, #20]	; (80a1884 <_Z16_fetch_usbserialv+0x44>)
 80a186e:	4906      	ldr	r1, [pc, #24]	; (80a1888 <_Z16_fetch_usbserialv+0x48>)
 80a1870:	4803      	ldr	r0, [pc, #12]	; (80a1880 <_Z16_fetch_usbserialv+0x40>)
 80a1872:	f000 f9d7 	bl	80a1c24 <__aeabi_atexit>
	return _usbserial;
}
 80a1876:	4802      	ldr	r0, [pc, #8]	; (80a1880 <_Z16_fetch_usbserialv+0x40>)
 80a1878:	b007      	add	sp, #28
 80a187a:	bd30      	pop	{r4, r5, pc}
 80a187c:	20000390 	.word	0x20000390
 80a1880:	20000518 	.word	0x20000518
 80a1884:	20000304 	.word	0x20000304
 80a1888:	080a1795 	.word	0x080a1795

080a188c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a188c:	b510      	push	{r4, lr}
 80a188e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1890:	2214      	movs	r2, #20
 80a1892:	2100      	movs	r1, #0
 80a1894:	f000 ff53 	bl	80a273e <memset>

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1898:	4b05      	ldr	r3, [pc, #20]	; (80a18b0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a189a:	4620      	mov	r0, r4

#ifdef USB_SERIAL_USERSPACE_BUFFERS
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a189c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a189e:	4b05      	ldr	r3, [pc, #20]	; (80a18b4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a18a0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a18a2:	f240 1301 	movw	r3, #257	; 0x101
 80a18a6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a18a8:	2381      	movs	r3, #129	; 0x81
 80a18aa:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a18ac:	bd10      	pop	{r4, pc}
 80a18ae:	bf00      	nop
 80a18b0:	200005c8 	.word	0x200005c8
 80a18b4:	20000530 	.word	0x20000530

080a18b8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a18b8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a18ba:	4c0e      	ldr	r4, [pc, #56]	; (80a18f4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a18bc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a18be:	a801      	add	r0, sp, #4
 80a18c0:	f7ff ffe4 	bl	80a188c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a18c4:	6823      	ldr	r3, [r4, #0]
 80a18c6:	07db      	lsls	r3, r3, #31
 80a18c8:	d410      	bmi.n	80a18ec <_Z17_fetch_usbserial1v+0x34>
 80a18ca:	4620      	mov	r0, r4
 80a18cc:	f7fe fbe7 	bl	80a009e <__cxa_guard_acquire>
 80a18d0:	b160      	cbz	r0, 80a18ec <_Z17_fetch_usbserial1v+0x34>
 80a18d2:	aa01      	add	r2, sp, #4
 80a18d4:	2101      	movs	r1, #1
 80a18d6:	4808      	ldr	r0, [pc, #32]	; (80a18f8 <_Z17_fetch_usbserial1v+0x40>)
 80a18d8:	f7ff ff84 	bl	80a17e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a18dc:	4620      	mov	r0, r4
 80a18de:	f7fe fbe3 	bl	80a00a8 <__cxa_guard_release>
 80a18e2:	4a06      	ldr	r2, [pc, #24]	; (80a18fc <_Z17_fetch_usbserial1v+0x44>)
 80a18e4:	4906      	ldr	r1, [pc, #24]	; (80a1900 <_Z17_fetch_usbserial1v+0x48>)
 80a18e6:	4804      	ldr	r0, [pc, #16]	; (80a18f8 <_Z17_fetch_usbserial1v+0x40>)
 80a18e8:	f000 f99c 	bl	80a1c24 <__aeabi_atexit>
  return _usbserial1;
}
 80a18ec:	4802      	ldr	r0, [pc, #8]	; (80a18f8 <_Z17_fetch_usbserial1v+0x40>)
 80a18ee:	b006      	add	sp, #24
 80a18f0:	bd10      	pop	{r4, pc}
 80a18f2:	bf00      	nop
 80a18f4:	2000052c 	.word	0x2000052c
 80a18f8:	200005b4 	.word	0x200005b4
 80a18fc:	20000304 	.word	0x20000304
 80a1900:	080a1795 	.word	0x080a1795

080a1904 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1904:	4770      	bx	lr

080a1906 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1906:	7441      	strb	r1, [r0, #17]
 80a1908:	4770      	bx	lr

080a190a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a190a:	7c00      	ldrb	r0, [r0, #16]
 80a190c:	f7ff bc86 	b.w	80a121c <HAL_USART_Available_Data_For_Write>

080a1910 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a1910:	7c00      	ldrb	r0, [r0, #16]
 80a1912:	f7ff bc5b 	b.w	80a11cc <HAL_USART_Available_Data>

080a1916 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a1916:	7c00      	ldrb	r0, [r0, #16]
 80a1918:	f7ff bc68 	b.w	80a11ec <HAL_USART_Peek_Data>

080a191c <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a191c:	7c00      	ldrb	r0, [r0, #16]
 80a191e:	f7ff bc5d 	b.w	80a11dc <HAL_USART_Read_Data>

080a1922 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1922:	7c00      	ldrb	r0, [r0, #16]
 80a1924:	f7ff bc6a 	b.w	80a11fc <HAL_USART_Flush_Data>

080a1928 <_ZN11USARTSerialD0Ev>:
 80a1928:	b510      	push	{r4, lr}
 80a192a:	4604      	mov	r4, r0
 80a192c:	f7fe fbb5 	bl	80a009a <_ZdlPv>
 80a1930:	4620      	mov	r0, r4
 80a1932:	bd10      	pop	{r4, pc}

080a1934 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1934:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1936:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1938:	4604      	mov	r4, r0
 80a193a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a193c:	b925      	cbnz	r5, 80a1948 <_ZN11USARTSerial5writeEh+0x14>
 80a193e:	7c00      	ldrb	r0, [r0, #16]
 80a1940:	f7ff fc6c 	bl	80a121c <HAL_USART_Available_Data_For_Write>
 80a1944:	2800      	cmp	r0, #0
 80a1946:	dd05      	ble.n	80a1954 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1948:	4631      	mov	r1, r6
 80a194a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a194c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1950:	f7ff bc34 	b.w	80a11bc <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1954:	4628      	mov	r0, r5
 80a1956:	bd70      	pop	{r4, r5, r6, pc}

080a1958 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1958:	b510      	push	{r4, lr}
 80a195a:	4604      	mov	r4, r0
 80a195c:	4608      	mov	r0, r1
 80a195e:	4611      	mov	r1, r2
 80a1960:	2200      	movs	r2, #0
 80a1962:	6062      	str	r2, [r4, #4]
 80a1964:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1968:	60a2      	str	r2, [r4, #8]
 80a196a:	4a05      	ldr	r2, [pc, #20]	; (80a1980 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a196c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_usartserial.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a196e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1970:	2201      	movs	r2, #1
 80a1972:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1974:	461a      	mov	r2, r3
 80a1976:	f7ff fc19 	bl	80a11ac <HAL_USART_Init>
}
 80a197a:	4620      	mov	r0, r4
 80a197c:	bd10      	pop	{r4, pc}
 80a197e:	bf00      	nop
 80a1980:	080a2948 	.word	0x080a2948

080a1984 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1984:	7c00      	ldrb	r0, [r0, #16]
 80a1986:	f7ff bc41 	b.w	80a120c <HAL_USART_Is_Enabled>
	...

080a198c <_Z22__fetch_global_Serial1v>:
// Preinstantiate Objects //////////////////////////////////////////////////////
static Ring_Buffer serial1_rx_buffer;
static Ring_Buffer serial1_tx_buffer;

USARTSerial& __fetch_global_Serial1()
{
 80a198c:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a198e:	4d0c      	ldr	r5, [pc, #48]	; (80a19c0 <_Z22__fetch_global_Serial1v+0x34>)
 80a1990:	6829      	ldr	r1, [r5, #0]
 80a1992:	f011 0401 	ands.w	r4, r1, #1
 80a1996:	d111      	bne.n	80a19bc <_Z22__fetch_global_Serial1v+0x30>
 80a1998:	4628      	mov	r0, r5
 80a199a:	f7fe fb80 	bl	80a009e <__cxa_guard_acquire>
 80a199e:	b168      	cbz	r0, 80a19bc <_Z22__fetch_global_Serial1v+0x30>
 80a19a0:	4a08      	ldr	r2, [pc, #32]	; (80a19c4 <_Z22__fetch_global_Serial1v+0x38>)
 80a19a2:	4621      	mov	r1, r4
 80a19a4:	4b08      	ldr	r3, [pc, #32]	; (80a19c8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a19a6:	4809      	ldr	r0, [pc, #36]	; (80a19cc <_Z22__fetch_global_Serial1v+0x40>)
 80a19a8:	f7ff ffd6 	bl	80a1958 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a19ac:	4628      	mov	r0, r5
 80a19ae:	f7fe fb7b 	bl	80a00a8 <__cxa_guard_release>
 80a19b2:	4a07      	ldr	r2, [pc, #28]	; (80a19d0 <_Z22__fetch_global_Serial1v+0x44>)
 80a19b4:	4907      	ldr	r1, [pc, #28]	; (80a19d4 <_Z22__fetch_global_Serial1v+0x48>)
 80a19b6:	4805      	ldr	r0, [pc, #20]	; (80a19cc <_Z22__fetch_global_Serial1v+0x40>)
 80a19b8:	f000 f934 	bl	80a1c24 <__aeabi_atexit>
	return serial1;
}
 80a19bc:	4803      	ldr	r0, [pc, #12]	; (80a19cc <_Z22__fetch_global_Serial1v+0x40>)
 80a19be:	bd38      	pop	{r3, r4, r5, pc}
 80a19c0:	20000764 	.word	0x20000764
 80a19c4:	20000768 	.word	0x20000768
 80a19c8:	200006e0 	.word	0x200006e0
 80a19cc:	200006cc 	.word	0x200006cc
 80a19d0:	20000304 	.word	0x20000304
 80a19d4:	080a1905 	.word	0x080a1905

080a19d8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a19d8:	4770      	bx	lr

080a19da <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a19da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a19dc:	4606      	mov	r6, r0
 80a19de:	4615      	mov	r5, r2
 80a19e0:	460c      	mov	r4, r1
 80a19e2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a19e4:	42bc      	cmp	r4, r7
 80a19e6:	d006      	beq.n	80a19f6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a19e8:	6833      	ldr	r3, [r6, #0]
 80a19ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a19ee:	689b      	ldr	r3, [r3, #8]
 80a19f0:	4630      	mov	r0, r6
 80a19f2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a19f4:	e7f6      	b.n	80a19e4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a19f6:	4628      	mov	r0, r5
 80a19f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a19fa <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a19fa:	2200      	movs	r2, #0
 80a19fc:	7c00      	ldrb	r0, [r0, #16]
 80a19fe:	f7ff bc3d 	b.w	80a127c <HAL_I2C_Write_Data>

080a1a02 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1a02:	2100      	movs	r1, #0
 80a1a04:	7c00      	ldrb	r0, [r0, #16]
 80a1a06:	f7ff bc41 	b.w	80a128c <HAL_I2C_Available_Data>

080a1a0a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1a0a:	2100      	movs	r1, #0
 80a1a0c:	7c00      	ldrb	r0, [r0, #16]
 80a1a0e:	f7ff bc45 	b.w	80a129c <HAL_I2C_Read_Data>

080a1a12 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1a12:	2100      	movs	r1, #0
 80a1a14:	7c00      	ldrb	r0, [r0, #16]
 80a1a16:	f7ff bc49 	b.w	80a12ac <HAL_I2C_Peek_Data>

080a1a1a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1a1a:	2100      	movs	r1, #0
 80a1a1c:	7c00      	ldrb	r0, [r0, #16]
 80a1a1e:	f7ff bc4d 	b.w	80a12bc <HAL_I2C_Flush_Data>

080a1a22 <_ZN7TwoWireD0Ev>:
 80a1a22:	b510      	push	{r4, lr}
 80a1a24:	4604      	mov	r4, r0
 80a1a26:	f7fe fb38 	bl	80a009a <_ZdlPv>
 80a1a2a:	4620      	mov	r0, r4
 80a1a2c:	bd10      	pop	{r4, pc}
	...

080a1a30 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1a30:	b510      	push	{r4, lr}
 80a1a32:	4604      	mov	r4, r0
 80a1a34:	4608      	mov	r0, r1
 80a1a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1a3a:	60a3      	str	r3, [r4, #8]
 80a1a3c:	4b04      	ldr	r3, [pc, #16]	; (80a1a50 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a1a3e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1a40:	7420      	strb	r0, [r4, #16]
 80a1a42:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1a44:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1a46:	f7ff fc49 	bl	80a12dc <HAL_I2C_Init>

}
 80a1a4a:	4620      	mov	r0, r4
 80a1a4c:	bd10      	pop	{r4, pc}
 80a1a4e:	bf00      	nop
 80a1a50:	080a2978 	.word	0x080a2978

080a1a54 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a1a54:	2200      	movs	r2, #0
 80a1a56:	7c00      	ldrb	r0, [r0, #16]
 80a1a58:	f7ff bbe8 	b.w	80a122c <HAL_I2C_Set_Speed>

080a1a5c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1a5c:	2300      	movs	r3, #0
 80a1a5e:	461a      	mov	r2, r3
 80a1a60:	4619      	mov	r1, r3
 80a1a62:	7c00      	ldrb	r0, [r0, #16]
 80a1a64:	f7ff bbea 	b.w	80a123c <HAL_I2C_Begin>

080a1a68 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a1a68:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a1a6a:	2400      	movs	r4, #0
 80a1a6c:	7c00      	ldrb	r0, [r0, #16]
 80a1a6e:	9400      	str	r4, [sp, #0]
 80a1a70:	f7ff fbec 	bl	80a124c <HAL_I2C_Request_Data>
  return result;
}
 80a1a74:	b2c0      	uxtb	r0, r0
 80a1a76:	b002      	add	sp, #8
 80a1a78:	bd10      	pop	{r4, pc}

080a1a7a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a1a7a:	2301      	movs	r3, #1
 80a1a7c:	f7ff bff4 	b.w	80a1a68 <_ZN7TwoWire11requestFromEhhh>

080a1a80 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a1a80:	2301      	movs	r3, #1
 80a1a82:	b2d2      	uxtb	r2, r2
 80a1a84:	b2c9      	uxtb	r1, r1
 80a1a86:	f7ff bfef 	b.w	80a1a68 <_ZN7TwoWire11requestFromEhhh>

080a1a8a <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a1a8a:	2200      	movs	r2, #0
 80a1a8c:	7c00      	ldrb	r0, [r0, #16]
 80a1a8e:	f7ff bbe5 	b.w	80a125c <HAL_I2C_Begin_Transmission>

080a1a92 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a1a92:	2200      	movs	r2, #0
 80a1a94:	7c00      	ldrb	r0, [r0, #16]
 80a1a96:	f7ff bbe9 	b.w	80a126c <HAL_I2C_End_Transmission>

080a1a9a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a1a9a:	2101      	movs	r1, #1
 80a1a9c:	f7ff bff9 	b.w	80a1a92 <_ZN7TwoWire15endTransmissionEh>

080a1aa0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1aa0:	2100      	movs	r1, #0
 80a1aa2:	7c00      	ldrb	r0, [r0, #16]
 80a1aa4:	f7ff bc12 	b.w	80a12cc <HAL_I2C_Is_Enabled>

080a1aa8 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a1aa8:	4770      	bx	lr

080a1aaa <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1aaa:	2200      	movs	r2, #0
 80a1aac:	4611      	mov	r1, r2
 80a1aae:	4610      	mov	r0, r2
 80a1ab0:	f7ff bc7e 	b.w	80a13b0 <network_ready>

080a1ab4 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a1ab4:	4803      	ldr	r0, [pc, #12]	; (80a1ac4 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a1ab6:	4b04      	ldr	r3, [pc, #16]	; (80a1ac8 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a1ab8:	4a04      	ldr	r2, [pc, #16]	; (80a1acc <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a1aba:	4905      	ldr	r1, [pc, #20]	; (80a1ad0 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a1abc:	6003      	str	r3, [r0, #0]
 80a1abe:	f000 b8b1 	b.w	80a1c24 <__aeabi_atexit>
 80a1ac2:	bf00      	nop
 80a1ac4:	200007ec 	.word	0x200007ec
 80a1ac8:	080a29a0 	.word	0x080a29a0
 80a1acc:	20000304 	.word	0x20000304
 80a1ad0:	080a1aa9 	.word	0x080a1aa9

080a1ad4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1ad4:	b510      	push	{r4, lr}
 80a1ad6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1ad8:	480f      	ldr	r0, [pc, #60]	; (80a1b18 <pinAvailable+0x44>)
 80a1ada:	f7ff fc9d 	bl	80a1418 <_ZN8SPIClass9isEnabledEv>
 80a1ade:	b128      	cbz	r0, 80a1aec <pinAvailable+0x18>
 80a1ae0:	f1a4 030d 	sub.w	r3, r4, #13
 80a1ae4:	2b02      	cmp	r3, #2
 80a1ae6:	d801      	bhi.n	80a1aec <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a1ae8:	2000      	movs	r0, #0
 80a1aea:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1aec:	f000 f87a 	bl	80a1be4 <_Z19__fetch_global_Wirev>
 80a1af0:	f7ff ffd6 	bl	80a1aa0 <_ZN7TwoWire9isEnabledEv>
 80a1af4:	b108      	cbz	r0, 80a1afa <pinAvailable+0x26>
 80a1af6:	2c01      	cmp	r4, #1
 80a1af8:	d9f6      	bls.n	80a1ae8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1afa:	f7ff ff47 	bl	80a198c <_Z22__fetch_global_Serial1v>
 80a1afe:	f7ff ff41 	bl	80a1984 <_ZN11USARTSerial9isEnabledEv>
 80a1b02:	b118      	cbz	r0, 80a1b0c <pinAvailable+0x38>
 80a1b04:	f1a4 0312 	sub.w	r3, r4, #18
 80a1b08:	2b01      	cmp	r3, #1
 80a1b0a:	d9ed      	bls.n	80a1ae8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1b0c:	2c17      	cmp	r4, #23
 80a1b0e:	bf8c      	ite	hi
 80a1b10:	2000      	movhi	r0, #0
 80a1b12:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1b14:	bd10      	pop	{r4, pc}
 80a1b16:	bf00      	nop
 80a1b18:	200007f0 	.word	0x200007f0

080a1b1c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1b1c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1b1e:	b538      	push	{r3, r4, r5, lr}
 80a1b20:	4604      	mov	r4, r0
 80a1b22:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1b24:	d80a      	bhi.n	80a1b3c <pinMode+0x20>
 80a1b26:	29ff      	cmp	r1, #255	; 0xff
 80a1b28:	d008      	beq.n	80a1b3c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1b2a:	f7ff ffd3 	bl	80a1ad4 <pinAvailable>
 80a1b2e:	b128      	cbz	r0, 80a1b3c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1b30:	4629      	mov	r1, r5
 80a1b32:	4620      	mov	r0, r4
}
 80a1b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1b38:	f7ff baf8 	b.w	80a112c <HAL_Pin_Mode>
 80a1b3c:	bd38      	pop	{r3, r4, r5, pc}

080a1b3e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1b3e:	b538      	push	{r3, r4, r5, lr}
 80a1b40:	4604      	mov	r4, r0
 80a1b42:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1b44:	f7ff fafa 	bl	80a113c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1b48:	28ff      	cmp	r0, #255	; 0xff
 80a1b4a:	d010      	beq.n	80a1b6e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1b4c:	2806      	cmp	r0, #6
 80a1b4e:	d804      	bhi.n	80a1b5a <digitalWrite+0x1c>
 80a1b50:	234d      	movs	r3, #77	; 0x4d
 80a1b52:	fa23 f000 	lsr.w	r0, r3, r0
 80a1b56:	07c3      	lsls	r3, r0, #31
 80a1b58:	d409      	bmi.n	80a1b6e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1b5a:	4620      	mov	r0, r4
 80a1b5c:	f7ff ffba 	bl	80a1ad4 <pinAvailable>
 80a1b60:	b128      	cbz	r0, 80a1b6e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1b62:	4629      	mov	r1, r5
 80a1b64:	4620      	mov	r0, r4
}
 80a1b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1b6a:	f7ff baef 	b.w	80a114c <HAL_GPIO_Write>
 80a1b6e:	bd38      	pop	{r3, r4, r5, pc}

080a1b70 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1b70:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1b72:	4c0c      	ldr	r4, [pc, #48]	; (80a1ba4 <_GLOBAL__sub_I_SPI+0x34>)
 80a1b74:	4e0c      	ldr	r6, [pc, #48]	; (80a1ba8 <_GLOBAL__sub_I_SPI+0x38>)
 80a1b76:	4d0d      	ldr	r5, [pc, #52]	; (80a1bac <_GLOBAL__sub_I_SPI+0x3c>)
 80a1b78:	2100      	movs	r1, #0
 80a1b7a:	4620      	mov	r0, r4
 80a1b7c:	f7ff fc38 	bl	80a13f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1b80:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1b82:	4c0b      	ldr	r4, [pc, #44]	; (80a1bb0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1b84:	4632      	mov	r2, r6
 80a1b86:	4629      	mov	r1, r5
 80a1b88:	f000 f84c 	bl	80a1c24 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1b8c:	2101      	movs	r1, #1
 80a1b8e:	4620      	mov	r0, r4
 80a1b90:	f7ff fc2e 	bl	80a13f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1b94:	4632      	mov	r2, r6
 80a1b96:	4629      	mov	r1, r5
 80a1b98:	4620      	mov	r0, r4
 80a1b9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1b9e:	f000 b841 	b.w	80a1c24 <__aeabi_atexit>
 80a1ba2:	bf00      	nop
 80a1ba4:	200007f0 	.word	0x200007f0
 80a1ba8:	20000304 	.word	0x20000304
 80a1bac:	080a13e1 	.word	0x080a13e1
 80a1bb0:	20000800 	.word	0x20000800

080a1bb4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1bb4:	b513      	push	{r0, r1, r4, lr}
 80a1bb6:	4c08      	ldr	r4, [pc, #32]	; (80a1bd8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1bb8:	2300      	movs	r3, #0
 80a1bba:	461a      	mov	r2, r3
 80a1bbc:	4619      	mov	r1, r3
 80a1bbe:	9300      	str	r3, [sp, #0]
 80a1bc0:	4620      	mov	r0, r4
 80a1bc2:	f7ff fdd9 	bl	80a1778 <_ZN9IPAddressC1Ehhhh>
 80a1bc6:	4620      	mov	r0, r4
 80a1bc8:	4a04      	ldr	r2, [pc, #16]	; (80a1bdc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1bca:	4905      	ldr	r1, [pc, #20]	; (80a1be0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1bcc:	b002      	add	sp, #8
 80a1bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1bd2:	f000 b827 	b.w	80a1c24 <__aeabi_atexit>
 80a1bd6:	bf00      	nop
 80a1bd8:	20000814 	.word	0x20000814
 80a1bdc:	20000304 	.word	0x20000304
 80a1be0:	080a171d 	.word	0x080a171d

080a1be4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1be4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a1be6:	4d0b      	ldr	r5, [pc, #44]	; (80a1c14 <_Z19__fetch_global_Wirev+0x30>)
 80a1be8:	6829      	ldr	r1, [r5, #0]
 80a1bea:	f011 0401 	ands.w	r4, r1, #1
 80a1bee:	d10f      	bne.n	80a1c10 <_Z19__fetch_global_Wirev+0x2c>
 80a1bf0:	4628      	mov	r0, r5
 80a1bf2:	f7fe fa54 	bl	80a009e <__cxa_guard_acquire>
 80a1bf6:	b158      	cbz	r0, 80a1c10 <_Z19__fetch_global_Wirev+0x2c>
 80a1bf8:	4621      	mov	r1, r4
 80a1bfa:	4807      	ldr	r0, [pc, #28]	; (80a1c18 <_Z19__fetch_global_Wirev+0x34>)
 80a1bfc:	f7ff ff18 	bl	80a1a30 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1c00:	4628      	mov	r0, r5
 80a1c02:	f7fe fa51 	bl	80a00a8 <__cxa_guard_release>
 80a1c06:	4a05      	ldr	r2, [pc, #20]	; (80a1c1c <_Z19__fetch_global_Wirev+0x38>)
 80a1c08:	4905      	ldr	r1, [pc, #20]	; (80a1c20 <_Z19__fetch_global_Wirev+0x3c>)
 80a1c0a:	4803      	ldr	r0, [pc, #12]	; (80a1c18 <_Z19__fetch_global_Wirev+0x34>)
 80a1c0c:	f000 f80a 	bl	80a1c24 <__aeabi_atexit>
	return wire;
}
 80a1c10:	4801      	ldr	r0, [pc, #4]	; (80a1c18 <_Z19__fetch_global_Wirev+0x34>)
 80a1c12:	bd38      	pop	{r3, r4, r5, pc}
 80a1c14:	2000082c 	.word	0x2000082c
 80a1c18:	20000830 	.word	0x20000830
 80a1c1c:	20000304 	.word	0x20000304
 80a1c20:	080a19d9 	.word	0x080a19d9

080a1c24 <__aeabi_atexit>:
 80a1c24:	460b      	mov	r3, r1
 80a1c26:	4601      	mov	r1, r0
 80a1c28:	4618      	mov	r0, r3
 80a1c2a:	f000 bd6f 	b.w	80a270c <__cxa_atexit>
	...

080a1c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1c30:	4b18      	ldr	r3, [pc, #96]	; (80a1c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1c32:	681a      	ldr	r2, [r3, #0]
 80a1c34:	07d1      	lsls	r1, r2, #31
 80a1c36:	bf5c      	itt	pl
 80a1c38:	2201      	movpl	r2, #1
 80a1c3a:	601a      	strpl	r2, [r3, #0]
 80a1c3c:	4b16      	ldr	r3, [pc, #88]	; (80a1c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1c3e:	681a      	ldr	r2, [r3, #0]
 80a1c40:	07d2      	lsls	r2, r2, #31
 80a1c42:	bf5c      	itt	pl
 80a1c44:	2201      	movpl	r2, #1
 80a1c46:	601a      	strpl	r2, [r3, #0]
 80a1c48:	4b14      	ldr	r3, [pc, #80]	; (80a1c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1c4a:	681a      	ldr	r2, [r3, #0]
 80a1c4c:	07d0      	lsls	r0, r2, #31
 80a1c4e:	bf5c      	itt	pl
 80a1c50:	2201      	movpl	r2, #1
 80a1c52:	601a      	strpl	r2, [r3, #0]
 80a1c54:	4b12      	ldr	r3, [pc, #72]	; (80a1ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1c56:	681a      	ldr	r2, [r3, #0]
 80a1c58:	07d1      	lsls	r1, r2, #31
 80a1c5a:	bf5c      	itt	pl
 80a1c5c:	2201      	movpl	r2, #1
 80a1c5e:	601a      	strpl	r2, [r3, #0]
 80a1c60:	4b10      	ldr	r3, [pc, #64]	; (80a1ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1c62:	681a      	ldr	r2, [r3, #0]
 80a1c64:	07d2      	lsls	r2, r2, #31
 80a1c66:	bf5c      	itt	pl
 80a1c68:	2201      	movpl	r2, #1
 80a1c6a:	601a      	strpl	r2, [r3, #0]
 80a1c6c:	4b0e      	ldr	r3, [pc, #56]	; (80a1ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1c6e:	681a      	ldr	r2, [r3, #0]
 80a1c70:	07d0      	lsls	r0, r2, #31
 80a1c72:	bf5c      	itt	pl
 80a1c74:	2201      	movpl	r2, #1
 80a1c76:	601a      	strpl	r2, [r3, #0]
 80a1c78:	4b0c      	ldr	r3, [pc, #48]	; (80a1cac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1c7a:	681a      	ldr	r2, [r3, #0]
 80a1c7c:	07d1      	lsls	r1, r2, #31
 80a1c7e:	bf5c      	itt	pl
 80a1c80:	2201      	movpl	r2, #1
 80a1c82:	601a      	strpl	r2, [r3, #0]
 80a1c84:	4b0a      	ldr	r3, [pc, #40]	; (80a1cb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1c86:	681a      	ldr	r2, [r3, #0]
 80a1c88:	07d2      	lsls	r2, r2, #31
 80a1c8a:	bf5c      	itt	pl
 80a1c8c:	2201      	movpl	r2, #1
 80a1c8e:	601a      	strpl	r2, [r3, #0]
 80a1c90:	4770      	bx	lr
 80a1c92:	bf00      	nop
 80a1c94:	20000860 	.word	0x20000860
 80a1c98:	2000085c 	.word	0x2000085c
 80a1c9c:	20000858 	.word	0x20000858
 80a1ca0:	20000854 	.word	0x20000854
 80a1ca4:	20000850 	.word	0x20000850
 80a1ca8:	2000084c 	.word	0x2000084c
 80a1cac:	20000848 	.word	0x20000848
 80a1cb0:	20000844 	.word	0x20000844

080a1cb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1cb4:	4b24      	ldr	r3, [pc, #144]	; (80a1d48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1cb6:	681a      	ldr	r2, [r3, #0]
 80a1cb8:	07d0      	lsls	r0, r2, #31
 80a1cba:	bf5c      	itt	pl
 80a1cbc:	2201      	movpl	r2, #1
 80a1cbe:	601a      	strpl	r2, [r3, #0]
 80a1cc0:	4b22      	ldr	r3, [pc, #136]	; (80a1d4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1cc2:	681a      	ldr	r2, [r3, #0]
 80a1cc4:	07d1      	lsls	r1, r2, #31
 80a1cc6:	bf5c      	itt	pl
 80a1cc8:	2201      	movpl	r2, #1
 80a1cca:	601a      	strpl	r2, [r3, #0]
 80a1ccc:	4b20      	ldr	r3, [pc, #128]	; (80a1d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1cce:	681a      	ldr	r2, [r3, #0]
 80a1cd0:	07d2      	lsls	r2, r2, #31
 80a1cd2:	bf5c      	itt	pl
 80a1cd4:	2201      	movpl	r2, #1
 80a1cd6:	601a      	strpl	r2, [r3, #0]
 80a1cd8:	4b1e      	ldr	r3, [pc, #120]	; (80a1d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1cda:	681a      	ldr	r2, [r3, #0]
 80a1cdc:	07d0      	lsls	r0, r2, #31
 80a1cde:	bf5c      	itt	pl
 80a1ce0:	2201      	movpl	r2, #1
 80a1ce2:	601a      	strpl	r2, [r3, #0]
 80a1ce4:	4b1c      	ldr	r3, [pc, #112]	; (80a1d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1ce6:	681a      	ldr	r2, [r3, #0]
 80a1ce8:	07d1      	lsls	r1, r2, #31
 80a1cea:	bf5c      	itt	pl
 80a1cec:	2201      	movpl	r2, #1
 80a1cee:	601a      	strpl	r2, [r3, #0]
 80a1cf0:	4b1a      	ldr	r3, [pc, #104]	; (80a1d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1cf2:	681a      	ldr	r2, [r3, #0]
 80a1cf4:	07d2      	lsls	r2, r2, #31
 80a1cf6:	bf5c      	itt	pl
 80a1cf8:	2201      	movpl	r2, #1
 80a1cfa:	601a      	strpl	r2, [r3, #0]
 80a1cfc:	4b18      	ldr	r3, [pc, #96]	; (80a1d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1cfe:	681a      	ldr	r2, [r3, #0]
 80a1d00:	07d0      	lsls	r0, r2, #31
 80a1d02:	bf5c      	itt	pl
 80a1d04:	2201      	movpl	r2, #1
 80a1d06:	601a      	strpl	r2, [r3, #0]
 80a1d08:	4b16      	ldr	r3, [pc, #88]	; (80a1d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1d0a:	681a      	ldr	r2, [r3, #0]
 80a1d0c:	07d1      	lsls	r1, r2, #31
 80a1d0e:	bf5c      	itt	pl
 80a1d10:	2201      	movpl	r2, #1
 80a1d12:	601a      	strpl	r2, [r3, #0]
 80a1d14:	4b14      	ldr	r3, [pc, #80]	; (80a1d68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1d16:	681a      	ldr	r2, [r3, #0]
 80a1d18:	07d2      	lsls	r2, r2, #31
 80a1d1a:	bf5c      	itt	pl
 80a1d1c:	2201      	movpl	r2, #1
 80a1d1e:	601a      	strpl	r2, [r3, #0]
 80a1d20:	4b12      	ldr	r3, [pc, #72]	; (80a1d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1d22:	681a      	ldr	r2, [r3, #0]
 80a1d24:	07d0      	lsls	r0, r2, #31
 80a1d26:	bf5c      	itt	pl
 80a1d28:	2201      	movpl	r2, #1
 80a1d2a:	601a      	strpl	r2, [r3, #0]
 80a1d2c:	4b10      	ldr	r3, [pc, #64]	; (80a1d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1d2e:	681a      	ldr	r2, [r3, #0]
 80a1d30:	07d1      	lsls	r1, r2, #31
 80a1d32:	bf5c      	itt	pl
 80a1d34:	2201      	movpl	r2, #1
 80a1d36:	601a      	strpl	r2, [r3, #0]
 80a1d38:	4b0e      	ldr	r3, [pc, #56]	; (80a1d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1d3a:	681a      	ldr	r2, [r3, #0]
 80a1d3c:	07d2      	lsls	r2, r2, #31
 80a1d3e:	bf5c      	itt	pl
 80a1d40:	2201      	movpl	r2, #1
 80a1d42:	601a      	strpl	r2, [r3, #0]
 80a1d44:	4770      	bx	lr
 80a1d46:	bf00      	nop
 80a1d48:	20000890 	.word	0x20000890
 80a1d4c:	2000088c 	.word	0x2000088c
 80a1d50:	20000888 	.word	0x20000888
 80a1d54:	20000884 	.word	0x20000884
 80a1d58:	20000880 	.word	0x20000880
 80a1d5c:	2000087c 	.word	0x2000087c
 80a1d60:	20000878 	.word	0x20000878
 80a1d64:	20000874 	.word	0x20000874
 80a1d68:	20000870 	.word	0x20000870
 80a1d6c:	2000086c 	.word	0x2000086c
 80a1d70:	20000868 	.word	0x20000868
 80a1d74:	20000864 	.word	0x20000864

080a1d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1d78:	4b24      	ldr	r3, [pc, #144]	; (80a1e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1d7a:	681a      	ldr	r2, [r3, #0]
 80a1d7c:	07d0      	lsls	r0, r2, #31
 80a1d7e:	bf5c      	itt	pl
 80a1d80:	2201      	movpl	r2, #1
 80a1d82:	601a      	strpl	r2, [r3, #0]
 80a1d84:	4b22      	ldr	r3, [pc, #136]	; (80a1e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1d86:	681a      	ldr	r2, [r3, #0]
 80a1d88:	07d1      	lsls	r1, r2, #31
 80a1d8a:	bf5c      	itt	pl
 80a1d8c:	2201      	movpl	r2, #1
 80a1d8e:	601a      	strpl	r2, [r3, #0]
 80a1d90:	4b20      	ldr	r3, [pc, #128]	; (80a1e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1d92:	681a      	ldr	r2, [r3, #0]
 80a1d94:	07d2      	lsls	r2, r2, #31
 80a1d96:	bf5c      	itt	pl
 80a1d98:	2201      	movpl	r2, #1
 80a1d9a:	601a      	strpl	r2, [r3, #0]
 80a1d9c:	4b1e      	ldr	r3, [pc, #120]	; (80a1e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1d9e:	681a      	ldr	r2, [r3, #0]
 80a1da0:	07d0      	lsls	r0, r2, #31
 80a1da2:	bf5c      	itt	pl
 80a1da4:	2201      	movpl	r2, #1
 80a1da6:	601a      	strpl	r2, [r3, #0]
 80a1da8:	4b1c      	ldr	r3, [pc, #112]	; (80a1e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1daa:	681a      	ldr	r2, [r3, #0]
 80a1dac:	07d1      	lsls	r1, r2, #31
 80a1dae:	bf5c      	itt	pl
 80a1db0:	2201      	movpl	r2, #1
 80a1db2:	601a      	strpl	r2, [r3, #0]
 80a1db4:	4b1a      	ldr	r3, [pc, #104]	; (80a1e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1db6:	681a      	ldr	r2, [r3, #0]
 80a1db8:	07d2      	lsls	r2, r2, #31
 80a1dba:	bf5c      	itt	pl
 80a1dbc:	2201      	movpl	r2, #1
 80a1dbe:	601a      	strpl	r2, [r3, #0]
 80a1dc0:	4b18      	ldr	r3, [pc, #96]	; (80a1e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1dc2:	681a      	ldr	r2, [r3, #0]
 80a1dc4:	07d0      	lsls	r0, r2, #31
 80a1dc6:	bf5c      	itt	pl
 80a1dc8:	2201      	movpl	r2, #1
 80a1dca:	601a      	strpl	r2, [r3, #0]
 80a1dcc:	4b16      	ldr	r3, [pc, #88]	; (80a1e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1dce:	681a      	ldr	r2, [r3, #0]
 80a1dd0:	07d1      	lsls	r1, r2, #31
 80a1dd2:	bf5c      	itt	pl
 80a1dd4:	2201      	movpl	r2, #1
 80a1dd6:	601a      	strpl	r2, [r3, #0]
 80a1dd8:	4b14      	ldr	r3, [pc, #80]	; (80a1e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1dda:	681a      	ldr	r2, [r3, #0]
 80a1ddc:	07d2      	lsls	r2, r2, #31
 80a1dde:	bf5c      	itt	pl
 80a1de0:	2201      	movpl	r2, #1
 80a1de2:	601a      	strpl	r2, [r3, #0]
 80a1de4:	4b12      	ldr	r3, [pc, #72]	; (80a1e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1de6:	681a      	ldr	r2, [r3, #0]
 80a1de8:	07d0      	lsls	r0, r2, #31
 80a1dea:	bf5c      	itt	pl
 80a1dec:	2201      	movpl	r2, #1
 80a1dee:	601a      	strpl	r2, [r3, #0]
 80a1df0:	4b10      	ldr	r3, [pc, #64]	; (80a1e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1df2:	681a      	ldr	r2, [r3, #0]
 80a1df4:	07d1      	lsls	r1, r2, #31
 80a1df6:	bf5c      	itt	pl
 80a1df8:	2201      	movpl	r2, #1
 80a1dfa:	601a      	strpl	r2, [r3, #0]
 80a1dfc:	4b0e      	ldr	r3, [pc, #56]	; (80a1e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1dfe:	681a      	ldr	r2, [r3, #0]
 80a1e00:	07d2      	lsls	r2, r2, #31
 80a1e02:	bf5c      	itt	pl
 80a1e04:	2201      	movpl	r2, #1
 80a1e06:	601a      	strpl	r2, [r3, #0]
 80a1e08:	4770      	bx	lr
 80a1e0a:	bf00      	nop
 80a1e0c:	200008c0 	.word	0x200008c0
 80a1e10:	200008bc 	.word	0x200008bc
 80a1e14:	200008b8 	.word	0x200008b8
 80a1e18:	200008b4 	.word	0x200008b4
 80a1e1c:	200008b0 	.word	0x200008b0
 80a1e20:	200008ac 	.word	0x200008ac
 80a1e24:	200008a8 	.word	0x200008a8
 80a1e28:	200008a4 	.word	0x200008a4
 80a1e2c:	200008a0 	.word	0x200008a0
 80a1e30:	2000089c 	.word	0x2000089c
 80a1e34:	20000898 	.word	0x20000898
 80a1e38:	20000894 	.word	0x20000894

080a1e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1e3c:	4b18      	ldr	r3, [pc, #96]	; (80a1ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1e3e:	681a      	ldr	r2, [r3, #0]
 80a1e40:	07d1      	lsls	r1, r2, #31
 80a1e42:	bf5c      	itt	pl
 80a1e44:	2201      	movpl	r2, #1
 80a1e46:	601a      	strpl	r2, [r3, #0]
 80a1e48:	4b16      	ldr	r3, [pc, #88]	; (80a1ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1e4a:	681a      	ldr	r2, [r3, #0]
 80a1e4c:	07d2      	lsls	r2, r2, #31
 80a1e4e:	bf5c      	itt	pl
 80a1e50:	2201      	movpl	r2, #1
 80a1e52:	601a      	strpl	r2, [r3, #0]
 80a1e54:	4b14      	ldr	r3, [pc, #80]	; (80a1ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1e56:	681a      	ldr	r2, [r3, #0]
 80a1e58:	07d0      	lsls	r0, r2, #31
 80a1e5a:	bf5c      	itt	pl
 80a1e5c:	2201      	movpl	r2, #1
 80a1e5e:	601a      	strpl	r2, [r3, #0]
 80a1e60:	4b12      	ldr	r3, [pc, #72]	; (80a1eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1e62:	681a      	ldr	r2, [r3, #0]
 80a1e64:	07d1      	lsls	r1, r2, #31
 80a1e66:	bf5c      	itt	pl
 80a1e68:	2201      	movpl	r2, #1
 80a1e6a:	601a      	strpl	r2, [r3, #0]
 80a1e6c:	4b10      	ldr	r3, [pc, #64]	; (80a1eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1e6e:	681a      	ldr	r2, [r3, #0]
 80a1e70:	07d2      	lsls	r2, r2, #31
 80a1e72:	bf5c      	itt	pl
 80a1e74:	2201      	movpl	r2, #1
 80a1e76:	601a      	strpl	r2, [r3, #0]
 80a1e78:	4b0e      	ldr	r3, [pc, #56]	; (80a1eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1e7a:	681a      	ldr	r2, [r3, #0]
 80a1e7c:	07d0      	lsls	r0, r2, #31
 80a1e7e:	bf5c      	itt	pl
 80a1e80:	2201      	movpl	r2, #1
 80a1e82:	601a      	strpl	r2, [r3, #0]
 80a1e84:	4b0c      	ldr	r3, [pc, #48]	; (80a1eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1e86:	681a      	ldr	r2, [r3, #0]
 80a1e88:	07d1      	lsls	r1, r2, #31
 80a1e8a:	bf5c      	itt	pl
 80a1e8c:	2201      	movpl	r2, #1
 80a1e8e:	601a      	strpl	r2, [r3, #0]
 80a1e90:	4b0a      	ldr	r3, [pc, #40]	; (80a1ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1e92:	681a      	ldr	r2, [r3, #0]
 80a1e94:	07d2      	lsls	r2, r2, #31
 80a1e96:	bf5c      	itt	pl
 80a1e98:	2201      	movpl	r2, #1
 80a1e9a:	601a      	strpl	r2, [r3, #0]
 80a1e9c:	4770      	bx	lr
 80a1e9e:	bf00      	nop
 80a1ea0:	200008e0 	.word	0x200008e0
 80a1ea4:	200008dc 	.word	0x200008dc
 80a1ea8:	200008d8 	.word	0x200008d8
 80a1eac:	200008d4 	.word	0x200008d4
 80a1eb0:	200008d0 	.word	0x200008d0
 80a1eb4:	200008cc 	.word	0x200008cc
 80a1eb8:	200008c8 	.word	0x200008c8
 80a1ebc:	200008c4 	.word	0x200008c4

080a1ec0 <__aeabi_drsub>:
 80a1ec0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1ec4:	e002      	b.n	80a1ecc <__adddf3>
 80a1ec6:	bf00      	nop

080a1ec8 <__aeabi_dsub>:
 80a1ec8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1ecc <__adddf3>:
 80a1ecc:	b530      	push	{r4, r5, lr}
 80a1ece:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1ed2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1ed6:	ea94 0f05 	teq	r4, r5
 80a1eda:	bf08      	it	eq
 80a1edc:	ea90 0f02 	teqeq	r0, r2
 80a1ee0:	bf1f      	itttt	ne
 80a1ee2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1ee6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1eea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1eee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1ef2:	f000 80e2 	beq.w	80a20ba <__adddf3+0x1ee>
 80a1ef6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1efa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1efe:	bfb8      	it	lt
 80a1f00:	426d      	neglt	r5, r5
 80a1f02:	dd0c      	ble.n	80a1f1e <__adddf3+0x52>
 80a1f04:	442c      	add	r4, r5
 80a1f06:	ea80 0202 	eor.w	r2, r0, r2
 80a1f0a:	ea81 0303 	eor.w	r3, r1, r3
 80a1f0e:	ea82 0000 	eor.w	r0, r2, r0
 80a1f12:	ea83 0101 	eor.w	r1, r3, r1
 80a1f16:	ea80 0202 	eor.w	r2, r0, r2
 80a1f1a:	ea81 0303 	eor.w	r3, r1, r3
 80a1f1e:	2d36      	cmp	r5, #54	; 0x36
 80a1f20:	bf88      	it	hi
 80a1f22:	bd30      	pophi	{r4, r5, pc}
 80a1f24:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1f28:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1f2c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1f30:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1f34:	d002      	beq.n	80a1f3c <__adddf3+0x70>
 80a1f36:	4240      	negs	r0, r0
 80a1f38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1f3c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1f40:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1f44:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1f48:	d002      	beq.n	80a1f50 <__adddf3+0x84>
 80a1f4a:	4252      	negs	r2, r2
 80a1f4c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1f50:	ea94 0f05 	teq	r4, r5
 80a1f54:	f000 80a7 	beq.w	80a20a6 <__adddf3+0x1da>
 80a1f58:	f1a4 0401 	sub.w	r4, r4, #1
 80a1f5c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1f60:	db0d      	blt.n	80a1f7e <__adddf3+0xb2>
 80a1f62:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1f66:	fa22 f205 	lsr.w	r2, r2, r5
 80a1f6a:	1880      	adds	r0, r0, r2
 80a1f6c:	f141 0100 	adc.w	r1, r1, #0
 80a1f70:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1f74:	1880      	adds	r0, r0, r2
 80a1f76:	fa43 f305 	asr.w	r3, r3, r5
 80a1f7a:	4159      	adcs	r1, r3
 80a1f7c:	e00e      	b.n	80a1f9c <__adddf3+0xd0>
 80a1f7e:	f1a5 0520 	sub.w	r5, r5, #32
 80a1f82:	f10e 0e20 	add.w	lr, lr, #32
 80a1f86:	2a01      	cmp	r2, #1
 80a1f88:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1f8c:	bf28      	it	cs
 80a1f8e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1f92:	fa43 f305 	asr.w	r3, r3, r5
 80a1f96:	18c0      	adds	r0, r0, r3
 80a1f98:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1f9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1fa0:	d507      	bpl.n	80a1fb2 <__adddf3+0xe6>
 80a1fa2:	f04f 0e00 	mov.w	lr, #0
 80a1fa6:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1faa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1fae:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1fb2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1fb6:	d31b      	bcc.n	80a1ff0 <__adddf3+0x124>
 80a1fb8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1fbc:	d30c      	bcc.n	80a1fd8 <__adddf3+0x10c>
 80a1fbe:	0849      	lsrs	r1, r1, #1
 80a1fc0:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1fc4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1fc8:	f104 0401 	add.w	r4, r4, #1
 80a1fcc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1fd0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1fd4:	f080 809a 	bcs.w	80a210c <__adddf3+0x240>
 80a1fd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1fdc:	bf08      	it	eq
 80a1fde:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1fe2:	f150 0000 	adcs.w	r0, r0, #0
 80a1fe6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1fea:	ea41 0105 	orr.w	r1, r1, r5
 80a1fee:	bd30      	pop	{r4, r5, pc}
 80a1ff0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1ff4:	4140      	adcs	r0, r0
 80a1ff6:	eb41 0101 	adc.w	r1, r1, r1
 80a1ffa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1ffe:	f1a4 0401 	sub.w	r4, r4, #1
 80a2002:	d1e9      	bne.n	80a1fd8 <__adddf3+0x10c>
 80a2004:	f091 0f00 	teq	r1, #0
 80a2008:	bf04      	itt	eq
 80a200a:	4601      	moveq	r1, r0
 80a200c:	2000      	moveq	r0, #0
 80a200e:	fab1 f381 	clz	r3, r1
 80a2012:	bf08      	it	eq
 80a2014:	3320      	addeq	r3, #32
 80a2016:	f1a3 030b 	sub.w	r3, r3, #11
 80a201a:	f1b3 0220 	subs.w	r2, r3, #32
 80a201e:	da0c      	bge.n	80a203a <__adddf3+0x16e>
 80a2020:	320c      	adds	r2, #12
 80a2022:	dd08      	ble.n	80a2036 <__adddf3+0x16a>
 80a2024:	f102 0c14 	add.w	ip, r2, #20
 80a2028:	f1c2 020c 	rsb	r2, r2, #12
 80a202c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2030:	fa21 f102 	lsr.w	r1, r1, r2
 80a2034:	e00c      	b.n	80a2050 <__adddf3+0x184>
 80a2036:	f102 0214 	add.w	r2, r2, #20
 80a203a:	bfd8      	it	le
 80a203c:	f1c2 0c20 	rsble	ip, r2, #32
 80a2040:	fa01 f102 	lsl.w	r1, r1, r2
 80a2044:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2048:	bfdc      	itt	le
 80a204a:	ea41 010c 	orrle.w	r1, r1, ip
 80a204e:	4090      	lslle	r0, r2
 80a2050:	1ae4      	subs	r4, r4, r3
 80a2052:	bfa2      	ittt	ge
 80a2054:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2058:	4329      	orrge	r1, r5
 80a205a:	bd30      	popge	{r4, r5, pc}
 80a205c:	ea6f 0404 	mvn.w	r4, r4
 80a2060:	3c1f      	subs	r4, #31
 80a2062:	da1c      	bge.n	80a209e <__adddf3+0x1d2>
 80a2064:	340c      	adds	r4, #12
 80a2066:	dc0e      	bgt.n	80a2086 <__adddf3+0x1ba>
 80a2068:	f104 0414 	add.w	r4, r4, #20
 80a206c:	f1c4 0220 	rsb	r2, r4, #32
 80a2070:	fa20 f004 	lsr.w	r0, r0, r4
 80a2074:	fa01 f302 	lsl.w	r3, r1, r2
 80a2078:	ea40 0003 	orr.w	r0, r0, r3
 80a207c:	fa21 f304 	lsr.w	r3, r1, r4
 80a2080:	ea45 0103 	orr.w	r1, r5, r3
 80a2084:	bd30      	pop	{r4, r5, pc}
 80a2086:	f1c4 040c 	rsb	r4, r4, #12
 80a208a:	f1c4 0220 	rsb	r2, r4, #32
 80a208e:	fa20 f002 	lsr.w	r0, r0, r2
 80a2092:	fa01 f304 	lsl.w	r3, r1, r4
 80a2096:	ea40 0003 	orr.w	r0, r0, r3
 80a209a:	4629      	mov	r1, r5
 80a209c:	bd30      	pop	{r4, r5, pc}
 80a209e:	fa21 f004 	lsr.w	r0, r1, r4
 80a20a2:	4629      	mov	r1, r5
 80a20a4:	bd30      	pop	{r4, r5, pc}
 80a20a6:	f094 0f00 	teq	r4, #0
 80a20aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a20ae:	bf06      	itte	eq
 80a20b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a20b4:	3401      	addeq	r4, #1
 80a20b6:	3d01      	subne	r5, #1
 80a20b8:	e74e      	b.n	80a1f58 <__adddf3+0x8c>
 80a20ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a20be:	bf18      	it	ne
 80a20c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a20c4:	d029      	beq.n	80a211a <__adddf3+0x24e>
 80a20c6:	ea94 0f05 	teq	r4, r5
 80a20ca:	bf08      	it	eq
 80a20cc:	ea90 0f02 	teqeq	r0, r2
 80a20d0:	d005      	beq.n	80a20de <__adddf3+0x212>
 80a20d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80a20d6:	bf04      	itt	eq
 80a20d8:	4619      	moveq	r1, r3
 80a20da:	4610      	moveq	r0, r2
 80a20dc:	bd30      	pop	{r4, r5, pc}
 80a20de:	ea91 0f03 	teq	r1, r3
 80a20e2:	bf1e      	ittt	ne
 80a20e4:	2100      	movne	r1, #0
 80a20e6:	2000      	movne	r0, #0
 80a20e8:	bd30      	popne	{r4, r5, pc}
 80a20ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a20ee:	d105      	bne.n	80a20fc <__adddf3+0x230>
 80a20f0:	0040      	lsls	r0, r0, #1
 80a20f2:	4149      	adcs	r1, r1
 80a20f4:	bf28      	it	cs
 80a20f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a20fa:	bd30      	pop	{r4, r5, pc}
 80a20fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2100:	bf3c      	itt	cc
 80a2102:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2106:	bd30      	popcc	{r4, r5, pc}
 80a2108:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a210c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2110:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2114:	f04f 0000 	mov.w	r0, #0
 80a2118:	bd30      	pop	{r4, r5, pc}
 80a211a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a211e:	bf1a      	itte	ne
 80a2120:	4619      	movne	r1, r3
 80a2122:	4610      	movne	r0, r2
 80a2124:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2128:	bf1c      	itt	ne
 80a212a:	460b      	movne	r3, r1
 80a212c:	4602      	movne	r2, r0
 80a212e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2132:	bf06      	itte	eq
 80a2134:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2138:	ea91 0f03 	teqeq	r1, r3
 80a213c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2140:	bd30      	pop	{r4, r5, pc}
 80a2142:	bf00      	nop

080a2144 <__aeabi_ui2d>:
 80a2144:	f090 0f00 	teq	r0, #0
 80a2148:	bf04      	itt	eq
 80a214a:	2100      	moveq	r1, #0
 80a214c:	4770      	bxeq	lr
 80a214e:	b530      	push	{r4, r5, lr}
 80a2150:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2154:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2158:	f04f 0500 	mov.w	r5, #0
 80a215c:	f04f 0100 	mov.w	r1, #0
 80a2160:	e750      	b.n	80a2004 <__adddf3+0x138>
 80a2162:	bf00      	nop

080a2164 <__aeabi_i2d>:
 80a2164:	f090 0f00 	teq	r0, #0
 80a2168:	bf04      	itt	eq
 80a216a:	2100      	moveq	r1, #0
 80a216c:	4770      	bxeq	lr
 80a216e:	b530      	push	{r4, r5, lr}
 80a2170:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2174:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2178:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a217c:	bf48      	it	mi
 80a217e:	4240      	negmi	r0, r0
 80a2180:	f04f 0100 	mov.w	r1, #0
 80a2184:	e73e      	b.n	80a2004 <__adddf3+0x138>
 80a2186:	bf00      	nop

080a2188 <__aeabi_f2d>:
 80a2188:	0042      	lsls	r2, r0, #1
 80a218a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a218e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2192:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2196:	bf1f      	itttt	ne
 80a2198:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a219c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a21a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a21a4:	4770      	bxne	lr
 80a21a6:	f092 0f00 	teq	r2, #0
 80a21aa:	bf14      	ite	ne
 80a21ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a21b0:	4770      	bxeq	lr
 80a21b2:	b530      	push	{r4, r5, lr}
 80a21b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a21b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a21bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a21c0:	e720      	b.n	80a2004 <__adddf3+0x138>
 80a21c2:	bf00      	nop

080a21c4 <__aeabi_ul2d>:
 80a21c4:	ea50 0201 	orrs.w	r2, r0, r1
 80a21c8:	bf08      	it	eq
 80a21ca:	4770      	bxeq	lr
 80a21cc:	b530      	push	{r4, r5, lr}
 80a21ce:	f04f 0500 	mov.w	r5, #0
 80a21d2:	e00a      	b.n	80a21ea <__aeabi_l2d+0x16>

080a21d4 <__aeabi_l2d>:
 80a21d4:	ea50 0201 	orrs.w	r2, r0, r1
 80a21d8:	bf08      	it	eq
 80a21da:	4770      	bxeq	lr
 80a21dc:	b530      	push	{r4, r5, lr}
 80a21de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a21e2:	d502      	bpl.n	80a21ea <__aeabi_l2d+0x16>
 80a21e4:	4240      	negs	r0, r0
 80a21e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a21ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a21ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a21f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a21f6:	f43f aedc 	beq.w	80a1fb2 <__adddf3+0xe6>
 80a21fa:	f04f 0203 	mov.w	r2, #3
 80a21fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2202:	bf18      	it	ne
 80a2204:	3203      	addne	r2, #3
 80a2206:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a220a:	bf18      	it	ne
 80a220c:	3203      	addne	r2, #3
 80a220e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2212:	f1c2 0320 	rsb	r3, r2, #32
 80a2216:	fa00 fc03 	lsl.w	ip, r0, r3
 80a221a:	fa20 f002 	lsr.w	r0, r0, r2
 80a221e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2222:	ea40 000e 	orr.w	r0, r0, lr
 80a2226:	fa21 f102 	lsr.w	r1, r1, r2
 80a222a:	4414      	add	r4, r2
 80a222c:	e6c1      	b.n	80a1fb2 <__adddf3+0xe6>
 80a222e:	bf00      	nop

080a2230 <__gedf2>:
 80a2230:	f04f 3cff 	mov.w	ip, #4294967295
 80a2234:	e006      	b.n	80a2244 <__cmpdf2+0x4>
 80a2236:	bf00      	nop

080a2238 <__ledf2>:
 80a2238:	f04f 0c01 	mov.w	ip, #1
 80a223c:	e002      	b.n	80a2244 <__cmpdf2+0x4>
 80a223e:	bf00      	nop

080a2240 <__cmpdf2>:
 80a2240:	f04f 0c01 	mov.w	ip, #1
 80a2244:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2248:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a224c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2250:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2254:	bf18      	it	ne
 80a2256:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a225a:	d01b      	beq.n	80a2294 <__cmpdf2+0x54>
 80a225c:	b001      	add	sp, #4
 80a225e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2262:	bf0c      	ite	eq
 80a2264:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2268:	ea91 0f03 	teqne	r1, r3
 80a226c:	bf02      	ittt	eq
 80a226e:	ea90 0f02 	teqeq	r0, r2
 80a2272:	2000      	moveq	r0, #0
 80a2274:	4770      	bxeq	lr
 80a2276:	f110 0f00 	cmn.w	r0, #0
 80a227a:	ea91 0f03 	teq	r1, r3
 80a227e:	bf58      	it	pl
 80a2280:	4299      	cmppl	r1, r3
 80a2282:	bf08      	it	eq
 80a2284:	4290      	cmpeq	r0, r2
 80a2286:	bf2c      	ite	cs
 80a2288:	17d8      	asrcs	r0, r3, #31
 80a228a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a228e:	f040 0001 	orr.w	r0, r0, #1
 80a2292:	4770      	bx	lr
 80a2294:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2298:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a229c:	d102      	bne.n	80a22a4 <__cmpdf2+0x64>
 80a229e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a22a2:	d107      	bne.n	80a22b4 <__cmpdf2+0x74>
 80a22a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a22a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a22ac:	d1d6      	bne.n	80a225c <__cmpdf2+0x1c>
 80a22ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a22b2:	d0d3      	beq.n	80a225c <__cmpdf2+0x1c>
 80a22b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a22b8:	4770      	bx	lr
 80a22ba:	bf00      	nop

080a22bc <__aeabi_cdrcmple>:
 80a22bc:	4684      	mov	ip, r0
 80a22be:	4610      	mov	r0, r2
 80a22c0:	4662      	mov	r2, ip
 80a22c2:	468c      	mov	ip, r1
 80a22c4:	4619      	mov	r1, r3
 80a22c6:	4663      	mov	r3, ip
 80a22c8:	e000      	b.n	80a22cc <__aeabi_cdcmpeq>
 80a22ca:	bf00      	nop

080a22cc <__aeabi_cdcmpeq>:
 80a22cc:	b501      	push	{r0, lr}
 80a22ce:	f7ff ffb7 	bl	80a2240 <__cmpdf2>
 80a22d2:	2800      	cmp	r0, #0
 80a22d4:	bf48      	it	mi
 80a22d6:	f110 0f00 	cmnmi.w	r0, #0
 80a22da:	bd01      	pop	{r0, pc}

080a22dc <__aeabi_dcmpeq>:
 80a22dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a22e0:	f7ff fff4 	bl	80a22cc <__aeabi_cdcmpeq>
 80a22e4:	bf0c      	ite	eq
 80a22e6:	2001      	moveq	r0, #1
 80a22e8:	2000      	movne	r0, #0
 80a22ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80a22ee:	bf00      	nop

080a22f0 <__aeabi_dcmplt>:
 80a22f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a22f4:	f7ff ffea 	bl	80a22cc <__aeabi_cdcmpeq>
 80a22f8:	bf34      	ite	cc
 80a22fa:	2001      	movcc	r0, #1
 80a22fc:	2000      	movcs	r0, #0
 80a22fe:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2302:	bf00      	nop

080a2304 <__aeabi_dcmple>:
 80a2304:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2308:	f7ff ffe0 	bl	80a22cc <__aeabi_cdcmpeq>
 80a230c:	bf94      	ite	ls
 80a230e:	2001      	movls	r0, #1
 80a2310:	2000      	movhi	r0, #0
 80a2312:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2316:	bf00      	nop

080a2318 <__aeabi_dcmpge>:
 80a2318:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a231c:	f7ff ffce 	bl	80a22bc <__aeabi_cdrcmple>
 80a2320:	bf94      	ite	ls
 80a2322:	2001      	movls	r0, #1
 80a2324:	2000      	movhi	r0, #0
 80a2326:	f85d fb08 	ldr.w	pc, [sp], #8
 80a232a:	bf00      	nop

080a232c <__aeabi_dcmpgt>:
 80a232c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2330:	f7ff ffc4 	bl	80a22bc <__aeabi_cdrcmple>
 80a2334:	bf34      	ite	cc
 80a2336:	2001      	movcc	r0, #1
 80a2338:	2000      	movcs	r0, #0
 80a233a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a233e:	bf00      	nop

080a2340 <__aeabi_fmul>:
 80a2340:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2344:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2348:	bf1e      	ittt	ne
 80a234a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a234e:	ea92 0f0c 	teqne	r2, ip
 80a2352:	ea93 0f0c 	teqne	r3, ip
 80a2356:	d06f      	beq.n	80a2438 <__aeabi_fmul+0xf8>
 80a2358:	441a      	add	r2, r3
 80a235a:	ea80 0c01 	eor.w	ip, r0, r1
 80a235e:	0240      	lsls	r0, r0, #9
 80a2360:	bf18      	it	ne
 80a2362:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a2366:	d01e      	beq.n	80a23a6 <__aeabi_fmul+0x66>
 80a2368:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a236c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2370:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2374:	fba0 3101 	umull	r3, r1, r0, r1
 80a2378:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a237c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2380:	bf3e      	ittt	cc
 80a2382:	0049      	lslcc	r1, r1, #1
 80a2384:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2388:	005b      	lslcc	r3, r3, #1
 80a238a:	ea40 0001 	orr.w	r0, r0, r1
 80a238e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a2392:	2afd      	cmp	r2, #253	; 0xfd
 80a2394:	d81d      	bhi.n	80a23d2 <__aeabi_fmul+0x92>
 80a2396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a239a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a239e:	bf08      	it	eq
 80a23a0:	f020 0001 	biceq.w	r0, r0, #1
 80a23a4:	4770      	bx	lr
 80a23a6:	f090 0f00 	teq	r0, #0
 80a23aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a23ae:	bf08      	it	eq
 80a23b0:	0249      	lsleq	r1, r1, #9
 80a23b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a23b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a23ba:	3a7f      	subs	r2, #127	; 0x7f
 80a23bc:	bfc2      	ittt	gt
 80a23be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a23c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a23c6:	4770      	bxgt	lr
 80a23c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a23cc:	f04f 0300 	mov.w	r3, #0
 80a23d0:	3a01      	subs	r2, #1
 80a23d2:	dc5d      	bgt.n	80a2490 <__aeabi_fmul+0x150>
 80a23d4:	f112 0f19 	cmn.w	r2, #25
 80a23d8:	bfdc      	itt	le
 80a23da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a23de:	4770      	bxle	lr
 80a23e0:	f1c2 0200 	rsb	r2, r2, #0
 80a23e4:	0041      	lsls	r1, r0, #1
 80a23e6:	fa21 f102 	lsr.w	r1, r1, r2
 80a23ea:	f1c2 0220 	rsb	r2, r2, #32
 80a23ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80a23f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80a23f6:	f140 0000 	adc.w	r0, r0, #0
 80a23fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a23fe:	bf08      	it	eq
 80a2400:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2404:	4770      	bx	lr
 80a2406:	f092 0f00 	teq	r2, #0
 80a240a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a240e:	bf02      	ittt	eq
 80a2410:	0040      	lsleq	r0, r0, #1
 80a2412:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2416:	3a01      	subeq	r2, #1
 80a2418:	d0f9      	beq.n	80a240e <__aeabi_fmul+0xce>
 80a241a:	ea40 000c 	orr.w	r0, r0, ip
 80a241e:	f093 0f00 	teq	r3, #0
 80a2422:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2426:	bf02      	ittt	eq
 80a2428:	0049      	lsleq	r1, r1, #1
 80a242a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a242e:	3b01      	subeq	r3, #1
 80a2430:	d0f9      	beq.n	80a2426 <__aeabi_fmul+0xe6>
 80a2432:	ea41 010c 	orr.w	r1, r1, ip
 80a2436:	e78f      	b.n	80a2358 <__aeabi_fmul+0x18>
 80a2438:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a243c:	ea92 0f0c 	teq	r2, ip
 80a2440:	bf18      	it	ne
 80a2442:	ea93 0f0c 	teqne	r3, ip
 80a2446:	d00a      	beq.n	80a245e <__aeabi_fmul+0x11e>
 80a2448:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a244c:	bf18      	it	ne
 80a244e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2452:	d1d8      	bne.n	80a2406 <__aeabi_fmul+0xc6>
 80a2454:	ea80 0001 	eor.w	r0, r0, r1
 80a2458:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a245c:	4770      	bx	lr
 80a245e:	f090 0f00 	teq	r0, #0
 80a2462:	bf17      	itett	ne
 80a2464:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2468:	4608      	moveq	r0, r1
 80a246a:	f091 0f00 	teqne	r1, #0
 80a246e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a2472:	d014      	beq.n	80a249e <__aeabi_fmul+0x15e>
 80a2474:	ea92 0f0c 	teq	r2, ip
 80a2478:	d101      	bne.n	80a247e <__aeabi_fmul+0x13e>
 80a247a:	0242      	lsls	r2, r0, #9
 80a247c:	d10f      	bne.n	80a249e <__aeabi_fmul+0x15e>
 80a247e:	ea93 0f0c 	teq	r3, ip
 80a2482:	d103      	bne.n	80a248c <__aeabi_fmul+0x14c>
 80a2484:	024b      	lsls	r3, r1, #9
 80a2486:	bf18      	it	ne
 80a2488:	4608      	movne	r0, r1
 80a248a:	d108      	bne.n	80a249e <__aeabi_fmul+0x15e>
 80a248c:	ea80 0001 	eor.w	r0, r0, r1
 80a2490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2494:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2498:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a249c:	4770      	bx	lr
 80a249e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a24a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a24a6:	4770      	bx	lr

080a24a8 <__aeabi_fdiv>:
 80a24a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a24ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a24b0:	bf1e      	ittt	ne
 80a24b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a24b6:	ea92 0f0c 	teqne	r2, ip
 80a24ba:	ea93 0f0c 	teqne	r3, ip
 80a24be:	d069      	beq.n	80a2594 <__aeabi_fdiv+0xec>
 80a24c0:	eba2 0203 	sub.w	r2, r2, r3
 80a24c4:	ea80 0c01 	eor.w	ip, r0, r1
 80a24c8:	0249      	lsls	r1, r1, #9
 80a24ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a24ce:	d037      	beq.n	80a2540 <__aeabi_fdiv+0x98>
 80a24d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a24d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a24d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a24dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a24e0:	428b      	cmp	r3, r1
 80a24e2:	bf38      	it	cc
 80a24e4:	005b      	lslcc	r3, r3, #1
 80a24e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a24ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a24ee:	428b      	cmp	r3, r1
 80a24f0:	bf24      	itt	cs
 80a24f2:	1a5b      	subcs	r3, r3, r1
 80a24f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a24f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a24fc:	bf24      	itt	cs
 80a24fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a2502:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2506:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a250a:	bf24      	itt	cs
 80a250c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2510:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2514:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a2518:	bf24      	itt	cs
 80a251a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a251e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2522:	011b      	lsls	r3, r3, #4
 80a2524:	bf18      	it	ne
 80a2526:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a252a:	d1e0      	bne.n	80a24ee <__aeabi_fdiv+0x46>
 80a252c:	2afd      	cmp	r2, #253	; 0xfd
 80a252e:	f63f af50 	bhi.w	80a23d2 <__aeabi_fmul+0x92>
 80a2532:	428b      	cmp	r3, r1
 80a2534:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2538:	bf08      	it	eq
 80a253a:	f020 0001 	biceq.w	r0, r0, #1
 80a253e:	4770      	bx	lr
 80a2540:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2544:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2548:	327f      	adds	r2, #127	; 0x7f
 80a254a:	bfc2      	ittt	gt
 80a254c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2550:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2554:	4770      	bxgt	lr
 80a2556:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a255a:	f04f 0300 	mov.w	r3, #0
 80a255e:	3a01      	subs	r2, #1
 80a2560:	e737      	b.n	80a23d2 <__aeabi_fmul+0x92>
 80a2562:	f092 0f00 	teq	r2, #0
 80a2566:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a256a:	bf02      	ittt	eq
 80a256c:	0040      	lsleq	r0, r0, #1
 80a256e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2572:	3a01      	subeq	r2, #1
 80a2574:	d0f9      	beq.n	80a256a <__aeabi_fdiv+0xc2>
 80a2576:	ea40 000c 	orr.w	r0, r0, ip
 80a257a:	f093 0f00 	teq	r3, #0
 80a257e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2582:	bf02      	ittt	eq
 80a2584:	0049      	lsleq	r1, r1, #1
 80a2586:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a258a:	3b01      	subeq	r3, #1
 80a258c:	d0f9      	beq.n	80a2582 <__aeabi_fdiv+0xda>
 80a258e:	ea41 010c 	orr.w	r1, r1, ip
 80a2592:	e795      	b.n	80a24c0 <__aeabi_fdiv+0x18>
 80a2594:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2598:	ea92 0f0c 	teq	r2, ip
 80a259c:	d108      	bne.n	80a25b0 <__aeabi_fdiv+0x108>
 80a259e:	0242      	lsls	r2, r0, #9
 80a25a0:	f47f af7d 	bne.w	80a249e <__aeabi_fmul+0x15e>
 80a25a4:	ea93 0f0c 	teq	r3, ip
 80a25a8:	f47f af70 	bne.w	80a248c <__aeabi_fmul+0x14c>
 80a25ac:	4608      	mov	r0, r1
 80a25ae:	e776      	b.n	80a249e <__aeabi_fmul+0x15e>
 80a25b0:	ea93 0f0c 	teq	r3, ip
 80a25b4:	d104      	bne.n	80a25c0 <__aeabi_fdiv+0x118>
 80a25b6:	024b      	lsls	r3, r1, #9
 80a25b8:	f43f af4c 	beq.w	80a2454 <__aeabi_fmul+0x114>
 80a25bc:	4608      	mov	r0, r1
 80a25be:	e76e      	b.n	80a249e <__aeabi_fmul+0x15e>
 80a25c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a25c4:	bf18      	it	ne
 80a25c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a25ca:	d1ca      	bne.n	80a2562 <__aeabi_fdiv+0xba>
 80a25cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a25d0:	f47f af5c 	bne.w	80a248c <__aeabi_fmul+0x14c>
 80a25d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a25d8:	f47f af3c 	bne.w	80a2454 <__aeabi_fmul+0x114>
 80a25dc:	e75f      	b.n	80a249e <__aeabi_fmul+0x15e>
 80a25de:	bf00      	nop

080a25e0 <__gesf2>:
 80a25e0:	f04f 3cff 	mov.w	ip, #4294967295
 80a25e4:	e006      	b.n	80a25f4 <__cmpsf2+0x4>
 80a25e6:	bf00      	nop

080a25e8 <__lesf2>:
 80a25e8:	f04f 0c01 	mov.w	ip, #1
 80a25ec:	e002      	b.n	80a25f4 <__cmpsf2+0x4>
 80a25ee:	bf00      	nop

080a25f0 <__cmpsf2>:
 80a25f0:	f04f 0c01 	mov.w	ip, #1
 80a25f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a25f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a25fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2600:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2604:	bf18      	it	ne
 80a2606:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a260a:	d011      	beq.n	80a2630 <__cmpsf2+0x40>
 80a260c:	b001      	add	sp, #4
 80a260e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a2612:	bf18      	it	ne
 80a2614:	ea90 0f01 	teqne	r0, r1
 80a2618:	bf58      	it	pl
 80a261a:	ebb2 0003 	subspl.w	r0, r2, r3
 80a261e:	bf88      	it	hi
 80a2620:	17c8      	asrhi	r0, r1, #31
 80a2622:	bf38      	it	cc
 80a2624:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a2628:	bf18      	it	ne
 80a262a:	f040 0001 	orrne.w	r0, r0, #1
 80a262e:	4770      	bx	lr
 80a2630:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2634:	d102      	bne.n	80a263c <__cmpsf2+0x4c>
 80a2636:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a263a:	d105      	bne.n	80a2648 <__cmpsf2+0x58>
 80a263c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2640:	d1e4      	bne.n	80a260c <__cmpsf2+0x1c>
 80a2642:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a2646:	d0e1      	beq.n	80a260c <__cmpsf2+0x1c>
 80a2648:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a264c:	4770      	bx	lr
 80a264e:	bf00      	nop

080a2650 <__aeabi_cfrcmple>:
 80a2650:	4684      	mov	ip, r0
 80a2652:	4608      	mov	r0, r1
 80a2654:	4661      	mov	r1, ip
 80a2656:	e7ff      	b.n	80a2658 <__aeabi_cfcmpeq>

080a2658 <__aeabi_cfcmpeq>:
 80a2658:	b50f      	push	{r0, r1, r2, r3, lr}
 80a265a:	f7ff ffc9 	bl	80a25f0 <__cmpsf2>
 80a265e:	2800      	cmp	r0, #0
 80a2660:	bf48      	it	mi
 80a2662:	f110 0f00 	cmnmi.w	r0, #0
 80a2666:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a2668 <__aeabi_fcmpeq>:
 80a2668:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a266c:	f7ff fff4 	bl	80a2658 <__aeabi_cfcmpeq>
 80a2670:	bf0c      	ite	eq
 80a2672:	2001      	moveq	r0, #1
 80a2674:	2000      	movne	r0, #0
 80a2676:	f85d fb08 	ldr.w	pc, [sp], #8
 80a267a:	bf00      	nop

080a267c <__aeabi_fcmplt>:
 80a267c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2680:	f7ff ffea 	bl	80a2658 <__aeabi_cfcmpeq>
 80a2684:	bf34      	ite	cc
 80a2686:	2001      	movcc	r0, #1
 80a2688:	2000      	movcs	r0, #0
 80a268a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a268e:	bf00      	nop

080a2690 <__aeabi_fcmple>:
 80a2690:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2694:	f7ff ffe0 	bl	80a2658 <__aeabi_cfcmpeq>
 80a2698:	bf94      	ite	ls
 80a269a:	2001      	movls	r0, #1
 80a269c:	2000      	movhi	r0, #0
 80a269e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a26a2:	bf00      	nop

080a26a4 <__aeabi_fcmpge>:
 80a26a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a26a8:	f7ff ffd2 	bl	80a2650 <__aeabi_cfrcmple>
 80a26ac:	bf94      	ite	ls
 80a26ae:	2001      	movls	r0, #1
 80a26b0:	2000      	movhi	r0, #0
 80a26b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a26b6:	bf00      	nop

080a26b8 <__aeabi_fcmpgt>:
 80a26b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a26bc:	f7ff ffc8 	bl	80a2650 <__aeabi_cfrcmple>
 80a26c0:	bf34      	ite	cc
 80a26c2:	2001      	movcc	r0, #1
 80a26c4:	2000      	movcs	r0, #0
 80a26c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a26ca:	bf00      	nop

080a26cc <__aeabi_f2uiz>:
 80a26cc:	0042      	lsls	r2, r0, #1
 80a26ce:	d20e      	bcs.n	80a26ee <__aeabi_f2uiz+0x22>
 80a26d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a26d4:	d30b      	bcc.n	80a26ee <__aeabi_f2uiz+0x22>
 80a26d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a26da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a26de:	d409      	bmi.n	80a26f4 <__aeabi_f2uiz+0x28>
 80a26e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a26e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a26e8:	fa23 f002 	lsr.w	r0, r3, r2
 80a26ec:	4770      	bx	lr
 80a26ee:	f04f 0000 	mov.w	r0, #0
 80a26f2:	4770      	bx	lr
 80a26f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a26f8:	d101      	bne.n	80a26fe <__aeabi_f2uiz+0x32>
 80a26fa:	0242      	lsls	r2, r0, #9
 80a26fc:	d102      	bne.n	80a2704 <__aeabi_f2uiz+0x38>
 80a26fe:	f04f 30ff 	mov.w	r0, #4294967295
 80a2702:	4770      	bx	lr
 80a2704:	f04f 0000 	mov.w	r0, #0
 80a2708:	4770      	bx	lr
 80a270a:	bf00      	nop

080a270c <__cxa_atexit>:
 80a270c:	b510      	push	{r4, lr}
 80a270e:	4c05      	ldr	r4, [pc, #20]	; (80a2724 <__cxa_atexit+0x18>)
 80a2710:	4613      	mov	r3, r2
 80a2712:	b12c      	cbz	r4, 80a2720 <__cxa_atexit+0x14>
 80a2714:	460a      	mov	r2, r1
 80a2716:	4601      	mov	r1, r0
 80a2718:	2002      	movs	r0, #2
 80a271a:	f3af 8000 	nop.w
 80a271e:	bd10      	pop	{r4, pc}
 80a2720:	4620      	mov	r0, r4
 80a2722:	bd10      	pop	{r4, pc}
 80a2724:	00000000 	.word	0x00000000

080a2728 <memcpy>:
 80a2728:	b510      	push	{r4, lr}
 80a272a:	1e43      	subs	r3, r0, #1
 80a272c:	440a      	add	r2, r1
 80a272e:	4291      	cmp	r1, r2
 80a2730:	d004      	beq.n	80a273c <memcpy+0x14>
 80a2732:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2736:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a273a:	e7f8      	b.n	80a272e <memcpy+0x6>
 80a273c:	bd10      	pop	{r4, pc}

080a273e <memset>:
 80a273e:	4603      	mov	r3, r0
 80a2740:	4402      	add	r2, r0
 80a2742:	4293      	cmp	r3, r2
 80a2744:	d002      	beq.n	80a274c <memset+0xe>
 80a2746:	f803 1b01 	strb.w	r1, [r3], #1
 80a274a:	e7fa      	b.n	80a2742 <memset+0x4>
 80a274c:	4770      	bx	lr

080a274e <strlen>:
 80a274e:	4603      	mov	r3, r0
 80a2750:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2754:	2a00      	cmp	r2, #0
 80a2756:	d1fb      	bne.n	80a2750 <strlen+0x2>
 80a2758:	1a18      	subs	r0, r3, r0
 80a275a:	3801      	subs	r0, #1
 80a275c:	4770      	bx	lr

080a275e <link_code_end>:
	...

080a2760 <dynalib_user>:
 80a2760:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2770:	0000 0000 7453 7261 6974 676e 2500 2c64     ....Starting.%d,
 80a2780:	6425 252c 0064 6f6e 7320 6d61 6c70 0065     %d,%d.no sample.
 80a2790:	6573 736e 726f 3020 003a 7c20 0020 6573     sensor 0:. | .se
 80a27a0:	736e 726f 3120 003a 6573 736e 726f 3220     nsor 1:.sensor 2
 80a27b0:	003a 6573 736e 726f 3320 003a 5420 4d49     :.sensor 3:. TIM
 80a27c0:	4f45 5455 0000 0000                         EOUT....

080a27c8 <_ZTV9LIS3DHI2C>:
	...
 80a27d0:	0fdd 080a 0fdf 080a 1033 080a 0feb 080a     ........3.......

080a27e0 <_ZTV8SPIClass>:
	...
 80a27e8:	13e1 080a 13e3 080a 0066 6e6c 6600 006e     ........f.ln.fn.
 80a27f8:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
 80a2808:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
 80a2818:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
 80a2828:	7465 6961 736c 3d20 0020 6162 6475 5300     etails = .baud.S
 80a2838:	7265 6169 006c 5355 5342 7265 6169 316c     erial.USBSerial1
 80a2848:	7400 7079 0065 6170 6172 006d 6d63 0064     .type.param.cmd.
 80a2858:	6469 6800 646e 7300 7274 006d 6966 746c     id.hnd.strm.filt
 80a2868:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
 80a2878:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
 80a2888:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
 80a2898:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
 80a28a8:	7061 0070 6f6e 656e 7400 6172 6563 6900     app.none.trace.i
 80a28b8:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
 80a28c8:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
 80a28d8:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
 80a28e8:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
 80a28f8:	0065 0000                                   e...

080a28fc <_ZTV9IPAddress>:
	...
 80a2904:	172b 080a 171d 080a 171f 080a               +...........

080a2910 <_ZTV9USBSerial>:
	...
 80a2918:	1795 080a 17d9 080a 17b3 080a 1425 080a     ............%...
 80a2928:	17ad 080a 1797 080a 179f 080a 17d3 080a     ................
 80a2938:	17a7 080a 1791 080a                         ........

080a2940 <_ZTV11USARTSerial>:
	...
 80a2948:	1905 080a 1929 080a 1935 080a 1425 080a     ....)...5...%...
 80a2958:	1911 080a 191d 080a 1917 080a 1923 080a     ............#...
 80a2968:	1907 080a 190b 080a                         ........

080a2970 <_ZTV7TwoWire>:
	...
 80a2978:	19d9 080a 1a23 080a 19fb 080a 19db 080a     ....#...........
 80a2988:	1a03 080a 1a0b 080a 1a13 080a 1a1b 080a     ................

080a2998 <_ZTVN5spark9WiFiClassE>:
	...
 80a29a0:	1aab 080a                                   ....

080a29a4 <link_const_variable_data_end>:
 80a29a4:	080a0395 	.word	0x080a0395
 80a29a8:	080a0fd9 	.word	0x080a0fd9
 80a29ac:	080a1119 	.word	0x080a1119
 80a29b0:	080a141f 	.word	0x080a141f
 80a29b4:	080a15c1 	.word	0x080a15c1
 80a29b8:	080a15d1 	.word	0x080a15d1
 80a29bc:	080a1ab5 	.word	0x080a1ab5
 80a29c0:	080a1b71 	.word	0x080a1b71
 80a29c4:	080a1bb5 	.word	0x080a1bb5
 80a29c8:	080a1c31 	.word	0x080a1c31
 80a29cc:	080a1cb5 	.word	0x080a1cb5
 80a29d0:	080a1d79 	.word	0x080a1d79
 80a29d4:	080a1e3d 	.word	0x080a1e3d

080a29d8 <link_constructors_end>:
	...
